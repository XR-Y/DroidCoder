{
  "QuickNovel/33" : [ "setStringSet(R.string.p_default_reminders_key, listOf(NOTIFY_AT_DEADLINE, NOTIFY_AFTER_DEADLINE).filter {\n    pref and it > 0\n}.map {\n    it.toString()\n}.toHashSet())\n--------------------------------------------------\n                    ?.filterNot { (key, _) -> ignoreKeys.contains(key) }\n                    ?.forEach { (key, value) -> preferences.setStringSet(key, value as HashSet<String>)}\r\n            if (version < Upgrader.V8_2) {", "fun setStringSet(key: String, newValue: Set<String>) {\r\n        val editor = prefs.edit()\r\n        editor.putStringSet(key, newValue)\r\n        editor.apply()\r\n    }" ],
  "QuickNovel/34" : [ "\n            folderNotifyNewMailMode = getEnumStringPref<FolderMode>(\r\n                storage,\n--------------------------------------------------\n            val draftsFolderId = storage.getString(\"$accountUuid.draftsFolderId\", null)?.toLongOrNull()\n            val draftsFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val sentFolderId = storage.getString(\"$accountUuid.sentFolderId\", null)?.toLongOrNull()\n            val sentFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val trashFolderId = storage.getString(\"$accountUuid.trashFolderId\", null)?.toLongOrNull()\n            val trashFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val archiveFolderId = storage.getString(\"$accountUuid.archiveFolderId\", null)?.toLongOrNull()\n            val archiveFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val spamFolderId = storage.getString(\"$accountUuid.spamFolderId\", null)?.toLongOrNull()\n            val spamFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n\n            expungePolicy = getEnumStringPref(storage, \"$accountUuid.expungePolicy\", Expunge.EXPUNGE_IMMEDIATELY)\r\n            isSyncRemoteDeletions = storage.getBoolean(\"$accountUuid.syncRemoteDeletions\", true)\n--------------------------------------------------\n            maximumAutoDownloadMessageSize = storage.getInt(\"$accountUuid.maximumAutoDownloadMessageSize\", 32768)\n            messageFormat = getEnumStringPref(storage, \"$accountUuid.messageFormat\", DEFAULT_MESSAGE_FORMAT)\r\n            val messageFormatAuto = storage.getBoolean(\"$accountUuid.messageFormatAuto\", DEFAULT_MESSAGE_FORMAT_AUTO)\n--------------------------------------------------\n            isMessageReadReceipt = storage.getBoolean(\"$accountUuid.messageReadReceipt\", DEFAULT_MESSAGE_READ_RECEIPT)\n            quoteStyle = getEnumStringPref<QuoteStyle>(storage, \"$accountUuid.quoteStyle\", DEFAULT_QUOTE_STYLE)\r\n            quotePrefix = storage.getString(\"$accountUuid.quotePrefix\", DEFAULT_QUOTE_PREFIX)\n--------------------------------------------------\n\n            sortType = getEnumStringPref<SortType>(storage, \"$accountUuid.sortTypeEnum\", SortType.SORT_DATE)\r\n\n--------------------------------------------------\n\n            showPictures = getEnumStringPref<ShowPictures>(storage, \"$accountUuid.showPicturesEnum\", ShowPictures.NEVER)\r\n\n--------------------------------------------------\n                    ringtone = storage.getString(\"$accountUuid.ringtone\", DEFAULT_RINGTONE_URI),\n                    light = getEnumStringPref(storage, \"$accountUuid.notificationLight\", NotificationLight.Disabled),\r\n                    vibration = NotificationVibration(\n--------------------------------------------------\n            folderDisplayMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderDisplayMode\", FolderMode.NOT_SECOND_CLASS)\r\n\n--------------------------------------------------\n            folderSyncMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderSyncMode\", FolderMode.FIRST_CLASS)\r\n\n--------------------------------------------------\n\n            folderPushMode = getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderPushMode\", FolderMode.NONE)\r\n\n--------------------------------------------------\n            folderTargetMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderTargetMode\", FolderMode.NOT_SECOND_CLASS)\r\n\n--------------------------------------------------\n\n            searchableFolders = getEnumStringPref<Searchable>(storage, \"$accountUuid.searchableFolders\", Searchable.ALL)\r\n", "import android.os.Bundle\ninline fun <reified T : Enum<T>> Bundle.getEnum(key: String, defaultValue: T): T {\r\n    val value = getString(key) ?: return defaultValue\r\n    return enumValueOf(value)\r\n}\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Neo-Backup/171" : [ "StringBuilder().select(fields).from(table)\n--------------------------------------------------\n{\n        val source = getTask(from)\r\n        val targetTaskId = source.uuid\n--------------------------------------------------\nfrom(Task.TABLE)\n--------------------------------------------------\nBottomSheetBehavior.from(bottomSheet)\n--------------------------------------------------\nLayoutInflater.from(context)\n--------------------------------------------------\nNotificationManagerCompat.from(context)\n--------------------------------------------------\nLayoutInflater.from(requireActivity())\n--------------------------------------------------\nDateTime.from(rrule.until)", "import com.todoroo.andlib.data.Table\nfun StringBuilder.from(table: Table?): StringBuilder {\r\n        if (table != null) {\r\n            append(\"FROM $table \")\r\n        }\r\n        return this\r\n    }\nImport(names=[com, todoroo, andlib, data, Table], wildcard=false, alias=null)" ],
  "fcitx5-android/407" : [ "", "override fun onDestroy() {\n        super.onDestroy()\n        _binding = null\n    }" ],
  "QuickNovel/35" : [ "        if (list == null) {\n            var defaultOrder = preferences.getStringValue(prefId)\r\n            if (isNullOrEmpty(defaultOrder)) {\n--------------------------------------------------\n        )\n        preferences.getStringValue(R.string.p_default_recurrence)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n                }\n        preferences.getStringValue(R.string.p_default_location)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n        if (tags.isEmpty()) {\n            preferences.getStringValue(R.string.p_default_tags)\r\n                    ?.split(\",\")\n--------------------------------------------------\npreferences.getStringValue(R.string.p_dashclock_filter)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_account)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_folder)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_list)\n--------------------------------------------------\npreferences.getStringValue(resId)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_start_of_week)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_recurrence)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_location)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_tags)", "import timber.log.Timber\nfun getStringValue(key: String?): String? = try {\r\n        prefs.getString(key, null)\r\n    } catch (e: Exception) {\r\n        Timber.e(e)\r\n        null\r\n    }\nimport timber.log.Timber" ],
  "fcitx5-android/406" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "QuickNovel/36" : [ "getValidUrl(link) ?: return", "private fun getValidUrl(urlString: String): String? {\r\n        if (urlString.isBlank())\r\n            return null\r\n\r\n        val url = createUrl(urlString) ?: createUrl(urlString, \"https://\") ?: return null\r\n\r\n        return url.toString()\r\n    }" ],
  "MaterialFiles/1040" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "QuickNovel/37" : [ "", "import com.simplemobiletools.calendar.pro.models.Attendee\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun jsonToAttendeeList(value: String): List<Attendee> {\r\n        if (value.isEmpty()) {\r\n            return emptyList()\r\n        }\r\n\r\n        return try {\r\n            gson.fromJson<ArrayList<Attendee>>(value, attendeeType) ?: ArrayList()\r\n        } catch (e: Exception) {\r\n            emptyList()\r\n        }\r\n    }" ],
  "MaterialFiles/1043" : [ "model.setIsItemOnList(listId, !isChecked)", "fun setIsItemOnList(listId: String, value: Boolean) {\r\n        val listsWithItem = listsWithItem.value ?: return\r\n        val indexToReplace = listsWithItem.indexOfFirst { it.listId == listId }\r\n        if (indexToReplace >= 0) {\r\n            val updatedLists = listsWithItem.toMutableList()\r\n            updatedLists[indexToReplace] = listsWithItem[indexToReplace].copy(isItemOnList = value)\r\n            this.listsWithItem.postValue(updatedLists)\r\n        }\r\n    }" ],
  "QuickNovel/38" : [ "getValidUrl(link) ?: return", "private fun getValidUrl(urlString: String): String? {\r\n        if (urlString.isBlank())\r\n            return null\r\n\r\n        val url = createUrl(urlString) ?: createUrl(urlString, \"https://\") ?: return null\r\n\r\n        return url.toString()\r\n    }" ],
  "Neo-Backup/175" : [ "addBackPressedCallback {\n    discard()\n}\n--------------------------------------------------\naddBackPressedCallback {\n    if (isNullOrEmpty(viewModel.text)) {\n        val data = Intent()\n        data.putExtra(EXTRA_TASKS, taskIds)\n        data.putParcelableArrayListExtra(EXTRA_PARTIALLY_SELECTED, viewModel.getPartiallySelected())\n        data.putParcelableArrayListExtra(EXTRA_SELECTED, viewModel.getSelected())\n        setResult(Activity.RESULT_OK, data)\n        finish()\n    } else {\n        clear()\n    }\n}", "import androidx.activity.OnBackPressedCallback\nimport androidx.activity.ComponentActivity\nimport android.app.Activity\nfun ComponentActivity.addBackPressedCallback(block: () -> Unit) {\r\n    onBackPressedDispatcher.addCallback(\r\n        this,\r\n        object : OnBackPressedCallback(true) {\r\n            override fun handleOnBackPressed() {\r\n                block()\r\n            }\r\n        }\r\n    )\r\n}\nImport(names=[androidx, activity, ComponentActivity], wildcard=false, alias=null)\nImport(names=[androidx, activity, OnBackPressedCallback], wildcard=false, alias=null)" ],
  "QuickNovel/39" : [ "\n                val point = targetView.getHighlightPoint()\r\n                setHighlightPosition(point.x, point.y)\n--------------------------------------------------\n            val highlightView = SimpleHighlightView(activity, style)\n            highlightView.setTarget(targetView)\r\n", "import com.fsck.k9.ui.R\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n            val account = getItem(position) ?: error(\"No item at position $position\")\r\n\r\n            val view = convertView ?: LayoutInflater.from(context).inflate(R.layout.account_spinner_item, parent, false)\r\n\r\n            val name: TextView = view.findViewById(R.id.name)\r\n            val email: TextView = view.findViewById(R.id.email)\r\n\r\n            return view.apply {\r\n                name.text = title\r\n                email.text = account.displayName\r\n            }\r\n        }\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[android, widget, TextView], wildcard=false, alias=null)" ],
  "Neo-Backup/172" : [ "val url = getURL(start, end)", "import com.omgodse.notally.activities.TakeNote\nprivate fun String.getURL(start: Int, end: Int): String {\r\n    return if (end <= length) {\r\n        TakeNote.getURLFrom(substring(start, end))\r\n    } else TakeNote.getURLFrom(substring(start, length))\r\n}\nImport(names=[com, omgodse, notally, activities, TakeNote], wildcard=false, alias=null)" ],
  "Neo-Backup/178" : [ "StringBuilder().select(fields).from(table).join(joins)\n--------------------------------------------------\nStringBuilder().join(joins)", "fun StringBuilder.join(joins: List<Join>): StringBuilder {\r\n        if (joins.isNotEmpty()) {\r\n            append(\"${joins.joinToString(\" \")} \")\r\n        }\r\n        return this\r\n    }" ],
  "Neo-Backup/179" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Iconify/438" : [ "it.isSupported(address)", "import org.web3j.ens.EnsResolver\nimport io.horizontalsystems.bankwallet.entities.Address\noverride fun isSupported(value: String): Boolean {\r\n        if (!EnsResolver.isValidEnsName(value)) return false\r\n\r\n        try {\r\n            cache[value] = Address(ensResolver.resolve(value), value, blockchainType)\r\n            return true\r\n        } catch (e: Exception) {\r\n            return false\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, entities, Address], wildcard=false, alias=null)" ],
  "Neo-Backup/176" : [ "addBackPressedCallback {\n    discard()\n}\n--------------------------------------------------\naddBackPressedCallback {\n    if (isNullOrEmpty(viewModel.text)) {\n        val data = Intent()\n        data.putExtra(EXTRA_TASKS, taskIds)\n        data.putParcelableArrayListExtra(EXTRA_PARTIALLY_SELECTED, viewModel.getPartiallySelected())\n        data.putParcelableArrayListExtra(EXTRA_SELECTED, viewModel.getSelected())\n        setResult(Activity.RESULT_OK, data)\n        finish()\n    } else {\n        clear()\n    }\n}", "import androidx.activity.OnBackPressedCallback\nimport androidx.activity.ComponentActivity\nimport android.app.Activity\nfun ComponentActivity.addBackPressedCallback(block: () -> Unit) {\r\n    onBackPressedDispatcher.addCallback(\r\n        this,\r\n        object : OnBackPressedCallback(true) {\r\n            override fun handleOnBackPressed() {\r\n                block()\r\n            }\r\n        }\r\n    )\r\n}\nImport(names=[androidx, activity, ComponentActivity], wildcard=false, alias=null)\nImport(names=[androidx, activity, OnBackPressedCallback], wildcard=false, alias=null)" ],
  "Trail-Sense/322" : [ "public boolean requestBackgroundLocation() {\r\n    if (permissionChecker.canAccessBackgroundLocation()) {\r\n        return true;\r\n    }\r\n    if (atLeastR()) {\r\n        if (requestForegroundLocation()) {\r\n            requestPermissions(REQUEST_BACKGROUND_LOCATION, permission.ACCESS_BACKGROUND_LOCATION);\r\n        }\r\n    } else if (atLeastQ()) {\r\n        requestPermissions(REQUEST_BACKGROUND_LOCATION, permission.ACCESS_FINE_LOCATION, permission.ACCESS_BACKGROUND_LOCATION);\r\n    } else {\r\n        requestPermissions(REQUEST_BACKGROUND_LOCATION, permission.ACCESS_FINE_LOCATION);\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\n", "import android.Manifest.permission;\r\nimport android.Manifest.permission\npublic boolean requestForegroundLocation() {\r\n    if (permissionChecker.canAccessForegroundLocation()) {\r\n        return true;\r\n    }\r\n    requestPermissions(REQUEST_FOREGROUND_LOCATION, permission.ACCESS_FINE_LOCATION);\r\n    return false;\r\n}" ],
  "Trail-Sense/323" : [ "activity.resources.getString(R.string.you_are_now_a_developer)\n--------------------------------------------------\nresources.getString(R.string.about)\n--------------------------------------------------\nresources.getString(R.string.version_n)\n--------------------------------------------------\nrequireArguments().getString(\"notes\")\n--------------------------------------------------\nres.getString(R.string.yes)\n--------------------------------------------------\nres.getString(R.string.no)\n--------------------------------------------------\nthis.getString(R.string.every_x_days)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_week)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_month)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_y_days)\n--------------------------------------------------\nresources.getString(R.string.every_month)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_month, freqNum)\n--------------------------------------------------\nresources.getString(R.string.every_day)\n--------------------------------------------------\nresources.getString(R.string.every_week)\n--------------------------------------------------\nresources.getString(R.string.every_x_days, freqDen)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_week, freqNum)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_y_days, freqNum, freqDen)\n--------------------------------------------------\nbinding.toolbar.title = getString(R.string.edit_habit)\n--------------------------------------------------\nbinding.nameInput.hint = getString(R.string.measurable_short_example)\n--------------------------------------------------\nbinding.questionInput.hint = getString(R.string.measurable_question_example)\n--------------------------------------------------\ngetString(R.string.target_type_at_least)\n--------------------------------------------------\ngetString(R.string.target_type_at_most)\n--------------------------------------------------\ngetString(R.string.every_day)\n--------------------------------------------------\ngetString(R.string.every_week)\n--------------------------------------------------\ngetString(R.string.every_month)\n--------------------------------------------------\nbinding.targetInput.error = getString(R.string.validation_cannot_be_blank)\n--------------------------------------------------\nbinding.reminderTimePicker.text = getString(R.string.reminder_off)\n--------------------------------------------------\n1 -> getString(R.string.every_day)\n--------------------------------------------------\n7 -> getString(R.string.every_week)\n--------------------------------------------------\n30 -> getString(R.string.every_month)\n--------------------------------------------------\nNumericalHabitType.AT_MOST -> getString(R.string.target_type_at_most)\n--------------------------------------------------\nelse -> getString(R.string.target_type_at_least)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_entered)\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_completed)\n--------------------------------------------------\nresources.getString(R.string.main_activity_title)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_import)\n--------------------------------------------------\ngetString(when(m) {\n    COULD_NOT_EXPORT -> R.string.could_not_export\n    IMPORT_SUCCESSFUL -> R.string.habits_imported\n    IMPORT_FAILED -> R.string.could_not_import\n    DATABASE_REPAIRED -> R.string.database_repaired\n    COULD_NOT_GENERATE_BUG_REPORT -> R.string.bug_report_failed\n    FILE_NOT_RECOGNIZED -> R.string.file_not_recognized\n})\n--------------------------------------------------\nactivity.resources.getString(R.string.toast_habit_created)\n--------------------------------------------------\nactivity.resources.getString(R.string.habits_imported)\n--------------------------------------------------\nactivity.resources.getString(R.string.file_not_recognized)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(id)\n--------------------------------------------------\nresources.getString(R.string.hint_title)\n--------------------------------------------------\nresources.getString(R.string.fa_skipped)\n--------------------------------------------------\nresources.getString(R.string.fa_question)\n--------------------------------------------------\nresources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(R.string.reminder_off)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_up)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_down)\n--------------------------------------------------\nresources.getString(R.string.today)\n--------------------------------------------------\nresources.getString(R.string.week)\n--------------------------------------------------\nresources.getString(R.string.month)\n--------------------------------------------------\nresources.getString(R.string.quarter)\n--------------------------------------------------\nresources.getString(R.string.year)\n--------------------------------------------------\ngetString(R.string.intro_title_1)\n--------------------------------------------------\ngetString(R.string.intro_description_1)\n--------------------------------------------------\ngetString(R.string.intro_title_2)\n--------------------------------------------------\ngetString(R.string.intro_description_2)\n--------------------------------------------------\ngetString(R.string.intro_title_4)\n--------------------------------------------------\ngetString(R.string.intro_description_4)\n--------------------------------------------------\nresources.getString(R.string.settings)\n--------------------------------------------------\ngetString(R.string.playStoreURL)\n--------------------------------------------------\nactivity.getString(R.string.check)\n--------------------------------------------------\nactivity.getString(R.string.uncheck)\n--------------------------------------------------\nactivity.getString(R.string.toggle)\n--------------------------------------------------\nactivity.getString(R.string.increment)\n--------------------------------------------------\nactivity.getString(R.string.decrement)\n--------------------------------------------------\nresources.getString(R.string.app_name)\n--------------------------------------------------\ncursor.getString(index)\n--------------------------------------------------\ncontext.getString(R.string.translateURL)\n--------------------------------------------------\ncontext.getString(R.string.playStoreURL)\n--------------------------------------------------\ncontext.getString(R.string.feedbackURL)\n--------------------------------------------------\ncontext.getString(R.string.privacyPolicyURL)\n--------------------------------------------------\ncontext.getString(R.string.helpURL)\n--------------------------------------------------\ncontext.getString(R.string.sourceCodeURL)\n--------------------------------------------------\ncontext.getString(R.string.codeContributorsURL)\n--------------------------------------------------\ncontext.getString(R.string.yes)\n--------------------------------------------------\ncontext.getString(R.string.no)\n--------------------------------------------------\ncontext.getString(R.string.enter)\n--------------------------------------------------\ncontext.getString(R.string.default_reminder_question)\n--------------------------------------------------\ncontext.getString(R.string.snooze)\n--------------------------------------------------\ncontext.resources.getString(R.string.reminder)\n--------------------------------------------------\ncontext.resources.getString(R.string.none)\n--------------------------------------------------\nprefs.getString(\"pref_ringtone_uri\", defaultRingtoneUri.toString())\n--------------------------------------------------\nsharedPrefs.getString(key, defValue)\n--------------------------------------------------\ncontext.resources.getString(resId)\n--------------------------------------------------\ncontext.getString(R.string.weekends)\n--------------------------------------------------\ncontext.getString(R.string.any_weekday)\n--------------------------------------------------\ncontext.getString(R.string.any_day)\n--------------------------------------------------\nresources.getString(R.string.activity_not_found)\n--------------------------------------------------\nthis.getString(toId)\n--------------------------------------------------\nthis.getString(subjectId)\n--------------------------------------------------\ncontext.getString(R.string.habit_not_found)\n--------------------------------------------------\nresources.getString(R.string.fa_check)\n--------------------------------------------------\nresources.getString(R.string.fa_times)", "override fun getString(index: Int): String? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getString(index)\r\n        }\r\n    }" ],
  "Iconify/436" : [ "\n        return getLanguageStringFor(context, actualLanguageCode, R.array.content_languages)\r\n    }", "import com.battlelancer.seriesguide.R\nimport androidx.annotation.ArrayRes\nimport android.content.Context\nprivate fun getLanguageStringFor(\r\n        context: Context, languageCode: String?,\r\n        @ArrayRes languageCodesRes: Int\r\n    ): String {\r\n        val languageCodes = context.resources.getStringArray(languageCodesRes)\r\n        for (i in languageCodes.indices) {\r\n            if (languageCodes[i] == languageCode) {\r\n                return buildLanguageDisplayName(languageCode!!)\r\n            }\r\n        }\r\n\r\n        return context.getString(R.string.unknown)\r\n    }\nimport android.content.Context\nimport androidx.annotation.ArrayRes\nimport com.battlelancer.seriesguide.R" ],
  "MaterialFiles/367" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1403" : [ "{\n        super.onResume()\r\n        if (currentNightMode != nightMode || currentPro != inventory.hasPro) {\n--------------------------------------------------\n{\n        super.onResume()\r\n        if (showKeyboard) {\n--------------------------------------------------\nsuper.onResume()\n--------------------------------------------------\nmap.onResume()", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        updateSort()\r\n    }\nimport org.tasks.R" ],
  "Trail-Sense/1404" : [ "cb ?: getAction(this@askStoragePermission, firstRun, upgrade)", "import org.videolan.resources.util.startMedialibrary\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nprivate fun getAction(activity: FragmentActivity, firstRun: Boolean, upgrade: Boolean) = Runnable {\r\n            if (activity is CustomActionController) activity.onStorageAccessGranted()\r\n            else activity.startMedialibrary(firstRun, upgrade, true)\r\n        }\nImport(names=[androidx, fragment, app, Fragment], wildcard=false, alias=null)\nImport(names=[androidx, fragment, app, FragmentActivity], wildcard=false, alias=null)" ],
  "MaterialFiles/366" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1401" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/434" : [ "val thisChunk = getChunk(string1, string1.length, thisMarker)\n--------------------------------------------------\nval thatChunk = getChunk(string2, string2.length, thatMarker)", "private fun getChunk(string: String, length: Int, marker: Int): String {\r\n        var current = marker\r\n        var c = string[current]\r\n        val chunk = StringBuilder(c.toString())\r\n        current++\r\n        val chunkOfDigits = isDigit(c)\r\n        while (current < length) {\r\n            c = string[current]\r\n            if (isDigit(c) != chunkOfDigits) {\r\n                break\r\n            }\r\n            chunk.append(c)\r\n            current++\r\n        }\r\n\r\n        return chunk.toString()\r\n    }" ],
  "Trail-Sense/1402" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "MaterialFiles/368" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/326" : [ "override fun onPause() {\n    super.onPause()\n    localBroadcastManager.unregisterReceiver(purchaseReceiver)\n}", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n        localBroadcastManager.registerPurchaseReceiver(purchaseReceiver)\r\n        localBroadcastManager.registerRefreshListReceiver(purchaseReceiver)\r\n    }" ],
  "Trail-Sense/1407" : [ "updateSong()", "import code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.helper.MusicPlayerRemote\nimport code.name.monkey.retromusic.R\nprivate fun updateSong() {\n        val song = MusicPlayerRemote.currentSong\n        binding.title.text = song.title\n        binding.text.text = song.artistName\n    }\nImport(names=[code, name, monkey, retromusic, helper, MusicPlayerRemote], wildcard=false, alias=null)" ],
  "Trail-Sense/327" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Trail-Sense/328" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "VinylMusicPlayer/924" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "Trail-Sense/1406" : [ "updateSong()", "import code.name.monkey.retromusic.util.PreferenceUtil\nimport code.name.monkey.retromusic.helper.MusicPlayerRemote\nimport code.name.monkey.retromusic.R\nprivate fun updateSong() {\n        val song = MusicPlayerRemote.currentSong\n        binding.title.text = song.title\n        binding.text.text = song.artistName\n        if (PreferenceUtil.isSongInfo) {\n            binding.songInfo.text = getSongInfo(song)\n            binding.songInfo.show()\n        } else {\n            binding.songInfo.hide()\n        }\n    }\nImport(names=[code, name, monkey, retromusic, helper, MusicPlayerRemote], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/923" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1409" : [ "            val original = setUpStartDate(task, repeatAfterCompletion, rrule.frequency)\n            val startDateAsDV = setUpStartDateAsDV(task, original)\r\n            return if (rrule.frequency == Recur.Frequency.HOURLY || rrule.frequency == Recur.Frequency.MINUTELY) {", "import org.tasks.time.DateTime\nimport net.fortuna.ical4j.model.Date\nimport com.todoroo.astrid.data.Task\nprivate fun setUpStartDateAsDV(task: Task, startDate: DateTime): Date {\r\n            return if (task.hasDueTime()) {\r\n                startDate.toDateTime()\r\n            } else {\r\n                startDate.toDate()\r\n            }\r\n        }\nimport com.todoroo.astrid.data.Task\nimport net.fortuna.ical4j.model.Date\nimport org.tasks.time.DateTime" ],
  "QuickNovel/40" : [ "private void onGpsTrackerBound() {\r\n    // check and request permissions at startup\r\n    boolean missingEssentialPermission = checkPermissions(false);\r\n    if (!missingEssentialPermission && getAutoStartGps()) {\r\n        startGps();\r\n    } else {\r\n        switch(mTracker.getState()) {\r\n            case INIT:\r\n            case CLEANUP:\r\n                mTracker.setup();\r\n                break;\r\n            case INITIALIZING:\r\n            case INITIALIZED:\r\n                break;\r\n            case CONNECTING:\r\n            case CONNECTED:\r\n            case STARTED:\r\n            case PAUSED:\r\n                if (BuildConfig.DEBUG) {\r\n                    //Seem to happen when returning to RunnerUp\r\n                    Log.e(getClass().getName(), \"onGpsTrackerBound unexpected tracker state: \" + mTracker.getState().toString());\r\n                }\r\n                break;\r\n            case ERROR:\r\n                break;\r\n        }\r\n    }\r\n    updateView();\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.util.Log;\r\nimport org.runnerup.tracker.Tracker;\r\nimport org.runnerup.tracker.Tracker\nimport org.runnerup.R\nimport android.util.Log\nimport android.provider.Settings\nimport android.content.Intent\nprivate void startGps() {\r\n    Log.v(getClass().getName(), \"StartActivity.startGps()\");\r\n    if (!mGpsStatus.isEnabled()) {\r\n        startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));\r\n    }\r\n    if (mGpsStatus != null && !mGpsStatus.isLogging())\r\n        mGpsStatus.start(this);\r\n    if (mTracker != null) {\r\n        mTracker.connect();\r\n    }\r\n    notificationStateManager.displayNotificationState(gpsSearchingState);\r\n}" ],
  "fcitx5-android/401" : [ "", "override fun onDestroy() {\n        super.onDestroy()\n        _binding = null\n    }" ],
  "fcitx5-android/400" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "QuickNovel/41" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/42" : [ "", "import timber.log.Timber;\r\nimport timber.log.Timber\nimport com.money.manager.ex.R\n@Override\r\nprotected void onResume() {\r\n    try {\r\n        super.onResume();\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"resuming main activity\");\r\n    }\r\n    // check if restart activity\r\n    if (isRestartActivitySet()) {\r\n        // restart and exit\r\n        restartActivity();\r\n    }\r\n}" ],
  "QuickNovel/43" : [ "super.onNewIntent(intent)", "import com.simplemobiletools.notes.pro.models.Note\nimport android.content.Intent\noverride fun onNewIntent(intent: Intent) {\r\n        super.onNewIntent(intent)\r\n        val wantedNoteId = intent.getLongExtra(OPEN_NOTE_ID, -1L)\r\n        binding.viewPager.currentItem = getWantedNoteIndex(wantedNoteId)\r\n        checkIntents(intent)\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "QuickNovel/44" : [ "val tv = showTvUi()", "import org.videolan.tools.Settings\nimport org.videolan.tools.KEY_CURRENT_SETTINGS_VERSION\nimport org.videolan.resources.AndroidDevices\nprivate fun showTvUi(): Boolean {\r\n        val settings = Settings.getInstance(this)\r\n        //because the [VersionMigration] is done after the first call to this method, we have to keep the old implementation for people coming from an older version of the app\r\n        if (settings.getInt(KEY_CURRENT_SETTINGS_VERSION, 0) < 5) return AndroidDevices.isAndroidTv || !AndroidDevices.isChromeBook && !AndroidDevices.hasTsp ||\r\n                settings.getBoolean(\"tv_ui\", false)\r\n        return  settings.getBoolean(\"tv_ui\", false)\r\n    }\nImport(names=[org, videolan, resources, AndroidDevices], wildcard=false, alias=null)\nImport(names=[org, videolan, tools, Settings], wildcard=false, alias=null)" ],
  "Neo-Backup/181" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Iconify/442" : [ "score(i1, query) - score(i0, query)", "import org.videolan.vlc.gui.preferences.search.PreferenceItem\nprivate fun score(item: PreferenceItem, query: String): Int {\r\n        var score = 0\r\n        if (getSummary(item).lowercase(Locale.getDefault()).contains(query)) score += 1\r\n        if (getTitle(item).lowercase(Locale.getDefault()).contains(query)) score += 10\r\n        if (getSummary(item).lowercase(Locale.getDefault()).split(\" \").any { it.startsWith(query) }) score += 100\r\n        if (getTitle(item).lowercase(Locale.getDefault()).split(\" \").any { it.startsWith(query) }) score += 1000\r\n        return score\r\n    }\nImport(names=[org, videolan, vlc, gui, preferences, search, PreferenceItem], wildcard=false, alias=null)" ],
  "Neo-Backup/182" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "QuickNovel/46" : [ "binding.webView.loadUrl(it)\n--------------------------------------------------\nbinding.kickstarterWebView.loadUrl(it)\n--------------------------------------------------\nbinding.surveyResponseWebView.loadUrl(it)\n--------------------------------------------------\nbinding.updateWebView.loadUrl(it)\n--------------------------------------------------\nbinding.internalWebView.loadUrl(\"about:blank\")\n--------------------------------------------------\nbinding.internalWebView.loadUrl(it)", "import android.view.View\nfun loadUrl(url: String?) {\r\n        url?.let {\r\n            binding.internalWebView.loadUrl(it)\r\n            setPerimeterXCookie(it)\r\n        }\r\n    }" ],
  "QuickNovel/47" : [ "// Expand the shortcut\r\nprivate void expandShortcut(String[] shortcuts) {\r\n    int start = Math.min(mContent.getSelectionStart(), mContent.getSelectionEnd());\r\n    int end = Math.max(mContent.getSelectionStart(), mContent.getSelectionEnd());\r\n    String expanded = null;\r\n    String shortcut, shortcut_with_space = null, extra = null;\r\n    String[] params;\r\n    String[] items;\r\n    // Determine the word\r\n    if (start < end) {\r\n        shortcut = mContent.getText().toString().substring(start, end).trim();\r\n        shortcut_with_space = mContent.getText().toString().substring(start, end).trim();\r\n    } else\r\n        shortcut = Utils.getCurrentWord(mContent, start, true);\r\n    // Also try to extract symbols\r\n    if (shortcut.length() == 0)\r\n        shortcut = Utils.getCurrentSnippet(mContent, start, true);\r\n    // Sanity check\r\n    if (shortcut.length() == 0) {\r\n        Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.warn_no_selected_word), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n        Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n        snackbar.show();\r\n        return;\r\n    }\r\n    // If more than a word in the shortcut, the extra words are parameters\r\n    params = shortcut.split(\"\\\\s+\");\r\n    if (params.length > 1) {\r\n        extra = shortcut;\r\n        shortcut = params[0];\r\n        extra = extra.substring(shortcut.length());\r\n    }\r\n    // Get expansion\r\n    for (int i = 0; i < shortcuts.length; i++) {\r\n        // Ignore comments\r\n        if (shortcuts[i].startsWith(Const.COMMENT_SYM))\r\n            continue;\r\n        if (shortcuts[i].toLowerCase(Locale.getDefault()).startsWith(shortcut.toLowerCase(Locale.getDefault()) + Const.SHORTCUTS_DELIMITER)) {\r\n            expanded = shortcuts[i].substring(shortcut.length() + 1);\r\n            break;\r\n        }\r\n        // Consider shortcuts with spaces as well\r\n        if (shortcut_with_space != null) {\r\n            if (shortcuts[i].toLowerCase(Locale.getDefault()).startsWith(shortcut_with_space.toLowerCase(Locale.getDefault()) + Const.SHORTCUTS_DELIMITER)) {\r\n                shortcut = shortcut_with_space;\r\n                expanded = shortcuts[i].substring(shortcut.length() + 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (expanded != null) {\r\n        if (expanded.startsWith(Const.WEBSERVICE_SYM)) {\r\n            // Web service\r\n            // Setup request\r\n            RequestQueue queue = Volley.newRequestQueue(this);\r\n            String url = Utils.toHTTPS(expanded.substring(Const.WEBSERVICE_SYM.length()).trim());\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.encodeStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    url = Utils.replacePattern(url, Const.PARAMETER_SYM, params);\r\n                } else {\r\n                    // Append parameters\r\n                    for (int i = 0; i < params.length; i++) {\r\n                        url += params[i].trim();\r\n                        if (i < (params.length - 1))\r\n                            url += \"&\";\r\n                    }\r\n                }\r\n            }\r\n            // Request a string response from the provided URL.\r\n            StringRequest request = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {\r\n\r\n                @Override\r\n                public void onResponse(String response) {\r\n                    Utils.insert(mContent, response);\r\n                }\r\n            }, new Response.ErrorListener() {\r\n\r\n                @Override\r\n                public void onErrorResponse(VolleyError error) {\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            });\r\n            // Add the request to the RequestQueue.\r\n            queue.add(request);\r\n        } else if (expanded.startsWith(Const.WEBSERVICE_JSON_SYM)) {\r\n            // Web service (JSON)\r\n            // Setup request\r\n            RequestQueue queue = Volley.newRequestQueue(this);\r\n            String url = Utils.toHTTPS(expanded.substring(Const.WEBSERVICE_JSON_SYM.length()).trim());\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                try {\r\n                    // Create JSON object\r\n                    JSONObject json = new JSONObject(extra.replaceAll(\"\\\"\", \"\\\\\\\"\"));\r\n                    // Request a JSON response from the provided URL.\r\n                    JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, url, json, new Response.Listener<JSONObject>() {\r\n\r\n                        @Override\r\n                        public void onResponse(JSONObject response) {\r\n                            try {\r\n                                Utils.insert(mContent, response.toString(mIndentChar.length()));\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                                snackbar.show();\r\n                            }\r\n                        }\r\n                    }, new Response.ErrorListener() {\r\n\r\n                        @Override\r\n                        public void onErrorResponse(VolleyError error) {\r\n                            Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                            Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                            snackbar.show();\r\n                        }\r\n                    });\r\n                    // Add the request to the RequestQueue.\r\n                    queue.add(request);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            } else {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.SHELL_SYM)) {\r\n            // Shell command\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    expanded = Utils.replacePattern(expanded, Const.PARAMETER_SYM, params);\r\n                } else {\r\n                    // Append parameters\r\n                    for (int i = 0; i < params.length; i++) {\r\n                        expanded += \" \" + params[i];\r\n                    }\r\n                }\r\n            }\r\n            ShellExecuter exe = new ShellExecuter();\r\n            expanded = exe.Executer(expanded.substring(Const.SHELL_SYM.length()));\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.REPLACE_SYM)) {\r\n            // Replace command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.REPLACE_SYM.length()).trim();\r\n                // Split the expanded string into 2 parts:\r\n                // 1. Old pattern\r\n                // 2. New pattern\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 2) {\r\n                    if (params[1].contains(Const.SPACE_ENTITY))\r\n                        params[1] = params[1].replaceAll(Const.SPACE_ENTITY, Const.EMPTY_SYM);\r\n                    expanded = extra.replaceAll(params[0], params[1]).trim();\r\n                } else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.SPLIT_SYM)) {\r\n            // Split command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.SPLIT_SYM.length()).trim();\r\n                if (expanded.length() > 0) {\r\n                    items = extra.split(expanded);\r\n                    expanded = TextUtils.join(Const.NEWLINE, items).trim();\r\n                } else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.JOIN_SYM)) {\r\n            // Join command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.JOIN_SYM.length()).trim();\r\n                // Split the expanded string into 2 parts:\r\n                // 1. Old pattern\r\n                // 2. New pattern\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 1) {\r\n                    if (params[0].contains(Const.SPACE_ENTITY))\r\n                        params[0] = params[0].replaceAll(Const.SPACE_ENTITY, Const.EMPTY_SYM);\r\n                    expanded = extra.replaceAll(Const.NEWLINE, params[0]).trim();\r\n                } else if (params.length == 0)\r\n                    expanded = extra.replaceAll(Const.NEWLINE, Const.NULL_SYM).trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.REMOVE_SYM)) {\r\n            // Remove command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.REMOVE_SYM.length()).trim();\r\n                if (expanded.length() > 0)\r\n                    expanded = extra.replaceAll(expanded, \"\").trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.LINEBREAK_SYM)) {\r\n            // Insert line break command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.LINEBREAK_SYM.length()).trim();\r\n                // Replace occurrences of old pattern by line breaks\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 1)\r\n                    expanded = extra.replaceAll(params[0], System.getProperty(\"line.separator\")).trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.TRIM_SYM)) {\r\n            // Trim command\r\n            if (extra != null)\r\n                expanded = extra.trim();\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.REMOVE_ZERO_WIDTH_SPACE_SYM)) {\r\n            // Trim command\r\n            if (extra != null)\r\n                try {\r\n                    expanded = Utils.removeZeroWidthSpaces(extra.trim());\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.SORT_SYM)) {\r\n            // Sort command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.sort(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.REVERSE_SORT_SYM)) {\r\n            // Reverse sort command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.rsort(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.ENCODE_SYM)) {\r\n            // Encode command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Base64.encodeToString(extra.getBytes(\"UTF-8\"), Base64.DEFAULT);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.info_cancel_encrypt), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.DECODE_SYM)) {\r\n            // Decode command\r\n            if (extra != null)\r\n                expanded = new String(Base64.decode(extra, Base64.DEFAULT));\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.CAMEL2SNAKE_SYM)) {\r\n            // Camel to snake command\r\n            if (extra != null)\r\n                expanded = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, extra);\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.SNAKE2CAMEL_SYM)) {\r\n            // Snake to camel command\r\n            if (extra != null)\r\n                expanded = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, extra);\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.STRIP_HTML_SYM)) {\r\n            // Strip HTML command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.stripHtml(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.TAG_EXPAND_SYM)) {\r\n            // Tag expand command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.tagExpand(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.MORPH_SYM)) {\r\n            // Morph command\r\n            if ((extra != null) && (extra.length() <= Const.MAX_EXTRA_LEN)) {\r\n                // Get pattern\r\n                expanded = expanded.substring(Const.MORPH_SYM.length()).trim();\r\n                // Remove unsafe specifiers\r\n                expanded = expanded.replace(\"%n\", \"\");\r\n                // Prepare value\r\n                try {\r\n                    extra = extra.trim();\r\n                    if (Utils.isNumeric(extra)) {\r\n                        // Numeric\r\n                        if (Utils.isDecimalNumber(extra))\r\n                            expanded = String.format(Locale.getDefault(), expanded, Double.parseDouble(extra));\r\n                        else\r\n                            expanded = String.format(Locale.getDefault(), expanded, Integer.parseInt(extra));\r\n                    } else if (expanded.contains(\"t\") || expanded.contains(\"T\")) {\r\n                        // Date\r\n                        DateFormat date_format;\r\n                        date_format = android.text.format.DateFormat.getDateFormat(getApplicationContext());\r\n                        expanded = String.format(Locale.getDefault(), expanded, date_format.parse(extra));\r\n                    } else\r\n                        expanded = String.format(Locale.getDefault(), expanded, extra);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    expanded = null;\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.LAUNCH_SYM)) {\r\n            // Launch command\r\n            // Retrieve package name\r\n            expanded = expanded.substring(Const.LAUNCH_SYM.length()).trim();\r\n            if (expanded != null) {\r\n                // Launch the package\r\n                if (!Utils.launchPackage(getApplicationContext(), expanded)) {\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            } else {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.FUNNEL_SYM)) {\r\n            // Funnel command\r\n            // Show file picker\r\n            handleFunnel();\r\n        } else if (expanded.startsWith(Const.NEEDLE_SYM)) {\r\n            // Needle command\r\n            if (extra != null) {\r\n                // Dynamic criteria\r\n                try {\r\n                    expanded = extra.trim();\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                // Pre-defined criteria\r\n                expanded = expanded.substring(Const.NEEDLE_SYM.length()).trim();\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else {\r\n                // \"Consume\" the command\r\n                if (extra == null)\r\n                    Utils.insert(mContent, Const.NULL_SYM);\r\n                else\r\n                    Utils.insert(mContent, extra.trim());\r\n                doSearchNote(expanded);\r\n            }\r\n        } else if (expanded.startsWith(Const.OVERRIDE_SYM)) {\r\n            // Command to temporarily override settings\r\n            // Retrieve settings\r\n            expanded = expanded.substring(Const.OVERRIDE_SYM.length()).trim();\r\n            if (expanded.equals(Const.PREF_SHOW_TOOLBAR)) {\r\n                // Toogle toolbar mode\r\n                mShowToolBar = !mShowToolBar;\r\n                // Show tool bar\r\n                showHideToolBar(true);\r\n                // \"Consume\" the command\r\n                Utils.insert(mContent, Const.NULL_SYM);\r\n                // Show confirmation\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), expanded + \": \" + mShowToolBar, Snackbar.LENGTH_LONG).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.SYNC_SYM)) {\r\n            // Command to send a sync request\r\n            // Send a sync request\r\n            Utils.sendSyncRequest(getApplicationContext(), mLocalRepoPath, mBackupUri);\r\n            // \"Consume\" the command\r\n            Utils.insert(mContent, Const.NULL_SYM);\r\n        } else if (expanded.startsWith(Const.CREATE_NOTE_LINK_SYM)) {\r\n            String title = mTitle.getText().toString();\r\n            String criteria = null;\r\n            if (extra != null) {\r\n                criteria = extra;\r\n            }\r\n            String link = Const.BLANK_LINE + Utils.createNoteLink(title, criteria);\r\n            Utils.setClipboardText(getApplicationContext(), mClipboard, Const.CREATE_NOTE_LINK_SYM, link);\r\n            // Restore the parameter\r\n            Utils.insert(mContent, extra.trim());\r\n            // Show confirmation\r\n            Toast.makeText(getApplicationContext(), Const.CLIPBOARD_SYM + Const.LINK_SYM + Const.SPACE_CHAR + link, Toast.LENGTH_SHORT).show();\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_SNIPPET_SYM)) {\r\n            // Evaluate a JavaScript snippet\r\n            if (extra != null) {\r\n                try {\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, extra, Const.CLI_EVAL_JS_TIMEOUT, true);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_INTERACTIVE_SYM)) {\r\n            // Evaluate JavaScript calls interactively\r\n            if (extra != null) {\r\n                try {\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, extra, Const.CLI_EVAL_JS_TIMEOUT, false);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_INLINE_SYM)) {\r\n            // Evaluate inline based JavaScript\r\n            if (extra != null) {\r\n                try {\r\n                    // Retrieve function declaration\r\n                    expanded = expanded.substring(Const.CLI_EVAL_JS_INLINE_SYM.length()).trim();\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, expanded + extra, Const.CLI_EVAL_JS_TIMEOUT, true);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_FILE_SYM)) {\r\n            // Evaluate file based JavaScript\r\n            if (extra != null) {\r\n                try {\r\n                    // Retrieve function declaration\r\n                    expanded = expanded.substring(Const.CLI_EVAL_JS_FILE_SYM.length()).trim();\r\n                    // Load Javascript\r\n                    List<DBEntry> results = mDatasource.getRecordByTitle(expanded);\r\n                    DBEntry entry;\r\n                    StringBuilder sb = new StringBuilder();\r\n                    if (results.size() == 1) {\r\n                        entry = results.get(0);\r\n                        sb.append(entry.getContent().trim());\r\n                        String script = sb.toString();\r\n                        if (!script.endsWith(\";\"))\r\n                            script += \";\";\r\n                        Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, script + extra, Const.CLI_EVAL_JS_TIMEOUT * 2, true);\r\n                    } else\r\n                        expanded = null;\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else {\r\n            // Apply newlines\r\n            expanded = expanded.trim().replaceAll(Const.NEWLINE_ENTITY, System.getProperty(\"line.separator\"));\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    expanded = Utils.replacePattern(expanded, Const.PARAMETER_SYM, params);\r\n                }\r\n            }\r\n            // Evaluate built-in variables\r\n            if (mEvalBuiltInVariables)\r\n                expanded = evalVariables(expanded, false);\r\n            Utils.insert(mContent, expanded);\r\n        }\r\n    } else {\r\n        // Restore selection range\r\n        mContent.setSelection(start, end);\r\n        handleAddShortcut(shortcut);\r\n    }\r\n}\n--------------------------------------------------\n// Expand the shortcut\r\nprivate void expandShortcut(String[] shortcuts) {\r\n    int start = Math.min(mContent.getSelectionStart(), mContent.getSelectionEnd());\r\n    int end = Math.max(mContent.getSelectionStart(), mContent.getSelectionEnd());\r\n    String expanded = null;\r\n    String shortcut, shortcut_with_space = null, extra = null;\r\n    String[] params;\r\n    String[] items;\r\n    // Determine the word\r\n    if (start < end) {\r\n        shortcut = mContent.getText().toString().substring(start, end).trim();\r\n        shortcut_with_space = mContent.getText().toString().substring(start, end).trim();\r\n    } else\r\n        shortcut = Utils.getCurrentWord(mContent, start, true);\r\n    // Also try to extract symbols\r\n    if (shortcut.length() == 0)\r\n        shortcut = Utils.getCurrentSnippet(mContent, start, true);\r\n    // Sanity check\r\n    if (shortcut.length() == 0) {\r\n        Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.warn_no_selected_word), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n        Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n        snackbar.show();\r\n        return;\r\n    }\r\n    // If more than a word in the shortcut, the extra words are parameters\r\n    params = shortcut.split(\"\\\\s+\");\r\n    if (params.length > 1) {\r\n        extra = shortcut;\r\n        shortcut = params[0];\r\n        extra = extra.substring(shortcut.length());\r\n    }\r\n    // Get expansion\r\n    for (int i = 0; i < shortcuts.length; i++) {\r\n        // Ignore comments\r\n        if (shortcuts[i].startsWith(Const.COMMENT_SYM))\r\n            continue;\r\n        if (shortcuts[i].toLowerCase(Locale.getDefault()).startsWith(shortcut.toLowerCase(Locale.getDefault()) + Const.SHORTCUTS_DELIMITER)) {\r\n            expanded = shortcuts[i].substring(shortcut.length() + 1);\r\n            break;\r\n        }\r\n        // Consider shortcuts with spaces as well\r\n        if (shortcut_with_space != null) {\r\n            if (shortcuts[i].toLowerCase(Locale.getDefault()).startsWith(shortcut_with_space.toLowerCase(Locale.getDefault()) + Const.SHORTCUTS_DELIMITER)) {\r\n                shortcut = shortcut_with_space;\r\n                expanded = shortcuts[i].substring(shortcut.length() + 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (expanded != null) {\r\n        if (expanded.startsWith(Const.WEBSERVICE_SYM)) {\r\n            // Web service\r\n            // Setup request\r\n            RequestQueue queue = Volley.newRequestQueue(this);\r\n            String url = Utils.toHTTPS(expanded.substring(Const.WEBSERVICE_SYM.length()).trim());\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.encodeStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    url = Utils.replacePattern(url, Const.PARAMETER_SYM, params);\r\n                } else {\r\n                    // Append parameters\r\n                    for (int i = 0; i < params.length; i++) {\r\n                        url += params[i].trim();\r\n                        if (i < (params.length - 1))\r\n                            url += \"&\";\r\n                    }\r\n                }\r\n            }\r\n            // Request a string response from the provided URL.\r\n            StringRequest request = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {\r\n\r\n                @Override\r\n                public void onResponse(String response) {\r\n                    Utils.insert(mContent, response);\r\n                }\r\n            }, new Response.ErrorListener() {\r\n\r\n                @Override\r\n                public void onErrorResponse(VolleyError error) {\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            });\r\n            // Add the request to the RequestQueue.\r\n            queue.add(request);\r\n        } else if (expanded.startsWith(Const.WEBSERVICE_JSON_SYM)) {\r\n            // Web service (JSON)\r\n            // Setup request\r\n            RequestQueue queue = Volley.newRequestQueue(this);\r\n            String url = Utils.toHTTPS(expanded.substring(Const.WEBSERVICE_JSON_SYM.length()).trim());\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                try {\r\n                    // Create JSON object\r\n                    JSONObject json = new JSONObject(extra.replaceAll(\"\\\"\", \"\\\\\\\"\"));\r\n                    // Request a JSON response from the provided URL.\r\n                    JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, url, json, new Response.Listener<JSONObject>() {\r\n\r\n                        @Override\r\n                        public void onResponse(JSONObject response) {\r\n                            try {\r\n                                Utils.insert(mContent, response.toString(mIndentChar.length()));\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                                snackbar.show();\r\n                            }\r\n                        }\r\n                    }, new Response.ErrorListener() {\r\n\r\n                        @Override\r\n                        public void onErrorResponse(VolleyError error) {\r\n                            Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                            Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                            snackbar.show();\r\n                        }\r\n                    });\r\n                    // Add the request to the RequestQueue.\r\n                    queue.add(request);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            } else {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.SHELL_SYM)) {\r\n            // Shell command\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    expanded = Utils.replacePattern(expanded, Const.PARAMETER_SYM, params);\r\n                } else {\r\n                    // Append parameters\r\n                    for (int i = 0; i < params.length; i++) {\r\n                        expanded += \" \" + params[i];\r\n                    }\r\n                }\r\n            }\r\n            ShellExecuter exe = new ShellExecuter();\r\n            expanded = exe.Executer(expanded.substring(Const.SHELL_SYM.length()));\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.REPLACE_SYM)) {\r\n            // Replace command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.REPLACE_SYM.length()).trim();\r\n                // Split the expanded string into 2 parts:\r\n                // 1. Old pattern\r\n                // 2. New pattern\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 2) {\r\n                    if (params[1].contains(Const.SPACE_ENTITY))\r\n                        params[1] = params[1].replaceAll(Const.SPACE_ENTITY, Const.EMPTY_SYM);\r\n                    expanded = extra.replaceAll(params[0], params[1]).trim();\r\n                } else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.SPLIT_SYM)) {\r\n            // Split command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.SPLIT_SYM.length()).trim();\r\n                if (expanded.length() > 0) {\r\n                    items = extra.split(expanded);\r\n                    expanded = TextUtils.join(Const.NEWLINE, items).trim();\r\n                } else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.JOIN_SYM)) {\r\n            // Join command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.JOIN_SYM.length()).trim();\r\n                // Split the expanded string into 2 parts:\r\n                // 1. Old pattern\r\n                // 2. New pattern\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 1) {\r\n                    if (params[0].contains(Const.SPACE_ENTITY))\r\n                        params[0] = params[0].replaceAll(Const.SPACE_ENTITY, Const.EMPTY_SYM);\r\n                    expanded = extra.replaceAll(Const.NEWLINE, params[0]).trim();\r\n                } else if (params.length == 0)\r\n                    expanded = extra.replaceAll(Const.NEWLINE, Const.NULL_SYM).trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.REMOVE_SYM)) {\r\n            // Remove command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.REMOVE_SYM.length()).trim();\r\n                if (expanded.length() > 0)\r\n                    expanded = extra.replaceAll(expanded, \"\").trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.LINEBREAK_SYM)) {\r\n            // Insert line break command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.LINEBREAK_SYM.length()).trim();\r\n                // Replace occurrences of old pattern by line breaks\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 1)\r\n                    expanded = extra.replaceAll(params[0], System.getProperty(\"line.separator\")).trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.TRIM_SYM)) {\r\n            // Trim command\r\n            if (extra != null)\r\n                expanded = extra.trim();\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.REMOVE_ZERO_WIDTH_SPACE_SYM)) {\r\n            // Trim command\r\n            if (extra != null)\r\n                try {\r\n                    expanded = Utils.removeZeroWidthSpaces(extra.trim());\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.SORT_SYM)) {\r\n            // Sort command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.sort(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.REVERSE_SORT_SYM)) {\r\n            // Reverse sort command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.rsort(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.ENCODE_SYM)) {\r\n            // Encode command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Base64.encodeToString(extra.getBytes(\"UTF-8\"), Base64.DEFAULT);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.info_cancel_encrypt), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.DECODE_SYM)) {\r\n            // Decode command\r\n            if (extra != null)\r\n                expanded = new String(Base64.decode(extra, Base64.DEFAULT));\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.CAMEL2SNAKE_SYM)) {\r\n            // Camel to snake command\r\n            if (extra != null)\r\n                expanded = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, extra);\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.SNAKE2CAMEL_SYM)) {\r\n            // Snake to camel command\r\n            if (extra != null)\r\n                expanded = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, extra);\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.STRIP_HTML_SYM)) {\r\n            // Strip HTML command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.stripHtml(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.TAG_EXPAND_SYM)) {\r\n            // Tag expand command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.tagExpand(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.MORPH_SYM)) {\r\n            // Morph command\r\n            if ((extra != null) && (extra.length() <= Const.MAX_EXTRA_LEN)) {\r\n                // Get pattern\r\n                expanded = expanded.substring(Const.MORPH_SYM.length()).trim();\r\n                // Remove unsafe specifiers\r\n                expanded = expanded.replace(\"%n\", \"\");\r\n                // Prepare value\r\n                try {\r\n                    extra = extra.trim();\r\n                    if (Utils.isNumeric(extra)) {\r\n                        // Numeric\r\n                        if (Utils.isDecimalNumber(extra))\r\n                            expanded = String.format(Locale.getDefault(), expanded, Double.parseDouble(extra));\r\n                        else\r\n                            expanded = String.format(Locale.getDefault(), expanded, Integer.parseInt(extra));\r\n                    } else if (expanded.contains(\"t\") || expanded.contains(\"T\")) {\r\n                        // Date\r\n                        DateFormat date_format;\r\n                        date_format = android.text.format.DateFormat.getDateFormat(getApplicationContext());\r\n                        expanded = String.format(Locale.getDefault(), expanded, date_format.parse(extra));\r\n                    } else\r\n                        expanded = String.format(Locale.getDefault(), expanded, extra);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    expanded = null;\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.LAUNCH_SYM)) {\r\n            // Launch command\r\n            // Retrieve package name\r\n            expanded = expanded.substring(Const.LAUNCH_SYM.length()).trim();\r\n            if (expanded != null) {\r\n                // Launch the package\r\n                if (!Utils.launchPackage(getApplicationContext(), expanded)) {\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            } else {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.FUNNEL_SYM)) {\r\n            // Funnel command\r\n            // Show file picker\r\n            handleFunnel();\r\n        } else if (expanded.startsWith(Const.NEEDLE_SYM)) {\r\n            // Needle command\r\n            if (extra != null) {\r\n                // Dynamic criteria\r\n                try {\r\n                    expanded = extra.trim();\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                // Pre-defined criteria\r\n                expanded = expanded.substring(Const.NEEDLE_SYM.length()).trim();\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else {\r\n                // \"Consume\" the command\r\n                if (extra == null)\r\n                    Utils.insert(mContent, Const.NULL_SYM);\r\n                else\r\n                    Utils.insert(mContent, extra.trim());\r\n                doSearchNote(expanded);\r\n            }\r\n        } else if (expanded.startsWith(Const.OVERRIDE_SYM)) {\r\n            // Command to temporarily override settings\r\n            // Retrieve settings\r\n            expanded = expanded.substring(Const.OVERRIDE_SYM.length()).trim();\r\n            if (expanded.equals(Const.PREF_SHOW_TOOLBAR)) {\r\n                // Toogle toolbar mode\r\n                mShowToolBar = !mShowToolBar;\r\n                // Show tool bar\r\n                showHideToolBar(true);\r\n                // \"Consume\" the command\r\n                Utils.insert(mContent, Const.NULL_SYM);\r\n                // Show confirmation\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), expanded + \": \" + mShowToolBar, Snackbar.LENGTH_LONG).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.SYNC_SYM)) {\r\n            // Command to send a sync request\r\n            // Send a sync request\r\n            Utils.sendSyncRequest(getApplicationContext(), mLocalRepoPath, mBackupUri);\r\n            // \"Consume\" the command\r\n            Utils.insert(mContent, Const.NULL_SYM);\r\n        } else if (expanded.startsWith(Const.CREATE_NOTE_LINK_SYM)) {\r\n            String title = mTitle.getText().toString();\r\n            String criteria = null;\r\n            if (extra != null) {\r\n                criteria = extra;\r\n            }\r\n            String link = Const.BLANK_LINE + Utils.createNoteLink(title, criteria);\r\n            Utils.setClipboardText(getApplicationContext(), mClipboard, Const.CREATE_NOTE_LINK_SYM, link);\r\n            // Restore the parameter\r\n            Utils.insert(mContent, extra.trim());\r\n            // Show confirmation\r\n            Toast.makeText(getApplicationContext(), Const.CLIPBOARD_SYM + Const.LINK_SYM + Const.SPACE_CHAR + link, Toast.LENGTH_SHORT).show();\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_SNIPPET_SYM)) {\r\n            // Evaluate a JavaScript snippet\r\n            if (extra != null) {\r\n                try {\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, extra, Const.CLI_EVAL_JS_TIMEOUT, true);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_INTERACTIVE_SYM)) {\r\n            // Evaluate JavaScript calls interactively\r\n            if (extra != null) {\r\n                try {\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, extra, Const.CLI_EVAL_JS_TIMEOUT, false);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_INLINE_SYM)) {\r\n            // Evaluate inline based JavaScript\r\n            if (extra != null) {\r\n                try {\r\n                    // Retrieve function declaration\r\n                    expanded = expanded.substring(Const.CLI_EVAL_JS_INLINE_SYM.length()).trim();\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, expanded + extra, Const.CLI_EVAL_JS_TIMEOUT, true);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_FILE_SYM)) {\r\n            // Evaluate file based JavaScript\r\n            if (extra != null) {\r\n                try {\r\n                    // Retrieve function declaration\r\n                    expanded = expanded.substring(Const.CLI_EVAL_JS_FILE_SYM.length()).trim();\r\n                    // Load Javascript\r\n                    List<DBEntry> results = mDatasource.getRecordByTitle(expanded);\r\n                    DBEntry entry;\r\n                    StringBuilder sb = new StringBuilder();\r\n                    if (results.size() == 1) {\r\n                        entry = results.get(0);\r\n                        sb.append(entry.getContent().trim());\r\n                        String script = sb.toString();\r\n                        if (!script.endsWith(\";\"))\r\n                            script += \";\";\r\n                        Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, script + extra, Const.CLI_EVAL_JS_TIMEOUT * 2, true);\r\n                    } else\r\n                        expanded = null;\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else {\r\n            // Apply newlines\r\n            expanded = expanded.trim().replaceAll(Const.NEWLINE_ENTITY, System.getProperty(\"line.separator\"));\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    expanded = Utils.replacePattern(expanded, Const.PARAMETER_SYM, params);\r\n                }\r\n            }\r\n            // Evaluate built-in variables\r\n            if (mEvalBuiltInVariables)\r\n                expanded = evalVariables(expanded, false);\r\n            Utils.insert(mContent, expanded);\r\n        }\r\n    } else {\r\n        // Restore selection range\r\n        mContent.setSelection(start, end);\r\n        handleAddShortcut(shortcut);\r\n    }\r\n}\n--------------------------------------------------\n", "// Convert url to https\r\npublic static String toHTTPS(String url) {\r\n    if (url.startsWith(Const.HTTPS_SYM))\r\n        return url;\r\n    if (url.startsWith(\"http://\"))\r\n        return Const.HTTPS_SYM + url.substring(Const.HTTP_SYM.length());\r\n    else\r\n        return Const.HTTPS_SYM + url;\r\n}" ],
  "Neo-Backup/180" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/185" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/186" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/183" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "MaterialFiles/1055" : [ "notifyListener()", "private fun notifyListener() {\r\n            if (activeMode is SelectionMode) {\r\n                selectionMenu.get().onSelectionChange()\r\n            } else {\r\n                selectionMenu.get().onSelectionFinish()\r\n            }\r\n        }" ],
  "Neo-Backup/184" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/330" : [ "super.onDraw(canvas)", "import org.isoron.uhabits.R\nimport android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        if (streaks!!.isEmpty()) return\r\n        rect!![0f, 0f, internalWidth.toFloat()] = baseSize.toFloat()\r\n        for (s in streaks!!) {\r\n            drawRow(canvas, s, rect)\r\n            rect!!.offset(0f, baseSize.toFloat())\r\n        }\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "Neo-Backup/189" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/187" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/332" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/376" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Neo-Backup/188" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/1414" : [ "        super.onSaveInstanceState(outState)\n        outState.putString(STATE_SELECTED_ACCOUNT_UUID, selectedAccountUuid)\r\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n--------------------------------------------------\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n        outState.putString(STATE_SELECTED_FOLDER_DISPLAY_NAME, selectedFolderDisplayName)\r\n    }\n--------------------------------------------------\neditor.putString(\"x\", \"y\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"storage-value\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"other-value\")\n--------------------------------------------------\nputString(key, value.name)", "override fun putString(key: String, value: String?) = apply {\r\n            if (value == null) {\r\n                remove(key)\r\n            } else {\r\n                changes[key] = value\r\n                removals.remove(key)\r\n            }\r\n        }" ],
  "Trail-Sense/334" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/335" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/377" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Trail-Sense/336" : [ "@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    View view = ((LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.dialog_tips, null);\r\n    // set tips\r\n    TextView textTips = view.findViewById(R.id.textViewTips);\r\n    textTips.setText(getTips());\r\n    textTips.setVisibility(!isViewAsWeb() ? View.VISIBLE : View.GONE);\r\n    // webView\r\n    WebView webView = view.findViewById(R.id.webViewTips);\r\n    webView.setVisibility(isViewAsWeb() ? View.VISIBLE : View.GONE);\r\n    if (getRawWeb() != 0) {\r\n        webView.loadData(MmxFileUtils.getRawAsString(getActivity(), getRawWeb()), \"text/html\", \"UTF-8\");\r\n    }\r\n    // check box\r\n    CheckBox checkDont = view.findViewById(R.id.checkBoxDontShow);\r\n    checkDont.setVisibility(isVisibleDontShowAgain() ? View.VISIBLE : View.GONE);\r\n    checkDont.setChecked(isCheckDontShowAgain());\r\n    checkDont.setOnCheckedChangeListener(new OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n            setCheckDontShowAgain(isChecked);\r\n        }\r\n    });\r\n    // bug CheckBox object of Android\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {\r\n        final double scale = this.getResources().getDisplayMetrics().density;\r\n        checkDont.setPadding(checkDont.getPaddingLeft() + (int) (40.0f * scale + 0.5f), checkDont.getPaddingTop(), checkDont.getPaddingRight(), checkDont.getPaddingBottom());\r\n    }\r\n    return new AlertDialogWrapper(getContext()).setTitle(getTitle()).setView(view).setCancelable(false).setNeutralButton(android.R.string.ok, new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            if (getActivity() != null) {\r\n                getActivity().getSharedPreferences(PREF_DIALOG, 0).edit().putBoolean(getKey(), !isCheckDontShowAgain()).commit();\r\n            }\r\n            dialog.dismiss();\r\n        }\r\n    }).create();\r\n}\n--------------------------------------------------\nprotected void showProgressDialog(Integer max) {\r\n    mDialog = new ProgressDialog(getContext());\r\n    mDialog.setMessage(getContext().getString(R.string.starting_price_update));\r\n    mDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n    //        mDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n    if (max != null) {\r\n        mDialog.setMax(max);\r\n    }\r\n    mDialog.setCancelable(false);\r\n    mDialog.setCanceledOnTouchOutside(false);\r\n    mDialog.show();\r\n}\n--------------------------------------------------\n", "public AlertDialogWrapper setCancelable(boolean cancelable) {\r\n    builder.cancelable(cancelable);\r\n    return this;\r\n}" ],
  "Trail-Sense/1412" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Trail-Sense/1418" : [ "", "import io.horizontalsystems.bankwallet.R\nimport androidx.activity.compose.setContent\nimport android.provider.Settings\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setContent {\r\n            QRScannerScreen(\r\n                showPasteButton = intent.getBooleanExtra(SHOW_PASTE_BUTTON, false),\r\n                onScan = { onScan(it) },\r\n                onCloseClick = { finish() },\r\n                onCameraPermissionSettingsClick = { openCameraPermissionSettings() }\r\n            )\r\n        }\r\n        setStatusBarTransparent()\r\n    }\nimport android.os.Bundle\nimport android.provider.Settings\nimport androidx.activity.compose.setContent\nimport io.horizontalsystems.bankwallet.R" ],
  "VinylMusicPlayer/913" : [ "", "import java.util.List\nimport android.view.View\nimport android.view.MenuItem\n@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    if (recyclerAdapter != null) {\r\n        recyclerAdapter.endSelectMode();\r\n    }\r\n    recyclerAdapter = null;\r\n    if (toolbar != null) {\r\n        toolbar.setOnMenuItemClickListener(null);\r\n        toolbar.setOnLongClickListener(null);\r\n    }\r\n}" ],
  "Trail-Sense/339" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/916" : [ "this@AbsMusicServiceActivity.onServiceConnected()\n--------------------------------------------------\nlistener.onServiceConnected()\n--------------------------------------------------\nsuper.onServiceConnected()", "import code.name.monkey.retromusic.model.Song\noverride fun onServiceConnected() {\n        super.onServiceConnected()\n        updateIsFavorite()\n        updateSong()\n    }" ],
  "Trail-Sense/1417" : [ "", "import android.view.View\noverride fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }" ],
  "VinylMusicPlayer/915" : [ "", "import com.simplemobiletools.notes.pro.models.Note\noverride fun onResume() {\r\n        super.onResume()\r\n        loadNoteById(noteId)\r\n    }" ],
  "MaterialFiles/1047" : [ "        if (list == null) {\n            var defaultOrder = preferences.getStringValue(prefId)\r\n            if (isNullOrEmpty(defaultOrder)) {\n--------------------------------------------------\n        )\n        preferences.getStringValue(R.string.p_default_recurrence)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n                }\n        preferences.getStringValue(R.string.p_default_location)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n        if (tags.isEmpty()) {\n            preferences.getStringValue(R.string.p_default_tags)\r\n                    ?.split(\",\")\n--------------------------------------------------\npreferences.getStringValue(R.string.p_dashclock_filter)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_account)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_folder)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_list)\n--------------------------------------------------\npreferences.getStringValue(resId)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_start_of_week)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_recurrence)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_location)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_tags)", "import timber.log.Timber\nfun getStringValue(key: String?): String? = try {\r\n        prefs.getString(key, null)\r\n    } catch (e: Exception) {\r\n        Timber.e(e)\r\n        null\r\n    }\nimport timber.log.Timber" ],
  "MaterialFiles/1049" : [ "", "import com.kickstarter.libs.Config\nfun Config.isFeatureFlagEnabled(text: String): Boolean {\r\n    val isEnabled = this\r\n        .features()\r\n        ?.get(text)\r\n\r\n    return isEnabled ?: false\r\n}\nImport(names=[com, kickstarter, libs, Config], wildcard=false, alias=null)" ],
  "QuickNovel/52" : [ "\n            folderNotifyNewMailMode = getEnumStringPref<FolderMode>(\r\n                storage,\n--------------------------------------------------\n            val draftsFolderId = storage.getString(\"$accountUuid.draftsFolderId\", null)?.toLongOrNull()\n            val draftsFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val sentFolderId = storage.getString(\"$accountUuid.sentFolderId\", null)?.toLongOrNull()\n            val sentFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val trashFolderId = storage.getString(\"$accountUuid.trashFolderId\", null)?.toLongOrNull()\n            val trashFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val archiveFolderId = storage.getString(\"$accountUuid.archiveFolderId\", null)?.toLongOrNull()\n            val archiveFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val spamFolderId = storage.getString(\"$accountUuid.spamFolderId\", null)?.toLongOrNull()\n            val spamFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n\n            expungePolicy = getEnumStringPref(storage, \"$accountUuid.expungePolicy\", Expunge.EXPUNGE_IMMEDIATELY)\r\n            isSyncRemoteDeletions = storage.getBoolean(\"$accountUuid.syncRemoteDeletions\", true)\n--------------------------------------------------\n            maximumAutoDownloadMessageSize = storage.getInt(\"$accountUuid.maximumAutoDownloadMessageSize\", 32768)\n            messageFormat = getEnumStringPref(storage, \"$accountUuid.messageFormat\", DEFAULT_MESSAGE_FORMAT)\r\n            val messageFormatAuto = storage.getBoolean(\"$accountUuid.messageFormatAuto\", DEFAULT_MESSAGE_FORMAT_AUTO)\n--------------------------------------------------\n            isMessageReadReceipt = storage.getBoolean(\"$accountUuid.messageReadReceipt\", DEFAULT_MESSAGE_READ_RECEIPT)\n            quoteStyle = getEnumStringPref<QuoteStyle>(storage, \"$accountUuid.quoteStyle\", DEFAULT_QUOTE_STYLE)\r\n            quotePrefix = storage.getString(\"$accountUuid.quotePrefix\", DEFAULT_QUOTE_PREFIX)\n--------------------------------------------------\n\n            sortType = getEnumStringPref<SortType>(storage, \"$accountUuid.sortTypeEnum\", SortType.SORT_DATE)\r\n\n--------------------------------------------------\n\n            showPictures = getEnumStringPref<ShowPictures>(storage, \"$accountUuid.showPicturesEnum\", ShowPictures.NEVER)\r\n\n--------------------------------------------------\n                    ringtone = storage.getString(\"$accountUuid.ringtone\", DEFAULT_RINGTONE_URI),\n                    light = getEnumStringPref(storage, \"$accountUuid.notificationLight\", NotificationLight.Disabled),\r\n                    vibration = NotificationVibration(\n--------------------------------------------------\n            folderDisplayMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderDisplayMode\", FolderMode.NOT_SECOND_CLASS)\r\n\n--------------------------------------------------\n            folderSyncMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderSyncMode\", FolderMode.FIRST_CLASS)\r\n\n--------------------------------------------------\n\n            folderPushMode = getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderPushMode\", FolderMode.NONE)\r\n\n--------------------------------------------------\n            folderTargetMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderTargetMode\", FolderMode.NOT_SECOND_CLASS)\r\n\n--------------------------------------------------\n\n            searchableFolders = getEnumStringPref<Searchable>(storage, \"$accountUuid.searchableFolders\", Searchable.ALL)\r\n", "import android.os.Bundle\ninline fun <reified T : Enum<T>> Bundle.getEnum(key: String, defaultValue: T): T {\r\n    val value = getString(key) ?: return defaultValue\r\n    return enumValueOf(value)\r\n}\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/917" : [ "listener.onPlayingMetaChanged()\n--------------------------------------------------\nactivity.onPlayingMetaChanged()\n--------------------------------------------------\nsuper.onPlayingMetaChanged()", "override fun onPlayingMetaChanged() {\n        super.onPlayingMetaChanged()\n        updateSong()\n    }" ],
  "MaterialFiles/1061" : [ "", "import android.graphics.Rect;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.graphics.Rect\n@Override\r\npublic boolean getPadding(@NonNull Rect padding) {\r\n    if (needMirroring()) {\r\n        padding.set(mPaddingEnd, 0, mPaddingStart, 0);\r\n    } else {\r\n        padding.set(mPaddingStart, 0, mPaddingEnd, 0);\r\n    }\r\n    return true;\r\n}" ],
  "QuickNovel/55" : [ "                ) {\n                    viewModel.onEnterApiKey(it)\r\n                }", "fun onEnterApiKey(v: String) {\r\n        apiKey = v\r\n        emitState()\r\n    }" ],
  "Neo-Backup/192" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "QuickNovel/56" : [ "                onConnected = { hostname ->\n                    mainViewModel.switchServer(hostname)\r\n                },", "suspend fun switchServer(hostname: String) {\r\n        apiClientController.setupServer(hostname)\r\n        refreshServer()\r\n    }" ],
  "Neo-Backup/193" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/190" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/191" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "QuickNovel/58" : [ "                            .replace(R.id.detail, newEmptyTaskEditFragment())\n                            .runOnCommit {\r\n                                if (isSinglePaneLayout) {\n--------------------------------------------------\n                        .replace(R.id.detail, newTaskEditFragment(task), FRAG_TAG_TASK_EDIT)\n                        .runOnCommit {\r\n                            if (isSinglePaneLayout) {\n--------------------------------------------------\n                    .replace(R.id.master, tlf, FRAG_TAG_TASK_LIST)\n                    .runOnCommit { updateSystemBars(newFilter) }\r\n                    .commit()\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(account).createGtaskList(name)!!\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).deleteGtaskList(list.uuid)\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).renameGtaskList(list.uuid, name)!!\n}\n--------------------------------------------------\ngetEmail(authState.accessToken) ?: run {\n    error(\"Failed to fetch profile\")\n    return@launch\n}\n--------------------------------------------------\nrun {\n    clientProvider.forUrl(url, username, password, foreground = true).getSession()\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).makeCollection(name, color)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).deleteCollection(calendar)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).updateCollection(calendar, name, color)\n}\n--------------------------------------------------\nrun {\n    if (isNullOrEmpty(pass)) {\n        clientProvider.forUrl(url, user, null, session, true).getSession()\n    } else {\n        clientProvider.forUrl(url, user, pass, foreground = true).getSession()\n    }\n}\n--------------------------------------------------\nrun()\n--------------------------------------------------\nthrottle.run {\n    notificationManagerCompat.notify(id, notification)\n}", "protected suspend fun run(action: suspend () -> Unit) {\r\n        if (!inProgress) {\r\n            inProgress = true\r\n            try {\r\n                action()\r\n                completed.value = true\r\n            } catch (e: Exception) {\r\n                error.value = e\r\n            }\r\n            inProgress = false\r\n        }\r\n    }" ],
  "QuickNovel/59" : [ "Translator.getString(R.string.FeeSettings_RiskOfGettingStuck_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuck)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuckLegacy_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuckLegacy)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_Overpricing_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_Overpricing)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpact)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpactTooHigh, warning.providerName)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpactWarning)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Warning_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientBalance_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_InsufficientBalanceForFee, baseCoinService.token.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.SendEvmSettings_Error_NonceUsed_Title)\n--------------------------------------------------\nTranslator.getString(R.string.SendEvmSettings_Error_NonceUsed)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_InsufficientBalance, baseCoinService.coinValue(convertedError.requiredBalance).getFormattedFull())\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_ExecutionReverted, convertedError.message ?: \"\")\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_CannotEstimate_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_CannotEstimate, baseCoinService.token.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_LowerThanBaseGasLimit_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_LowerThanBaseGasLimit)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientLiquidity_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientLiquidity)\n--------------------------------------------------\ns.getString()\n--------------------------------------------------\ndescription?.getString()\n--------------------------------------------------\nTranslator.getString(R.string.CoinPage_NoData)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_InvalidAddress)\n--------------------------------------------------\npreferences.getString(SEND_INPUT_TYPE, null)\n--------------------------------------------------\npreferences.getString(\"marketSearchRecentCoinUids\", null)\n--------------------------------------------------\npreferences.getString(BASE_CURRENCY_CODE, null)\n--------------------------------------------------\npreferences.getString(AUTH_TOKEN, null)\n--------------------------------------------------\npreferences.getString(APP_ID, null)\n--------------------------------------------------\npreferences.getString(BASE_BITCOIN_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_LITECOIN_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_ETHEREUM_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_DASH_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_BINANCE_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_ZCASH_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(SORT_TYPE, null)\n--------------------------------------------------\npreferences.getString(APP_VERSIONS, null)\n--------------------------------------------------\npreferences.getString(ENCRYPTION_CHECKER_TEXT, null)\n--------------------------------------------------\npreferences.getString(CURRENT_THEME, null)\n--------------------------------------------------\npreferences.getString(\"balanceViewType\", null)\n--------------------------------------------------\npreferences.getString(PIN, null)\n--------------------------------------------------\npreferences.getString(SYNC_MODE, null)\n--------------------------------------------------\npreferences.getString(BITCOIN_DERIVATION, null)\n--------------------------------------------------\npreferences.getString(\"balanceTotalCoinUid\", null)\n--------------------------------------------------\npreferences.getString(MARKET_CURRENT_TAB, null)\n--------------------------------------------------\npreferences.getString(NOTIFICATION_ID, null)\n--------------------------------------------------\npreferences.getString(CHANGELOG_SHOWN_FOR_APP_VERSION, null)\n--------------------------------------------------\npreferences.getString(LAUNCH_PAGE, null)\n--------------------------------------------------\npreferences.getString(APP_ICON, null)\n--------------------------------------------------\npreferences.getString(MAIN_TAB, null)\n--------------------------------------------------\npreferences.getString(MARKET_FAVORITES_SORTING_FIELD, null)\n--------------------------------------------------\npreferences.getString(MARKET_FAVORITES_MARKET_FIELD, null)\n--------------------------------------------------\npreferences.getString(getSwapProviderKey(blockchainType), null)\n--------------------------------------------------\npreferences.getString(APP_AUTO_LOCK_INTERVAL, null)\n--------------------------------------------------\nTranslator.getString(R.string.LargeNumberFormat, formattedNumber, Translator.getString(it))\n--------------------------------------------------\nTranslator.getString(it)\n--------------------------------------------------\nTranslator.getString(R.string.ManageAccount_BirthdayHeight, token.coin.code)\n--------------------------------------------------\nApp.instance.localizedContext().getString(id)\n--------------------------------------------------\nApp.instance.localizedContext().getString(id, *params)\n--------------------------------------------------\nzcashAccountsCursor.getString(idColumnIndex)\n--------------------------------------------------\nzcashAccountsCursor.getString(birthdayHeightColumnIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(coinTypeIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(keyIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(valueIndex)\n--------------------------------------------------\nfirstAccountCursor.getString(idColumnIndex)\n--------------------------------------------------\ncursor.getString(coinTypeColumnIndex)\n--------------------------------------------------\ncursor.getString(keyColumnIndex)\n--------------------------------------------------\ncursor.getString(valueColumnIndex)\n--------------------------------------------------\nwalletsCursor.getString(coinIdColumnIndex)\n--------------------------------------------------\nSettings.Secure.getString(context.contentResolver, Settings.Secure.DEFAULT_INPUT_METHOD)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_InvalidBlockchainAddress, blockchainName)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_WatchWallets)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_Watchlist)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_CustomRpc)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_AppSettingsTitle)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_AppSettingsDescription)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Syncing_WithProgress, state.progress.toString())\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Syncing)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_SearchingTransactions)\n--------------------------------------------------\ngetString(R.string.Balance_SyncedUntil, DateHelper.formatDate(state.lastBlockDate, \"MMM d, yyyy\"))\n--------------------------------------------------\nTranslator.getString(R.string.Balance_FoundTx, state.count.toString())\n--------------------------------------------------\nTranslator.getString(R.string.Hud_Text_NoInternet)\n--------------------------------------------------\nTranslator.getString(item.restoreMode.title)\n--------------------------------------------------\nTranslator.getString(mode.title)\n--------------------------------------------------\nTranslator.getString(mode.description)\n--------------------------------------------------\nauditViewItem.issues.getString()\n--------------------------------------------------\nrequireArguments().getString(COIN_UID_KEY, \"\")\n--------------------------------------------------\nrequireArguments().getString(API_TAG_KEY, \"\")\n--------------------------------------------------\nTranslator.getString(R.string.Error_NotInteger)\n--------------------------------------------------\nTranslator.getString(R.string.Error_OutOfRange, lower, upper)\n--------------------------------------------------\narguments?.getString(\"indicatorId\")\n--------------------------------------------------\nTranslator.getString(rankType.title)\n--------------------------------------------------\nTranslator.getString(rankType.description)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts_Error_DefinedName)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts_Error_DefinedAddress, contact.name)\n--------------------------------------------------\nTranslator.getString(R.string.CreateWallet_N_Words, wordsCount)\n--------------------------------------------------\nTranslator.getString(R.string.CreateWallet_N_WordsRecommended, wordsCount)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Receive_AddressMemoAlert)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Receive_AddressAlert)\n--------------------------------------------------\nTranslator.getString(R.string.NotAvailable)\n--------------------------------------------------\nTranslator.getString(R.string.AddEvmSyncSource_Error_InvalidUrl)\n--------------------------------------------------\nTranslator.getString(R.string.AddEvmSyncSource_Warning_UrlExists)\n--------------------------------------------------\nrequireArguments().getString(keyTitle)\n--------------------------------------------------\nrequireArguments().getString(keyText)\n--------------------------------------------------\nrequireArguments().getString(LOCK_TIME)\n--------------------------------------------------\nrequireArguments().getString(TEXT)\n--------------------------------------------------\narguments?.getString(EVM_ADDRESS_KEY)\n--------------------------------------------------\narguments?.getString(markdownUrlKey)\n--------------------------------------------------\nTranslator.getString(R.string.Market_MinutesAgo, minutesAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_HoursAgo, hoursAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_DaysAgo, daysAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_Category_TopCoins)\n--------------------------------------------------\nTranslator.getString(R.string.Market_Category_TopCoins_Description)\n--------------------------------------------------\nTranslator.getString(R.string.Nft_TopCollections)\n--------------------------------------------------\nTranslator.getString(R.string.Nft_TopCollections_Description)\n--------------------------------------------------\nrequireArguments().getString(collectionUidKey, \"\")\n--------------------------------------------------\nrequireArguments().getString(blockchainTypeUidKey, \"\")\n--------------------------------------------------\nrequireArguments().getString(TITLE)\n--------------------------------------------------\nTranslator.getString(R.string.Send_Error_UnsupportedAddress)\n--------------------------------------------------\nTranslator.getString(R.string.Tron_AddressNotActive_Warning)\n--------------------------------------------------\nTranslator.getString(R.string.Tron_SelfSendTrxNotAllowed)\n--------------------------------------------------\nTranslator.getString(R.string.Send_Error_SendToSelf)\n--------------------------------------------------\nTranslator.getString(R.string.is_release)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_DeadlineMinute, lowerMinutes)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_DeadlineMinute, upperMinutes)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageZero)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_DeadlineZero)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageTooLow)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageTooHigh, invalidSlippageType.max)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Warning_UnusualSlippage)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_Percent, priceImpact * BigDecimal.valueOf(-1))\n--------------------------------------------------\nTranslator.getString(R.string.Duration_Minutes, ttl / 60)\n--------------------------------------------------\narguments?.getString(TRANSACTION_HASH_KEY)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Title)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Title)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Description)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Description, baseToken.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Button)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Button)\n--------------------------------------------------\nTranslator.getString(R.string.Timestamp_Today)\n--------------------------------------------------\nTranslator.getString(R.string.Timestamp_Yesterday)\n--------------------------------------------------\narguments?.getString(WC_CONNECTION_URI_KEY)\n--------------------------------------------------\nTranslator.getString(R.string.Watch_Error_InvalidAddressFormat)\n--------------------------------------------------\nTranslator.getString(id, formatArgs)\n--------------------------------------------------\nTranslator.getString(R.string.Any)\n--------------------------------------------------\ncontext.getString(R.string.Hud_Text_NoInternet)\n--------------------------------------------------\ncontext.getString(R.string.SyncError)", "import androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\n @Composable\r\n    fun getString(): String {\r\n        return when (this) {\r\n            is PlainString -> text\r\n            is ResString -> stringResource(id, *formatArgs)\r\n        }\r\n    }\nImport(names=[androidx, compose, ui, res, stringResource], wildcard=false, alias=null)" ],
  "MaterialFiles/1065" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/196" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "MaterialFiles/1064" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/197" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/194" : [ "@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == R.string.title_enabled) {\r\n        onActionSync(!item.isChecked());\r\n        return true;\r\n    } else if (itemId == R.string.title_account_ondemand) {\r\n        onActionOnDemand(!item.isChecked());\r\n        return true;\r\n    } else if (itemId == R.string.title_primary) {\r\n        onActionPrimary(!item.isChecked());\r\n        return true;\r\n    } else if (itemId == R.string.title_create_channel) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)\r\n            onActionCreateChannel();\r\n        return true;\r\n    } else if (itemId == R.string.title_edit_channel) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)\r\n            onActionEditChannel();\r\n        return true;\r\n    } else if (itemId == R.string.title_delete_channel) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)\r\n            onActionDeleteChannel();\r\n        return true;\r\n    } else if (itemId == R.string.title_edit_properties) {\r\n        ViewHolder.this.onClick(view);\r\n        return true;\r\n    } else if (itemId == R.string.title_copy) {\r\n        onActionCopy();\r\n        return true;\r\n    } else if (itemId == R.string.title_delete) {\r\n        onActionDelete();\r\n        return true;\r\n    } else if (itemId == R.string.title_log) {\r\n        onActionLog();\r\n        return true;\r\n    } else if (itemId == R.string.title_reset) {\r\n        onActionReset();\r\n        return true;\r\n    } else if (itemId == R.string.title_setup_oauth_authorize) {\r\n        onActionAuthorize();\r\n        return true;\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == R.string.title_enabled) {\r\n        onActionSync(!item.isChecked());\r\n        return true;\r\n    } else if (itemId == R.string.title_primary) {\r\n        onActionPrimary(!item.isChecked());\r\n        return true;\r\n    } else if (itemId == R.string.title_reset_sign_key) {\r\n        onActionClearSignKey();\r\n        return true;\r\n    } else if (itemId == R.string.title_advanced_create_alias) {\r\n        onActionAlias();\r\n        return true;\r\n    } else if (itemId == R.string.title_edit_properties) {\r\n        onClick(view);\r\n        return true;\r\n    } else if (itemId == R.string.title_copy) {\r\n        onActionCopy();\r\n        return true;\r\n    } else if (itemId == R.string.title_delete) {\r\n        onActionDelete();\r\n        return true;\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport android.content.DialogInterface\nimport android.app.Dialog\nimport android.app.Activity.RESULT_OK\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    Calendar calendar = calendars.get(which);\r\n    args.putLong(\"id\", calendar.id);\r\n    args.putString(\"account\", calendar.account);\r\n    args.putString(\"type\", calendar.type);\r\n    args.putString(\"name\", calendar.name);\r\n    sendResult(RESULT_OK);\r\n    dismiss();\r\n}" ],
  "MaterialFiles/1067" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/195" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/341" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1422" : [ "", "import org.tasks.data.Location\nimport org.tasks.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    if (!permissionChecker.canAccessBackgroundLocation()) {\r\n        dismiss();\r\n    }\r\n}" ],
  "Neo-Backup/198" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/199" : [ "                if (textState.text.isNotEmpty()) {\n                    ButtonSecondaryCircle(\r\n                        modifier = Modifier.padding(start = 8.dp, end = 16.dp),\n--------------------------------------------------\n\n                    ButtonSecondaryCircle(\r\n                        icon = R.drawable.ic_manage_2,\n--------------------------------------------------\nButtonSecondaryCircle(modifier = Modifier.padding(horizontal = 16.dp), icon = icon, tint = iconTint) {\n    navController.slideFromRight(R.id.manageAccountFragment, ManageAccountModule.prepareParams(accountViewItem.accountId))\n}", "import io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme\nimport io.horizontalsystems.bankwallet.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Icon\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.background\nimport androidx.annotation.DrawableRes\n\r\n@Composable\r\nfun ButtonSecondaryCircle(\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    @DrawableRes icon: Int = R.drawable.ic_arrow_down_20,\r\n    contentDescription: String? = null,\r\n    tint: Color = ComposeAppTheme.colors.leah,\r\n    onClick: () -> Unit,\r\n) {\r\n    HsIconButton(\r\n        onClick = onClick,\r\n        modifier = modifier\r\n            .size(28.dp)\r\n            .clip(CircleShape)\r\n            .background(ComposeAppTheme.colors.steel20),\r\n        enabled = enabled,\r\n        rippleColor = tint\r\n    ) {\r\n        Icon(\r\n            painter = painterResource(id = icon),\r\n            contentDescription = contentDescription,\r\n            tint = tint\r\n        )\r\n    }\r\n}\nimport androidx.annotation.DrawableRes\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.Icon\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme" ],
  "Iconify/899" : [ "", "import android.content.Context\nfun getScreenWidth(context: Context): Int {\n        val displayMetrics = context.resources.displayMetrics\n        return displayMetrics.widthPixels\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/414" : [ "FileUtils.copyFile(db, dst)\n--------------------------------------------------\nFileUtils.copyFile(db, dbFile)\n--------------------------------------------------\nFileUtils.copyFile(File(uri.path), VLCOptions.getSoundFontFile(context))\n--------------------------------------------------\ncopyFile(`in`, out)\n--------------------------------------------------\nret and copyFile(file, File(dst, file.name))", "import java.io\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    @Throws(IOException::class)\r\n    private fun copyFile(inputStream: InputStream, out: OutputStream) {\r\n        val buffer = ByteArray(1024)\r\n        var read = inputStream.read(buffer)\r\n        while (read != -1) {\r\n            out.write(buffer, 0, read)\r\n            read = inputStream.read(buffer)\r\n        }\r\n    }" ],
  "Iconify/898" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/389" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "MaterialFiles/388" : [ "/**\r\n * Bind input stream for processing.\r\n * Stream will be processed in byte[] chunks.\r\n * If stream is null, reference to stream will be released.\r\n *\r\n * @param stream set input stream\r\n * @return itself\r\n * @throws IOException unable to read from stream\r\n */\r\npublic final JsonReader<TContext> process(@Nullable final InputStream stream) throws IOException {\r\n    this.currentPosition = 0;\r\n    this.currentIndex = 0;\r\n    this.stream = stream;\r\n    if (stream != null) {\r\n        this.readLimit = this.length < bufferLenWithExtraSpace ? this.length : bufferLenWithExtraSpace;\r\n        final int available = readFully(buffer, stream, 0);\r\n        readLimit = available < bufferLenWithExtraSpace ? available : bufferLenWithExtraSpace;\r\n        this.length = available;\r\n    }\r\n    return this;\r\n}\n--------------------------------------------------\nprivate int prepareNextBlock() throws IOException {\r\n    final int len = length - currentIndex;\r\n    System.arraycopy(buffer, currentIndex, buffer, 0, len);\r\n    final int available = readFully(buffer, stream, len);\r\n    currentPosition += currentIndex;\r\n    if (available == len) {\r\n        readLimit = length - currentIndex;\r\n        length = readLimit;\r\n        currentIndex = 0;\r\n    } else {\r\n        readLimit = available < bufferLenWithExtraSpace ? available : bufferLenWithExtraSpace;\r\n        this.length = available;\r\n        currentIndex = 0;\r\n    }\r\n    return available;\r\n}\n--------------------------------------------------\n", "import java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStream\nimport java.io.IOException\nprivate static int readFully(final byte[] buffer, final InputStream stream, final int offset) throws IOException {\r\n    int read;\r\n    int position = offset;\r\n    while (position < buffer.length && (read = stream.read(buffer, position, buffer.length - position)) != -1) {\r\n        position += read;\r\n    }\r\n    return position;\r\n}" ],
  "Iconify/897" : [ "setLRCViewColors(color.primaryTextColor, color.secondaryTextColor)\n--------------------------------------------------\nsetLRCViewColors(primaryColor, secondaryColor)\n--------------------------------------------------\nColor, Classic -> setLRCViewColors(color.primaryTextColor, color.secondaryTextColor)\n--------------------------------------------------\nBlur -> setLRCViewColors(Color.WHITE, ColorUtil.withAlpha(Color.WHITE, 0.5f))\n--------------------------------------------------\nelse -> setLRCViewColors(primaryColor, secondaryColor)", "import code.name.monkey.retromusic.R\nimport androidx.annotation.ColorInt\nimport android.view.View\nimport android.graphics.Color\nprivate fun setLRCViewColors(@ColorInt primaryColor: Int, @ColorInt secondaryColor: Int) {\n        lrcView.apply {\n            setCurrentColor(primaryColor)\n            setTimeTextColor(primaryColor)\n            setTimelineColor(primaryColor)\n            setNormalColor(secondaryColor)\n            setTimelineTextColor(primaryColor)\n        }\n    }\nImport(names=[androidx, annotation, ColorInt], wildcard=false, alias=null)" ],
  "Trail-Sense/1423" : [ "updateStartTexts()", "private fun updateStartTexts() {\r\n        updateStartDateText()\r\n        updateStartTimeText()\r\n    }" ],
  "Iconify/412" : [ "    if (!response.isSuccessful) { // handle unsuccessful response\n      closeQuietly()\r\n      throw HttpDataSource.InvalidResponseCodeException(\n--------------------------------------------------\n    } catch (e: IOException) {\n      closeQuietly()\r\n      throw HttpDataSource.HttpDataSourceException.createForIOException(\n--------------------------------------------------\n    if (skipped != dataSpec.position) {\n      closeQuietly()\r\n      throw HttpDataSource.HttpDataSourceException(\n--------------------------------------------------\n{\r\n    if (opened) {\r\n      opened = false\r\n      transferEnded()\r\n      closeQuietly()\r\n    }\r\n  }\n--------------------------------------------------\n{\r\n    response?.body()?.closeQuietly()\r\n    response = null\r\n  }", "import okhttp3.internal.closeQuietly\nprivate fun closeQuietly() {\r\n    response?.body()?.closeQuietly()\r\n    response = null\r\n  }\nimport okhttp3.internal.closeQuietly" ],
  "Trail-Sense/348" : [ "@Override\r\npublic ResultCode onConnecting(final Callback callback, Context context) {\r\n    if (ContextCompat.checkSelfPermission(this.tracker, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n        mWithoutGps = true;\r\n    }\r\n    try {\r\n        LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        frequency_ms = parseAndFixInteger(preferences, R.string.pref_pollInterval, \"1000\", context);\r\n        if (!mWithoutGps) {\r\n            Integer frequency_meters = parseAndFixInteger(preferences, R.string.pref_pollDistance, \"0\", context);\r\n            lm.requestLocationUpdates(GPS_PROVIDER, frequency_ms, frequency_meters, tracker);\r\n            mGpsStatus = new GpsStatus(context);\r\n            mGpsStatus.start(this);\r\n            mConnectCallback = callback;\r\n            return ResultCode.RESULT_PENDING;\r\n        } else {\r\n            String[] list = { GPS_PROVIDER, NETWORK_PROVIDER, PASSIVE_PROVIDER };\r\n            mLastLocation = null;\r\n            for (String s : list) {\r\n                Location tmp = lm.getLastKnownLocation(s);\r\n                if (mLastLocation == null || tmp.getTime() > mLastLocation.getTime()) {\r\n                    mLastLocation = tmp;\r\n                }\r\n            }\r\n            if (mLastLocation != null) {\r\n                mLastLocation.removeSpeed();\r\n                mLastLocation.removeAltitude();\r\n                mLastLocation.removeAccuracy();\r\n                mLastLocation.removeBearing();\r\n            }\r\n            gpsLessLocationProvider.run();\r\n            return ResultCode.RESULT_OK;\r\n        }\r\n    } catch (Exception ex) {\r\n        return ResultCode.RESULT_ERROR;\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic ResultCode onConnecting(final Callback callback, Context context) {\r\n    if (ContextCompat.checkSelfPermission(this.tracker, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n        mWithoutGps = true;\r\n    }\r\n    try {\r\n        LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        frequency_ms = parseAndFixInteger(preferences, R.string.pref_pollInterval, \"1000\", context);\r\n        if (!mWithoutGps) {\r\n            Integer frequency_meters = parseAndFixInteger(preferences, R.string.pref_pollDistance, \"0\", context);\r\n            lm.requestLocationUpdates(GPS_PROVIDER, frequency_ms, frequency_meters, tracker);\r\n            mGpsStatus = new GpsStatus(context);\r\n            mGpsStatus.start(this);\r\n            mConnectCallback = callback;\r\n            return ResultCode.RESULT_PENDING;\r\n        } else {\r\n            String[] list = { GPS_PROVIDER, NETWORK_PROVIDER, PASSIVE_PROVIDER };\r\n            mLastLocation = null;\r\n            for (String s : list) {\r\n                Location tmp = lm.getLastKnownLocation(s);\r\n                if (mLastLocation == null || tmp.getTime() > mLastLocation.getTime()) {\r\n                    mLastLocation = tmp;\r\n                }\r\n            }\r\n            if (mLastLocation != null) {\r\n                mLastLocation.removeSpeed();\r\n                mLastLocation.removeAltitude();\r\n                mLastLocation.removeAccuracy();\r\n                mLastLocation.removeBearing();\r\n            }\r\n            gpsLessLocationProvider.run();\r\n            return ResultCode.RESULT_OK;\r\n        }\r\n    } catch (Exception ex) {\r\n        return ResultCode.RESULT_ERROR;\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.text.TextUtils\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate Integer parseAndFixInteger(SharedPreferences preferences, int resId, String def, Context context) {\r\n    String s = preferences.getString(context.getString(resId), def);\r\n    if (TextUtils.isEmpty(s)) {\r\n        // Update the settings\r\n        SharedPreferences.Editor prefedit = preferences.edit();\r\n        prefedit.putString(context.getString(resId), def);\r\n        prefedit.apply();\r\n        s = def;\r\n    }\r\n    return Integer.parseInt(s);\r\n}" ],
  "Iconify/411" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1424" : [ "add(RadioItem(0, getString(R.string.create_new_note)))\n--------------------------------------------------\nadd(RadioItem(index + 1, note.title))\n--------------------------------------------------\nadd(FAQItem(com.simplemobiletools.commons.R.string.faq_2_title_commons, com.simplemobiletools.commons.R.string.faq_2_text_commons))\n--------------------------------------------------\nadd(FAQItem(com.simplemobiletools.commons.R.string.faq_6_title_commons, com.simplemobiletools.commons.R.string.faq_6_text_commons))\n--------------------------------------------------\nadd(FAQItem(com.simplemobiletools.commons.R.string.faq_7_title_commons, com.simplemobiletools.commons.R.string.faq_7_text_commons))\n--------------------------------------------------\nadd(FAQItem(com.simplemobiletools.commons.R.string.faq_10_title_commons, com.simplemobiletools.commons.R.string.faq_10_text_commons))\n--------------------------------------------------\nadd(Release(25, R.string.release_25))\n--------------------------------------------------\nadd(Release(28, R.string.release_28))\n--------------------------------------------------\nadd(Release(29, R.string.release_29))\n--------------------------------------------------\nadd(Release(39, R.string.release_39))\n--------------------------------------------------\nadd(Release(45, R.string.release_45))\n--------------------------------------------------\nadd(Release(49, R.string.release_49))\n--------------------------------------------------\nadd(Release(51, R.string.release_51))\n--------------------------------------------------\nadd(Release(57, R.string.release_57))\n--------------------------------------------------\nadd(Release(62, R.string.release_62))\n--------------------------------------------------\nadd(Release(64, R.string.release_64))\n--------------------------------------------------\nadd(Release(67, R.string.release_67))\n--------------------------------------------------\nadd(Release(81, R.string.release_81))\n--------------------------------------------------\nadd(Release(86, R.string.release_86))\n--------------------------------------------------\nitems.add(RadioItem(it.id!!.toInt(), it.title))\n--------------------------------------------------\nadd(ChecklistItem(0, System.currentTimeMillis(), \"Milk\", true))\n--------------------------------------------------\nadd(ChecklistItem(1, System.currentTimeMillis(), \"Butter\", true))\n--------------------------------------------------\nadd(ChecklistItem(2, System.currentTimeMillis(), \"Salt\", false))\n--------------------------------------------------\nadd(ChecklistItem(3, System.currentTimeMillis(), \"Water\", false))\n--------------------------------------------------\nadd(ChecklistItem(4, System.currentTimeMillis(), \"Meat\", true))\n--------------------------------------------------\npositions.add(position)\n--------------------------------------------------\nremoveItems.add(favorite)\n--------------------------------------------------\nmovedPositions.add(position)\n--------------------------------------------------\nitems.add(0, tempItem)\n--------------------------------------------------\nitems.add(items.size, tempItem)\n--------------------------------------------------\ntitles.add(titleEditText)\n--------------------------------------------------\nunlockedNoteIds.add(note.id!!)\n--------------------------------------------------\nitems.add(ChecklistItem(id = index, title = value, isDone = false))\n--------------------------------------------------\nnewItems.add(ChecklistItem(currentMaxId + 1, System.currentTimeMillis(), row, false))\n--------------------------------------------------\ntextHistory.add(TextHistoryItem(start, beforeChange!!, afterChange!!))\n--------------------------------------------------\nnotesToDelete.add(it)\n--------------------------------------------------\nnotes.add(note)\n--------------------------------------------------\nhistory.add(item)", "fun add(item: TextHistoryItem) {\r\n        while (history.size > position) {\r\n            history.removeLast()\r\n        }\r\n\r\n        history.add(item)\r\n        position++\r\n    }" ],
  "Trail-Sense/1427" : [ "            val data = result.data?.getStringExtra(ModuleField.SCAN_ADDRESS) ?: \"\"\n            viewModel.onScannedData(data)\r\n        }\n--------------------------------------------------\n                showPasteButton = intent.getBooleanExtra(SHOW_PASTE_BUTTON, false),\n                onScan = { onScan(it) },\r\n                onCloseClick = { finish() },\n--------------------------------------------------\n            if (cameraPermissionState.status == PermissionStatus.Granted) {\n                ScannerView(onScan)\r\n            } else {\n--------------------------------------------------\n                        title = stringResource(R.string.Send_Button_Paste),\n                        onClick = { onScan(TextHelper.getCopiedText()) }\r\n                    )\n--------------------------------------------------\n                result.text?.let { barCodeOrQr ->\n                    onScan.invoke(barCodeOrQr)\r\n                }", "import io.horizontalsystems.bankwallet.core.utils.ModuleField\nimport io.horizontalsystems.bankwallet.R\nimport android.os.Looper\nimport android.os.Handler\nimport android.content.Intent\nprivate fun onScan(address: String?) {\r\n        setResult(RESULT_OK, Intent().apply {\r\n            putExtra(ModuleField.SCAN_ADDRESS, address)\r\n        })\r\n        //slow down fast transition to new window\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n            finish()\r\n        }, 1000)\r\n    }\nimport android.content.Intent\nimport android.os.Handler\nimport android.os.Looper\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.core.utils.ModuleField" ],
  "VinylMusicPlayer/904" : [ "setUpMusicControllers()", "private fun setUpMusicControllers() {\n        setUpPlayPauseFab()\n        setupFavourite()\n        setupMenu()\n    }" ],
  "MaterialFiles/380" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/901" : [ "", "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    savePreference();\r\n}" ],
  "VinylMusicPlayer/900" : [ "", "import com.simplemobiletools.notes.pro.models.Note\noverride fun onResume() {\r\n        super.onResume()\r\n        loadNoteById(noteId)\r\n    }" ],
  "QuickNovel/60" : [ "_morePath.map<Pair<Params, String>>(Function { path: String ->\n    Pair(null, path)\n})\n--------------------------------------------------\nmap(envelopeToListOfData)\n--------------------------------------------------\nmap(pageTransformation)\n--------------------------------------------------\nObservable.just(ASSET_PATH).map { path: String ->\n    configJSONString(path, assetManager)\n}\n--------------------------------------------------\nmap { json: String? ->\n    gson.fromJson(json, Config::class.java)\n}\n--------------------------------------------------\nObservable.just(configPreference).map { obj: StringPreferenceType ->\n    obj.get()\n}\n--------------------------------------------------\nobservable().map {\n    it.isPresent()\n}\n--------------------------------------------------\nobservable().filter {\n    it.getValue().isNotNull()\n}.map {\n    it.getValue()\n}\n--------------------------------------------------\nuser.filter {\n    it.isPresent()\n}.map {\n    it.getValue()\n}\n--------------------------------------------------\nTextComponent.TextBlockType.values().map {\n    it.tag\n}\n--------------------------------------------------\ntagsOther.map { tag ->\n    TextComponent.TextStyleType.initialize(tag)\n}\n--------------------------------------------------\n_morePath.map { path: String? ->\n    Pair<Params, String?>(firstPageParams, path)\n}\n--------------------------------------------------\nmap(this.pageTransformation)\n--------------------------------------------------\n_morePath.map { path: String ->\n    Pair<Params, String>(firstPageParams, path)\n}\n--------------------------------------------------\nmap {\n    recyclerView.layoutManager\n}\n--------------------------------------------------\nmap {\n    displayedItemFromLinearLayout(it)\n}\n--------------------------------------------------\nmap { p: Pair<Pair<Int, Int>, Boolean> ->\n    p.first\n}\n--------------------------------------------------\nmap { obj: Notification<T> ->\n    obj.error\n}\n--------------------------------------------------\nupstream.map {\n    Unit\n}\n--------------------------------------------------\nmap { obj: Notification<T> ->\n    obj.value\n}\n--------------------------------------------------\nthis.currentUser.observable().filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap { entry ->\n    if (entry.key == NAME) this.putName(user.name()) else {\n        this[entry.key] = entry.value\n    }\n}\n--------------------------------------------------\nmap { comment: Comment ->\n    CommentCardData.builder().comment(comment).commentCardState(comment.cardStatus(user)).project(project).build()\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().category(it).build()\n}\n--------------------------------------------------\nmap {\n    paramsGroupedByRootCategory(it)\n}\n--------------------------------------------------\nmap {\n    sectionsFromAllParams(it, expandedCategory)\n}\n--------------------------------------------------\nObservable.from(sections).map {\n    rowsFromParams(it)\n}\n--------------------------------------------------\nmap {\n    Pair.create(it, rowsAreExpanded(it, expandedCategory))\n}\n--------------------------------------------------\nmap {\n    NavigationDrawerData.Section.builder().rows(it.first).expanded(it.second).build()\n}\n--------------------------------------------------\nObservable.from(params).map {\n    NavigationDrawerData.Section.Row.builder().params(it).build()\n}\n--------------------------------------------------\nObservable.from(filters).map {\n    NavigationDrawerData.Section.Row.builder().params(it).build()\n}\n--------------------------------------------------\nmap {\n    listOf(it)\n}\n--------------------------------------------------\nmap {\n    NavigationDrawerData.Section.builder().rows(it).build()\n}\n--------------------------------------------------\nthis.addOns()?.map { addOn ->\n    addOn.minimum() * (addOn.quantity() ?: 0)\n}\n--------------------------------------------------\nmatchResults?.groups?.map {\n    it?.value ?: \"\"\n}\n--------------------------------------------------\naddOns?.map { addOn ->\n    addOn.minimum() * (addOn.quantity() ?: 0)\n}\n--------------------------------------------------\nlist.map {\n    encodeRelayId(it)\n}\n--------------------------------------------------\nmap { backingObj ->\n    backingTransformer(backingObj?.fragments()?.backing())\n}\n--------------------------------------------------\nmap { project ->\n    val updates = project?.posts()?.edges()?.map { edge ->\n        updateTransformer(edge?.node()?.fragments()?.post()).toBuilder().build()\n    }\n    UpdatesGraphQlEnvelope.builder().updates(updates).totalCount(project?.posts()?.totalCount() ?: 0).pageInfoEnvelope(createPageInfoObject(project?.posts()?.pageInfo()?.fragments()?.pageInfo())).build()\n}\n--------------------------------------------------\nmap { edge ->\n    updateTransformer(edge?.node()?.fragments()?.post()).toBuilder().build()\n}\n--------------------------------------------------\nmap { project ->\n    val comments = project?.comments()?.edges()?.map { edge ->\n        commentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n    }\n    CommentEnvelope.builder().commentableId(project?.id()).comments(comments).totalCount(project?.comments()?.totalCount() ?: 0).pageInfoEnvelope(createPageInfoObject(project?.comments()?.pageInfo()?.fragments()?.pageInfo())).build()\n}\n--------------------------------------------------\nmap { edge ->\n    commentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n}\n--------------------------------------------------\nmap { post ->\n    val comments = post?.fragments()?.freeformPost()?.comments()?.edges()?.map { edge ->\n        commentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n    }\n    CommentEnvelope.builder().comments(comments).commentableId(post?.id()).totalCount(post?.fragments()?.freeformPost()?.comments()?.totalCount() ?: 0).pageInfoEnvelope(createPageInfoObject(post?.fragments()?.freeformPost()?.comments()?.pageInfo()?.fragments()?.pageInfo())).build()\n}\n--------------------------------------------------\nmap {\n    categoryTransformer(it.fragments().category())\n}\n--------------------------------------------------\nresponseData.rootCategories().map {\n    categoryTransformer(it.fragments().category())\n}\n--------------------------------------------------\nmap {\n    projectTransformer(it.node()?.fragments()?.projectCard())\n}\n--------------------------------------------------\nObservable.just(response.data).map { cards ->\n    cards?.me()?.backings()?.nodes()\n}\n--------------------------------------------------\nmap { list ->\n    val erroredBackings = list?.asSequence()?.map {\n        val project = ErroredBacking.Project.builder().finalCollectionDate(it.project()?.finalCollectionDate()).name(it.project()?.name()).slug(it.project()?.slug()).build()\n        ErroredBacking.builder().project(project).build()\n    }\n    erroredBackings?.toList() ?: listOf()\n}\n--------------------------------------------------\nmap {\n    val project = ErroredBacking.Project.builder().finalCollectionDate(it.project()?.finalCollectionDate()).name(it.project()?.name()).slug(it.project()?.slug()).build()\n    ErroredBacking.builder().project(project).build()\n}\n--------------------------------------------------\nmap {\n    it?.shippingRulesExpanded()?.nodes()?.mapNotNull { node ->\n        node.fragments().shippingRule()\n    }\n}\n--------------------------------------------------\nmap<List<Reward>> { addOnsList ->\n    addOnsList?.let {\n        getAddOnsFromProject(it)\n    } ?: emptyList()\n}\n--------------------------------------------------\nmap { node ->\n    val shippingRulesGr = node.shippingRulesExpanded()?.nodes()?.map {\n        it.fragments().shippingRule()\n    } ?: emptyList()\n    rewardTransformer(node.fragments().reward(), shippingRulesGr, addOnItems = complexRewardItemsTransformer(node.items()?.fragments()?.rewardItems()))\n}\n--------------------------------------------------\nnode.shippingRulesExpanded()?.nodes()?.map {\n    it.fragments().shippingRule()\n}\n--------------------------------------------------\nObservable.just(response.data).map { cards ->\n    cards?.me()?.storedCards()?.nodes()\n}\n--------------------------------------------------\nmap { list ->\n    val storedCards = list?.asSequence()?.map {\n        StoredCard.builder().expiration(it.expirationDate()).id(it.id()).lastFourDigits(it.lastFour()).type(it.type()).build()\n    }\n    storedCards?.toList() ?: listOf()\n}\n--------------------------------------------------\nmap {\n    StoredCard.builder().expiration(it.expirationDate()).id(it.id()).lastFourDigits(it.lastFour()).type(it.type()).build()\n}\n--------------------------------------------------\nmap { commentFragment ->\n    commentTransformer(commentFragment.fragments().comment())\n}\n--------------------------------------------------\nmap {\n    it?.let { cardData ->\n        val card = StoredCard.builder().expiration(cardData.expirationDate()).id(cardData.id()).lastFourDigits(cardData.lastFour()).type(it.type()).build()\n        cardsList.add(card)\n    }\n}\n--------------------------------------------------\nshippingRulesExpanded.map {\n    shippingRuleTransformer(it)\n}\n--------------------------------------------------\nmap { edge ->\n    val quantity = edge.quantity()\n    val description = edge.node()?.name()\n    val id = decodeRelayId(edge.node()?.id()) ?: -1\n    val name = edge.node()?.name() ?: \"\"\n    val item = Item.builder().name(name).description(description).id(id).build()\n    return@map RewardsItem.builder().id(id).itemId(item.id()).item(item).rewardId(0).quantity(quantity).build()\n}\n--------------------------------------------------\nprojectFragment?.friends()?.nodes()?.map {\n    userTransformer(it.fragments().user())\n}\n--------------------------------------------------\nmap {\n    when(it) {\n        CollaboratorPermission.COMMENT -> Permission.COMMENT\n        CollaboratorPermission.EDIT_FAQ -> Permission.EDIT_FAQ\n        CollaboratorPermission.EDIT_PROJECT -> Permission.EDIT_PROJECT\n        CollaboratorPermission.FULFILLMENT -> Permission.FULFILLMENT\n        CollaboratorPermission.POST -> Permission.POST\n        CollaboratorPermission.VIEW_PLEDGES -> Permission.VIEW_PLEDGES\n        else -> Permission.UNKNOWN\n    }\n}\n--------------------------------------------------\nprojectFragment?.fragments()?.tagsCreative()?.tags()?.map {\n    tags.add(it.id())\n}\n--------------------------------------------------\nprojectFragment?.fragments()?.tagsDiscovery()?.tags()?.map {\n    tags.add(it.id())\n}\n--------------------------------------------------\nmap {\n    rewardTransformer(it.fragments().reward(), allowedAddons = it.allowedAddons().pageInfo().startCursor()?.isNotEmpty() ?: false, rewardItems = complexRewardItemsTransformer(it.items()?.fragments()?.rewardItems()))\n}\n--------------------------------------------------\nprojectFragment?.faqs()?.nodes()?.map { node ->\n    projectFaqTransformer(node.fragments().faq())\n}\n--------------------------------------------------\nmap {\n    environmentalCommitmentTransformer(it.fragments().environmentalCommitment())\n}\n--------------------------------------------------\navailableCards.map {\n    it.name\n}\n--------------------------------------------------\ncommentFr?.authorBadges()?.map { badge ->\n    badge?.rawValue() ?: \"\"\n}\n--------------------------------------------------\naddOns.nodes()?.map { node ->\n    rewardTransformer(node.fragments().reward())\n}\n--------------------------------------------------\nmap {\n    ThirdPartyEventItemInput.builder().itemId(it.itemId).itemName(it.itemName).price(it.price).build()\n}\n--------------------------------------------------\ncurrentUser?.observable()?.map {\n    it.isPresent()\n}\n--------------------------------------------------\nmap(coalesceWithV2(getString(this.loginDoesNotMatchString)))\n--------------------------------------------------\nthis.viewModel.outputs.genericLoginError().map(coalesceWithV2(getString(this.unableToLoginString)))\n--------------------------------------------------\nmap(coalesceWithV2(getString(R.string.login_errors_unable_to_log_in)))\n--------------------------------------------------\nviewModel.outputs.tfaCodeMismatchError().map {\n    getString(R.string.two_factor_error_message)\n}\n--------------------------------------------------\nviewModel.outputs.genericTfaError().map {\n    getString(R.string.login_errors_unable_to_log_in)\n}\n--------------------------------------------------\nviewModel.outputs.deepLinkToThreadActivity().filter {\n    it.second == true\n}.map {\n    it.first\n}\n--------------------------------------------------\nObservable.from(cards).map {\n    Pair(it, project)\n}\n--------------------------------------------------\nObservable.from(rewards).map { reward ->\n    Pair.create(projectData, reward)\n}\n--------------------------------------------------\nObservable.from(rules).map { rule ->\n    Pair.create(rule, project)\n}\n--------------------------------------------------\nObservable.from(updates).map { update ->\n    Pair.create(project, update)\n}\n--------------------------------------------------\nprojectDataAndAddOnList.second.map {\n    Triple(projectData, it, selectedShippingRule)\n}\n--------------------------------------------------\naddOns.map {\n    Pair(project, it)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.fromUri(it)\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().category(it)\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().location(it)\n}\n--------------------------------------------------\nRxView.clicks(binding.enabledSwitch).map {\n    binding.enabledSwitch.isChecked\n}\n--------------------------------------------------\nmap {\n    context().getString(R.string.profile_settings_error)\n}\n--------------------------------------------------\nthis.category.map {\n    it.name()\n}\n--------------------------------------------------\nuserPrivacy.map {\n    it.chosenCurrency\n}\n--------------------------------------------------\nuserPrivacy.map {\n    it.email\n}\n--------------------------------------------------\nuserPrivacy.map {\n    it.hasPassword\n}\n--------------------------------------------------\nuserPrivacy.map {\n    showEmailErrorImage(it) ?: false\n}\n--------------------------------------------------\nmap<CurrencyCode> {\n    it.first\n}\n--------------------------------------------------\nmap {\n    it.updateUserProfile()?.user()?.chosenCurrency() ?: \"\"\n}\n--------------------------------------------------\nmap { obj: Activity ->\n    obj.project()\n}\n--------------------------------------------------\nmap { user: User ->\n    user.unseenActivityCount().intValueOrZero() + user.erroredBackingsCount().intValueOrZero()\n}\n--------------------------------------------------\ncurrentUser.isLoggedIn.map { loggedIn: Boolean ->\n    !loggedIn\n}\n--------------------------------------------------\nmap { ua: Pair<KsOptional<User>, List<Activity>> ->\n    ua.first != null && ua.second.isEmpty()\n}\n--------------------------------------------------\nthis.projectDataAndReward.map {\n    it.second\n}\n--------------------------------------------------\nthis.projectDataAndReward.map {\n    Pair(it.first.project(), it.second)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    buildCurrency(it.first, it.second)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first\n}.map {\n    it.currency() == it.currentCurrency()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    getCurrency(it)\n}\n--------------------------------------------------\nreward.filter {\n    RewardUtils.isReward(it)\n}.map {\n    it.description()\n}\n--------------------------------------------------\nmap {\n    if (it.isAddOn()) it.addOnsItems() else it.rewardsItems()\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isItemized(it)\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isItemized(it)\n}.map {\n    it.negate()\n}\n--------------------------------------------------\nreward.filter {\n    !it.isAddOn() && RewardUtils.isReward(it)\n}.map {\n    it.title()\n}\n--------------------------------------------------\nreward.map {\n    !it.isAddOn()\n}\n--------------------------------------------------\nmap { reward ->\n    parametersForTitle(reward)\n}\n--------------------------------------------------\nreward.filter {\n    !RewardUtils.isShippable(it)\n}.map {\n    RewardUtils.isLocalPickup(it)\n}\n--------------------------------------------------\nmap {\n    it.localReceiptLocation()?.displayableName()\n}\n--------------------------------------------------\narguments().map {\n    it.getParcelable(ArgumentsKey.PLEDGE_PLEDGE_DATA) as PledgeData?\n}\n--------------------------------------------------\narguments().map {\n    it.getSerializable(ArgumentsKey.PLEDGE_PLEDGE_REASON) as PledgeReason\n}\n--------------------------------------------------\npledgeData.map {\n    it.projectData()\n}\n--------------------------------------------------\nprojectData.map {\n    it.project()\n}\n--------------------------------------------------\npledgeData.map {\n    it.reward()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(getBackingFromProjectData(it))\n}\n--------------------------------------------------\nbacking.filter {\n    it.reward() != null\n}.map {\n    requireNotNull(it.reward())\n}\n--------------------------------------------------\nmap {\n    it.first.id() == it.second.id()\n}\n--------------------------------------------------\nmap {\n    it.first\n}\n--------------------------------------------------\nmap {\n    it.second.first { rule ->\n        rule.location()?.id() == it.first.locationId()\n    }\n}\n--------------------------------------------------\nmap {\n    it.addOns()?.toList()\n}\n--------------------------------------------------\nmap {\n    joinSelectedWithAvailableAddOns(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    filterOutUnAvailableOrEndedExceptIfBacked(it)\n}\n--------------------------------------------------\nmap {\n    it.shippingRules()\n}\n--------------------------------------------------\nthis.shippingRuleSelected.map {\n    it.location()\n}\n--------------------------------------------------\nfilteredAddOns.map {\n    it.second.isEmpty()\n}\n--------------------------------------------------\nmap { addOn ->\n    if (currentSelection.containsKey(addOn.id())) {\n        return@map addOn.toBuilder().quantity(currentSelection[addOn.id()]).build()\n    } else return@map addOn\n}\n--------------------------------------------------\nbackedList.map {\n    backedSelection.put(it.id(), it.quantity() ?: 0)\n}\n--------------------------------------------------\nmap { item ->\n    if (backedSelection.containsKey(item.key)) backedSelection[item.key] == item.value else false\n}\n--------------------------------------------------\nmap { item ->\n    if (!backedSelection.containsKey(item.key)) item.value > 0 else false\n}\n--------------------------------------------------\nmap { map: MutableMap<Long, Int> ->\n    var total = 0\n    list.map {\n        total += map[it.id()] ?: 0\n    }\n    return@map total\n}\n--------------------------------------------------\nlist.map {\n    total += map[it.id()] ?: 0\n}\n--------------------------------------------------\ngraphList.map { graphAddOn ->\n    modifyIfBacked(backingList, graphAddOn)\n}\n--------------------------------------------------\nthis.currentConfig.observable().map {\n    it.countryCode()\n}\n--------------------------------------------------\nmap { countryCode ->\n    shippingRules.firstOrNull {\n        it.location()?.country() == countryCode\n    } ?: shippingRules.first()\n}\n--------------------------------------------------\nreward.shippingRules()?.map {\n    it.location()?.id()\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.second\n}\n--------------------------------------------------\naddOn.map {\n    it.title()\n}\n--------------------------------------------------\naddOn.map {\n    it.description()\n}\n--------------------------------------------------\naddOn.map {\n    it.description()\n}.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\naddOn.map {\n    !RewardUtils.isItemized(it)\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    this.ksCurrency.format(it.second.minimum(), it.first.project())\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.format(it.second.convertedMinimum(), it.first.project())\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.first.project()\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.first.project()\n}.map {\n    it.currency() == it.currentCurrency()\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.format(it.second.convertedMinimum(), it.first.project(), true, RoundingMode.HALF_UP, true)\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    !it.second.limit().isNotNull()\n}\n--------------------------------------------------\naddOn.map {\n    !it.remaining().isNotNull()\n}\n--------------------------------------------------\naddOn.map {\n    it.limit().toString()\n}\n--------------------------------------------------\naddOn.filter {\n    it.remaining().isNotNull()\n}.map {\n    it.remaining().toString()\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.second.endsAt().isNotNull()\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.second.endsAt().isNotNull()\n}.map {\n    !it\n}\n--------------------------------------------------\naddOn.map {\n    it.shippingRules()?.isEmpty()\n}\n--------------------------------------------------\nmap {\n    getShippingCost(it.second.shippingRules(), it.first.project(), it.third)\n}\n--------------------------------------------------\naddOn.map {\n    it?.quantity() ?: 0\n}\n--------------------------------------------------\naddOn.map {\n    maximumLimit(it)\n}\n--------------------------------------------------\naddOn.map {\n    maximumLimit(it)\n}.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\naddOn.filter {\n    !RewardUtils.isShippable(it)\n}.map {\n    RewardUtils.isLocalPickup(it)\n}\n--------------------------------------------------\nmap { data ->\n    Pair(data.first, data.second.id())\n}\n--------------------------------------------------\nmap {\n    cost += it.cost()\n}\n--------------------------------------------------\nmap { projectData ->\n    joinProjectDataAndReward(projectData)\n}\n--------------------------------------------------\nthis.projectDataInput.map {\n    it.project()\n}\n--------------------------------------------------\nbacking.filter {\n    it.reward().isNotNull()\n}.map {\n    requireNotNull(it.reward())\n}\n--------------------------------------------------\nprojectDataAndReward.filter {\n    it.second.isNotNull()\n}.map {\n    requireNotNull(it.second)\n}\n--------------------------------------------------\nmap {\n    it.second.userIsCreator(it.first.getValue())\n}\n--------------------------------------------------\nbacking.filter {\n    it.backerName().isNotNull()\n}.map {\n    requireNotNull(it.backerName())\n}\n--------------------------------------------------\nbacking.filter {\n    it.backerUrl().isNotNull()\n}.map {\n    requireNotNull(it.backerUrl())\n}\n--------------------------------------------------\nbacking.map {\n    NumberUtils.format(it.sequence().toFloat())\n}\n--------------------------------------------------\nmap {\n    DateTimeUtils.longDate(requireNotNull(it.pledgedAt()))\n}\n--------------------------------------------------\nbacking.map {\n    it.amount() - it.shippingAmount() - it.bonusAmount()\n}\n--------------------------------------------------\nmap {\n    ProjectViewUtils.styleCurrency(it.first, it.second, this.ksCurrency)\n}\n--------------------------------------------------\nbacking.map {\n    shouldHideShipping(it)\n}\n--------------------------------------------------\nbacking.map {\n    it.reward().isNull()\n}\n--------------------------------------------------\nmap {\n    pledgeStatusData(it.first, it.second, it.third)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.shippingAmount())\n}\n--------------------------------------------------\nmap {\n    ProjectViewUtils.styleCurrency(it.first.toDouble(), it.second, this.ksCurrency)\n}\n--------------------------------------------------\nbacking.filter {\n    it.locationName().isNotNull()\n}.map {\n    requireNotNull(it.locationName())\n}\n--------------------------------------------------\nbacking.filter {\n    it.amount().isNotNull()\n}.map {\n    it.amount()\n}\n--------------------------------------------------\nbacking.map {\n    CreditCardPaymentType.safeValueOf(it.paymentSource()?.paymentType())\n}\n--------------------------------------------------\nmap {\n    it == CreditCardPaymentType.ANDROID_PAY || it == CreditCardPaymentType.APPLE_PAY || it == CreditCardPaymentType.CREDIT_CARD\n}\n--------------------------------------------------\nmap {\n    it.negate()\n}\n--------------------------------------------------\nbacking.filter {\n    it.paymentSource().isNotNull()\n}.map {\n    requireNotNull(it.paymentSource())\n}\n--------------------------------------------------\nmap { source ->\n    source.expirationDate()?.let {\n        simpleDateFormat.format(it)\n    } ?: \"\"\n}\n--------------------------------------------------\npaymentSource.map {\n    cardIssuer(it)\n}\n--------------------------------------------------\npaymentSource.map {\n    it.lastFour() ?: \"\"\n}\n--------------------------------------------------\npaymentSource.map {\n    cardLogo(it)\n}\n--------------------------------------------------\nbacking.map {\n    it.isErrored()\n}\n--------------------------------------------------\nbacking.map {\n    it.isErrored()\n}.distinctUntilChanged().map {\n    it.negate()\n}\n--------------------------------------------------\nbacking.map {\n    it.completedByBacker()\n}\n--------------------------------------------------\nthis.isExpanded.filter {\n    it\n}.compose(combineLatestPair(backing)).map {\n    it.second\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isReward(it) && it.estimatedDeliveryOn().isNotNull()\n}\n--------------------------------------------------\nbacking.map {\n    it.status()\n}\n--------------------------------------------------\nbacking.map {\n    it.status()\n}.map {\n    it == Backing.STATUS_COLLECTED\n}\n--------------------------------------------------\nmap {\n    it.first && it.second\n}\n--------------------------------------------------\nObservable.merge(refreshTimeout, backedProject.skip(1)).map {\n    false\n}\n--------------------------------------------------\nbacking.map {\n    it.addOns()?.toList() ?: emptyList()\n}\n--------------------------------------------------\nbacking.filter {\n    it.bonusAmount().isNotNull()\n}.map {\n    requireNotNull(it.bonusAmount())\n}\n--------------------------------------------------\nmap<DateTime> {\n    it.estimatedDeliveryOn()\n}\n--------------------------------------------------\nmap {\n    DateTimeUtils.estimatedDeliveryOn(it)\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra<Project>(IntentKey.PROJECT)\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra<Backing>(IntentKey.BACKING)\n}\n--------------------------------------------------\ncardAndProject.filter {\n    it.first.isNotNull()\n}.map {\n    it.first\n}\n--------------------------------------------------\ncard.filter {\n    it.expiration().isNotNull()\n}.map {\n    it.expiration()\n}\n--------------------------------------------------\nmap {\n    sdf.format(it).toString()\n}\n--------------------------------------------------\ncard.map {\n    it.expiration().isNull()\n}\n--------------------------------------------------\ncard.filter {\n    it.lastFourDigits().isNotNull()\n}.map {\n    requireNotNull(it.lastFourDigits())\n}\n--------------------------------------------------\ncard.filter {\n    it.isNotNull()\n}.map {\n    it.getCardTypeDrawable()\n}\n--------------------------------------------------\ncard.filter {\n    it.type().isNotNull()\n}.map {\n    it.type()\n}\n--------------------------------------------------\ncard.filter {\n    it.type().isNotNull()\n}.map {\n    it.type()\n}.map {\n    StoredCard.issuer(it)\n}\n--------------------------------------------------\nthis.cardAndProject.filter {\n    it.second.isNotNull()\n}.map {\n    it.second\n}\n--------------------------------------------------\nproject.filter {\n    it.backing().isNotNull()\n}.map {\n    it.backing()\n}\n--------------------------------------------------\nmap { backingAndCard ->\n    backingAndCard.first?.let { b ->\n        b.paymentSource()?.let {\n            it.id() == backingAndCard.second.id()\n        }\n    } ?: false\n}\n--------------------------------------------------\nmap {\n    it.first && it.second?.isErrored() ?: false\n}\n--------------------------------------------------\nmap {\n    it.getParcelable(ArgumentsKey.CANCEL_PLEDGE_PROJECT) as Project?\n}\n--------------------------------------------------\nmap {\n    Pair(this.ksCurrency.format(it.second.amount(), it.first, RoundingMode.HALF_UP), it.first.name())\n}\n--------------------------------------------------\nuserPrivacy.map {\n    getWarningText(it.isDeliverable, it.isEmailVerified)\n}\n--------------------------------------------------\nuserPrivacy.map {\n    getWarningTextColor(it.isDeliverable)\n}\n--------------------------------------------------\nuserPrivacy.map {\n    getVerificationText(it.isCreator)\n}\n--------------------------------------------------\nmap {\n    !it.first && it.second.isNotEmpty() && !it.second.isEmail()\n}\n--------------------------------------------------\nchangeEmail.map { ce ->\n    ce.isValid()\n}\n--------------------------------------------------\nmap {\n    analytics.reset()\n    mutableUIState.emit(UpdatePasswordUIState(isLoading = false, email = it.updateUserAccount()?.user()?.email() ?: \"\"))\n}\n--------------------------------------------------\nthis.commentInput.distinctUntilChanged().map {\n    it.comment\n}\n--------------------------------------------------\nmap {\n    val commentCardState = cardStatus(it.first, it.second.getValue())\n    it.first.toBuilder().commentCardState(commentCardState?.commentCardStatus ?: 0).build()\n}\n--------------------------------------------------\nmap {\n    Pair(requireNotNull(it.first), requireNotNull(it.first.project))\n}\n--------------------------------------------------\nmap {\n    it.first.assignAuthorBadge(it.second.getValue())\n}\n--------------------------------------------------\ncomment.map {\n    it.repliesCount()\n}\n--------------------------------------------------\ncomment.filter {\n    it.author()?.name().isNotNull()\n}.map {\n    it.author()?.name() ?: \"\"\n}\n--------------------------------------------------\nmap {\n    it.author()?.avatar()?.medium() ?: \"\"\n}\n--------------------------------------------------\ncomment.map {\n    it.body()\n}\n--------------------------------------------------\ncomment.map {\n    it.createdAt()\n}\n--------------------------------------------------\nmap {\n    Pair(requireNotNull(it.first.commentableId), requireNotNull(it.first?.comment))\n}\n--------------------------------------------------\nmap {\n    PostCommentData(commentableId = it.first, body = it.second.body(), clientMutationId = null, parent = it.second?.parentId()?.let { id ->\n        it.second.toBuilder().id(id).build()\n    })\n}\n--------------------------------------------------\npostCommentData.map {\n    executePostCommentMutation(it, errorObservable)\n}\n--------------------------------------------------\nthis.currentUserStream.loggedInUser().map {\n    currentUser = it\n    it\n}\n--------------------------------------------------\nmap<Any?> {\n    val projectData = it.getParcelableExtra(IntentKey.PROJECT_DATA) as? ProjectData\n    val update = it.getParcelableExtra(IntentKey.UPDATE) as? Update\n    projectData?.project()?.let {\n        Either.Left<Project?, Update?>(it)\n    } ?: Either.Right<Project?, Update?>(update)\n}\n--------------------------------------------------\nprojectOrUpdate.map {\n    it as? Either<Project?, Update?>\n}\n--------------------------------------------------\nmap {\n    Pair(it.second, it.first?.right())\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.getStringExtra(IntentKey.COMMENT))\n}\n--------------------------------------------------\nintent().map {\n    it.hasExtra(IntentKey.COMMENT)\n}\n--------------------------------------------------\nmap {\n    CommentCardData.builder().comment(it.first.first.first).project(this.project).commentCardState(it.first.first.first.cardStatus(it.second.getValue())).commentableId(it.first.second).build()\n}\n--------------------------------------------------\nmap {\n    Pair(it.first, buildCommentBody(Pair(it.second, it.first)))\n}\n--------------------------------------------------\nmap {\n    Pair(it.first.first, CommentCardData.builder().comment(it.first.first.second).project(it.first.second).commentableId(it.second).commentCardState(CommentCardStatus.TRYING_TO_POST.commentCardStatus).build())\n}\n--------------------------------------------------\nthis.commentToRefresh.map {\n    it.first\n}\n--------------------------------------------------\nthis.commentsList.map {\n    it.size\n}\n--------------------------------------------------\nmap {\n    val mappedList = it.second.first.updateCommentAfterSuccessfulPost(it.first, it.second.second)\n    updateNewlyPostedCommentWithNewStatus(mappedList[it.second.second])\n    mappedList\n}\n--------------------------------------------------\nmap {\n    val mappedList = it.second.first.updateCommentFailedToPost(it.first, it.second.second)\n    updateNewlyPostedCommentWithNewStatus(mappedList[it.second.second])\n    mappedList\n}\n--------------------------------------------------\nmap {\n    it.second.updateCanceledPledgeComment(it.first)\n}\n--------------------------------------------------\nmap {\n    if (this.newlyPostedCommentsList.isNotEmpty()) {\n        this.newlyPostedCommentsList + it\n    } else {\n        it\n    }\n}\n--------------------------------------------------\nthis.internalError.map {\n    Pair(it, commentsList.value)\n}\n--------------------------------------------------\nmap { comment: Comment ->\n    CommentCardData.builder().comment(comment).project(it.second).commentCardState(comment.cardStatus(currentUser)).commentableId(it.first.commentableId).build()\n}\n--------------------------------------------------\ncreateNewPasswordNotification.compose(errorsV2()).map {\n    it.localizedMessage\n}\n--------------------------------------------------\nmap {\n    it\n}\n--------------------------------------------------\nmap {\n    it.updateUserAccount()?.user()?.email()\n}\n--------------------------------------------------\nintent().map {\n    it.getStringExtra(IntentKey.URL)\n}\n--------------------------------------------------\nintent().map {\n    it.getParcelableExtra(IntentKey.PROJECT) as Project?\n}\n--------------------------------------------------\nmap {\n    Pair(requireNotNull(it.first.getValue()), it.second)\n}\n--------------------------------------------------\nmap {\n    userIsLoggedOutOrProjectCreator(it)\n}\n--------------------------------------------------\nintent().map { obj: Intent ->\n    obj.data\n}\n--------------------------------------------------\nuriFromEmailDomain.map {\n    Uri.parse(it.request.url.toString())\n}\n--------------------------------------------------\nmap {\n    Uri.parse(it.request.url.toString())\n}\n--------------------------------------------------\nmap {\n    ProjectIntentMapper.paramFromUri(it)\n}\n--------------------------------------------------\nmap {\n    it.value\n}\n--------------------------------------------------\nmap {\n    appendRefTagIfNone(it)\n}\n--------------------------------------------------\nuriFromIntent.filter {\n    it.isProjectSaveUri(webEndpoint)\n}.map {\n    appendRefTagIfNone(it)\n}\n--------------------------------------------------\nuriFromIntent.filter {\n    it.isProjectCommentUri(webEndpoint)\n}.map {\n    appendRefTagIfNone(it)\n}\n--------------------------------------------------\ncurrentUser.observable().filter {\n    it.isPresent()\n}.map {\n    it.getValue()\n}\n--------------------------------------------------\nuriFromIntent.filter {\n    it.isCheckoutUri(webEndpoint)\n}.map {\n    appendRefTagIfNone(it)\n}\n--------------------------------------------------\nObservable.merge(projectPreview, unsupportedDeepLink).map { obj: Uri ->\n    obj.toString()\n}\n--------------------------------------------------\nmap<Pair<Project, RefTag>> {\n    Pair.create(it, RefTag.activitySample())\n}\n--------------------------------------------------\nmap {\n    RefTagUtils.projectAndRefTagFromParamsAndProject(it.first, it.second)\n}\n--------------------------------------------------\nmap { defaultParamsAndEnabled: Pair<User, DiscoveryParams> ->\n    isDefaultParams(defaultParamsAndEnabled) && defaultParamsAndEnabled.second.tagId() == Editorial.LIGHTS_ON.tagId\n}\n--------------------------------------------------\nmap { shouldShow: Boolean ->\n    if (shouldShow) Editorial.LIGHTS_ON else null\n}\n--------------------------------------------------\nmap { pu: Pair<DiscoveryParams, Boolean> ->\n    isOnboardingVisible(pu.first, pu.second)\n}\n--------------------------------------------------\nparamsFromActivity.map { params: DiscoveryParams ->\n    isSavedVisible(params)\n}\n--------------------------------------------------\nmap {\n    it.first && it.second.isEmpty()\n}\n--------------------------------------------------\nshouldShowEmptySavedView.filter {\n    it.isTrue()\n}.map<Any?> {\n    null\n}\n--------------------------------------------------\nloggedInUserAndParams.filter {\n    !isDefaultParams(it)\n}.map {\n    null\n}\n--------------------------------------------------\nloggedOutUserOnHeartClick.map {\n    it\n}\n--------------------------------------------------\nmap {\n    it.second.updateStartedProjectAndDiscoveryParamsList(it.first)\n}\n--------------------------------------------------\nmap {\n    it.first.indexOfFirst { item ->\n        item.first.id() == it.second.id() && item.first.slug() == it.second.slug()\n    }\n}\n--------------------------------------------------\nmap {\n    it.activities()\n}\n--------------------------------------------------\nmap {\n    it.firstOrNull()\n}\n--------------------------------------------------\nmap {\n    it.me()?.email()\n}\n--------------------------------------------------\nintent().take(1).map {\n    it.action\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.getDefaultParams(it.second)\n}\n--------------------------------------------------\nintent().map {\n    it.data\n}\n--------------------------------------------------\nuriFromVerification.map {\n    it.getTokenFromQueryParams()\n}\n--------------------------------------------------\nverification.compose(Transformers.values()).map {\n    it.message()\n}\n--------------------------------------------------\nverification.compose(Transformers.errors()).map {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nmap {\n    it?.errorMessage()\n}\n--------------------------------------------------\npagerSelectedPage.map {\n    DiscoveryUtils.sortFromPosition(it)\n}\n--------------------------------------------------\nparams.map {\n    it.sort()\n}\n--------------------------------------------------\nsortClicked.map {\n    DiscoveryUtils.sortFromPosition(it)\n}\n--------------------------------------------------\nmap<Pair<DiscoveryParams.Sort, DiscoveryParams>> {\n    Pair.create(it.first.sort(), it.first.toBuilder().sort(it.second).build())\n}\n--------------------------------------------------\nparentFilterRowClick.map {\n    it.params().category()\n}\n--------------------------------------------------\ntopFilterRowClick.map {\n    null\n}\n--------------------------------------------------\nmap { sort: DiscoveryParams.Sort? ->\n    sort.positionFromSort()\n}\n--------------------------------------------------\nupdateParamsForPage.map {\n    true\n}\n--------------------------------------------------\nchildFilterRowClick.map {\n    false\n}\n--------------------------------------------------\ntopFilterRowClick.map {\n    false\n}\n--------------------------------------------------\ninternalToolsClick.map {\n    false\n}\n--------------------------------------------------\nloggedOutLoginToutClick.map {\n    false\n}\n--------------------------------------------------\nloggedOutHelpClick.map {\n    false\n}\n--------------------------------------------------\nactivityFeedClick.map {\n    false\n}\n--------------------------------------------------\nmessagesClick.map {\n    false\n}\n--------------------------------------------------\nprofileClick.map {\n    false\n}\n--------------------------------------------------\nsettingsClick.map {\n    false\n}\n--------------------------------------------------\ncurrentUser.map {\n    currentDrawerMenuIcon(it)\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.backgroundColor\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.ctaTitle\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.ctaDescription\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.graphic\n}\n--------------------------------------------------\nintent().map {\n    it.getSerializableExtra(IntentKey.EDITORIAL)\n}\n--------------------------------------------------\nmap {\n    it.filter { category ->\n        category.isRoot\n    }\n}\n--------------------------------------------------\nmap {\n    it.sorted()\n}\n--------------------------------------------------\neditorial.map {\n    it.tagId\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().sort(DiscoveryParams.Sort.MAGIC).tagId(it).build()\n}\n--------------------------------------------------\neditorial.map {\n    it.graphic\n}\n--------------------------------------------------\neditorial.map {\n    it.title\n}\n--------------------------------------------------\neditorial.map {\n    it.description\n}\n--------------------------------------------------\ncurrentUser.filter {\n    it.isPresent()\n}.map {\n    requireNotNull(it.getValue())\n}\n--------------------------------------------------\nmap<User> {\n    ListUtils.first(it)\n}\n--------------------------------------------------\nmap { user ->\n    user.createdProjectsCount().isNonZero()\n}\n--------------------------------------------------\nmap {\n    it.avatar().medium()\n}\n--------------------------------------------------\nmap {\n    it.name()\n}\n--------------------------------------------------\nthis.projectEnvironmentalCommitmentInput.map {\n    it.description\n}\n--------------------------------------------------\nmap {\n    EnvironmentalCommitmentCategories.values().firstOrNull { environmentalCommitmentCategory ->\n        environmentalCommitmentCategory.name == it.category\n    }?.title\n}\n--------------------------------------------------\nthis.erroredBacking.map {\n    it.project()\n}\n--------------------------------------------------\nproject.map {\n    it.name()\n}\n--------------------------------------------------\nproject.map {\n    it.finalCollectionDate()\n}\n--------------------------------------------------\nproject.map {\n    it.slug()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.second\n}\n--------------------------------------------------\nmap {\n    it.quantity().toString() + \" X \" + it.title()\n}\n--------------------------------------------------\nreward.filter {\n    !it.isAddOn()\n}.map {\n    it.title() ?: \"\"\n}\n--------------------------------------------------\nprojectAndReward.map {\n    this.ksCurrency.format(it.second.minimum(), it.first)\n}\n--------------------------------------------------\nprojectFaqInput.map {\n    it.question\n}\n--------------------------------------------------\nprojectFaqInput.map {\n    it.answer\n}\n--------------------------------------------------\nmap {\n    it.createdAt?.let { createdAt ->\n        DateTimeUtils.longDate(createdAt)\n    }\n}\n--------------------------------------------------\nthis.user.map {\n    it.name()\n}\n--------------------------------------------------\nthis.user.map {\n    it.avatar().medium()\n}\n--------------------------------------------------\nthis.user.map {\n    it.unreadMessagesCount()\n}\n--------------------------------------------------\nmap {\n    it.unseenActivityCount().intValueOrZero() + it.erroredBackingsCount().intValueOrZero()\n}\n--------------------------------------------------\nthis.user.map {\n    it.erroredBackingsCount().intValueOrZero().isZero()\n}\n--------------------------------------------------\nmap {\n    if (it.isTrue()) R.color.text_primary else R.color.kds_alert\n}\n--------------------------------------------------\nthis.user.map {\n    it.memberProjectsCount().intValueOrZero().isZero()\n}\n--------------------------------------------------\nmap {\n    it.localizedMessage\n}\n--------------------------------------------------\nloginError.filter(ErrorEnvelope::isFacebookInvalidAccessTokenError).map {\n    it.errorMessage()\n}\n--------------------------------------------------\nloginError.filter(ErrorEnvelope::isMissingFacebookEmailError).map {\n    it.errorMessage()\n}\n--------------------------------------------------\nloginError.filter(ErrorEnvelope::isUnauthorizedError).map {\n    it.errorMessage()\n}\n--------------------------------------------------\nloginError.filter(ErrorEnvelope::isTfaRequiredError).map {}\n--------------------------------------------------\nmap {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nmap {\n    it.facebookUser()\n}\n--------------------------------------------------\ninternalIntent.filter {\n    it.hasExtra(IntentKey.EMAIL)\n}.map {\n    extractFromIntent(it)\n}\n--------------------------------------------------\nemailAndReason.map {\n    it.first\n}\n--------------------------------------------------\nmap { e ->\n    Pair.create(true, e)\n}\n--------------------------------------------------\nemailAndReason.map {\n    it.second\n}\n--------------------------------------------------\nthis.resetPasswordConfirmationDialogDismissed.map<Boolean> {\n    it.negate()\n}\n--------------------------------------------------\nmap {\n    Pair.create(it.first, it.second)\n}\n--------------------------------------------------\nerrors.map {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nthis.loginError.filter {\n    it.isGenericLoginError\n}.map {\n    it.errorMessage()\n}\n--------------------------------------------------\nthis.loginError.filter {\n    it.isInvalidLoginError\n}.map {\n    it.errorMessage()\n}\n--------------------------------------------------\nthis.loginError.filter {\n    it.isTfaRequiredError\n}.map {}\n--------------------------------------------------\nmap {\n    requireNotNull(getProjectFromIntent(it))\n}\n--------------------------------------------------\nproject.filter {\n    it.creator().name().isNotNull()\n}.map {\n    it.creator().name()\n}\n--------------------------------------------------\nthis.messageBodyChanged.map {\n    it.isPresent()\n}\n--------------------------------------------------\nmap {\n    R.string.social_error_could_not_send_message_backer\n}\n--------------------------------------------------\nfetchThreadNotification.compose(errorsV2()).map {\n    R.string.Your_message_has_been_sent\n}\n--------------------------------------------------\nmap {\n    it.messageThread()\n}\n--------------------------------------------------\nmap { mu: Pair<Message, User> ->\n    Pair.create(mu.first, mu.first.sender().id() == mu.second.id())\n}\n--------------------------------------------------\nmessageAndCurrentUserIsSender.map {\n    PairUtils.second(it)\n}\n--------------------------------------------------\nmessageAndCurrentUserIsSender.filter {\n    !it.second\n}.map {\n    it.first.body()\n}\n--------------------------------------------------\nmessageBodyRecipientCardViewIsGone.map {\n    it.negate()\n}\n--------------------------------------------------\nmessageAndCurrentUserIsSender.filter {\n    it.second\n}.map {\n    it.first.body()\n}\n--------------------------------------------------\nmap {\n    !it.first || it.second\n}\n--------------------------------------------------\nmap {\n    it.first.sender().avatar().medium()\n}\n--------------------------------------------------\nmap {\n    Pair.create(it.value, data.project)\n}\n--------------------------------------------------\nmap { i: Intent ->\n    val messageThread = i.getParcelableExtra<MessageThread>(IntentKey.MESSAGE_THREAD)\n    messageThread?.let {\n        Left(it)\n    } ?: Right<MessageThread, Pair<Project?, Backing?>>(Pair.create(i.getParcelableExtra(IntentKey.PROJECT), i.getParcelableExtra(IntentKey.BACKING)))\n}\n--------------------------------------------------\nintent().map {\n    it.getSerializableExtra(IntentKey.MESSAGE_SCREEN_SOURCE_CONTEXT)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.right())\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.second)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.left())\n}\n--------------------------------------------------\nconfigBacking.filter {\n    it.isNotNull()\n}.map {\n    Left(it)\n}\n--------------------------------------------------\nconfigThread.filter {\n    it.isNotNull()\n}.map {\n    Right(it)\n}\n--------------------------------------------------\nmap { data: Either<MessageThread, Pair<Project?, Backing?>> ->\n    data.either({ obj: MessageThread ->\n        obj.project()\n    }) { projectAndBacking: Pair<Project?, Backing?> ->\n        projectAndBacking.first\n    }\n}\n--------------------------------------------------\nmessagesAreLoading.map {\n    it.negate()\n}\n--------------------------------------------------\ninitialMessageThreadEnvelope.map {\n    it.messageThread() ?: MessageThread.builder().build()\n}\n--------------------------------------------------\nmap {\n    if (it.first != null && it.first.participant() != null) it.first?.participant() else it.second?.creator()\n}\n--------------------------------------------------\nparticipant.map {\n    it.name()\n}\n--------------------------------------------------\nmap { (backingOrThread1, project1, _, currentUser1): MessagesData ->\n    backingOrThread1.either({ backing: Backing ->\n        if (backing.backerId() == currentUser1.id()) MessageSubject.Project(project1) else MessageSubject.Backing(backing)\n    }) { messageThread: MessageThread ->\n        MessageSubject.MessageThread(messageThread)\n    }\n}\n--------------------------------------------------\nmessageEditTextChanged.map {\n    it.isNotNull() && it.isPresent()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.messageThread())\n}\n--------------------------------------------------\nmap {\n    it.messages()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.messages())\n}\n--------------------------------------------------\nmap {\n    val messagesList = it.first\n    val message = it.second?.toList()\n    messagesList?.let { initialMessages ->\n        message?.let { m ->\n            ListUtils.concatDistinct(initialMessages, m)\n        }\n    } ?: it.second\n}\n--------------------------------------------------\ninitialMessageThreadEnvelope.filter {\n    it.messages().isNotNull()\n}.map {\n    it.messages()\n}\n--------------------------------------------------\nmap { c: MessagePreviousScreenType ->\n    c == MessagePreviousScreenType.BACKER_MODAL\n}\n--------------------------------------------------\nviewPledgeButtonIsGone.map {\n    it.negate()\n}\n--------------------------------------------------\nbackButtonIsGone.map {\n    it.negate()\n}\n--------------------------------------------------\nmessageIsSending.map {\n    it.negate()\n}\n--------------------------------------------------\nmessageSent.map {\n    \"\"\n}\n--------------------------------------------------\nmessageList.map {\n    it\n}\n--------------------------------------------------\nmap {\n    it.second\n}\n--------------------------------------------------\nmessageNotification.compose(Transformers.errorsV2()).map {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nmap {\n    projectAndBacker(it)\n}\n--------------------------------------------------\nthis.backingAndProject.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap {\n    BackingWrapper(requireNotNull(it.second.first), it.first.second, it.first.first)\n}\n--------------------------------------------------\nmessageThread.map { thread: MessageThread ->\n    hasUnreadMessages(thread, sharedPreferences)\n}\n--------------------------------------------------\nmessageThreadCardViewClicked.map {\n    false\n}\n--------------------------------------------------\nmessageThread.map {\n    it.lastMessage()\n}\n--------------------------------------------------\nmessageThread.map {\n    it.participant()\n}\n--------------------------------------------------\nlastMessage.map {\n    it.createdAt()\n}\n--------------------------------------------------\nlastMessage.map {\n    it.body()\n}\n--------------------------------------------------\nparticipant.map {\n    it.avatar().medium()\n}\n--------------------------------------------------\nhasUnreadMessages.map {\n    it.negate()\n}\n--------------------------------------------------\nmessageThread.map {\n    it.unreadMessagesCount()\n}\n--------------------------------------------------\nmessageThread.map {\n    it.unreadMessagesCount()\n}.map {\n    NumberUtils.format(it)\n}\n--------------------------------------------------\nintent().map { i: Intent ->\n    i.getParcelableExtra<Project>(IntentKey.PROJECT)\n}\n--------------------------------------------------\ninitialProject.compose(Transformers.takeWhen(refreshUserOrProject)).map {\n    it?.param()\n}\n--------------------------------------------------\nmap {\n    if (it.first != null) it.first?.unreadMessagesCount() else it.second.unreadMessagesCount()\n}\n--------------------------------------------------\nmailbox.map {\n    getStringResForMailbox(it)\n}\n--------------------------------------------------\nmap {\n    PairUtils.first(it)\n}\n--------------------------------------------------\nunreadMessagesCount.map {\n    it.isZero()\n}\n--------------------------------------------------\nunreadMessagesCount.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap {\n    if (it.intValueOrZero() > 0) R.color.accent else R.color.kds_support_400\n}\n--------------------------------------------------\nmap {\n    if (it.intValueOrZero() > 0) Typeface.BOLD else Typeface.NORMAL\n}\n--------------------------------------------------\nmap { noMessagesAndNoUnread: Pair<Boolean, Boolean> ->\n    noMessagesAndNoUnread.first || noMessagesAndNoUnread.second\n}\n--------------------------------------------------\nmap { noMessagesAndMailbox: Pair<Boolean, Mailbox> ->\n    noMessagesAndMailbox.first || noMessagesAndMailbox.second == Mailbox.SENT\n}\n--------------------------------------------------\nmailbox.map { m: Mailbox ->\n    m == Mailbox.SENT\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.getValue())\n}\n--------------------------------------------------\nmap { us ->\n    us.second.second\n}\n--------------------------------------------------\ncurrentUser.map {\n    isSubscribedToAllNewsletters(it)\n}\n--------------------------------------------------\nthis.unableToSavePreferenceError.takeUntil(this.updateSuccess).map { _ ->\n    null\n}\n--------------------------------------------------\nthis.currentUser.observable().filter {\n    it.getValue().isNotNull()\n}.map {\n    it.getValue()!!\n}\n--------------------------------------------------\nObservable.merge(currentUser, this.userInput).map {\n    !it.notifyOfBackings()\n}\n--------------------------------------------------\ncurrentUser.map {\n    (it.createdProjectsCount()).isZero()\n}\n--------------------------------------------------\nmap {\n    it.first()\n}\n--------------------------------------------------\nmap {\n    it.message ?: \"Unable to save preference\"\n}\n--------------------------------------------------\nthis.card.map {\n    it.expiration()\n}\n--------------------------------------------------\nthis.card.map {\n    it.id()\n}\n--------------------------------------------------\nthis.card.map {\n    it.lastFourDigits()\n}\n--------------------------------------------------\nthis.card.map {\n    it.getCardTypeDrawable()\n}\n--------------------------------------------------\nthis.card.map {\n    it.type()\n}\n--------------------------------------------------\nthis.card.map {\n    it.type()\n}.filter {\n    it.isNotNull()\n}.map {\n    StoredCard.issuer(it)\n}\n--------------------------------------------------\nthis.cards.map {\n    it.isNotEmpty()\n}\n--------------------------------------------------\nmap {\n    it.paymentSourceDelete()?.clientMutationId() ?: \"\"\n}\n--------------------------------------------------\nmap {\n    SavePaymentMethodData(reusable = true, intentClientSecret = it)\n}\n--------------------------------------------------\npledgeReason.map {\n    it == PledgeReason.UPDATE_PAYMENT || it == PledgeReason.FIX_PLEDGE\n}\n--------------------------------------------------\nmap {\n    it == PledgeReason.UPDATE_PAYMENT || it == PledgeReason.UPDATE_PLEDGE || it == PledgeReason.FIX_PLEDGE\n}\n--------------------------------------------------\npledgeData.map {\n    if (it.addOns().isNullOrEmpty()) emptyList() else it.addOns() as List<Reward>\n}\n--------------------------------------------------\nmap {\n    it.first.backing() ?: it.first.project().backing()\n}\n--------------------------------------------------\nbacking.map {\n    it.locationId() == null\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.first.locationId())\n}\n--------------------------------------------------\nmap { shippingInfo ->\n    selectedShippingRule(shippingInfo)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.shippingRule())\n}\n--------------------------------------------------\npledgeData.map {\n    it.shippingRule() == null && RewardUtils.isShippable(it.reward())\n}\n--------------------------------------------------\npreSelectedShippingRule.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nbacking.map {\n    if (it.addOns().isNullOrEmpty()) emptyList() else requireNotNull(it.addOns())\n}\n--------------------------------------------------\nbacking.filter {\n    it.bonusAmount().isNotNull()\n}.map {\n    it.bonusAmount()\n}\n--------------------------------------------------\nmap {\n    joinRewardAndAddOns(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    getPledgeAmount(it)\n}\n--------------------------------------------------\nproject.map {\n    Country.findByCurrencyCode(it.currency())\n}\n--------------------------------------------------\ncountry.map {\n    it.minPledge.toDouble()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    rewardTitle(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    RewardUtils.isLocalPickup(it)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.estimatedDeliveryOn())\n}\n--------------------------------------------------\nmap { dateTime ->\n    dateTime.let {\n        DateTimeUtils.estimatedDeliveryOn(it)\n    }\n}\n--------------------------------------------------\nthis.selectedReward.map {\n    it.estimatedDeliveryOn().isNull() || RewardUtils.isNoReward(it)\n}\n--------------------------------------------------\nthis.selectedReward.filter {\n    !RewardUtils.isNoReward(it)\n}.map {\n    it.minimum()\n}\n--------------------------------------------------\nrewardMinimum.map {\n    NumberUtils.format(it.toInt())\n}\n--------------------------------------------------\nmap {\n    joinProject(it)\n}\n--------------------------------------------------\nproject.map {\n    ProjectViewUtils.currencySymbolAndPosition(it, this.ksCurrency)\n}\n--------------------------------------------------\nadditionalPledgeAmount.map {\n    max(0.0, it)\n}\n--------------------------------------------------\ncountry.map {\n    it.minPledge\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.format(it.first, it.second, RoundingMode.HALF_UP)\n}\n--------------------------------------------------\nadditionalAmountOrZero.map {\n    it <= 0.0\n}\n--------------------------------------------------\nbacking.filter {\n    it.reward() == null\n}.map {\n    it.bonusAmount()\n}\n--------------------------------------------------\nmap {\n    it.amount() - it.shippingAmount() - it.bonusAmount()\n}\n--------------------------------------------------\nthis.pledgeInput.map {\n    it.parseToDouble()\n}\n--------------------------------------------------\nmap {\n    it + this.stepperAmount\n}\n--------------------------------------------------\nmap {\n    it.toString()\n}\n--------------------------------------------------\nmap {\n    it - this.stepperAmount\n}\n--------------------------------------------------\nmap {\n    it.first - it.second\n}\n--------------------------------------------------\nmap {\n    max(it.first, it.second) > it.second\n}\n--------------------------------------------------\nmap {\n    val formatter = NumberFormat.getNumberInstance()\n    formatter.maximumFractionDigits = 2\n    formatter.format(it)\n}\n--------------------------------------------------\nthis.bonusInput.map {\n    it.parseToDouble()\n}\n--------------------------------------------------\nbonusMinimum.map {\n    NumberUtils.format(it.toInt())\n}\n--------------------------------------------------\nmap {\n    it.first + it.second\n}\n--------------------------------------------------\nbacking.map {\n    it.shippingAmount()\n}\n--------------------------------------------------\nmap {\n    if (it.second.isNotEmpty()) it.second.parseToDouble() else it.first.minimum()\n}\n--------------------------------------------------\nmap {\n    Pair(this.ksCurrency.format(it.first, it.second, RoundingMode.HALF_UP), it.second)\n}\n--------------------------------------------------\nmap { totalAndProject ->\n    totalAndProject.second.deadline()?.let {\n        Pair(totalAndProject.first, DateTimeUtils.longDate(it))\n    }\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.formatWithUserPreference(it.first, it.second, RoundingMode.UP, 2)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first.currency() != it.first.currentCurrency()\n}\n--------------------------------------------------\ncountry.map {\n    it.maxPledge.toDouble()\n}\n--------------------------------------------------\nmap {\n    if (RewardUtils.isNoReward(it.second)) it.first.first else it.first.first - it.first.second\n}\n--------------------------------------------------\nmap {\n    it.first >= it.second\n}\n--------------------------------------------------\nmap {\n    it.first in it.second.first..it.second.second\n}\n--------------------------------------------------\nmap {\n    if (it) R.color.kds_create_700 else R.color.kds_alert\n}\n--------------------------------------------------\nstepAmount.map {\n    it.toDouble()\n}\n--------------------------------------------------\nmap {\n    it.second.second - it.first >= it.second.first\n}\n--------------------------------------------------\nbacking.map {\n    it.shippingAmount().toDouble()\n}\n--------------------------------------------------\nbacking.map {\n    it.bonusAmount()\n}\n--------------------------------------------------\nthis.shippingRule.map {\n    it.location()?.displayableName()\n}\n--------------------------------------------------\npledgeReason.map {\n    it == PledgeReason.UPDATE_PLEDGE\n}\n--------------------------------------------------\nmap {\n    it.first != it.second.amount()\n}\n--------------------------------------------------\nmap {\n    it.first != it.second\n}\n--------------------------------------------------\npledgeReason.map {\n    it == PledgeReason.UPDATE_PLEDGE || it == PledgeReason.UPDATE_REWARD\n}\n--------------------------------------------------\nmap {\n    it.first || !it.second\n}\n--------------------------------------------------\nuserIsLoggedIn.map {\n    it.negate()\n}\n--------------------------------------------------\ncardsAndProject.take(1).map {\n    initialCardSelection(it.first, it.second)\n}\n--------------------------------------------------\nselectedCardAndPosition.map {\n    it.second\n}\n--------------------------------------------------\nselectedCardAndPosition.map {\n    it.second >= 0\n}\n--------------------------------------------------\nmap {\n    it.second >= 0\n}\n--------------------------------------------------\nmap { p ->\n    RefTagUtils.storedCookieRefTagForProject(p, cookieManager, sharedPreferences) ?: RefTag.Builder().build()\n}\n--------------------------------------------------\nshippingRule.filter {\n    it.location() != null\n}.map {\n    it.location()\n}\n--------------------------------------------------\nmap {\n    it.id() ?: -1L\n}\n--------------------------------------------------\nproject.filter {\n    it.isBacking()\n}.map {\n    it.backing()\n}\n--------------------------------------------------\nselectedCardAndPosition.map {\n    it.first\n}\n--------------------------------------------------\nrewardAndAddOns.map {\n    extendAddOns(it)\n}\n--------------------------------------------------\ntotal.map {\n    it.toString()\n}\n--------------------------------------------------\nsuccessfulCheckout.filter {\n    it.backing().isNotNull()\n}.map {\n    it.backing()\n}\n--------------------------------------------------\nmap {\n    it.backing()\n}\n--------------------------------------------------\nmap {\n    it.clientSecret()\n}\n--------------------------------------------------\npledgeReason.map {\n    if (it == PledgeReason.PLEDGE) R.string.Pledge else R.string.Confirm\n}\n--------------------------------------------------\nmap { rw ->\n    rw.shippingRules()?.filter { rule ->\n        rule.location()?.id() == selectedRule.location()?.id()\n    }?.map { rule ->\n        shippingCost += rule.cost() * (rw.quantity() ?: 1)\n    }\n}\n--------------------------------------------------\nmap { rule ->\n    shippingCost += rule.cost() * (rw.quantity() ?: 1)\n}\n--------------------------------------------------\nmap {\n    if (!it.isAddOn()) mutableList.add(it) else {\n        val q = it.quantity() ?: 1\n        for (i in 1..q) {\n            mutableList.add(it)\n        }\n    }\n}\n--------------------------------------------------\nitems?.first?.map {\n    Pair(items.second, it)\n}\n--------------------------------------------------\nloggedInUser.map { u ->\n    u.avatar().medium()\n}\n--------------------------------------------------\nloggedInUser.map { u ->\n    u.backedProjectsCount().isZero()\n}\n--------------------------------------------------\nloggedInUser.map<Int> {\n    it.backedProjectsCount()\n}\n--------------------------------------------------\nmap {\n    NumberUtils.format(it)\n}\n--------------------------------------------------\nloggedInUser.map { u ->\n    u.createdProjectsCount().isZero()\n}\n--------------------------------------------------\nloggedInUser.map<Int> {\n    it.createdProjectsCount()\n}\n--------------------------------------------------\nmap { p ->\n    p.first || p.second\n}\n--------------------------------------------------\nloggedInUser.map {\n    it.name()\n}\n--------------------------------------------------\nprojectNotification.map {\n    it.project().name()\n}\n--------------------------------------------------\nprojectNotification.map {\n    it.email() && it.mobile()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.project().projectFaqs())\n}\n--------------------------------------------------\nprojectDataInput.map {\n    it.project()\n}\n--------------------------------------------------\nmap {\n    userIsLoggedOutOrProjectCreator(Pair(it.first.getValue(), it.second))\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.story())\n}\n--------------------------------------------------\nmap {\n    htmlParser.parse(it)\n}\n--------------------------------------------------\nproject.map { pj ->\n    pj.envCommitments()?.sortedBy {\n        it.id\n    }\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.project())\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.creator().avatar().medium())\n}\n--------------------------------------------------\nproject.map {\n    NumberUtils.format(it.backersCount())\n}\n--------------------------------------------------\nproject.map {\n    it.blurb()\n}\n--------------------------------------------------\nproject.filter {\n    it.category().isNotNull()\n}.map {\n    it.category()\n}\n--------------------------------------------------\nmap {\n    it?.name() ?: \"\"\n}\n--------------------------------------------------\nproject.filter {\n    it.commentsCount().isNotNull()\n}.map {\n    requireNotNull(it.commentsCount())\n}\n--------------------------------------------------\nproject.map {\n    it.currency() != it.currentCurrency()\n}\n--------------------------------------------------\nproject.map {\n    it.currency() != it.currentCurrency()\n}.map {\n    it.negate()\n}\n--------------------------------------------------\nmap { proj ->\n    val pledged = ksCurrency.format(proj.pledged(), proj)\n    val goal = ksCurrency.format(proj.goal(), proj)\n    Pair.create(pledged, goal)\n}\n--------------------------------------------------\nproject.map {\n    it.creator().name()\n}\n--------------------------------------------------\nproject.take(1).distinctUntilChanged().map {\n    it.slug()\n}\n--------------------------------------------------\ncreatorDetailsNotification.compose(Transformers.errorsV2()).map { _ ->\n    true\n}\n--------------------------------------------------\nproject.map { proj ->\n    proj.deadlineCountdownValue()\n}\n--------------------------------------------------\nproject.map { proj ->\n    proj.deadlineCountdownValue()\n}.map {\n    NumberUtils.format(it)\n}\n--------------------------------------------------\nproject.map { p: Project ->\n    ksCurrency.formatWithUserPreference(p.goal(), p)\n}\n--------------------------------------------------\nproject.filter {\n    it.location().isNotNull()\n}.map {\n    it.location()\n}\n--------------------------------------------------\nmap {\n    it?.displayableName() ?: \"\"\n}\n--------------------------------------------------\nproject.map {\n    it.percentageFunded()\n}\n--------------------------------------------------\nproject.map {\n    it.percentageFunded()\n}.map {\n    ProgressBarUtils.progress(it)\n}\n--------------------------------------------------\nproject.map { p: Project ->\n    p.isSuccessful || p.isCanceled || p.isFailed || p.isSuspended\n}\n--------------------------------------------------\nproject.map { p: Project ->\n    ksCurrency.formatWithUserPreference(p.pledged(), p)\n}\n--------------------------------------------------\nproject.map {\n    it.creator()\n}\n--------------------------------------------------\nmap { creatorAndCurrentUser: Pair<User, KsOptional<User>> ->\n    creatorAndCurrentUser.second.isNotNull() && creatorAndCurrentUser.first.id() == creatorAndCurrentUser.second?.getValue()?.id()\n}\n--------------------------------------------------\nproject.filter { obj: Project ->\n    obj.isFunded\n}.map { obj: Project ->\n    obj.deadline()\n}\n--------------------------------------------------\nmap { p: Project ->\n    Pair.create(ksCurrency.format(p.goal(), p), p.deadline())\n}\n--------------------------------------------------\nproject.map { p: Project ->\n    p.deadline() == null || !p.isLive\n}\n--------------------------------------------------\nproject.filter {\n    it.launchedAt().isNotNull()\n}.map {\n    requireNotNull(it.launchedAt())\n}\n--------------------------------------------------\nmap {\n    DateTimeUtils.longDate(it)\n}\n--------------------------------------------------\nmap { launchDateAndIsCreator: Pair<Project, Boolean> ->\n    launchDateAndIsCreator.first.launchedAt().isNotNull() && launchDateAndIsCreator.second.isTrue()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.friends())\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.first())\n}\n--------------------------------------------------\nproject.map {\n    it.isFriendBacking\n}\n--------------------------------------------------\nproject.map {\n    it.isFriendBacking\n}.map {\n    it.negate()\n}\n--------------------------------------------------\nmap { p: Project ->\n    if (p.state() == Project.STATE_SUCCESSFUL) R.color.green_alpha_50 else R.color.kds_support_300\n}\n--------------------------------------------------\nproject.map {\n    it.isLive\n}\n--------------------------------------------------\nproject.filter {\n    it.isFriendBacking\n}.map {\n    it.friends()\n}\n--------------------------------------------------\nproject.filter {\n    it.isSuccessful\n}.map {\n    it.stateChangedAt() ?: DateTime()\n}\n--------------------------------------------------\nproject.filter {\n    it.isFailed\n}.map {\n    it.stateChangedAt() ?: DateTime()\n}\n--------------------------------------------------\nproject.filter {\n    it.updatesCount().isNotNull()\n}.map {\n    requireNotNull(it.updatesCount())\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(creatorInfoClicked)).map {\n    it.first\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(commentsClicked)).map {\n    it.first\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(updatesClicked)).map {\n    it.first\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(reportProjectButtonClicked)).map {\n    it.first\n}\n--------------------------------------------------\nproject.map {\n    it.isFlagged() ?: false\n}\n--------------------------------------------------\nmap { pair ->\n    val isFlagged = pair.first\n    val shouldRefresh = pair.second\n    if (shouldRefresh.isNotEmpty()) {\n        true\n    } else isFlagged\n}\n--------------------------------------------------\nshouldShowProjectFlagged.map {\n    !it\n}\n--------------------------------------------------\nmap {\n    if (it.contains(OUR_RULES_TAG)) \"${environment.webEndpoint()}$OUR_RULES\" else if (it.contains(COMMUNITY_GUIDELINES_TAG)) \"${environment.webEndpoint()}$COMMUNITY_GUIDELINES\" else \"\"\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(campaignClicked)).map {\n    it.first\n}\n--------------------------------------------------\nprojectDataInput.filter {\n    it.project().isNotNull()\n}.map {\n    requireNotNull(it.project())\n}\n--------------------------------------------------\nproject.filter {\n    it.risks().isNotNull()\n}.map {\n    requireNotNull(it.risks())\n}\n--------------------------------------------------\nintent().map<Any> {\n    it.getParcelableExtra(IntentKey.PROJECT)\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra(IntentKey.PROJECT_DATA) as? ProjectData?\n}\n--------------------------------------------------\nprojectData.filter {\n    it.project().isNotNull()\n}.map {\n    it.project()\n}\n--------------------------------------------------\nprojectData.map {\n    it.storeCurrentCookieRefTag(cookieManager, sharedPreferences)\n}\n--------------------------------------------------\npagination.paginatedData()?.share()?.filter {\n    it.isNotNull()\n}?.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nObservable.just(this.arguments).filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\narguments().map {\n    it.getParcelable(IntentKey.PROJECT) as Project?\n}\n--------------------------------------------------\nproject.map {\n    it.webProjectUrl()\n}\n--------------------------------------------------\napolloClient.userPrivacy().filter {\n    it.isNotNull()\n}.map {\n    it.email ?: \"email@email.com\"\n}\n--------------------------------------------------\nmap {\n    when(it) {\n        PROHIBITED_ITEMS_TAG -> \"${environment.webEndpoint()}$PROHIBITED_ITEMS\"\n        COMMUNITY_GUIDELINES_TAG -> \"${environment.webEndpoint()}$COMMUNITY_GUIDELINES\"\n        else -> \"\"\n    }\n}\n--------------------------------------------------\nintent.filter {\n    it.hasExtra(IntentKey.EMAIL)\n}.map {\n    it.getStringExtra(IntentKey.EMAIL)\n}\n--------------------------------------------------\nmap {\n    it.getBooleanExtra(IntentKey.RESET_PASSWORD_FACEBOOK_LOGIN, false)\n}\n--------------------------------------------------\nthis.email.map {\n    it.isEmail()\n}\n--------------------------------------------------\nresetPasswordNotification.compose(errorsV2()).map {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nthis.resetError.takeUntil(this.resetLoginPasswordSuccess).map {\n    it.errorMessage()\n}\n--------------------------------------------------\nmap {\n    it.second.acceptedCardType(it.first.type()) || it.first.isFromPaymentSheet()\n}\n--------------------------------------------------\ncard.map {\n    if (it) 1.0f else .5f\n}\n--------------------------------------------------\ncard.map {\n    if (it) R.color.text_primary else R.color.text_secondary\n}\n--------------------------------------------------\ncard.map {\n    it.negate()\n}\n--------------------------------------------------\nthis.cardAndProject.map {\n    it.first\n}\n--------------------------------------------------\nthis.projectDataAndReward.map {\n    it.first.project()\n}\n--------------------------------------------------\nmap {\n    Pair(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    RewardViewUtils.styleCurrency(it.second.minimum(), it.first, this.ksCurrency)\n}\n--------------------------------------------------\nmap {\n    it.first?.getValue()?.id() == it.second.creator().id()\n}\n--------------------------------------------------\nmap {\n    buttonIsGone(it.first.first, it.first.second, it.second)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    RewardViewUtils.pledgeButtonText(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.format(it.second.convertedMinimum(), it.first, true, RoundingMode.HALF_UP, true)\n}\n--------------------------------------------------\nmap {\n    it.first.backing()?.isBacked(it.second) ?: false\n}\n--------------------------------------------------\nmap {\n    when {\n        it -> R.string.Thanks_for_bringing_this_project_one_step_closer_to_becoming_a_reality\n        else -> R.string.Back_it_because_you_believe_in_it\n    }\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.description())\n}\n--------------------------------------------------\nmap {\n    RewardUtils.isReward(it.second) && it.second.description().isNullOrEmpty()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    shouldContinueFlow(it.first, it.second)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first.isLive && RewardUtils.isLimited(it.second)\n}\n--------------------------------------------------\nreward.filter {\n    RewardUtils.isLimited(it)\n}.map {\n    it.remaining() ?: -1\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.rewardsItems())\n}\n--------------------------------------------------\nreward.map {\n    it.hasAddons()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    expirationDateIsGone(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    PledgeData.with(PledgeFlowContext.NEW_PLEDGE, it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    when {\n        it -> R.string.You_pledged_without_a_reward\n        else -> R.string.Pledge_without_a_reward\n    }\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first.backing()?.isBacked(it.second) ?: false\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.title())\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isReward(it) && it.title().isNullOrEmpty()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(RewardUtils.shippingSummary(it))\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.localReceiptLocation()?.displayableName())\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first.isLive && RewardUtils.isShippable(it.second)\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isNoReward(it) || !RewardUtils.hasBackers(it)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.backersCount())\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isNoReward(it) || it.estimatedDeliveryOn().isNull()\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isNoReward(it)\n}\n--------------------------------------------------\ncommentCardData.map {\n    requireNotNull(it.comment)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.first.comment?.assignAuthorBadge(it.second.getValue()))\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().term(it).build()\n}\n--------------------------------------------------\nsearch.filter {\n    it.isNotNull()\n}.filter {\n    it.isTrimmedEmpty()\n}.map {\n    defaultParams\n}\n--------------------------------------------------\nmap { searchTermAndProjectsAndProjectClicked: Pair<Pair<String, List<Project>>, Project> ->\n    val searchTerm = searchTermAndProjectsAndProjectClicked.first.first\n    val currentProjects = searchTermAndProjectsAndProjectClicked.first.second\n    val projectClicked = searchTermAndProjectsAndProjectClicked.second\n    projectAndRefTag(searchTerm, currentProjects, projectClicked)\n}\n--------------------------------------------------\nmap {\n    it.maskEmail()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.localizedMessage)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.errorMessage())\n    requireNotNull(it.errorMessage())\n}\n--------------------------------------------------\nthis.currentUser.loggedInUser().map { u ->\n    u.avatar().medium()\n}\n--------------------------------------------------\nthis.currentUser.loggedInUser().map {\n    it.name()\n}\n--------------------------------------------------\nmap {\n    it.first.location()?.displayableName() ?: \"\"\n}\n--------------------------------------------------\nsignupError.takeUntil(signupSuccess).filter {\n    it.isNotNull()\n}.map {\n    it.errorMessage()\n}\n--------------------------------------------------\nsurveyResponse.map {\n    it.project()\n}\n--------------------------------------------------\nsurveyResponse.map {\n    it.project()\n}.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap {\n    it.creator().avatar().small()\n}\n--------------------------------------------------\nmap {\n    it.creator().name()\n}\n--------------------------------------------------\nintent().map<Any?> {\n    it.getParcelableExtra(IntentKey.SURVEY_RESPONSE)\n}\n--------------------------------------------------\nsurveyResponse.map {\n    it.urls()?.web()?.survey()\n}\n--------------------------------------------------\nproject.map {\n    Pair.create(it.name(), appendRefTag(it.webProjectUrl(), thanksShare().tag()))\n}\n--------------------------------------------------\nproject.map {\n    Pair.create(it, appendRefTag(it.webProjectUrl(), thanksFacebookShare().tag()))\n}\n--------------------------------------------------\nmap {\n    Pair.create(it.name(), appendRefTag(it.webProjectUrl(), thanksTwitterShare().tag()))\n}\n--------------------------------------------------\ngetCommentCardDataFromIntent().distinctUntilChanged().filter {\n    it.isNotNull()\n}.map {\n    it\n}\n--------------------------------------------------\nintent.map {\n    it.getBooleanExtra(IntentKey.REPLY_EXPAND, false)\n}\n--------------------------------------------------\ngetCommentCardDataFromIntent().map {\n    it.comment\n}\n--------------------------------------------------\ngetCommentCardDataFromIntent().map {\n    it.comment\n}.map {\n    it\n}\n--------------------------------------------------\ncommentData.filter {\n    it.project.isNotNull()\n}.map {\n    requireNotNull(it.project)\n}\n--------------------------------------------------\nmap {\n    Pair(it.second, buildReplyBody(Pair(Pair(it.second, it.first.second), it.first.first)))\n}\n--------------------------------------------------\nmap {\n    CommentCardData.builder().comment(it.second).project(it.first.project).commentableId(it.first.commentableId).commentCardState(CommentCardStatus.TRYING_TO_POST.commentCardStatus).build()\n}\n--------------------------------------------------\nthis.currentUserStream.loggedInUser().map {\n    it\n}\n--------------------------------------------------\nthis.onLoadingReplies.map {\n    this.onCommentReplies.value ?: Pair(listOf(), false)\n}\n--------------------------------------------------\nmap {\n    val mappedList = it.second.first.updateCommentFailedToPost(it.first.first, it.second.second)\n    updateNewlyPostedCommentWithNewStatus(mappedList[it.second.second])\n    Pair(mappedList, it.first.second)\n}\n--------------------------------------------------\nthis.successfullyPostedCommentCardToRefresh.map {\n    it.first\n}\n--------------------------------------------------\nmap {\n    val mappedList = it.second.first.updateCommentAfterSuccessfulPost(it.first.first, it.second.second)\n    updateNewlyPostedCommentWithNewStatus(mappedList[it.second.second])\n    Pair(mappedList, it.first.second)\n}\n--------------------------------------------------\nmap {\n    Pair(it.second.updateCanceledPledgeComment(it.first.first), it.first.second)\n}\n--------------------------------------------------\nintent.map {\n    it.getBooleanExtra(IntentKey.REPLY_SCROLL_BOTTOM, false)\n}\n--------------------------------------------------\napolloPaginate.paginatedData()?.map {\n    it.reversed()\n}\n--------------------------------------------------\nmap {\n    if (this.newlyPostedRepliesList.isNotEmpty()) {\n        Pair(this.newlyPostedRepliesList + it.first, it.second)\n    } else {\n        it\n    }\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra<CommentCardData>(IntentKey.COMMENT_CARD_DATA) as CommentCardData\n}\n--------------------------------------------------\nintent.map {\n    it.getStringExtra(IntentKey.UPDATE_POST_ID) ?: \"\"\n}\n--------------------------------------------------\ntfaError.filter { env: ErrorEnvelope ->\n    !env.isTfaFailedError\n}.map {\n    Unit\n}\n--------------------------------------------------\ntfaError.filter(ErrorEnvelope::isTfaFailedError).map {\n    Unit\n}\n--------------------------------------------------\ninternalIntent.map {\n    it.getStringExtra(IntentKey.EMAIL)\n}\n--------------------------------------------------\ninternalIntent.map {\n    it.getStringExtra(IntentKey.FACEBOOK_TOKEN) ?: \"\"\n}\n--------------------------------------------------\ninternalIntent.map {\n    it.getBooleanExtra(IntentKey.FACEBOOK_LOGIN, false)\n}\n--------------------------------------------------\ninternalIntent.map {\n    it.getStringExtra(IntentKey.PASSWORD)\n}\n--------------------------------------------------\nthis.code.map { code: String? ->\n    isCodeValid(code)\n}\n--------------------------------------------------\nthis.projectAndUpdate.map {\n    it.second\n}\n--------------------------------------------------\nthis.projectAndUpdate.map {\n    it.first\n}\n--------------------------------------------------\nmap {\n    it.first.getValue()?.let { user ->\n        it.second.userIsCreator(user)\n    } ?: false\n}\n--------------------------------------------------\nmap {\n    when {\n        it.first.first.isBacking() || it.second -> false\n        else -> (it.first.second.isPublic() ?: false).negate()\n    }\n}\n--------------------------------------------------\nupdate.map {\n    it.truncatedBody()\n}\n--------------------------------------------------\nupdate.filter {\n    it.commentsCount().isNotNull()\n}.map {\n    requireNotNull(it.commentsCount())\n}\n--------------------------------------------------\nupdate.map {\n    it.commentsCount().isNullOrZero()\n}\n--------------------------------------------------\nupdate.filter {\n    it.likesCount().isNotNull()\n}.map {\n    requireNotNull(it.likesCount())\n}\n--------------------------------------------------\nupdate.map {\n    it.likesCount().isNullOrZero()\n}\n--------------------------------------------------\nupdate.filter {\n    it.publishedAt().isNotNull()\n}.map {\n    requireNotNull(it.publishedAt())\n}\n--------------------------------------------------\nupdate.map {\n    it.sequence()\n}\n--------------------------------------------------\nupdate.map {\n    it.title()\n}\n--------------------------------------------------\nmap {\n    newUser.toBuilder().email(it.me()?.email()).isCreator(it.me()?.isCreator).isDeliverable(it.me()?.isDeliverable).isEmailVerified(it.me()?.isEmailVerified).hasPassword(it.me()?.hasPassword()).build()\n}\n--------------------------------------------------\nmap {\n    newUser.toBuilder().email(it.email).isCreator(it.isCreator).isDeliverable(it.isDeliverable).isEmailVerified(it.isEmailVerified).hasPassword(it.hasPassword).build()\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra(IntentKey.PROJECT) as? Project\n}\n--------------------------------------------------\nmap {\n    Pair(it?.getStringExtra(IntentKey.VIDEO_URL_SOURCE) ?: \"\", it?.getLongExtra(IntentKey.VIDEO_SEEK_POSITION, -1) ?: -1)\n}\n--------------------------------------------------\nmap {\n    Pair(requireNotNull(it.first), it.second)\n}", "fun <C> map(transform: (B) -> C): Either<A, C> = when (this) {\r\n        is Left -> Left(this.left)\r\n        is Right -> Right(transform(this.right))\r\n    }" ],
  "fcitx5-android/421" : [ "", "import org.tasks.ui.TaskEditViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n            inflater: LayoutInflater,\r\n            container: ViewGroup?,\r\n            savedInstanceState: Bundle?\r\n    ): View {\r\n        viewModel = ViewModelProvider(requireParentFragment())[TaskEditViewModel::class.java]\r\n        val view = bind(container)\r\n        createView(savedInstanceState)\r\n        return view\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, ViewModelProvider], wildcard=false, alias=null)" ],
  "MaterialFiles/1059" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/909" : [ "@Override\r\npublic void play() {\r\n    if (helper != null && mediaUri != null) {\r\n        if (!isPlaying() && isManuallyPaused) {\r\n            helper.play();\r\n            pause();\r\n            helper.setVolume(volume);\r\n        } else {\r\n            helper.play();\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void pause() {\r\n    if (helper != null)\r\n        helper.pause();\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void pause() {\r\n    if (helper != null)\r\n        helper.pause();\r\n}" ],
  "QuickNovel/64" : [ "genericProperties()", "import com.kickstarter.models.User\nimport com.kickstarter.libs.utils.AnalyticEventsUtils.userProperties\nprivate fun genericProperties(): Map<String, Any> {\r\n        val hashMap = hashMapOf<String, Any>()\r\n        loggedInUser()?.let {\r\n            hashMap.putAll(userProperties(it))\r\n            hashMap[\"user_country\"] = userCountry(it)\r\n        }\r\n        hashMap.putAll(sessionProperties(loggedInUser() != null))\r\n        hashMap.putAll(contextProperties())\r\n        return hashMap\r\n    }" ],
  "QuickNovel/65" : [ "getWebViewMajorVersion() < Constants.MINIMUM_WEB_VIEW_VERSION", "import timber.log.Timber\nimport android.webkit.WebView\nprivate fun WebView.getWebViewMajorVersion(): Int {\r\n    val userAgent = getDefaultUserAgentString()\r\n    val version = \"\"\".*Chrome/(\\d+)\\..*\"\"\".toRegex().matchEntire(userAgent)?.let { match ->\r\n        match.groupValues.getOrNull(1)?.toInt()\r\n    } ?: 0\r\n\r\n    Timber.i(\"WebView user agent is $userAgent, detected version is $version\")\r\n\r\n    return version\r\n}\nImport(names=[android, webkit, WebView], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "fcitx5-android/415" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "Iconify/420" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1071" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/68" : [ "", "import android.view.View;\r\nimport android.webkit.WebResourceRequest;\r\nimport android.webkit.WebView;\r\nimport android.webkit.WebView\nimport android.webkit.WebResourceRequest\nimport android.view.View\nimport android.os.Build\nimport android.annotation.TargetApi\n@TargetApi(Build.VERSION_CODES.N)\r\n@Override\r\npublic boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n    String url = request.getUrl().toString();\r\n    view.loadUrl(url);\r\n    return true;\r\n}" ],
  "fcitx5-android/418" : [ "", "override fun onDestroy() {\n        super.onDestroy()\n        _binding = null\n    }" ],
  "fcitx5-android/417" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "MaterialFiles/1075" : [ "setText(\"\")\n--------------------------------------------------\nnextButton.setText(R.string.next_step)\n--------------------------------------------------\nnextButton.setText(R.string.close)\n--------------------------------------------------\nhelpTitle.setText(currentTip!!.titleText)\n--------------------------------------------------\nsetText(if (activity.isTablet()) currentTip!!.descriptionTextTablet else currentTip!!.descriptionText)\n--------------------------------------------------\ninput.setText(oldName)\n--------------------------------------------------\neditAddress.setText(networkUri.host)\n--------------------------------------------------\neditUsername.editText!!.setText(networkUri.userInfo)\n--------------------------------------------------\neditFolder.setText(networkUri.path)\n--------------------------------------------------\neditServername.setText(networkName)\n--------------------------------------------------\neditPort.setText(if (port != -1) port.toString() else getPortForProtocol(position))\n--------------------------------------------------\neditPort.setText(port)\n--------------------------------------------------\neditFolder.setText(\"/home/\" + editUsername.editText!!.text.toString())\n--------------------------------------------------\n(view.findViewById<View>(R.id.tim_pic_title) as TextView).setText(getTitle())\n--------------------------------------------------\nnewNameInputtext.setText(name)\n--------------------------------------------------\nbinding.dialogPlaylistSave.setText(R.string.save)\n--------------------------------------------------\nsetText(res.getString(if (enabled) R.string.audio_digital_output_enabled else R.string.audio_digital_output_disabled))\n--------------------------------------------------\ntoast.setText(R.string.audio_digital_failed)\n--------------------------------------------------\npermDescription.setText(R.string.permission_onboarding_no_perm)\n--------------------------------------------------\npermDescription.setText(R.string.permission_onboarding_perm_media)\n--------------------------------------------------\npermDescription.setText(R.string.permission_onboarding_perm_all)\n--------------------------------------------------\nsetText(if (AndroidDevices.canUseSystemNightMode()) R.string.daynight_system_explanation else R.string.daynight_legacy_explanation)\n--------------------------------------------------\nthemeDescription.setText(R.string.light_theme)\n--------------------------------------------------\nthemeDescription.setText(R.string.enable_black_theme)\n--------------------------------------------------\ngetCurrentInput()?.setText(keyboardButton.tag as String)\n--------------------------------------------------\ngetCurrentInput()?.setText(\"0\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"1\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"2\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"3\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"4\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"5\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"6\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"7\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"8\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"9\")\n--------------------------------------------------\nbinding.searchEditText.setText(query)\n--------------------------------------------------\nplaylistSearchText.editText?.setText(\"\")\n--------------------------------------------------\nhelpDescription.setText(currentTip!!.descriptionText)\n--------------------------------------------------\nhelpTitle.setText(R.string.tips_player_controls)\n--------------------------------------------------\nhelpDescription.setText(R.string.tips_player_controls_description)\n--------------------------------------------------\nhelpTitle.setText(R.string.tips_audio_sub)\n--------------------------------------------------\nhelpDescription.setText(R.string.tap)\n--------------------------------------------------\nhelpTitle.setText(R.string.lock_orientation)\n--------------------------------------------------\nhelpDescription.setText(R.string.lock_orientation_description)\n--------------------------------------------------\nhelpTitle.setText(R.string.play)\n--------------------------------------------------\nhelpDescription.setText(R.string.tips_play_description)\n--------------------------------------------------\nhelpTitle.setText(R.string.aspect_ratio)\n--------------------------------------------------\nhelpDescription.setText(R.string.aspect_ratio_description)\n--------------------------------------------------\nhelpTitle.setText(R.string.advanced_options)\n--------------------------------------------------\nhelpDescription.setText(R.string.advanced_options_description)\n--------------------------------------------------\nsuper.setText(text, type)", "override fun setText(text: CharSequence?, type: BufferType?) {\r\n        if (width != 0) computeTextSize()\r\n\r\n        super.setText(text, type)\r\n    }" ],
  "MaterialFiles/1077" : [ "", "import android.animation.ValueAnimator\noverride fun onAnimationUpdate(animation: ValueAnimator) {\r\n        if (!scroller.isFinished) {\r\n            scroller.computeScrollOffset()\r\n            updateDataOffset()\r\n        } else {\r\n            scrollAnimator.cancel()\r\n        }\r\n    }\nImport(names=[android, animation, ValueAnimator], wildcard=false, alias=null)" ],
  "Trail-Sense/351" : [ "super.onUpdate(context, appWidgetManager, appWidgetIds)", "import org.videolan.vlc.R\nimport org.videolan.vlc.BuildConfig\nimport android.os.Build\nimport android.content.Intent\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\noverride fun onUpdate(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {\r\n        super.onUpdate(context, appWidgetManager, appWidgetIds)\r\n\r\n        /* init widget */\r\n        onReceive(context, Intent(ACTION_WIDGET_INIT))\r\n\r\n        /* ask a refresh from the service if there is one */\r\n        context.sendBroadcast(Intent(ACTION_WIDGET_INIT).setPackage(BuildConfig.APP_ID))\r\n    }\nImport(names=[android, appwidget, AppWidgetManager], wildcard=false, alias=null)\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "Iconify/429" : [ "", "import com.kickstarter.models.User\nimport com.kickstarter.mock.factories.LocationFactory.germany\n @JvmStatic\r\n    fun germanUser(): User {\r\n        return user()\r\n            .toBuilder()\r\n            .location(germany())\r\n            .build()\r\n    }\nImport(names=[com, kickstarter, models, User], wildcard=false, alias=null)" ],
  "Trail-Sense/1431" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "MaterialFiles/397" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/355" : [ "                                    }\n                                    .map(LocationFilters::toLocationFilter)\r\n                                    .sort())\n--------------------------------------------------\n= toLocation().distanceTo(other.toLocation())\n--------------------------------------------------\n            return Location(null).apply {\n                latitude = this@toLocation.latitude\r\n                longitude = this@toLocation.longitude\n--------------------------------------------------\n                latitude = this@toLocation.latitude\n                longitude = this@toLocation.longitude\r\n            }", "import org.tasks.data.Place\nimport android.location.Location\nprivate fun Place.toLocation(): Location {\r\n            return Location(null).apply {\r\n                latitude = this@toLocation.latitude\r\n                longitude = this@toLocation.longitude\r\n            }\r\n        }\nimport android.location.Location\nimport org.tasks.data.Place" ],
  "Iconify/425" : [ "\t\tif (exception != null) {\n\t\t\tval stackTrace = Log.getStackTraceString(exception)\r\n\t\t\tval errorString = \"${exception.message}\\n$stackTrace\"\n--------------------------------------------------\n\t\t\tobj.put(\"message\", message)\n\t\t\tobj.put(\"stack\", getStack())\r\n\t\t\treturn obj", "import java.io.StringWriter\nimport java.io.PrintWriter\nprivate fun Throwable.getStack(): String {\r\n\t\t\tval errors = StringWriter()\r\n\t\t\tprintStackTrace(PrintWriter(errors))\r\n\t\t\treturn errors.toString()\r\n\t\t}\nimport java.io.PrintWriter\nimport java.io.StringWriter" ],
  "Trail-Sense/1436" : [ "", "import android.graphics.Paint\noverride fun setFontSize(size: Double) {\r\n        textPaint.textSize = size.toDp()\r\n        updateMHeight()\r\n    }" ],
  "Trail-Sense/1437" : [ "            viewPager?.dispatchTouchEvent(event)\n            return flingPlayBackController.onTouchEvent(event)\n        }\n--------------------------------------------------\n        }\n        return mGestureDetector!!.onTouchEvent(event)\n    }", "import android.view.View\nimport android.view.MotionEvent\nimport android.annotation.SuppressLint\n @SuppressLint(\"ClickableViewAccessibility\")\n        override fun onTouch(v: View, event: MotionEvent): Boolean {\n            viewPager?.dispatchTouchEvent(event)\n            return flingPlayBackController.onTouchEvent(event)\n        }\nimport android.annotation.SuppressLint\nimport android.view.MotionEvent\nimport android.view.View" ],
  "Iconify/424" : [ "        }\n        rv.setTextViewText(R.id.widgetNetwork, TextTools.dotSeparate(network, absoluteTime))\r\n\n--------------------------------------------------\nTextTools.dotSeparate(network, releaseTimeShow?.formatWithDeviceZoneToDayAndTime())\n--------------------------------------------------\nTextTools.dotSeparate(time, network)\n--------------------------------------------------\nTextTools.dotSeparate(episode.network, time)\n--------------------------------------------------\nTextTools.dotSeparate(timeText, absoluteNumberText)\n--------------------------------------------------\nTextTools.dotSeparate(absoluteNumberText, dvdNumberText)\n--------------------------------------------------\nTextTools.dotSeparate(item.username, time)\n--------------------------------------------------\nTextTools.dotSeparate(TextTools.dotSeparate(network, timeOrNull), runtime)\n--------------------------------------------------\nTextTools.dotSeparate(network, timeOrNull)\n--------------------------------------------------\ndotSeparate(show.network, TimeTools.getReleaseDateTime(context, show)?.formatWithDeviceZoneToDayAndTime())", " @JvmStatic\r\n    fun dotSeparate(left: String?, right: String?): String {\r\n        val dotString = StringBuilder(left ?: \"\")\r\n        if (!right.isNullOrEmpty()) {\r\n            if (dotString.isNotEmpty()) {\r\n                dotString.append(\" · \")\r\n            }\r\n            dotString.append(right)\r\n        }\r\n        return dotString.toString()\r\n    }" ],
  "Trail-Sense/358" : [ "        messageReference = intent.getStringExtra(EXTRA_MESSAGE_REFERENCE)\n        currentFolderId = intent.getLongExtraOrNull(EXTRA_CURRENT_FOLDER_ID)\r\n        showDisplayableOnly = intent.getBooleanExtra(EXTRA_SHOW_DISPLAYABLE_ONLY, false)\n--------------------------------------------------\n        } else {\n            intent.getLongExtraOrNull(EXTRA_SCROLL_TO_FOLDER_ID)\r\n        }", "import android.content.Intent\nprivate fun Intent.getLongExtraOrNull(name: String): Long? {\r\n        if (!hasExtra(name)) return null\r\n\r\n        val value = getLongExtra(name, -1L)\r\n        return if (value != -1L) value else null\r\n    }\nimport android.content.Intent" ],
  "MaterialFiles/1070" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/423" : [ "Operations.getBody(baseNote.items)\n--------------------------------------------------\nOperations.getBody(model.items)", "import com.omgodse.notally.room.ListItem\nfun getBody(list: List<ListItem>) = buildString {\r\n        for (item in list) {\r\n            val check = if (item.checked) \"[✓]\" else \"[ ]\"\r\n            appendLine(\"$check ${item.body}\")\r\n        }\r\n    }" ],
  "QuickNovel/70" : [ "getValidUrl(link) ?: return", "private fun getValidUrl(urlString: String): String? {\r\n        if (urlString.isBlank())\r\n            return null\r\n\r\n        val url = createUrl(urlString) ?: createUrl(urlString, \"https://\") ?: return null\r\n\r\n        return url.toString()\r\n    }" ],
  "MaterialFiles/1068" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/410" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "fcitx5-android/411" : [ "", "override fun onDestroy() {\n        super.onDestroy()\n        _binding = null\n    }" ],
  "fcitx5-android/414" : [ "", "import org.tasks.ui.TaskEditViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n            inflater: LayoutInflater,\r\n            container: ViewGroup?,\r\n            savedInstanceState: Bundle?\r\n    ): View {\r\n        viewModel = ViewModelProvider(requireParentFragment())[TaskEditViewModel::class.java]\r\n        val view = bind(container)\r\n        createView(savedInstanceState)\r\n        return view\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, ViewModelProvider], wildcard=false, alias=null)" ],
  "MaterialFiles/1083" : [ "super.onDetachedFromWindow()", "override fun onDetachedFromWindow() {\r\n        adapter.onDetached()\r\n        super.onDetachedFromWindow()\r\n    }" ],
  "Iconify/476" : [ "searchWebFor(binding.albumText.text.toString(), binding.albumArtistText.text.toString())\n--------------------------------------------------\nsearchWebFor(binding.songText.text.toString(), binding.artistText.text.toString())", "import code.name.monkey.retromusic.R\nimport android.content.Intent\nimport android.app.SearchManager\nimport android.app.Activity\nprotected fun searchWebFor(vararg keys: String) {\n        val stringBuilder = StringBuilder()\n        for (key in keys) {\n            stringBuilder.append(key)\n            stringBuilder.append(\" \")\n        }\n        val intent = Intent(Intent.ACTION_WEB_SEARCH)\n        intent.putExtra(SearchManager.QUERY, stringBuilder.toString())\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n\n        startActivity(intent)\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "MaterialFiles/1085" : [ "super.onRestoreInstanceState(state)\n--------------------------------------------------\nsuper.onRestoreInstanceState(state.superState)", "import org.isoron.uhabits.activities.common.views.BundleSavedState\nimport org.isoron.uhabits.R\nimport android.os.Parcelable\nimport android.os.Bundle\noverride fun onRestoreInstanceState(state: Parcelable) {\r\n        if (state !is BundleSavedState) {\r\n            super.onRestoreInstanceState(state)\r\n            return\r\n        }\r\n        dataOffset = state.bundle!!.getInt(\"dataOffset\")\r\n        super.onRestoreInstanceState(state.superState)\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, os, Parcelable], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, activities, common, views, BundleSavedState], wildcard=false, alias=null)" ],
  "Iconify/472" : [ "        .isBacking(this.isBacking())\n        .backing(backing())\r\n        .availableCardTypes(this.availableCardTypes())\n--------------------------------------------------\nproject.backing()\n--------------------------------------------------\nreturn backing(project(), backer, RewardFactory.reward())\n--------------------------------------------------\nreturn backing(project(), user(), reward)\n--------------------------------------------------\nbacking().toBuilder()\n--------------------------------------------------\nbacking(CheckoutBackingFactory.requiresAction(requiresAction))\n--------------------------------------------------\nproject.toBuilder().backing(backing)\n--------------------------------------------------\nbacking(backing)\n--------------------------------------------------\nbacking(project, user)\n--------------------------------------------------\nbacking()\n--------------------------------------------------\nBackingFactory.backing()\n--------------------------------------------------\nbacking() == obj.backing()\n--------------------------------------------------\nobj.backing()\n--------------------------------------------------\nbacking() == other.backing()\n--------------------------------------------------\nother.backing()\n--------------------------------------------------\nresponse.data?.cancelBacking()?.backing()\n--------------------------------------------------\ncheckoutPayload?.backing()\n--------------------------------------------------\nCheckout.builder().id(decodeRelayId(checkoutPayload?.id())).backing(backing)\n--------------------------------------------------\ndata.backing()\n--------------------------------------------------\nit?.fragments()?.backing()\n--------------------------------------------------\nbackingObj?.fragments()?.backing()\n--------------------------------------------------\ndata.project()?.backing()\n--------------------------------------------------\nit.backing()\n--------------------------------------------------\nbackingFragments.backing()\n--------------------------------------------------\ndata.project()?.backing()?.fragments()?.backing()\n--------------------------------------------------\nprojectFragment?.backing()\n--------------------------------------------------\nprojectFragment?.backing()?.fragments()?.backing()\n--------------------------------------------------\nprojectFragment.backing()\n--------------------------------------------------\nprojectFragment.backing()?.fragments()?.backing()\n--------------------------------------------------\nbuilder().project(backingWrapper.project).backing(backingWrapper.backing)\n--------------------------------------------------\npData?.project()?.backing()\n--------------------------------------------------\npData?.backing()\n--------------------------------------------------\nprojectData.backing()\n--------------------------------------------------\nprojectData.project().backing()\n--------------------------------------------------\nit.first.backing()\n--------------------------------------------------\nit.first.project().backing()", "import kotlin.jvm.JvmOverloads\nimport com.kickstarter.models.Backing\n @JvmStatic\r\n    @JvmOverloads\r\n    fun backing(status: String): Backing {\r\n        return backing()\r\n            .toBuilder()\r\n            .status(status)\r\n            .build()\r\n    }\nImport(names=[com, kickstarter, models, Backing], wildcard=false, alias=null)" ],
  "Trail-Sense/761" : [ "", "import android.util.TypedValue\nimport android.content.Context\nprivate fun toDP(context: Context, value: Int): Int {\n        return TypedValue.applyDimension(\n            TypedValue.COMPLEX_UNIT_DIP,\n            value.toFloat(), context.resources.displayMetrics\n        ).toInt()\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, util, TypedValue], wildcard=false, alias=null)" ],
  "Trail-Sense/762" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "MaterialFiles/1081" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/766" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "fcitx5-android/441" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == MenuHelper.save) {\r\n        return onActionDoneClick();\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    boolean result;\r\n    result = datePeriodItemSelected(item);\r\n    if (result)\r\n        return true;\r\n    result = isStatusSelectionHandled(item);\r\n    if (result)\r\n        return true;\r\n    result = isFilterSelected(item);\r\n    if (result)\r\n        return true;\r\n    switch(item.getItemId()) {\r\n        case R.id.menu_add_transaction_account:\r\n            startCheckingAccountActivity();\r\n            result = true;\r\n            break;\r\n        case R.id.menu_export_to_csv:\r\n            if (mAllDataListFragment != null && mAccount != null)\r\n                mAllDataListFragment.exportDataToCSVFile(mAccount.getName());\r\n            result = true;\r\n            break;\r\n        default:\r\n            result = false;\r\n            break;\r\n    }\r\n    // If not consumed here (true), send for further processing to the parent.\r\n    if (result) {\r\n        return result;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport com.money.manager.ex.core.MenuHelper;\r\nimport com.money.manager.ex.core.MenuHelper\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == MenuHelper.save) {\r\n        return onActionDoneClick();\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "MaterialFiles/1079" : [ "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    listener.onNoteUpdated(note);\r\n}\n--------------------------------------------------\n/**\r\n * Main-Menu-Handler\r\n */\r\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    final int itemId = item.getItemId();\r\n    if (itemId == R.id.menu_cancel) {\r\n        executor.submit(() -> {\r\n            if (originalNote == null) {\r\n                repo.deleteNoteAndSync(localAccount, note.getId());\r\n            } else {\r\n                repo.updateNoteAndSync(localAccount, originalNote, null, null, null);\r\n            }\r\n        });\r\n        listener.close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_delete) {\r\n        repo.deleteNoteAndSync(localAccount, note.getId());\r\n        listener.close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_favorite) {\r\n        note.setFavorite(!note.getFavorite());\r\n        repo.toggleFavoriteAndSync(localAccount, note.getId());\r\n        listener.onNoteUpdated(note);\r\n        prepareFavoriteOption(item);\r\n        return true;\r\n    } else if (itemId == R.id.menu_category) {\r\n        showCategorySelector();\r\n        return true;\r\n    } else if (itemId == R.id.menu_title) {\r\n        showEditTitleDialog();\r\n        return true;\r\n    } else if (itemId == R.id.menu_move) {\r\n        executor.submit(() -> AccountPickerDialogFragment.newInstance(new ArrayList<>(repo.getAccounts()), note.getAccountId()).show(requireActivity().getSupportFragmentManager(), BaseNoteFragment.class.getSimpleName()));\r\n        return true;\r\n    } else if (itemId == R.id.menu_share) {\r\n        shareNote();\r\n        return false;\r\n    } else if (itemId == MENU_ID_PIN) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            final var context = requireContext();\r\n            if (ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {\r\n                final var pinShortcutInfo = new ShortcutInfoCompat.Builder(context, String.valueOf(note.getId())).setShortLabel(note.getTitle()).setIcon(IconCompat.createWithResource(context.getApplicationContext(), TRUE.equals(note.getFavorite()) ? R.drawable.ic_star_yellow_24dp : R.drawable.ic_star_grey_ccc_24dp)).setIntent(new Intent(getActivity(), EditNoteActivity.class).putExtra(EditNoteActivity.PARAM_NOTE_ID, note.getId()).setAction(ACTION_SHORTCUT)).build();\r\n                ShortcutManagerCompat.requestPinShortcut(context, pinShortcutInfo, PendingIntent.getBroadcast(context, 0, ShortcutManagerCompat.createShortcutResultIntent(context, pinShortcutInfo), pendingIntentFlagCompat(0)).getIntentSender());\r\n            } else {\r\n                Log.i(TAG, \"RequestPinShortcut is not supported\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.persistence.entity.Note;\r\nimport it.niedermann.owncloud.notes.shared.util.NoteUtil\nimport it.niedermann.owncloud.notes.persistence.entity.Note\nimport android.text.TextUtils\n@Override\r\npublic void onNoteUpdated(Note note) {\r\n    if (note != null) {\r\n        binding.toolbar.setTitle(note.getTitle());\r\n        if (TextUtils.isEmpty(note.getCategory())) {\r\n            binding.toolbar.setSubtitle(null);\r\n        } else {\r\n            binding.toolbar.setSubtitle(NoteUtil.extendCategory(note.getCategory()));\r\n        }\r\n    }\r\n}" ],
  "QuickNovel/84" : [ "DATE_FORMAT.parse(value.value.toString())\n--------------------------------------------------\nDateTime.parse(value.value.toString())\n--------------------------------------------------\nJsoup.parse(html)\n--------------------------------------------------\nparse(it.children())\n--------------------------------------------------\nparse(element.children())\n--------------------------------------------------\nJsoup.parse(this)\n--------------------------------------------------\nformat.parse(it)\n--------------------------------------------------\nUri.parse(webEndpoint)\n--------------------------------------------------\nUri.parse(baseUrl)\n--------------------------------------------------\nUri.parse(url)\n--------------------------------------------------\nDateTime.parse(\"2020-04-02T18:08:32Z\")\n--------------------------------------------------\nDateTime.parse(\"2019-03-26T19:26:09Z\")\n--------------------------------------------------\nUri.parse(project()?.webProjectUrl())\n--------------------------------------------------\nUri.parse(\"http://www.example.com\")\n--------------------------------------------------\nUri.parse(webProjectUrl())\n--------------------------------------------------\nUri.parse(secureWebProjectUrl())\n--------------------------------------------------\nUri.parse(request.url.toString())\n--------------------------------------------------\nUri.parse(it)\n--------------------------------------------------\nUri.parse(getString(this.mailto))\n--------------------------------------------------\nUri.parse(videoUrl)\n--------------------------------------------------\nJsoup.parse(this.text.toString())\n--------------------------------------------------\nUri.parse(urlSpan.url)\n--------------------------------------------------\nUri.parse(shareUrl)\n--------------------------------------------------\nUri.parse(Secrets.HelpCenter.ENDPOINT)\n--------------------------------------------------\nUri.parse(it.request.url.toString())\n--------------------------------------------------\nUri.parse(appendRefTag(url, RefTag.deepLink().tag()))\n--------------------------------------------------\nhtmlParser.parse(it)", "import org.jsoup.select.Elements\nimport org.jsoup.nodes.Element\nimport org.jsoup.Jsoup\nfun parse(html: String): List<ViewElement> {\r\n        val doc = Jsoup.parse(html)\r\n        val viewElements = mutableListOf<ViewElement>()\r\n        doc.children().forEach {\r\n            viewElements.addAll(parse(it.children()))\r\n        }\r\n\r\n        return viewElements\r\n    }\nImport(names=[org, jsoup, Jsoup], wildcard=false, alias=null)\nImport(names=[org, jsoup, select, Elements], wildcard=false, alias=null)" ],
  "fcitx5-android/444" : [ "", "import android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val item = items[position]\r\n        holder.bindView(item, true, true) { itemView, layoutPosition ->\r\n            setupView(itemView, item, holder)\r\n        }\r\n        bindViewHolder(holder)\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "QuickNovel/88" : [ "getValidUrl(link) ?: return", "private fun getValidUrl(urlString: String): String? {\r\n        if (urlString.isBlank())\r\n            return null\r\n\r\n        val url = createUrl(urlString) ?: createUrl(urlString, \"https://\") ?: return null\r\n\r\n        return url.toString()\r\n    }" ],
  "MaterialFiles/1096" : [ "mediaList.replaceWith(list)\n--------------------------------------------------\nmediaList.replaceWith(withContext(Dispatchers.IO) {\n    mediaList.copy.updateWithMLMeta()\n})", "import org.videolan.medialibrary.interfaces.media.MediaWrapper\n @Synchronized\r\n    fun replaceWith(list: List<MediaWrapper>) {\r\n        internalList.clear()\r\n        internalList.addAll(list)\r\n    }" ],
  "fcitx5-android/439" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import org.tasks.R\nimport com.todoroo.astrid.data.Task\nimport com.todoroo.astrid.activity.TaskListFragment\nimport android.content.Intent\nimport android.app.Activity\noverride suspend fun delete() {\r\n        filterDao.delete(filter!!.id)\r\n        setResult(\r\n                Activity.RESULT_OK, Intent(TaskListFragment.ACTION_DELETED).putExtra(TOKEN_FILTER, filter))\r\n        finish()\r\n    }\nimport android.app.Activity\nimport android.content.Intent\nimport com.todoroo.astrid.activity.TaskListFragment\nimport com.todoroo.astrid.data.Task\nimport org.tasks.R" ],
  "Neo-Backup/141" : [ "disablePersistence(prefScreen)\n--------------------------------------------------\ndisablePersistence(pref)", "import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nprivate fun disablePersistence(group: PreferenceGroup) {\r\n        val count = group.preferenceCount\r\n        for (i in 0 until count) {\r\n            val pref = group.getPreference(i)\r\n            if (pref is PreferenceGroup) {\r\n                disablePersistence(pref)\r\n            } else {\r\n                pref.isPersistent = false\r\n            }\r\n        }\r\n    }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceGroup], wildcard=false, alias=null)" ],
  "Iconify/482" : [ "= getEmptyFolder(\"backup\")\n--------------------------------------------------\n= getEmptyFolder(\"exported\")", "import java.io.File\nimport com.omgodse.notally.room.Folder\nprivate fun getEmptyFolder(name: String): File {\r\n        val folder = File(app.cacheDir, name)\r\n        if (folder.exists()) {\r\n            clear(folder)\r\n        } else folder.mkdir()\r\n        return folder\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "Iconify/481" : [ "isLrcFileExist(song.title, song.artistName)", "private fun isLrcFileExist(title: String, artist: String): Boolean {\n        val file = File(getLrcPath(title, artist))\n        return file.exists()\n    }" ],
  "Neo-Backup/146" : [ "allThreads: List<JavaThread> = allThreads()", "import java.lang.Thread\ninternal fun allThreads(): List<JavaThread> {\r\n            val rootGroup = rootThreadGroup()\r\n            val threadCount = rootGroup.activeCount()\r\n            val threads: Array<JavaThread?> = arrayOfNulls(threadCount)\r\n            rootGroup.enumerate(threads)\r\n            return threads.filterNotNull()\r\n        }" ],
  "Trail-Sense/773" : [ "repository.favoritePlaylist()\n--------------------------------------------------\n        lifecycleScope.launch(IO) {\n            val playlist: PlaylistEntity = libraryViewModel.favoritePlaylist()\n            val songEntity = song.toSongEntity(playlist.playListId)\n--------------------------------------------------\nlibraryViewModel.favoritePlaylist()", "override suspend fun favoritePlaylist(favorite: String): PlaylistEntity {\n        val playlist: PlaylistEntity? = playlistDao.playlist(favorite).firstOrNull()\n        return if (playlist != null) {\n            playlist\n        } else {\n            createPlaylist(PlaylistEntity(playlistName = favorite))\n            playlistDao.playlist(favorite).first()\n        }\n    }" ],
  "Neo-Backup/149" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Neo-Backup/148" : [ "(item1 as? MediaWrapper)?.fileName?.removeExtension()\n--------------------------------------------------\n(item2 as? MediaWrapper)?.fileName?.removeExtension()", "fun String.removeExtension():String {\r\n    if (isNotEmpty() && substringBeforeLast(\".\").isEmpty()) return this\r\n    return substringBeforeLast(\".\")\r\n}" ],
  "Trail-Sense/779" : [ "setupOptionsMenu()", "import com.simplemobiletools.calendar.pro.models.EventType\nimport com.simplemobiletools.calendar.pro.R\nprivate fun setupOptionsMenu() {\r\n        binding.manageEventTypesToolbar.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.add_event_type -> showEventTypeDialog()\r\n                else -> return@setOnMenuItemClickListener false\r\n            }\r\n            return@setOnMenuItemClickListener true\r\n        }\r\n    }\nImport(names=[com, simplemobiletools, calendar, pro, R], wildcard=false, alias=null)" ],
  "QuickNovel/93" : [ "", "import android.graphics.Color;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialog;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialogListener;\r\nimport java.util.List\nimport com.jaredrummler.android.colorpicker.ColorPickerDialogListener\nimport com.jaredrummler.android.colorpicker.ColorPickerDialog\nimport android.graphics.Color\n// ColorPickerDialogListener callback used by the ColorPickerDialog created in ChooseCardImage to set the thumbnail color\r\n// We don't need to set or check the dialogId since it's only used for that single dialog\r\n@Override\r\npublic void onColorSelected(int dialogId, int color) {\r\n    // Unset image if set\r\n    setCardImage(thumbnail, null, false);\r\n    mIconRemoved = true;\r\n    mIconUnsaved = false;\r\n    updateTempState(LoyaltyCardField.headerColor, color);\r\n    thumbnailEditIcon.setBackgroundColor(Utils.needsDarkForeground(color) ? Color.BLACK : Color.WHITE);\r\n    thumbnailEditIcon.setColorFilter(Utils.needsDarkForeground(color) ? Color.WHITE : Color.BLACK);\r\n    generateIcon(storeFieldEdit.getText().toString().trim());\r\n}" ],
  "fcitx5-android/432" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "fcitx5-android/436" : [ "", "import com.fsck.k9.preferences.SubTheme\nprivate fun resolveTheme(theme: SubTheme): Theme = when (theme) {\r\n        SubTheme.LIGHT -> Theme.LIGHT\r\n        SubTheme.DARK -> Theme.DARK\r\n        SubTheme.USE_GLOBAL -> appTheme\r\n    }\nimport com.fsck.k9.preferences.SubTheme" ],
  "Neo-Backup/152" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/153" : [ "/**\r\n * Returns a cursor to all loyalty cards with the filter text in either the store or note in a certain group sorted as requested.\r\n *\r\n * @param filter\r\n * @param group\r\n * @param order\r\n * @return Cursor\r\n */\r\npublic static Cursor getLoyaltyCardCursor(SQLiteDatabase database, String filter, Group group, LoyaltyCardOrder order, LoyaltyCardOrderDirection direction, LoyaltyCardArchiveFilter archiveFilter) {\r\n    StringBuilder groupFilter = new StringBuilder();\r\n    String limitString = \"\";\r\n    if (group != null) {\r\n        List<Integer> allowedIds = getGroupCardIds(database, group._id);\r\n        // Empty group\r\n        if (!allowedIds.isEmpty()) {\r\n            groupFilter.append(\"AND (\");\r\n            for (int i = 0; i < allowedIds.size(); i++) {\r\n                groupFilter.append(LoyaltyCardDbIds.TABLE + \".\" + LoyaltyCardDbIds.ID + \" = \").append(allowedIds.get(i));\r\n                if (i != allowedIds.size() - 1) {\r\n                    groupFilter.append(\" OR \");\r\n                }\r\n            }\r\n            groupFilter.append(\") \");\r\n        } else {\r\n            limitString = \"LIMIT 0\";\r\n        }\r\n    }\r\n    String archiveFilterString = \"\";\r\n    if (archiveFilter != LoyaltyCardArchiveFilter.All) {\r\n        archiveFilterString = \" AND \" + LoyaltyCardDbIds.TABLE + \".\" + LoyaltyCardDbIds.ARCHIVE_STATUS + \" = \" + (archiveFilter.equals(LoyaltyCardArchiveFilter.Unarchived) ? 0 : 1);\r\n    }\r\n    String orderField = getFieldForOrder(order);\r\n    return database.rawQuery(\"SELECT \" + LoyaltyCardDbIds.TABLE + \".* FROM \" + LoyaltyCardDbIds.TABLE + \" JOIN \" + LoyaltyCardDbFTS.TABLE + \" ON \" + LoyaltyCardDbFTS.TABLE + \".\" + LoyaltyCardDbFTS.ID + \" = \" + LoyaltyCardDbIds.TABLE + \".\" + LoyaltyCardDbIds.ID + (filter.trim().isEmpty() ? \" \" : \" AND \" + LoyaltyCardDbFTS.TABLE + \" MATCH ? \") + groupFilter.toString() + archiveFilterString + \" ORDER BY \" + LoyaltyCardDbIds.TABLE + \".\" + LoyaltyCardDbIds.ARCHIVE_STATUS + \" ASC, \" + LoyaltyCardDbIds.TABLE + \".\" + LoyaltyCardDbIds.STAR_STATUS + \" DESC, \" + \" (CASE WHEN \" + LoyaltyCardDbIds.TABLE + \".\" + orderField + \" IS NULL THEN 1 ELSE 0 END), \" + LoyaltyCardDbIds.TABLE + \".\" + orderField + \" COLLATE NOCASE \" + getDbDirection(order, direction) + \", \" + LoyaltyCardDbIds.TABLE + \".\" + LoyaltyCardDbIds.STORE + \" COLLATE NOCASE ASC \" + limitString, filter.trim().isEmpty() ? null : new String[] { TextUtils.join(\"* \", filter.split(\" \")) + '*' }, null);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean equals(@Nullable Object obj) {\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (!(obj instanceof Group)) {\r\n        return false;\r\n    }\r\n    Group anotherGroup = (Group) obj;\r\n    return _id.equals(anotherGroup._id) && order == anotherGroup.order;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.annotation.Nullable\n@Override\r\npublic boolean equals(@Nullable Object obj) {\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (!(obj instanceof Group)) {\r\n        return false;\r\n    }\r\n    Group anotherGroup = (Group) obj;\r\n    return _id.equals(anotherGroup._id) && order == anotherGroup.order;\r\n}" ],
  "Neo-Backup/150" : [ "\n        viewModel.getMessageListLiveData().observe(this) { messageListInfo: MessageListInfo ->\r\n            setMessageList(messageListInfo)\n--------------------------------------------------\n            val messageList = withContext(Dispatchers.IO) {\n                messageListLoader.getMessageList(config)\r\n            }", "import timber.log.Timber\nfun getMessageList(config: MessageListConfig): List<MessageListItem> {\r\n        return try {\r\n            getMessageListInfo(config)\r\n        } catch (e: Exception) {\r\n            Timber.e(e, \"Error while fetching message list\")\r\n\r\n            // TODO: Return an error object instead of an empty list\r\n            emptyList()\r\n        }\r\n    }\nimport timber.log.Timber" ],
  "Trail-Sense/780" : [ "            onClickListener = { _, _, item: FolderListItem, _ ->\n                openFolderSettings(item.folderId)\r\n                true", "import com.fsck.k9.ui.R\nimport androidx.navigation.fragment.findNavController\nimport androidx.fragment.app.Fragment\nimport androidx.core.os.bundleOf\nprivate fun openFolderSettings(folderId: Long) {\r\n        val folderSettingsArguments = bundleOf(\r\n            FolderSettingsFragment.EXTRA_ACCOUNT to account.uuid,\r\n            FolderSettingsFragment.EXTRA_FOLDER_ID to folderId,\r\n        )\r\n        findNavController().navigate(R.id.action_manageFoldersScreen_to_folderSettingsScreen, folderSettingsArguments)\r\n    }\nimport androidx.core.os.bundleOf\nimport androidx.fragment.app.Fragment\nimport androidx.navigation.fragment.findNavController\nimport com.fsck.k9.ui.R" ],
  "Neo-Backup/151" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/782" : [ "\n        return getLanguageStringFor(context, actualLanguageCode, R.array.content_languages)\r\n    }", "import com.battlelancer.seriesguide.R\nimport androidx.annotation.ArrayRes\nimport android.content.Context\nprivate fun getLanguageStringFor(\r\n        context: Context, languageCode: String?,\r\n        @ArrayRes languageCodesRes: Int\r\n    ): String {\r\n        val languageCodes = context.resources.getStringArray(languageCodesRes)\r\n        for (i in languageCodes.indices) {\r\n            if (languageCodes[i] == languageCode) {\r\n                return buildLanguageDisplayName(languageCode!!)\r\n            }\r\n        }\r\n\r\n        return context.getString(R.string.unknown)\r\n    }\nimport android.content.Context\nimport androidx.annotation.ArrayRes\nimport com.battlelancer.seriesguide.R" ],
  "Trail-Sense/783" : [ "showsService.sgShow.setShowTmdbId(showTmdbId)\n--------------------------------------------------\nmodel.setShowTmdbId(show.tmdbId)\n--------------------------------------------------\nmodel.setShowTmdbId(sgShow2.tmdbId)", "fun setShowTmdbId(showTmdbId: Int?) {\r\n        if (showTmdbId != null) {\r\n            this.showTmdbId.value = showTmdbId\r\n        }\r\n    }" ],
  "Neo-Backup/154" : [ "        content = {\n            ChipGroup(modifier = Modifier.padding(vertical = 20.dp)) {\r\n                if (list != null) {\n--------------------------------------------------\n        content = {\n            ChipGroup(modifier = Modifier.padding(top = 20.dp, bottom = 20.dp, end = 16.dp)) {\r\n                if (tags.isEmpty()) {", "import com.google.accompanist.flowlayout.FlowRow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ChipGroup(modifier: Modifier = Modifier, content: @Composable () -> Unit) {\r\n    FlowRow(\r\n        mainAxisSpacing = 4.dp,\r\n        crossAxisSpacing = 4.dp,\r\n        modifier = modifier,\r\n    ) {\r\n        content()\r\n    }\r\n}\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport com.google.accompanist.flowlayout.FlowRow" ],
  "Trail-Sense/300" : [ "= getMimeType(fileUri.toUri(), activity)\n--------------------------------------------------\n\t\t\t\t\tput(MediaStore.MediaColumns.IS_PENDING, 1)\n\t\t\t\t\tput(MediaStore.MediaColumns.MIME_TYPE, getMimeType(fileUri.toString()))\r\n\t\t\t\t\tput(MediaStore.MediaColumns.DISPLAY_NAME, fileNameToUse)\n--------------------------------------------------\n\t\treturn if (storedMimeType == null || storedMimeType.isEmpty() || storedMimeType == \"application/octet-stream\") {\n\t\t\tgetMimeType(fileUri, activity)\r\n\t\t} else {\n--------------------------------------------------\n\t\tval extension = MimeTypeMap.getFileExtensionFromUrl(fileUri.toString())\n\t\tval type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension)\r\n\t\tif (type != null) {", "import android.webkit.MimeTypeMap\nimport android.net.Uri\nimport android.content.Context\nfun getMimeType(fileUri: Uri, context: Context): String {\r\n\tval scheme = fileUri.scheme\r\n\tif (\"file\" == scheme) {\r\n\t\tval extension = MimeTypeMap.getFileExtensionFromUrl(fileUri.toString())\r\n\t\tval type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension)\r\n\t\tif (type != null) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t} else if (\"content\" == scheme) {\r\n\t\tval type = context.contentResolver.getType(fileUri)\r\n\t\tif (type != null) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n\treturn \"application/octet-stream\"\r\n}\nimport android.content.Context\nimport android.net.Uri\nimport android.webkit.MimeTypeMap" ],
  "Neo-Backup/155" : [ "model.savePreference(info, newValue)\n--------------------------------------------------\nmodel.savePreference(info, value.toInt())\n--------------------------------------------------\npreferences.savePreference(info, value)\n--------------------------------------------------\npreferences.savePreference(AutoBackup, AutoBackup.emptyPath)\n--------------------------------------------------\npreferences.savePreference(AutoBackup, uri.toString())", "fun savePreference(info: SeekbarInfo, value: Int) {\r\n        editor.putInt(info.key, value)\r\n        editor.commit()\r\n        when (info) {\r\n            MaxItems -> maxItems = getSeekbarPref(MaxItems)\r\n            MaxLines -> maxLines = getSeekbarPref(MaxLines)\r\n            MaxTitle -> maxTitle = getSeekbarPref(MaxTitle)\r\n        }\r\n    }" ],
  "Trail-Sense/785" : [ "override fun onPause() {\n    super.onPause()\n    if (config!!.autosaveNotes) {\n        saveText(false)\n    }\n    removeTextWatcher()\n}", "import com.simplemobiletools.notes.pro.helpers.NotesHelper\nimport com.simplemobiletools.notes.pro.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        NotesHelper(requireActivity()).getNoteWithId(noteId) {\r\n            if (it != null) {\r\n                note = it\r\n                setupFragment()\r\n            }\r\n        }\r\n    }\nImport(names=[com, simplemobiletools, notes, pro, helpers, NotesHelper], wildcard=false, alias=null)" ],
  "Trail-Sense/786" : [ "dialogConfirmed()", "import com.simplemobiletools.commons.models.contacts.Group\nprivate fun dialogConfirmed() {\r\n        val selectedGroups = ArrayList<Group>()\r\n        checkboxes.filter { it.isChecked }.forEach {\r\n            val groupId = it.tag as Long\r\n            groups.firstOrNull { it.id == groupId }?.apply {\r\n                selectedGroups.add(this)\r\n            }\r\n        }\r\n\r\n        callback(selectedGroups)\r\n    }" ],
  "Trail-Sense/787" : [ "", "import org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    EventBus.getDefault().unregister(this);\r\n    if (disposable != null) {\r\n        disposable.dispose();\r\n    }\r\n}" ],
  "Iconify/465" : [ "getColorFromAttribute(context, androidx.appcompat.R.attr.colorPrimary)\n--------------------------------------------------\ngetColorFromAttribute(context, R.attr.sgColorDivider)", "import com.battlelancer.seriesguide.R\nimport androidx.core.content.ContextCompat\nimport androidx.annotation.AttrRes\nimport android.graphics.Color\nimport android.content.Context\n @JvmStatic\r\n    fun getColorFromAttribute(context: Context, @AttrRes attribute: Int): Int {\r\n        return ContextCompat.getColor(\r\n            context,\r\n            resolveAttributeToResourceId(context.theme, attribute)\r\n        )\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[androidx, annotation, AttrRes], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)" ],
  "Iconify/464" : [ "                R.id.action_remove_from_playing_queue -> {\n                    removeFromQueue(layoutPosition)\n                    return true\n--------------------------------------------------\n            adapter.setSongToRemove(songToRemove!!)\n            removeFromQueue(songToRemove!!)\n        }\n--------------------------------------------------\nMusicPlayerRemote.removeFromQueue(songs)", "import code.name.monkey.retromusic.model.Song\n @JvmStatic\n    fun removeFromQueue(song: Song): Boolean {\n        if (musicService != null) {\n            musicService!!.removeSong(song)\n            return true\n        }\n        return false\n    }\nimport code.name.monkey.retromusic.model.Song" ],
  "fcitx5-android/459" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Iconify/463" : [ "getColorFromAttribute(context, androidx.appcompat.R.attr.colorPrimary)\n--------------------------------------------------\ngetColorFromAttribute(context, R.attr.sgColorDivider)", "import com.battlelancer.seriesguide.R\nimport androidx.core.content.ContextCompat\nimport androidx.annotation.AttrRes\nimport android.graphics.Color\nimport android.content.Context\n @JvmStatic\r\n    fun getColorFromAttribute(context: Context, @AttrRes attribute: Int): Int {\r\n        return ContextCompat.getColor(\r\n            context,\r\n            resolveAttributeToResourceId(context.theme, attribute)\r\n        )\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[androidx, annotation, AttrRes], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)" ],
  "Iconify/462" : [ "percentage = getFloatAttribute(ctx!!, attrs!!, \"percentage\", 0f)\n--------------------------------------------------\nprecision = getFloatAttribute(ctx, attrs, \"precision\", 0.01f)\n--------------------------------------------------\nthickness = getFloatAttribute(ctx, attrs, \"thickness\", 0f)\n--------------------------------------------------\ntextSize = getFloatAttribute(ctx, attrs, \"textSize\", defaultTextSize)", "import android.util.AttributeSet\nimport android.content.Context\n @JvmStatic\r\n    fun getFloatAttribute(\r\n        context: Context,\r\n        attrs: AttributeSet,\r\n        name: String,\r\n        defaultValue: Float\r\n    ): Float {\r\n        return try {\r\n            val number = getAttribute(context, attrs, name, null)\r\n            number?.toFloat() ?: defaultValue\r\n        } catch (e: NumberFormatException) {\r\n            defaultValue\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, util, AttributeSet], wildcard=false, alias=null)" ],
  "Iconify/461" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/460" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/164" : [ "                    }\n                    ModalBottomSheet(\r\n                        sheetState = sheetState,\n--------------------------------------------------\n    val anchorChangeHandler = remember(sheetState, scope) {\n        ModalBottomSheetAnchorChangeHandler(\r\n            state = sheetState,\n--------------------------------------------------\n\n    ModalBottomSheetPopup(\r\n        onDismissRequest = {\n--------------------------------------------------\n= ModalBottomSheet(\r\n    onDismissRequest = onDismissRequest,\n--------------------------------------------------\n    val modalBottomSheetWindow = remember {\n        ModalBottomSheetWindow(\r\n            onDismissRequest = onDismissRequest,", "import org.tasks.compose.drawer.SheetValue.Expanded\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@Deprecated(\r\n    message = \"Use ModalBottomSheet overload with windowInset parameter.\",\r\n    level = DeprecationLevel.HIDDEN\r\n)\r\n@Composable\r\n@ExperimentalMaterial3Api\r\nfun ModalBottomSheet(\r\n    onDismissRequest: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    sheetState: SheetState = rememberModalBottomSheetState(),\r\n    shape: Shape = BottomSheetDefaults.ExpandedShape,\r\n    containerColor: Color = BottomSheetDefaults.ContainerColor,\r\n    contentColor: Color = contentColorFor(containerColor),\r\n    tonalElevation: Dp = BottomSheetDefaults.Elevation,\r\n    scrimColor: Color = BottomSheetDefaults.ScrimColor,\r\n    dragHandle: @Composable (() -> Unit)? = { BottomSheetDefaults.DragHandle() },\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) = ModalBottomSheet(\r\n    onDismissRequest = onDismissRequest,\r\n    modifier = modifier,\r\n    sheetState = sheetState,\r\n    shape = shape,\r\n    containerColor = containerColor,\r\n    contentColor = contentColor,\r\n    tonalElevation = tonalElevation,\r\n    scrimColor = scrimColor,\r\n    dragHandle = dragHandle,\r\n    content = content,\r\n)\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.unit.Dp\nimport org.tasks.compose.drawer.SheetValue.Expanded" ],
  "Neo-Backup/161" : [ "                    }\n                    ModalBottomSheet(\r\n                        sheetState = sheetState,\n--------------------------------------------------\n    val anchorChangeHandler = remember(sheetState, scope) {\n        ModalBottomSheetAnchorChangeHandler(\r\n            state = sheetState,\n--------------------------------------------------\n\n    ModalBottomSheetPopup(\r\n        onDismissRequest = {\n--------------------------------------------------\n= ModalBottomSheet(\r\n    onDismissRequest = onDismissRequest,\n--------------------------------------------------\n    val modalBottomSheetWindow = remember {\n        ModalBottomSheetWindow(\r\n            onDismissRequest = onDismissRequest,", "import org.tasks.compose.drawer.SheetValue.Expanded\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@Deprecated(\r\n    message = \"Use ModalBottomSheet overload with windowInset parameter.\",\r\n    level = DeprecationLevel.HIDDEN\r\n)\r\n@Composable\r\n@ExperimentalMaterial3Api\r\nfun ModalBottomSheet(\r\n    onDismissRequest: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    sheetState: SheetState = rememberModalBottomSheetState(),\r\n    shape: Shape = BottomSheetDefaults.ExpandedShape,\r\n    containerColor: Color = BottomSheetDefaults.ContainerColor,\r\n    contentColor: Color = contentColorFor(containerColor),\r\n    tonalElevation: Dp = BottomSheetDefaults.Elevation,\r\n    scrimColor: Color = BottomSheetDefaults.ScrimColor,\r\n    dragHandle: @Composable (() -> Unit)? = { BottomSheetDefaults.DragHandle() },\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) = ModalBottomSheet(\r\n    onDismissRequest = onDismissRequest,\r\n    modifier = modifier,\r\n    sheetState = sheetState,\r\n    shape = shape,\r\n    containerColor = containerColor,\r\n    contentColor = contentColor,\r\n    tonalElevation = tonalElevation,\r\n    scrimColor = scrimColor,\r\n    dragHandle = dragHandle,\r\n    content = content,\r\n)\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.unit.Dp\nimport org.tasks.compose.drawer.SheetValue.Expanded" ],
  "Neo-Backup/162" : [ "// Expand the shortcut\r\nprivate void expandShortcut(String[] shortcuts) {\r\n    int start = Math.min(mContent.getSelectionStart(), mContent.getSelectionEnd());\r\n    int end = Math.max(mContent.getSelectionStart(), mContent.getSelectionEnd());\r\n    String expanded = null;\r\n    String shortcut, shortcut_with_space = null, extra = null;\r\n    String[] params;\r\n    String[] items;\r\n    // Determine the word\r\n    if (start < end) {\r\n        shortcut = mContent.getText().toString().substring(start, end).trim();\r\n        shortcut_with_space = mContent.getText().toString().substring(start, end).trim();\r\n    } else\r\n        shortcut = Utils.getCurrentWord(mContent, start, true);\r\n    // Also try to extract symbols\r\n    if (shortcut.length() == 0)\r\n        shortcut = Utils.getCurrentSnippet(mContent, start, true);\r\n    // Sanity check\r\n    if (shortcut.length() == 0) {\r\n        Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.warn_no_selected_word), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n        Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n        snackbar.show();\r\n        return;\r\n    }\r\n    // If more than a word in the shortcut, the extra words are parameters\r\n    params = shortcut.split(\"\\\\s+\");\r\n    if (params.length > 1) {\r\n        extra = shortcut;\r\n        shortcut = params[0];\r\n        extra = extra.substring(shortcut.length());\r\n    }\r\n    // Get expansion\r\n    for (int i = 0; i < shortcuts.length; i++) {\r\n        // Ignore comments\r\n        if (shortcuts[i].startsWith(Const.COMMENT_SYM))\r\n            continue;\r\n        if (shortcuts[i].toLowerCase(Locale.getDefault()).startsWith(shortcut.toLowerCase(Locale.getDefault()) + Const.SHORTCUTS_DELIMITER)) {\r\n            expanded = shortcuts[i].substring(shortcut.length() + 1);\r\n            break;\r\n        }\r\n        // Consider shortcuts with spaces as well\r\n        if (shortcut_with_space != null) {\r\n            if (shortcuts[i].toLowerCase(Locale.getDefault()).startsWith(shortcut_with_space.toLowerCase(Locale.getDefault()) + Const.SHORTCUTS_DELIMITER)) {\r\n                shortcut = shortcut_with_space;\r\n                expanded = shortcuts[i].substring(shortcut.length() + 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (expanded != null) {\r\n        if (expanded.startsWith(Const.WEBSERVICE_SYM)) {\r\n            // Web service\r\n            // Setup request\r\n            RequestQueue queue = Volley.newRequestQueue(this);\r\n            String url = Utils.toHTTPS(expanded.substring(Const.WEBSERVICE_SYM.length()).trim());\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.encodeStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    url = Utils.replacePattern(url, Const.PARAMETER_SYM, params);\r\n                } else {\r\n                    // Append parameters\r\n                    for (int i = 0; i < params.length; i++) {\r\n                        url += params[i].trim();\r\n                        if (i < (params.length - 1))\r\n                            url += \"&\";\r\n                    }\r\n                }\r\n            }\r\n            // Request a string response from the provided URL.\r\n            StringRequest request = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {\r\n\r\n                @Override\r\n                public void onResponse(String response) {\r\n                    Utils.insert(mContent, response);\r\n                }\r\n            }, new Response.ErrorListener() {\r\n\r\n                @Override\r\n                public void onErrorResponse(VolleyError error) {\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            });\r\n            // Add the request to the RequestQueue.\r\n            queue.add(request);\r\n        } else if (expanded.startsWith(Const.WEBSERVICE_JSON_SYM)) {\r\n            // Web service (JSON)\r\n            // Setup request\r\n            RequestQueue queue = Volley.newRequestQueue(this);\r\n            String url = Utils.toHTTPS(expanded.substring(Const.WEBSERVICE_JSON_SYM.length()).trim());\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                try {\r\n                    // Create JSON object\r\n                    JSONObject json = new JSONObject(extra.replaceAll(\"\\\"\", \"\\\\\\\"\"));\r\n                    // Request a JSON response from the provided URL.\r\n                    JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, url, json, new Response.Listener<JSONObject>() {\r\n\r\n                        @Override\r\n                        public void onResponse(JSONObject response) {\r\n                            try {\r\n                                Utils.insert(mContent, response.toString(mIndentChar.length()));\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                                snackbar.show();\r\n                            }\r\n                        }\r\n                    }, new Response.ErrorListener() {\r\n\r\n                        @Override\r\n                        public void onErrorResponse(VolleyError error) {\r\n                            Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                            Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                            snackbar.show();\r\n                        }\r\n                    });\r\n                    // Add the request to the RequestQueue.\r\n                    queue.add(request);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            } else {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.SHELL_SYM)) {\r\n            // Shell command\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    expanded = Utils.replacePattern(expanded, Const.PARAMETER_SYM, params);\r\n                } else {\r\n                    // Append parameters\r\n                    for (int i = 0; i < params.length; i++) {\r\n                        expanded += \" \" + params[i];\r\n                    }\r\n                }\r\n            }\r\n            ShellExecuter exe = new ShellExecuter();\r\n            expanded = exe.Executer(expanded.substring(Const.SHELL_SYM.length()));\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.REPLACE_SYM)) {\r\n            // Replace command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.REPLACE_SYM.length()).trim();\r\n                // Split the expanded string into 2 parts:\r\n                // 1. Old pattern\r\n                // 2. New pattern\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 2) {\r\n                    if (params[1].contains(Const.SPACE_ENTITY))\r\n                        params[1] = params[1].replaceAll(Const.SPACE_ENTITY, Const.EMPTY_SYM);\r\n                    expanded = extra.replaceAll(params[0], params[1]).trim();\r\n                } else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.SPLIT_SYM)) {\r\n            // Split command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.SPLIT_SYM.length()).trim();\r\n                if (expanded.length() > 0) {\r\n                    items = extra.split(expanded);\r\n                    expanded = TextUtils.join(Const.NEWLINE, items).trim();\r\n                } else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.JOIN_SYM)) {\r\n            // Join command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.JOIN_SYM.length()).trim();\r\n                // Split the expanded string into 2 parts:\r\n                // 1. Old pattern\r\n                // 2. New pattern\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 1) {\r\n                    if (params[0].contains(Const.SPACE_ENTITY))\r\n                        params[0] = params[0].replaceAll(Const.SPACE_ENTITY, Const.EMPTY_SYM);\r\n                    expanded = extra.replaceAll(Const.NEWLINE, params[0]).trim();\r\n                } else if (params.length == 0)\r\n                    expanded = extra.replaceAll(Const.NEWLINE, Const.NULL_SYM).trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.REMOVE_SYM)) {\r\n            // Remove command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.REMOVE_SYM.length()).trim();\r\n                if (expanded.length() > 0)\r\n                    expanded = extra.replaceAll(expanded, \"\").trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.LINEBREAK_SYM)) {\r\n            // Insert line break command\r\n            if (extra != null) {\r\n                expanded = expanded.substring(Const.LINEBREAK_SYM.length()).trim();\r\n                // Replace occurrences of old pattern by line breaks\r\n                params = expanded.split(Const.SHORTCUTS_PATTERN_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (params.length == 1)\r\n                    expanded = extra.replaceAll(params[0], System.getProperty(\"line.separator\")).trim();\r\n                else\r\n                    expanded = null;\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.TRIM_SYM)) {\r\n            // Trim command\r\n            if (extra != null)\r\n                expanded = extra.trim();\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.REMOVE_ZERO_WIDTH_SPACE_SYM)) {\r\n            // Trim command\r\n            if (extra != null)\r\n                try {\r\n                    expanded = Utils.removeZeroWidthSpaces(extra.trim());\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.SORT_SYM)) {\r\n            // Sort command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.sort(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.REVERSE_SORT_SYM)) {\r\n            // Reverse sort command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.rsort(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.ENCODE_SYM)) {\r\n            // Encode command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Base64.encodeToString(extra.getBytes(\"UTF-8\"), Base64.DEFAULT);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.info_cancel_encrypt), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.DECODE_SYM)) {\r\n            // Decode command\r\n            if (extra != null)\r\n                expanded = new String(Base64.decode(extra, Base64.DEFAULT));\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.CAMEL2SNAKE_SYM)) {\r\n            // Camel to snake command\r\n            if (extra != null)\r\n                expanded = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, extra);\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.SNAKE2CAMEL_SYM)) {\r\n            // Snake to camel command\r\n            if (extra != null)\r\n                expanded = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, extra);\r\n            else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.STRIP_HTML_SYM)) {\r\n            // Strip HTML command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.stripHtml(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.TAG_EXPAND_SYM)) {\r\n            // Tag expand command\r\n            if (extra != null) {\r\n                try {\r\n                    expanded = Utils.tagExpand(extra);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.replaceString(mContent, start, end, expanded);\r\n        } else if (expanded.startsWith(Const.MORPH_SYM)) {\r\n            // Morph command\r\n            if ((extra != null) && (extra.length() <= Const.MAX_EXTRA_LEN)) {\r\n                // Get pattern\r\n                expanded = expanded.substring(Const.MORPH_SYM.length()).trim();\r\n                // Remove unsafe specifiers\r\n                expanded = expanded.replace(\"%n\", \"\");\r\n                // Prepare value\r\n                try {\r\n                    extra = extra.trim();\r\n                    if (Utils.isNumeric(extra)) {\r\n                        // Numeric\r\n                        if (Utils.isDecimalNumber(extra))\r\n                            expanded = String.format(Locale.getDefault(), expanded, Double.parseDouble(extra));\r\n                        else\r\n                            expanded = String.format(Locale.getDefault(), expanded, Integer.parseInt(extra));\r\n                    } else if (expanded.contains(\"t\") || expanded.contains(\"T\")) {\r\n                        // Date\r\n                        DateFormat date_format;\r\n                        date_format = android.text.format.DateFormat.getDateFormat(getApplicationContext());\r\n                        expanded = String.format(Locale.getDefault(), expanded, date_format.parse(extra));\r\n                    } else\r\n                        expanded = String.format(Locale.getDefault(), expanded, extra);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    expanded = null;\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else\r\n                Utils.insert(mContent, expanded);\r\n        } else if (expanded.startsWith(Const.LAUNCH_SYM)) {\r\n            // Launch command\r\n            // Retrieve package name\r\n            expanded = expanded.substring(Const.LAUNCH_SYM.length()).trim();\r\n            if (expanded != null) {\r\n                // Launch the package\r\n                if (!Utils.launchPackage(getApplicationContext(), expanded)) {\r\n                    Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                    Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                    snackbar.show();\r\n                }\r\n            } else {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.FUNNEL_SYM)) {\r\n            // Funnel command\r\n            // Show file picker\r\n            handleFunnel();\r\n        } else if (expanded.startsWith(Const.NEEDLE_SYM)) {\r\n            // Needle command\r\n            if (extra != null) {\r\n                // Dynamic criteria\r\n                try {\r\n                    expanded = extra.trim();\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                // Pre-defined criteria\r\n                expanded = expanded.substring(Const.NEEDLE_SYM.length()).trim();\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            } else {\r\n                // \"Consume\" the command\r\n                if (extra == null)\r\n                    Utils.insert(mContent, Const.NULL_SYM);\r\n                else\r\n                    Utils.insert(mContent, extra.trim());\r\n                doSearchNote(expanded);\r\n            }\r\n        } else if (expanded.startsWith(Const.OVERRIDE_SYM)) {\r\n            // Command to temporarily override settings\r\n            // Retrieve settings\r\n            expanded = expanded.substring(Const.OVERRIDE_SYM.length()).trim();\r\n            if (expanded.equals(Const.PREF_SHOW_TOOLBAR)) {\r\n                // Toogle toolbar mode\r\n                mShowToolBar = !mShowToolBar;\r\n                // Show tool bar\r\n                showHideToolBar(true);\r\n                // \"Consume\" the command\r\n                Utils.insert(mContent, Const.NULL_SYM);\r\n                // Show confirmation\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), expanded + \": \" + mShowToolBar, Snackbar.LENGTH_LONG).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.SYNC_SYM)) {\r\n            // Command to send a sync request\r\n            // Send a sync request\r\n            Utils.sendSyncRequest(getApplicationContext(), mLocalRepoPath, mBackupUri);\r\n            // \"Consume\" the command\r\n            Utils.insert(mContent, Const.NULL_SYM);\r\n        } else if (expanded.startsWith(Const.CREATE_NOTE_LINK_SYM)) {\r\n            String title = mTitle.getText().toString();\r\n            String criteria = null;\r\n            if (extra != null) {\r\n                criteria = extra;\r\n            }\r\n            String link = Const.BLANK_LINE + Utils.createNoteLink(title, criteria);\r\n            Utils.setClipboardText(getApplicationContext(), mClipboard, Const.CREATE_NOTE_LINK_SYM, link);\r\n            // Restore the parameter\r\n            Utils.insert(mContent, extra.trim());\r\n            // Show confirmation\r\n            Toast.makeText(getApplicationContext(), Const.CLIPBOARD_SYM + Const.LINK_SYM + Const.SPACE_CHAR + link, Toast.LENGTH_SHORT).show();\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_SNIPPET_SYM)) {\r\n            // Evaluate a JavaScript snippet\r\n            if (extra != null) {\r\n                try {\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, extra, Const.CLI_EVAL_JS_TIMEOUT, true);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_INTERACTIVE_SYM)) {\r\n            // Evaluate JavaScript calls interactively\r\n            if (extra != null) {\r\n                try {\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, extra, Const.CLI_EVAL_JS_TIMEOUT, false);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_INLINE_SYM)) {\r\n            // Evaluate inline based JavaScript\r\n            if (extra != null) {\r\n                try {\r\n                    // Retrieve function declaration\r\n                    expanded = expanded.substring(Const.CLI_EVAL_JS_INLINE_SYM.length()).trim();\r\n                    Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, expanded + extra, Const.CLI_EVAL_JS_TIMEOUT, true);\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else if (expanded.startsWith(Const.CLI_EVAL_JS_FILE_SYM)) {\r\n            // Evaluate file based JavaScript\r\n            if (extra != null) {\r\n                try {\r\n                    // Retrieve function declaration\r\n                    expanded = expanded.substring(Const.CLI_EVAL_JS_FILE_SYM.length()).trim();\r\n                    // Load Javascript\r\n                    List<DBEntry> results = mDatasource.getRecordByTitle(expanded);\r\n                    DBEntry entry;\r\n                    StringBuilder sb = new StringBuilder();\r\n                    if (results.size() == 1) {\r\n                        entry = results.get(0);\r\n                        sb.append(entry.getContent().trim());\r\n                        String script = sb.toString();\r\n                        if (!script.endsWith(\";\"))\r\n                            script += \";\";\r\n                        Utils.cliEvalJS(getApplicationContext(), this, getCoordinatorLayout(), mContent, script + extra, Const.CLI_EVAL_JS_TIMEOUT * 2, true);\r\n                    } else\r\n                        expanded = null;\r\n                } catch (Exception e) {\r\n                    expanded = null;\r\n                    e.printStackTrace();\r\n                }\r\n            } else\r\n                expanded = null;\r\n            if ((expanded == null) || (expanded.length() == 0)) {\r\n                Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_unexpected), Snackbar.LENGTH_SHORT).setAction(getResources().getString(R.string.button_ok), mSnackbarOnClickListener);\r\n                Utils.anchorSnackbar(snackbar, R.id.fragment_content);\r\n                snackbar.show();\r\n            }\r\n        } else {\r\n            // Apply newlines\r\n            expanded = expanded.trim().replaceAll(Const.NEWLINE_ENTITY, System.getProperty(\"line.separator\"));\r\n            // Handle parameters if available\r\n            if (extra != null) {\r\n                params = extra.split(Const.SHORTCUTS_PARAMS_DELIMITER);\r\n                params = Utils.cleanStringArray(params);\r\n                if (expanded.contains(Const.PARAMETER_SYM)) {\r\n                    // Replace parameter placeholders\r\n                    expanded = Utils.replacePattern(expanded, Const.PARAMETER_SYM, params);\r\n                }\r\n            }\r\n            // Evaluate built-in variables\r\n            if (mEvalBuiltInVariables)\r\n                expanded = evalVariables(expanded, false);\r\n            Utils.insert(mContent, expanded);\r\n        }\r\n    } else {\r\n        // Restore selection range\r\n        mContent.setSelection(start, end);\r\n        handleAddShortcut(shortcut);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.os.Build;\r\nimport android.text.Html;\r\nimport android.text.Html\nimport android.os.Build\n// Strip HTML\r\nprotected static String stripHtml(String html) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)\r\n        return Html.fromHtml(html, Html.FROM_HTML_MODE_LEGACY).toString();\r\n    else\r\n        return Html.fromHtml(html).toString();\r\n}" ],
  "Neo-Backup/168" : [ "        withContext(Dispatchers.Main) {\n            progressListener?.onProgressUpdate(total, completed)\r\n        }\n--------------------------------------------------\n\n        onProgressUpdate(numTotal, 0)\r\n\n--------------------------------------------------\n\n            onProgressUpdate(numTotal, ++numExported)\r\n        }", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.content.Context\nprivate suspend fun onProgressUpdate(total: Int, completed: Int) {\r\n        withContext(Dispatchers.Main) {\r\n            progressListener?.onProgressUpdate(total, completed)\r\n        }\r\n    }\nimport android.content.Context\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/310" : [ "            .setDuration(fadeInMillis)\n            .onAnimationStart { isVisible = true }\r\n            .start()\n--------------------------------------------------\n            object : AnimatorListenerAdapter() {\n                override fun onAnimationStart(animation: Animator) {\r\n                    block()", "import android.animation.ObjectAnimator\nimport android.animation.AnimatorListenerAdapter\nimport android.animation.Animator\nprivate inline fun ObjectAnimator.onAnimationStart(crossinline block: () -> Unit): ObjectAnimator {\r\n        addListener(\r\n            object : AnimatorListenerAdapter() {\r\n                override fun onAnimationStart(animation: Animator) {\r\n                    block()\r\n                }\r\n            },\r\n        )\r\n        return this\r\n    }\nimport android.animation.Animator\nimport android.animation.AnimatorListenerAdapter\nimport android.animation.ObjectAnimator" ],
  "Trail-Sense/794" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Trail-Sense/311" : [ "service.stop()\n--------------------------------------------------\nlogcat!!.stop()\n--------------------------------------------------\nmIDebugLogService!!.stop()\n--------------------------------------------------\ncurrentPlayingVisu?.stop()\n--------------------------------------------------\nminiVisualizer.stop()\n--------------------------------------------------\nplaylistModel.stop()\n--------------------------------------------------\nbinding.playing.stop()\n--------------------------------------------------\nholder.binding.playing.stop()\n--------------------------------------------------\nviewModel.stop()\n--------------------------------------------------\nclient.stop()\n--------------------------------------------------\nkeycodeListener.stop()\n--------------------------------------------------\nstop(video = true)\n--------------------------------------------------\nservice?.stop()\n--------------------------------------------------\nplayer.statsDelegate.stop()\n--------------------------------------------------\nmediaplayer.stop()\n--------------------------------------------------\nstop()\n--------------------------------------------------\nplayer.stop()\n--------------------------------------------------\nif (currentIndex != nextIndex) next() else stop()\n--------------------------------------------------\nelse -> stop()\n--------------------------------------------------\nplaybackService.stop()\n--------------------------------------------------\nACTION_REMOTE_STOP -> stop()\n--------------------------------------------------\nif (settings.getBoolean(\"audio_task_removed\", false)) stop()\n--------------------------------------------------\nstop(systemExit = true)\n--------------------------------------------------\nplaylistManager.stop(systemExit, video)\n--------------------------------------------------\nif (isPlaying) stop() else setSleepTimer(null)\n--------------------------------------------------\nsuper.stop()\n--------------------------------------------------\nif (it.connected) start() else stop()\n--------------------------------------------------\ndiscoverer.stop()\n--------------------------------------------------\nprovider.stop()", "import java.util\nimport java.io\nimport android.util.Log\nimport android.app.Service\nfun stop(): Boolean {\r\n            synchronized(this) {\r\n                if (mIDebugLogService != null) {\r\n                    try {\r\n                        mIDebugLogService!!.stop()\r\n                        return true\r\n                    } catch (e: RemoteException) {\r\n                    }\r\n\r\n                }\r\n                return false\r\n            }\r\n        }\nImport(names=[android, app, Service], wildcard=false, alias=null)" ],
  "Trail-Sense/795" : [ "textHistory.getNext()", "fun getNext(): TextHistoryItem? {\r\n        if (position >= history.size) {\r\n            return null\r\n        }\r\n\r\n        val item = history[position]\r\n        position++\r\n        return item\r\n    }" ],
  "Iconify/469" : [ "task.doInBackground()", " @Deprecated(\"Deprecated in Java\")\r\n        override fun doInBackground(vararg params: Void?): Void? {\r\n            if (isCancelled) return null\r\n            task.doInBackground()\r\n            return null\r\n        }" ],
  "Neo-Backup/169" : [ "task.doInBackground()", " @Deprecated(\"Deprecated in Java\")\r\n        override fun doInBackground(vararg params: Void?): Void? {\r\n            if (isCancelled) return null\r\n            task.doInBackground()\r\n            return null\r\n        }" ],
  "Iconify/466" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        writer.beginObject()\r\n        serialiseFields(writer)\r\n        writer.endObject()\r\n    }" ],
  "Trail-Sense/315" : [ "", "import com.google.android.exoplayer2.C\nimport android.app.Notification\noverride fun onNotificationCancelled(notificationId: Int, dismissedByUser: Boolean) {\r\n            stopForeground(true)\r\n            isForegroundService = false\r\n            stopSelf()\r\n        }\nimport android.app.Notification\nimport com.google.android.exoplayer2.C" ],
  "Trail-Sense/317" : [ "                                    if (rc == FilterProvider.REQUEST_NEW_FILTER) {\n                                        NewFilterDialog.newFilterDialog().show(\r\n                                            supportFragmentManager,\n--------------------------------------------------\n        if (preferences.getBoolean(R.string.p_just_updated, false)) {\n            if (preferences.getBoolean(R.string.p_show_whats_new, true)) {\r\n                val fragmentManager = supportFragmentManager\n--------------------------------------------------\n                if (fragmentManager.findFragmentByTag(FRAG_TAG_WHATS_NEW) == null) {\n                    WhatsNewDialog().show(fragmentManager, FRAG_TAG_WHATS_NEW)\r\n                }\n--------------------------------------------------\npd.show()\n--------------------------------------------------\nshow()\n--------------------------------------------------\nshow(fragmentManager, FRAG_TAG_DATE_PICKER)\n--------------------------------------------------\ndialog!!.show()\n--------------------------------------------------\nshow(supportFragmentManager, FRAG_TAG_COLOR_PICKER)\n--------------------------------------------------\nIconPickerDialog.newIconPicker(selectedIcon).show(supportFragmentManager, FRAG_TAG_ICON_PICKER)\n--------------------------------------------------\nshow(supportFragmentManager, FRAG_TAG_DATE_PICKER)\n--------------------------------------------------\nshow(fragmentManager, FRAG_TAG_TIME_PICKER)\n--------------------------------------------------\nToast.makeText(this@MicrosoftAuthenticationActivity, message, LENGTH_LONG).show()\n--------------------------------------------------\nnewSnackbar(message).show()\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_COLOR_PICKER)\n--------------------------------------------------\nbuilder.show()\n--------------------------------------------------\nprogressDialog.show()\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_TIME_PICKER)\n--------------------------------------------------\ndialogBuilder.newDialog().setView(binding.root).show()\n--------------------------------------------------\nToast.makeText(this, it, duration).show()\n--------------------------------------------------\ndialogBuilder.newDialog().setItems(options, listener).show()\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_EXPORT_TASKS)\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_IMPORT_TASKS)\n--------------------------------------------------\nshow(childFragmentManager, FRAG_TAG_SELECT_PICKER)\n--------------------------------------------------\nnewTimePicker(this, requestCode, current.millis).show(parentFragmentManager, FRAG_TAG_TIME_PICKER)\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_THEME_PICKER)\n--------------------------------------------------\nshow(childFragmentManager, FRAG_TAG_FILTER_PICKER)\n--------------------------------------------------\ndialog.show(parentFragmentManager, FRAG_TAG_LOCALE_PICKER)\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_ADD_ACCOUNT)\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_CALENDAR_PICKER)\n--------------------------------------------------\nshow(childFragmentManager, FRAG_TAG_DEFAULT_LIST_SELECTION)\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_BASIC_RECURRENCE)\n--------------------------------------------------\nnewFilterPicker(filter).show(childFragmentManager, FRAG_TAG_FILTER_PICKER)\n--------------------------------------------------\nfragment.show(fragmentManager, FRAG_TAG_NOTIFICATION_FRAGMENT)\n--------------------------------------------------\nfragmentByTag.show(fragmentManager, FRAG_TAG_SNOOZE_DIALOG)\n--------------------------------------------------\ndialog.show(parentFragmentManager, FRAG_TAG_LOCATION_DIALOG)\n--------------------------------------------------\nshow(parentFragmentManager, FRAG_TAG_REQUEST_LOCATION)\n--------------------------------------------------\nshow(fragmentManager, FRAG_TAG_DATE_TIME_PICKER)\n--------------------------------------------------\nshow(supportFragmentManager, FRAG_TAG_FILTER_PICKER)", "import androidx.appcompat.app.AlertDialog\nfun show(): AlertDialog {\r\n        val dialog = create()\r\n        dialog.show()\r\n        return dialog\r\n    }\nimport androidx.appcompat.app.AlertDialog" ],
  "Trail-Sense/318" : [ "Permissions.checkPiPPermission(requireActivity())\n--------------------------------------------------\nPermissions.checkPiPPermission(this)", "import org.videolan.vlc.R\nimport org.videolan.tools.Settings\nimport androidx.fragment.app.FragmentActivity\nimport android.app.Dialog\nimport android.app.Activity\nfun checkPiPPermission(activity: FragmentActivity) {\r\n        if (!isPiPAllowed(activity)) {\r\n            showSettingsPermissionDialog(activity, PERMISSION_PIP)\r\n        }\r\n    }\nImport(names=[androidx, fragment, app, FragmentActivity], wildcard=false, alias=null)" ],
  "Trail-Sense/319" : [ "\n    if (!hasPostNotificationsPermission()) {\r\n      requestPostNotificationsPermission()", "import com.github.ashutoshgngwr.noice.ext.hasSelfPermission\nimport com.github.ashutoshgngwr.noice.R\nimport android.os.Build\nimport android.Manifest\nprivate fun hasPostNotificationsPermission(): Boolean {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n      return requireContext().hasSelfPermission(Manifest.permission.POST_NOTIFICATIONS)\r\n    }\r\n\r\n    return true\r\n  }\nimport android.Manifest\nimport android.os.Build\nimport com.github.ashutoshgngwr.noice.R\nimport com.github.ashutoshgngwr.noice.ext.hasSelfPermission" ],
  "fcitx5-android/458" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "MaterialFiles/769" : [ "@Override\r\npublic void viewOnClose(OnCloseDialogListener listener, boolean b) {\r\n    listener.onClose(this, b);\r\n}\n--------------------------------------------------\nprivate void setupEditText(final Context context, final AttributeSet attrs, TypedArray arr, CharSequence defaultValue) {\r\n    mInputType = arr.getInt(R.styleable.TitleSpinner_android_inputType, EditorInfo.TYPE_CLASS_NUMBER | EditorInfo.TYPE_NUMBER_FLAG_DECIMAL);\r\n    setValueWithoutSave(defaultValue);\r\n    final EditText edit = new EditText(context, attrs);\r\n    mSpin.setViewOnClickListener(v -> {\r\n        edit.setText(mSpin.getViewValueText());\r\n        edit.setInputType(mInputType);\r\n        edit.setMinimumHeight(48);\r\n        edit.setMinimumWidth(148);\r\n        if (edit.getParent() != null) {\r\n            ((LinearLayout) edit.getParent()).removeView(edit);\r\n        }\r\n        final LinearLayout layout = createLayout(context);\r\n        layout.addView(edit);\r\n        new AlertDialog.Builder(context).setTitle(mLabel).setView(layout).setPositiveButton(org.runnerup.common.R.string.OK, (dialog, whichButton) -> {\r\n            setValue(edit.getText().toString());\r\n            dialog.dismiss();\r\n            layout.removeView(edit);\r\n            onClose(true);\r\n        }).setNegativeButton(org.runnerup.common.R.string.Cancel, (dialog, whichButton) -> {\r\n            dialog.dismiss();\r\n            layout.removeView(edit);\r\n            onClose(false);\r\n        }).show();\r\n    });\r\n}\n--------------------------------------------------\n", "private void onClose(boolean b) {\r\n    if (mCloseDialogListener != null) {\r\n        mSpin.viewOnClose(mCloseDialogListener, b);\r\n    }\r\n}" ],
  "Iconify/835" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/834" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/831" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "BCR/129" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport com.appmindlab.nano.R.layout.canvas\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (canvas_mode.isChecked())\r\n        handleCanvasStroke();\r\n}" ],
  "Iconify/838" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/85" : [ "                        ListErrorView(stringResource(id = R.string.BalanceSyncError_Title)) {\n                            viewModel.retry()\r\n                            chartViewModel.refresh()\n--------------------------------------------------\nviewModel.retry()\n--------------------------------------------------\nretry()", "import io.horizontalsystems.bankwallet.entities.ViewState\nfun retry() {\r\n        viewState = ViewState.Loading\r\n        loadContent()\r\n    }\nimport io.horizontalsystems.bankwallet.entities.ViewState" ],
  "Iconify/837" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/122" : [ "            } else {\n                actionBuilder.createViewFolderListPendingIntent(account)\r\n            }\n--------------------------------------------------\n        return mock {\n            on { createViewFolderListPendingIntent(any()) } doReturn contentIntent\r\n            on { createViewFolderPendingIntent(any(), anyLong()) } doReturn contentIntent", "import com.fsck.k9.helper.PendingIntentCompat.FLAG_IMMUTABLE\nimport com.fsck.k9.activity.MessageList\nimport com.fsck.k9.Account\nimport android.content.Intent\nimport android.app.PendingIntent.FLAG_UPDATE_CURRENT\nimport android.app.PendingIntent\noverride fun createViewFolderListPendingIntent(account: Account): PendingIntent {\r\n        val intent = createMessageListIntent(account)\r\n        return PendingIntent.getActivity(context, 0, intent, FLAG_UPDATE_CURRENT or FLAG_IMMUTABLE)\r\n    }\nimport android.app.PendingIntent\nimport android.app.PendingIntent.FLAG_UPDATE_CURRENT\nimport android.content.Intent\nimport com.fsck.k9.Account\nimport com.fsck.k9.activity.MessageList\nimport com.fsck.k9.helper.PendingIntentCompat.FLAG_IMMUTABLE" ],
  "BCR/121" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/777" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "MaterialFiles/84" : [ "            if (result.values.all { it }) {\n                viewModel.loadCalendars()\r\n            }", "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nfun loadCalendars() {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            _viewState.update { it.copy(calendars = calendarProvider.calendars) }\r\n        }\r\n    }\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch" ],
  "MaterialFiles/83" : [ "{\r\n        super.onCreate(savedInstanceState)\r\n        theme.applyTheme(this)\r\n        window.statusBarColor = ContextCompat.getColor(this, android.R.color.transparent)\r\n        val binding = ActivityLocationPickerBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        toolbar = binding.toolbar\r\n        appBarLayout = binding.appBarLayout\r\n        toolbarLayout = binding.collapsingToolbarLayout\r\n        coordinatorLayout = binding.coordinator\r\n        searchView = binding.search.apply {\r\n            setOnClickListener { searchPlace() }\r\n        }\r\n        loadingIndicator = binding.loadingIndicator\r\n        chooseRecentLocation = binding.chooseRecentLocation\r\n        recyclerView = binding.recentLocations\r\n        val configuration = resources.configuration\r\n        if (configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\r\n                && configuration.smallestScreenWidthDp < 480) {\r\n            searchView.visibility = View.GONE\r\n        }\r\n        val currentPlace: Place? = intent.getParcelableExtra(EXTRA_PLACE)\r\n        if (savedInstanceState == null) {\r\n            mapPosition = currentPlace?.mapPosition ?: intent.getParcelableExtra(EXTRA_MAP_POSITION)\r\n        } else {\r\n            mapPosition = savedInstanceState.getParcelable(EXTRA_MAP_POSITION)\r\n            offset = savedInstanceState.getInt(EXTRA_APPBAR_OFFSET)\r\n            viewModel.restoreState(savedInstanceState)\r\n        }\r\n        toolbar.setNavigationIcon(R.drawable.ic_outline_arrow_back_24px)\r\n        toolbar.setNavigationOnClickListener { collapseToolbar() }\r\n        toolbar.inflateMenu(R.menu.menu_location_picker)\r\n        val menu = toolbar.menu\r\n        search = menu.findItem(R.id.menu_search)\r\n        search.setOnActionExpandListener(this)\r\n        toolbar.setOnMenuItemClickListener(this)\r\n        val themeColor = theme.themeColor\r\n        themeColor.applyToNavigationBar(this)\r\n        val dark = preferences.mapTheme == 2\r\n                || preferences.mapTheme == 0 && theme.themeBase.isDarkTheme(this)\r\n        map.init(this, this, dark)\r\n        val params = appBarLayout.layoutParams as CoordinatorLayout.LayoutParams\r\n        val behavior = AppBarLayout.Behavior()\r\n        behavior.setDragCallback(\r\n                object : DragCallback() {\r\n                    override fun canDrag(appBarLayout: AppBarLayout): Boolean {\r\n                        return false\r\n                    }\r\n                })\r\n        params.behavior = behavior\r\n        appBarLayout.addOnOffsetChangedListener { appBarLayout: AppBarLayout, offset: Int ->\r\n            if (offset == 0 && this.offset != 0) {\r\n                closeSearch()\r\n                hideKeyboard()\r\n            }\r\n            this.offset = offset\r\n            toolbar.alpha = abs(offset / appBarLayout.totalScrollRange.toFloat())\r\n        }\r\n        coordinatorLayout.addOnLayoutChangeListener(\r\n                object : View.OnLayoutChangeListener {\r\n                    override fun onLayoutChange(\r\n                            v: View, l: Int, t: Int, r: Int, b: Int, ol: Int, ot: Int, or: Int, ob: Int) {\r\n                        coordinatorLayout.removeOnLayoutChangeListener(this)\r\n                        locationDao\r\n                                .getPlaceUsage()\r\n                                .observe(this@LocationPickerActivity) {\r\n                                    places: List<PlaceUsage> -> updatePlaces(places)\r\n                                }\r\n                    }\r\n                })\r\n        if (offset != 0) {\r\n            appBarLayout.post { expandToolbar(false) }\r\n        }\r\n        findViewById<View>(R.id.google_marker).visibility = View.VISIBLE\r\n        searchAdapter = LocationSearchAdapter(viewModel.getAttributionRes(dark), this)\r\n        recentsAdapter = LocationPickerAdapter(this, inventory, colorProvider, this)\r\n        recentsAdapter!!.setHasStableIds(true)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        recyclerView.adapter = if (search.isActionViewExpanded) searchAdapter else recentsAdapter\r\n\r\n        binding.currentLocation.setOnClickListener { currentLocation() }\r\n        binding.selectThisLocation.setOnClickListener { selectLocation() }\r\n    }", "override fun onDestroy() {\r\n        super.onDestroy()\r\n        map.onDestroy()\r\n    }" ],
  "MaterialFiles/82" : [ "{\r\n        super.onCreate(savedInstanceState)\r\n        theme.applyTheme(this)\r\n        window.statusBarColor = ContextCompat.getColor(this, android.R.color.transparent)\r\n        val binding = ActivityLocationPickerBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        toolbar = binding.toolbar\r\n        appBarLayout = binding.appBarLayout\r\n        toolbarLayout = binding.collapsingToolbarLayout\r\n        coordinatorLayout = binding.coordinator\r\n        searchView = binding.search.apply {\r\n            setOnClickListener { searchPlace() }\r\n        }\r\n        loadingIndicator = binding.loadingIndicator\r\n        chooseRecentLocation = binding.chooseRecentLocation\r\n        recyclerView = binding.recentLocations\r\n        val configuration = resources.configuration\r\n        if (configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\r\n                && configuration.smallestScreenWidthDp < 480) {\r\n            searchView.visibility = View.GONE\r\n        }\r\n        val currentPlace: Place? = intent.getParcelableExtra(EXTRA_PLACE)\r\n        if (savedInstanceState == null) {\r\n            mapPosition = currentPlace?.mapPosition ?: intent.getParcelableExtra(EXTRA_MAP_POSITION)\r\n        } else {\r\n            mapPosition = savedInstanceState.getParcelable(EXTRA_MAP_POSITION)\r\n            offset = savedInstanceState.getInt(EXTRA_APPBAR_OFFSET)\r\n            viewModel.restoreState(savedInstanceState)\r\n        }\r\n        toolbar.setNavigationIcon(R.drawable.ic_outline_arrow_back_24px)\r\n        toolbar.setNavigationOnClickListener { collapseToolbar() }\r\n        toolbar.inflateMenu(R.menu.menu_location_picker)\r\n        val menu = toolbar.menu\r\n        search = menu.findItem(R.id.menu_search)\r\n        search.setOnActionExpandListener(this)\r\n        toolbar.setOnMenuItemClickListener(this)\r\n        val themeColor = theme.themeColor\r\n        themeColor.applyToNavigationBar(this)\r\n        val dark = preferences.mapTheme == 2\r\n                || preferences.mapTheme == 0 && theme.themeBase.isDarkTheme(this)\r\n        map.init(this, this, dark)\r\n        val params = appBarLayout.layoutParams as CoordinatorLayout.LayoutParams\r\n        val behavior = AppBarLayout.Behavior()\r\n        behavior.setDragCallback(\r\n                object : DragCallback() {\r\n                    override fun canDrag(appBarLayout: AppBarLayout): Boolean {\r\n                        return false\r\n                    }\r\n                })\r\n        params.behavior = behavior\r\n        appBarLayout.addOnOffsetChangedListener { appBarLayout: AppBarLayout, offset: Int ->\r\n            if (offset == 0 && this.offset != 0) {\r\n                closeSearch()\r\n                hideKeyboard()\r\n            }\r\n            this.offset = offset\r\n            toolbar.alpha = abs(offset / appBarLayout.totalScrollRange.toFloat())\r\n        }\r\n        coordinatorLayout.addOnLayoutChangeListener(\r\n                object : View.OnLayoutChangeListener {\r\n                    override fun onLayoutChange(\r\n                            v: View, l: Int, t: Int, r: Int, b: Int, ol: Int, ot: Int, or: Int, ob: Int) {\r\n                        coordinatorLayout.removeOnLayoutChangeListener(this)\r\n                        locationDao\r\n                                .getPlaceUsage()\r\n                                .observe(this@LocationPickerActivity) {\r\n                                    places: List<PlaceUsage> -> updatePlaces(places)\r\n                                }\r\n                    }\r\n                })\r\n        if (offset != 0) {\r\n            appBarLayout.post { expandToolbar(false) }\r\n        }\r\n        findViewById<View>(R.id.google_marker).visibility = View.VISIBLE\r\n        searchAdapter = LocationSearchAdapter(viewModel.getAttributionRes(dark), this)\r\n        recentsAdapter = LocationPickerAdapter(this, inventory, colorProvider, this)\r\n        recentsAdapter!!.setHasStableIds(true)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        recyclerView.adapter = if (search.isActionViewExpanded) searchAdapter else recentsAdapter\r\n\r\n        binding.currentLocation.setOnClickListener { currentLocation() }\r\n        binding.selectThisLocation.setOnClickListener { selectLocation() }\r\n    }", "override fun onDestroy() {\r\n        super.onDestroy()\r\n        map.onDestroy()\r\n    }" ],
  "MaterialFiles/80" : [ "{\r\n        super.onCreate(savedInstanceState)\r\n        theme.applyTheme(this)\r\n        window.statusBarColor = ContextCompat.getColor(this, android.R.color.transparent)\r\n        val binding = ActivityLocationPickerBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        toolbar = binding.toolbar\r\n        appBarLayout = binding.appBarLayout\r\n        toolbarLayout = binding.collapsingToolbarLayout\r\n        coordinatorLayout = binding.coordinator\r\n        searchView = binding.search.apply {\r\n            setOnClickListener { searchPlace() }\r\n        }\r\n        loadingIndicator = binding.loadingIndicator\r\n        chooseRecentLocation = binding.chooseRecentLocation\r\n        recyclerView = binding.recentLocations\r\n        val configuration = resources.configuration\r\n        if (configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\r\n                && configuration.smallestScreenWidthDp < 480) {\r\n            searchView.visibility = View.GONE\r\n        }\r\n        val currentPlace: Place? = intent.getParcelableExtra(EXTRA_PLACE)\r\n        if (savedInstanceState == null) {\r\n            mapPosition = currentPlace?.mapPosition ?: intent.getParcelableExtra(EXTRA_MAP_POSITION)\r\n        } else {\r\n            mapPosition = savedInstanceState.getParcelable(EXTRA_MAP_POSITION)\r\n            offset = savedInstanceState.getInt(EXTRA_APPBAR_OFFSET)\r\n            viewModel.restoreState(savedInstanceState)\r\n        }\r\n        toolbar.setNavigationIcon(R.drawable.ic_outline_arrow_back_24px)\r\n        toolbar.setNavigationOnClickListener { collapseToolbar() }\r\n        toolbar.inflateMenu(R.menu.menu_location_picker)\r\n        val menu = toolbar.menu\r\n        search = menu.findItem(R.id.menu_search)\r\n        search.setOnActionExpandListener(this)\r\n        toolbar.setOnMenuItemClickListener(this)\r\n        val themeColor = theme.themeColor\r\n        themeColor.applyToNavigationBar(this)\r\n        val dark = preferences.mapTheme == 2\r\n                || preferences.mapTheme == 0 && theme.themeBase.isDarkTheme(this)\r\n        map.init(this, this, dark)\r\n        val params = appBarLayout.layoutParams as CoordinatorLayout.LayoutParams\r\n        val behavior = AppBarLayout.Behavior()\r\n        behavior.setDragCallback(\r\n                object : DragCallback() {\r\n                    override fun canDrag(appBarLayout: AppBarLayout): Boolean {\r\n                        return false\r\n                    }\r\n                })\r\n        params.behavior = behavior\r\n        appBarLayout.addOnOffsetChangedListener { appBarLayout: AppBarLayout, offset: Int ->\r\n            if (offset == 0 && this.offset != 0) {\r\n                closeSearch()\r\n                hideKeyboard()\r\n            }\r\n            this.offset = offset\r\n            toolbar.alpha = abs(offset / appBarLayout.totalScrollRange.toFloat())\r\n        }\r\n        coordinatorLayout.addOnLayoutChangeListener(\r\n                object : View.OnLayoutChangeListener {\r\n                    override fun onLayoutChange(\r\n                            v: View, l: Int, t: Int, r: Int, b: Int, ol: Int, ot: Int, or: Int, ob: Int) {\r\n                        coordinatorLayout.removeOnLayoutChangeListener(this)\r\n                        locationDao\r\n                                .getPlaceUsage()\r\n                                .observe(this@LocationPickerActivity) {\r\n                                    places: List<PlaceUsage> -> updatePlaces(places)\r\n                                }\r\n                    }\r\n                })\r\n        if (offset != 0) {\r\n            appBarLayout.post { expandToolbar(false) }\r\n        }\r\n        findViewById<View>(R.id.google_marker).visibility = View.VISIBLE\r\n        searchAdapter = LocationSearchAdapter(viewModel.getAttributionRes(dark), this)\r\n        recentsAdapter = LocationPickerAdapter(this, inventory, colorProvider, this)\r\n        recentsAdapter!!.setHasStableIds(true)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        recyclerView.adapter = if (search.isActionViewExpanded) searchAdapter else recentsAdapter\r\n\r\n        binding.currentLocation.setOnClickListener { currentLocation() }\r\n        binding.selectThisLocation.setOnClickListener { selectLocation() }\r\n    }", "override fun onDestroy() {\r\n        super.onDestroy()\r\n        map.onDestroy()\r\n    }" ],
  "Iconify/846" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/845" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/774" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/773" : [ "delegate.close()\n--------------------------------------------------\nclose()\n--------------------------------------------------\nsuper.close()\n--------------------------------------------------\nlockChannel?.close()", "override fun close() {\r\n        if (lazyDelegate.isInitialized()) {\r\n            delegate.close()\r\n        }\r\n    }" ],
  "Iconify/842" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "BCR/139" : [ "                android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU &&\n                    this.checkPermissions(Manifest.permission.POST_NOTIFICATIONS)\r\n            }", "import com.kickstarter.R\nimport androidx.core.content.ContextCompat\nimport android.content.pm.PackageManager\nimport android.content.Context\nfun Context.checkPermissions(permission: String): Boolean {\r\n    return ContextCompat.checkSelfPermission(\r\n        this,\r\n        permission\r\n    ) == PackageManager.PERMISSION_DENIED\r\n}\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport androidx.core.content.ContextCompat\nimport com.kickstarter.R" ],
  "BCR/138" : [ "                            .replace(R.id.detail, newEmptyTaskEditFragment())\n                            .runOnCommit {\r\n                                if (isSinglePaneLayout) {\n--------------------------------------------------\n                        .replace(R.id.detail, newTaskEditFragment(task), FRAG_TAG_TASK_EDIT)\n                        .runOnCommit {\r\n                            if (isSinglePaneLayout) {\n--------------------------------------------------\n                    .replace(R.id.master, tlf, FRAG_TAG_TASK_LIST)\n                    .runOnCommit { updateSystemBars(newFilter) }\r\n                    .commit()\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(account).createGtaskList(name)!!\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).deleteGtaskList(list.uuid)\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).renameGtaskList(list.uuid, name)!!\n}\n--------------------------------------------------\ngetEmail(authState.accessToken) ?: run {\n    error(\"Failed to fetch profile\")\n    return@launch\n}\n--------------------------------------------------\nrun {\n    clientProvider.forUrl(url, username, password, foreground = true).getSession()\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).makeCollection(name, color)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).deleteCollection(calendar)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).updateCollection(calendar, name, color)\n}\n--------------------------------------------------\nrun {\n    if (isNullOrEmpty(pass)) {\n        clientProvider.forUrl(url, user, null, session, true).getSession()\n    } else {\n        clientProvider.forUrl(url, user, pass, foreground = true).getSession()\n    }\n}\n--------------------------------------------------\nrun()\n--------------------------------------------------\nthrottle.run {\n    notificationManagerCompat.notify(id, notification)\n}", "protected suspend fun run(action: suspend () -> Unit) {\r\n        if (!inProgress) {\r\n            inProgress = true\r\n            try {\r\n                action()\r\n                completed.value = true\r\n            } catch (e: Exception) {\r\n                error.value = e\r\n            }\r\n            inProgress = false\r\n        }\r\n    }" ],
  "fcitx5-android/92" : [ "", "import java.io.File\nimport android.database.sqlite.SQLiteDatabase\noverride fun open(file: File): AndroidDatabase {\r\n        return AndroidDatabase(\r\n            db = SQLiteDatabase.openDatabase(\r\n                file.absolutePath,\r\n                null,\r\n                SQLiteDatabase.OPEN_READWRITE\r\n            ),\r\n            file = file\r\n        )\r\n    }\nImport(names=[android, database, sqlite, SQLiteDatabase], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "Iconify/849" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/96" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/848" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/130" : [ "override fun onDestroy() {\n    super.onDestroy()\n    localBroadcastManager.unregisterReceiver(refreshReceiver)\n    job.cancel()\n}", "import org.tasks.R\noverride fun onCreate() {\r\n        super.onCreate()\r\n        localBroadcastManager.registerRefreshReceiver(refreshReceiver)\r\n    }" ],
  "BCR/137" : [ "{\n        val account = preferences.getAccount(accountUuid) ?: error(\"Account $accountUuid not found\")\r\n\n--------------------------------------------------\ncontext = get()\n--------------------------------------------------\ndefaultFolderProvider = get()\n--------------------------------------------------\nmessageStoreManager = get()\n--------------------------------------------------\nget()\n--------------------------------------------------\nresourceProvider = get()\n--------------------------------------------------\ncontactRepository = get()\n--------------------------------------------------\nalarmManager = get()\n--------------------------------------------------\ncontentResolver = get()\n--------------------------------------------------\nprocessExecutor = get()\n--------------------------------------------------\nDI.get(Context::class.java)\n--------------------------------------------------\ncolumnMap?.get(flag)\n--------------------------------------------------\nDI.get<MessageListRepository>()\n--------------------------------------------------\ndisplayHtmlFactory = get()\n--------------------------------------------------\nsystemConnectivityManager = get()\n--------------------------------------------------\nsystemPowerManager = get()\n--------------------------------------------------\nlocalStoreProvider = get()\n--------------------------------------------------\nstorageManager = get()\n--------------------------------------------------\nbasicPartInfoExtractor = get()\n--------------------------------------------------\nmessageViewInfoExtractorFactory = get()\n--------------------------------------------------\nhtmlSettingsProvider = get()\n--------------------------------------------------\nthemeManager = get()\n--------------------------------------------------\nletterExtractor = get()\n--------------------------------------------------\nconfig = get()\n--------------------------------------------------\ncontactLetterBitmapCreator = get()\n--------------------------------------------------\ncontactPhotoLoader = get()\n--------------------------------------------------\naccountManager = get()\n--------------------------------------------------\nmessageCountsProvider = get()\n--------------------------------------------------\nmessageListRepository = get()\n--------------------------------------------------\naccountFallbackImageProvider = get()\n--------------------------------------------------\nappCoroutineScope = get(named(\"AppCoroutineScope\"))\n--------------------------------------------------\ngeneralSettingsManager = get()\n--------------------------------------------------\nchangeLogManager = get()\n--------------------------------------------------\nresources = get()\n--------------------------------------------------\nfolderRepository = get()\n--------------------------------------------------\nget<DisplayHtmlUiFactory>().createForMessageView()\n--------------------------------------------------\ntextPartFinder = get()\n--------------------------------------------------\nquoteDateFormatter = get()\n--------------------------------------------------\nclipboardManager = get()\n--------------------------------------------------\npreferences = get()\n--------------------------------------------------\nmessagingController = get()\n--------------------------------------------------\nmessageRepository = get()\n--------------------------------------------------\ncontactNameProvider = get()\n--------------------------------------------------\nViewConfiguration.get(context)\n--------------------------------------------------\nclock = get()\n--------------------------------------------------\nreplyRoParser = get()\n--------------------------------------------------\nmessageHelper = get()", "override fun get(index: Int): Char {\r\n        require(index in 0..(length - 1)) { \"index: $index; length: $length\" }\r\n\r\n        var offset = index\r\n        for (i in 0..(segments.size - 1)) {\r\n            val segment = segments[i]\r\n            val segmentLength = segment.endIndex - segment.startIndex\r\n            if (offset < segmentLength) {\r\n                return text[segment.startIndex + offset]\r\n            }\r\n            offset -= segmentLength\r\n        }\r\n\r\n        throw AssertionError()\r\n    }" ],
  "BCR/136" : [ "discover(it)\n--------------------------------------------------\nmedialibrary.discover(AndroidDevices.EXTERNAL_PUBLIC_DIRECTORY)\n--------------------------------------------------\nmedialibrary.discover(folder)\n--------------------------------------------------\nmedialibrary.discover(action.path)", "private fun discover(path: String) {\r\n        if (path.isEmpty()) {\r\n            exitCommand()\r\n            return\r\n        }\r\n        actions.trySend(DiscoverFolder(path))\r\n    }" ],
  "MaterialFiles/55" : [ "initialize()\n--------------------------------------------------\ninitialize(context)", "import org.videolan.vlc.R\nimport androidx.core.content.ContextCompat\nimport android.os.Build\nimport android.content.Context\nprivate fun initialize() {\r\n\r\n        //The custom drawable looks not great for kitkat. So we use the default one to mitigate the issue\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            progressDrawable = ContextCompat.getDrawable(context, R.drawable.po_seekbar)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)\nImport(names=[org, videolan, vlc, R], wildcard=false, alias=null)" ],
  "MaterialFiles/54" : [ "                setPushNotificationState(WAIT_BACKGROUND_SYNC)\n                startServices()\r\n            }\n--------------------------------------------------\n                setPushNotificationState(WAIT_NETWORK)\n                startServices()\r\n            }\n--------------------------------------------------\n                setPushNotificationState(LISTENING)\n                startServices()\r\n            }\n--------------------------------------------------\nstartService()\n--------------------------------------------------\ncontext.startService(intent)", "import timber.log.Timber\nimport android.os.Build\nimport android.content.Intent\nprivate fun startService() {\r\n        try {\r\n            val intent = Intent(context, PushService::class.java)\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                context.startForegroundService(intent)\r\n            } else {\r\n                context.startService(intent)\r\n            }\r\n        } catch (e: Exception) {\r\n            Timber.e(e, \"Exception while trying to start PushService\")\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Iconify/813" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/812" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/816" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/815" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/48" : [ "getIntentTemplateFlags()", "import android.os.Build\nimport android.content.Intent\nimport android.app.PendingIntent.FLAG_MUTABLE\nprivate fun getIntentTemplateFlags(): Int {\r\n        var flags = 0\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\r\n            flags = flags or FLAG_MUTABLE\r\n        }\r\n        return flags\r\n    }\nImport(names=[android, app, PendingIntent, FLAG_MUTABLE], wildcard=false, alias=null)\nImport(names=[android, os, Build], wildcard=false, alias=null)" ],
  "BCR/102" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/104" : [ "", "import android.database.sqlite.SQLiteDatabase;\r\nimport it.feio.android.omninotes.exceptions.DatabaseException;\r\nimport it.feio.android.omninotes.helpers.LogDelegate;\r\nimport java.io.IOException;\r\nimport java.io.IOException\nimport it.feio.android.omninotes.helpers.LogDelegate\nimport it.feio.android.omninotes.exceptions.DatabaseException\nimport android.database.sqlite.SQLiteDatabase\n@Override\r\npublic void onCreate(SQLiteDatabase db) {\r\n    try {\r\n        LogDelegate.i(\"Database creation\");\r\n        execSqlFile(CREATE_QUERY, db);\r\n    } catch (IOException e) {\r\n        throw new DatabaseException(\"Database creation failed: \" + e.getMessage(), e);\r\n    }\r\n}" ],
  "BCR/103" : [ "getXRate(token)?.multiply(it)", "import java.math.BigDecimal\nimport io.horizontalsystems.marketkit.models.Token\nprivate fun getXRate(token: Token): BigDecimal? {\r\n        val currency = currencyManager.baseCurrency\r\n        return marketKit.coinPrice(token.coin.uid, currency.code)?.let {\r\n            if (it.expired) {\r\n                null\r\n            } else {\r\n                it.value\r\n            }\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, marketkit, models, Token], wildcard=false, alias=null)\nImport(names=[java, math, BigDecimal], wildcard=false, alias=null)" ],
  "MaterialFiles/66" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/318" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        return if (other is AudioFileCover) {\n            other.filePath == filePath\n        } else false\n    }" ],
  "MaterialFiles/63" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/61" : [ "        var mFile = file\n        mFile = tryGetCanonicalFile(mFile) // important as we compare the path value later\n        if (mFile.isDirectory) {\n--------------------------------------------------\n                    Crumb(\n                        tryGetCanonicalFile(startDirectory)\n                    ),", "import java.io.IOException\nimport java.io.File\nprivate fun tryGetCanonicalFile(file: File): File {\n            return try {\n                file.canonicalFile\n            } catch (e: IOException) {\n                e.printStackTrace()\n                file\n            }\n        }\nimport java.io.File\nimport java.io.IOException" ],
  "MaterialFiles/60" : [ "                            .replace(R.id.detail, newEmptyTaskEditFragment())\n                            .runOnCommit {\r\n                                if (isSinglePaneLayout) {\n--------------------------------------------------\n                        .replace(R.id.detail, newTaskEditFragment(task), FRAG_TAG_TASK_EDIT)\n                        .runOnCommit {\r\n                            if (isSinglePaneLayout) {\n--------------------------------------------------\n                    .replace(R.id.master, tlf, FRAG_TAG_TASK_LIST)\n                    .runOnCommit { updateSystemBars(newFilter) }\r\n                    .commit()\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(account).createGtaskList(name)!!\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).deleteGtaskList(list.uuid)\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).renameGtaskList(list.uuid, name)!!\n}\n--------------------------------------------------\ngetEmail(authState.accessToken) ?: run {\n    error(\"Failed to fetch profile\")\n    return@launch\n}\n--------------------------------------------------\nrun {\n    clientProvider.forUrl(url, username, password, foreground = true).getSession()\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).makeCollection(name, color)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).deleteCollection(calendar)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).updateCollection(calendar, name, color)\n}\n--------------------------------------------------\nrun {\n    if (isNullOrEmpty(pass)) {\n        clientProvider.forUrl(url, user, null, session, true).getSession()\n    } else {\n        clientProvider.forUrl(url, user, pass, foreground = true).getSession()\n    }\n}\n--------------------------------------------------\nrun()\n--------------------------------------------------\nthrottle.run {\n    notificationManagerCompat.notify(id, notification)\n}", "import timber.log.Timber\nprotected suspend fun run(callable: suspend () -> T) {\r\n        if (!inProgress) {\r\n            inProgress = true\r\n            try {\r\n                data.postValue(callable())\r\n            } catch (e: Exception) {\r\n                Timber.e(e)\r\n                error.postValue(e)\r\n            }\r\n            inProgress = false\r\n        }\r\n    }\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Iconify/824" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/823" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/312" : [ "                    ?.uri\n                    ?: getDefaultFileLocation(name)?.let { Uri.fromFile(it) }", "import java.io.File\nprivate fun getDefaultFileLocation(type: String): File? {\r\n        val externalFilesDir = context.getExternalFilesDir(null) ?: return null\r\n        val path = String.format(\"%s/%s\", externalFilesDir.absolutePath, type)\r\n        val file = File(path)\r\n        return if (file.isDirectory || file.mkdirs()) file else null\r\n    }\nimport java.io.File" ],
  "Iconify/820" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "BCR/117" : [ "showSnackbar(getString(R.string.hexagon_signin_fail_format, it))", "import com.google.android.material.snackbar.Snackbar\nimport android.view.View\nprivate fun showSnackbar(message: CharSequence) {\r\n        dismissSnackbar()\r\n        snackbar = Snackbar.make(requireView(), message, Snackbar.LENGTH_INDEFINITE).also {\r\n            it.show()\r\n        }\r\n    }\nImport(names=[com, google, android, material, snackbar, Snackbar], wildcard=false, alias=null)" ],
  "BCR/116" : [ "", "import com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.presentation.main.MainActivity\nimport androidx.glance.action.ActionParameters\nimport androidx.glance.GlanceId\nimport androidx.core.net.toUri\nimport android.content.Intent\nimport android.content.Context\noverride suspend fun onAction(context: Context, glanceId: GlanceId, parameters: ActionParameters) {\r\n        val intent = Intent(\r\n            Intent.ACTION_VIEW,\r\n            \"${Constants.TASKS_SCREEN_URI}/true\".toUri(),\r\n            context,\r\n            MainActivity::class.java\r\n        ).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        context.startActivity(intent)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, glance, GlanceId], wildcard=false, alias=null)\nImport(names=[androidx, glance, action, ActionParameters], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, presentation, main, MainActivity], wildcard=false, alias=null)" ],
  "BCR/119" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Verify storage permission\r\n    verifyStoragePermission();\r\n    // Verify notification permission\r\n    verifyNotificationPermission();\r\n    ////////////////\r\n    // Setup theme\r\n    ////////////////\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    ///////////////////////////\r\n    // Setup main application\r\n    ///////////////////////////\r\n    setupApplication();\r\n    //////////////////\r\n    // Setup database\r\n    //////////////////\r\n    setupDatabase();\r\n    //////////////////\r\n    // Setup backup\r\n    //////////////////\r\n    setupBackup();\r\n    /////////////////\r\n    // Setup toolbar\r\n    ////////////////\r\n    setupToolBar();\r\n    ////////////////////\r\n    // Setup status bar\r\n    ///////////////////\r\n    setupStatusBar();\r\n    ////////////////////\r\n    // Setup animation\r\n    ///////////////////\r\n    setupAnimation();\r\n    ///////////////////////////\r\n    // Setup navigation drawer\r\n    //////////////////////////\r\n    setupNavigationDrawer(savedInstanceState);\r\n    ///////////////////////\r\n    // Setup recycler view\r\n    ///////////////////////\r\n    setupRecyclerView();\r\n    /////////////\r\n    // Setup FAB\r\n    /////////////\r\n    setupFAB();\r\n    ///////////////////////\r\n    // Setup file observer\r\n    ///////////////////////\r\n    setupFileObserver();\r\n    ////////////////\r\n    // Setup mirror\r\n    ////////////////\r\n    setupMirror();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    ///////////////////////\r\n    // Apply theme\r\n    ///////////////////////\r\n    applyTheme();\r\n    /////////////////////\r\n    // Setup animation\r\n    /////////////////////\r\n    setupAnimation();\r\n    //////////////////////////\r\n    // Setup the startup list\r\n    //////////////////////////\r\n    setupStartupList();\r\n    ////////////////////////////\r\n    // Setup local find history\r\n    ////////////////////////////\r\n    setupLocalFindHistory();\r\n    /////////////////////////\r\n    // Setup process text\r\n    /////////////////////////\r\n    setupProcessText();\r\n    ///////////////////\r\n    // Handle intent\r\n    ///////////////////\r\n    handleIntent(getIntent());\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    Log.d(Const.TAG, \"nano - onResume\");\r\n    // Verify storage permission\r\n    verifyStoragePermission();\r\n    // Resume database\r\n    resumeDatabase();\r\n    // Reapply theme\r\n    applyTheme();\r\n    // Sync automatically\r\n    doSync();\r\n    // Self reference\r\n    main_activity = this;\r\n    // Setup scrapbook\r\n    setupScrapbook();\r\n    // Hide I/O progress bar\r\n    hideIOProgressBar();\r\n}\n--------------------------------------------------\n", "import android.Manifest;\r\nimport android.content.pm.PackageManager;\r\nimport androidx.core.content.ContextCompat\nimport android.os.Build\nimport android.content.pm.PackageManager\nimport android.content.Context\nimport android.Manifest\n// Verify storage permission\r\nprivate void verifyStoragePermission() {\r\n    if ((Build.VERSION.SDK_INT >= 23) && (Build.VERSION.SDK_INT < 29)) {\r\n        // Handle runtime permissions\r\n        if (!((ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)))\r\n            getStoragePermission(getApplicationContext());\r\n    }\r\n}" ],
  "BCR/118" : [ "checksum.update(buffer.array())\n--------------------------------------------------\nplaylistAdapter.update(it)\n--------------------------------------------------\nstate.update(pos, VLCOptions.getEqualizerSavedState(activity))\n--------------------------------------------------\nstate.update(presetCount + customCount, false)\n--------------------------------------------------\nstate.update(pos, false)\n--------------------------------------------------\nstate.update(allSets.indexOf(newName), true)\n--------------------------------------------------\nstate.update(0, true)\n--------------------------------------------------\nstate.update(revertPos, true)\n--------------------------------------------------\nstate.update(pos, true)\n--------------------------------------------------\nif (!isEmpty()) update(ArrayList(0))\n--------------------------------------------------\nadapter.update(mediaLibraryItems!!)\n--------------------------------------------------\nstorageBrowserAdapter.update(it)\n--------------------------------------------------\nfavoritesAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(filtered)\n--------------------------------------------------\nadapter.update(it)\n--------------------------------------------------\nadapter.update(renderers)\n--------------------------------------------------\nupdate(dataset, finalList)\n--------------------------------------------------\nadapter.update(bookmarkList)\n--------------------------------------------------\nadapter.update(bookmarks)\n--------------------------------------------------\n(recyclerview.adapter as OptionsAdapter).update(options)\n--------------------------------------------------\nhistoryAdapter.update(it)\n--------------------------------------------------\nstreamsAdapter.update(it)\n--------------------------------------------------\nmd.update(input.toByteArray())\n--------------------------------------------------\noverlayDelegate.playlistAdapter.update(mediaWrappers)\n--------------------------------------------------\nplaylistModel?.update()\n--------------------------------------------------\nplayer.update()\n--------------------------------------------------\ncallback.update()\n--------------------------------------------------\nwidgetDao.update(widget)\n--------------------------------------------------\nmd.update(certificate)\n--------------------------------------------------\nupdate()", "fun update(oldList: List<D>, newList: List<D>) {\r\n            this.oldList = oldList\r\n            this.newList = newList\r\n        }" ],
  "Iconify/827" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/826" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/113" : [ "super.onOptionsItemSelected(item)", "import com.battlelancer.seriesguide.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            android.R.id.home -> {\r\n                onBackPressedDispatcher.onBackPressed()\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\nImport(names=[android, view, MenuItem], wildcard=false, alias=null)" ],
  "BCR/115" : [ "", "import com.money.manager.ex.home.MainActivity;\r\nimport androidx.preference.Preference;\r\nimport androidx.preference.Preference\nimport com.money.manager.ex.home.MainActivity\nimport com.money.manager.ex.R\n@Override\r\npublic boolean onPreferenceChange(Preference preference, Object newValue) {\r\n    settings.setViewOpenAccounts((Boolean) newValue);\r\n    MainActivity.setRestartActivity(true);\r\n    return true;\r\n}" ],
  "BCR/114" : [ "", "import androidx.preference.Preference;\r\nimport androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    requestBackup();\r\n    return false;\r\n}" ],
  "MaterialFiles/32" : [ "return createViewHolder(view, viewType)\n--------------------------------------------------\nreturn createViewHolder(view)", "import code.name.monkey.retromusic.helper.HorizontalAdapterHelper\nimport android.view.ViewGroup\nimport android.view.View\noverride fun createViewHolder(view: View, viewType: Int): ViewHolder {\n        val params = view.layoutParams as ViewGroup.MarginLayoutParams\n        HorizontalAdapterHelper.applyMarginToLayoutParams(activity, params, viewType)\n        return ViewHolder(view)\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, helper, HorizontalAdapterHelper], wildcard=false, alias=null)" ],
  "Iconify/871" : [ "", "import org.videolan.tools.Settings.isPinCodeSet\nimport org.videolan.tools.Settings\nimport org.videolan.tools.KEY_SAFE_MODE\nimport androidx.preference.Preference\nimport android.content.SharedPreferences\nimport android.app.Activity\noverride fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences?, key: String?) {\r\n        if (sharedPreferences == null || key == null) return\r\n        when (key) {\r\n            KEY_SAFE_MODE -> {\r\n                Settings.safeMode = sharedPreferences.getBoolean(key, false) && requireActivity().isPinCodeSet()\r\n            }\r\n        }\r\n    }\nImport(names=[android, content, SharedPreferences], wildcard=false, alias=null)\nImport(names=[org, videolan, tools, KEY_SAFE_MODE], wildcard=false, alias=null)\nImport(names=[org, videolan, tools, Settings], wildcard=false, alias=null)" ],
  "Iconify/870" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/360" : [ "            synchronized(wakeLock) {\n                wakeLock.acquire(timeout)\r\n            }\n--------------------------------------------------\n\n            Timber.v(\"AndroidWakeLock for tag %s / id %d for %d ms: acquired\", tag, id, timeout)\r\n\n--------------------------------------------------\n            synchronized(wakeLock) {\n                wakeLock.acquire()\r\n            }\n--------------------------------------------------\n\n            Timber.v(\"AndroidWakeLock for tag %s / id %d: acquired with no timeout.\", tag, id)\r\n", "import timber.log.Timber\nimport com.fsck.k9.mail.power.WakeLock\nimport android.os.SystemClock\noverride fun acquire(timeout: Long) {\r\n            synchronized(wakeLock) {\r\n                wakeLock.acquire(timeout)\r\n            }\r\n\r\n            Timber.v(\"AndroidWakeLock for tag %s / id %d for %d ms: acquired\", tag, id, timeout)\r\n\r\n            if (startTime == null) {\r\n                startTime = SystemClock.elapsedRealtime()\r\n            }\r\n\r\n            this.timeout = timeout\r\n        }\nimport android.os.SystemClock\nimport com.fsck.k9.mail.power.WakeLock\nimport timber.log.Timber" ],
  "MaterialFiles/321" : [ "FileUtils.copyFile(db, dst)\n--------------------------------------------------\nFileUtils.copyFile(db, dbFile)\n--------------------------------------------------\nFileUtils.copyFile(File(uri.path), VLCOptions.getSoundFontFile(context))\n--------------------------------------------------\ncopyFile(`in`, out)\n--------------------------------------------------\nret and copyFile(file, File(dst, file.name))", "import java.io\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    @Throws(IOException::class)\r\n    private fun copyFile(inputStream: InputStream, out: OutputStream) {\r\n        val buffer = ByteArray(1024)\r\n        var read = inputStream.read(buffer)\r\n        while (read != -1) {\r\n            out.write(buffer, 0, read)\r\n            read = inputStream.read(buffer)\r\n        }\r\n    }" ],
  "MaterialFiles/323" : [ "delegate.close()\n--------------------------------------------------\nclose()\n--------------------------------------------------\nsuper.close()\n--------------------------------------------------\nlockChannel?.close()", "override fun close() {\r\n            try {\r\n                lock.lock()\r\n                super.close()\r\n                dbRef.db = null\r\n                opened = false\r\n            } finally {\r\n                lock.unlock()\r\n            }\r\n        }" ],
  "Trail-Sense/367" : [ "AppWidgetManager.getInstance(context)\n--------------------------------------------------\nCollator.getInstance()\n--------------------------------------------------\ngetInstance(getContext()).hasCustomArtistImage(artist)\n--------------------------------------------------\nArtistSignatureUtil.getInstance(getContext())\n--------------------------------------------------\nBlacklistStore.getInstance(activity)\n--------------------------------------------------\nWallpaperManager.getInstance(context)\n--------------------------------------------------\nBlacklistStore.getInstance(context)\n--------------------------------------------------\nSongPlayCountStore.getInstance(context)\n--------------------------------------------------\nHistoryStore.getInstance(context)\n--------------------------------------------------\nCalendar.getInstance()\n--------------------------------------------------\nArtistSignatureUtil.getInstance(context)\n--------------------------------------------------\nArtistSignatureUtil.getInstance(App.getContext())\n--------------------------------------------------\nMessageDigest.getInstance(\"SHA256\")", "import code.name.monkey.retromusic.model.Artist\nimport android.content.Context\nfun getInstance(context: Context): CustomArtistImageUtil {\n            if (sInstance == null) {\n                sInstance = CustomArtistImageUtil(context.applicationContext)\n            }\n            return sInstance!!\n        }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/368" : [ "activity.resources.getString(R.string.you_are_now_a_developer)\n--------------------------------------------------\nresources.getString(R.string.about)\n--------------------------------------------------\nresources.getString(R.string.version_n)\n--------------------------------------------------\nrequireArguments().getString(\"notes\")\n--------------------------------------------------\nres.getString(R.string.yes)\n--------------------------------------------------\nres.getString(R.string.no)\n--------------------------------------------------\nthis.getString(R.string.every_x_days)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_week)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_month)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_y_days)\n--------------------------------------------------\nresources.getString(R.string.every_month)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_month, freqNum)\n--------------------------------------------------\nresources.getString(R.string.every_day)\n--------------------------------------------------\nresources.getString(R.string.every_week)\n--------------------------------------------------\nresources.getString(R.string.every_x_days, freqDen)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_week, freqNum)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_y_days, freqNum, freqDen)\n--------------------------------------------------\nbinding.toolbar.title = getString(R.string.edit_habit)\n--------------------------------------------------\nbinding.nameInput.hint = getString(R.string.measurable_short_example)\n--------------------------------------------------\nbinding.questionInput.hint = getString(R.string.measurable_question_example)\n--------------------------------------------------\ngetString(R.string.target_type_at_least)\n--------------------------------------------------\ngetString(R.string.target_type_at_most)\n--------------------------------------------------\ngetString(R.string.every_day)\n--------------------------------------------------\ngetString(R.string.every_week)\n--------------------------------------------------\ngetString(R.string.every_month)\n--------------------------------------------------\nbinding.targetInput.error = getString(R.string.validation_cannot_be_blank)\n--------------------------------------------------\nbinding.reminderTimePicker.text = getString(R.string.reminder_off)\n--------------------------------------------------\n1 -> getString(R.string.every_day)\n--------------------------------------------------\n7 -> getString(R.string.every_week)\n--------------------------------------------------\n30 -> getString(R.string.every_month)\n--------------------------------------------------\nNumericalHabitType.AT_MOST -> getString(R.string.target_type_at_most)\n--------------------------------------------------\nelse -> getString(R.string.target_type_at_least)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_entered)\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_completed)\n--------------------------------------------------\nresources.getString(R.string.main_activity_title)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_import)\n--------------------------------------------------\ngetString(when(m) {\n    COULD_NOT_EXPORT -> R.string.could_not_export\n    IMPORT_SUCCESSFUL -> R.string.habits_imported\n    IMPORT_FAILED -> R.string.could_not_import\n    DATABASE_REPAIRED -> R.string.database_repaired\n    COULD_NOT_GENERATE_BUG_REPORT -> R.string.bug_report_failed\n    FILE_NOT_RECOGNIZED -> R.string.file_not_recognized\n})\n--------------------------------------------------\nactivity.resources.getString(R.string.toast_habit_created)\n--------------------------------------------------\nactivity.resources.getString(R.string.habits_imported)\n--------------------------------------------------\nactivity.resources.getString(R.string.file_not_recognized)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(id)\n--------------------------------------------------\nresources.getString(R.string.hint_title)\n--------------------------------------------------\nresources.getString(R.string.fa_skipped)\n--------------------------------------------------\nresources.getString(R.string.fa_question)\n--------------------------------------------------\nresources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(R.string.reminder_off)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_up)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_down)\n--------------------------------------------------\nresources.getString(R.string.today)\n--------------------------------------------------\nresources.getString(R.string.week)\n--------------------------------------------------\nresources.getString(R.string.month)\n--------------------------------------------------\nresources.getString(R.string.quarter)\n--------------------------------------------------\nresources.getString(R.string.year)\n--------------------------------------------------\ngetString(R.string.intro_title_1)\n--------------------------------------------------\ngetString(R.string.intro_description_1)\n--------------------------------------------------\ngetString(R.string.intro_title_2)\n--------------------------------------------------\ngetString(R.string.intro_description_2)\n--------------------------------------------------\ngetString(R.string.intro_title_4)\n--------------------------------------------------\ngetString(R.string.intro_description_4)\n--------------------------------------------------\nresources.getString(R.string.settings)\n--------------------------------------------------\ngetString(R.string.playStoreURL)\n--------------------------------------------------\nactivity.getString(R.string.check)\n--------------------------------------------------\nactivity.getString(R.string.uncheck)\n--------------------------------------------------\nactivity.getString(R.string.toggle)\n--------------------------------------------------\nactivity.getString(R.string.increment)\n--------------------------------------------------\nactivity.getString(R.string.decrement)\n--------------------------------------------------\nresources.getString(R.string.app_name)\n--------------------------------------------------\ncursor.getString(index)\n--------------------------------------------------\ncontext.getString(R.string.translateURL)\n--------------------------------------------------\ncontext.getString(R.string.playStoreURL)\n--------------------------------------------------\ncontext.getString(R.string.feedbackURL)\n--------------------------------------------------\ncontext.getString(R.string.privacyPolicyURL)\n--------------------------------------------------\ncontext.getString(R.string.helpURL)\n--------------------------------------------------\ncontext.getString(R.string.sourceCodeURL)\n--------------------------------------------------\ncontext.getString(R.string.codeContributorsURL)\n--------------------------------------------------\ncontext.getString(R.string.yes)\n--------------------------------------------------\ncontext.getString(R.string.no)\n--------------------------------------------------\ncontext.getString(R.string.enter)\n--------------------------------------------------\ncontext.getString(R.string.default_reminder_question)\n--------------------------------------------------\ncontext.getString(R.string.snooze)\n--------------------------------------------------\ncontext.resources.getString(R.string.reminder)\n--------------------------------------------------\ncontext.resources.getString(R.string.none)\n--------------------------------------------------\nprefs.getString(\"pref_ringtone_uri\", defaultRingtoneUri.toString())\n--------------------------------------------------\nsharedPrefs.getString(key, defValue)\n--------------------------------------------------\ncontext.resources.getString(resId)\n--------------------------------------------------\ncontext.getString(R.string.weekends)\n--------------------------------------------------\ncontext.getString(R.string.any_weekday)\n--------------------------------------------------\ncontext.getString(R.string.any_day)\n--------------------------------------------------\nresources.getString(R.string.activity_not_found)\n--------------------------------------------------\nthis.getString(toId)\n--------------------------------------------------\nthis.getString(subjectId)\n--------------------------------------------------\ncontext.getString(R.string.habit_not_found)\n--------------------------------------------------\nresources.getString(R.string.fa_check)\n--------------------------------------------------\nresources.getString(R.string.fa_times)", "override fun getString(index: Int): String? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getString(index)\r\n        }\r\n    }" ],
  "Iconify/875" : [ "updateSnackbar(child, dependency)", "import org.videolan.tools.dp\nimport com.google.android.material.snackbar.Snackbar\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport android.view.View\nimport android.view.Gravity\nprivate fun updateSnackbar(child: View, view: View) {\r\n        if (view.layoutParams is CoordinatorLayout.LayoutParams) {\r\n            val params = view.layoutParams as CoordinatorLayout.LayoutParams\r\n\r\n            if (params.anchorId != child.id) {\r\n                params.anchorId = child.id\r\n                params.anchorGravity = Gravity.TOP\r\n                params.gravity = Gravity.TOP\r\n                params.bottomMargin = 8.dp\r\n                view.layoutParams = params\r\n            }\r\n        }\r\n    }\nImport(names=[android, view, Gravity], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, coordinatorlayout, widget, CoordinatorLayout], wildcard=false, alias=null)" ],
  "MaterialFiles/324" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "MaterialFiles/27" : [ "setColor(c)\n--------------------------------------------------\nbinding.frequencyChart.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreRing.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreView.setColor(androidColor)\n--------------------------------------------------\nbinding.streakChart.setColor(androidColor)\n--------------------------------------------------\nbinding.targetChart.setColor(androidColor)\n--------------------------------------------------\nsetColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nchart.setColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nring.setColor(fgColor)", "import android.graphics.Paint\noverride fun setColor(color: Color) {\r\n        paint.color = color.toInt()\r\n        textPaint.color = color.toInt()\r\n    }" ],
  "Iconify/883" : [ "        val nightModeFlags = this.resources?.configuration?.uiMode?.and(Configuration.UI_MODE_NIGHT_MASK)\n        viewModel.setDarkTheme(\r\n            when (nightModeFlags) {", "fun setDarkTheme(isDarkTheme: Boolean) {\r\n            this.isDarkTheme = isDarkTheme\r\n            this.isDarkThemeInitialized = true\r\n        }" ],
  "MaterialFiles/338" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        writer.beginObject()\r\n        serialiseFields(writer)\r\n        writer.endObject()\r\n    }" ],
  "Iconify/881" : [ "        val nightModeFlags = this.resources?.configuration?.uiMode?.and(Configuration.UI_MODE_NIGHT_MASK)\n        viewModel.setDarkTheme(\r\n            when (nightModeFlags) {", "fun setDarkTheme(isDarkTheme: Boolean) {\r\n            this.isDarkTheme = isDarkTheme\r\n            this.isDarkThemeInitialized = true\r\n        }" ],
  "MaterialFiles/42" : [ "localizationItems.mapToArray {\n    it.code\n}\n--------------------------------------------------\nlocalizationItems.mapToArray {\n    it.displayText\n}", "import com.battlelancer.seriesguide.R\nprivate inline fun <T, reified R> List<T>.mapToArray(transform: (T) -> R): Array<R> {\r\n        return Array(size) { index ->\r\n            transform(get(index))\r\n        }\r\n    }\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)" ],
  "MaterialFiles/40" : [ "setColor(c)\n--------------------------------------------------\nbinding.frequencyChart.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreRing.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreView.setColor(androidColor)\n--------------------------------------------------\nbinding.streakChart.setColor(androidColor)\n--------------------------------------------------\nbinding.targetChart.setColor(androidColor)\n--------------------------------------------------\nsetColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nchart.setColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nring.setColor(fgColor)", "import android.graphics.Color\nfun setColor(color: Int) {\r\n        this.color = color\r\n        invalidate()\r\n    }" ],
  "Trail-Sense/370" : [ "    val activity = remember {\n        context.findActivity()\r\n    }", "import android.content.ContextWrapper\nimport android.content.Context\nimport android.app.Activity\nfun Context.findActivity(): Activity? {\r\n    var context = this\r\n    while (context is ContextWrapper) {\r\n        if (context is Activity) return context\r\n        context = context.baseContext\r\n    }\r\n    return null\r\n}\nimport android.app.Activity\nimport android.content.Context\nimport android.content.ContextWrapper" ],
  "Trail-Sense/371" : [ "activity.resources.getString(R.string.you_are_now_a_developer)\n--------------------------------------------------\nresources.getString(R.string.about)\n--------------------------------------------------\nresources.getString(R.string.version_n)\n--------------------------------------------------\nrequireArguments().getString(\"notes\")\n--------------------------------------------------\nres.getString(R.string.yes)\n--------------------------------------------------\nres.getString(R.string.no)\n--------------------------------------------------\nthis.getString(R.string.every_x_days)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_week)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_month)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_y_days)\n--------------------------------------------------\nresources.getString(R.string.every_month)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_month, freqNum)\n--------------------------------------------------\nresources.getString(R.string.every_day)\n--------------------------------------------------\nresources.getString(R.string.every_week)\n--------------------------------------------------\nresources.getString(R.string.every_x_days, freqDen)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_week, freqNum)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_y_days, freqNum, freqDen)\n--------------------------------------------------\nbinding.toolbar.title = getString(R.string.edit_habit)\n--------------------------------------------------\nbinding.nameInput.hint = getString(R.string.measurable_short_example)\n--------------------------------------------------\nbinding.questionInput.hint = getString(R.string.measurable_question_example)\n--------------------------------------------------\ngetString(R.string.target_type_at_least)\n--------------------------------------------------\ngetString(R.string.target_type_at_most)\n--------------------------------------------------\ngetString(R.string.every_day)\n--------------------------------------------------\ngetString(R.string.every_week)\n--------------------------------------------------\ngetString(R.string.every_month)\n--------------------------------------------------\nbinding.targetInput.error = getString(R.string.validation_cannot_be_blank)\n--------------------------------------------------\nbinding.reminderTimePicker.text = getString(R.string.reminder_off)\n--------------------------------------------------\n1 -> getString(R.string.every_day)\n--------------------------------------------------\n7 -> getString(R.string.every_week)\n--------------------------------------------------\n30 -> getString(R.string.every_month)\n--------------------------------------------------\nNumericalHabitType.AT_MOST -> getString(R.string.target_type_at_most)\n--------------------------------------------------\nelse -> getString(R.string.target_type_at_least)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_entered)\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_completed)\n--------------------------------------------------\nresources.getString(R.string.main_activity_title)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_import)\n--------------------------------------------------\ngetString(when(m) {\n    COULD_NOT_EXPORT -> R.string.could_not_export\n    IMPORT_SUCCESSFUL -> R.string.habits_imported\n    IMPORT_FAILED -> R.string.could_not_import\n    DATABASE_REPAIRED -> R.string.database_repaired\n    COULD_NOT_GENERATE_BUG_REPORT -> R.string.bug_report_failed\n    FILE_NOT_RECOGNIZED -> R.string.file_not_recognized\n})\n--------------------------------------------------\nactivity.resources.getString(R.string.toast_habit_created)\n--------------------------------------------------\nactivity.resources.getString(R.string.habits_imported)\n--------------------------------------------------\nactivity.resources.getString(R.string.file_not_recognized)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(id)\n--------------------------------------------------\nresources.getString(R.string.hint_title)\n--------------------------------------------------\nresources.getString(R.string.fa_skipped)\n--------------------------------------------------\nresources.getString(R.string.fa_question)\n--------------------------------------------------\nresources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(R.string.reminder_off)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_up)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_down)\n--------------------------------------------------\nresources.getString(R.string.today)\n--------------------------------------------------\nresources.getString(R.string.week)\n--------------------------------------------------\nresources.getString(R.string.month)\n--------------------------------------------------\nresources.getString(R.string.quarter)\n--------------------------------------------------\nresources.getString(R.string.year)\n--------------------------------------------------\ngetString(R.string.intro_title_1)\n--------------------------------------------------\ngetString(R.string.intro_description_1)\n--------------------------------------------------\ngetString(R.string.intro_title_2)\n--------------------------------------------------\ngetString(R.string.intro_description_2)\n--------------------------------------------------\ngetString(R.string.intro_title_4)\n--------------------------------------------------\ngetString(R.string.intro_description_4)\n--------------------------------------------------\nresources.getString(R.string.settings)\n--------------------------------------------------\ngetString(R.string.playStoreURL)\n--------------------------------------------------\nactivity.getString(R.string.check)\n--------------------------------------------------\nactivity.getString(R.string.uncheck)\n--------------------------------------------------\nactivity.getString(R.string.toggle)\n--------------------------------------------------\nactivity.getString(R.string.increment)\n--------------------------------------------------\nactivity.getString(R.string.decrement)\n--------------------------------------------------\nresources.getString(R.string.app_name)\n--------------------------------------------------\ncursor.getString(index)\n--------------------------------------------------\ncontext.getString(R.string.translateURL)\n--------------------------------------------------\ncontext.getString(R.string.playStoreURL)\n--------------------------------------------------\ncontext.getString(R.string.feedbackURL)\n--------------------------------------------------\ncontext.getString(R.string.privacyPolicyURL)\n--------------------------------------------------\ncontext.getString(R.string.helpURL)\n--------------------------------------------------\ncontext.getString(R.string.sourceCodeURL)\n--------------------------------------------------\ncontext.getString(R.string.codeContributorsURL)\n--------------------------------------------------\ncontext.getString(R.string.yes)\n--------------------------------------------------\ncontext.getString(R.string.no)\n--------------------------------------------------\ncontext.getString(R.string.enter)\n--------------------------------------------------\ncontext.getString(R.string.default_reminder_question)\n--------------------------------------------------\ncontext.getString(R.string.snooze)\n--------------------------------------------------\ncontext.resources.getString(R.string.reminder)\n--------------------------------------------------\ncontext.resources.getString(R.string.none)\n--------------------------------------------------\nprefs.getString(\"pref_ringtone_uri\", defaultRingtoneUri.toString())\n--------------------------------------------------\nsharedPrefs.getString(key, defValue)\n--------------------------------------------------\ncontext.resources.getString(resId)\n--------------------------------------------------\ncontext.getString(R.string.weekends)\n--------------------------------------------------\ncontext.getString(R.string.any_weekday)\n--------------------------------------------------\ncontext.getString(R.string.any_day)\n--------------------------------------------------\nresources.getString(R.string.activity_not_found)\n--------------------------------------------------\nthis.getString(toId)\n--------------------------------------------------\nthis.getString(subjectId)\n--------------------------------------------------\ncontext.getString(R.string.habit_not_found)\n--------------------------------------------------\nresources.getString(R.string.fa_check)\n--------------------------------------------------\nresources.getString(R.string.fa_times)", "override fun getString(index: Int): String? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getString(index)\r\n        }\r\n    }" ],
  "Trail-Sense/373" : [ "PackageTools.getVersionString(requireContext())\n--------------------------------------------------\nPackageTools.getVersionString(this)", "import com.battlelancer.seriesguide.provider.SgRoomDatabase\nimport com.battlelancer.seriesguide.R\nimport com.battlelancer.seriesguide.BuildConfig\nimport android.content.Context\nfun getVersionString(context: Context): String {\r\n        return if (BuildConfig.DEBUG) {\r\n            context.getString(\r\n                R.string.format_version_debug, getVersion(context),\r\n                SgRoomDatabase.VERSION, BuildConfig.VERSION_CODE\r\n            )\r\n        } else {\r\n            context.getString(\r\n                R.string.format_version, getVersion(context),\r\n                SgRoomDatabase.VERSION\r\n            )\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, BuildConfig], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, provider, SgRoomDatabase], wildcard=false, alias=null)" ],
  "Trail-Sense/374" : [ "        appPreferences.currentUserId = withContext(Dispatchers.IO) {\n            userDao.upsert(serverId, userId, accessToken)\r\n        }", "import androidx.room.Transaction\n @Transaction\r\n    fun upsert(serverId: Long, userId: String, accessToken: String?): Long {\r\n        return when (val user = getByUserId(serverId, userId)) {\r\n            null -> insert(serverId, userId, accessToken)\r\n            else -> {\r\n                update(user.id, accessToken)\r\n                user.id\r\n            }\r\n        }\r\n    }" ],
  "Trail-Sense/375" : [ "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    Sensor sensor = getSensor(null);\r\n    if (sensor != null) {\r\n        mSensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);\r\n    }\r\n}\n--------------------------------------------------\n/**\r\n * Called by Tracker when workout is resumed\r\n */\r\n@Override\r\npublic void onResume() {\r\n    for (Pair<TrackerComponent, ResultCode> pair : components.values()) {\r\n        if (pair.second == ResultCode.RESULT_OK) {\r\n            pair.first.onResume();\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    Sensor sensor = getSensor(null);\r\n    if (sensor != null) {\r\n        mSensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);\r\n    }\r\n}" ],
  "Iconify/406" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "Trail-Sense/376" : [ "{\r\n        tonKit.stop()\r\n        coroutineScope.cancel()\r\n    }\n--------------------------------------------------\n        //       should not live longer than that UI or else the context and view tree will be\n        //       invalid and lead to crashes. For now, we use a scope that is cancelled whenever\r\n        //       synchronizer.stop is called.\n--------------------------------------------------\ntransactionSubscriptionJob?.cancel()\n--------------------------------------------------\nparseAddressJob?.cancel()\n--------------------------------------------------\njob?.cancel()\n--------------------------------------------------\ncoroutineScope.cancel()\n--------------------------------------------------\ncollectCexRepoItemsJob?.cancel()\n--------------------------------------------------\ncoinPriceUpdatesJob?.cancel()\n--------------------------------------------------\nservice.cancel(request.token)\n--------------------------------------------------\ntopNftsJob?.cancel()\n--------------------------------------------------\nloadingJob?.cancel()\n--------------------------------------------------\nfetchingJob?.cancel()\n--------------------------------------------------\nadaptersMapScope?.cancel()\n--------------------------------------------------\ntimer?.cancel()\n--------------------------------------------------\ntradeDataJob?.cancel()\n--------------------------------------------------\nMarketWidgetWorker.cancel(context)", "import androidx.work.WorkManager\nimport android.content.Context\nfun cancel(context: Context) {\r\n            if (!hasEnabledWidgets(context)) {\r\n                WorkManager.getInstance(context).cancelUniqueWork(workName)\r\n            }\r\n        }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[androidx, work, WorkManager], wildcard=false, alias=null)" ],
  "MaterialFiles/334" : [ "FileUtils.copyFile(db, dst)\n--------------------------------------------------\nFileUtils.copyFile(db, dbFile)\n--------------------------------------------------\nFileUtils.copyFile(File(uri.path), VLCOptions.getSoundFontFile(context))\n--------------------------------------------------\ncopyFile(`in`, out)\n--------------------------------------------------\nret and copyFile(file, File(dst, file.name))", "import java.io\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    @Throws(IOException::class)\r\n    private fun copyFile(inputStream: InputStream, out: OutputStream) {\r\n        val buffer = ByteArray(1024)\r\n        var read = inputStream.read(buffer)\r\n        while (read != -1) {\r\n            out.write(buffer, 0, read)\r\n            read = inputStream.read(buffer)\r\n        }\r\n    }" ],
  "Iconify/402" : [ "private void init(double lat, double lng) {\r\n    m_lat = normalizeLat(lat);\r\n    m_lng = normalizeLong(lng);\r\n}\n--------------------------------------------------\n", "private double normalizeLong(double lng) {\r\n    lng %= 360.0;\r\n    if (lng >= 0.0) {\r\n        return lng;\r\n    } else {\r\n        return lng + 360;\r\n    }\r\n}" ],
  "Iconify/401" : [ "/**\r\n * Like {@link #toContentValuesUpdate()} and adds TMDB id and adds values for collection,\r\n * watchlist and watched status and plays.\r\n */\r\npublic ContentValues toContentValuesInsert() {\r\n    ContentValues values = toContentValuesUpdate();\r\n    values.put(Movies.TMDB_ID, tmdbMovie.id);\r\n    values.put(Movies.IN_COLLECTION, DBUtils.convertBooleanToInt(inCollection));\r\n    values.put(Movies.IN_WATCHLIST, DBUtils.convertBooleanToInt(inWatchlist));\r\n    values.put(Movies.WATCHED, DBUtils.convertBooleanToInt(isWatched));\r\n    values.put(Movies.PLAYS, plays);\r\n    // set default values\r\n    values.put(Movies.RATING_TMDB, 0);\r\n    values.put(Movies.RATING_VOTES_TMDB, 0);\r\n    values.put(Movies.RATING_TRAKT, 0);\r\n    values.put(Movies.RATING_VOTES_TRAKT, 0);\r\n    values.put(Movies.LAST_UPDATED, System.currentTimeMillis());\r\n    return values;\r\n}\n--------------------------------------------------\n/**\r\n * Like {@link #toContentValuesUpdate()} and adds TMDB id and adds values for collection,\r\n * watchlist and watched status and plays.\r\n */\r\npublic ContentValues toContentValuesInsert() {\r\n    ContentValues values = toContentValuesUpdate();\r\n    values.put(Movies.TMDB_ID, tmdbMovie.id);\r\n    values.put(Movies.IN_COLLECTION, DBUtils.convertBooleanToInt(inCollection));\r\n    values.put(Movies.IN_WATCHLIST, DBUtils.convertBooleanToInt(inWatchlist));\r\n    values.put(Movies.WATCHED, DBUtils.convertBooleanToInt(isWatched));\r\n    values.put(Movies.PLAYS, plays);\r\n    // set default values\r\n    values.put(Movies.RATING_TMDB, 0);\r\n    values.put(Movies.RATING_VOTES_TMDB, 0);\r\n    values.put(Movies.RATING_TRAKT, 0);\r\n    values.put(Movies.RATING_VOTES_TRAKT, 0);\r\n    values.put(Movies.LAST_UPDATED, System.currentTimeMillis());\r\n    return values;\r\n}\n--------------------------------------------------\n", "/**\r\n * Maps a {@link java.lang.Boolean} object to an int value to store in the database.\r\n */\r\npublic static int convertBooleanToInt(Boolean value) {\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    return value ? 1 : 0;\r\n}" ],
  "MaterialFiles/336" : [ "maximumLimit(it)", "import kotlin.math.min\nimport com.kickstarter.models.Reward\nimport com.kickstarter.libs.utils.RewardUtils\nprivate fun maximumLimit(addOn: Reward): Int? {\r\n            val limit = addOn.limit()\r\n            val remaining = addOn.remaining()\r\n            return if (addOn.isAvailable() && RewardUtils.isValidTimeRange(addOn)) {\r\n                when {\r\n                    remaining != null && limit != null -> min(remaining, limit)\r\n                    remaining != null -> remaining\r\n                    limit != null -> limit\r\n                    else -> null\r\n                }\r\n            } else {\r\n                addOn.quantity()\r\n            }\r\n        }\nImport(names=[com, kickstarter, libs, utils, RewardUtils], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, Reward], wildcard=false, alias=null)\nImport(names=[kotlin, math, min], wildcard=false, alias=null)" ],
  "Iconify/400" : [ "@Override\r\npublic void emit(Workout s, Context ctx) {\r\n    double val;\r\n    if (trigger != null)\r\n        val = trigger.getValue();\r\n    else\r\n        val = s.get(scope, dimension);\r\n    int cmp = sign * range.compare(val);\r\n    String msg = \"\";\r\n    if (cmp < 0) {\r\n        msg = \" \" + formatter.getCueString(R.string.cue_speedup);\r\n    } else if (cmp > 0) {\r\n        msg = \" \" + formatter.getCueString(R.string.cue_slowdown);\r\n    }\r\n    if (!\"\".contentEquals(msg) && textToSpeech != null) {\r\n        textToSpeech.speak(formatter.getCueString(scope.getCueId()) + \" \" + formatter.format(Formatter.Format.CUE_LONG, dimension, val) + msg, TextToSpeech.QUEUE_ADD, null);\r\n    }\r\n}\n--------------------------------------------------\npublic boolean inside(double d) {\r\n    return compare(d) == 0;\r\n}\n--------------------------------------------------\n", "public int compare(double value) {\r\n    if (value < minValue)\r\n        return -1;\r\n    if (value > maxValue)\r\n        return 1;\r\n    return 0;\r\n}" ],
  "Iconify/884" : [ "setLRCViewColors(color.primaryTextColor, color.secondaryTextColor)\n--------------------------------------------------\nsetLRCViewColors(primaryColor, secondaryColor)\n--------------------------------------------------\nColor, Classic -> setLRCViewColors(color.primaryTextColor, color.secondaryTextColor)\n--------------------------------------------------\nBlur -> setLRCViewColors(Color.WHITE, ColorUtil.withAlpha(Color.WHITE, 0.5f))\n--------------------------------------------------\nelse -> setLRCViewColors(primaryColor, secondaryColor)", "import code.name.monkey.retromusic.R\nimport androidx.annotation.ColorInt\nimport android.view.View\nimport android.graphics.Color\nprivate fun setLRCViewColors(@ColorInt primaryColor: Int, @ColorInt secondaryColor: Int) {\n        lrcView.apply {\n            setCurrentColor(primaryColor)\n            setTimeTextColor(primaryColor)\n            setTimelineColor(primaryColor)\n            setNormalColor(secondaryColor)\n            setTimelineTextColor(primaryColor)\n        }\n    }\nImport(names=[androidx, annotation, ColorInt], wildcard=false, alias=null)" ],
  "MaterialFiles/335" : [ "", "import com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.presentation.main.MainActivity\nimport androidx.glance.action.ActionParameters\nimport androidx.glance.GlanceId\nimport androidx.core.net.toUri\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\noverride suspend fun onAction(context: Context, glanceId: GlanceId, parameters: ActionParameters) {\r\n        val intent = Intent(\r\n            Intent.ACTION_VIEW,\r\n            Constants.CALENDAR_SCREEN_URI.toUri(),\r\n            context,\r\n            MainActivity::class.java\r\n        ).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        context.startActivity(intent)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, glance, GlanceId], wildcard=false, alias=null)\nImport(names=[androidx, glance, action, ActionParameters], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, presentation, main, MainActivity], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, util, Constants], wildcard=false, alias=null)" ],
  "MaterialFiles/36" : [ "@Override\r\npublic void onIRCResult(IRCCloudJSONObject result) {\r\n    if (result.getBoolean(\"success\")) {\r\n        ObjectNode o = result.getJsonObject(\"paste\");\r\n        if (o == null && result.has(\"id\"))\r\n            o = (ObjectNode) result.getObject();\r\n        if (o != null) {\r\n            setId(o.get(\"id\").asText());\r\n            setName(o.get(\"name\").asText());\r\n            setBody(o.get(\"body\").asText());\r\n            setExtension(o.get(\"extension\").asText());\r\n            setLines(o.get(\"lines\").asInt());\r\n            setOwn_paste(o.get(\"own_paste\").asBoolean());\r\n            setDate(new Date(o.get(\"date\").asLong() * 1000L));\r\n            setUrl(o.get(\"url\").asText());\r\n        }\r\n        if (onSaveListener != null)\r\n            onSaveListener.onSuccess(Pastebin.this);\r\n    } else {\r\n        android.util.Log.e(\"IRCCloud\", \"Paste failed: \" + result.toString());\r\n        if (onSaveListener != null)\r\n            onSaveListener.onFailure(Pastebin.this);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onIRCResult(IRCCloudJSONObject result) {\r\n    if (result.getBoolean(\"success\")) {\r\n        if (onDeleteListener != null)\r\n            onDeleteListener.onSuccess(Pastebin.this);\r\n    } else {\r\n        android.util.Log.e(\"IRCCloud\", \"Paste delete failed: \" + result.toString());\r\n        if (onDeleteListener != null)\r\n            onDeleteListener.onFailure(Pastebin.this);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.appcompat.app.AlertDialog;\r\nimport com.irccloud.android.R;\r\nimport com.irccloud.android.data.model.Pastebin;\r\nimport com.irccloud.android.data.model.Pastebin\nimport com.irccloud.android.R\nimport androidx.appcompat.app.AlertDialog\n@Override\r\npublic void onFailure(Pastebin object) {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(PastebinsActivity.this);\r\n            builder.setTitle(\"Error\");\r\n            builder.setMessage(\"Unable to delete this snippet.  Please try again shortly.\");\r\n            builder.setPositiveButton(\"Close\", null);\r\n            if (!isFinishing())\r\n                builder.show();\r\n        }\r\n    });\r\n}" ],
  "MaterialFiles/11" : [ "@Override\r\npublic boolean onSupportNavigateUp() {\r\n    super.onSupportNavigateUp();\r\n    setResult(RESULT_CANCELED);\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onSupportNavigateUp() {\r\n    if (activityBinding.searchToolbar.getVisibility() == VISIBLE) {\r\n        updateToolbars(false);\r\n        return true;\r\n    } else {\r\n        return super.onSupportNavigateUp();\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic boolean onSupportNavigateUp() {\r\n    super.onSupportNavigateUp();\r\n    setResult(RESULT_CANCELED);\r\n    return true;\r\n}" ],
  "Trail-Sense/382" : [ "@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    View view = ((LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.dialog_tips, null);\r\n    // set tips\r\n    TextView textTips = view.findViewById(R.id.textViewTips);\r\n    textTips.setText(getTips());\r\n    textTips.setVisibility(!isViewAsWeb() ? View.VISIBLE : View.GONE);\r\n    // webView\r\n    WebView webView = view.findViewById(R.id.webViewTips);\r\n    webView.setVisibility(isViewAsWeb() ? View.VISIBLE : View.GONE);\r\n    if (getRawWeb() != 0) {\r\n        webView.loadData(MmxFileUtils.getRawAsString(getActivity(), getRawWeb()), \"text/html\", \"UTF-8\");\r\n    }\r\n    // check box\r\n    CheckBox checkDont = view.findViewById(R.id.checkBoxDontShow);\r\n    checkDont.setVisibility(isVisibleDontShowAgain() ? View.VISIBLE : View.GONE);\r\n    checkDont.setChecked(isCheckDontShowAgain());\r\n    checkDont.setOnCheckedChangeListener(new OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n            setCheckDontShowAgain(isChecked);\r\n        }\r\n    });\r\n    // bug CheckBox object of Android\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {\r\n        final double scale = this.getResources().getDisplayMetrics().density;\r\n        checkDont.setPadding(checkDont.getPaddingLeft() + (int) (40.0f * scale + 0.5f), checkDont.getPaddingTop(), checkDont.getPaddingRight(), checkDont.getPaddingBottom());\r\n    }\r\n    return new AlertDialogWrapper(getContext()).setTitle(getTitle()).setView(view).setCancelable(false).setNeutralButton(android.R.string.ok, new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            if (getActivity() != null) {\r\n                getActivity().getSharedPreferences(PREF_DIALOG, 0).edit().putBoolean(getKey(), !isCheckDontShowAgain()).commit();\r\n            }\r\n            dialog.dismiss();\r\n        }\r\n    }).create();\r\n}\n--------------------------------------------------\nprotected void showProgressDialog(Integer max) {\r\n    mDialog = new ProgressDialog(getContext());\r\n    mDialog.setMessage(getContext().getString(R.string.starting_price_update));\r\n    mDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\r\n    //        mDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n    if (max != null) {\r\n        mDialog.setMax(max);\r\n    }\r\n    mDialog.setCancelable(false);\r\n    mDialog.setCanceledOnTouchOutside(false);\r\n    mDialog.show();\r\n}\n--------------------------------------------------\n", "public AlertDialogWrapper setCancelable(boolean cancelable) {\r\n    builder.cancelable(cancelable);\r\n    return this;\r\n}" ],
  "BCR/140" : [ "        val workerClass = Class.forName(workerClassName).kotlin\n        return getKoin().getOrNull(workerClass) { parametersOf(workerParameters) }\r\n    }\n--------------------------------------------------\n            .submit(pictureSizeInPx, pictureSizeInPx)\n            .getOrNull()\r\n    }", "import com.bumptech.glide.request.FutureTarget\nprivate fun <T> FutureTarget<T>.getOrNull(): T? {\r\n        return try {\r\n            get()\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }\nimport com.bumptech.glide.request.FutureTarget" ],
  "Trail-Sense/383" : [ "goToDateTime(newDateTime)", "import org.joda.time.DateTime\nimport com.simplemobiletools.calendar.pro.helpers.Formatter\noverride fun goToDateTime(dateTime: DateTime) {\r\n        currentDayCode = Formatter.getDayCodeFromDateTime(dateTime)\r\n        setupFragment()\r\n    }\nImport(names=[com, simplemobiletools, calendar, pro, helpers, Formatter], wildcard=false, alias=null)\nImport(names=[org, joda, time, DateTime], wildcard=false, alias=null)" ],
  "Trail-Sense/384" : [ "", "override fun onStateChange(states: IntArray): Boolean {\r\n            invalidateSelf()\r\n            return true\r\n        }" ],
  "MaterialFiles/341" : [ "pxManager.intercept(response)", "import java.io.IOException\nimport okhttp3.Response\nimport okhttp3.Interceptor.Chain\n @Throws(IOException::class)\r\n\r\n    override fun intercept(chain: Chain): Response {\r\n        val response: Response = chain.proceed(request(chain.request()))\r\n        pxManager.intercept(response)\r\n        return response\r\n    }\nImport(names=[okhttp3, Interceptor, Chain], wildcard=false, alias=null)\nImport(names=[okhttp3, Response], wildcard=false, alias=null)" ],
  "Trail-Sense/385" : [ "", "import org.videolan.vlc.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        itemPosition = arguments?.getInt(CTX_POSITION_KEY) ?: -1\r\n        if (!this::receiver.isInitialized) restoreReceiver(savedInstanceState)\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Iconify/857" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/386" : [ "                conflictingHash = null,\n                showRawTransaction = false,\r\n                amount = transaction.value.convertZatoshiToZec(decimalCount),\n--------------------------------------------------\n                conflictingHash = null,\n                showRawTransaction = false,\r\n                amount = transaction.value.convertZatoshiToZec(decimalCount).negate(),\n--------------------------------------------------\nToast.makeText(App.instance, \"Wallet is Null\", Toast.LENGTH_SHORT).show()\n--------------------------------------------------\ninvalidUrlBottomSheetState.show()", "import io.horizontalsystems.bankwallet.modules.market.ImageSource\nimport androidx.fragment.app.FragmentManager\nimport android.view.View\nfun show(\r\n            fragmentManager: FragmentManager,\r\n            title: String,\r\n            icon: ImageSource,\r\n            items: List<BottomSheetSelectorViewItem>,\r\n            selected: List<Int>,\r\n            onItemSelected: (List<Int>) -> Unit,\r\n            onCancelled: (() -> Unit)? = null,\r\n            warningTitle: String? = null,\r\n            warning: String? = null,\r\n            notifyUnchanged: Boolean = false,\r\n            allowEmpty: Boolean\r\n        ) {\r\n            BottomSheetSelectorMultipleDialog(\r\n                title,\r\n                icon,\r\n                items,\r\n                selected,\r\n                onItemSelected,\r\n                onCancelled,\r\n                warningTitle,\r\n                warning,\r\n                notifyUnchanged,\r\n                allowEmpty\r\n            )\r\n                .show(fragmentManager, \"selector_dialog\")\r\n        }\nimport android.view.View\nimport androidx.fragment.app.FragmentManager\nimport io.horizontalsystems.bankwallet.modules.market.ImageSource" ],
  "MaterialFiles/340" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "MaterialFiles/343" : [ "                \"threadCollectionTimeLimitMillis\" to threadCollectionTimeLimitMillis else null,\n            if (persistenceDirectory != null)\r\n                \"persistenceDirectorySet\" to true else null,\n--------------------------------------------------\n            if (persistenceDirectory != null)\n                \"persistenceDirectorySet\" to true else null,\r\n            if (sendThreads != defaultConfig.sendThreads)\n--------------------------------------------------\nsynchronizedStreamableStore.persist(newId)\n--------------------------------------------------\nlastRunInfoStore.persist(currentRunInfo)\n--------------------------------------------------\nsynchronizedStreamableStore.persist(user)", "import kotlin.concurrent.withLock\nimport java.io.IOException\n @Throws(IOException::class)\r\n    fun persist(streamable: T) {\r\n        lock.writeLock().withLock {\r\n            file.writer().buffered().use {\r\n                streamable.toStream(JsonStream(it))\r\n                true\r\n            }\r\n        }\r\n    }\nImport(names=[kotlin, concurrent, withLock], wildcard=false, alias=null)" ],
  "Iconify/856" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/342" : [ "viewHolder?.bindData(getItem(position))\n--------------------------------------------------\nviewHolder.bindData(data)\n--------------------------------------------------\nviewHolder.bindData(textElement)\n--------------------------------------------------\nviewHolder.bindData(imageElement)\n--------------------------------------------------\nviewHolder.bindData(videoElement)\n--------------------------------------------------\nviewHolder.bindData(audioElement)\n--------------------------------------------------\nviewHolder.bindData(externalSourceViewElement)", "import com.kickstarter.models.Message\n @Throws(Exception::class)\r\n    override fun bindData(data: Any?) {\r\n        val message = requireNotNull(data as Message?)\r\n        viewModel.inputs.configureWith(message)\r\n    }\nImport(names=[com, kickstarter, models, Message], wildcard=false, alias=null)" ],
  "MaterialFiles/345" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/344" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        writer.beginObject()\r\n        serialiseFields(writer)\r\n        writer.endObject()\r\n    }" ],
  "Iconify/853" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Iconify/859" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/142" : [ "\n                val displayCount = if (unreadCount <= MAX_COUNT) unreadCount.toString() else \"$MAX_COUNT+\"\r\n                remoteViews.setTextViewText(R.id.unread_count, displayCount)\n--------------------------------------------------\n                    val folderId = folderRepository.getFolderId(account, folderServerId)\n                    putString(\"unread_widget.$widgetId.folder_id\", folderId?.toString())\r\n                }\n--------------------------------------------------\naddress.toString()\n--------------------------------------------------\nthis?.toString()\n--------------------------------------------------\nemailSection.toString()\n--------------------------------------------------\ntoString()\n--------------------------------------------------\nformatter.toString()\n--------------------------------------------------\nlinkText.toString()\n--------------------------------------------------\nStringBuilder(length).apply {\n    this@asString.forEach {\n        append(it)\n    }\n}.toString()\n--------------------------------------------------\nUUID.randomUUID().toString()\n--------------------------------------------------\nfolderDetails.folder.id.toString()\n--------------------------------------------------\nfolderId.toString()\n--------------------------------------------------\ndatabaseId.toString()\n--------------------------------------------------\nmessagePartId.toString()\n--------------------------------------------------\nvalue?.toString()\n--------------------------------------------------\nvalue.toString()\n--------------------------------------------------\ntext.toString()", "override fun toString() = StringBuilder().apply {\r\n        segments.forEach {\r\n            append(text, it.startIndex, it.endIndex)\r\n        }\r\n    }.toString()" ],
  "BCR/141" : [ "it.toString()\n--------------------------------------------------\ninAppMessage?.toString()\n--------------------------------------------------\nvalue.value.toString()\n--------------------------------------------------\nvalue.toString()\n--------------------------------------------------\nthis.children().getOrNull(0)?.children()?.getOrNull(0)?.attr(\"src\").toString()\n--------------------------------------------------\nthis.children().getOrNull(0)?.children()?.getOrNull(0)?.attr(\"data-src\").toString()\n--------------------------------------------------\nthis.children().getOrNull(0)?.apply {\n    this.attr(\"width\", \"100%\")\n}.toString()\n--------------------------------------------------\nbuilder?.toString()\n--------------------------------------------------\nuser.id().toString()\n--------------------------------------------------\ncombinedProperties(additionalProperties).toString()\n--------------------------------------------------\ncategory.id().toString()\n--------------------------------------------------\ncategory.analyticsName().toString()\n--------------------------------------------------\nlocation.id().toString()\n--------------------------------------------------\nreward.id().toString()\n--------------------------------------------------\nproject.creator().id().toString()\n--------------------------------------------------\nproject.id().toString()\n--------------------------------------------------\ndateTime.toString(DateTimeFormat.fullDate().withLocale(locale).withZoneUTC())\n--------------------------------------------------\ndateTime.toString(DateTimeFormat.longDate().withLocale(locale).withZoneUTC())\n--------------------------------------------------\ndateTime.toString(DateTimeFormat.mediumDate().withLocale(locale).withZoneUTC())\n--------------------------------------------------\ndateTime.toString(DateTimeFormat.mediumDateTime().withLocale(locale).withZone(dateTimeZone))\n--------------------------------------------------\nbaseKeyPath.toString()\n--------------------------------------------------\ndateTime.toString(DateTimeFormat.shortTime().withLocale(locale).withZoneUTC())\n--------------------------------------------------\nthis.toString()\n--------------------------------------------------\nGson().toJson(featuresFlagsMap).toString()\n--------------------------------------------------\nquantity.toString()\n--------------------------------------------------\nuriBuilder.build().toString()\n--------------------------------------------------\ntoString()\n--------------------------------------------------\nIdFactory.id().toString()\n--------------------------------------------------\nupdate()?.id().toString()\n--------------------------------------------------\nentry.value.toString()\n--------------------------------------------------\nid().toString()\n--------------------------------------------------\nUri.parse(webProjectUrl()).buildUpon().scheme(\"https\").build().toString()\n--------------------------------------------------\nUri.parse(secureWebProjectUrl()).buildUpon().appendEncodedPath(\"pledge/new\").toString()\n--------------------------------------------------\nUri.parse(secureWebProjectUrl()).buildUpon().appendEncodedPath(\"pledge/edit\").toString()\n--------------------------------------------------\nbacked().toString()\n--------------------------------------------------\nit.id().toString()\n--------------------------------------------------\npage().toString()\n--------------------------------------------------\nperPage().toString()\n--------------------------------------------------\npledged().toString()\n--------------------------------------------------\nrecommended().toString()\n--------------------------------------------------\nstarred().toString()\n--------------------------------------------------\nsocial().toString()\n--------------------------------------------------\nsort.toString()\n--------------------------------------------------\nstaffPicks().toString()\n--------------------------------------------------\nstate.toString()\n--------------------------------------------------\ntagId.toString()\n--------------------------------------------------\nqueryParams().toString()\n--------------------------------------------------\nrequest.url.toString()\n--------------------------------------------------\nid.toString()\n--------------------------------------------------\nupdateBackingData.amount.toString()\n--------------------------------------------------\nprojectFragment?.story()?.toString()\n--------------------------------------------------\npayment.state().toString()\n--------------------------------------------------\nit.toHtml().toString()\n--------------------------------------------------\nuri.toString()\n--------------------------------------------------\nbuilder.toString()\n--------------------------------------------------\nInteger.toString(android.os.Build.VERSION.SDK_INT)\n--------------------------------------------------\nmessage.toString()\n--------------------------------------------------\nuser.backedProjectsCount().intValueOrZero().toString()\n--------------------------------------------------\nprojectState.value?.watchesCount()?.toString()\n--------------------------------------------------\ncode.toString()\n--------------------------------------------------\nshippingRule.first.toString()\n--------------------------------------------------\ns.toString()\n--------------------------------------------------\nthis.text.toString()\n--------------------------------------------------\ntext.toString()\n--------------------------------------------------\ntotalSelected.toString()\n--------------------------------------------------\nsb.toString()\n--------------------------------------------------\nlocalizedAmount.toString()\n--------------------------------------------------\nActivity::class.java.toString()\n--------------------------------------------------\nupdate.sequence().toString()\n--------------------------------------------------\nNavigationDrawerData.Section.Row::class.java.toString()\n--------------------------------------------------\nInt::class.java.toString()\n--------------------------------------------------\nProject::class.java.toString()\n--------------------------------------------------\nnameAndBlurb.first.toString()\n--------------------------------------------------\nProjectNotification::class.java.toString()\n--------------------------------------------------\nUser::class.java.toString()\n--------------------------------------------------\nrewardsItem.quantity().toString()\n--------------------------------------------------\nProjectData::class.java.toString()\n--------------------------------------------------\nReward::class.java.toString()\n--------------------------------------------------\nShippingRule::class.java.toString()\n--------------------------------------------------\nunansweredSurveyCount.toString()\n--------------------------------------------------\nCategory::class.java.toString()\n--------------------------------------------------\ncommentsCount.toString()\n--------------------------------------------------\nlikesCount.toString()\n--------------------------------------------------\nUpdate::class.java.toString()\n--------------------------------------------------\nbinding.commentTextComposer.text.toString()\n--------------------------------------------------\namount.toString()\n--------------------------------------------------\nbinding.stepperDisplay.text.toString()\n--------------------------------------------------\ncountry.toString()\n--------------------------------------------------\nit.limit().toString()\n--------------------------------------------------\nit.remaining().toString()\n--------------------------------------------------\npb.second.id().toString()\n--------------------------------------------------\nsdf.format(it).toString()\n--------------------------------------------------\nu?.projectId().toString()\n--------------------------------------------------\nit.second.second?.id()?.toString()\n--------------------------------------------------\nit.first.id().toString()\n--------------------------------------------------\npair.first.second.second?.id()?.toString()\n--------------------------------------------------\nit.second?.id()?.toString()\n--------------------------------------------------\nit.second?.id().toString()\n--------------------------------------------------\nit.request.url.toString()\n--------------------------------------------------\nobj.toString()\n--------------------------------------------------\nit.quantity().toString()\n--------------------------------------------------\ntag.url.toString()\n--------------------------------------------------\nit.second.id().toString()\n--------------------------------------------------\nit.first.first.first.id().toString()", "override fun toString(): String {\r\n        return (\r\n            \"Project{\" +\r\n                \"id=\" + id() + \", \" +\r\n                \"name=\" + name() + \", \" +\r\n                \"}\"\r\n            )\r\n    }" ],
  "BCR/145" : [ "adjustViewGroupTopMargin(binding.projectCardViewGroup, 0)\n--------------------------------------------------\nadjustViewGroupTopMargin(binding.projectCardViewGroup, this.context().resources.getDimension(R.dimen.grid_1).toInt())", "import android.view.ViewGroup.MarginLayoutParams\nimport android.view.ViewGroup\nimport android.view.View\nprivate fun adjustViewGroupTopMargin(viewGroup: ViewGroup, topMargin: Int) {\r\n        val marginParams = MarginLayoutParams(\r\n            viewGroup.layoutParams\r\n        )\r\n        marginParams.setMargins(0, topMargin, 0, 0)\r\n        viewGroup.layoutParams = marginParams\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup, MarginLayoutParams], wildcard=false, alias=null)" ],
  "MaterialFiles/359" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        writer.beginObject()\r\n        serialiseFields(writer)\r\n        writer.endObject()\r\n    }" ],
  "Iconify/860" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/390" : [ "filter.isFilterUnwatched.isFalse()\n--------------------------------------------------\nfilter.isFilterUpcoming.isFalse()", "private fun Boolean?.isFalse(): Boolean {\r\n        if (this == null) return false\r\n        return !this\r\n    }" ],
  "MaterialFiles/20" : [ "        setupCheckbox(R.string.p_widget_show_full_description, false).dependency = showDescription.key\n        setupList(R.string.p_widget_spacing)\r\n        setupList(R.string.p_widget_header_spacing)\n--------------------------------------------------\n        setupList(R.string.p_widget_spacing)\n        setupList(R.string.p_widget_header_spacing)\r\n        setupList(R.string.p_widget_footer_click)\n--------------------------------------------------\n        setupList(R.string.p_widget_header_spacing)\n        setupList(R.string.p_widget_footer_click)\r\n        setupList(R.string.p_widget_due_date_click)\n--------------------------------------------------\n        setupList(R.string.p_widget_footer_click)\n        setupList(R.string.p_widget_due_date_click)\r\n        setupList(R.string.p_widget_due_date_position, widgetPreferences.dueDatePosition.toString())\n--------------------------------------------------\n        setupList(R.string.p_widget_due_date_click)\n        setupList(R.string.p_widget_due_date_position, widgetPreferences.dueDatePosition.toString())\r\n        val showHeader = setupCheckbox(R.string.p_widget_show_header)", "import androidx.preference.Preference\nimport androidx.preference.ListPreference\nprivate fun setupList(resId: Int, defaultValue: String = \"0\"): ListPreference {\r\n        val preference = findPreference(resId) as ListPreference\r\n        val key = getString(resId) + appWidgetId\r\n        preference.key = key\r\n        preference.value = preferences.getStringValue(key) ?: defaultValue\r\n        return preference\r\n    }\nimport androidx.preference.ListPreference\nimport androidx.preference.Preference" ],
  "Trail-Sense/391" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport android.content.DialogInterface\npublic void onClick(DialogInterface dialog, int id) {\r\n    // Do nothing\r\n    return;\r\n}" ],
  "Trail-Sense/394" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/395" : [ "@Override\r\npublic final void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) {\r\n    if (lastOffset == verticalOffset) {\r\n        return;\r\n    }\r\n    lastOffset = verticalOffset;\r\n    if (verticalOffset == 0) {\r\n        if (mCurrentState != AppBarStateChangeListener.State.EXPANDED) {\r\n            onStateChanged(appBarLayout, AppBarStateChangeListener.State.EXPANDED);\r\n        }\r\n        mCurrentState = AppBarStateChangeListener.State.EXPANDED;\r\n    } else if (Math.abs(verticalOffset) >= appBarLayout.getTotalScrollRange()) {\r\n        if (mCurrentState != AppBarStateChangeListener.State.COLLAPSED) {\r\n            onStateChanged(appBarLayout, AppBarStateChangeListener.State.COLLAPSED);\r\n        }\r\n        mCurrentState = AppBarStateChangeListener.State.COLLAPSED;\r\n    } else {\r\n        if (mCurrentState != AppBarStateChangeListener.State.IDLE) {\r\n            onStateChanged(appBarLayout, AppBarStateChangeListener.State.IDLE);\r\n        }\r\n        mCurrentState = AppBarStateChangeListener.State.IDLE;\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic final void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) {\r\n    if (lastOffset == verticalOffset) {\r\n        return;\r\n    }\r\n    lastOffset = verticalOffset;\r\n    if (verticalOffset == 0) {\r\n        if (mCurrentState != AppBarStateChangeListener.State.EXPANDED) {\r\n            onStateChanged(appBarLayout, AppBarStateChangeListener.State.EXPANDED);\r\n        }\r\n        mCurrentState = AppBarStateChangeListener.State.EXPANDED;\r\n    } else if (Math.abs(verticalOffset) >= appBarLayout.getTotalScrollRange()) {\r\n        if (mCurrentState != AppBarStateChangeListener.State.COLLAPSED) {\r\n            onStateChanged(appBarLayout, AppBarStateChangeListener.State.COLLAPSED);\r\n        }\r\n        mCurrentState = AppBarStateChangeListener.State.COLLAPSED;\r\n    } else {\r\n        if (mCurrentState != AppBarStateChangeListener.State.IDLE) {\r\n            onStateChanged(appBarLayout, AppBarStateChangeListener.State.IDLE);\r\n        }\r\n        mCurrentState = AppBarStateChangeListener.State.IDLE;\r\n    }\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onStateChanged(int state) {\r\n    if (config.getListener() != null) {\r\n        config.getListener().onSlideStateChanged(state);\r\n    }\r\n}" ],
  "Trail-Sense/396" : [ "            if (folderTotal > 0) {\n                level = (MAX_PROGRESS * activityListener.getFolderCompleted() / folderTotal).coerceAtMost(MAX_PROGRESS)\r\n            }", "fun getFolderCompleted(): Int {\r\n            synchronized(lock) {\r\n                return folderCompleted\r\n            }\r\n        }" ],
  "MaterialFiles/352" : [ "", "import org.videolan.vlc.interfaces.Filterable\noverride fun onQueryTextChange(filterQueryString: String): Boolean {\r\n        val current = currentFragment\r\n        if (current is Filterable) {\r\n            if (filterQueryString.isEmpty())\r\n                (current as Filterable).restoreList()\r\n            else\r\n                (current as Filterable).filter(filterQueryString)\r\n            return true\r\n        }\r\n        return false\r\n    }\nImport(names=[org, videolan, vlc, interfaces, Filterable], wildcard=false, alias=null)" ],
  "MaterialFiles/351" : [ "gotEvents(it)", "import com.simplemobiletools.calendar.pro.models.Event\nprivate fun gotEvents(events: ArrayList<Event>) {\r\n        mEvents = events\r\n        getDays(true)\r\n    }" ],
  "Iconify/868" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/397" : [ "requireArguments().getInt(\"color\")\n--------------------------------------------------\nrequireArguments().getInt(\"value\")\n--------------------------------------------------\nstate.bundle!!.getInt(\"x\")\n--------------------------------------------------\nstate.bundle.getInt(\"y\")\n--------------------------------------------------\nstate.bundle.getInt(\"direction\")\n--------------------------------------------------\nstate.bundle.getInt(\"dataOffset\")\n--------------------------------------------------\nstate.bundle.getInt(\"maxDataOffset\")\n--------------------------------------------------\nstate.getInt(\"habitType\")\n--------------------------------------------------\nstate.getInt(\"paletteColor\")\n--------------------------------------------------\nstate.getInt(\"freqNum\")\n--------------------------------------------------\nstate.getInt(\"freqDen\")\n--------------------------------------------------\nstate.getInt(\"reminderHour\")\n--------------------------------------------------\nstate.getInt(\"reminderMin\")\n--------------------------------------------------\nstate.getInt(\"reminderDays\")\n--------------------------------------------------\nstate.bundle!!.getInt(\"dataOffset\")\n--------------------------------------------------\nbundle.getInt(\"action\")\n--------------------------------------------------\ncursor.getInt(index)\n--------------------------------------------------\nsharedPrefs.getInt(key, defValue)\n--------------------------------------------------\nintent.extras?.getInt(EXTRA_APPWIDGET_ID, INVALID_APPWIDGET_ID)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT)", "override fun getInt(index: Int): Int? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getInt(index)\r\n        }\r\n    }" ],
  "Trail-Sense/398" : [ "private void initApplication() {\r\n    MultiDex.install(this);\r\n    // Only log for internal builds\r\n    if (BuildConfig.FLAVOR.equals(\"internal\")) {\r\n        Timber.plant(new Timber.DebugTree());\r\n    }\r\n    createErrorHandler();\r\n    FirebaseHelper.initialize(getApplicationContext(), this.ffClient, this::initializeDependencies);\r\n}\n--------------------------------------------------\n//- Returns Boolean because incompatible Java \"void\" type with kotlin \"Void\" type for the lambda declaration\r\nprivate boolean initializeDependencies() {\r\n    setVisitorCookie();\r\n    this.pushNotifications.initialize();\r\n    final ApplicationLifecycleUtil appUtil = new ApplicationLifecycleUtil(this);\r\n    registerActivityLifecycleCallbacks(appUtil);\r\n    registerComponentCallbacks(appUtil);\r\n    // - Initialize Segment SDK\r\n    if (this.segmentTrackingClient != null) {\r\n        this.segmentTrackingClient.initialize();\r\n    }\r\n    // - Register lifecycle callback for Braze\r\n    this.remotePushClientType.registerActivityLifecycleCallbacks(this);\r\n    return true;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.res.TypedArray;\r\nimport android.util.AttributeSet;\r\nimport com.kickstarter.R;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport com.kickstarter.R\nimport android.util.AttributeSet\nimport android.content.res.TypedArray\nimport android.content.Context\nprotected void initialize(@NonNull final Context context, @Nullable final AttributeSet attrs, final int defStyleAttr, final int defStyleRes) {\r\n    final TypedArray attributes = context.obtainStyledAttributes(attrs, R.styleable.IconTextView, defStyleAttr, defStyleRes);\r\n    this.iconType = attributes.getInt(R.styleable.IconTextView_iconType, DEFAULT_ICON_TYPE);\r\n    attributes.recycle();\r\n}" ],
  "Iconify/867" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/354" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/353" : [ "super.onDestroy()\n--------------------------------------------------\noverlayDelegate.onDestroy()\n--------------------------------------------------\nsuperDelegate.onDestroy()\n--------------------------------------------------\nsuper.onDestroy(owner)", "import kotlinx.coroutines.cancel\noverride fun onDestroy() {\r\n        if (::adapter.isInitialized) adapter.cancel()\r\n        super.onDestroy()\r\n    }" ],
  "MaterialFiles/356" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Iconify/864" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "MaterialFiles/358" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/357" : [ "TextUtils.equals(status, \"CONNECTED\")\n--------------------------------------------------\nTextUtils.equals(status, \"FAILED\")\n--------------------------------------------------\nsuper.equals(other)\n--------------------------------------------------\nother.address.equals(address, ignoreCase = true)\n--------------------------------------------------\naddress.equals(uniswapKit.etherToken().address.hex, true)\n--------------------------------------------------\naddress.equals(uniswapV3Kit.etherToken().address.hex, true)\n--------------------------------------------------\nmanufacturer.equals(Build.MANUFACTURER, ignoreCase = true)", "override fun equals(other: Any?): Boolean {\r\n        if (other is ProFeaturesSessionKey) {\r\n            return nftName == other.nftName && accountId == other.accountId\r\n        }\r\n\r\n        return false\r\n    }" ],
  "Iconify/4" : [ "{\n        val now = clock.now().toCalendar()\r\n        val date = timestamp.toCalendar()\n--------------------------------------------------\n        val now = clock.now().toCalendar()\n        val date = timestamp.toCalendar()\r\n        val format = when {", "import java.util.Calendar\nprivate fun Long.toCalendar(): Calendar {\r\n    val calendar = Calendar.getInstance()\r\n    calendar.timeInMillis = this\r\n    return calendar\r\n}\nimport java.util.Calendar" ],
  "MaterialFiles/350" : [ "(activity as? AudioPlayerContainerActivity)?.playerBehavior?.lock(true)\n--------------------------------------------------\n(activity as? AudioPlayerContainerActivity)?.playerBehavior?.lock(false)\n--------------------------------------------------\nactivity.playerBehavior.lock(false)\n--------------------------------------------------\nactivity.playerBehavior.lock(true)\n--------------------------------------------------\nif (tipsDelegate.currentTip == null && playlistTipsDelegate.currentTip == null) lock(false)\n--------------------------------------------------\nplayerBehavior.lock(true)\n--------------------------------------------------\nplayerBehavior.lock(lock)\n--------------------------------------------------\nbinding.subtitleTracks.options.lock()\n--------------------------------------------------\nbinding.audioTracks.options.lock()", "fun lock() {\r\n        if (isCollapsed) toggle()\r\n        locked = true\r\n    }" ],
  "MaterialFiles/17" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/0" : [ "NumberOptions.builder()\n--------------------------------------------------\nCurrencyOptions.builder()\n--------------------------------------------------\nbuilder().tag(tag)\n--------------------------------------------------\nbuilder().tag(\"activity\")\n--------------------------------------------------\nbuilder().tag(\"discovery_activity_sample\")\n--------------------------------------------------\nbuilder().tag(\"category\")\n--------------------------------------------------\nbuilder().tag(\"category\" + sort.refTagSuffix())\n--------------------------------------------------\nbuilder().tag(\"category_featured\")\n--------------------------------------------------\nbuilder().tag(\"city\")\n--------------------------------------------------\nbuilder().tag(\"android_project_collection_tag_$tagId\")\n--------------------------------------------------\nbuilder().tag(\"dashboard\")\n--------------------------------------------------\nbuilder().tag(\"android_deep_link\")\n--------------------------------------------------\nbuilder().tag(\"discovery\")\n--------------------------------------------------\nbuilder().tag(\"pledge_info\")\n--------------------------------------------------\nbuilder().tag(\"android_project_share\")\n--------------------------------------------------\nbuilder().tag(\"push\")\n--------------------------------------------------\nbuilder().tag(\"recommended\")\n--------------------------------------------------\nbuilder().tag(\"recommended\" + sort.refTagSuffix())\n--------------------------------------------------\nbuilder().tag(\"search\")\n--------------------------------------------------\nbuilder().tag(\"search_featured\")\n--------------------------------------------------\nbuilder().tag(\"search_popular_title_view\")\n--------------------------------------------------\nbuilder().tag(\"search_popular_featured\")\n--------------------------------------------------\nbuilder().tag(\"social\")\n--------------------------------------------------\nbuilder().tag(\"survey\")\n--------------------------------------------------\nbuilder().tag(\"thanks\")\n--------------------------------------------------\nbuilder().tag(\"android_thanks_facebook_share\")\n--------------------------------------------------\nbuilder().tag(\"android_thanks_twitter_share\")\n--------------------------------------------------\nbuilder().tag(\"android_thanks_share\")\n--------------------------------------------------\nbuilder().tag(\"update\")\n--------------------------------------------------\nbuilder().tag(\"android_update_share\")\n--------------------------------------------------\nRelativeDateTimeOptions.builder()\n--------------------------------------------------\nCommentCardData.builder()\n--------------------------------------------------\nNavigationDrawerData.builder()\n--------------------------------------------------\nDiscoveryParams.builder()\n--------------------------------------------------\nNavigationDrawerData.Section.builder()\n--------------------------------------------------\nNavigationDrawerData.Section.Row.builder()\n--------------------------------------------------\nCheckoutData.builder()\n--------------------------------------------------\nAccessTokenEnvelope.builder()\n--------------------------------------------------\nActivityEnvelope.builder()\n--------------------------------------------------\nActivityEnvelope.UrlsEnvelope.builder()\n--------------------------------------------------\nActivityEnvelope.UrlsEnvelope.ApiEnvelope.builder()\n--------------------------------------------------\nbuilder().category(Activity.CATEGORY_WATCH)\n--------------------------------------------------\nbuilder().amount(10.0)\n--------------------------------------------------\nbuilder().amount(0.0)\n--------------------------------------------------\nbuilder().color(16760235)\n--------------------------------------------------\nbuilder().color(10878931)\n--------------------------------------------------\nbuilder().color(51627)\n--------------------------------------------------\nbuilder().color(58341)\n--------------------------------------------------\nCheckout.Backing.builder()\n--------------------------------------------------\nCheckout.builder()\n--------------------------------------------------\nCommentEnvelope.builder()\n--------------------------------------------------\nLaunchedCountry.builder()\n--------------------------------------------------\nConfig.builder()\n--------------------------------------------------\nCreatorDetails.builder()\n--------------------------------------------------\nErroredBacking.builder()\n--------------------------------------------------\nErroredBacking.Project.builder()\n--------------------------------------------------\nbuilder().amount(10.0f)\n--------------------------------------------------\nbuilder().id(1L)\n--------------------------------------------------\nbuilder().id(2L)\n--------------------------------------------------\nbuilder().id(3L)\n--------------------------------------------------\nbuilder().id(4L)\n--------------------------------------------------\nbuilder().id(5L)\n--------------------------------------------------\nbuilder().id(-1L)\n--------------------------------------------------\nbuilder().body(\"\")\n--------------------------------------------------\nbuilder().messages(listOf(message()))\n--------------------------------------------------\nbuilder().closed(false)\n--------------------------------------------------\nMessageThreadsEnvelope.builder()\n--------------------------------------------------\nMessageThreadsEnvelope.UrlsEnvelope.builder()\n--------------------------------------------------\nMessageThreadsEnvelope.UrlsEnvelope.ApiEnvelope.builder()\n--------------------------------------------------\nPageInfoEnvelope.builder()\n--------------------------------------------------\nPaymentSource.builder()\n--------------------------------------------------\nbuilder().ed(url)\n--------------------------------------------------\nProjectData.builder()\n--------------------------------------------------\nEnvironmentalCommitment.builder()\n--------------------------------------------------\nWeb.builder()\n--------------------------------------------------\nProject.builder()\n--------------------------------------------------\nUrls.builder()\n--------------------------------------------------\nBacking.builder()\n--------------------------------------------------\nProjectFaq.builder()\n--------------------------------------------------\nProjectNotification.builder()\n--------------------------------------------------\nProjectNotification.Project.builder()\n--------------------------------------------------\nProjectNotification.Urls.Api.builder()\n--------------------------------------------------\nProjectNotification.Urls.builder()\n--------------------------------------------------\nProjectStatsEnvelope.builder()\n--------------------------------------------------\nCumulativeStats.builder()\n--------------------------------------------------\nFundingDateStats.builder()\n--------------------------------------------------\nReferralAggregateStats.builder()\n--------------------------------------------------\nReferrerStats.builder()\n--------------------------------------------------\nRewardStats.builder()\n--------------------------------------------------\nVideoStats.builder()\n--------------------------------------------------\nbuilder().alert(\"You've received a new push notification\")\n--------------------------------------------------\nPushNotificationEnvelope.builder()\n--------------------------------------------------\nbuilder().backersCount(123)\n--------------------------------------------------\nSingleLocation.builder()\n--------------------------------------------------\nbuilder().convertedMinimum(1.0)\n--------------------------------------------------\nbuilder().id(IdFactory.id().toLong())\n--------------------------------------------------\nShippingRule.builder()\n--------------------------------------------------\nShippingRulesEnvelope.builder()\n--------------------------------------------------\nStoredCard.builder()\n--------------------------------------------------\nSurveyResponse.Urls.Web.builder()\n--------------------------------------------------\nSurveyResponse.Urls.builder()\n--------------------------------------------------\nSurveyResponse.builder()\n--------------------------------------------------\nUpdate.Urls.Web.builder()\n--------------------------------------------------\nbuilder().body(\"Update body\")\n--------------------------------------------------\nUpdate.Urls.builder()\n--------------------------------------------------\nbuilder().avatar(AvatarFactory.avatar())\n--------------------------------------------------\nbuilder().base(\"https://www.kickstarter.com/project/base.mp4\")\n--------------------------------------------------\nDiscoverEnvelope.builder()\n--------------------------------------------------\nDiscoverEnvelope.UrlsEnvelope.builder()\n--------------------------------------------------\nDiscoverEnvelope.UrlsEnvelope.ApiEnvelope.builder()\n--------------------------------------------------\nDiscoverEnvelope.StatsEnvelope.builder()\n--------------------------------------------------\nUpdatesEnvelope.builder()\n--------------------------------------------------\nUpdatesEnvelope.UrlsEnvelope.builder()\n--------------------------------------------------\nUpdatesEnvelope.UrlsEnvelope.ApiEnvelope.builder()\n--------------------------------------------------\nbuilder().code(200)\n--------------------------------------------------\nUpdatesGraphQlEnvelope.builder()\n--------------------------------------------------\nUser.builder()\n--------------------------------------------------\nApi.builder()\n--------------------------------------------------\nItem.builder()\n--------------------------------------------------\nLocation.builder()\n--------------------------------------------------\nAvatar.builder()\n--------------------------------------------------\nErrorEnvelope.builder()\n--------------------------------------------------\nUrlsEnvelope.builder()\n--------------------------------------------------\nApiEnvelope.builder()\n--------------------------------------------------\nvar builder = builder()\n--------------------------------------------------\nval builder = builder()\n--------------------------------------------------\nCancelBackingMutation.builder()\n--------------------------------------------------\nCreateSetupIntentMutation.builder()\n--------------------------------------------------\nCreateBackingMutation.builder()\n--------------------------------------------------\nGetBackingQuery.builder()\n--------------------------------------------------\nClearUserUnseenActivityMutation.builder()\n--------------------------------------------------\nGetProjectUpdatesQuery.builder()\n--------------------------------------------------\nGetProjectCommentsQuery.builder()\n--------------------------------------------------\nGetProjectUpdateCommentsQuery.builder()\n--------------------------------------------------\nGetRepliesForCommentQuery.builder()\n--------------------------------------------------\nFetchProjectQuery.builder()\n--------------------------------------------------\nGetRootCategoriesQuery.builder()\n--------------------------------------------------\nFetchCategoryQuery.builder()\n--------------------------------------------------\nFetchProjectsQuery.builder()\n--------------------------------------------------\nGetCommentQuery.builder()\n--------------------------------------------------\nCreateCommentMutation.builder()\n--------------------------------------------------\nCreatePasswordMutation.builder()\n--------------------------------------------------\nProjectCreatorDetailsQuery.builder()\n--------------------------------------------------\nDeletePaymentSourceMutation.builder()\n--------------------------------------------------\nErroredBackingsQuery.builder()\n--------------------------------------------------\nGetProjectBackingQuery.builder()\n--------------------------------------------------\nGetShippingRulesForRewardIdQuery.builder()\n--------------------------------------------------\nGetProjectAddOnsQuery.builder()\n--------------------------------------------------\nWatchProjectMutation.builder()\n--------------------------------------------------\nUnwatchProjectMutation.builder()\n--------------------------------------------------\nUserPaymentsQuery.builder()\n--------------------------------------------------\nSavePaymentMethodMutation.builder()\n--------------------------------------------------\nSendMessageMutation.builder()\n--------------------------------------------------\nUpdateBackingMutation.builder()\n--------------------------------------------------\nUpdateUserCurrencyMutation.builder()\n--------------------------------------------------\nUpdateUserPasswordMutation.builder()\n--------------------------------------------------\nUserPrivacyQuery.builder()\n--------------------------------------------------\nCreateFlaggingMutation.builder()\n--------------------------------------------------\nUpdateUserEmailMutation.builder()\n--------------------------------------------------\nSendEmailVerificationMutation.builder()\n--------------------------------------------------\nReward.builder()\n--------------------------------------------------\nRewardsItem.builder()\n--------------------------------------------------\nAiDisclosure.builder()\n--------------------------------------------------\nCategory.builder()\n--------------------------------------------------\nPhoto.builder()\n--------------------------------------------------\nUpdate.builder()\n--------------------------------------------------\nComment.builder()\n--------------------------------------------------\nVideo.builder()\n--------------------------------------------------\nAppDataInput.builder()\n--------------------------------------------------\nThirdPartyEventItemInput.builder()\n--------------------------------------------------\nTriggerThirdPartyEventInput.builder()\n--------------------------------------------------\nTriggerThirdPartyEventMutation.builder()\n--------------------------------------------------\nbuilder().project(backingWrapper.project)\n--------------------------------------------------\nbuilder().requestCode(requestCode)\n--------------------------------------------------\nbuilder().pledgeFlowContext(pledgeFlowContext)\n--------------------------------------------------\nApiPaginatorV2.builder<Activity, ActivityEnvelope, Unit>()\n--------------------------------------------------\nApolloPaginateV2.builder<CommentCardData, CommentEnvelope, Pair<Project, Update?>>()\n--------------------------------------------------\nbuilder<Project, DiscoverEnvelope, DiscoveryParams?>().nextPage(nextPage)\n--------------------------------------------------\nbuilder().refTagFromIntent(refTag.second)\n--------------------------------------------------\nMessageThread.builder()\n--------------------------------------------------\nApiPaginator.builder<MessageThread, MessageThreadsEnvelope, Pair<Project, Mailbox>>()\n--------------------------------------------------\nApiPaginator.builder<Project, DiscoverEnvelope, DiscoveryParams>()\n--------------------------------------------------\nApolloPaginateV2.builder<Update, UpdatesGraphQlEnvelope, Project>()\n--------------------------------------------------\nApiPaginatorV2.builder<Project, DiscoverEnvelope, DiscoveryParams>()\n--------------------------------------------------\nApolloPaginateV2.builder<CommentCardData, CommentEnvelope, Comment?>()", " @JvmStatic\r\n        fun builder(): Builder {\r\n            return Builder()\r\n                .page(1)\r\n                .perPage(15)\r\n        }" ],
  "Iconify/1" : [ "NumberOptions.builder()\n--------------------------------------------------\nCurrencyOptions.builder()\n--------------------------------------------------\nbuilder().tag(tag)\n--------------------------------------------------\nbuilder().tag(\"activity\")\n--------------------------------------------------\nbuilder().tag(\"discovery_activity_sample\")\n--------------------------------------------------\nbuilder().tag(\"category\")\n--------------------------------------------------\nbuilder().tag(\"category\" + sort.refTagSuffix())\n--------------------------------------------------\nbuilder().tag(\"category_featured\")\n--------------------------------------------------\nbuilder().tag(\"city\")\n--------------------------------------------------\nbuilder().tag(\"android_project_collection_tag_$tagId\")\n--------------------------------------------------\nbuilder().tag(\"dashboard\")\n--------------------------------------------------\nbuilder().tag(\"android_deep_link\")\n--------------------------------------------------\nbuilder().tag(\"discovery\")\n--------------------------------------------------\nbuilder().tag(\"pledge_info\")\n--------------------------------------------------\nbuilder().tag(\"android_project_share\")\n--------------------------------------------------\nbuilder().tag(\"push\")\n--------------------------------------------------\nbuilder().tag(\"recommended\")\n--------------------------------------------------\nbuilder().tag(\"recommended\" + sort.refTagSuffix())\n--------------------------------------------------\nbuilder().tag(\"search\")\n--------------------------------------------------\nbuilder().tag(\"search_featured\")\n--------------------------------------------------\nbuilder().tag(\"search_popular_title_view\")\n--------------------------------------------------\nbuilder().tag(\"search_popular_featured\")\n--------------------------------------------------\nbuilder().tag(\"social\")\n--------------------------------------------------\nbuilder().tag(\"survey\")\n--------------------------------------------------\nbuilder().tag(\"thanks\")\n--------------------------------------------------\nbuilder().tag(\"android_thanks_facebook_share\")\n--------------------------------------------------\nbuilder().tag(\"android_thanks_twitter_share\")\n--------------------------------------------------\nbuilder().tag(\"android_thanks_share\")\n--------------------------------------------------\nbuilder().tag(\"update\")\n--------------------------------------------------\nbuilder().tag(\"android_update_share\")\n--------------------------------------------------\nRelativeDateTimeOptions.builder()\n--------------------------------------------------\nCommentCardData.builder()\n--------------------------------------------------\nNavigationDrawerData.builder()\n--------------------------------------------------\nDiscoveryParams.builder()\n--------------------------------------------------\nNavigationDrawerData.Section.builder()\n--------------------------------------------------\nNavigationDrawerData.Section.Row.builder()\n--------------------------------------------------\nCheckoutData.builder()\n--------------------------------------------------\nAccessTokenEnvelope.builder()\n--------------------------------------------------\nActivityEnvelope.builder()\n--------------------------------------------------\nActivityEnvelope.UrlsEnvelope.builder()\n--------------------------------------------------\nActivityEnvelope.UrlsEnvelope.ApiEnvelope.builder()\n--------------------------------------------------\nbuilder().category(Activity.CATEGORY_WATCH)\n--------------------------------------------------\nbuilder().amount(10.0)\n--------------------------------------------------\nbuilder().amount(0.0)\n--------------------------------------------------\nbuilder().color(16760235)\n--------------------------------------------------\nbuilder().color(10878931)\n--------------------------------------------------\nbuilder().color(51627)\n--------------------------------------------------\nbuilder().color(58341)\n--------------------------------------------------\nCheckout.Backing.builder()\n--------------------------------------------------\nCheckout.builder()\n--------------------------------------------------\nCommentEnvelope.builder()\n--------------------------------------------------\nLaunchedCountry.builder()\n--------------------------------------------------\nConfig.builder()\n--------------------------------------------------\nCreatorDetails.builder()\n--------------------------------------------------\nErroredBacking.builder()\n--------------------------------------------------\nErroredBacking.Project.builder()\n--------------------------------------------------\nbuilder().amount(10.0f)\n--------------------------------------------------\nbuilder().id(1L)\n--------------------------------------------------\nbuilder().id(2L)\n--------------------------------------------------\nbuilder().id(3L)\n--------------------------------------------------\nbuilder().id(4L)\n--------------------------------------------------\nbuilder().id(5L)\n--------------------------------------------------\nbuilder().id(-1L)\n--------------------------------------------------\nbuilder().body(\"\")\n--------------------------------------------------\nbuilder().messages(listOf(message()))\n--------------------------------------------------\nbuilder().closed(false)\n--------------------------------------------------\nMessageThreadsEnvelope.builder()\n--------------------------------------------------\nMessageThreadsEnvelope.UrlsEnvelope.builder()\n--------------------------------------------------\nMessageThreadsEnvelope.UrlsEnvelope.ApiEnvelope.builder()\n--------------------------------------------------\nPageInfoEnvelope.builder()\n--------------------------------------------------\nPaymentSource.builder()\n--------------------------------------------------\nbuilder().ed(url)\n--------------------------------------------------\nProjectData.builder()\n--------------------------------------------------\nEnvironmentalCommitment.builder()\n--------------------------------------------------\nWeb.builder()\n--------------------------------------------------\nProject.builder()\n--------------------------------------------------\nUrls.builder()\n--------------------------------------------------\nBacking.builder()\n--------------------------------------------------\nProjectFaq.builder()\n--------------------------------------------------\nProjectNotification.builder()\n--------------------------------------------------\nProjectNotification.Project.builder()\n--------------------------------------------------\nProjectNotification.Urls.Api.builder()\n--------------------------------------------------\nProjectNotification.Urls.builder()\n--------------------------------------------------\nProjectStatsEnvelope.builder()\n--------------------------------------------------\nCumulativeStats.builder()\n--------------------------------------------------\nFundingDateStats.builder()\n--------------------------------------------------\nReferralAggregateStats.builder()\n--------------------------------------------------\nReferrerStats.builder()\n--------------------------------------------------\nRewardStats.builder()\n--------------------------------------------------\nVideoStats.builder()\n--------------------------------------------------\nbuilder().alert(\"You've received a new push notification\")\n--------------------------------------------------\nPushNotificationEnvelope.builder()\n--------------------------------------------------\nbuilder().backersCount(123)\n--------------------------------------------------\nSingleLocation.builder()\n--------------------------------------------------\nbuilder().convertedMinimum(1.0)\n--------------------------------------------------\nbuilder().id(IdFactory.id().toLong())\n--------------------------------------------------\nShippingRule.builder()\n--------------------------------------------------\nShippingRulesEnvelope.builder()\n--------------------------------------------------\nStoredCard.builder()\n--------------------------------------------------\nSurveyResponse.Urls.Web.builder()\n--------------------------------------------------\nSurveyResponse.Urls.builder()\n--------------------------------------------------\nSurveyResponse.builder()\n--------------------------------------------------\nUpdate.Urls.Web.builder()\n--------------------------------------------------\nbuilder().body(\"Update body\")\n--------------------------------------------------\nUpdate.Urls.builder()\n--------------------------------------------------\nbuilder().avatar(AvatarFactory.avatar())\n--------------------------------------------------\nbuilder().base(\"https://www.kickstarter.com/project/base.mp4\")\n--------------------------------------------------\nDiscoverEnvelope.builder()\n--------------------------------------------------\nDiscoverEnvelope.UrlsEnvelope.builder()\n--------------------------------------------------\nDiscoverEnvelope.UrlsEnvelope.ApiEnvelope.builder()\n--------------------------------------------------\nDiscoverEnvelope.StatsEnvelope.builder()\n--------------------------------------------------\nUpdatesEnvelope.builder()\n--------------------------------------------------\nUpdatesEnvelope.UrlsEnvelope.builder()\n--------------------------------------------------\nUpdatesEnvelope.UrlsEnvelope.ApiEnvelope.builder()\n--------------------------------------------------\nbuilder().code(200)\n--------------------------------------------------\nUpdatesGraphQlEnvelope.builder()\n--------------------------------------------------\nUser.builder()\n--------------------------------------------------\nApi.builder()\n--------------------------------------------------\nItem.builder()\n--------------------------------------------------\nLocation.builder()\n--------------------------------------------------\nAvatar.builder()\n--------------------------------------------------\nErrorEnvelope.builder()\n--------------------------------------------------\nUrlsEnvelope.builder()\n--------------------------------------------------\nApiEnvelope.builder()\n--------------------------------------------------\nvar builder = builder()\n--------------------------------------------------\nval builder = builder()\n--------------------------------------------------\nCancelBackingMutation.builder()\n--------------------------------------------------\nCreateSetupIntentMutation.builder()\n--------------------------------------------------\nCreateBackingMutation.builder()\n--------------------------------------------------\nGetBackingQuery.builder()\n--------------------------------------------------\nClearUserUnseenActivityMutation.builder()\n--------------------------------------------------\nGetProjectUpdatesQuery.builder()\n--------------------------------------------------\nGetProjectCommentsQuery.builder()\n--------------------------------------------------\nGetProjectUpdateCommentsQuery.builder()\n--------------------------------------------------\nGetRepliesForCommentQuery.builder()\n--------------------------------------------------\nFetchProjectQuery.builder()\n--------------------------------------------------\nGetRootCategoriesQuery.builder()\n--------------------------------------------------\nFetchCategoryQuery.builder()\n--------------------------------------------------\nFetchProjectsQuery.builder()\n--------------------------------------------------\nGetCommentQuery.builder()\n--------------------------------------------------\nCreateCommentMutation.builder()\n--------------------------------------------------\nCreatePasswordMutation.builder()\n--------------------------------------------------\nProjectCreatorDetailsQuery.builder()\n--------------------------------------------------\nDeletePaymentSourceMutation.builder()\n--------------------------------------------------\nErroredBackingsQuery.builder()\n--------------------------------------------------\nGetProjectBackingQuery.builder()\n--------------------------------------------------\nGetShippingRulesForRewardIdQuery.builder()\n--------------------------------------------------\nGetProjectAddOnsQuery.builder()\n--------------------------------------------------\nWatchProjectMutation.builder()\n--------------------------------------------------\nUnwatchProjectMutation.builder()\n--------------------------------------------------\nUserPaymentsQuery.builder()\n--------------------------------------------------\nSavePaymentMethodMutation.builder()\n--------------------------------------------------\nSendMessageMutation.builder()\n--------------------------------------------------\nUpdateBackingMutation.builder()\n--------------------------------------------------\nUpdateUserCurrencyMutation.builder()\n--------------------------------------------------\nUpdateUserPasswordMutation.builder()\n--------------------------------------------------\nUserPrivacyQuery.builder()\n--------------------------------------------------\nCreateFlaggingMutation.builder()\n--------------------------------------------------\nUpdateUserEmailMutation.builder()\n--------------------------------------------------\nSendEmailVerificationMutation.builder()\n--------------------------------------------------\nReward.builder()\n--------------------------------------------------\nRewardsItem.builder()\n--------------------------------------------------\nAiDisclosure.builder()\n--------------------------------------------------\nCategory.builder()\n--------------------------------------------------\nPhoto.builder()\n--------------------------------------------------\nUpdate.builder()\n--------------------------------------------------\nComment.builder()\n--------------------------------------------------\nVideo.builder()\n--------------------------------------------------\nAppDataInput.builder()\n--------------------------------------------------\nThirdPartyEventItemInput.builder()\n--------------------------------------------------\nTriggerThirdPartyEventInput.builder()\n--------------------------------------------------\nTriggerThirdPartyEventMutation.builder()\n--------------------------------------------------\nbuilder().project(backingWrapper.project)\n--------------------------------------------------\nbuilder().requestCode(requestCode)\n--------------------------------------------------\nbuilder().pledgeFlowContext(pledgeFlowContext)\n--------------------------------------------------\nApiPaginatorV2.builder<Activity, ActivityEnvelope, Unit>()\n--------------------------------------------------\nApolloPaginateV2.builder<CommentCardData, CommentEnvelope, Pair<Project, Update?>>()\n--------------------------------------------------\nbuilder<Project, DiscoverEnvelope, DiscoveryParams?>().nextPage(nextPage)\n--------------------------------------------------\nbuilder().refTagFromIntent(refTag.second)\n--------------------------------------------------\nMessageThread.builder()\n--------------------------------------------------\nApiPaginator.builder<MessageThread, MessageThreadsEnvelope, Pair<Project, Mailbox>>()\n--------------------------------------------------\nApiPaginator.builder<Project, DiscoverEnvelope, DiscoveryParams>()\n--------------------------------------------------\nApolloPaginateV2.builder<Update, UpdatesGraphQlEnvelope, Project>()\n--------------------------------------------------\nApiPaginatorV2.builder<Project, DiscoverEnvelope, DiscoveryParams>()\n--------------------------------------------------\nApolloPaginateV2.builder<CommentCardData, CommentEnvelope, Comment?>()", " @JvmStatic\r\n        fun builder(): Builder {\r\n            return Builder()\r\n                .page(1)\r\n                .perPage(15)\r\n        }" ],
  "VinylMusicPlayer/133" : [ "\n                        val image = getAlbumArtDrawable(service, bitmap)\n                        val roundedBitmap = createRoundedBitmap(\n--------------------------------------------------\n\n                        val image = getAlbumArtDrawable(service, bitmap)\n                        val roundedBitmap =", "import code.name.monkey.retromusic.R\nimport androidx.core.content.ContextCompat\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.BitmapDrawable\nimport android.content.Context\nprotected fun getAlbumArtDrawable(context: Context, bitmap: Bitmap?): Drawable {\n        return if (bitmap == null) {\n            ContextCompat.getDrawable(context, R.drawable.default_audio_art)!!\n        } else {\n            BitmapDrawable(context.resources, bitmap)\n        }\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, graphics, drawable, BitmapDrawable], wildcard=false, alias=null)\nImport(names=[android, graphics, drawable, Drawable], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, R], wildcard=false, alias=null)" ],
  "Neo-Backup/14" : [ "", "import android.util.JsonReader\noverride fun fromReader(reader: JsonReader): DeviceId {\r\n            var id: String? = null\r\n            with(reader) {\r\n                beginObject()\r\n                if (hasNext() && KEY_ID == nextName()) {\r\n                    id = nextString()\r\n                }\r\n            }\r\n            return DeviceId(id)\r\n        }\nImport(names=[android, util, JsonReader], wildcard=false, alias=null)" ],
  "Feeder/280" : [ "            Spacer(Modifier.height(8.dp))\n            EntryMoodSection(\r\n                currentMood = mood,", "import com.mhss.app.mybrain.R\nimport com.mhss.app.mybrain.util.diary.Mood\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\n\r\n@Composable\r\nfun EntryMoodSection(\r\n    currentMood: Mood,\r\n    onMoodChange: (Mood) -> Unit\r\n) {\r\n    val moods = listOf(Mood.AWESOME, Mood.GOOD, Mood.OKAY, Mood.BAD, Mood.TERRIBLE)\r\n    Row(\r\n        Modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.SpaceBetween,\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        moods.forEach { mood ->\r\n            MoodItem(\r\n                mood = mood,\r\n                chosen = mood == currentMood,\r\n                onMoodChange = { onMoodChange(mood) }\r\n            )\r\n        }\r\n    }\r\n}\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport com.mhss.app.mybrain.util.diary.Mood\nimport com.mhss.app.mybrain.R" ],
  "Feeder/281" : [ "getValidUrl(link) ?: return", "private fun getValidUrl(urlString: String): String? {\r\n        if (urlString.isBlank())\r\n            return null\r\n\r\n        val url = createUrl(urlString) ?: createUrl(urlString, \"https://\") ?: return null\r\n\r\n        return url.toString()\r\n    }" ],
  "Feeder/282" : [ "binding.View.setup(View, value)\n--------------------------------------------------\nbinding.Theme.setup(Theme, value)\n--------------------------------------------------\nbinding.DateFormat.setup(DateFormat, value)\n--------------------------------------------------\nbinding.TextSize.setup(TextSize, value)\n--------------------------------------------------\nbinding.MaxItems.setup(MaxItems, model.preferences.maxItems)\n--------------------------------------------------\nbinding.MaxLines.setup(MaxLines, model.preferences.maxLines)\n--------------------------------------------------\nbinding.MaxTitle.setup(MaxTitle, model.preferences.maxTitle)\n--------------------------------------------------\nbinding.AutoBackup.setup(AutoBackup, value)", "import com.omgodse.notally.databinding.PreferenceSeekbarBinding\nprivate fun PreferenceSeekbarBinding.setup(info: SeekbarInfo, initialValue: Int) {\r\n        Title.setText(info.title)\r\n\r\n        Slider.valueTo = info.max.toFloat()\r\n        Slider.valueFrom = info.min.toFloat()\r\n\r\n        Slider.value = initialValue.toFloat()\r\n\r\n        Slider.addOnChangeListener { _, value, _ ->\r\n            model.savePreference(info, value.toInt())\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, databinding, PreferenceSeekbarBinding], wildcard=false, alias=null)" ],
  "fcitx5-android/19" : [ "\n                val displayCount = if (unreadCount <= MAX_COUNT) unreadCount.toString() else \"$MAX_COUNT+\"\r\n                remoteViews.setTextViewText(R.id.unread_count, displayCount)\n--------------------------------------------------\n                    val folderId = folderRepository.getFolderId(account, folderServerId)\n                    putString(\"unread_widget.$widgetId.folder_id\", folderId?.toString())\r\n                }\n--------------------------------------------------\naddress.toString()\n--------------------------------------------------\nthis?.toString()\n--------------------------------------------------\nemailSection.toString()\n--------------------------------------------------\ntoString()\n--------------------------------------------------\nformatter.toString()\n--------------------------------------------------\nlinkText.toString()\n--------------------------------------------------\nStringBuilder(length).apply {\n    this@asString.forEach {\n        append(it)\n    }\n}.toString()\n--------------------------------------------------\nUUID.randomUUID().toString()\n--------------------------------------------------\nfolderDetails.folder.id.toString()\n--------------------------------------------------\nfolderId.toString()\n--------------------------------------------------\ndatabaseId.toString()\n--------------------------------------------------\nmessagePartId.toString()\n--------------------------------------------------\nvalue?.toString()\n--------------------------------------------------\nvalue.toString()\n--------------------------------------------------\ntext.toString()", "override fun toString(): String {\r\n        if (output.isEmpty()) {\r\n            return \"\"\r\n        }\r\n\r\n        var lastIndex = output.lastIndex\r\n        while (lastIndex >= 0 && output[lastIndex] == '\\n') {\r\n            lastIndex--\r\n        }\r\n\r\n        return output.substring(0, lastIndex + 1)\r\n    }" ],
  "MaterialFiles/813" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/816" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/124" : [ "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n", "public synchronized static ImageList getInstance() {\r\n    if (instance == null)\r\n        instance = new ImageList();\r\n    return instance;\r\n}" ],
  "VinylMusicPlayer/126" : [ "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n", "public synchronized static ImageList getInstance() {\r\n    if (instance == null)\r\n        instance = new ImageList();\r\n    return instance;\r\n}" ],
  "VinylMusicPlayer/120" : [ "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n", "public synchronized static ImageList getInstance() {\r\n    if (instance == null)\r\n        instance = new ImageList();\r\n    return instance;\r\n}" ],
  "VinylMusicPlayer/122" : [ "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n", "public synchronized static ImageList getInstance() {\r\n    if (instance == null)\r\n        instance = new ImageList();\r\n    return instance;\r\n}" ],
  "Neo-Backup/28" : [ "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    registerStartEventListener();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    registerStartEventListener();\r\n    if (data != null) {\r\n        if (data.getStringExtra(\"url\") != null)\r\n            Log.e(getClass().getName(), \"data.getStringExtra(\\\"url\\\") => \" + data.getStringExtra(\"url\"));\r\n        if (data.getStringExtra(\"ex\") != null)\r\n            Log.e(getClass().getName(), \"data.getStringExtra(\\\"ex\\\") => \" + data.getStringExtra(\"ex\"));\r\n        if (data.getStringExtra(\"obj\") != null)\r\n            Log.e(getClass().getName(), \"data.getStringExtra(\\\"obj\\\") => \" + data.getStringExtra(\"obj\"));\r\n    }\r\n    if (requestCode == START_ACTIVITY) {\r\n        skipStopGps = false;\r\n        if (!mIsBound || mTracker == null) {\r\n            bindGpsTracker();\r\n        } else {\r\n            onGpsTrackerBound();\r\n        }\r\n    } else {\r\n        advancedWorkoutListAdapter.reload();\r\n    }\r\n    updateView();\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport java.util.List\nimport org.runnerup.common.util.Constants\nimport org.runnerup.R\nimport android.content.IntentFilter\nimport android.content.Intent\nimport android.content.BroadcastReceiver\nprivate void registerStartEventListener() {\r\n    IntentFilter intentFilter = new IntentFilter();\r\n    // START_WORKOUT is used by Wear/Pebble when GPS is captured\r\n    // START_ACTIVITY should also start GPS if not done\r\n    intentFilter.addAction(Constants.Intents.START_ACTIVITY);\r\n    intentFilter.addAction(Constants.Intents.START_WORKOUT);\r\n    registerReceiver(startEventBroadcastReceiver, intentFilter);\r\n}" ],
  "Neo-Backup/27" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    Log.d(TAG, \"onNewIntent: \" + intent.getLongExtra(PARAM_NOTE_ID, 0));\r\n    setIntent(intent);\r\n    if (fragment != null) {\r\n        getSupportFragmentManager().beginTransaction().detach(fragment).commit();\r\n        fragment = null;\r\n    }\r\n    launchNoteFragment();\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\r\n        activityBinding.searchView.setQuery(intent.getStringExtra(SearchManager.QUERY), true);\r\n    }\r\n    super.onNewIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.util.Log;\r\nimport it.niedermann.owncloud.notes.persistence.entity.Note\nimport it.niedermann.owncloud.notes.R\nimport androidx.fragment.app.Fragment\nimport android.util.Log\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    Log.d(TAG, \"onNewIntent: \" + intent.getLongExtra(PARAM_NOTE_ID, 0));\r\n    setIntent(intent);\r\n    if (fragment != null) {\r\n        getSupportFragmentManager().beginTransaction().detach(fragment).commit();\r\n        fragment = null;\r\n    }\r\n    launchNoteFragment();\r\n}" ],
  "Neo-Backup/25" : [ "", "import timber.log.Timber;\r\nimport timber.log.Timber\nimport com.money.manager.ex.R\n@Override\r\nprotected void onResume() {\r\n    try {\r\n        super.onResume();\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"resuming main activity\");\r\n    }\r\n    // check if restart activity\r\n    if (isRestartActivitySet()) {\r\n        // restart and exit\r\n        restartActivity();\r\n    }\r\n}" ],
  "Neo-Backup/24" : [ "{\r\n        super.onCreate(savedInstanceState)\r\n        theme.applyTheme(this)\r\n        window.statusBarColor = ContextCompat.getColor(this, android.R.color.transparent)\r\n        val binding = ActivityLocationPickerBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        toolbar = binding.toolbar\r\n        appBarLayout = binding.appBarLayout\r\n        toolbarLayout = binding.collapsingToolbarLayout\r\n        coordinatorLayout = binding.coordinator\r\n        searchView = binding.search.apply {\r\n            setOnClickListener { searchPlace() }\r\n        }\r\n        loadingIndicator = binding.loadingIndicator\r\n        chooseRecentLocation = binding.chooseRecentLocation\r\n        recyclerView = binding.recentLocations\r\n        val configuration = resources.configuration\r\n        if (configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\r\n                && configuration.smallestScreenWidthDp < 480) {\r\n            searchView.visibility = View.GONE\r\n        }\r\n        val currentPlace: Place? = intent.getParcelableExtra(EXTRA_PLACE)\r\n        if (savedInstanceState == null) {\r\n            mapPosition = currentPlace?.mapPosition ?: intent.getParcelableExtra(EXTRA_MAP_POSITION)\r\n        } else {\r\n            mapPosition = savedInstanceState.getParcelable(EXTRA_MAP_POSITION)\r\n            offset = savedInstanceState.getInt(EXTRA_APPBAR_OFFSET)\r\n            viewModel.restoreState(savedInstanceState)\r\n        }\r\n        toolbar.setNavigationIcon(R.drawable.ic_outline_arrow_back_24px)\r\n        toolbar.setNavigationOnClickListener { collapseToolbar() }\r\n        toolbar.inflateMenu(R.menu.menu_location_picker)\r\n        val menu = toolbar.menu\r\n        search = menu.findItem(R.id.menu_search)\r\n        search.setOnActionExpandListener(this)\r\n        toolbar.setOnMenuItemClickListener(this)\r\n        val themeColor = theme.themeColor\r\n        themeColor.applyToNavigationBar(this)\r\n        val dark = preferences.mapTheme == 2\r\n                || preferences.mapTheme == 0 && theme.themeBase.isDarkTheme(this)\r\n        map.init(this, this, dark)\r\n        val params = appBarLayout.layoutParams as CoordinatorLayout.LayoutParams\r\n        val behavior = AppBarLayout.Behavior()\r\n        behavior.setDragCallback(\r\n                object : DragCallback() {\r\n                    override fun canDrag(appBarLayout: AppBarLayout): Boolean {\r\n                        return false\r\n                    }\r\n                })\r\n        params.behavior = behavior\r\n        appBarLayout.addOnOffsetChangedListener { appBarLayout: AppBarLayout, offset: Int ->\r\n            if (offset == 0 && this.offset != 0) {\r\n                closeSearch()\r\n                hideKeyboard()\r\n            }\r\n            this.offset = offset\r\n            toolbar.alpha = abs(offset / appBarLayout.totalScrollRange.toFloat())\r\n        }\r\n        coordinatorLayout.addOnLayoutChangeListener(\r\n                object : View.OnLayoutChangeListener {\r\n                    override fun onLayoutChange(\r\n                            v: View, l: Int, t: Int, r: Int, b: Int, ol: Int, ot: Int, or: Int, ob: Int) {\r\n                        coordinatorLayout.removeOnLayoutChangeListener(this)\r\n                        locationDao\r\n                                .getPlaceUsage()\r\n                                .observe(this@LocationPickerActivity) {\r\n                                    places: List<PlaceUsage> -> updatePlaces(places)\r\n                                }\r\n                    }\r\n                })\r\n        if (offset != 0) {\r\n            appBarLayout.post { expandToolbar(false) }\r\n        }\r\n        findViewById<View>(R.id.google_marker).visibility = View.VISIBLE\r\n        searchAdapter = LocationSearchAdapter(viewModel.getAttributionRes(dark), this)\r\n        recentsAdapter = LocationPickerAdapter(this, inventory, colorProvider, this)\r\n        recentsAdapter!!.setHasStableIds(true)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        recyclerView.adapter = if (search.isActionViewExpanded) searchAdapter else recentsAdapter\r\n\r\n        binding.currentLocation.setOnClickListener { currentLocation() }\r\n        binding.selectThisLocation.setOnClickListener { selectLocation() }\r\n    }", "override fun onDestroy() {\r\n        super.onDestroy()\r\n        map.onDestroy()\r\n    }" ],
  "Neo-Backup/23" : [ "override fun onPause() {\n    super.onPause()\n    progressViewUpdateHelper.stop()\n}", "import code.name.monkey.retromusic.R\noverride fun onResume() {\n        super.onResume()\n        progressViewUpdateHelper.start()\n    }" ],
  "Neo-Backup/20" : [ "viewHolder?.bindData(getItem(position))\n--------------------------------------------------\nviewHolder.bindData(data)\n--------------------------------------------------\nviewHolder.bindData(textElement)\n--------------------------------------------------\nviewHolder.bindData(imageElement)\n--------------------------------------------------\nviewHolder.bindData(videoElement)\n--------------------------------------------------\nviewHolder.bindData(audioElement)\n--------------------------------------------------\nviewHolder.bindData(externalSourceViewElement)", "import com.kickstarter.models.Message\n @Throws(Exception::class)\r\n    override fun bindData(data: Any?) {\r\n        val message = requireNotNull(data as Message?)\r\n        viewModel.inputs.configureWith(message)\r\n    }\nImport(names=[com, kickstarter, models, Message], wildcard=false, alias=null)" ],
  "Feeder/298" : [ "getObservable()", "import com.omgodse.notally.room.Item\nimport com.omgodse.notally.miscellaneous.Constants\nimport androidx.lifecycle.LiveData\noverride fun getObservable(): LiveData<List<Item>> {\r\n        val label = requireNotNull(requireArguments().getString(Constants.SelectedLabel))\r\n        return model.getNotesByLabel(label)\r\n    }\nImport(names=[androidx, lifecycle, LiveData], wildcard=false, alias=null)" ],
  "MaterialFiles/825" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "MaterialFiles/828" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/827" : [ "delegate.close()\n--------------------------------------------------\nclose()\n--------------------------------------------------\nsuper.close()\n--------------------------------------------------\nlockChannel?.close()", "override fun close() {\r\n        if (lazyDelegate.isInitialized()) {\r\n            delegate.close()\r\n        }\r\n    }" ],
  "VinylMusicPlayer/594" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    // Update currenlty selected item\r\n    mToolBarSelectedItemId = itemId;\r\n    if (itemId == R.id.menu_style) {\r\n        showStylePopup(findViewById(R.id.menu_style));\r\n        return true;\r\n    } else if (itemId == R.id.menu_markdown_view) {\r\n        toggleMarkdownView();\r\n        return true;\r\n    } else if (itemId == R.id.menu_toggle_title) {\r\n        showHideTitle(!mTitleBarVisible);\r\n        return true;\r\n    } else if (itemId == R.id.menu_save) {\r\n        handleSave();\r\n        return true;\r\n    } else if (itemId == R.id.menu_revert) {\r\n        handleRevert();\r\n        return true;\r\n    } else if (itemId == R.id.menu_metadata) {\r\n        handleMetadata();\r\n        return true;\r\n    } else if (itemId == R.id.menu_edit_tools) {\r\n        showEditToolFragment();\r\n        return true;\r\n    } else if (itemId == R.id.menu_encrypt_decrypt) {\r\n        handleEncryptDecrypt();\r\n        return true;\r\n    } else if (itemId == R.id.menu_paste_calendar) {\r\n        doPasteCalendar();\r\n        return true;\r\n    } else if (itemId == R.id.menu_full_screen) {\r\n        enterImmersiveMode();\r\n        return true;\r\n    } else if (itemId == R.id.menu_clear_cache) {\r\n        doClearCache();\r\n        return true;\r\n    } else if (itemId == R.id.menu_export) {\r\n        handleExport();\r\n        return true;\r\n    } else if (itemId == R.id.menu_print) {\r\n        if (mMarkdownMode)\r\n            createWebPrintJob(mMarkdownView);\r\n        else\r\n            doExportHTML(true);\r\n        return true;\r\n    } else if (itemId == R.id.menu_share) {\r\n        doShare();\r\n        return true;\r\n    } else if (itemId == android.R.id.home) {\r\n        handleHome();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "MaterialFiles/820" : [ "getTabsMask()", "import com.simplemobiletools.contacts.pro.extensions.config\nimport com.simplemobiletools.contacts.pro.R\nprivate fun getTabsMask(): Int {\r\n        var mask = TAB_CONTACTS\r\n        if (config.showTabs and TAB_FAVORITES != 0) {\r\n            mask += TAB_FAVORITES\r\n        }\r\n        return mask\r\n    }" ],
  "VinylMusicPlayer/112" : [ "super.onClick(v)", "import java.io.File\nimport code.name.monkey.retromusic.R\nimport android.view.View\noverride fun onClick(v: View?) {\n            val position = layoutPosition\n            if (isPositionInRange(position)) {\n                if (isInQuickSelectMode) {\n                    toggleChecked(position)\n                } else {\n                    iCallbacks?.onFileSelected(dataSet[position])\n                }\n            }\n        }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "fcitx5-android/20" : [ "{\n        val account = preferences.getAccount(accountUuid) ?: error(\"Account $accountUuid not found\")\r\n\n--------------------------------------------------\ncontext = get()\n--------------------------------------------------\ndefaultFolderProvider = get()\n--------------------------------------------------\nmessageStoreManager = get()\n--------------------------------------------------\nget()\n--------------------------------------------------\nresourceProvider = get()\n--------------------------------------------------\ncontactRepository = get()\n--------------------------------------------------\nalarmManager = get()\n--------------------------------------------------\ncontentResolver = get()\n--------------------------------------------------\nprocessExecutor = get()\n--------------------------------------------------\nDI.get(Context::class.java)\n--------------------------------------------------\ncolumnMap?.get(flag)\n--------------------------------------------------\nDI.get<MessageListRepository>()\n--------------------------------------------------\ndisplayHtmlFactory = get()\n--------------------------------------------------\nsystemConnectivityManager = get()\n--------------------------------------------------\nsystemPowerManager = get()\n--------------------------------------------------\nlocalStoreProvider = get()\n--------------------------------------------------\nstorageManager = get()\n--------------------------------------------------\nbasicPartInfoExtractor = get()\n--------------------------------------------------\nmessageViewInfoExtractorFactory = get()\n--------------------------------------------------\nhtmlSettingsProvider = get()\n--------------------------------------------------\nthemeManager = get()\n--------------------------------------------------\nletterExtractor = get()\n--------------------------------------------------\nconfig = get()\n--------------------------------------------------\ncontactLetterBitmapCreator = get()\n--------------------------------------------------\ncontactPhotoLoader = get()\n--------------------------------------------------\naccountManager = get()\n--------------------------------------------------\nmessageCountsProvider = get()\n--------------------------------------------------\nmessageListRepository = get()\n--------------------------------------------------\naccountFallbackImageProvider = get()\n--------------------------------------------------\nappCoroutineScope = get(named(\"AppCoroutineScope\"))\n--------------------------------------------------\ngeneralSettingsManager = get()\n--------------------------------------------------\nchangeLogManager = get()\n--------------------------------------------------\nresources = get()\n--------------------------------------------------\nfolderRepository = get()\n--------------------------------------------------\nget<DisplayHtmlUiFactory>().createForMessageView()\n--------------------------------------------------\ntextPartFinder = get()\n--------------------------------------------------\nquoteDateFormatter = get()\n--------------------------------------------------\nclipboardManager = get()\n--------------------------------------------------\npreferences = get()\n--------------------------------------------------\nmessagingController = get()\n--------------------------------------------------\nmessageRepository = get()\n--------------------------------------------------\ncontactNameProvider = get()\n--------------------------------------------------\nViewConfiguration.get(context)\n--------------------------------------------------\nclock = get()\n--------------------------------------------------\nreplyRoParser = get()\n--------------------------------------------------\nmessageHelper = get()", "override fun get(index: Int): Char {\r\n        require(index in 0..(length - 1)) { \"index: $index; length: $length\" }\r\n\r\n        var offset = index\r\n        for (i in 0..(segments.size - 1)) {\r\n            val segment = segments[i]\r\n            val segmentLength = segment.endIndex - segment.startIndex\r\n            if (offset < segmentLength) {\r\n                return text[segment.startIndex + offset]\r\n            }\r\n            offset -= segmentLength\r\n        }\r\n\r\n        throw AssertionError()\r\n    }" ],
  "VinylMusicPlayer/107" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/28" : [ "/**\r\n * Starts band select by adding the drawable to the RecyclerView's overlay.\r\n */\r\nprivate void startBandSelect(@NonNull MotionEvent e) {\r\n    if (DEBUG) {\r\n        checkState(!isActive());\r\n    }\r\n    if (!MotionEvents.isCtrlKeyPressed(e)) {\r\n        mSelectionTracker.clearSelection();\r\n    }\r\n    Point origin = MotionEvents.getOrigin(e);\r\n    if (DEBUG)\r\n        Log.d(TAG, \"Starting band select @ \" + origin);\r\n    mModel = mHost.createGridModel();\r\n    mModel.addOnSelectionChangedListener(mGridObserver);\r\n    mLock.start();\r\n    mFocusDelegate.clearFocus();\r\n    mOrigin = origin;\r\n    // NOTE: Pay heed that resizeBand modifies the y coordinates\r\n    // in onScrolled. Not sure if model expects this. If not\r\n    // it should be defending against this.\r\n    mModel.startCapturing(mOrigin);\r\n}\n--------------------------------------------------\n/**\r\n * Explicitly kicks off a gesture multi-select.\r\n */\r\nvoid start() {\r\n    // Partner code in MotionInputHandler ensures items\r\n    // are selected and range anchor initialized prior to\r\n    // start being called.\r\n    // Verify the truth of that statement here\r\n    // to make the implicit coupling less of a time bomb.\r\n    if (mStarted) {\r\n        if (DEBUG) {\r\n            Log.e(TAG, \"Attempting to start, but state is already=started.\");\r\n            throw new IllegalStateException(\"Attempting to start, but state is already=started.\");\r\n        }\r\n        return;\r\n    }\r\n    mStarted = true;\r\n    mLock.start();\r\n}\n--------------------------------------------------\n", "import androidx.lifecycle.Lifecycle;\r\nimport androidx.lifecycle.Lifecycle\nvoid start() {\r\n    Lifecycle.State state = registry.getCurrentState();\r\n    if (!state.equals(Lifecycle.State.STARTED) && !state.equals(Lifecycle.State.DESTROYED))\r\n        setState(Lifecycle.State.STARTED);\r\n}" ],
  "fcitx5-android/2" : [ "{\n        Timber.v(\"AccountPushController(%s).stop()\", account.uuid)\r\n        stopListeningForPushFolders()\n--------------------------------------------------\n        Timber.v(\"AccountPushController(%s).stop()\", account.uuid)\n        stopListeningForPushFolders()\r\n        stopBackendPusher()\n--------------------------------------------------\n        stopListeningForPushFolders()\n        stopBackendPusher()\r\n    }\n--------------------------------------------------\n{\r\n        backendPusher?.stop()\r\n        backendPusher = null\r\n    }", "import timber.log.Timber\nfun stop() {\r\n        Timber.v(\"PushServiceManager.stop()\")\r\n        if (isServiceStarted.compareAndSet(true, false)) {\r\n            stopService()\r\n        } else {\r\n            Timber.v(\"..PushService is not running\")\r\n        }\r\n    }\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/580" : [ "@Override\r\npublic void write(JsonWriter writer, @Nullable Boolean value) {\r\n    serializeNullable(value, writer);\r\n}\n--------------------------------------------------\npublic static void serialize(final Map<String, String> value, final JsonWriter sw) {\r\n    sw.writeByte(JsonWriter.OBJECT_START);\r\n    final int size = value.size();\r\n    if (size > 0) {\r\n        final Iterator<Map.Entry<String, String>> iterator = value.entrySet().iterator();\r\n        Map.Entry<String, String> kv = iterator.next();\r\n        StringConverter.serializeShort(kv.getKey(), sw);\r\n        sw.writeByte(JsonWriter.SEMI);\r\n        StringConverter.serializeNullable(kv.getValue(), sw);\r\n        for (int i = 1; i < size; i++) {\r\n            sw.writeByte(JsonWriter.COMMA);\r\n            kv = iterator.next();\r\n            StringConverter.serializeShort(kv.getKey(), sw);\r\n            sw.writeByte(JsonWriter.SEMI);\r\n            StringConverter.serializeNullable(kv.getValue(), sw);\r\n        }\r\n    }\r\n    sw.writeByte(JsonWriter.OBJECT_END);\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.annotation.Nullable\npublic static void serializeNullable(@Nullable final Map<String, String> value, final JsonWriter sw) {\r\n    if (value == null) {\r\n        sw.writeNull();\r\n    } else {\r\n        serialize(value, sw);\r\n    }\r\n}" ],
  "VinylMusicPlayer/587" : [ "private static List<Intent> targetIntents(@NonNull final Context context, @NonNull final Uri uri) {\r\n    final Uri fakeUri = Uri.parse(\"http://www.kickstarter.com\");\r\n    final Intent browserIntent = new Intent(Intent.ACTION_VIEW, fakeUri);\r\n    return Observable.from(context.getPackageManager().queryIntentActivities(browserIntent, 0)).filter(resolveInfo -> !resolveInfo.activityInfo.packageName.contains(\"com.kickstarter\")).map(resolveInfo -> {\r\n        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);\r\n        intent.setPackage(resolveInfo.activityInfo.packageName);\r\n        intent.setData(uri);\r\n        return intent;\r\n    }).toList().toBlocking().single();\r\n}\n--------------------------------------------------\n/**\r\n * If a ref tag cookie has been stored for this project this returns the ref tag embedded in the cookie. If a\r\n * cookie has not yet been set it returns `null`.\r\n */\r\n@Nullable\r\npublic static RefTag storedCookieRefTagForProject(@NonNull final Project project, @NonNull final CookieManager cookieManager, @NonNull final SharedPreferences sharedPreferences) {\r\n    final HttpCookie cookie = findRefTagCookieForProject(project, cookieManager, sharedPreferences);\r\n    if (cookie == null) {\r\n        return null;\r\n    }\r\n    final String[] components = cookie.getValue().split(COOKIE_VALUE_SEPARATOR);\r\n    if (components.length > 0) {\r\n        return RefTag.from(components[0]);\r\n    }\r\n    return null;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\npublic static ApiEndpoint from(@NonNull final String url) {\r\n    for (final ApiEndpoint value : values()) {\r\n        if (value.url != null && value.url.equals(url)) {\r\n            return value;\r\n        }\r\n    }\r\n    final ApiEndpoint endpoint = CUSTOM;\r\n    endpoint.url = url;\r\n    return endpoint;\r\n}" ],
  "VinylMusicPlayer/586" : [ "private SupportSQLiteOpenHelper createFrameworkOpenHelper(File databaseFile) {\r\n    final int version;\r\n    try {\r\n        version = DBUtil.readVersion(databaseFile);\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(\"Malformed database file, unable to read version.\", e);\r\n    }\r\n    FrameworkSQLiteOpenHelperFactory factory = new FrameworkSQLiteOpenHelperFactory();\r\n    Configuration configuration = Configuration.builder(mContext).name(databaseFile.getAbsolutePath()).callback(new Callback(Math.max(version, 1)) {\r\n\r\n        @Override\r\n        public void onCreate(@NonNull SupportSQLiteDatabase db) {\r\n        }\r\n\r\n        @Override\r\n        public void onUpgrade(@NonNull SupportSQLiteDatabase db, int oldVersion, int newVersion) {\r\n        }\r\n\r\n        @Override\r\n        public void onOpen(@NonNull SupportSQLiteDatabase db) {\r\n            // If pre-packaged database has a version < 1 we will open it as if it was\r\n            // version 1 because the framework open helper does not allow version < 1.\r\n            // The database will be considered as newly created and onCreate() will be\r\n            // invoked, but we do nothing and reset the version back so Room later runs\r\n            // migrations as usual.\r\n            if (version < 1) {\r\n                db.setVersion(version);\r\n            }\r\n        }\r\n    }).build();\r\n    return factory.create(configuration);\r\n}\n--------------------------------------------------\n// Allow chaining name().value()\r\n@NonNull\r\npublic JsonStream name(@Nullable String name) throws IOException {\r\n    super.name(name);\r\n    return this;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport java.io.IOException;\r\nimport java.io.IOException\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n// Allow chaining name().value()\r\n@NonNull\r\npublic JsonStream name(@Nullable String name) throws IOException {\r\n    super.name(name);\r\n    return this;\r\n}" ],
  "VinylMusicPlayer/589" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Verify storage permission\r\n    verifyStoragePermission();\r\n    // Verify notification permission\r\n    verifyNotificationPermission();\r\n    ////////////////\r\n    // Setup theme\r\n    ////////////////\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    ///////////////////////////\r\n    // Setup main application\r\n    ///////////////////////////\r\n    setupApplication();\r\n    //////////////////\r\n    // Setup database\r\n    //////////////////\r\n    setupDatabase();\r\n    //////////////////\r\n    // Setup backup\r\n    //////////////////\r\n    setupBackup();\r\n    /////////////////\r\n    // Setup toolbar\r\n    ////////////////\r\n    setupToolBar();\r\n    ////////////////////\r\n    // Setup status bar\r\n    ///////////////////\r\n    setupStatusBar();\r\n    ////////////////////\r\n    // Setup animation\r\n    ///////////////////\r\n    setupAnimation();\r\n    ///////////////////////////\r\n    // Setup navigation drawer\r\n    //////////////////////////\r\n    setupNavigationDrawer(savedInstanceState);\r\n    ///////////////////////\r\n    // Setup recycler view\r\n    ///////////////////////\r\n    setupRecyclerView();\r\n    /////////////\r\n    // Setup FAB\r\n    /////////////\r\n    setupFAB();\r\n    ///////////////////////\r\n    // Setup file observer\r\n    ///////////////////////\r\n    setupFileObserver();\r\n    ////////////////\r\n    // Setup mirror\r\n    ////////////////\r\n    setupMirror();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    ///////////////////////\r\n    // Apply theme\r\n    ///////////////////////\r\n    applyTheme();\r\n    /////////////////////\r\n    // Setup animation\r\n    /////////////////////\r\n    setupAnimation();\r\n    //////////////////////////\r\n    // Setup the startup list\r\n    //////////////////////////\r\n    setupStartupList();\r\n    ////////////////////////////\r\n    // Setup local find history\r\n    ////////////////////////////\r\n    setupLocalFindHistory();\r\n    /////////////////////////\r\n    // Setup process text\r\n    /////////////////////////\r\n    setupProcessText();\r\n    ///////////////////\r\n    // Handle intent\r\n    ///////////////////\r\n    handleIntent(getIntent());\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport com.appmindlab.nano.R.id.fab\nimport java.util.List\nimport com.google.android.material.floatingactionbutton.FloatingActionButton\nimport android.view.View\n// Setup FAB\r\nprivate void setupFAB() {\r\n    mFab = (FloatingActionButton) findViewById(fab);\r\n    // Set handler\r\n    mFab.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            doAdd();\r\n        }\r\n    });\r\n}" ],
  "VinylMusicPlayer/105" : [ "            }\n            return super.onSongMenuItemClick(item)\n        }\n--------------------------------------------------\nonSongMenuItemClick(item) || super.onMenuItemClick(item)", "import code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.dialogs.RemoveSongFromPlaylistDialog\nimport code.name.monkey.retromusic.db.toSongEntity\nimport code.name.monkey.retromusic.R\nimport android.view.MenuItem\noverride fun onSongMenuItemClick(item: MenuItem): Boolean {\n            when (item.itemId) {\n                R.id.action_remove_from_playlist -> {\n                    RemoveSongFromPlaylistDialog.create(song.toSongEntity(playlistId))\n                        .show(activity.supportFragmentManager, \"REMOVE_FROM_PLAYLIST\")\n                    return true\n                }\n            }\n            return super.onSongMenuItemClick(item)\n        }\nimport android.view.MenuItem\nimport code.name.monkey.retromusic.R\nimport code.name.monkey.retromusic.db.toSongEntity\nimport code.name.monkey.retromusic.dialogs.RemoveSongFromPlaylistDialog\nimport code.name.monkey.retromusic.model.Song" ],
  "VinylMusicPlayer/582" : [ "", "import android.content.Intent;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.preference.Preference;\r\nimport ml.docilealligator.infinityforreddit.activities.CommentFilterPreferenceActivity;\r\nimport ml.docilealligator.infinityforreddit.activities.CommentFilterPreferenceActivity\nimport androidx.preference.Preference\nimport androidx.annotation.NonNull\nimport android.content.Intent\n@Override\r\npublic boolean onPreferenceClick(@NonNull Preference preference) {\r\n    Intent intent = new Intent(activity, CommentFilterPreferenceActivity.class);\r\n    activity.startActivity(intent);\r\n    return true;\r\n}" ],
  "VinylMusicPlayer/585" : [ "@Override\r\nprotected void onExecuted(Bundle args, Drawable image) {\r\n    if (attachment.isAudio())\r\n        showPlayerState(attachment.getUri(context));\r\n    else if (image == null) {\r\n        String type = args.getString(\"type\");\r\n        if (\"application/pdf\".equals(type))\r\n            ivImage.setImageResource(R.drawable.twotone_article_24);\r\n        else if (attachment.isVideo())\r\n            ivImage.setImageResource(R.drawable.twotone_ondemand_video_24);\r\n        else\r\n            ivImage.setImageResource(R.drawable.twotone_broken_image_24);\r\n    } else {\r\n        ivImage.setImageDrawable(image);\r\n        ImageHelper.animate(context, image);\r\n    }\r\n    StringBuilder sb = new StringBuilder();\r\n    int width = args.getInt(\"width\");\r\n    int height = args.getInt(\"height\");\r\n    if (width > 0 && height > 0)\r\n        sb.append(width).append(// ×\r\n        \"\\u00d7\").append(height);\r\n    if (BuildConfig.DEBUG) {\r\n        String color = args.getString(\"color\");\r\n        if (color != null) {\r\n            if (sb.length() > 0)\r\n                sb.append(' ');\r\n            sb.append(color);\r\n        }\r\n        String config = args.getString(\"config\");\r\n        if (config != null) {\r\n            if (sb.length() > 0)\r\n                sb.append(' ');\r\n            sb.append(config);\r\n        }\r\n    }\r\n    long size = args.getLong(\"size\");\r\n    if (size > 0) {\r\n        if (sb.length() > 0)\r\n            sb.append(' ');\r\n        sb.append(Helper.humanReadableByteCount(size));\r\n    }\r\n    int duration = args.getInt(\"duration\");\r\n    if (duration > 0) {\r\n        if (sb.length() > 0)\r\n            sb.append(' ');\r\n        sb.append(Helper.formatDuration(duration));\r\n    }\r\n    if (sb.length() > 0) {\r\n        tvProperties.setText(sb);\r\n        tvProperties.setVisibility(View.VISIBLE);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\nprotected void delegate() {\r\n    Pair<Integer, Integer> pos = MediaPlayerHelper.getPosition(uri);\r\n    if (pos != null) {\r\n        int at = (int) Math.round(pos.first / 1000.0) * 1000;\r\n        tvProperties.setText(Helper.formatDuration(at, false) + \" / \" + Helper.formatDuration(pos.second, true));\r\n        view.postDelayed(this, 1000L);\r\n    }\r\n    tvProperties.setVisibility(pos == null ? View.GONE : View.VISIBLE);\r\n}\n--------------------------------------------------\n", "import android.text.format.DateUtils;\r\nimport java.util.Date;\r\nimport java.util.Date\nimport android.text.format.DateUtils\nstatic String formatDuration(long ms, boolean withFraction) {\r\n    int sign = (ms < 0 ? -1 : 1);\r\n    ms = Math.abs(ms);\r\n    int days = (int) (ms / (24 * 3600 * 1000L));\r\n    ms = ms % (24 * 3600 * 1000L);\r\n    long seconds = ms / 1000;\r\n    ms = ms % 1000;\r\n    return (sign < 0 ? \"-\" : \"\") + (days > 0 ? days + \" \" : \"\") + DateUtils.formatElapsedTime(seconds) + (ms == 0 || !withFraction ? \"\" : \".\" + ms);\r\n}" ],
  "MaterialFiles/831" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "VinylMusicPlayer/100" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/0" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/4" : [ "onBindViewHolder(holder, position)", "import com.omgodse.notally.room.Color\nimport com.omgodse.notally.recyclerview.viewholder.ColorVH\noverride fun onBindViewHolder(holder: ColorVH, position: Int) {\r\n        val color = colors[position]\r\n        holder.bind(color)\r\n    }\nImport(names=[com, omgodse, notally, recyclerview, viewholder, ColorVH], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, Color], wildcard=false, alias=null)" ],
  "fcitx5-android/8" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "Feeder/246" : [ "            },\n            snapTo = { target ->\r\n                val didSnapImmediately = sheetState.trySnapTo(target)\n--------------------------------------------------\n                if (!didSnapImmediately) {\n                    scope.launch { sheetState.snapTo(target) }\r\n                }\n--------------------------------------------------\n            // Snap to the new offset value of the target if no animation was running\n            snapTo(newTarget)\r\n        }", "import androidx.compose.runtime.getValue\nimport androidx.compose.foundation.layout.offset\nprivate fun snap(targetValue: T) {\r\n        val targetOffset = anchors[targetValue]\r\n        if (targetOffset != null) {\r\n            dispatchRawDelta(targetOffset - (offset ?: 0f))\r\n            currentValue = targetValue\r\n            animationTarget = null\r\n        } else {\r\n            currentValue = targetValue\r\n        }\r\n    }\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.runtime.getValue" ],
  "Feeder/247" : [ "            },\n            snapTo = { target ->\r\n                val didSnapImmediately = sheetState.trySnapTo(target)\n--------------------------------------------------\n                if (!didSnapImmediately) {\n                    scope.launch { sheetState.snapTo(target) }\r\n                }\n--------------------------------------------------\n            // Snap to the new offset value of the target if no animation was running\n            snapTo(newTarget)\r\n        }", "import androidx.compose.runtime.getValue\nimport androidx.compose.foundation.layout.offset\nprivate fun snap(targetValue: T) {\r\n        val targetOffset = anchors[targetValue]\r\n        if (targetOffset != null) {\r\n            dispatchRawDelta(targetOffset - (offset ?: 0f))\r\n            currentValue = targetValue\r\n            animationTarget = null\r\n        } else {\r\n            currentValue = targetValue\r\n        }\r\n    }\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.runtime.getValue" ],
  "VinylMusicPlayer/576" : [ "", "import android.content.Intent;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.preference.Preference;\r\nimport ml.docilealligator.infinityforreddit.activities.CommentFilterPreferenceActivity;\r\nimport ml.docilealligator.infinityforreddit.activities.CommentFilterPreferenceActivity\nimport androidx.preference.Preference\nimport androidx.annotation.NonNull\nimport android.content.Intent\n@Override\r\npublic boolean onPreferenceClick(@NonNull Preference preference) {\r\n    Intent intent = new Intent(activity, CommentFilterPreferenceActivity.class);\r\n    activity.startActivity(intent);\r\n    return true;\r\n}" ],
  "Iconify/913" : [ "\t\t\t\t\tval result = invokeMethod(requestType, args)\n\t\t\t\t\tsendResponse(id, result)\r\n\t\t\t\t} catch (e: Throwable) {", "private fun sendResponse(requestId: String, value: String) {\r\n\t\tval result = StringBuilder()\r\n\t\tresult.appendLine(\"response\")\r\n\t\tresult.appendLine(requestId)\r\n\t\tresult.append(value)\r\n\r\n\t\tpostMessage(result.toString())\r\n\t}" ],
  "VinylMusicPlayer/578" : [ "", "import android.content.Intent;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.preference.Preference;\r\nimport ml.docilealligator.infinityforreddit.activities.CommentFilterPreferenceActivity;\r\nimport ml.docilealligator.infinityforreddit.activities.CommentFilterPreferenceActivity\nimport androidx.preference.Preference\nimport androidx.annotation.NonNull\nimport android.content.Intent\n@Override\r\npublic boolean onPreferenceClick(@NonNull Preference preference) {\r\n    Intent intent = new Intent(activity, CommentFilterPreferenceActivity.class);\r\n    activity.startActivity(intent);\r\n    return true;\r\n}" ],
  "Iconify/910" : [ "cancelQueuedFiles(storedFiles)\n--------------------------------------------------\ncancelQueuedFiles(setOf(eventFile))", "import java.io.File\nfun cancelQueuedFiles(files: Collection<File>?) {\r\n        lock.lock()\r\n        try {\r\n            if (files != null) {\r\n                queuedFiles.removeAll(files)\r\n            }\r\n        } finally {\r\n            lock.unlock()\r\n        }\r\n    }\nimport java.io.File" ],
  "VinylMusicPlayer/572" : [ "                    }\n                    songPlayCountHelper.notifySongChanged(currentSong)\n                    storage.saveSong(currentSong)", "import code.name.monkey.retromusic.model.Song\nfun notifySongChanged(song: Song) {\n        synchronized(this) {\n            stopWatch.reset()\n            this.song = song\n        }\n    }\nImport(names=[code, name, monkey, retromusic, model, Song], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/574" : [ "@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onDestroy() {\r\n    if (mMultiChoiceModeListener != null)\r\n        mMultiChoiceModeListener.onDestroyActionMode(null);\r\n    super.onDestroy();\r\n}\n--------------------------------------------------\n", "import android.database.Cursor;\r\nimport android.database.Cursor\n@Override\r\npublic void onDestroy() {\r\n    if (mCursor != null) {\r\n        mCursor.close();\r\n    }\r\n}" ],
  "VinylMusicPlayer/573" : [ "                }\n                songPlayCountHelper.notifyPlayStateChanged(isPlaying)\n                playingNotification?.setPlaying(isPlaying)", "fun notifyPlayStateChanged(isPlaying: Boolean) {\n        synchronized(this) {\n            if (isPlaying) {\n                stopWatch.start()\n            } else {\n                stopWatch.pause()\n            }\n        }\n    }" ],
  "Neo-Backup/58" : [ "        val versionTextView = view.findViewById<TextView>(R.id.version)\n        versionTextView.text = getVersionNumber()\r\n", "import timber.log.Timber\nimport android.content.pm.PackageManager\nimport android.content.Context\nprivate fun getVersionNumber(): String {\r\n        return try {\r\n            val context = requireContext()\r\n            val packageInfo = context.packageManager.getPackageInfo(context.packageName, 0)\r\n            packageInfo.versionName\r\n        } catch (e: PackageManager.NameNotFoundException) {\r\n            Timber.e(e, \"Error getting PackageInfo\")\r\n            \"?\"\r\n        }\r\n    }\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport timber.log.Timber" ],
  "Iconify/916" : [ "@Override\r\nprotected boolean onStateChange(int[] states) {\r\n    boolean pressedOrFocused = false;\r\n    for (int state : states) {\r\n        if (state == android.R.attr.state_pressed || state == android.R.attr.state_focused) {\r\n            pressedOrFocused = true;\r\n            break;\r\n        }\r\n    }\r\n    if (pressedOrFocused) {\r\n        super.setColorFilter(getPressedColor(mColor), PorterDuff.Mode.SRC_ATOP);\r\n    } else {\r\n        super.setColorFilter(mColor, PorterDuff.Mode.SRC_ATOP);\r\n    }\r\n    return super.onStateChange(states);\r\n}\n--------------------------------------------------\n", "import android.graphics.PorterDuff;\r\nimport android.graphics.PorterDuff\nimport android.graphics.Color\n@Override\r\nprotected boolean onStateChange(int[] states) {\r\n    boolean pressedOrFocused = false;\r\n    for (int state : states) {\r\n        if (state == android.R.attr.state_pressed || state == android.R.attr.state_focused) {\r\n            pressedOrFocused = true;\r\n            break;\r\n        }\r\n    }\r\n    if (pressedOrFocused) {\r\n        super.setColorFilter(getPressedColor(mColor), PorterDuff.Mode.SRC_ATOP);\r\n    } else {\r\n        super.setColorFilter(mColor, PorterDuff.Mode.SRC_ATOP);\r\n    }\r\n    return super.onStateChange(states);\r\n}" ],
  "Neo-Backup/56" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/52" : [ "dialogConfirmed(binding.deleteNoteCheckbox.isChecked)\n--------------------------------------------------\ndialogConfirmed()", "private fun dialogConfirmed(deleteFile: Boolean) {\r\n        callback(deleteFile && note.path.isNotEmpty())\r\n        dialog?.dismiss()\r\n    }" ],
  "Neo-Backup/51" : [ "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n", "import androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport com.irccloud.android.IRCCloudApplication\nimport androidx.room.Room\nimport androidx.room.Database\npublic static IRCCloudDatabase getInstance() {\r\n    if (sInstance == null) {\r\n        synchronized (IRCCloudDatabase.class) {\r\n            if (sInstance == null) {\r\n                sInstance = Room.databaseBuilder(IRCCloudApplication.getInstance().getApplicationContext(), IRCCloudDatabase.class, NAME).fallbackToDestructiveMigrationFrom(12).fallbackToDestructiveMigration().fallbackToDestructiveMigrationOnDowngrade().allowMainThreadQueries().build();\r\n            }\r\n        }\r\n    }\r\n    return sInstance;\r\n}" ],
  "Neo-Backup/50" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/48" : [ "findErrorTypesInFilename(file)", "import java.io.File\ninternal fun findErrorTypesInFilename(eventFile: File): Set<ErrorType> {\r\n            val name = eventFile.name\r\n            val end = name.lastIndexOf(\"_\", name.lastIndexOf(\"_\") - 1)\r\n            val start = name.lastIndexOf(\"_\", end - 1) + 1\r\n\r\n            if (start < end) {\r\n                val encodedValues: List<String> = name.substring(start, end).split(\",\")\r\n                return ErrorType.values().filter {\r\n                    encodedValues.contains(it.desc)\r\n                }.toSet()\r\n            }\r\n            return emptySet()\r\n        }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "fcitx5-android/49" : [ "IO.copyStreamToFile(stream, destination)\n--------------------------------------------------\nIO.copyStreamToFile(inputStream, databaseFile)\n--------------------------------------------------\nIO.copyStreamToFile(imageStream, file)\n--------------------------------------------------\nIO.copyStreamToFile(inputStream, temp)", "import java.io.InputStream\nimport java.io.FileOutputStream\nimport java.io.File\nfun copyStreamToFile(input: InputStream, destination: File) {\r\n        val output = FileOutputStream(destination)\r\n        input.copyTo(output)\r\n        input.close()\r\n        output.close()\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)\nImport(names=[java, io, FileOutputStream], wildcard=false, alias=null)\nImport(names=[java, io, InputStream], wildcard=false, alias=null)" ],
  "MaterialFiles/857" : [ "\n                remove(\"unread_widget.$widgetId.folder_name\")\r\n            }\n--------------------------------------------------\n        val editor = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE).edit()\n        editor.remove(PREF_PREFIX_KEY + appWidgetId)\r\n        editor.remove(PREF_PREFIX_KEY + appWidgetId + PREF_FOLDER_ID_SUFFIX_KEY)\n--------------------------------------------------\n        editor.remove(PREF_PREFIX_KEY + appWidgetId)\n        editor.remove(PREF_PREFIX_KEY + appWidgetId + PREF_FOLDER_ID_SUFFIX_KEY)\r\n        editor.apply()\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_ENCRYPT)\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_SIGN_ONLY)\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_IS_REPLY)\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_BY_CHOICE)\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_PGP_INLINE)\n--------------------------------------------------\nlocalStores.remove(accountUuid)\n--------------------------------------------------\ncolumnMap.remove(flag)\n--------------------------------------------------\nmessageCache.remove(messageId)\n--------------------------------------------------\nthreadCache.remove(threadRootId)\n--------------------------------------------------\nhiddenMessageCache.remove(messageId)\n--------------------------------------------------\nprecedingLineBreak.takeIf {\n    it.isBR()\n}?.remove()\n--------------------------------------------------\nlisteners.remove(listener)\n--------------------------------------------------\neditor.remove(\"storage-key\")\n--------------------------------------------------\nverify(storagePersisterOps).remove(\"storage-key\")\n--------------------------------------------------\neditor.remove(\"x\")\n--------------------------------------------------\nverify(storagePersisterOps).remove(\"x\")\n--------------------------------------------------\nremove(any())\n--------------------------------------------------\nworkingMap.remove(key)\n--------------------------------------------------\nremovals.remove(key)\n--------------------------------------------------\nremove(key)\n--------------------------------------------------\nchanges.remove(key)", "override fun remove(key: String) = apply {\r\n            removals.add(key)\r\n            changes.remove(key)\r\n        }" ],
  "Feeder/259" : [ "            item {\n                MenuAction(\r\n                    icon = R.drawable.ic_outline_attach_money_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_edit_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_settings_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_help_outline_24px,", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\n\r\n@Composable\r\nprivate fun MenuAction(\r\n    icon: Int,\r\n    title: Int,\r\n    onClick: () -> Unit,\r\n) {\r\n    MenuRow(onClick = onClick) {\r\n        DrawerIcon(icon = icon)\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Text(\r\n            text = stringResource(id = title),\r\n            color = MaterialTheme.colors.onSurface,\r\n            modifier = Modifier.weight(1f),\r\n        )\r\n    }\r\n}\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Iconify/924" : [ "score(i1, query) - score(i0, query)", "import org.videolan.vlc.gui.preferences.search.PreferenceItem\nprivate fun score(item: PreferenceItem, query: String): Int {\r\n        var score = 0\r\n        if (getSummary(item).lowercase(Locale.getDefault()).contains(query)) score += 1\r\n        if (getTitle(item).lowercase(Locale.getDefault()).contains(query)) score += 10\r\n        if (getSummary(item).lowercase(Locale.getDefault()).split(\" \").any { it.startsWith(query) }) score += 100\r\n        if (getTitle(item).lowercase(Locale.getDefault()).split(\" \").any { it.startsWith(query) }) score += 1000\r\n        return score\r\n    }\nImport(names=[org, videolan, vlc, gui, preferences, search, PreferenceItem], wildcard=false, alias=null)" ],
  "Iconify/923" : [ "@Override\r\nprotected void applyCustomTheme() {\r\n    applyAppBarLayoutAndCollapsingToolbarLayoutAndToolbarTheme(appBarLayout, collapsingToolbarLayout, toolbar);\r\n    coordinatorLayout.setBackgroundColor(mCustomThemeWrapper.getBackgroundColor());\r\n    changeColorTextView(content, mCustomThemeWrapper.getPrimaryTextColor());\r\n    if (typeface != null) {\r\n        Utils.setFontToAllTextViews(coordinatorLayout, typeface);\r\n    }\r\n}\n--------------------------------------------------\nprivate void changeColorTextView(ViewGroup viewGroup, int color) {\r\n    final int childCount = viewGroup.getChildCount();\r\n    for (int i = 0; i < childCount; i++) {\r\n        View child = viewGroup.getChildAt(i);\r\n        if (child instanceof ViewGroup) {\r\n            changeColorTextView((ViewGroup) child, color);\r\n        } else if (child instanceof TextView) {\r\n            ((TextView) child).setTextColor(color);\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nprivate void changeColorTextView(ViewGroup viewGroup, int color) {\r\n    final int childCount = viewGroup.getChildCount();\r\n    for (int i = 0; i < childCount; i++) {\r\n        View child = viewGroup.getChildAt(i);\r\n        if (child instanceof ViewGroup) {\r\n            changeColorTextView((ViewGroup) child, color);\r\n        } else if (child instanceof TextView) {\r\n            ((TextView) child).setTextColor(color);\r\n        }\r\n    }\r\n}" ],
  "VinylMusicPlayer/564" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/921" : [ "", "import org.tasks.R\nimport androidx.compose.foundation.layout.padding\nimport android.view.View\nprivate fun setTopPadding(padding: Int, vararg views: View) {\r\n        for (v in views) {\r\n            v.setPaddingRelative(v.paddingStart, padding, v.paddingEnd, v.paddingBottom)\r\n        }\r\n    }\nimport android.view.View\nimport androidx.compose.foundation.layout.padding\nimport org.tasks.R" ],
  "VinylMusicPlayer/561" : [ "", "import timber.log.Timber\nimport org.jellyfin.mobile.R\nimport com.google.android.exoplayer2.Player\nimport com.google.android.exoplayer2.C\nimport androidx.mediarouter.media.MediaRouter\noverride fun onRouteSelected(router: MediaRouter, route: MediaRouter.RouteInfo, reason: Int) {\r\n            if (reason == MediaRouter.UNSELECT_REASON_ROUTE_CHANGED) {\r\n                Timber.d(\"Unselected because route changed, continue playback\")\r\n            } else if (reason == MediaRouter.UNSELECT_REASON_STOPPED) {\r\n                Timber.d(\"Unselected because route was stopped, stop playback\")\r\n                currentPlayer.stop()\r\n            }\r\n        }\nimport androidx.mediarouter.media.MediaRouter\nimport com.google.android.exoplayer2.C\nimport com.google.android.exoplayer2.Player\nimport org.jellyfin.mobile.R\nimport timber.log.Timber" ],
  "Iconify/920" : [ "", "import timber.log.Timber\nimport kotlinx.coroutines.runBlocking\nimport android.content.Intent\noverride fun onHandleWork(intent: Intent) {\r\n        runBlocking {\r\n            try {\r\n                doWork(intent)\r\n            } catch (e: Exception) {\r\n                Timber.e(e)\r\n            }\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, runBlocking], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Neo-Backup/69" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/927" : [ "return getLastSyncTime(context, KEY_LAST_SYNC_EPISODES)\n--------------------------------------------------\nreturn getLastSyncTime(context, KEY_LAST_SYNC_SHOWS)\n--------------------------------------------------\nreturn getLastSyncTime(context, KEY_LAST_SYNC_MOVIES)\n--------------------------------------------------\nreturn getLastSyncTime(context, KEY_LAST_SYNC_LISTS)", "import androidx.preference.PreferenceManager\nimport android.content.Context\nprivate fun getLastSyncTime(context: Context, key: String): Long {\r\n        val prefs = PreferenceManager.getDefaultSharedPreferences(context)\r\n        var lastSync = prefs.getLong(key, 0)\r\n        if (lastSync == 0L) {\r\n            lastSync = System.currentTimeMillis() // not synced yet, then last time is now!\r\n            prefs.edit().putLong(key, lastSync).apply()\r\n        }\r\n        return lastSync\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/557" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/68" : [ "doRequest {\n    withContext(Dispatchers.IO) {\n        provider.forUrl(url, username, password).homeSet(username, password)\n    }\n}", "import timber.log.Timber\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.NonCancellable\nprotected suspend fun <T> doRequest(action: suspend () -> T): T? =\r\n        withContext(NonCancellable) {\r\n            if (inFlight.value == true) {\r\n                return@withContext null\r\n            }\r\n            inFlight.value = true\r\n            try {\r\n                return@withContext action()\r\n            } catch (e: Exception) {\r\n                Timber.e(e)\r\n                error.value = e\r\n                return@withContext null\r\n            } finally {\r\n                inFlight.value = false\r\n            }\r\n        }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Neo-Backup/67" : [ "        val workerClass = Class.forName(workerClassName).kotlin\n        return getKoin().getOrNull(workerClass) { parametersOf(workerParameters) }\r\n    }\n--------------------------------------------------\n            .submit(pictureSizeInPx, pictureSizeInPx)\n            .getOrNull()\r\n    }", "import com.bumptech.glide.request.FutureTarget\nprivate fun <T> FutureTarget<T>.getOrNull(): T? {\r\n        return try {\r\n            get()\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }\nimport com.bumptech.glide.request.FutureTarget" ],
  "VinylMusicPlayer/559" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/250" : [ "TextUtils.equals(status, \"CONNECTED\")\n--------------------------------------------------\nTextUtils.equals(status, \"FAILED\")\n--------------------------------------------------\nsuper.equals(other)\n--------------------------------------------------\nother.address.equals(address, ignoreCase = true)\n--------------------------------------------------\naddress.equals(uniswapKit.etherToken().address.hex, true)\n--------------------------------------------------\naddress.equals(uniswapV3Kit.etherToken().address.hex, true)\n--------------------------------------------------\nmanufacturer.equals(Build.MANUFACTURER, ignoreCase = true)", "override fun equals(other: Any?): Boolean {\r\n        if (other is Account) {\r\n            return id == other.id\r\n        }\r\n\r\n        return false\r\n    }" ],
  "Neo-Backup/63" : [ "val files = listBackupFiles()", "import java.io.File\nprivate fun listBackupFiles(): ArrayList<File> {\r\n        val files = ArrayList<File>()\r\n        for (path in basedir.list()!!) {\r\n            files.add(File(\"${basedir.path}/$path\"))\r\n        }\r\n        return files\r\n    }" ],
  "Feeder/252" : [ "= rememberSheetState(skipPartiallyExpanded, confirmValueChange, Hidden)", "import org.tasks.compose.drawer.SheetValue.PartiallyExpanded\nimport org.tasks.compose.drawer.SheetValue.Hidden\nimport org.tasks.compose.drawer.SheetValue.Expanded\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.saveable.Saver\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.ExperimentalMaterial3Api\n\r\n@Composable\r\n@ExperimentalMaterial3Api\r\ninternal fun rememberSheetState(\r\n    skipPartiallyExpanded: Boolean = false,\r\n    confirmValueChange: (SheetValue) -> Boolean = { true },\r\n    initialValue: SheetValue = Hidden,\r\n    skipHiddenState: Boolean = false,\r\n): SheetState {\r\n    return rememberSaveable(\r\n        skipPartiallyExpanded, confirmValueChange,\r\n        saver = SheetState.Saver(\r\n            skipPartiallyExpanded = skipPartiallyExpanded,\r\n            confirmValueChange = confirmValueChange\r\n        )\r\n    ) {\r\n        SheetState(skipPartiallyExpanded, initialValue, confirmValueChange, skipHiddenState)\r\n    }\r\n}\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.saveable.Saver\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport org.tasks.compose.drawer.SheetValue.Expanded\nimport org.tasks.compose.drawer.SheetValue.Hidden\nimport org.tasks.compose.drawer.SheetValue.PartiallyExpanded" ],
  "Neo-Backup/61" : [ "                \"threadCollectionTimeLimitMillis\" to threadCollectionTimeLimitMillis else null,\n            if (persistenceDirectory != null)\r\n                \"persistenceDirectorySet\" to true else null,\n--------------------------------------------------\n            if (persistenceDirectory != null)\n                \"persistenceDirectorySet\" to true else null,\r\n            if (sendThreads != defaultConfig.sendThreads)\n--------------------------------------------------\nsynchronizedStreamableStore.persist(newId)\n--------------------------------------------------\nlastRunInfoStore.persist(currentRunInfo)\n--------------------------------------------------\nsynchronizedStreamableStore.persist(user)", "import kotlin.concurrent.withLock\nimport java.io.IOException\n @Throws(IOException::class)\r\n    fun persist(streamable: T) {\r\n        lock.writeLock().withLock {\r\n            file.writer().buffered().use {\r\n                streamable.toStream(JsonStream(it))\r\n                true\r\n            }\r\n        }\r\n    }\nImport(names=[kotlin, concurrent, withLock], wildcard=false, alias=null)" ],
  "MaterialFiles/866" : [ "isLrcOriginalFileExist(song.data)", "private fun isLrcOriginalFileExist(path: String): Boolean {\n        val file = File(getLrcOriginalPath(path))\n        return file.exists()\n    }" ],
  "MaterialFiles/865" : [ "provider.forUrl(context.getString(R.string.tasks_caldav_url), username, tokenString)\n--------------------------------------------------\nprovider.forUrl(url, username, password)\n--------------------------------------------------\nclientProvider.forUrl(url, username, password, foreground = true)\n--------------------------------------------------\nclientProvider.forUrl(url, user, null, session, true)\n--------------------------------------------------\nclientProvider.forUrl(url, user, pass, foreground = true)", "import java.security.NoSuchAlgorithmException\nimport java.security.KeyManagementException\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.etebase.client.Client\nimport com.etebase.client.Account\nimport android.content.Context\n @Throws(KeyManagementException::class, NoSuchAlgorithmException::class)\r\n    suspend fun forUrl(url: String, username: String, password: String?, session: String? = null, foreground: Boolean = false): EtebaseClient = withContext(Dispatchers.IO) {\r\n        val httpClient = createHttpClient(foreground, username)\r\n        val client = Client.create(httpClient, url)\r\n        val etebase = session\r\n                ?.let { Account.restore(client, it, null) }\r\n                ?: Account.login(client, username, password!!)\r\n        EtebaseClient(context, username, etebase, caldavDao)\r\n    }\nimport android.content.Context\nimport com.etebase.client.Account\nimport com.etebase.client.Client\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport java.security.KeyManagementException\nimport java.security.NoSuchAlgorithmException" ],
  "MaterialFiles/868" : [ "            if (serverType == SERVER_UNKNOWN) {\n                serverType = getServerType(account, response.headers)\r\n            }", "import org.tasks.data.CaldavAccount.Companion.SERVER_UNKNOWN\nimport org.tasks.data.CaldavAccount.Companion.SERVER_TASKS\nimport org.tasks.data.CaldavAccount.Companion.SERVER_SABREDAV\nimport org.tasks.data.CaldavAccount.Companion.SERVER_OWNCLOUD\nimport org.tasks.data.CaldavAccount.Companion.SERVER_OPEN_XCHANGE\nimport org.tasks.R\nimport okhttp3.Headers\nimport com.todoroo.astrid.data.Task\nprivate fun getServerType(account: CaldavAccount, headers: Headers) = when {\r\n        account.isTasksOrg -> SERVER_TASKS\r\n        headers[\"DAV\"]?.contains(\"oc-resource-sharing\") == true -> SERVER_OWNCLOUD\r\n        headers[\"x-sabre-version\"]?.isNotBlank() == true -> SERVER_SABREDAV\r\n        headers[\"server\"] == \"Openexchange WebDAV\" -> SERVER_OPEN_XCHANGE\r\n        else -> SERVER_UNKNOWN\r\n    }\nimport com.todoroo.astrid.data.Task\nimport okhttp3.Headers\nimport org.tasks.R\nimport org.tasks.data.CaldavAccount.Companion.SERVER_OPEN_XCHANGE\nimport org.tasks.data.CaldavAccount.Companion.SERVER_OWNCLOUD\nimport org.tasks.data.CaldavAccount.Companion.SERVER_SABREDAV\nimport org.tasks.data.CaldavAccount.Companion.SERVER_TASKS\nimport org.tasks.data.CaldavAccount.Companion.SERVER_UNKNOWN" ],
  "MaterialFiles/869" : [ "            values.put(\"data_location\", DataLocation.IN_DATABASE)\n            val bodyData = getBodyBytes(body)\r\n            values.put(\"data\", bodyData)", "import java.io.ByteArrayOutputStream\nimport com.fsck.k9.mail.Body\nprivate fun getBodyBytes(body: Body): ByteArray {\r\n        val output = ByteArrayOutputStream()\r\n        body.writeTo(output)\r\n\r\n        return output.toByteArray()\r\n    }\nimport com.fsck.k9.mail.Body\nimport java.io.ByteArrayOutputStream" ],
  "VinylMusicPlayer/554" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/556" : [ "{\r\n    super.onCreate()\r\n    registerReceiver(becomingNoisyReceiver, IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY))\r\n    castApiProvider?.addSessionListener(this)\r\n\r\n    lifecycleScope.launch {\r\n      currentPresetFlow.collect { preset ->\r\n        notificationManager.setPresetName(preset?.name)\r\n        mediaSession.setPresetName(preset?.name)\r\n        castReceiverUiManager?.setPresetName(preset?.name)\r\n      }\r\n    }\r\n\r\n    lifecycleScope.launch {\r\n      subscriptionRepository.isSubscribed().collect { subscribed ->\r\n        soundDataSourceFactory.enableDownloadedSounds = subscribed\r\n        soundPlayerManager.setPremiumSegmentsEnabled(subscribed)\r\n      }\r\n    }\r\n\r\n    // watch and adapt user settings as they change.\r\n    lifecycleScope.launch {\r\n      settingsRepository.shouldIgnoreAudioFocusChangesAsFlow()\r\n        .collect { audioFocusManager.setDisabled(it) }\r\n    }\r\n\r\n    lifecycleScope.launch {\r\n      settingsRepository.isMediaButtonsEnabledAsFlow().collect { isEnabled ->\r\n        mediaSession.setCallback(if (isEnabled) mediaSessionCallback else null)\r\n      }\r\n    }\r\n\r\n    lifecycleScope.launch {\r\n      settingsRepository.getSoundFadeInDurationAsFlow()\r\n        .collect { soundPlayerManager.setFadeInDuration(it) }\r\n    }\r\n\r\n    lifecycleScope.launch {\r\n      settingsRepository.getSoundFadeOutDurationAsFlow()\r\n        .collect { soundPlayerManager.setFadeOutDuration(it) }\r\n    }\r\n\r\n    lifecycleScope.launch {\r\n      val audioQualityFlow = settingsRepository.getAudioQualityAsFlow()\r\n      val isSubscribedFlow = subscriptionRepository.isSubscribed()\r\n      combine(audioQualityFlow, isSubscribedFlow) { quality, subscribed ->\r\n        if (subscribed) quality else SettingsRepository.FREE_AUDIO_QUALITY\r\n      }.collect { soundPlayerManager.setAudioBitrate(it.bitrate) }\r\n    }\r\n  }", "import android.util.Log\noverride fun onDestroy() {\r\n    Log.d(LOG_TAG, \"onDestroy: releasing acquired resources\")\r\n    soundPlayerManager.stop(true)\r\n    mediaSession.release()\r\n    castApiProvider?.removeSessionListener(this)\r\n    unregisterReceiver(becomingNoisyReceiver)\r\n    if (wakeLock.isHeld) {\r\n      wakeLock.release()\r\n    }\r\n\r\n    super.onDestroy()\r\n  }\nimport android.util.Log" ],
  "VinylMusicPlayer/550" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/60" : [ "createListPref(WidgetSettings.KEY_PREFIX_WIDGET_LISTTYPE + appWidgetId, R.string.pref_widget_type, R.array.widgetType, R.array.widgetTypeData, getString(R.string.widget_default_type))\n--------------------------------------------------\ncreateListPref(WidgetSettings.KEY_PREFIX_WIDGET_SHOWS_SORT_ORDER + appWidgetId, R.string.action_shows_sort, R.array.widgetShowSortOrder, R.array.widgetShowSortOrderData, getString(R.string.widget_default_show_sort_order))\n--------------------------------------------------\ncreateListPref(WidgetSettings.KEY_PREFIX_WIDGET_THEME + appWidgetId, R.string.pref_theme, R.array.widget_themes, R.array.widget_themes_data, getString(R.string.widget_theme_system))\n--------------------------------------------------\ncreateListPref(WidgetSettings.KEY_PREFIX_WIDGET_BACKGROUND_OPACITY + appWidgetId, R.string.pref_widget_opacity, R.array.widgetOpacity, R.array.widgetOpacityData, WidgetSettings.DEFAULT_WIDGET_BACKGROUND_OPACITY)", "import com.battlelancer.seriesguide.R\nimport androidx.preference.Preference\nimport androidx.preference.ListPreference\nimport androidx.annotation.StringRes\nimport androidx.annotation.ArrayRes\nprivate fun createListPref(\r\n        key: String,\r\n        @StringRes title: Int,\r\n        @ArrayRes entries: Int,\r\n        @ArrayRes values: Int,\r\n        defaultValue: String\r\n    ): ListPreference {\r\n        return ListPreference(requireContext()).also {\r\n            it.key = key\r\n            it.setTitle(title)\r\n            it.setEntries(entries)\r\n            it.setEntryValues(values)\r\n            it.setDefaultValue(defaultValue)\r\n            it.positiveButtonText = null\r\n            it.negativeButtonText = null\r\n        }\r\n    }\nImport(names=[androidx, annotation, ArrayRes], wildcard=false, alias=null)\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)\nImport(names=[androidx, preference, ListPreference], wildcard=false, alias=null)\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)" ],
  "Neo-Backup/39" : [ "payload.toBuilder()\n--------------------------------------------------\nthis.toBuilder()\n--------------------------------------------------\nactivity().toBuilder()\n--------------------------------------------------\nbacking().toBuilder()\n--------------------------------------------------\ncheckoutData(shippingAmount, totalAmount).toBuilder()\n--------------------------------------------------\nconfig().toBuilder()\n--------------------------------------------------\nmessageThreadEnvelope().toBuilder()\n--------------------------------------------------\nproject.toBuilder()\n--------------------------------------------------\nproject().toBuilder()\n--------------------------------------------------\nRewardFactory.reward().toBuilder()\n--------------------------------------------------\nRewardFactory.addOn().toBuilder()\n--------------------------------------------------\nRewardFactory.limitReached().toBuilder()\n--------------------------------------------------\nenabled().toBuilder()\n--------------------------------------------------\nreward().toBuilder()\n--------------------------------------------------\nrewardsItem().toBuilder()\n--------------------------------------------------\nItemFactory.item().toBuilder()\n--------------------------------------------------\ncreator().toBuilder()\n--------------------------------------------------\nupdate().toBuilder()\n--------------------------------------------------\nuser().toBuilder()\n--------------------------------------------------\nSurveyResponseFactory.surveyResponse().toBuilder()\n--------------------------------------------------\nprojectNotification.toBuilder()\n--------------------------------------------------\nProjectFactory.project().toBuilder()\n--------------------------------------------------\nlistOfComments[position].toBuilder()\n--------------------------------------------------\ntoBuilder().page(page + 1)\n--------------------------------------------------\nupdateTransformer(edge?.node()?.fragments()?.post()).toBuilder()\n--------------------------------------------------\ncommentTransformer(edge?.node()?.fragments()?.comment()).toBuilder()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder()\n--------------------------------------------------\nit.toBuilder()\n--------------------------------------------------\npledgeDataAndReason.first.projectData().toBuilder()\n--------------------------------------------------\npledgeDataAndReason.first.toBuilder()\n--------------------------------------------------\nparams.toBuilder()\n--------------------------------------------------\npledgeData.toBuilder()\n--------------------------------------------------\naddOn.toBuilder()\n--------------------------------------------------\nit.first.toBuilder()\n--------------------------------------------------\nit.second.toBuilder()\n--------------------------------------------------\nuser.toBuilder()\n--------------------------------------------------\ndrawerClickParams.params().toBuilder()\n--------------------------------------------------\np.toBuilder()\n--------------------------------------------------\nthis.userOutput.value.toBuilder()\n--------------------------------------------------\nnewUser.toBuilder()", "fun toBuilder() = Builder(\r\n        id = id,\r\n        localizedName = localizedName\r\n    )" ],
  "Neo-Backup/38" : [ "database.sgListHelper().deleteListItems(toRemove)", "import com.battlelancer.seriesguide.provider.SeriesGuideContract.ListItems\nimport androidx.room.Transaction\n @Transaction\r\n    fun deleteListItems(listItemIds: List<String>) {\r\n        listItemIds.forEach {\r\n            deleteListItem(it)\r\n        }\r\n    }\nimport androidx.room.Transaction\nimport com.battlelancer.seriesguide.provider.SeriesGuideContract.ListItems" ],
  "Neo-Backup/37" : [ "{\r\n\t\tclearDirectory(tempDir.root)\r\n\t}\n--------------------------------------------------\n\t\t\t\tif (child.isDirectory) {\n\t\t\t\t\tclearDirectory(child)\r\n\t\t\t\t}\n--------------------------------------------------\nsseStorage.clear()", "\t@Transaction\r\n\topen fun clear() {\r\n\t\tclearKeys()\r\n\t\tclearUsers()\r\n\t}" ],
  "fcitx5-android/64" : [ "", "import org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    EventBus.getDefault().unregister(this);\r\n    if (disposable != null) {\r\n        disposable.dispose();\r\n    }\r\n}" ],
  "Neo-Backup/35" : [ "{\r\n\t\tclearDirectory(tempDir.root)\r\n\t}\n--------------------------------------------------\n\t\t\t\tif (child.isDirectory) {\n\t\t\t\t\tclearDirectory(child)\r\n\t\t\t\t}\n--------------------------------------------------\nsseStorage.clear()", "\t@Transaction\r\n\topen fun clear() {\r\n\t\tclearKeys()\r\n\t\tclearUsers()\r\n\t}" ],
  "VinylMusicPlayer/549" : [ "@Override\r\npublic ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\r\n    final int res = uriMatcher.match(uri);\r\n    Log.e(getClass().getName(), \"match(\" + uri + \"): \" + res);\r\n    switch(res) {\r\n        case GPX:\r\n        case TCX:\r\n            final List<String> list = uri.getPathSegments();\r\n            final String id = list.get(list.size() - 2);\r\n            final long activityId = Long.parseLong(id);\r\n            final String parcelFile = \"activity.\" + list.get(list.size() - 3);\r\n            final Pair<File, OutputStream> out = openCacheFile(parcelFile);\r\n            if (out == null) {\r\n                Log.e(getClass().getName(), \"Failed to open cacheFile(\" + parcelFile + \")\");\r\n                return null;\r\n            }\r\n            Log.e(getClass().getName(), \"activity: \" + activityId + \", file: \" + out.first.getAbsolutePath());\r\n            SQLiteDatabase mDB = DBHelper.getReadableDatabase(getContext());\r\n            PathSimplifier simplifier = PathSimplifier.getPathSimplifierForExport(getContext());\r\n            try {\r\n                switch(res) {\r\n                    case TCX:\r\n                        TCX tcx = new TCX(mDB, simplifier);\r\n                        tcx.export(activityId, new OutputStreamWriter(out.second));\r\n                        Log.e(getClass().getName(), \"export tcx\");\r\n                        break;\r\n                    case GPX:\r\n                        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this.getContext());\r\n                        //The data must exist if log, use the log option as a possibility to \"deactivate\" too\r\n                        boolean extraData = prefs.getBoolean(this.getContext().getString(org.runnerup.R.string.pref_log_gpx_accuracy), false);\r\n                        GPX gpx = new GPX(mDB, true, extraData, simplifier);\r\n                        gpx.export(activityId, new OutputStreamWriter(out.second));\r\n                        Log.e(getClass().getName(), \"export gpx\");\r\n                        break;\r\n                }\r\n                out.second.flush();\r\n                out.second.close();\r\n                Log.e(getClass().getName(), \"wrote \" + out.first.length() + \" bytes...\");\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            DBHelper.closeDB(mDB);\r\n            //noinspection UnnecessaryLocalVariable\r\n            ParcelFileDescriptor pfd = ParcelFileDescriptor.open(out.first, ParcelFileDescriptor.MODE_READ_ONLY);\r\n            return pfd;\r\n    }\r\n    throw new FileNotFoundException(\"Unsupported uri: \" + uri);\r\n}\n--------------------------------------------------\n/**\r\n * recompute laps aggregates based on locations\r\n */\r\nprivate void recomputeLaps(SQLiteDatabase db, long activityId) {\r\n    final String[] cols = new String[] { DB.LAP.LAP };\r\n    ArrayList<Long> laps = new ArrayList<>();\r\n    Cursor c = db.query(DB.LAP.TABLE, cols, DB.LAP.ACTIVITY + \" = \" + activityId, null, null, null, \"_id\", null);\r\n    if (c.moveToFirst()) {\r\n        do {\r\n            laps.add(c.getLong(0));\r\n        } while (c.moveToNext());\r\n    }\r\n    c.close();\r\n    for (long lap : laps) {\r\n        recomputeLap(db, activityId, lap);\r\n    }\r\n}\n--------------------------------------------------\n", "import org.runnerup.common.util.Constants.DB;\r\nimport org.runnerup.db.DBHelper;\r\nimport org.runnerup.db.DBHelper\nimport org.runnerup.common.util.Constants.DB\npublic synchronized void close() {\r\n    if (mDB != null) {\r\n        DBHelper.closeDB(mDB);\r\n    }\r\n}" ],
  "Feeder/260" : [ "            item {\n                MenuAction(\r\n                    icon = R.drawable.ic_outline_attach_money_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_edit_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_settings_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_help_outline_24px,", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\n\r\n@Composable\r\nprivate fun MenuAction(\r\n    icon: Int,\r\n    title: Int,\r\n    onClick: () -> Unit,\r\n) {\r\n    MenuRow(onClick = onClick) {\r\n        DrawerIcon(icon = icon)\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Text(\r\n            text = stringResource(id = title),\r\n            color = MaterialTheme.colors.onSurface,\r\n            modifier = Modifier.weight(1f),\r\n        )\r\n    }\r\n}\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Neo-Backup/31" : [ "                if (displayMode == DisplayMode.MESSAGE_LIST) {\n                    messageListFragment!!.onCopy()\r\n                } else if (messageViewContainerFragment != null) {\n--------------------------------------------------\n                } else if (messageViewContainerFragment != null) {\n                    messageViewContainerFragment!!.onCopy()\r\n                }", "fun onCopy() {\r\n        selectedMessage?.let { message ->\r\n            onCopy(message)\r\n        }\r\n    }" ],
  "Feeder/261" : [ "            item {\n                MenuAction(\r\n                    icon = R.drawable.ic_outline_attach_money_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_edit_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_settings_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_help_outline_24px,", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\n\r\n@Composable\r\nprivate fun MenuAction(\r\n    icon: Int,\r\n    title: Int,\r\n    onClick: () -> Unit,\r\n) {\r\n    MenuRow(onClick = onClick) {\r\n        DrawerIcon(icon = icon)\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Text(\r\n            text = stringResource(id = title),\r\n            color = MaterialTheme.colors.onSurface,\r\n            modifier = Modifier.weight(1f),\r\n        )\r\n    }\r\n}\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Feeder/262" : [ "{\n    MenuRow(\r\n        modifier = Modifier\n--------------------------------------------------\n{\n    MenuRow(onClick = onClick) {\r\n        DrawerIcon(icon = icon)\n--------------------------------------------------\n        Divider(modifier = Modifier.fillMaxWidth())\n        MenuRow(\r\n            padding = PaddingValues(start = 16.dp),", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.clickable\n\r\n@Composable\r\nprivate fun MenuRow(\r\n    modifier: Modifier = Modifier,\r\n    padding: PaddingValues = PaddingValues(horizontal = 16.dp),\r\n    onClick: () -> Unit,\r\n    content: @Composable RowScope.() -> Unit,\r\n) {\r\n    Row(\r\n        modifier = modifier\r\n            .clickable(onClick = onClick)\r\n            .height(48.dp)\r\n            .padding(padding)\r\n            .fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        content = content\r\n    )\r\n}\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Feeder/263" : [ "GetContent(findNavController())", "import androidx.navigation.NavController\nimport androidx.compose.runtime.Composable\n @Composable\r\n    override fun GetContent(navController: NavController) {\r\n        IndicatorsScreen(\r\n            navController = navController,\r\n        )\r\n    }\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavController" ],
  "Feeder/264" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/265" : [ "BackupRecoveryPhraseDialog.prepareParams(account)\n--------------------------------------------------\n                        R.id.backupKeyFragment,\n                        BackupKeyModule.prepareParams(account)\r\n                    )\n--------------------------------------------------\n                        R.id.backupLocalFragment,\n                        BackupLocalFragment.prepareParams(account.id)\r\n                    )\n--------------------------------------------------\nFeeSettingsInfoDialog.prepareParams(title, info)\n--------------------------------------------------\nWC2RequestFragment.prepareParams(requestId)\n--------------------------------------------------\nBackupKeyModule.prepareParams(account)\n--------------------------------------------------\nBackupLocalFragment.prepareParams(account.id)\n--------------------------------------------------\nManageAccountsModule.prepareParams(R.id.manageAccountsFragment, false)\n--------------------------------------------------\nManageAccountsModule.prepareParams(R.id.manageAccountsFragment, true)\n--------------------------------------------------\nManageAccountModule.prepareParams(accountViewItem.accountId)\n--------------------------------------------------\nCoinFragment.prepareParams(coinUid, \"market_watchlist\")\n--------------------------------------------------\nMarketTopCoinsFragment.prepareParams(sortingField, topMarket, marketField)\n--------------------------------------------------\nMarketPlatformFragment.prepareParams(it)\n--------------------------------------------------\nTopPlatformsFragment.prepareParams(timeDuration)\n--------------------------------------------------\nBchAddressTypeSelectFragment.prepareParams(coin.uid)\n--------------------------------------------------\nDerivationSelectFragment.prepareParams(coin.uid)\n--------------------------------------------------\nNetworkSelectFragment.prepareParams(coin.uid)\n--------------------------------------------------\nSendEvmSettingsFragment.prepareParams(parentNavGraphId)\n--------------------------------------------------\nSwapApproveConfirmationModule.prepareParams(sendEvmData, swapApproveViewModel.dex.blockchainType)\n--------------------------------------------------\nSwapMainModule.prepareParams(it.wallet.token, R.id.swapTokenSelectFragment)", "import androidx.core.os.bundleOf\nfun prepareParams(title: String, text: String) = bundleOf(\r\n            keyTitle to title,\r\n            keyText to text\r\n        )\nImport(names=[androidx, core, os, bundleOf], wildcard=false, alias=null)" ],
  "Feeder/267" : [ "GetContent(findNavController())", "import androidx.navigation.NavController\nimport androidx.compose.runtime.Composable\n @Composable\r\n    override fun GetContent(navController: NavController) {\r\n        IndicatorsScreen(\r\n            navController = navController,\r\n        )\r\n    }\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavController" ],
  "Feeder/279" : [ "    if (immediate || mediaPlayer.state != MediaPlayer.State.PLAYING) {\n      mediaPlayer.pause()\r\n      return\n--------------------------------------------------\n    state = State.PAUSING\n    mediaPlayer.fadeTo(0F, fadeOutDuration) { mediaPlayer.pause() }\r\n  }", "import kotlin.time.Duration\nimport kotlinx.coroutines.Job\nimport com.github.ashutoshgngwr.noice.engine.media.MediaPlayer\noverride fun pause(immediate: Boolean) {\r\n    if (shouldPlayOnLoadingMetadata) {\r\n      shouldPlayOnLoadingMetadata = false\r\n      state = State.PAUSED\r\n      return\r\n    }\r\n\r\n    queueNextSegmentJob?.cancel()\r\n    if (immediate || mediaPlayer.state != MediaPlayer.State.PLAYING) {\r\n      mediaPlayer.pause()\r\n      return\r\n    }\r\n\r\n    state = State.PAUSING\r\n    mediaPlayer.fadeTo(0F, fadeOutDuration) { mediaPlayer.pause() }\r\n  }\nimport com.github.ashutoshgngwr.noice.engine.media.MediaPlayer\nimport kotlinx.coroutines.Job\nimport kotlin.time.Duration" ],
  "MaterialFiles/876" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/879" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "VinylMusicPlayer/543" : [ "@Override\r\npublic void play() {\r\n    if (helper != null && mediaUri != null) {\r\n        if (!isPlaying() && isManuallyPaused) {\r\n            helper.play();\r\n            pause();\r\n            helper.setVolume(volume);\r\n        } else {\r\n            helper.play();\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void pause() {\r\n    if (helper != null)\r\n        helper.pause();\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void pause() {\r\n    if (helper != null)\r\n        helper.pause();\r\n}" ],
  "Iconify/901" : [ "", "import android.content.Context\nfun getScreenWidth(context: Context): Int {\n        val displayMetrics = context.resources.displayMetrics\n        return displayMetrics.widthPixels\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/542" : [ "        originalPlayingQueue.clear()\n        setPosition(-1)\n        notifyChange(QUEUE_CHANGED)\n--------------------------------------------------\n            } else {\n                setPosition(position)\n            }\n--------------------------------------------------\n            if (playingQueue.size > deletedPosition) {\n                setPosition(position)\n            } else {\n--------------------------------------------------\n            } else {\n                setPosition(position - 1)\n            }", "private fun setPosition(position: Int) {\n        openTrackAndPrepareNextAt(position) { success ->\n            if (success) {\n                notifyChange(PLAY_STATE_CHANGED)\n            }\n        }\n    }" ],
  "Iconify/900" : [ "", "import android.content.Context\nfun getScreenWidth(context: Context): Int {\n        val displayMetrics = context.resources.displayMetrics\n        return displayMetrics.widthPixels\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/545" : [ "        if (!PreferenceUtil.materialYou) {\n            binding.slidingPanel.backgroundTintList = ColorStateList.valueOf(darkAccentColor())\n            navigationView.backgroundTintList = ColorStateList.valueOf(darkAccentColor())\n--------------------------------------------------\n            binding.slidingPanel.backgroundTintList = ColorStateList.valueOf(darkAccentColor())\n            navigationView.backgroundTintList = ColorStateList.valueOf(darkAccentColor())\n        }\n--------------------------------------------------\n\n        onBackPressedDispatcher.addCallback(onBackPressedCallback)\n    }\n--------------------------------------------------\n        bottomSheetBehavior = from(binding.slidingPanel)\n        bottomSheetBehavior.addBottomSheetCallback(bottomSheetCallbackList)\n        bottomSheetBehavior.isHideable = PreferenceUtil.swipeDownToDismiss\n--------------------------------------------------\n        super.onDestroy()\n        bottomSheetBehavior.removeBottomSheetCallback(bottomSheetCallbackList)\n        PreferenceUtil.unregisterOnSharedPreferenceChangedListener(this)\n--------------------------------------------------\nMusicPlayerRemote.back()", "import code.name.monkey.retromusic.model.Song\nfun back(force: Boolean) {\n        if (songProgressMillis > 2000) {\n            seek(0)\n        } else {\n            playPreviousSong(force)\n        }\n    }\nimport code.name.monkey.retromusic.model.Song" ],
  "MaterialFiles/873" : [ "", "import android.graphics.Bitmap\noverride fun toImage(): Image {\r\n        val bmp = innerBitmap ?: throw UnsupportedOperationException()\r\n        return AndroidImage(bmp)\r\n    }\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)" ],
  "MaterialFiles/875" : [ "delegate.close()\n--------------------------------------------------\nclose()\n--------------------------------------------------\nsuper.close()\n--------------------------------------------------\nlockChannel?.close()", "override fun close() {\r\n        if (lazyDelegate.isInitialized()) {\r\n            delegate.close()\r\n        }\r\n    }" ],
  "VinylMusicPlayer/541" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/539" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    boolean themeChanged = false;\r\n    String theme = PreferenceManager.getDefaultSharedPreferences(this).getString(\"theme\", ColorScheme.defaultTheme());\r\n    if (theme.equals(\"auto\"))\r\n        AppCompatDelegate.setDefaultNightMode((Build.VERSION.SDK_INT < 29) ? AppCompatDelegate.MODE_NIGHT_AUTO_BATTERY : AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);\r\n    else if (theme.equals(\"dawn\"))\r\n        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\r\n    else\r\n        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\r\n    theme = ColorScheme.getUserTheme();\r\n    if (ColorScheme.getInstance().theme == null || !ColorScheme.getInstance().theme.equals(theme)) {\r\n        themeChanged = true;\r\n    }\r\n    setTheme(ColorScheme.getTheme(theme, true));\r\n    ColorScheme.getInstance().setThemeFromContext(this, theme);\r\n    if (themeChanged) {\r\n        EventsList.getInstance().clearCaches();\r\n        AvatarsList.getInstance().clear();\r\n    }\r\n    Bitmap cloud = BitmapFactory.decodeResource(getResources(), R.drawable.splash_logo);\r\n    if (cloud != null) {\r\n        setTaskDescription(new ActivityManager.TaskDescription(getResources().getString(R.string.app_name), cloud, ColorScheme.getInstance().navBarColor));\r\n    }\r\n    getWindow().setStatusBarColor(ColorScheme.getInstance().statusBarColor);\r\n    getWindow().setNavigationBarColor(getResources().getColor(android.R.color.black));\r\n    if (ColorScheme.getInstance().windowBackgroundDrawable != 0)\r\n        getWindow().setBackgroundDrawableResource(ColorScheme.getInstance().windowBackgroundDrawable);\r\n    if (Build.VERSION.SDK_INT >= 23) {\r\n        if (theme.equals(\"dawn\"))\r\n            getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\r\n        else\r\n            getWindow().getDecorView().setSystemUiVisibility(getWindow().getDecorView().getSystemUiVisibility() & ~View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\r\n    }\r\n    mGoogleApiClient = new GoogleApiClient.Builder(this).addApi(Auth.CREDENTIALS_API).addConnectionCallbacks(this).addOnConnectionFailedListener(this).build();\r\n    conn = NetworkConnection.getInstance();\r\n    conn.addHandler(this);\r\n    if (ServersList.getInstance().count() == 0)\r\n        NetworkConnection.getInstance().load();\r\n    try {\r\n        mMultiWindow = new SMultiWindow();\r\n        mMultiWindow.initialize(this);\r\n        mMultiWindowActivity = new SMultiWindowActivity(this);\r\n    } catch (Exception e) {\r\n        mMultiWindow = null;\r\n        mMultiWindowActivity = null;\r\n    } catch (Error e) {\r\n        mMultiWindow = null;\r\n        mMultiWindowActivity = null;\r\n    }\r\n    IntentFilter intentFilter = new IntentFilter();\r\n    intentFilter.addAction(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED);\r\n    registerReceiver(powerSaverListener, intentFilter);\r\n}\n--------------------------------------------------\n@Override\r\npublic void clear() {\r\n    super.clear();\r\n    activePos = -1;\r\n}\n--------------------------------------------------\n", "public synchronized void clear() {\r\n    cache.clear();\r\n    ignores.clear();\r\n}" ],
  "Iconify/909" : [ "cancelQueuedFiles(storedFiles)\n--------------------------------------------------\ncancelQueuedFiles(setOf(eventFile))", "import java.io.File\nfun cancelQueuedFiles(files: Collection<File>?) {\r\n        lock.lock()\r\n        try {\r\n            if (files != null) {\r\n                queuedFiles.removeAll(files)\r\n            }\r\n        } finally {\r\n            lock.unlock()\r\n        }\r\n    }\nimport java.io.File" ],
  "Iconify/908" : [ "destroyLoaderIfExists(MoviesActivityImpl.NOW_TRAKT_USER_LOADER_ID)\n--------------------------------------------------\ndestroyLoaderIfExists(MoviesActivityImpl.NOW_TRAKT_FRIENDS_LOADER_ID)\n--------------------------------------------------\ndestroyLoaderIfExists(ShowsActivityImpl.NOW_RECENTLY_LOADER_ID)\n--------------------------------------------------\ndestroyLoaderIfExists(ShowsActivityImpl.NOW_TRAKT_USER_LOADER_ID)\n--------------------------------------------------\ndestroyLoaderIfExists(ShowsActivityImpl.NOW_TRAKT_FRIENDS_LOADER_ID)", "import androidx.loader.content.Loader\nimport androidx.loader.app.LoaderManager\nprivate fun destroyLoaderIfExists(loaderId: Int) {\r\n        val loaderManager = LoaderManager.getInstance(this)\r\n        if (loaderManager.getLoader<Any>(loaderId) != null) {\r\n            loaderManager.destroyLoader(loaderId)\r\n        }\r\n    }\nImport(names=[androidx, loader, app, LoaderManager], wildcard=false, alias=null)\nImport(names=[androidx, loader, content, Loader], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/536" : [ "@Test\r\npublic void sendPendingMessagesSynchronous_withNonExistentOutbox_shouldNotStartSync() throws MessagingException {\r\n    account.setOutboxFolderId(FOLDER_ID);\r\n    when(localFolder.exists()).thenReturn(false);\r\n    controller.addListener(listener);\r\n    controller.sendPendingMessagesSynchronous(account);\r\n    verifyNoMoreInteractions(listener);\r\n}\n--------------------------------------------------\nprivate void setupAccountWithMessageToSend() throws MessagingException {\r\n    account.setOutboxFolderId(FOLDER_ID);\r\n    account.setSentFolderId(SENT_FOLDER_ID);\r\n    when(localStore.getFolder(SENT_FOLDER_ID)).thenReturn(sentFolder);\r\n    when(sentFolder.getDatabaseId()).thenReturn(SENT_FOLDER_ID);\r\n    when(localFolder.exists()).thenReturn(true);\r\n    when(localFolder.getMessages()).thenReturn(Collections.singletonList(localMessageToSend1));\r\n    when(localMessageToSend1.getUid()).thenReturn(\"localMessageToSend1\");\r\n    when(localMessageToSend1.getDatabaseId()).thenReturn(42L);\r\n    when(localMessageToSend1.getHeader(K9.IDENTITY_HEADER)).thenReturn(new String[] {});\r\n    OutboxState outboxState = new OutboxState(SendState.READY, 0, null, 0);\r\n    OutboxStateRepository outboxStateRepository = mock(OutboxStateRepository.class);\r\n    when(outboxStateRepository.getOutboxState(42L)).thenReturn(outboxState);\r\n    when(localStore.getOutboxStateRepository()).thenReturn(outboxStateRepository);\r\n    controller.addListener(listener);\r\n}\n--------------------------------------------------\n", "import java.util.List\npublic void addListener(MessagingListener listener) {\r\n    listeners.add(listener);\r\n    refreshListener(listener);\r\n}" ],
  "fcitx5-android/75" : [ "            val networkType = BinanceChainKit.NetworkType.MainNet\n            BinanceChainKit.clear(App.instance, networkType, walletId)\r\n        }\n--------------------------------------------------\n{\r\n            BitcoinKit.clear(App.instance, NetworkType.MainNet, walletId)\r\n        }\n--------------------------------------------------\nSolanaKit.clear(App.instance, walletId)\n--------------------------------------------------\nTronKit.clear(App.instance, network, walletId)\n--------------------------------------------------\nBinanceAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinCashAdapter.clear(accountId)\n--------------------------------------------------\nECashAdapter.clear(accountId)\n--------------------------------------------------\nDashAdapter.clear(accountId)\n--------------------------------------------------\nEvmAdapter.clear(accountId)\n--------------------------------------------------\nEip20Adapter.clear(accountId)\n--------------------------------------------------\nZcashAdapter.clear(accountId)\n--------------------------------------------------\nSolanaAdapter.clear(accountId)\n--------------------------------------------------\nTronAdapter.clear(accountId)\n--------------------------------------------------\nstorage.clear()\n--------------------------------------------------\naccountsCache.clear()\n--------------------------------------------------\nadaptersMap.clear()\n--------------------------------------------------\naccountManager.clear()\n--------------------------------------------------\nwalletManager.clear()\n--------------------------------------------------\nlocalStorage.clear()\n--------------------------------------------------\npreferences.edit().clear()\n--------------------------------------------------\nthis.adaptersMap.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ndisposables.clear()\n--------------------------------------------------\nupdatesDisposables.clear()\n--------------------------------------------------\nbalanceAdapterRepository.clear()\n--------------------------------------------------\ndisposable.clear()\n--------------------------------------------------\nrecordMap.clear()\n--------------------------------------------------\nmetadataMap.clear()\n--------------------------------------------------\nnftItemMap.clear()\n--------------------------------------------------\ndao.clear()\n--------------------------------------------------\nfeeService.clear()\n--------------------------------------------------\nsettingsService.clear()\n--------------------------------------------------\nrepository.clear()\n--------------------------------------------------\nservice.clear()\n--------------------------------------------------\ntransactionRecords.clear()\n--------------------------------------------------\nadapters.clear()", "override fun clear() {\r\n        disposable.clear()\r\n        settingsService.clear()\r\n    }" ],
  "Neo-Backup/47" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/535" : [ "public static boolean isSynchronized(String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(null, data);\r\n            if (lyrics.isValid()) {\r\n                return true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\npublic static Lyrics parse(Song song, String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(song, data);\r\n            if (lyrics.isValid()) {\r\n                return lyrics.parse(false);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return new Lyrics().setData(song, data).parse(false);\r\n}\n--------------------------------------------------\n", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\npublic Lyrics setData(Song song, String data) {\r\n    this.song = song;\r\n    this.data = data;\r\n    return this;\r\n}" ],
  "fcitx5-android/76" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/538" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport android.content.DialogInterface\npublic void onClick(DialogInterface dialog, int id) {\r\n    // Do nothing\r\n    return;\r\n}" ],
  "fcitx5-android/73" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/74" : [ "            val networkType = BinanceChainKit.NetworkType.MainNet\n            BinanceChainKit.clear(App.instance, networkType, walletId)\r\n        }\n--------------------------------------------------\n{\r\n            BitcoinKit.clear(App.instance, NetworkType.MainNet, walletId)\r\n        }\n--------------------------------------------------\nSolanaKit.clear(App.instance, walletId)\n--------------------------------------------------\nTronKit.clear(App.instance, network, walletId)\n--------------------------------------------------\nBinanceAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinCashAdapter.clear(accountId)\n--------------------------------------------------\nECashAdapter.clear(accountId)\n--------------------------------------------------\nDashAdapter.clear(accountId)\n--------------------------------------------------\nEvmAdapter.clear(accountId)\n--------------------------------------------------\nEip20Adapter.clear(accountId)\n--------------------------------------------------\nZcashAdapter.clear(accountId)\n--------------------------------------------------\nSolanaAdapter.clear(accountId)\n--------------------------------------------------\nTronAdapter.clear(accountId)\n--------------------------------------------------\nstorage.clear()\n--------------------------------------------------\naccountsCache.clear()\n--------------------------------------------------\nadaptersMap.clear()\n--------------------------------------------------\naccountManager.clear()\n--------------------------------------------------\nwalletManager.clear()\n--------------------------------------------------\nlocalStorage.clear()\n--------------------------------------------------\npreferences.edit().clear()\n--------------------------------------------------\nthis.adaptersMap.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ndisposables.clear()\n--------------------------------------------------\nupdatesDisposables.clear()\n--------------------------------------------------\nbalanceAdapterRepository.clear()\n--------------------------------------------------\ndisposable.clear()\n--------------------------------------------------\nrecordMap.clear()\n--------------------------------------------------\nmetadataMap.clear()\n--------------------------------------------------\nnftItemMap.clear()\n--------------------------------------------------\ndao.clear()\n--------------------------------------------------\nfeeService.clear()\n--------------------------------------------------\nsettingsService.clear()\n--------------------------------------------------\nrepository.clear()\n--------------------------------------------------\nservice.clear()\n--------------------------------------------------\ntransactionRecords.clear()\n--------------------------------------------------\nadapters.clear()", "override fun clear() {\r\n        disposable.clear()\r\n        settingsService.clear()\r\n    }" ],
  "Feeder/270" : [ "GetContent(findNavController())", "import androidx.navigation.NavController\nimport androidx.compose.runtime.Composable\n @Composable\r\n    override fun GetContent(navController: NavController) {\r\n        IndicatorsScreen(\r\n            navController = navController,\r\n        )\r\n    }\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavController" ],
  "VinylMusicPlayer/537" : [ "\n        skipPreset(skipDir)\r\n      }", "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.Flow\nimport com.github.ashutoshgngwr.noice.models.Preset\nimport androidx.lifecycle.lifecycleScope\nprivate fun skipPreset(direction: Int) {\r\n    val current = currentPresetFlow.value ?: return\r\n    lifecycleScope.launch {\r\n      val nextPreset = if (direction < 0) {\r\n        presetRepository.getPreviousPreset(current)\r\n      } else {\r\n        presetRepository.getNextPreset(current)\r\n      }\r\n\r\n      if (nextPreset == null) {\r\n        return@launch\r\n      }\r\n\r\n      soundPlayerManager.playPreset(nextPreset.soundStates)\r\n    }\r\n  }\nimport androidx.lifecycle.lifecycleScope\nimport com.github.ashutoshgngwr.noice.models.Preset\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.launch" ],
  "Feeder/271" : [ "                cancelText = stringResource(R.string.Button_Cancel),\n                onConfirm = {\r\n                    restoreLauncher.launch(arrayOf(\"application/json\"))\n--------------------------------------------------\n                cancelText = stringResource(R.string.Button_Cancel),\n                onConfirm = {\r\n                    coroutineScope.launch {", "import io.horizontalsystems.core.getNavigationResult\nimport io.horizontalsystems.bankwallet.R\nimport androidx.navigation.NavController\nfun onConfirm(navController: NavController, callback: () -> Unit) {\r\n            navController.getNavigationResult(resultKey) {\r\n                if (it.getBoolean(resultKey)) {\r\n                    callback.invoke()\r\n                }\r\n            }\r\n        }\nImport(names=[androidx, navigation, NavController], wildcard=false, alias=null)" ],
  "Feeder/272" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/273" : [ "appendClause(\" WHERE \", selection)\n--------------------------------------------------\nappendClause(\" GROUP BY \", groupBy)\n--------------------------------------------------\nappendClause(\" HAVING \", having)\n--------------------------------------------------\nappendClause(\" ORDER BY \", orderBy)\n--------------------------------------------------\nappendClause(\" LIMIT \", limit)", "private fun StringBuilder.appendClause(name: String, clause: String?) {\r\n        if (!clause.isNullOrEmpty()) {\r\n            append(name)\r\n            append(clause)\r\n        }\r\n    }" ],
  "Neo-Backup/40" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/204" : [ "                Spacer(Modifier.height(24.dp))\n                headline1_leah(\r\n                    text = viewModel.uiState.name", "import androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.TextLayoutResult\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Text\n\r\n@Composable\r\nfun headline1_leah(\r\n    text: String,\r\n    modifier: Modifier = Modifier,\r\n    textAlign: TextAlign? = null,\r\n    overflow: TextOverflow = TextOverflow.Clip,\r\n    maxLines: Int = Int.MAX_VALUE,\r\n    onTextLayout: (TextLayoutResult) -> Unit = {}\r\n) {\r\n    L2(\r\n        text = text,\r\n        modifier = modifier,\r\n        textAlign = textAlign,\r\n        overflow = overflow,\r\n        maxLines = maxLines,\r\n        onTextLayout = onTextLayout,\r\n    )\r\n}\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.TextLayoutResult\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow" ],
  "Feeder/206" : [ "", "import com.mhss.app.mybrain.presentation.util.Screen\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpacesScreenPreview() {\r\n    SpacesScreen(\r\n        navController = rememberNavController()\r\n    )\r\n}\nImport(names=[androidx, navigation, compose, rememberNavController], wildcard=false, alias=null)" ],
  "Feeder/207" : [ "", "import com.mhss.app.mybrain.presentation.util.Screen\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpacesScreenPreview() {\r\n    SpacesScreen(\r\n        navController = rememberNavController()\r\n    )\r\n}\nImport(names=[androidx, navigation, compose, rememberNavController], wildcard=false, alias=null)" ],
  "Trail-Sense/1360" : [ "", "override fun onScale(detector: ScaleGestureDetector): Boolean {\r\n        scaleFactor *= detector.scaleFactor.toDouble()\r\n\r\n        scaleFactor = scaleFactor.coerceIn(0.1, 5.0)\r\n        popupWidth = (width * scaleFactor).toInt()\r\n        popupHeight = (height * scaleFactor).toInt()\r\n        return true\r\n    }" ],
  "Feeder/208" : [ "", "import com.mhss.app.mybrain.presentation.util.Screen\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpacesScreenPreview() {\r\n    SpacesScreen(\r\n        navController = rememberNavController()\r\n    )\r\n}\nImport(names=[androidx, navigation, compose, rememberNavController], wildcard=false, alias=null)" ],
  "Feeder/209" : [ "it.isSupported(address)", "import io.horizontalsystems.bankwallet.entities.Address\noverride fun isSupported(value: String): Boolean {\r\n        return try {\r\n            cache[value] = Address(resolveAddress(value), value, blockchainType)\r\n            true\r\n        } catch (e: Exception) {\r\n            false\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, entities, Address], wildcard=false, alias=null)" ],
  "Trail-Sense/1361" : [ "                && filterByRange(filterVolume, totalVolume.toLong())\n                && inBlockchain(marketInfo.fullCoin.tokens)\r\n                && filterByRange(filterPriceChange, priceChangeValue.toLong())\n--------------------------------------------------\n        tokens.forEach { token ->\n            val inBlockchain = filterBlockchains.any { token.blockchain == it }\r\n            if (inBlockchain) return true\n--------------------------------------------------\n            val inBlockchain = filterBlockchains.any { token.blockchain == it }\n            if (inBlockchain) return true\r\n        }", "import io.horizontalsystems.marketkit.models.Token\nimport io.horizontalsystems.marketkit.models.Blockchain\nprivate fun inBlockchain(tokens: List<Token>): Boolean {\r\n        if (filterBlockchains.isEmpty()) return true\r\n\r\n        tokens.forEach { token ->\r\n            val inBlockchain = filterBlockchains.any { token.blockchain == it }\r\n            if (inBlockchain) return true\r\n        }\r\n\r\n        return false\r\n    }\nimport io.horizontalsystems.marketkit.models.Blockchain\nimport io.horizontalsystems.marketkit.models.Token" ],
  "VinylMusicPlayer/532" : [ "public static boolean isSynchronized(String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(null, data);\r\n            if (lyrics.isValid()) {\r\n                return true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\npublic static Lyrics parse(Song song, String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(song, data);\r\n            if (lyrics.isValid()) {\r\n                return lyrics.parse(false);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return new Lyrics().setData(song, data).parse(false);\r\n}\n--------------------------------------------------\n", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\npublic Lyrics setData(Song song, String data) {\r\n    this.song = song;\r\n    this.data = data;\r\n    return this;\r\n}" ],
  "Neo-Backup/211" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/1366" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1367" : [ "findPreference<Preference>(key)?.isSelectable\n--------------------------------------------------\nfindPreference<Preference>(\"optional_features\")?.isVisible\n--------------------------------------------------\nfindPreference<EditTextPreference>(\"network_caching\")\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = newValue.toString()\n}\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = \"0\"\n}\n--------------------------------------------------\nfindPreference<Preference>(AUDIO_DUCKING)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(RESUME_PLAYBACK)?.isVisible\n--------------------------------------------------\nval aoutPref = findPreference<ListPreference>(\"aout\")\n--------------------------------------------------\nfindPreference<Preference>(\"audio_digital_output\")?.isVisible\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)\n--------------------------------------------------\nfindPreference(\"audio_preferred_language\")!!\n--------------------------------------------------\nfindPreference<Preference>(\"audio_digital_output\")\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(\"audio_digital_output\")?.isChecked\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = fmtValue\n}\n--------------------------------------------------\nfindPreference<Preference>(\"remote_access_category\")?.isVisible\n--------------------------------------------------\nval audioResumePref = findPreference<CheckBoxPreference>(AUDIO_RESUME_PLAYBACK)\n--------------------------------------------------\nfindPreference<ListPreference>(key)?.value\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(AUDIO_RESUME_PLAYBACK)?.isChecked\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(VIDEO_RESUME_PLAYBACK)?.isChecked\n--------------------------------------------------\nval parent = findPreference<PreferenceScreen>(\"optional_features\")\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(key)!!\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(preference.key)!!\n--------------------------------------------------\nfindPreference(KEY_REMOTE_ACCESS_ML_CONTENT)!!\n--------------------------------------------------\nfindPreference(\"subtitle_preferred_language\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_size\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_bold\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_size\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_color_opacity\")!!\n--------------------------------------------------\nfindPreference<ListPreference>(\"subtitles_presets\")!!\n--------------------------------------------------\npreferenceManager.findPreference<EditTextPreference>(\"video_group_size\")\n--------------------------------------------------\nval lp = findPreference<ListPreference>(\"set_locale\")\n--------------------------------------------------\nfindPreference<Preference>(POPUP_FORCE_LEGACY)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(POPUP_KEEPSCREEN)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(AUDIO_BOOST)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_DOUBLE_TAP_SEEK)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_DOUBLE_TAP_PLAY)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_SCALE_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_SWIPE_SEEK)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(SCREENSHOT_MODE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_VOLUME_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_BRIGHTNESS_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(KEY_VIDEO_DOUBLE_TAP_JUMP_DELAY)?.title\n--------------------------------------------------\nfindPreference<Preference>(VIDEO_HUD_TIMEOUT)?.summary", "import androidx.preference.Preference\noverride fun <T : Preference?> findPreference(key: CharSequence): T? {\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return preference as? T\r\n    }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)" ],
  "Neo-Backup/212" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/534" : [ "", "import org.tasks.R\n@Override\r\npublic void onRemoved(int position, int count) {\r\n    notifyItemRangeRemoved(position, count);\r\n    updateFooter();\r\n}" ],
  "VinylMusicPlayer/533" : [ "public static boolean isSynchronized(String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(null, data);\r\n            if (lyrics.isValid()) {\r\n                return true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\npublic static Lyrics parse(Song song, String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(song, data);\r\n            if (lyrics.isValid()) {\r\n                return lyrics.parse(false);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return new Lyrics().setData(song, data).parse(false);\r\n}\n--------------------------------------------------\n", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\npublic Lyrics setData(Song song, String data) {\r\n    this.song = song;\r\n    this.data = data;\r\n    return this;\r\n}" ],
  "Neo-Backup/210" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/215" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/216" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/530" : [ "@Override\r\npublic void onShuffleModeEnabledChanged(boolean shuffleModeEnabled) {\r\n    for (EventListener eventListener : this) {\r\n        eventListener.onShuffleModeEnabledChanged(shuffleModeEnabled);\r\n    }\r\n}\n--------------------------------------------------\n", "import java.util.List\n@Override\r\npublic void onShuffleModeEnabledChanged(boolean shuffleModeEnabled) {\r\n    for (EventListener eventListener : this) {\r\n        eventListener.onShuffleModeEnabledChanged(shuffleModeEnabled);\r\n    }\r\n}" ],
  "Trail-Sense/842" : [ "@Override\r\npublic void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\r\n    callback.onClick(dialog, which.ordinal());\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\r\n    callback.onClick(dialog, which.ordinal());\r\n}\n--------------------------------------------------\n", "import com.afollestad.materialdialogs.DialogAction;\r\nimport com.afollestad.materialdialogs.MaterialDialog;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport com.afollestad.materialdialogs.MaterialDialog\nimport com.afollestad.materialdialogs.DialogAction\n@Override\r\npublic void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\r\n    //                        dialog.dismiss();\r\n    dialog.cancel();\r\n}" ],
  "Neo-Backup/213" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/214" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/529" : [ "@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    new RefreshTask().execute((Void) null);\r\n    if (!PreferenceManager.getDefaultSharedPreferences(this).getBoolean(\"avatars-off\", true) || !PreferenceManager.getDefaultSharedPreferences(this).getBoolean(\"avatar-images\", false)) {\r\n        runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                AlertDialog.Builder builder = new AlertDialog.Builder(AvatarsActivity.this);\r\n                builder.setTitle(\"Enable Avatars\");\r\n                builder.setMessage(\"Viewing avatars in messages requires both the User Icons and Avatars settings to be enabled.  Would you like to enable them now?\");\r\n                builder.setPositiveButton(\"Enable\", new DialogInterface.OnClickListener() {\r\n\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(AvatarsActivity.this).edit();\r\n                        editor.putBoolean(\"avatars-off\", true);\r\n                        editor.putBoolean(\"avatar-images\", true);\r\n                        editor.apply();\r\n                        try {\r\n                            dialog.dismiss();\r\n                        } catch (IllegalArgumentException e) {\r\n                        }\r\n                    }\r\n                });\r\n                builder.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\r\n\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        try {\r\n                            dialog.dismiss();\r\n                        } catch (IllegalArgumentException e) {\r\n                        }\r\n                    }\r\n                });\r\n                if (!isFinishing()) {\r\n                    AlertDialog dialog = builder.create();\r\n                    dialog.setOwnerActivity(AvatarsActivity.this);\r\n                    dialog.show();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    IRCCloudApplication.getInstance().onResume(this);\r\n    finished = false;\r\n    File f = new File(getFilesDir(), \"log.txt\");\r\n    if (f.exists()) {\r\n        android.util.Log.d(\"IRCCloud\", \"Removing stale log file\");\r\n        f.delete();\r\n    }\r\n    new ImageListPruneTask().execute((Void) null);\r\n    if ((NetworkConnection.getInstance().session != null && NetworkConnection.getInstance().session.length() > 0) || BuildConfig.MOCK_DATA) {\r\n        if (conn.notifier) {\r\n            IRCCloudLog.Log(Log.INFO, \"IRCCloud\", \"Upgrading notifier websocket\");\r\n            conn.upgrade();\r\n        }\r\n    } else {\r\n        Intent i = new Intent(this, LoginActivity.class);\r\n        i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n}\n--------------------------------------------------\n", "import com.irccloud.android.R\npublic void onResume() {\r\n    super.onResume();\r\n    refresh();\r\n}" ],
  "Trail-Sense/844" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "Neo-Backup/208" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/209" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/528" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/845" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Neo-Backup/206" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/207" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/847" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/525" : [ "@Override\r\npublic void onDestroyView() {\r\n    EventBus.getDefault().unregister(this);\r\n    adapter.endSelectMode();\r\n    if (toolbar != null) {\r\n        toolbar.setOnMenuItemClickListener(null);\r\n        toolbar.setOnLongClickListener(null);\r\n    }\r\n    super.onDestroyView();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onDestroyView() {\r\n    EventBus.getDefault().unregister(this);\r\n    super.onDestroyView();\r\n}\n--------------------------------------------------\n", "import android.view.View\n@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    listAdapter.endSelectMode();\r\n}" ],
  "fcitx5-android/360" : [ "", "override fun onDestroy() {\n        super.onDestroy()\n        _binding = null\n    }" ],
  "Trail-Sense/848" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/849" : [ "showReminder1Dialog()", "import com.simplemobiletools.calendar.pro.models.Reminder\nimport com.simplemobiletools.calendar.pro.R\nprivate fun showReminder1Dialog() {\r\n        showPickSecondsDialogHelper(mReminder1Minutes) {\r\n            mReminder1Minutes = if (it == -1 || it == 0) it else it / 60\r\n            updateReminderTexts()\r\n        }\r\n    }" ],
  "VinylMusicPlayer/524" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/363" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "fcitx5-android/369" : [ "{\n    var expanded by remember { mutableStateOf(false) }\r\n    Scaffold(\n--------------------------------------------------\n                        modifier = Modifier.testTag(LoginToutTestTag.OPTIONS_ICON.name),\n                        onClick = { expanded = !expanded },\r\n                        enabled = true\n--------------------------------------------------\n                            KSLoginDropdownMenu(\n                                expanded = expanded,\r\n                                onDismissed = { expanded = !expanded },\n--------------------------------------------------\n                                expanded = expanded,\n                                onDismissed = { expanded = !expanded },\r\n                                onTermsOfUseClicked = onTermsOfUseClicked,\n--------------------------------------------------\nif (isExpanded) collapse() else expand()", "private fun expand() {\r\n        expandAnimation()\r\n        isExpanded = true\r\n    }" ],
  "Feeder/214" : [ "", "@Override\r\npublic CharSequence getContentDescription() {\r\n    CharSequence itemText = getText();\r\n    if (mDrawCircle) {\r\n        return String.format(mItemIsSelectedText, itemText);\r\n    } else {\r\n        return itemText;\r\n    }\r\n}" ],
  "Trail-Sense/1370" : [ "updateEmptyView(adapter.itemCount == 0)\n--------------------------------------------------\nupdateEmptyView(isEmpty)", "import androidx.core.view.isGone\nimport android.view.View\nprivate fun updateEmptyView(isEmpty: Boolean) {\r\n        recyclerView.isGone = isEmpty\r\n        textViewEmpty.isGone = !isEmpty\r\n    }\nImport(names=[androidx, core, view, isGone], wildcard=false, alias=null)" ],
  "Feeder/215" : [ "", "@Override\r\npublic CharSequence getContentDescription() {\r\n    CharSequence itemText = getText();\r\n    if (mDrawCircle) {\r\n        return String.format(mItemIsSelectedText, itemText);\r\n    } else {\r\n        return itemText;\r\n    }\r\n}" ],
  "Feeder/216" : [ "super.onFinishInflate()", "override fun onFinishInflate() {\r\n        super.onFinishInflate()\r\n        binding.imageViewAddIndicatorAdded.visibility = GONE\r\n        binding.progressBarAddIndicator.visibility = GONE\r\n    }" ],
  "Feeder/217" : [ "super.onFinishInflate()", "override fun onFinishInflate() {\r\n        super.onFinishInflate()\r\n        binding.imageViewAddIndicatorAdded.visibility = GONE\r\n        binding.progressBarAddIndicator.visibility = GONE\r\n    }" ],
  "Trail-Sense/1374" : [ "", "override fun getItemId(position: Int): Long {\r\n        if (!isPositionValid(position)) return -1\r\n        val item = getItem(position)\r\n        return item?.id ?: -1\r\n    }" ],
  "Feeder/218" : [ "", "import com.mhss.app.mybrain.presentation.util.Screen\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpacesScreenPreview() {\r\n    SpacesScreen(\r\n        navController = rememberNavController()\r\n    )\r\n}\nImport(names=[androidx, navigation, compose, rememberNavController], wildcard=false, alias=null)" ],
  "Trail-Sense/1371" : [ "                        .fillMaxWidth()\n                        .wrapContentHeight()\r\n                        .padding(end = 16.dp),\n--------------------------------------------------\n            .fillMaxWidth()\n            .wrapContentHeight()\r\n            .padding(\n--------------------------------------------------\nthemeBase.wrap(context)", "import android.content.Context\nprivate fun wrap(context: Context): Context {\r\n        val wrapper = themeBase.wrap(context)\r\n        applyToContext(wrapper)\r\n        return wrapper\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/521" : [ "            val nextPosition = getNextPosition(false)\n            playbackManager.setNextDataSource(getSongAt(nextPosition).uri.toString())\n            this.nextPosition = nextPosition", "import org.koin.java.KoinJavaComponent.get\nimport code.name.monkey.retromusic.model.Song.Companion.emptySong\nimport code.name.monkey.retromusic.model.Song\nprivate fun getSongAt(position: Int): Song {\n        return if ((position >= 0) && (position < playingQueue.size)) {\n            playingQueue[position]\n        } else {\n            emptySong\n        }\n    }\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.model.Song.Companion.emptySong\nimport org.koin.java.KoinJavaComponent.get" ],
  "Neo-Backup/222" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/1377" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1378" : [ "\n            val initialDelay = calculateInitialDelay(lastSyncTime, syncIntervalMinutes)\r\n            Timber.v(\"  initial delay: %d ms\", initialDelay)", "private fun calculateInitialDelay(lastSyncTime: Long, syncIntervalMinutes: Long): Long {\r\n        val now = clock.now().toEpochMilliseconds()\r\n        val nextSyncTime = lastSyncTime + (syncIntervalMinutes * 60L * 1000L)\r\n\r\n        return if (lastSyncTime > now || nextSyncTime <= now) {\r\n            0L\r\n        } else {\r\n            nextSyncTime - now\r\n        }\r\n    }" ],
  "Neo-Backup/223" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/220" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/1375" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/221" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/522" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/851" : [ "repository.favoritePlaylist()\n--------------------------------------------------\n        lifecycleScope.launch(IO) {\n            val playlist: PlaylistEntity = libraryViewModel.favoritePlaylist()\n            val songEntity = song.toSongEntity(playlist.playListId)\n--------------------------------------------------\nlibraryViewModel.favoritePlaylist()", "override suspend fun favoritePlaylist(favorite: String): PlaylistEntity {\n        val playlist: PlaylistEntity? = playlistDao.playlist(favorite).firstOrNull()\n        return if (playlist != null) {\n            playlist\n        } else {\n            createPlaylist(PlaylistEntity(playlistName = favorite))\n            playlistDao.playlist(favorite).first()\n        }\n    }" ],
  "Neo-Backup/226" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/227" : [ "mediaList.addEventListener(this@PlaylistManager)\n--------------------------------------------------\nmediaList.addEventListener(this)", " @Synchronized\r\n    fun addEventListener(listener: EventListener) {\r\n        if (!eventListenerList.contains(listener))\r\n            eventListenerList.add(listener)\r\n    }" ],
  "Neo-Backup/224" : [ "info.toDomainEntity()\n--------------------------------------------------\nsegments.toDomainEntity()\n--------------------------------------------------\nit.toDomainEntity()\n--------------------------------------------------\napiClient.subscriptions().list(onlyActive = true).firstOrNull()?.toDomainEntity()\n--------------------------------------------------\nappDb.subscriptions().getByRenewsAfter(System.currentTimeMillis())?.toDomainEntity()", "import com.github.ashutoshgngwr.noice.data.models.SoundInfoDto\nfun SoundInfoDto.toDomainEntity(): SoundInfo {\r\n  return SoundInfo(\r\n    id = metadata.id,\r\n    group = group.toDomainEntity(),\r\n    name = metadata.name,\r\n    iconSvg = metadata.iconSvg,\r\n    maxSilence = metadata.maxSilence,\r\n    isPremium = metadata.isPremium,\r\n    hasPremiumSegments = metadata.hasPremiumSegments,\r\n    tags = tags.toDomainEntity(),\r\n    sources = sources.toDomainEntity(),\r\n  )\r\n}\nimport com.github.ashutoshgngwr.noice.data.models.SoundInfoDto" ],
  "Trail-Sense/1379" : [ "        if (list == null) {\n            var defaultOrder = preferences.getStringValue(prefId)\r\n            if (isNullOrEmpty(defaultOrder)) {\n--------------------------------------------------\n        )\n        preferences.getStringValue(R.string.p_default_recurrence)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n                }\n        preferences.getStringValue(R.string.p_default_location)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n        if (tags.isEmpty()) {\n            preferences.getStringValue(R.string.p_default_tags)\r\n                    ?.split(\",\")\n--------------------------------------------------\npreferences.getStringValue(R.string.p_dashclock_filter)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_account)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_folder)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_list)\n--------------------------------------------------\npreferences.getStringValue(resId)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_start_of_week)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_recurrence)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_location)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_tags)", "import timber.log.Timber\nfun getStringValue(key: String?): String? = try {\r\n        prefs.getString(key, null)\r\n    } catch (e: Exception) {\r\n        Timber.e(e)\r\n        null\r\n    }\nimport timber.log.Timber" ],
  "Neo-Backup/225" : [ "TextUtils.equals(status, \"CONNECTED\")\n--------------------------------------------------\nTextUtils.equals(status, \"FAILED\")\n--------------------------------------------------\nsuper.equals(other)\n--------------------------------------------------\nother.address.equals(address, ignoreCase = true)\n--------------------------------------------------\naddress.equals(uniswapKit.etherToken().address.hex, true)\n--------------------------------------------------\naddress.equals(uniswapV3Kit.etherToken().address.hex, true)\n--------------------------------------------------\nmanufacturer.equals(Build.MANUFACTURER, ignoreCase = true)", "override fun equals(other: Any?): Boolean {\r\n        if (other is ProFeaturesSessionKey) {\r\n            return nftName == other.nftName && accountId == other.accountId\r\n        }\r\n\r\n        return false\r\n    }" ],
  "VinylMusicPlayer/518" : [ "listener.onQueueChanged()\n--------------------------------------------------\nactivity.onQueueChanged()\n--------------------------------------------------\nsuper.onQueueChanged()", "import code.name.monkey.retromusic.helper.MusicPlayerRemote\nimport code.name.monkey.retromusic.R\noverride fun onQueueChanged() {\n        super.onQueueChanged()\n        if (MusicPlayerRemote.playingQueue.isNotEmpty()) updateLabel()\n    }" ],
  "Neo-Backup/219" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/217" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/519" : [ "    when (intent?.action) {\n      ACTION_PLAY_SOUND -> soundPlayerManager.playSound(getSoundIdExtra(intent))\r\n      ACTION_STOP_SOUND -> soundPlayerManager.stopSound(getSoundIdExtra(intent))\n--------------------------------------------------\n      ACTION_PLAY_SOUND -> soundPlayerManager.playSound(getSoundIdExtra(intent))\n      ACTION_STOP_SOUND -> soundPlayerManager.stopSound(getSoundIdExtra(intent))\r\n      ACTION_RESUME -> soundPlayerManager.resume()\n--------------------------------------------------\n        val volume = intent.getFloatExtra(INTENT_EXTRA_VOLUME, -1F)\n        soundPlayerManager.setSoundVolume(getSoundIdExtra(intent), volume)\r\n      }", "import android.content.Intent\nprivate fun getSoundIdExtra(intent: Intent): String {\r\n    return requireNotNull(intent.getStringExtra(INTENT_EXTRA_SOUND_ID)) {\r\n      \"intent extra '${INTENT_EXTRA_SOUND_ID}' is required to send '${intent.action}' command\"\r\n    }\r\n  }\nimport android.content.Intent" ],
  "Neo-Backup/218" : [ "{\n    setupToolbar()\r\n    setupList()", "import voice.data.Bookmark\nimport voice.app.databinding.BookmarkBinding\nimport voice.app.R\nprivate fun BookmarkBinding.setupToolbar() {\r\n    toolbar.setNavigationIcon(R.drawable.close)\r\n    toolbar.setNavigationOnClickListener {\r\n      router.popController(this@BookmarkController)\r\n    }\r\n  }\nimport voice.app.R\nimport voice.app.databinding.BookmarkBinding\nimport voice.data.Bookmark" ],
  "Trail-Sense/858" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/998" : [ "public static void writeSAF(Context context, AudioFile audio, Uri safUri) {\r\n    Uri uri = null;\r\n    if (context == null) {\r\n        Log.e(TAG, \"writeSAF: context == null\");\r\n        return;\r\n    }\r\n    if (isTreeUriSaved(context)) {\r\n        List<String> pathSegments = new ArrayList<>(Arrays.asList(audio.getFile().getAbsolutePath().split(\"/\")));\r\n        Uri sdcard = Uri.parse(PreferenceUtil.INSTANCE.getSafSdCardUri());\r\n        uri = findDocument(DocumentFile.fromTreeUri(context, sdcard), pathSegments);\r\n    }\r\n    if (uri == null) {\r\n        uri = safUri;\r\n    }\r\n    if (uri == null) {\r\n        Log.e(TAG, \"writeSAF: Can't get SAF URI\");\r\n        toast(context, context.getString(R.string.saf_error_uri));\r\n        return;\r\n    }\r\n    try {\r\n        // copy file to app folder to use jaudiotagger\r\n        final File original = audio.getFile();\r\n        File temp = File.createTempFile(\"tmp-media\", '.' + Utils.getExtension(original));\r\n        Utils.copy(original, temp);\r\n        temp.deleteOnExit();\r\n        audio.setFile(temp);\r\n        writeFile(audio);\r\n        ParcelFileDescriptor pfd = context.getContentResolver().openFileDescriptor(uri, \"rw\");\r\n        if (pfd == null) {\r\n            Log.e(TAG, \"writeSAF: SAF provided incorrect URI: \" + uri);\r\n            return;\r\n        }\r\n        // now read persisted data and write it to real FD provided by SAF\r\n        FileInputStream fis = new FileInputStream(temp);\r\n        byte[] audioContent = FileUtil.readBytes(fis);\r\n        FileOutputStream fos = new FileOutputStream(pfd.getFileDescriptor());\r\n        fos.write(audioContent);\r\n        fos.close();\r\n        temp.delete();\r\n    } catch (final Exception e) {\r\n        Log.e(TAG, \"writeSAF: Failed to write to file descriptor provided by SAF\", e);\r\n        toast(context, String.format(context.getString(R.string.saf_write_failed), e.getLocalizedMessage()));\r\n    }\r\n}\n--------------------------------------------------\n", "import java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.ByteArrayOutputStream\npublic static byte[] readBytes(InputStream stream) throws IOException {\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    byte[] buffer = new byte[4096];\r\n    int count;\r\n    while ((count = stream.read(buffer)) != -1) {\r\n        baos.write(buffer, 0, count);\r\n    }\r\n    stream.close();\r\n    return baos.toByteArray();\r\n}" ],
  "VinylMusicPlayer/514" : [ "{\n        openTrackAndPrepareNextAt(position) { success ->\n            if (success) {\n--------------------------------------------------\n        serviceScope.launch(if (playbackManager.isLocalPlayback) Default else Main) {\n            openTrackAndPrepareNextAt(position) { success ->\n                if (success) {\n--------------------------------------------------\n        playbackManager.setCallbacks(this)\n        openTrackAndPrepareNextAt(position) { success ->\n            if (success) {", " @Synchronized\n    fun openTrackAndPrepareNextAt(position: Int, completion: (success: Boolean) -> Unit) {\n        this.position = position\n        openCurrent { success ->\n            completion(success)\n            if (success) {\n                prepareNextImpl()\n            }\n            notifyChange(META_CHANGED)\n            notHandledMetaChangedForCurrentTrack = false\n        }\n    }" ],
  "VinylMusicPlayer/997" : [ "", "import java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.IOException\nimport java.io.File\npublic static File safeGetCanonicalFile(File file) {\r\n    try {\r\n        return file.getCanonicalFile();\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return file.getAbsoluteFile();\r\n    }\r\n}" ],
  "fcitx5-android/351" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "VinylMusicPlayer/515" : [ "jsonObject.getSafeBoolean(\"bold\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"link\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"italic\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"monospace\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"strikethrough\")", "import org.json.JSONObject\nimport org.json.JSONException\nprivate fun JSONObject.getSafeBoolean(name: String): Boolean {\r\n        return try {\r\n            getBoolean(name)\r\n        } catch (exception: JSONException) {\r\n            false\r\n        }\r\n    }\nImport(names=[org, json, JSONException], wildcard=false, alias=null)\nImport(names=[org, json, JSONObject], wildcard=false, alias=null)" ],
  "fcitx5-android/354" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "fcitx5-android/357" : [ "", "import org.tasks.R\nimport kotlinx.coroutines.launch\nimport androidx.preference.Preference\nimport androidx.lifecycle.lifecycleScope\nimport android.os.Bundle\nfinal override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(getPreferenceXml(), rootKey)\r\n\r\n        tintIcons(preferenceScreen, requireContext().getColor(R.color.icon_tint_with_alpha))\r\n\r\n        lifecycleScope.launch {\r\n            setupPreferences(savedInstanceState)\r\n        }\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, lifecycleScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)" ],
  "Feeder/210" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Feeder/211" : [ "dialogConfirmed(binding.deleteNoteCheckbox.isChecked)\n--------------------------------------------------\ndialogConfirmed()", "private fun dialogConfirmed(deleteFile: Boolean) {\r\n        callback(deleteFile && note.path.isNotEmpty())\r\n        dialog?.dismiss()\r\n    }" ],
  "fcitx5-android/358" : [ "credentialsAdapter.checkToken()", "import com.google.auth.oauth2.GoogleCredentials\nimport com.google.auth.oauth2.AccessToken\nsuspend fun checkToken() {\r\n        if (credentials == null) {\r\n            val token = googleAccountManager.getAccessToken(account, scope)\r\n            credentials = GoogleCredentials(AccessToken(token, null))\r\n        }\r\n    }\nImport(names=[com, google, auth, oauth2, GoogleCredentials], wildcard=false, alias=null)" ],
  "Feeder/227" : [ "player.service?.playlistManager?.setDelayValue(System.currentTimeMillis(), true)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(-1L, true)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(System.currentTimeMillis(), false)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(-1L, false)", "fun setDelayValue(time: Long, start: Boolean) {\r\n        val value = delayValue.value ?: DelayValues()\r\n        if (start) value.start = time else value.stop = time\r\n        delayValue.value = value\r\n    }" ],
  "Feeder/228" : [ "        if (enabled) {\n            jobManager.scheduleAllMailJobs()\r\n        }\n--------------------------------------------------\n            K9.backgroundOps = newBackgroundOps\n            jobManager.scheduleAllMailJobs()\r\n        }", "import timber.log.Timber\nfun scheduleAllMailJobs() {\r\n        Timber.v(\"scheduling all jobs\")\r\n        scheduleMailSync()\r\n    }\nimport timber.log.Timber" ],
  "Iconify/494" : [ "it.isSupported(address)", "override fun isSupported(value: String) = try {\r\n        converter.convert(value)\r\n        true\r\n    } catch (e: Throwable) {\r\n        false\r\n    }" ],
  "Iconify/493" : [ "void init(TextPaint paint, int width, int gravity) {\r\n    Layout.Alignment align;\r\n    switch(gravity) {\r\n        case GRAVITY_LEFT:\r\n            align = Layout.Alignment.ALIGN_NORMAL;\r\n            break;\r\n        default:\r\n        case GRAVITY_CENTER:\r\n            align = Layout.Alignment.ALIGN_CENTER;\r\n            break;\r\n        case GRAVITY_RIGHT:\r\n            align = Layout.Alignment.ALIGN_OPPOSITE;\r\n            break;\r\n    }\r\n    staticLayout = new StaticLayout(getShowText(), paint, width, align, 1f, 0f, false);\r\n    offset = Float.MIN_VALUE;\r\n}\n--------------------------------------------------\n", "import android.text.TextUtils\nprivate String getShowText() {\r\n    if (!TextUtils.isEmpty(secondText)) {\r\n        return text + \"\\n\" + secondText;\r\n    } else {\r\n        return text;\r\n    }\r\n}" ],
  "Neo-Backup/230" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/994" : [ "public static String read(File file) throws Exception {\r\n    FileInputStream fin = new FileInputStream(file);\r\n    String ret = readFromStream(fin);\r\n    fin.close();\r\n    return ret;\r\n}\n--------------------------------------------------\n", "import java.io.BufferedReader;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.InputStreamReader\nimport java.io.InputStream\nimport java.io.BufferedReader\npublic static String readFromStream(InputStream is) throws Exception {\r\n    BufferedReader reader = new BufferedReader(new InputStreamReader(is));\r\n    StringBuilder sb = new StringBuilder();\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        if (sb.length() > 0) {\r\n            sb.append(\"\\n\");\r\n        }\r\n        sb.append(line);\r\n    }\r\n    reader.close();\r\n    return sb.toString();\r\n}" ],
  "Neo-Backup/233" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1388" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/510" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/993" : [ "", "public static String stripExtension(String str) {\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    int pos = str.lastIndexOf('.');\r\n    if (pos == -1) {\r\n        return str;\r\n    }\r\n    return str.substring(0, pos);\r\n}" ],
  "Neo-Backup/234" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/1389" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/996" : [ "private void addPathImpl(File file) {\r\n    if (file == null || contains(file)) {\r\n        return;\r\n    }\r\n    String path = FileUtil.safeGetCanonicalPath(file);\r\n    final SQLiteDatabase database = getWritableDatabase();\r\n    database.beginTransaction();\r\n    try {\r\n        // add the entry\r\n        final ContentValues values = new ContentValues(1);\r\n        values.put(BlacklistStoreColumns.PATH, path);\r\n        database.insert(BlacklistStoreColumns.NAME, null, values);\r\n        database.setTransactionSuccessful();\r\n    } finally {\r\n        database.endTransaction();\r\n    }\r\n}\n--------------------------------------------------\npublic boolean contains(File file) {\r\n    if (file == null) {\r\n        return false;\r\n    }\r\n    String path = FileUtil.safeGetCanonicalPath(file);\r\n    final SQLiteDatabase database = getReadableDatabase();\r\n    Cursor cursor = database.query(BlacklistStoreColumns.NAME, new String[] { BlacklistStoreColumns.PATH }, BlacklistStoreColumns.PATH + \"=?\", new String[] { path }, null, null, null, null);\r\n    boolean containsPath = cursor != null && cursor.moveToFirst();\r\n    if (cursor != null) {\r\n        cursor.close();\r\n    }\r\n    return containsPath;\r\n}\n--------------------------------------------------\n", "import java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.IOException\nimport java.io.File\npublic static String safeGetCanonicalPath(File file) {\r\n    try {\r\n        return file.getCanonicalPath();\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return file.getAbsolutePath();\r\n    }\r\n}" ],
  "Neo-Backup/231" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/512" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/860" : [ "{\n        super.onResume()\r\n        if (currentNightMode != nightMode || currentPro != inventory.hasPro) {\n--------------------------------------------------\n{\n        super.onResume()\r\n        if (showKeyboard) {\n--------------------------------------------------\nsuper.onResume()\n--------------------------------------------------\nmap.onResume()", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        updateSort()\r\n    }\nimport org.tasks.R" ],
  "VinylMusicPlayer/511" : [ "    when (intent?.action) {\n      ACTION_PLAY_SOUND -> soundPlayerManager.playSound(getSoundIdExtra(intent))\r\n      ACTION_STOP_SOUND -> soundPlayerManager.stopSound(getSoundIdExtra(intent))\n--------------------------------------------------\n      ACTION_PLAY_SOUND -> soundPlayerManager.playSound(getSoundIdExtra(intent))\n      ACTION_STOP_SOUND -> soundPlayerManager.stopSound(getSoundIdExtra(intent))\r\n      ACTION_RESUME -> soundPlayerManager.resume()\n--------------------------------------------------\n        val volume = intent.getFloatExtra(INTENT_EXTRA_VOLUME, -1F)\n        soundPlayerManager.setSoundVolume(getSoundIdExtra(intent), volume)\r\n      }", "import android.content.Intent\nprivate fun getSoundIdExtra(intent: Intent): String {\r\n    return requireNotNull(intent.getStringExtra(INTENT_EXTRA_SOUND_ID)) {\r\n      \"intent extra '${INTENT_EXTRA_SOUND_ID}' is required to send '${intent.action}' command\"\r\n    }\r\n  }\nimport android.content.Intent" ],
  "Trail-Sense/861" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Neo-Backup/232" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/1387" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/237" : [ "                if (textState.text.isNotEmpty()) {\n                    ButtonSecondaryCircle(\r\n                        modifier = Modifier.padding(start = 8.dp, end = 16.dp),\n--------------------------------------------------\n\n                    ButtonSecondaryCircle(\r\n                        icon = R.drawable.ic_manage_2,\n--------------------------------------------------\nButtonSecondaryCircle(modifier = Modifier.padding(horizontal = 16.dp), icon = icon, tint = iconTint) {\n    navController.slideFromRight(R.id.manageAccountFragment, ManageAccountModule.prepareParams(accountViewItem.accountId))\n}", "import io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme\nimport io.horizontalsystems.bankwallet.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Icon\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.background\nimport androidx.annotation.DrawableRes\n\r\n@Composable\r\nfun ButtonSecondaryCircle(\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    @DrawableRes icon: Int = R.drawable.ic_arrow_down_20,\r\n    contentDescription: String? = null,\r\n    tint: Color = ComposeAppTheme.colors.leah,\r\n    onClick: () -> Unit,\r\n) {\r\n    HsIconButton(\r\n        onClick = onClick,\r\n        modifier = modifier\r\n            .size(28.dp)\r\n            .clip(CircleShape)\r\n            .background(ComposeAppTheme.colors.steel20),\r\n        enabled = enabled,\r\n        rippleColor = tint\r\n    ) {\r\n        Icon(\r\n            painter = painterResource(id = icon),\r\n            contentDescription = contentDescription,\r\n            tint = tint\r\n        )\r\n    }\r\n}\nimport androidx.annotation.DrawableRes\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.Icon\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme" ],
  "Trail-Sense/862" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/238" : [ "                if (textState.text.isNotEmpty()) {\n                    ButtonSecondaryCircle(\r\n                        modifier = Modifier.padding(start = 8.dp, end = 16.dp),\n--------------------------------------------------\n\n                    ButtonSecondaryCircle(\r\n                        icon = R.drawable.ic_manage_2,\n--------------------------------------------------\nButtonSecondaryCircle(modifier = Modifier.padding(horizontal = 16.dp), icon = icon, tint = iconTint) {\n    navController.slideFromRight(R.id.manageAccountFragment, ManageAccountModule.prepareParams(accountViewItem.accountId))\n}", "import io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme\nimport io.horizontalsystems.bankwallet.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Icon\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.background\nimport androidx.annotation.DrawableRes\n\r\n@Composable\r\nfun ButtonSecondaryCircle(\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    @DrawableRes icon: Int = R.drawable.ic_arrow_down_20,\r\n    contentDescription: String? = null,\r\n    tint: Color = ComposeAppTheme.colors.leah,\r\n    onClick: () -> Unit,\r\n) {\r\n    HsIconButton(\r\n        onClick = onClick,\r\n        modifier = modifier\r\n            .size(28.dp)\r\n            .clip(CircleShape)\r\n            .background(ComposeAppTheme.colors.steel20),\r\n        enabled = enabled,\r\n        rippleColor = tint\r\n    ) {\r\n        Icon(\r\n            painter = painterResource(id = icon),\r\n            contentDescription = contentDescription,\r\n            tint = tint\r\n        )\r\n    }\r\n}\nimport androidx.annotation.DrawableRes\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.Icon\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme" ],
  "VinylMusicPlayer/992" : [ "@NonNull\r\npublic static List<File> listFilesDeep(@NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    List<File> files = new LinkedList<>();\r\n    internalListFilesDeep(files, directory, fileFilter);\r\n    return files;\r\n}\n--------------------------------------------------\n@NonNull\r\npublic static List<File> listFilesDeep(@NonNull Collection<File> files, @Nullable FileFilter fileFilter) {\r\n    List<File> resFiles = new LinkedList<>();\r\n    for (File file : files) {\r\n        if (file.isDirectory()) {\r\n            internalListFilesDeep(resFiles, file, fileFilter);\r\n        } else if (fileFilter == null || fileFilter.accept(file)) {\r\n            resFiles.add(file);\r\n        }\r\n    }\r\n    return resFiles;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\nimport java.util.Collection;\r\nimport java.util.List\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nprivate static void internalListFilesDeep(@NonNull Collection<File> files, @NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        for (File file : found) {\r\n            if (file.isDirectory()) {\r\n                internalListFilesDeep(files, file, fileFilter);\r\n            } else {\r\n                files.add(file);\r\n            }\r\n        }\r\n    }\r\n}" ],
  "Trail-Sense/864" : [ "listsAdapter.getItemListId(selectedListIndex)", "fun getItemListId(position: Int): String? {\r\n        return if (position < items.size) {\r\n            items[position].listId\r\n        } else {\r\n            null\r\n        }\r\n    }" ],
  "Neo-Backup/235" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/991" : [ "", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\nimport java.util.Collection;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.LinkedList\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<File> listFilesDeep(@NonNull Collection<File> files, @Nullable FileFilter fileFilter) {\r\n    List<File> resFiles = new LinkedList<>();\r\n    for (File file : files) {\r\n        if (file.isDirectory()) {\r\n            internalListFilesDeep(resFiles, file, fileFilter);\r\n        } else if (fileFilter == null || fileFilter.accept(file)) {\r\n            resFiles.add(file);\r\n        }\r\n    }\r\n    return resFiles;\r\n}" ],
  "Trail-Sense/865" : [ "binding.dayHolder.getViewBitmap()\n--------------------------------------------------\ncalendarEventsList.getViewBitmap()\n--------------------------------------------------\nbinding.monthCalendarHolder.getViewBitmap()\n--------------------------------------------------\nbinding.weekViewHolder.getViewBitmap()\n--------------------------------------------------\nbinding.calendarWrapper.getViewBitmap()", "import android.view.View\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nfun View.getViewBitmap(): Bitmap {\r\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\r\n    val canvas = Canvas(bitmap)\r\n    layout(left, top, right, bottom)\r\n    draw(canvas)\r\n    return bitmap\r\n}\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Neo-Backup/236" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/1016" : [ "public boolean isSimilarTo(SyncActivityItem o) {\r\n    return this.getSport().equals(o.getSport()) && Math.abs(this.getStartTime() - o.getStartTime()) < 30 && (Math.abs(this.getDuration() - o.getDuration()) < 30 || Math.abs(this.getDistance().longValue() - o.getDistance().longValue()) < 100);\r\n}\n--------------------------------------------------\npublic boolean isSimilarTo(SyncActivityItem o) {\r\n    return this.getSport().equals(o.getSport()) && Math.abs(this.getStartTime() - o.getStartTime()) < 30 && (Math.abs(this.getDuration() - o.getDuration()) < 30 || Math.abs(this.getDistance().longValue() - o.getDistance().longValue()) < 100);\r\n}\n--------------------------------------------------\n", "public double getDuration(Dimension dimension) {\r\n    if (durationType == dimension)\r\n        return durationValue;\r\n    return 0;\r\n}" ],
  "VinylMusicPlayer/506" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/509" : [ "", "import org.koin.android.ext.android.get\nimport org.jellyfin.mobile.R\nimport com.google.android.exoplayer2.C\nimport android.support.v4.media.session.PlaybackStateCompat\noverride fun getSupportedPrepareActions(): Long = 0L or\r\n            PlaybackStateCompat.ACTION_PREPARE or\r\n            PlaybackStateCompat.ACTION_PLAY or\r\n            PlaybackStateCompat.ACTION_PREPARE_FROM_MEDIA_ID or\r\n            PlaybackStateCompat.ACTION_PLAY_FROM_MEDIA_ID or\r\n            PlaybackStateCompat.ACTION_PREPARE_FROM_SEARCH or\r\n            PlaybackStateCompat.ACTION_PLAY_FROM_SEARCH\nimport android.support.v4.media.session.PlaybackStateCompat\nimport com.google.android.exoplayer2.C\nimport org.jellyfin.mobile.R\nimport org.koin.android.ext.android.get" ],
  "fcitx5-android/380" : [ "", "override fun onDestroy() {\n        super.onDestroy()\n        _binding = null\n    }" ],
  "Neo-Backup/228" : [ "alarmRepository.getAlarms()", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Alarm\noverride suspend fun getAlarms(): List<Alarm> {\r\n        return withContext(ioDispatcher) {\r\n            alarmDao.getAll()\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/868" : [ "siblings.removeAt(index)\n--------------------------------------------------\nchildren.removeAt(i)\n--------------------------------------------------\nremoveAt(from)\n--------------------------------------------------\ndisplayOrder.removeAt(visibleSize)\n--------------------------------------------------\npreferenceScreen.removeAt(current, index - current)", "import androidx.preference.PreferenceScreen\nimport androidx.preference.Preference\nfun PreferenceScreen.removeAt(index: Int, count: Int = 1) {\r\n            repeat(count) {\r\n                removePreference(getPreference(index))\r\n            }\r\n        }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceScreen], wildcard=false, alias=null)" ],
  "Neo-Backup/229" : [ "", "import java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\nimport java.util.concurrent.locks.ReentrantLock\nimport java.util.concurrent.locks.Lock\nprivate static Lock getThreadLock(String key) {\r\n    synchronized (sThreadLocks) {\r\n        Lock threadLock = sThreadLocks.get(key);\r\n        if (threadLock == null) {\r\n            threadLock = new ReentrantLock();\r\n            sThreadLocks.put(key, threadLock);\r\n        }\r\n        return threadLock;\r\n    }\r\n}" ],
  "VinylMusicPlayer/1019" : [ "@Override\r\npublic void write(JsonWriter writer, @Nullable Boolean value) {\r\n    serializeNullable(value, writer);\r\n}\n--------------------------------------------------\npublic static void serialize(final Map<String, String> value, final JsonWriter sw) {\r\n    sw.writeByte(JsonWriter.OBJECT_START);\r\n    final int size = value.size();\r\n    if (size > 0) {\r\n        final Iterator<Map.Entry<String, String>> iterator = value.entrySet().iterator();\r\n        Map.Entry<String, String> kv = iterator.next();\r\n        StringConverter.serializeShort(kv.getKey(), sw);\r\n        sw.writeByte(JsonWriter.SEMI);\r\n        StringConverter.serializeNullable(kv.getValue(), sw);\r\n        for (int i = 1; i < size; i++) {\r\n            sw.writeByte(JsonWriter.COMMA);\r\n            kv = iterator.next();\r\n            StringConverter.serializeShort(kv.getKey(), sw);\r\n            sw.writeByte(JsonWriter.SEMI);\r\n            StringConverter.serializeNullable(kv.getValue(), sw);\r\n        }\r\n    }\r\n    sw.writeByte(JsonWriter.OBJECT_END);\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.annotation.Nullable\npublic static void serializeNullable(@Nullable final String value, final JsonWriter sw) {\r\n    if (value == null) {\r\n        sw.writeNull();\r\n    } else {\r\n        sw.writeString(value);\r\n    }\r\n}" ],
  "VinylMusicPlayer/1018" : [ "", "import android.net.Uri;\r\nimport android.text.TextUtils;\r\nimport androidx.room.TypeConverter\nimport android.text.TextUtils\nimport android.net.Uri\n@TypeConverter\r\npublic static String[] toStringArray(String value) {\r\n    if (value == null)\r\n        return new String[0];\r\n    else {\r\n        String[] result = TextUtils.split(value, \" \");\r\n        for (int i = 0; i < result.length; i++) result[i] = Uri.decode(result[i]);\r\n        return result;\r\n    }\r\n}" ],
  "VinylMusicPlayer/989" : [ "@NonNull\r\npublic static List<File> listFiles(@NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    List<File> fileList = new LinkedList<>();\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        Collections.addAll(fileList, found);\r\n    }\r\n    return fileList;\r\n}\n--------------------------------------------------\nprivate static void internalListFilesDeep(@NonNull Collection<File> files, @NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        for (File file : found) {\r\n            if (file.isDirectory()) {\r\n                internalListFilesDeep(files, file, fileFilter);\r\n            } else {\r\n                files.add(file);\r\n            }\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.LinkedList\nimport java.util.Collections\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<File> listFiles(@NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    List<File> fileList = new LinkedList<>();\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        Collections.addAll(fileList, found);\r\n    }\r\n    return fileList;\r\n}" ],
  "fcitx5-android/384" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "VinylMusicPlayer/988" : [ "@Nullable\r\npublic static SortedCursor makeSongCursor(@NonNull final Context context, @Nullable final List<File> files) {\r\n    String selection = null;\r\n    String[] paths = null;\r\n    if (files != null) {\r\n        paths = toPathArray(files);\r\n        if (files.size() > 0 && files.size() < 999) {\r\n            // 999 is the max amount Androids SQL implementation can handle.\r\n            selection = Constants.DATA + \" IN (\" + makePlaceholders(files.size()) + \")\";\r\n        }\r\n    }\r\n    Cursor songCursor = new RealSongRepository(context).makeSongCursor(selection, selection == null ? null : paths, PreferenceUtil.INSTANCE.getSongSortOrder(), true);\r\n    return songCursor == null ? null : new SortedCursor(songCursor, paths, Constants.DATA);\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.io.File\nimport androidx.annotation.Nullable\n@Nullable\r\nprivate static String[] toPathArray(@Nullable List<File> files) {\r\n    if (files != null) {\r\n        String[] paths = new String[files.size()];\r\n        for (int i = 0; i < files.size(); i++) {\r\n            paths[i] = safeGetCanonicalPath(files.get(i));\r\n        }\r\n        return paths;\r\n    }\r\n    return null;\r\n}" ],
  "fcitx5-android/387" : [ "changePriority()", "import org.tasks.compose.edit.Priority\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.NonCancellable\nimport androidx.lifecycle.lifecycleScope\nprivate fun changePriority() {\r\n        lifecycleScope.launch(NonCancellable) {\r\n            taskDao\r\n                .fetch(taskIds.toList())\r\n                .forEach {\r\n                    taskDao.save(it.copy(priority = priorityPickerViewModel.priority.value))\r\n                }\r\n        }\r\n        dismiss()\r\n    }\nImport(names=[androidx, lifecycle, lifecycleScope], wildcard=false, alias=null)" ],
  "fcitx5-android/389" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "Trail-Sense/1391" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1392" : [ "", "override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n\r\n        if (s == null) return\r\n        val length = s.length\r\n        if (length > 0) {\r\n            playlistModel?.filter(s)\r\n        } else {\r\n            playlistModel?.filter(null)\r\n        }\r\n    }" ],
  "Feeder/236" : [ "{\n    MenuRow(\r\n        modifier = Modifier\n--------------------------------------------------\n{\n    MenuRow(onClick = onClick) {\r\n        DrawerIcon(icon = icon)\n--------------------------------------------------\n        Divider(modifier = Modifier.fillMaxWidth())\n        MenuRow(\r\n            padding = PaddingValues(start = 16.dp),", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.clickable\n\r\n@Composable\r\nprivate fun MenuRow(\r\n    modifier: Modifier = Modifier,\r\n    padding: PaddingValues = PaddingValues(horizontal = 16.dp),\r\n    onClick: () -> Unit,\r\n    content: @Composable RowScope.() -> Unit,\r\n) {\r\n    Row(\r\n        modifier = modifier\r\n            .clickable(onClick = onClick)\r\n            .height(48.dp)\r\n            .padding(padding)\r\n            .fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        content = content\r\n    )\r\n}\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Feeder/237" : [ "        if (item.icon != -1) {\n            DrawerIcon(icon = item.icon, color = item.color)\r\n        }\n--------------------------------------------------\n    MenuRow(onClick = onClick) {\n        DrawerIcon(icon = icon)\r\n        Spacer(modifier = Modifier.width(16.dp))", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.ContentAlpha\nimport androidx.compose.foundation.layout.size\n\r\n@Composable\r\nprivate fun DrawerIcon(icon: Int, color: Int = 0) {\r\n    Icon(\r\n        modifier = Modifier.size(24.dp),\r\n        painter = painterResource(id = icon),\r\n        contentDescription = null,\r\n        tint = when (color) {\r\n            0 -> MaterialTheme.colors.onSurface\r\n            else -> Color(color)\r\n        }.copy(alpha = ContentAlpha.medium)\r\n    )\r\n}\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.ContentAlpha\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Trail-Sense/1390" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Feeder/238" : [ "        if (item.icon != -1) {\n            DrawerIcon(icon = item.icon, color = item.color)\r\n        }\n--------------------------------------------------\n    MenuRow(onClick = onClick) {\n        DrawerIcon(icon = icon)\r\n        Spacer(modifier = Modifier.width(16.dp))", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.ContentAlpha\nimport androidx.compose.foundation.layout.size\n\r\n@Composable\r\nprivate fun DrawerIcon(icon: Int, color: Int = 0) {\r\n    Icon(\r\n        modifier = Modifier.size(24.dp),\r\n        painter = painterResource(id = icon),\r\n        contentDescription = null,\r\n        tint = when (color) {\r\n            0 -> MaterialTheme.colors.onSurface\r\n            else -> Color(color)\r\n        }.copy(alpha = ContentAlpha.medium)\r\n    )\r\n}\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.ContentAlpha\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Trail-Sense/1395" : [ "            disconnect = getDisconnectButtonState(state, connection),\n            cancel = getCancelButtonState(state),\r\n            remove = getRemoveButtonState(state, connection),", "import io.horizontalsystems.bankwallet.modules.walletconnect.session.v2.WC2SessionServiceState.Ready\nimport io.horizontalsystems.bankwallet.R\nprivate fun getCancelButtonState(state: WC2SessionServiceState): WCButtonState {\r\n        return if (state != Ready) {\r\n            WCButtonState.Enabled\r\n        } else {\r\n            WCButtonState.Hidden\r\n        }\r\n    }\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.modules.walletconnect.session.v2.WC2SessionServiceState.Ready" ],
  "Neo-Backup/240" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Feeder/239" : [ "            item {\n                MenuAction(\r\n                    icon = R.drawable.ic_outline_attach_money_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_edit_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_settings_24px,\n--------------------------------------------------\n        item {\n            MenuAction(\r\n                icon = R.drawable.ic_outline_help_outline_24px,", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\n\r\n@Composable\r\nprivate fun MenuAction(\r\n    icon: Int,\r\n    title: Int,\r\n    onClick: () -> Unit,\r\n) {\r\n    MenuRow(onClick = onClick) {\r\n        DrawerIcon(icon = icon)\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Text(\r\n            text = stringResource(id = title),\r\n            color = MaterialTheme.colors.onSurface,\r\n            modifier = Modifier.weight(1f),\r\n        )\r\n    }\r\n}\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Neo-Backup/241" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1393" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1394" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/983" : [ "", "import android.content.ComponentCallbacks2;\r\nimport android.content.ComponentCallbacks2\n/**\r\n * Memory availability callback. TRIM_MEMORY_UI_HIDDEN means the app's UI is no longer visible.\r\n * This is triggered when the user navigates out of the app and primarily used to free resources used by the UI.\r\n * http://developer.android.com/training/articles/memory.html\r\n */\r\n@Override\r\npublic void onTrimMemory(final int i) {\r\n    if (i == ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {\r\n        this.isInBackground = true;\r\n    }\r\n}" ],
  "Neo-Backup/244" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/245" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/985" : [ "", "import android.content.ComponentCallbacks2;\r\nimport android.content.ComponentCallbacks2\n/**\r\n * Memory availability callback. TRIM_MEMORY_UI_HIDDEN means the app's UI is no longer visible.\r\n * This is triggered when the user navigates out of the app and primarily used to free resources used by the UI.\r\n * http://developer.android.com/training/articles/memory.html\r\n */\r\n@Override\r\npublic void onTrimMemory(final int i) {\r\n    if (i == ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {\r\n        this.isInBackground = true;\r\n    }\r\n}" ],
  "Neo-Backup/242" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/984" : [ "", "import it.feio.android.omninotes.models.Attachment;\r\nimport it.feio.android.omninotes.utils.StorageHelper;\r\nimport it.feio.android.omninotes.utils.StorageHelper\nimport it.feio.android.omninotes.models.Attachment\nimport it.feio.android.omninotes.OmniNotes\nimport android.net.Uri\n@Override\r\nprotected Attachment doInBackground(Void... params) {\r\n    Attachment attachment = StorageHelper.createAttachmentFromUri(OmniNotes.getAppContext(), uri);\r\n    if (attachment != null) {\r\n        attachment.setName(this.fileName);\r\n    }\r\n    return attachment;\r\n}" ],
  "VinylMusicPlayer/500" : [ "                    mediaSession?.setMetadata(metaData.build())\n                    onCompletion()\n                }\n--------------------------------------------------\n            mediaSession?.setMetadata(metaData.build())\n            onCompletion()\n        }", "import android.media.MediaPlayer\noverride fun onCompletion(mp: MediaPlayer) {\n        if (mp == mCurrentMediaPlayer && mNextMediaPlayer != null) {\n            isInitialized = false\n            mCurrentMediaPlayer.release()\n            mCurrentMediaPlayer = mNextMediaPlayer!!\n            isInitialized = true\n            mNextMediaPlayer = null\n            callbacks?.onTrackWentToNext()\n        } else {\n            callbacks?.onTrackEnded()\n        }\n    }\nimport android.media.MediaPlayer" ],
  "Neo-Backup/243" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/248" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/249" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/246" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/247" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/877" : [ "inStream.copyTo(tempFile)\n--------------------------------------------------\ndb.copyTo(dbCopy)\n--------------------------------------------------\ninStream.copyTo(outStream)\n--------------------------------------------------\nthis.copyTo(outStream)", "import java.io.OutputStream\nimport java.io.InputStream\nimport java.io.FileOutputStream\nimport java.io.File\nfun InputStream.copyTo(dst: File) {\r\n    val outStream = FileOutputStream(dst)\r\n    this.copyTo(outStream)\r\n}\nImport(names=[java, io, File], wildcard=false, alias=null)\nImport(names=[java, io, FileOutputStream], wildcard=false, alias=null)\nImport(names=[java, io, InputStream], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/1004" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n@NonNull\r\npublic static synchronized HistoryStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new HistoryStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "Neo-Backup/239" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/1009" : [ "\n                        val image = getAlbumArtDrawable(service, bitmap)\n                        val roundedBitmap = createRoundedBitmap(\n--------------------------------------------------\n\n                        val image = getAlbumArtDrawable(service, bitmap)\n                        val roundedBitmap =", "import code.name.monkey.retromusic.R\nimport androidx.core.content.ContextCompat\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.BitmapDrawable\nimport android.content.Context\nprotected fun getAlbumArtDrawable(context: Context, bitmap: Bitmap?): Drawable {\n        return if (bitmap == null) {\n            ContextCompat.getDrawable(context, R.drawable.default_audio_art)!!\n        } else {\n            BitmapDrawable(context.resources, bitmap)\n        }\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, graphics, drawable, BitmapDrawable], wildcard=false, alias=null)\nImport(names=[android, graphics, drawable, Drawable], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, R], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/1008" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n/**\r\n * @param context The {@link Context} to use\r\n * @return A new instance of this class.\r\n */\r\n@NonNull\r\npublic static synchronized SongPlayCountStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new SongPlayCountStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "fcitx5-android/370" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    EventBus.getDefault().unregister(this);\r\n}\n--------------------------------------------------\n", "import de.greenrobot.event.EventBus;\r\nimport de.greenrobot.event.EventBus\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    EventBus.getDefault().register(this);\r\n}" ],
  "VinylMusicPlayer/978" : [ "            \"past_seven_days\" -> calendarUtil.getElapsedDays(7)\n            \"past_three_months\" -> calendarUtil.getElapsedMonths(3)\n            \"this_year\" -> calendarUtil.elapsedYear", "fun getElapsedMonths(numMonths: Int): Long {\n        // Today + rest of this month\n        var elapsed = elapsedMonth\n\n        // Previous numMonths months\n        var month = calendar[Calendar.MONTH]\n        var year = calendar[Calendar.YEAR]\n        for (i in 0 until numMonths) {\n            month--\n            if (month < Calendar.JANUARY) {\n                month = Calendar.DECEMBER\n                year--\n            }\n            elapsed += getDaysInMonth(month) * MS_PER_DAY\n        }\n        return elapsed\n    }" ],
  "VinylMusicPlayer/977" : [ "            \"past_seven_days\" -> calendarUtil.getElapsedDays(7)\n            \"past_three_months\" -> calendarUtil.getElapsedMonths(3)\n            \"this_year\" -> calendarUtil.elapsedYear", "fun getElapsedMonths(numMonths: Int): Long {\n        // Today + rest of this month\n        var elapsed = elapsedMonth\n\n        // Previous numMonths months\n        var month = calendar[Calendar.MONTH]\n        var year = calendar[Calendar.YEAR]\n        for (i in 0 until numMonths) {\n            month--\n            if (month < Calendar.JANUARY) {\n                month = Calendar.DECEMBER\n                year--\n            }\n            elapsed += getDaysInMonth(month) * MS_PER_DAY\n        }\n        return elapsed\n    }" ],
  "fcitx5-android/377" : [ "Files.createDirectory(file.toPath())\n--------------------------------------------------\ncreateDirectory(file)", "import java.nio.file.Files\nimport java.io.File\nimport android.os.Build\nprivate fun createDirectory(file: File) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            Files.createDirectory(file.toPath())\r\n        } else file.mkdir()\r\n    }\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)\nImport(names=[java, nio, file, Files], wildcard=false, alias=null)" ],
  "fcitx5-android/379" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "Feeder/233" : [ "        }\n        val deleteIntent = Intent(context, NotificationClearedReceiver::class.java)\r\n        deleteIntent.putExtra(EXTRA_NOTIFICATION_ID, notificationId)", "import kotlinx.coroutines.runBlocking\noverride fun onCleared() {\r\n        if (!cleared) {\r\n            runBlocking {\r\n                save(remove = false)\r\n            }\r\n        }\r\n    }\nimport kotlinx.coroutines.runBlocking" ],
  "MaterialFiles/1000" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/974" : [ "                    dashBoardTasks = if (showCompleted) tasks else tasks.filter { !it.isCompleted },\n                    summaryTasks = tasks.filter { it.createdDate.inTheLastWeek() }\r\n                )", "fun Long.inTheLastWeek(): Boolean {\r\n    val calendar = Calendar.getInstance()\r\n    calendar.add(Calendar.WEEK_OF_MONTH, -1)\r\n    return this > calendar.timeInMillis\r\n}" ],
  "Trail-Sense/1321" : [ "R.id.import_folder -> openFolder()\n--------------------------------------------------\nopenFolder(it) {\n    ImportFolderDialog(this, it.path) {\n        NotesHelper(this).getNotes {\n            mNotes = it\n            showSaveButton = false\n            initViewPager()\n        }\n    }\n}", "import java.io.File\nprivate fun openFolder(path: String, onChecksPassed: (file: File) -> Unit) {\r\n        val file = File(path)\r\n        if (file.isDirectory) {\r\n            onChecksPassed(file)\r\n        }\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/970" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/969" : [ "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n", "import com.irccloud.android.data.model.Notification;\r\nimport java.util.List;\r\nimport java.util.List\nimport com.irccloud.android.data.model.Notification\npublic static NotificationsList getInstance() {\r\n    if (instance == null)\r\n        instance = new NotificationsList();\r\n    return instance;\r\n}" ],
  "VinylMusicPlayer/968" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1328" : [ "database.sgListHelper().deleteListItems(toRemove)", "import com.battlelancer.seriesguide.provider.SeriesGuideContract.ListItems\nimport androidx.room.Transaction\n @Transaction\r\n    fun deleteListItems(listItemIds: List<String>) {\r\n        listItemIds.forEach {\r\n            deleteListItem(it)\r\n        }\r\n    }\nimport androidx.room.Transaction\nimport com.battlelancer.seriesguide.provider.SeriesGuideContract.ListItems" ],
  "Trail-Sense/809" : [ "playlistModel.previous()\n--------------------------------------------------\nplaylistModel.previous(true)\n--------------------------------------------------\nkeycodeListener.previous()\n--------------------------------------------------\nservice?.previous(false)\n--------------------------------------------------\nplaybackService.previous(false)\n--------------------------------------------------\nACTION_REMOTE_BACKWARD -> previous(false)\n--------------------------------------------------\nplaylistManager.previous(force)\n--------------------------------------------------\nprevious(force)", "fun previous(force : Boolean = false) = service?.run {\r\n        if (hasPrevious() || isSeekable) {\r\n            previous(force)\r\n            true\r\n        } else false\r\n    } ?: false" ],
  "MaterialFiles/1010" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1330" : [ "                        .fillMaxWidth()\n                        .wrapContentHeight()\r\n                        .padding(end = 16.dp),\n--------------------------------------------------\n            .fillMaxWidth()\n            .wrapContentHeight()\r\n            .padding(\n--------------------------------------------------\nthemeBase.wrap(context)", "import android.content.Context\nprivate fun wrap(context: Context): Context {\r\n        val wrapper = themeBase.wrap(context)\r\n        applyToContext(wrapper)\r\n        return wrapper\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/961" : [ "", "import android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.View\nimport android.view.MotionEvent\n@Override\r\npublic boolean onTouch(View view, MotionEvent motionEvent) {\r\n    mGestureDetector.onTouchEvent(motionEvent);\r\n    return true;\r\n}" ],
  "Trail-Sense/1334" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1331" : [ "{\n        migrateUriPreference(R.string.p_backup_dir)\r\n        migrateUriPreference(R.string.p_attachment_dir)\n--------------------------------------------------\n        migrateUriPreference(R.string.p_backup_dir)\n        migrateUriPreference(R.string.p_attachment_dir)\r\n        for (userActivity in userActivityDao.getComments()) {", "import java.io.File\nimport org.tasks.Strings.isNullOrEmpty\nimport org.tasks.R\nimport android.net.Uri\nprivate fun migrateUriPreference(pref: Int) {\r\n        val path = preferences.getStringValue(pref)\r\n        if (isNullOrEmpty(path)) {\r\n            return\r\n        }\r\n        val file = File(path)\r\n        try {\r\n            if (file.canWrite()) {\r\n                preferences.setUri(pref, file.toURI())\r\n            } else {\r\n                preferences.remove(pref)\r\n            }\r\n        } catch (ignored: SecurityException) {\r\n            preferences.remove(pref)\r\n        }\r\n    }\nimport android.net.Uri\nimport org.tasks.R\nimport org.tasks.Strings.isNullOrEmpty\nimport java.io.File" ],
  "Trail-Sense/1338" : [ "setupOptionsMenu()", "import com.simplemobiletools.calendar.pro.models.EventType\nimport com.simplemobiletools.calendar.pro.R\nprivate fun setupOptionsMenu() {\r\n        binding.manageEventTypesToolbar.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.add_event_type -> showEventTypeDialog()\r\n                else -> return@setOnMenuItemClickListener false\r\n            }\r\n            return@setOnMenuItemClickListener true\r\n        }\r\n    }\nImport(names=[com, simplemobiletools, calendar, pro, R], wildcard=false, alias=null)" ],
  "Trail-Sense/810" : [ "amountType.toggle()\n--------------------------------------------------\n                                    modifier = Modifier.padding(horizontal = 16.dp),\n                                    onClick = { viewModel.toggle(wallet) }\r\n                                ) {\n--------------------------------------------------\n                                        onCheckedChange = {\n                                            viewModel.toggle(wallet)\r\n                                        },", "fun toggle() {\r\n        if (toggleAvailable) {\r\n            amountType = amountType.toggle()\r\n        }\r\n    }" ],
  "Trail-Sense/1336" : [ "override fun onResume() {\n    super.onResume()\n    updateHelper.start()\n}", "override fun onPause() {\n        super.onPause()\n        updateHelper.stop()\n    }" ],
  "VinylMusicPlayer/958" : [ "", "import kotlin.math.abs\nimport android.view.MotionEvent\noverride fun onFling(e1: MotionEvent?, e2: MotionEvent, velocityX: Float, velocityY: Float): Boolean {\r\n        if (abs(velocityX) > FLING_STOP_VELOCITY || velocityY > FLING_STOP_VELOCITY) {\r\n            stopPlayback()\r\n            return true\r\n        }\r\n        return false\r\n    }\nImport(names=[android, view, MotionEvent], wildcard=false, alias=null)" ],
  "Trail-Sense/811" : [ "{\r\n        super.onSupportActionModeStarted(mode)\r\n        actionMode = mode\r\n    }", "import androidx.appcompat.view.ActionMode\noverride fun onSupportActionModeStarted(mode: ActionMode) {\r\n        super.onSupportActionModeStarted(mode)\r\n        actionMode = mode\r\n    }\nimport androidx.appcompat.view.ActionMode" ],
  "VinylMusicPlayer/957" : [ "", "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    savePreference();\r\n}" ],
  "Trail-Sense/1339" : [ "            'o' -> {\n                messageListFragment!!.onCycleSort()\r\n                return true", "import com.fsck.k9.Account.SortType\nfun onCycleSort() {\r\n        val sortTypes = SortType.entries\r\n        val currentIndex = sortTypes.indexOf(sortType)\r\n        val newIndex = if (currentIndex == sortTypes.lastIndex) 0 else currentIndex + 1\r\n        val nextSortType = sortTypes[newIndex]\r\n        changeSort(nextSortType)\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.Account.SortType" ],
  "Trail-Sense/813" : [ "restoreBrightness()", "import org.videolan.vlc.R\nprivate fun restoreBrightness() {\r\n        if (settings.getBoolean(SAVE_BRIGHTNESS, false)) {\r\n            val brightness = settings.getFloat(BRIGHTNESS_VALUE, -1f)\r\n            if (brightness != -1f) setWindowBrightness(brightness)\r\n        }\r\n    }" ],
  "fcitx5-android/391" : [ "", "import org.tasks.ui.TaskEditViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n            inflater: LayoutInflater,\r\n            container: ViewGroup?,\r\n            savedInstanceState: Bundle?\r\n    ): View {\r\n        viewModel = ViewModelProvider(requireParentFragment())[TaskEditViewModel::class.java]\r\n        val view = bind(container)\r\n        createView(savedInstanceState)\r\n        return view\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, ViewModelProvider], wildcard=false, alias=null)" ],
  "fcitx5-android/390" : [ "", "import org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    EventBus.getDefault().unregister(this);\r\n    if (disposable != null) {\r\n        disposable.dispose();\r\n    }\r\n}" ],
  "Trail-Sense/814" : [ "viewModel.onDashboardEvent(DashboardEvent.InitAll)\n--------------------------------------------------\nviewModel.onDashboardEvent(DashboardEvent.ReadPermissionChanged(it))\n--------------------------------------------------\nviewModel.onDashboardEvent(DashboardEvent.UpdateTask(it))", "import kotlinx.coroutines.launch\nimport com.mhss.app.mybrain.domain.model.Task\nimport com.mhss.app.mybrain.domain.model.CalendarEvent\nimport androidx.lifecycle.viewModelScope\nfun onDashboardEvent(event: DashboardEvent) {\r\n        when(event) {\r\n            is DashboardEvent.ReadPermissionChanged -> {\r\n                if (event.hasPermission)\r\n                    getCalendarEvents()\r\n            }\r\n            is DashboardEvent.UpdateTask -> viewModelScope.launch {\r\n                updateTask(event.task)\r\n            }\r\n            DashboardEvent.InitAll -> collectDashboardData()\r\n        }\r\n    }\nimport androidx.lifecycle.viewModelScope\nimport com.mhss.app.mybrain.domain.model.CalendarEvent\nimport com.mhss.app.mybrain.domain.model.Task\nimport kotlinx.coroutines.launch" ],
  "VinylMusicPlayer/954" : [ "this@AbsMusicServiceActivity.onServiceConnected()\n--------------------------------------------------\nlistener.onServiceConnected()\n--------------------------------------------------\nsuper.onServiceConnected()", "override fun onServiceConnected() {\n        updateIsFavorite()\n        updateBlur()\n    }" ],
  "Trail-Sense/815" : [ "if (brightness != -1f) setWindowBrightness(brightness)\n--------------------------------------------------\nsetWindowBrightness(brightness)", "private fun setWindowBrightness(brightness: Float) {\r\n        val lp = window.attributes\r\n        lp.screenBrightness = brightness\r\n        // Set Brightness\r\n        window.attributes = lp\r\n    }" ],
  "Trail-Sense/816" : [ "preferences.setPurchases(purchases.values)\n--------------------------------------------------\n{\r\n        setPurchases(purchases.map(Purchase::toJson).toHashSet())\r\n    }", "import timber.log.Timber\nimport org.tasks.billing.Purchase\nimport org.tasks.R\nprivate fun setPurchases(set: HashSet<String>) {\r\n        try {\r\n            setStringSet(R.string.p_purchases, set)\r\n        } catch (e: Exception) {\r\n            Timber.e(e)\r\n        }\r\n    }\nimport org.tasks.R\nimport org.tasks.billing.Purchase\nimport timber.log.Timber" ],
  "VinylMusicPlayer/956" : [ "", "import com.simplemobiletools.notes.pro.models.Note\noverride fun onResume() {\r\n        super.onResume()\r\n        loadNoteById(noteId)\r\n    }" ],
  "Trail-Sense/819" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1009" : [ "super.onResume()", "import org.videolan.vlc.R\nimport android.view\noverride fun onResume() {\r\n        if (viewModel.isApiLoading.value == false) viewModel.onRefresh()\r\n        super.onResume()\r\n    }\nImport(names=[android, view], wildcard=true, alias=null)" ],
  "Trail-Sense/1349" : [ "changeEpisodeFlag(EpisodeFlags.WATCHED)\n--------------------------------------------------\nchangeEpisodeFlag(EpisodeFlags.UNWATCHED)\n--------------------------------------------------\nchangeEpisodeFlag(if (skipped) EpisodeFlags.UNWATCHED else EpisodeFlags.SKIPPED)\n--------------------------------------------------\nchangeEpisodeFlag(EpisodeFlags.SKIPPED)", "private fun changeEpisodeFlag(episodeFlag: Int) {\r\n        this.episodeFlag = episodeFlag\r\n        EpisodeTools.episodeWatched(\r\n            requireContext(),\r\n            episodeId,\r\n            episodeFlag\r\n        )\r\n    }" ],
  "Trail-Sense/820" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/946" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n    boolean monospaced = prefs.getBoolean(\"monospaced\", false);\r\n    getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n    getSupportActionBar().setSubtitle(getString(R.string.title_edit_signature));\r\n    LayoutInflater inflater = LayoutInflater.from(this);\r\n    view = (ViewGroup) inflater.inflate(R.layout.activity_signature, null, false);\r\n    setContentView(view);\r\n    tvHtmlRemark = findViewById(R.id.tvHtmlRemark);\r\n    etText = findViewById(R.id.etText);\r\n    ibFull = findViewById(R.id.ibFull);\r\n    style_bar = findViewById(R.id.style_bar);\r\n    bottom_navigation = findViewById(R.id.bottom_navigation);\r\n    etText.setTypeface(monospaced ? Typeface.MONOSPACE : Typeface.DEFAULT);\r\n    etText.setSelectionListener(new EditTextCompose.ISelection() {\r\n\r\n        @Override\r\n        public void onSelected(boolean selection) {\r\n            style_bar.setVisibility(selection && !etText.isRaw() ? View.VISIBLE : View.GONE);\r\n        }\r\n    });\r\n    etText.addTextChangedListener(StyleHelper.getTextWatcher(etText));\r\n    etText.addTextChangedListener(new TextWatcher() {\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            // Do nothing\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            if (loaded && !(start == 0 && before == s.length() && count == s.length())) {\r\n                dirty = true;\r\n                saved = null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            // Do nothing\r\n        }\r\n    });\r\n    StyleHelper.wire(this, view, etText);\r\n    ibFull.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            Bundle args = new Bundle();\r\n            args.putString(\"html\", getHtml());\r\n            args.putBoolean(\"overview_mode\", false);\r\n            args.putBoolean(\"safe_browsing\", false);\r\n            args.putBoolean(\"force_light\", true);\r\n            FragmentDialogOpenFull dialog = new FragmentDialogOpenFull();\r\n            dialog.setArguments(args);\r\n            dialog.show(getSupportFragmentManager(), \"signature\");\r\n        }\r\n    });\r\n    bottom_navigation.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\r\n\r\n        @Override\r\n        public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n            int itemId = item.getItemId();\r\n            if (itemId == R.id.action_insert_image) {\r\n                insertImage();\r\n                return true;\r\n            } else if (itemId == R.id.action_insert_link) {\r\n                insertLink();\r\n                return true;\r\n            } else if (itemId == R.id.action_delete) {\r\n                delete();\r\n                return true;\r\n            } else if (itemId == R.id.action_save) {\r\n                save();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {\r\n\r\n        @Override\r\n        public void handleOnBackPressed() {\r\n            if (Helper.isKeyboardVisible(view)) {\r\n                Helper.hideKeyboard(view);\r\n                return;\r\n            }\r\n            String prev = getIntent().getStringExtra(\"html\");\r\n            String current = getHtml();\r\n            boolean dirty = !Objects.equals(prev, current) && !(TextUtils.isEmpty(prev) && TextUtils.isEmpty(current));\r\n            if (dirty)\r\n                new AlertDialog.Builder(ActivitySignature.this).setIcon(R.drawable.twotone_save_alt_24).setTitle(R.string.title_ask_save).setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\r\n\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        save();\r\n                        performBack();\r\n                    }\r\n                }).setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {\r\n\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        finish();\r\n                    }\r\n                }).show();\r\n            else\r\n                performBack();\r\n        }\r\n    });\r\n    // Initialize\r\n    FragmentDialogTheme.setBackground(this, view, true);\r\n    tvHtmlRemark.setVisibility(View.GONE);\r\n    style_bar.setVisibility(View.GONE);\r\n    setResult(RESULT_CANCELED, new Intent());\r\n    if (savedInstanceState == null) {\r\n        load(getIntent().getStringExtra(\"html\"));\r\n        dirty = false;\r\n    } else {\r\n        dirty = savedInstanceState.getBoolean(\"fair:dirty\");\r\n        saved = savedInstanceState.getString(\"fair:saved\");\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n    TupleAccountEx account = items.get(position);\r\n    holder.powner.recreate(account == null ? null : account.id);\r\n    holder.unwire();\r\n    holder.bindTo(account);\r\n    holder.wire();\r\n}\n--------------------------------------------------\n", "import java.util.List\nprivate void wire() {\r\n    view.setOnClickListener(this);\r\n    view.setOnLongClickListener(this);\r\n}" ],
  "Trail-Sense/827" : [ "if (brightness != -1f) setWindowBrightness(brightness)\n--------------------------------------------------\nsetWindowBrightness(brightness)", "private fun setWindowBrightness(brightness: Float) {\r\n        val lp = window.attributes\r\n        lp.screenBrightness = brightness\r\n        // Set Brightness\r\n        window.attributes = lp\r\n    }" ],
  "Trail-Sense/828" : [ "/**\r\n * Manage check/uncheck of notes in list during multiple selection phase\r\n */\r\nprivate void toggleListViewItem(View view, int position) {\r\n    Note note = listAdapter.getItem(position);\r\n    LinearLayout cardLayout = view.findViewById(R.id.card_layout);\r\n    if (!getSelectedNotes().contains(note)) {\r\n        getSelectedNotes().add(note);\r\n        listAdapter.addSelectedItem(position);\r\n        cardLayout.setBackgroundColor(getResources().getColor(R.color.list_bg_selected));\r\n    } else {\r\n        getSelectedNotes().remove(note);\r\n        listAdapter.removeSelectedItem(position);\r\n        listAdapter.restoreDrawable(note, cardLayout);\r\n    }\r\n    prepareActionModeMenu();\r\n    if (getSelectedNotes().isEmpty()) {\r\n        finishActionMode();\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic // Used to show a Crouton dialog after saved (or tried to) a note\r\nvoid onActivityResult(int requestCode, final int resultCode, Intent intent) {\r\n    super.onActivityResult(requestCode, resultCode, intent);\r\n    switch(requestCode) {\r\n        case REQUEST_CODE_CATEGORY:\r\n            // Dialog retarded to give time to activity's views of being completely initialized\r\n            // The dialog style is choosen depending on result code\r\n            switch(resultCode) {\r\n                case Activity.RESULT_OK:\r\n                    mainActivity.showMessage(R.string.category_saved, ONStyle.CONFIRM);\r\n                    EventBus.getDefault().post(new CategoriesUpdatedEvent());\r\n                    break;\r\n                case Activity.RESULT_FIRST_USER:\r\n                    mainActivity.showMessage(R.string.category_deleted, ONStyle.ALERT);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        case REQUEST_CODE_CATEGORY_NOTES:\r\n            if (intent != null) {\r\n                Category tag = intent.getParcelableExtra(INTENT_CATEGORY);\r\n                categorizeNotesExecute(tag);\r\n            }\r\n            break;\r\n        case REQUEST_CODE_ADD_ALARMS:\r\n            selectedNotes.clear();\r\n            finishActionMode();\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.appcompat.view.ActionMode\npublic void finishActionMode() {\r\n    if (getActionMode() != null) {\r\n        getActionMode().finish();\r\n    }\r\n}" ],
  "Trail-Sense/829" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1018" : [ "super.onResume()", "import org.videolan.vlc.R\nimport android.view\noverride fun onResume() {\r\n        if (viewModel.isApiLoading.value == false) viewModel.onRefresh()\r\n        super.onResume()\r\n    }\nImport(names=[android, view], wildcard=true, alias=null)" ],
  "MaterialFiles/1019" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1032" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/200" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/1355" : [ "                        .fillMaxWidth()\n                        .wrapContentHeight()\r\n                        .padding(end = 16.dp),\n--------------------------------------------------\n            .fillMaxWidth()\n            .wrapContentHeight()\r\n            .padding(\n--------------------------------------------------\nthemeBase.wrap(context)", "import android.content.Context\nprivate fun wrap(context: Context): Context {\r\n        val wrapper = themeBase.wrap(context)\r\n        applyToContext(wrapper)\r\n        return wrapper\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1356" : [ "            R.id.unsubscribe -> onUnsubscribe()\n            R.id.show_headers -> onShowHeaders()\r\n            else -> return false", "import com.fsck.k9.ui.messagesource.MessageSourceActivity\nimport com.fsck.k9.ui.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun onShowHeaders() {\r\n        val launchIntent = MessageSourceActivity.createLaunchIntent(requireActivity(), messageReference)\r\n        startActivity(launchIntent)\r\n    }\nimport android.app.Activity\nimport android.content.Intent\nimport com.fsck.k9.ui.R\nimport com.fsck.k9.ui.messagesource.MessageSourceActivity" ],
  "Neo-Backup/201" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/1353" : [ "            R.id.unsubscribe -> onUnsubscribe()\n            R.id.show_headers -> onShowHeaders()\r\n            else -> return false", "import com.fsck.k9.ui.messagesource.MessageSourceActivity\nimport com.fsck.k9.ui.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun onShowHeaders() {\r\n        val launchIntent = MessageSourceActivity.createLaunchIntent(requireActivity(), messageReference)\r\n        startActivity(launchIntent)\r\n    }\nimport android.app.Activity\nimport android.content.Intent\nimport com.fsck.k9.ui.R\nimport com.fsck.k9.ui.messagesource.MessageSourceActivity" ],
  "Trail-Sense/1354" : [ "                        .fillMaxWidth()\n                        .wrapContentHeight()\r\n                        .padding(end = 16.dp),\n--------------------------------------------------\n            .fillMaxWidth()\n            .wrapContentHeight()\r\n            .padding(\n--------------------------------------------------\nthemeBase.wrap(context)", "import android.content.Context\nprivate fun wrap(context: Context): Context {\r\n        val wrapper = themeBase.wrap(context)\r\n        applyToContext(wrapper)\r\n        return wrapper\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Neo-Backup/204" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/205" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/202" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/831" : [ "override fun onPause() {\n    super.onPause()\n    localBroadcastManager.unregisterReceiver(purchaseReceiver)\n}", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n        localBroadcastManager.registerPurchaseReceiver(purchaseReceiver)\r\n        localBroadcastManager.registerRefreshListReceiver(purchaseReceiver)\r\n    }" ],
  "Trail-Sense/832" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Trail-Sense/1358" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/203" : [ "refreshPreferences()", "import org.tasks.R\nprivate suspend fun refreshPreferences() {\r\n        val filter = defaultFilterProvider.getFilterFromPreference(R.string.p_dashclock_filter)\r\n        findPreference(R.string.p_dashclock_filter).summary = filter.title\r\n    }" ],
  "Trail-Sense/833" : [ "@Override\r\npublic void performAction(FeedItem item, Fragment fragment, FeedItemFilter filter) {\r\n    if (!item.isTagged(FeedItem.TAG_QUEUE)) {\r\n        DBWriter.addQueueItem(fragment.requireContext(), item);\r\n    } else {\r\n        new RemoveFromQueueSwipeAction().performAction(item, fragment, filter);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int swipeDir) {\r\n    if (!actions.hasActions()) {\r\n        //open settings dialog if no prefs are set\r\n        new SwipeActionsDialog(fragment.requireContext(), tag).show(this::reloadPreference);\r\n        return;\r\n    }\r\n    FeedItem item = ((EpisodeItemViewHolder) viewHolder).getFeedItem();\r\n    (swipeDir == ItemTouchHelper.RIGHT ? actions.right : actions.left).performAction(item, fragment, filter);\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment;\r\nimport de.danoeh.antennapod.adapter.actionbutton.DownloadActionButton;\r\nimport de.danoeh.antennapod.model.feed.FeedItem;\r\nimport de.danoeh.antennapod.model.feed.FeedItemFilter;\r\nimport de.danoeh.antennapod.model.feed.FeedItemFilter\nimport de.danoeh.antennapod.model.feed.FeedItem\nimport de.danoeh.antennapod.adapter.actionbutton.DownloadActionButton\nimport androidx.fragment.app.Fragment\nimport android.content.Context\n@Override\r\npublic void performAction(FeedItem item, Fragment fragment, FeedItemFilter filter) {\r\n    if (!item.isDownloaded() && !item.getFeed().isLocalFeed()) {\r\n        new DownloadActionButton(item).onClick(fragment.requireContext());\r\n    }\r\n}" ],
  "VinylMusicPlayer/935" : [ "", "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    savePreference();\r\n}" ],
  "VinylMusicPlayer/938" : [ "updatePlayPauseDrawableState()", "import code.name.monkey.retromusic.helper.MusicPlayerRemote\nimport code.name.monkey.retromusic.R\nprotected fun updatePlayPauseDrawableState() {\n        if (MusicPlayerRemote.isPlaying) {\n            binding.miniPlayerPlayPauseButton.setImageResource(R.drawable.ic_pause)\n        } else {\n            binding.miniPlayerPlayPauseButton.setImageResource(R.drawable.ic_play_arrow)\n        }\n    }" ],
  "Trail-Sense/836" : [ "        // it may pop up if hideBottomSheet is called\n        if (currentFragment(R.id.fragment_container) !is PlayingQueueFragment) {\n            hideBottomSheet(MusicPlayerRemote.playingQueue.isEmpty())\n--------------------------------------------------\n        navigationView.setOnItemReselectedListener {\n            currentFragment(R.id.fragment_container).apply {\n                if (this is IScrollHelper) {\n--------------------------------------------------\n            if (destination.id == navGraph.startDestinationId) {\n                currentFragment(R.id.fragment_container)?.enterTransition = null\n            }", "import androidx.navigation.fragment.NavHostFragment\nimport androidx.fragment.app.Fragment\nimport androidx.appcompat.app.AppCompatActivity\nfun AppCompatActivity.currentFragment(navHostId: Int): Fragment? {\n    val navHostFragment: NavHostFragment =\n        supportFragmentManager.findFragmentById(navHostId) as NavHostFragment\n    return navHostFragment.childFragmentManager.fragments.firstOrNull()\n}\nImport(names=[androidx, appcompat, app, AppCompatActivity], wildcard=false, alias=null)\nImport(names=[androidx, fragment, app, Fragment], wildcard=false, alias=null)\nImport(names=[androidx, navigation, fragment, NavHostFragment], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/934" : [ "", "import com.simplemobiletools.notes.pro.models.Note\noverride fun onResume() {\r\n        super.onResume()\r\n        loadNoteById(noteId)\r\n    }" ],
  "MaterialFiles/1027" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1026" : [ "super.onResume()", "import org.videolan.vlc.R\nimport android.view\noverride fun onResume() {\r\n        if (viewModel.isApiLoading.value == false) viewModel.onRefresh()\r\n        super.onResume()\r\n    }\nImport(names=[android, view], wildcard=true, alias=null)" ],
  "VinylMusicPlayer/939" : [ "setUpMusicControllers()", "import code.name.monkey.retromusic.R\nprivate fun setUpMusicControllers() {\n        setUpPlayPauseFab()\n        setUpPrevNext()\n        setUpRepeatButton()\n        setUpShuffleButton()\n        setUpProgressSlider()\n    }" ],
  "MaterialFiles/1160" : [ "private static void copyFile(File from, File to) throws IOException {\r\n    FileInputStream in = new FileInputStream(from);\r\n    FileOutputStream out = new FileOutputStream(to);\r\n    try {\r\n        byte[] buffer = new byte[1024];\r\n        int count;\r\n        while ((count = in.read(buffer)) > 0) {\r\n            out.write(buffer, 0, count);\r\n        }\r\n        out.close();\r\n    } finally {\r\n        IOUtils.closeQuietly(in);\r\n        IOUtils.closeQuietly(out);\r\n    }\r\n}\n--------------------------------------------------\n/**\r\n * Unconditionally close a Cursor.  Equivalent to {@link Cursor#close()},\r\n * if cursor is non-null.  This is typically used in finally blocks.\r\n *\r\n * @param cursor cursor to close\r\n */\r\npublic static void closeQuietly(final Cursor cursor) {\r\n    if (cursor != null) {\r\n        cursor.close();\r\n    }\r\n}\n--------------------------------------------------\n", "private void close() {\r\n    insertStatement.close();\r\n    deleteStatement.close();\r\n}" ],
  "fcitx5-android/526" : [ "createAlbumArtFile(context).canonicalFile", "import java.io.File\nimport android.content.Context\nfun createAlbumArtFile(context: Context): File {\n        return File(\n            createAlbumArtDir(context),\n            System.currentTimeMillis().toString()\n        )\n    }\nimport android.content.Context\nimport java.io.File" ],
  "fcitx5-android/525" : [ "", "import com.kickstarter.libs.Config\nfun Config.isFeatureFlagEnabled(text: String): Boolean {\r\n    val isEnabled = this\r\n        .features()\r\n        ?.get(text)\r\n\r\n    return isEnabled ?: false\r\n}\nImport(names=[com, kickstarter, libs, Config], wildcard=false, alias=null)" ],
  "Iconify/550" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/681" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/483" : [ "= updateState {\n    event\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.AddBreadcrumb(breadcrumb.impl.message, breadcrumb.impl.type, \"t${breadcrumb.impl.timestamp.time}\", breadcrumb.impl.metadata ?: mutableMapOf())\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.UpdateOrientation(orientation)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.Install(conf.apiKey, conf.enabledErrorTypes.ndkCrashes, conf.appVersion, conf.buildUuid, conf.releaseStage, lastRunInfoPath, consecutiveLaunchCrashes, conf.sendThreads)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.DeliverPending\n}\n--------------------------------------------------\n= updateState {\n    StateEvent.UpdateContext(getContext())\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.AddFeatureFlag(name)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.AddFeatureFlag(name, variant)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.ClearFeatureFlag(name)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.ClearFeatureFlags\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.UpdateIsLaunching(false)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.UpdateMemoryTrimEvent(isLowMemory, memoryTrimLevel, trimLevelDescription)\n}\n--------------------------------------------------\nnull -> updateState {\n    StateEvent.ClearMetadataSection(section)\n}\n--------------------------------------------------\nelse -> updateState {\n    StateEvent.ClearMetadataValue(section, key)\n}\n--------------------------------------------------\nelse -> updateState {\n    AddMetadata(section, key, metadata.getMetadata(section, key))\n}\n--------------------------------------------------\nupdateState {\n    AddMetadata(section, it.key, metadata.getMetadata(section, it.key))\n}\n--------------------------------------------------\n= updateState {\n    StateEvent.UpdateUser(user)\n}", "internal inline fun updateState(provider: () -> StateEvent) {\r\n        // optimization to avoid unnecessary iterator and StateEvent construction\r\n        if (observers.isEmpty()) {\r\n            return\r\n        }\r\n\r\n        // construct the StateEvent object and notify observers\r\n        val event = provider()\r\n        observers.forEach { it.onStateChange(event) }\r\n    }" ],
  "Iconify/559" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/200" : [ "TaskList().setTitle(title)\n--------------------------------------------------\nAlertDialog.Builder(fragmentActivity).setTitle(R.string.change_priority)\n--------------------------------------------------\ndialogBuilder.newDialog().setTitle(R.string.theme)\n--------------------------------------------------\nsetTitle(R.string.name_your_price)\n--------------------------------------------------\nsetTitle(R.string.sign_in_with_google)\n--------------------------------------------------\naddAccount.setTitle(R.string.not_signed_in)\n--------------------------------------------------\naddAccount.setTitle(R.string.add_account)\n--------------------------------------------------\npref.setTitle(account.prefTitle)\n--------------------------------------------------\nsetTitle(if (subscription == null) {\n    R.string.upgrade_to_pro\n} else {\n    R.string.subscription\n})\n--------------------------------------------------\nsetTitle(R.string.sign_in)\n--------------------------------------------------\nsetTitle(R.string.button_subscribe)\n--------------------------------------------------\nsetTitle(R.string.manage_subscription)\n--------------------------------------------------\nsetTitle(if (isGithub) {\n    R.string.sign_in_with_github\n} else {\n    R.string.sign_in_with_google\n})\n--------------------------------------------------\ndialogBuilder.newDialog().setTitle(R.string.delete_tag_confirmation, description)\n--------------------------------------------------\nfragment.setTitle(intent.getStringExtra(EXTRA_TITLE))\n--------------------------------------------------\ndialogBuilder.newDialog().setTitle(R.string.choose_synchronization_service)", "import androidx.appcompat.app.AlertDialog\nfun setTitle(title: Int, vararg formatArgs: Any?): AlertDialogBuilder {\r\n        builder.setTitle(context.getString(title, *formatArgs))\r\n        return this\r\n    }\nimport androidx.appcompat.app.AlertDialog" ],
  "Iconify/558" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/201" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/685" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/557" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/203" : [ "            val networkType = BinanceChainKit.NetworkType.MainNet\n            BinanceChainKit.clear(App.instance, networkType, walletId)\r\n        }\n--------------------------------------------------\n{\r\n            BitcoinKit.clear(App.instance, NetworkType.MainNet, walletId)\r\n        }\n--------------------------------------------------\nSolanaKit.clear(App.instance, walletId)\n--------------------------------------------------\nTronKit.clear(App.instance, network, walletId)\n--------------------------------------------------\nBinanceAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinCashAdapter.clear(accountId)\n--------------------------------------------------\nECashAdapter.clear(accountId)\n--------------------------------------------------\nDashAdapter.clear(accountId)\n--------------------------------------------------\nEvmAdapter.clear(accountId)\n--------------------------------------------------\nEip20Adapter.clear(accountId)\n--------------------------------------------------\nZcashAdapter.clear(accountId)\n--------------------------------------------------\nSolanaAdapter.clear(accountId)\n--------------------------------------------------\nTronAdapter.clear(accountId)\n--------------------------------------------------\nstorage.clear()\n--------------------------------------------------\naccountsCache.clear()\n--------------------------------------------------\nadaptersMap.clear()\n--------------------------------------------------\naccountManager.clear()\n--------------------------------------------------\nwalletManager.clear()\n--------------------------------------------------\nlocalStorage.clear()\n--------------------------------------------------\npreferences.edit().clear()\n--------------------------------------------------\nthis.adaptersMap.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ndisposables.clear()\n--------------------------------------------------\nupdatesDisposables.clear()\n--------------------------------------------------\nbalanceAdapterRepository.clear()\n--------------------------------------------------\ndisposable.clear()\n--------------------------------------------------\nrecordMap.clear()\n--------------------------------------------------\nmetadataMap.clear()\n--------------------------------------------------\nnftItemMap.clear()\n--------------------------------------------------\ndao.clear()\n--------------------------------------------------\nfeeService.clear()\n--------------------------------------------------\nsettingsService.clear()\n--------------------------------------------------\nrepository.clear()\n--------------------------------------------------\nservice.clear()\n--------------------------------------------------\ntransactionRecords.clear()\n--------------------------------------------------\nadapters.clear()", "override fun clear() {\r\n        disposable.clear()\r\n        settingsService.clear()\r\n    }" ],
  "Trail-Sense/688" : [ "            singleNotificationData = singleNotificationDataList,\n            summaryNotificationData = createSummaryNotificationData(notificationData, silent = true),\r\n        )\n--------------------------------------------------\n            singleNotificationData = listOf(singleNotificationData),\n            summaryNotificationData = createSummaryNotificationData(result.notificationData, silent),\r\n        )\n--------------------------------------------------\n            singleNotificationData = singleNotificationData,\n            summaryNotificationData = createSummaryNotificationData(result.notificationData, silent = true),\r\n        )\n--------------------------------------------------\n        } else {\n            summaryNotificationDataCreator.createSummaryNotificationData(data, silent)\r\n        }", "private fun createSummaryNotificationData(data: NotificationData, silent: Boolean): SummaryNotificationData? {\r\n        return if (data.isEmpty()) {\r\n            null\r\n        } else {\r\n            summaryNotificationDataCreator.createSummaryNotificationData(data, silent)\r\n        }\r\n    }" ],
  "Iconify/554" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/205" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1528" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "Trail-Sense/1529" : [ "is MediaUpdate -> updateItems(update.mediaList as List<T>)", "import kotlinx.coroutines.withContext\nimport android.content.Context\nprotected open suspend fun updateItems(mediaList: List<T>) {\r\n        dataset.value = withContext(coroutineContextProvider.Default) {\r\n            val list = dataset.value\r\n            val iterator = list.listIterator()\r\n            while (iterator.hasNext()) {\r\n                val media = iterator.next()\r\n                for (newItem in mediaList) if (media.equals(newItem)) {\r\n                    iterator.set(newItem)\r\n                    break\r\n                }\r\n            }\r\n            list\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/207" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/208" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/209" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/206" : [ "{\n        val layout = layout ?: return super.getBaseline()\r\n        val baselineOffset = super.getBaseline() - layout.getLineBaseline(0)\n--------------------------------------------------\n        val layout = layout ?: return super.getBaseline()\n        val baselineOffset = super.getBaseline() - layout.getLineBaseline(0)\r\n        return baselineOffset + layout.getLineBaseline(layout.lineCount - 1)", "override fun getBaseline(): Int {\r\n        val layout = layout ?: return super.getBaseline()\r\n        val baselineOffset = super.getBaseline() - layout.getLineBaseline(0)\r\n        return baselineOffset + layout.getLineBaseline(layout.lineCount - 1)\r\n    }" ],
  "MaterialFiles/480" : [ "", "override fun getContent(): String {\r\n        // no way to get content from webview\r\n        return \"\"\r\n    }" ],
  "QuickNovel/202" : [ "\n        val messageId = messageStore.saveLocalMessage(folderId, message.toSaveMessageData(subject))\r\n\n--------------------------------------------------\n        val messageStore = messageStoreManager.getMessageStore(account)\n        val messageData = message.toSaveMessageData(plaintextSubject)\r\n", "import com.fsck.k9.message.extractors.PreviewResult\nimport com.fsck.k9.mailstore.SaveMessageData\nimport com.fsck.k9.mail.MessageDownloadState\nimport com.fsck.k9.mail.Message\nprivate fun Message.toSaveMessageData(\r\n        subject: String? = getSubject(),\r\n        date: Long = sentDate?.time ?: System.currentTimeMillis(),\r\n        internalDate: Long = date,\r\n        downloadState: MessageDownloadState = getDownloadState(),\r\n        attachmentCount: Int = 0,\r\n        previewResult: PreviewResult = PreviewResult.none(),\r\n        textForSearchIndex: String? = null,\r\n        encryptionType: String? = null,\r\n    ): SaveMessageData {\r\n        return SaveMessageData(\r\n            message = this,\r\n            subject,\r\n            date,\r\n            internalDate,\r\n            downloadState,\r\n            attachmentCount,\r\n            previewResult,\r\n            textForSearchIndex,\r\n            encryptionType,\r\n        )\r\n    }\nimport com.fsck.k9.mail.Message\nimport com.fsck.k9.mail.MessageDownloadState\nimport com.fsck.k9.mailstore.SaveMessageData\nimport com.fsck.k9.message.extractors.PreviewResult" ],
  "QuickNovel/205" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "fcitx5-android/521" : [ "", "import code.name.monkey.retromusic.util.PreferenceUtil\nimport android.view.View\nfun View.applyBottomInsets() {\n    if (PreferenceUtil.isFullScreenMode) return\n    val initialPadding = recordInitialPaddingForView(this)\n\n    ViewCompat.setOnApplyWindowInsetsListener(\n        (this)\n    ) { v: View, windowInsets: WindowInsetsCompat ->\n        val insets = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars())\n        v.updatePadding(\n            bottom = initialPadding.bottom + insets.bottom\n        )\n        windowInsets\n    }\n    requestApplyInsetsWhenAttached()\n}\nimport android.view.View\nimport code.name.monkey.retromusic.util.PreferenceUtil" ],
  "fcitx5-android/524" : [ "private static StringBuilder getAppInfo(Context context) {\r\n    StringBuilder sb = new StringBuilder();\r\n    ContentResolver resolver = context.getContentResolver();\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n    boolean main_log = prefs.getBoolean(\"main_log\", true);\r\n    boolean protocol = prefs.getBoolean(\"protocol\", false);\r\n    long last_cleanup = prefs.getLong(\"last_cleanup\", 0);\r\n    PackageManager pm = context.getPackageManager();\r\n    // Get version info\r\n    sb.append(String.format(\"%s %s\\r\\n\", context.getString(R.string.app_name), getVersionInfo(context)));\r\n    sb.append(String.format(\"Package: %s uid: %d\\r\\n\", BuildConfig.APPLICATION_ID, android.os.Process.myUid()));\r\n    sb.append(String.format(\"Android: %s (SDK device=%d target=%d)\\r\\n\", Build.VERSION.RELEASE, Build.VERSION.SDK_INT, Helper.getTargetSdk(context)));\r\n    String miui = Helper.getMIUIVersion();\r\n    Integer autostart = (miui == null ? null : Helper.getMIUIAutostart(context));\r\n    sb.append(String.format(\"MIUI: %s autostart: %s\\r\\n\", miui == null ? \"-\" : miui, autostart == null ? \"?\" : Boolean.toString(autostart == 0)));\r\n    boolean reporting = prefs.getBoolean(\"crash_reports\", false);\r\n    if (reporting || Log.isTestRelease()) {\r\n        String uuid = prefs.getString(\"uuid\", null);\r\n        sb.append(String.format(\"Bugsnag UUID: %s\\r\\n\", uuid == null ? \"-\" : uuid));\r\n    }\r\n    try {\r\n        ApplicationInfo app = pm.getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);\r\n        String build_uuid = app.metaData.getString(\"com.bugsnag.android.BUILD_UUID\");\r\n        sb.append(String.format(\"Build UUID: %s\\r\\n\", build_uuid == null ? \"-\" : build_uuid));\r\n    } catch (PackageManager.NameNotFoundException ex) {\r\n        Log.e(ex);\r\n    }\r\n    String installer = Helper.getInstallerName(context);\r\n    sb.append(String.format(\"Release: %s\\r\\n\", Log.getReleaseType(context)));\r\n    sb.append(String.format(\"Play Store: %s\\r\\n\", Helper.hasPlayStore(context)));\r\n    sb.append(String.format(\"Installer: %s\\r\\n\", installer == null ? \"-\" : installer));\r\n    sb.append(String.format(\"Installed: %s\\r\\n\", new Date(Helper.getInstallTime(context))));\r\n    sb.append(String.format(\"Updated: %s\\r\\n\", new Date(Helper.getUpdateTime(context))));\r\n    sb.append(String.format(\"Last cleanup: %s\\r\\n\", new Date(last_cleanup)));\r\n    sb.append(String.format(\"Now: %s\\r\\n\", new Date()));\r\n    sb.append(String.format(\"Zone: %s\\r\\n\", TimeZone.getDefault().getID()));\r\n    String language = prefs.getString(\"language\", null);\r\n    sb.append(String.format(\"Locale: def=%s lang=%s\\r\\n\", Locale.getDefault(), language));\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N)\r\n        sb.append(String.format(\"System: %s\\r\\n\", Resources.getSystem().getConfiguration().locale));\r\n    else {\r\n        LocaleList ll = Resources.getSystem().getConfiguration().getLocales();\r\n        for (int i = 0; i < ll.size(); i++) sb.append(String.format(\"System: %s\\r\\n\", ll.get(i)));\r\n    }\r\n    sb.append(\"\\r\\n\");\r\n    String osVersion = null;\r\n    try {\r\n        osVersion = System.getProperty(\"os.version\");\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n    }\r\n    // Get device info\r\n    sb.append(String.format(\"Brand: %s\\r\\n\", Build.BRAND));\r\n    sb.append(String.format(\"Manufacturer: %s\\r\\n\", Build.MANUFACTURER));\r\n    sb.append(String.format(\"Model: %s\\r\\n\", Build.MODEL));\r\n    sb.append(String.format(\"Product: %s\\r\\n\", Build.PRODUCT));\r\n    sb.append(String.format(\"Device: %s Arc: %b\\r\\n\", Build.DEVICE, Helper.isArc()));\r\n    sb.append(String.format(\"Host: %s\\r\\n\", Build.HOST));\r\n    sb.append(String.format(\"Time: %s\\r\\n\", new Date(Build.TIME).toString()));\r\n    sb.append(String.format(\"Display: %s\\r\\n\", Build.DISPLAY));\r\n    sb.append(String.format(\"Id: %s\\r\\n\", Build.ID));\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\r\n        sb.append(String.format(\"SoC: %s/%s\\r\\n\", Build.SOC_MANUFACTURER, Build.SOC_MODEL));\r\n    sb.append(String.format(\"OS version: %s\\r\\n\", osVersion));\r\n    sb.append(\"\\r\\n\");\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        try {\r\n            // https://developer.android.com/reference/android/app/ApplicationExitInfo\r\n            boolean exits = false;\r\n            long from = new Date().getTime() - 30 * 24 * 3600 * 1000L;\r\n            ActivityManager am = Helper.getSystemService(context, ActivityManager.class);\r\n            List<ApplicationExitInfo> infos = am.getHistoricalProcessExitReasons(context.getPackageName(), 0, 100);\r\n            for (ApplicationExitInfo info : infos) if (info.getTimestamp() > from && info.getImportance() >= ActivityManager.RunningAppProcessInfo.IMPORTANCE_GONE) {\r\n                exits = true;\r\n                sb.append(String.format(\"%s: %s\\r\\n\", new Date(info.getTimestamp()), Helper.getExitReason(info.getReason())));\r\n            }\r\n            if (!exits)\r\n                sb.append(\"No crashes\\r\\n\");\r\n            sb.append(\"\\r\\n\");\r\n        } catch (Throwable ex) {\r\n            sb.append(ex).append(\"\\r\\n\");\r\n        }\r\n    }\r\n    boolean log = (prefs.getInt(\"log_level\", android.util.Log.WARN) <= android.util.Log.INFO);\r\n    sb.append(String.format(\"Log main: %b debug: %b protocol: %b\\r\\n\", main_log, log, protocol));\r\n    int[] contacts = ContactInfo.getStats();\r\n    sb.append(String.format(\"Contact lookup: %d cached: %d\\r\\n\", contacts[0], contacts[1]));\r\n    sb.append(String.format(\"Accessibility: %b\\r\\n\", Helper.isAccessibilityEnabled(context)));\r\n    String charset = MimeUtility.getDefaultJavaCharset();\r\n    sb.append(String.format(\"Default charset: %s/%s\\r\\n\", charset, MimeUtility.mimeCharset(charset)));\r\n    String emoji;\r\n    try {\r\n        if (EmojiCompat.isConfigured()) {\r\n            int emojiState = EmojiCompat.get().getLoadState();\r\n            switch(emojiState) {\r\n                case EmojiCompat.LOAD_STATE_LOADING:\r\n                    emoji = \"Loading\";\r\n                    break;\r\n                case EmojiCompat.LOAD_STATE_SUCCEEDED:\r\n                    emoji = \"Loaded\";\r\n                    break;\r\n                case EmojiCompat.LOAD_STATE_FAILED:\r\n                    emoji = \"Failed\";\r\n                    break;\r\n                case EmojiCompat.LOAD_STATE_DEFAULT:\r\n                    emoji = \"Not loaded\";\r\n                    break;\r\n                default:\r\n                    emoji = \"?\" + emojiState;\r\n            }\r\n        } else\r\n            emoji = \"Disabled\";\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n        emoji = ex.toString();\r\n    }\r\n    sb.append(\"Emoji: \").append(emoji).append(\"\\r\\n\");\r\n    sb.append(\"Transliterate: \").append(TextHelper.canTransliterate()).append(\"\\r\\n\");\r\n    sb.append(\"Classifier: \").append(Helper.humanReadableByteCount(MessageClassifier.getSize(context))).append(\"\\r\\n\");\r\n    sb.append(\"\\r\\n\");\r\n    int cpus = Runtime.getRuntime().availableProcessors();\r\n    sb.append(String.format(\"Processors: %d\\r\\n\", cpus));\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        long running = SystemClock.uptimeMillis() - android.os.Process.getStartUptimeMillis();\r\n        long cpu = android.os.Process.getElapsedCpuTime();\r\n        int util = (int) (running == 0 ? 0 : 100 * cpu / running / cpus);\r\n        sb.append(String.format(\"Uptime: %s CPU: %s %d%%\\r\\n\", Helper.formatDuration(running), Helper.formatDuration(cpu), util));\r\n    }\r\n    Boolean largeHeap;\r\n    try {\r\n        ApplicationInfo info = pm.getApplicationInfo(context.getPackageName(), 0);\r\n        largeHeap = (info.flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0;\r\n    } catch (Throwable ex) {\r\n        largeHeap = null;\r\n    }\r\n    ActivityManager am = Helper.getSystemService(context, ActivityManager.class);\r\n    ActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();\r\n    am.getMemoryInfo(mi);\r\n    sb.append(String.format(\"Memory class: %d/%d Large: %s MB Total: %s Low: %b\\r\\n\", am.getMemoryClass(), am.getLargeMemoryClass(), largeHeap == null ? \"?\" : Boolean.toString(largeHeap), Helper.humanReadableByteCount(mi.totalMem), am.isLowRamDevice()));\r\n    long storage_available = Helper.getAvailableStorageSpace();\r\n    long storage_total = Helper.getTotalStorageSpace();\r\n    long storage_used = Helper.getSizeUsed(context.getFilesDir());\r\n    sb.append(String.format(\"Storage space: %s/%s App: %s\\r\\n\", Helper.humanReadableByteCount(storage_total - storage_available), Helper.humanReadableByteCount(storage_total), Helper.humanReadableByteCount(storage_used)));\r\n    long cache_used = Helper.getSizeUsed(context.getCacheDir());\r\n    long cache_quota = Helper.getCacheQuota(context);\r\n    sb.append(String.format(\"Cache space: %s/%s\\r\\n\", Helper.humanReadableByteCount(cache_used), Helper.humanReadableByteCount(cache_quota)));\r\n    Runtime rt = Runtime.getRuntime();\r\n    long hused = (rt.totalMemory() - rt.freeMemory()) / 1024L / 1024L;\r\n    long hmax = rt.maxMemory() / 1024L / 1024L;\r\n    long nheap = Debug.getNativeHeapAllocatedSize() / 1024L / 1024L;\r\n    long nsize = Debug.getNativeHeapSize() / 1024 / 1024L;\r\n    sb.append(String.format(\"Heap usage: %d/%d MiB native: %d/%d MiB\\r\\n\", hused, hmax, nheap, nsize));\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        int ipc = IBinder.getSuggestedMaxIpcSizeBytes();\r\n        sb.append(String.format(\"IPC max: %s\\r\\n\", Helper.humanReadableByteCount(ipc)));\r\n    }\r\n    sb.append(\"\\r\\n\");\r\n    WindowManager wm = Helper.getSystemService(context, WindowManager.class);\r\n    Display display = wm.getDefaultDisplay();\r\n    Point dim = new Point();\r\n    display.getSize(dim);\r\n    float density = context.getResources().getDisplayMetrics().density;\r\n    sb.append(String.format(\"Density 1dp=%f\\r\\n\", density));\r\n    sb.append(String.format(\"Resolution: %.2f x %.2f dp\\r\\n\", dim.x / density, dim.y / density));\r\n    Configuration config = context.getResources().getConfiguration();\r\n    String size;\r\n    if (config.isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_XLARGE))\r\n        size = \"XLarge\";\r\n    else if (config.isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_LARGE))\r\n        size = \"Large\";\r\n    else if (config.isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_NORMAL))\r\n        size = \"Medium\";\r\n    else if (config.isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_SMALL))\r\n        size = \"Small\";\r\n    else\r\n        size = \"size=\" + (config.screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK);\r\n    String orientation;\r\n    if (config.orientation == Configuration.ORIENTATION_LANDSCAPE)\r\n        orientation = \"Landscape\";\r\n    else if (config.orientation == Configuration.ORIENTATION_PORTRAIT)\r\n        orientation = \"Portrait\";\r\n    else\r\n        orientation = \"orientation=\" + config.orientation;\r\n    sb.append(String.format(\"%s %s\\r\\n\", size, orientation));\r\n    try {\r\n        float animation_scale = Settings.Global.getFloat(resolver, Settings.Global.WINDOW_ANIMATION_SCALE, 0f);\r\n        sb.append(String.format(\"Animation scale: %f %s\\r\\n\", animation_scale, animation_scale == 1f ? \"\" : \"!!!\"));\r\n    } catch (Throwable ex) {\r\n        sb.append(ex).append(\"\\r\\n\");\r\n    }\r\n    int uiMode = context.getResources().getConfiguration().uiMode;\r\n    sb.append(String.format(\"UI mode: 0x\")).append(Integer.toHexString(uiMode)).append(\" night=\").append(Helper.isNight(context)).append(\"\\r\\n\");\r\n    String uiType = Helper.getUiModeType(context);\r\n    sb.append(String.format(\"UI type: %s %s\\r\\n\", uiType, \"normal\".equals(uiType) ? \"\" : \"!!!\"));\r\n    sb.append(String.format(\"Darken support: %b\\r\\n\", WebViewEx.isFeatureSupported(context, WebViewFeature.ALGORITHMIC_DARKENING)));\r\n    try {\r\n        PackageInfo pkg = WebViewCompat.getCurrentWebViewPackage(context);\r\n        sb.append(String.format(\"WebView %d/%s\\r\\n\", pkg == null ? -1 : pkg.versionCode, pkg == null ? null : pkg.versionName));\r\n    } catch (Throwable ex) {\r\n        sb.append(ex).append(\"\\r\\n\");\r\n    }\r\n    sb.append(\"\\r\\n\");\r\n    Boolean ignoring = Helper.isIgnoringOptimizations(context);\r\n    sb.append(String.format(\"Battery optimizations: %s %s\\r\\n\", ignoring == null ? null : Boolean.toString(!ignoring), Boolean.FALSE.equals(ignoring) ? \"!!!\" : \"\"));\r\n    PowerManager power = Helper.getSystemService(context, PowerManager.class);\r\n    boolean psaving = power.isPowerSaveMode();\r\n    sb.append(String.format(\"Battery saving: %s %s\\r\\n\", psaving, psaving ? \"!!!\" : \"\"));\r\n    sb.append(String.format(\"Charging: %b; level: %d\\r\\n\", Helper.isCharging(context), Helper.getBatteryLevel(context)));\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\r\n        // https://developer.android.com/reference/android/app/usage/UsageStatsManager\r\n        UsageStatsManager usm = Helper.getSystemService(context, UsageStatsManager.class);\r\n        int bucket = usm.getAppStandbyBucket();\r\n        boolean inactive = usm.isAppInactive(BuildConfig.APPLICATION_ID);\r\n        sb.append(String.format(\"Standby bucket: %d-%b-%s %s\\r\\n\", bucket, inactive, Helper.getStandbyBucketName(bucket), (bucket <= UsageStatsManager.STANDBY_BUCKET_ACTIVE && !inactive ? \"\" : \"!!!\")));\r\n    }\r\n    boolean canExact = AlarmManagerCompatEx.canScheduleExactAlarms(context);\r\n    boolean hasExact = AlarmManagerCompatEx.hasExactAlarms(context);\r\n    sb.append(String.format(\"ExactAlarms can=%b has=%b %s\\r\\n\", canExact, hasExact, canExact ? \"\" : \"!!!\"));\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\r\n        boolean restricted = am.isBackgroundRestricted();\r\n        sb.append(String.format(\"Background restricted: %b %s\\r\\n\", restricted, restricted ? \"!!!\" : \"\"));\r\n    }\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        boolean saving = ConnectionHelper.isDataSaving(context);\r\n        sb.append(String.format(\"Data saving: %b %s\\r\\n\", saving, saving ? \"!!!\" : \"\"));\r\n    }\r\n    try {\r\n        int finish_activities = Settings.Global.getInt(resolver, Settings.Global.ALWAYS_FINISH_ACTIVITIES, 0);\r\n        sb.append(String.format(\"Always finish: %d %s\\r\\n\", finish_activities, finish_activities == 0 ? \"\" : \"!!!\"));\r\n    } catch (Throwable ex) {\r\n        sb.append(ex).append(\"\\r\\n\");\r\n    }\r\n    sb.append(\"\\r\\n\");\r\n    return sb;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport java.lang.reflect.Method;\r\nimport java.lang.reflect.Method\nimport android.content.Context\nimport android.annotation.SuppressLint\n// 0=allowed, 1=denied\r\nstatic Integer getMIUIAutostart(Context context) {\r\n    try {\r\n        @SuppressLint(\"PrivateApi\")\r\n        Class<?> c = Class.forName(\"android.miui.AppOpsUtils\");\r\n        Method m = c.getDeclaredMethod(\"getApplicationAutoStart\", Context.class, String.class);\r\n        m.setAccessible(true);\r\n        return (Integer) m.invoke(null, context, context.getPackageName());\r\n    } catch (Throwable ex) {\r\n        Log.w(ex);\r\n        return null;\r\n    }\r\n}" ],
  "Iconify/564" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "MaterialFiles/1173" : [ "view?.onLongClick(x / canvas.innerDensity, y / canvas.innerDensity)", "import android.view.View\noverride fun onLongClick(v: View): Boolean {\r\n        onEdit()\r\n        return true\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "fcitx5-android/516" : [ "\n            addSection(title = getString(R.string.accounts_title)) {\r\n                val isDraggable = accounts.size > 1\n--------------------------------------------------\n\n            addSection(title = getString(R.string.settings_list_backup_category)) {\r\n                addAction(\n--------------------------------------------------\n\n            addSection(title = getString(R.string.settings_list_miscellaneous_category)) {\r\n                addAction(", "fun addSection(title: String, block: SettingsListBuilder.() -> Unit) {\r\n            itemId++\r\n            settingsList.add(SettingsDividerItem(itemId, title))\r\n            block()\r\n        }" ],
  "MaterialFiles/1172" : [ "view?.onLongClick(x / canvas.innerDensity, y / canvas.innerDensity)", "import android.view.View\noverride fun onLongClick(v: View): Boolean {\r\n        onEdit()\r\n        return true\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "MaterialFiles/1175" : [ "view?.onLongClick(x / canvas.innerDensity, y / canvas.innerDensity)", "import android.view.View\noverride fun onLongClick(v: View): Boolean {\r\n        onEdit()\r\n        return true\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "fcitx5-android/519" : [ "TextTools.buildTitleAndSummary(context, R.string.pref_onlyfuture, R.string.pref_onlyfuturesummary)\n--------------------------------------------------\nTextTools.buildTitleAndSummary(context, R.string.pref_nospoilers, R.string.pref_nospoilers_summary)\n--------------------------------------------------\nbuildTitleAndSummary(context, R.string.pref_updatewifionly, R.string.pref_updatewifionlysummary)\n--------------------------------------------------\nTextTools.buildTitleAndSummary(context, filterDescription, stateDescription)\n--------------------------------------------------\nreturn buildTitleAndSummary(context, title, summary)", "import com.battlelancer.seriesguide.R\nimport androidx.annotation.StringRes\nimport android.text.Spannable\nimport android.content.Context\nfun buildTitleAndSummary(\r\n        context: Context,\r\n        @StringRes titleRes: Int,\r\n        @StringRes summaryRes: Int\r\n    ): Spannable {\r\n        val title = context.getString(titleRes)\r\n        val summary = context.getString(summaryRes)\r\n        return buildTitleAndSummary(context, title, summary)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)" ],
  "Iconify/560" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1174" : [ "view?.onLongClick(x / canvas.innerDensity, y / canvas.innerDensity)", "import android.view.View\noverride fun onLongClick(v: View): Boolean {\r\n        onEdit()\r\n        return true\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "fcitx5-android/518" : [ "TextTools.buildTitleAndSummary(context, R.string.pref_onlyfuture, R.string.pref_onlyfuturesummary)\n--------------------------------------------------\nTextTools.buildTitleAndSummary(context, R.string.pref_nospoilers, R.string.pref_nospoilers_summary)\n--------------------------------------------------\nbuildTitleAndSummary(context, R.string.pref_updatewifionly, R.string.pref_updatewifionlysummary)\n--------------------------------------------------\nTextTools.buildTitleAndSummary(context, filterDescription, stateDescription)\n--------------------------------------------------\nreturn buildTitleAndSummary(context, title, summary)", "import com.battlelancer.seriesguide.R\nimport androidx.annotation.StringRes\nimport android.text.Spannable\nimport android.content.Context\nfun buildTitleAndSummary(\r\n        context: Context,\r\n        @StringRes titleRes: Int,\r\n        @StringRes summaryRes: Int\r\n    ): Spannable {\r\n        val title = context.getString(titleRes)\r\n        val summary = context.getString(summaryRes)\r\n        return buildTitleAndSummary(context, title, summary)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)" ],
  "MaterialFiles/1177" : [ "", "import java.io\nimport org.json.JSONObject\nimport org.json.JSONException\n\r\n@Throws(JSONException::class)\r\nfun JSONObject.toMap(): MutableMap<String, String> {\r\n\tval map: MutableMap<String, String> = HashMap()\r\n\tval keys = keys()\r\n\twhile (keys.hasNext()) {\r\n\t\tval key = keys.next()\r\n\t\tmap[key] = getString(key)\r\n\t}\r\n\treturn map\r\n}\nImport(names=[org, json, JSONObject], wildcard=false, alias=null)" ],
  "MaterialFiles/1176" : [ "@Override\r\n@NonNull\r\npublic Collection<ToroPlayer> select(@NonNull Container container, @NonNull List<ToroPlayer> items) {\r\n    // Make sure client doesn't use this instance to wrong Container.\r\n    if (container != this.weakContainer.get())\r\n        return new ArrayList<>();\r\n    // If there is a request to pause, we need to prioritize that first.\r\n    ToroPlayer toPauseCandidate = null;\r\n    if (toPause.get() >= 0) {\r\n        toPauseCandidate = findFirst(items, filterToPause);\r\n        if (toPauseCandidate == null) {\r\n            // the order to pause doesn't present in candidate, we clear the selection.\r\n            // remove the paused one.\r\n            toPause.set(NO_POSITION);\r\n        }\r\n    }\r\n    if (toPlay.get() >= 0) {\r\n        ToroPlayer toPlayCandidate = findFirst(items, filterToPlay);\r\n        if (toPlayCandidate != null) {\r\n            if (allowsToPlay(toPlayCandidate)) {\r\n                return singletonList(toPlayCandidate);\r\n            }\r\n        }\r\n    }\r\n    // In the list of candidates, selected item no longer presents or is not allowed to play,\r\n    // we should reset the selection.\r\n    toPlay.set(NO_POSITION);\r\n    // Wrap by an ArrayList to make it modifiable.\r\n    Collection<ToroPlayer> selected = new ArrayList<>(delegate.select(container, items));\r\n    if (toPauseCandidate != null)\r\n        selected.remove(toPauseCandidate);\r\n    return selected;\r\n}\n--------------------------------------------------\n@Override\r\n@NonNull\r\npublic Collection<ToroPlayer> select(@NonNull Container container, @NonNull List<ToroPlayer> items) {\r\n    // Make sure client doesn't use this instance to wrong Container.\r\n    if (container != this.weakContainer.get())\r\n        return new ArrayList<>();\r\n    // If there is a request to pause, we need to prioritize that first.\r\n    ToroPlayer toPauseCandidate = null;\r\n    if (toPause.get() >= 0) {\r\n        toPauseCandidate = findFirst(items, filterToPause);\r\n        if (toPauseCandidate == null) {\r\n            // the order to pause doesn't present in candidate, we clear the selection.\r\n            // remove the paused one.\r\n            toPause.set(NO_POSITION);\r\n        }\r\n    }\r\n    if (toPlay.get() >= 0) {\r\n        ToroPlayer toPlayCandidate = findFirst(items, filterToPlay);\r\n        if (toPlayCandidate != null) {\r\n            if (allowsToPlay(toPlayCandidate)) {\r\n                return singletonList(toPlayCandidate);\r\n            }\r\n        }\r\n    }\r\n    // In the list of candidates, selected item no longer presents or is not allowed to play,\r\n    // we should reset the selection.\r\n    toPlay.set(NO_POSITION);\r\n    // Wrap by an ArrayList to make it modifiable.\r\n    Collection<ToroPlayer> selected = new ArrayList<>(delegate.select(container, items));\r\n    if (toPauseCandidate != null)\r\n        selected.remove(toPauseCandidate);\r\n    return selected;\r\n}\n--------------------------------------------------\n", "import java.util.List\nimport androidx.annotation.Nullable\n@Nullable\r\nstatic <T> T findFirst(List<T> source, Filter<T> filter) {\r\n    for (T t : source) {\r\n        if (filter.accept(t))\r\n            return t;\r\n    }\r\n    return null;\r\n}" ],
  "Trail-Sense/692" : [ "setVisibilityIfNecessary(binding.webViewProgress.root, View.GONE)\n--------------------------------------------------\nsetVisibilityIfNecessary(binding.webViewProgress.root, View.VISIBLE)", "import android.view.View\nprivate fun setVisibilityIfNecessary(view: View, visibility: Int) {\r\n        if (view.visibility != visibility) {\r\n            view.visibility = visibility\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Trail-Sense/1531" : [ "        }\n        updateFilterAndTheme()\r\n\n--------------------------------------------------\n            selectedFilter = it\n            updateFilterAndTheme()\r\n        }", "import org.tasks.Strings.isNullOrEmpty\nimport com.todoroo.astrid.api.Filter\nprivate fun updateFilterAndTheme() {\r\n        if (isNullOrEmpty(getShortcutName()) && selectedFilter != null) {\r\n            shortcutName.setText(selectedFilter!!.title)\r\n        }\r\n        if (selectedFilter != null) {\r\n            shortcutList.setText(selectedFilter!!.title)\r\n        }\r\n        updateTheme()\r\n    }\nimport com.todoroo.astrid.api.Filter\nimport org.tasks.Strings.isNullOrEmpty" ],
  "Trail-Sense/694" : [ "override fun onResume() {\n    super.onResume()\n    updateHelper.start()\n}", "override fun onPause() {\n        super.onPause()\n        updateHelper.stop()\n    }" ],
  "Trail-Sense/210" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1532" : [ "", "import com.omgodse.notally.room.Type\nimport com.omgodse.notally.R\nimport android.widget.RemoteViews\nimport android.view.View\noverride fun getViewAt(position: Int): RemoteViews {\r\n        val copy = baseNote\r\n        requireNotNull(copy)\r\n\r\n        return when (copy.type) {\r\n            Type.NOTE -> getNoteView(copy)\r\n            Type.LIST -> {\r\n                if (position > 0) {\r\n                    getListItemView(position - 1, copy)\r\n                } else getListHeaderView(copy)\r\n            }\r\n        }\r\n    }\nImport(names=[android, widget, RemoteViews], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, R], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, Type], wildcard=false, alias=null)" ],
  "Trail-Sense/696" : [ "            'o' -> {\n                messageListFragment!!.onCycleSort()\r\n                return true", "import com.fsck.k9.Account.SortType\nfun onCycleSort() {\r\n        val sortTypes = SortType.entries\r\n        val currentIndex = sortTypes.indexOf(sortType)\r\n        val newIndex = if (currentIndex == sortTypes.lastIndex) 0 else currentIndex + 1\r\n        val nextSortType = sortTypes[newIndex]\r\n        changeSort(nextSortType)\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.Account.SortType" ],
  "Trail-Sense/1530" : [ "                && filterByRange(filterVolume, totalVolume.toLong())\n                && inBlockchain(marketInfo.fullCoin.tokens)\r\n                && filterByRange(filterPriceChange, priceChangeValue.toLong())\n--------------------------------------------------\n        tokens.forEach { token ->\n            val inBlockchain = filterBlockchains.any { token.blockchain == it }\r\n            if (inBlockchain) return true\n--------------------------------------------------\n            val inBlockchain = filterBlockchains.any { token.blockchain == it }\n            if (inBlockchain) return true\r\n        }", "import io.horizontalsystems.marketkit.models.Token\nimport io.horizontalsystems.marketkit.models.Blockchain\nprivate fun inBlockchain(tokens: List<Token>): Boolean {\r\n        if (filterBlockchains.isEmpty()) return true\r\n\r\n        tokens.forEach { token ->\r\n            val inBlockchain = filterBlockchains.any { token.blockchain == it }\r\n            if (inBlockchain) return true\r\n        }\r\n\r\n        return false\r\n    }\nimport io.horizontalsystems.marketkit.models.Blockchain\nimport io.horizontalsystems.marketkit.models.Token" ],
  "Iconify/569" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/568" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/213" : [ "        if (list == null) {\n            var defaultOrder = preferences.getStringValue(prefId)\r\n            if (isNullOrEmpty(defaultOrder)) {\n--------------------------------------------------\n        )\n        preferences.getStringValue(R.string.p_default_recurrence)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n                }\n        preferences.getStringValue(R.string.p_default_location)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n        if (tags.isEmpty()) {\n            preferences.getStringValue(R.string.p_default_tags)\r\n                    ?.split(\",\")\n--------------------------------------------------\npreferences.getStringValue(R.string.p_dashclock_filter)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_account)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_folder)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_list)\n--------------------------------------------------\npreferences.getStringValue(resId)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_start_of_week)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_recurrence)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_location)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_tags)", "import timber.log.Timber\nfun getStringValue(key: String?): String? = try {\r\n        prefs.getString(key, null)\r\n    } catch (e: Exception) {\r\n        Timber.e(e)\r\n        null\r\n    }\nimport timber.log.Timber" ],
  "Iconify/567" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/215" : [ "                    \"Omnia\",\n                    RpcSource.Http(listOf(URI(\"https://endpoints.omniatech.io/v1/bsc/mainnet/public\")), null),\r\n                    defaultTransactionSource(type)\n--------------------------------------------------\n                    RpcSource.Http(\n                        listOf(URI(\"https://endpoints.omniatech.io/v1/op/mainnet/public\")),\r\n                        null\n--------------------------------------------------\n                    \"Omnia\",\n                    RpcSource.Http(listOf(URI(\"https://endpoints.omniatech.io/v1/arbitrum/one/public\")), null),\r\n                    defaultTransactionSource(type)\n--------------------------------------------------\nLayoutHelper.dp(12f, binding.wrapper.context)\n--------------------------------------------------\nLayoutHelper.dp(24f, binding.wrapper.context)\n--------------------------------------------------\nLayoutHelper.dp(2f, context)\n--------------------------------------------------\nLayoutHelper.dp(size, App.instance)", "import android.content.Context\nfun dp(dp: Float, context: Context?) = context?.let {\r\n        val density = context.resources.displayMetrics.density\r\n        if (dp == 0f) 0 else Math.ceil((density * dp).toDouble()).toInt()\r\n    } ?: dp.toInt()\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1533" : [ "pin(item)", "import android.view.MenuItem\nprivate fun pin(item: MenuItem) {\r\n        model.pinned = !model.pinned\r\n        bindPinned(item)\r\n    }\nImport(names=[android, view, MenuItem], wildcard=false, alias=null)" ],
  "Trail-Sense/1534" : [ "        return try {\n            getMessageListInfo(config)\r\n        } catch (e: Exception) {", "import com.fsck.k9.search.getAccounts\nimport com.fsck.k9.Account\nprivate fun getMessageListInfo(config: MessageListConfig): List<MessageListItem> {\r\n        val accounts = config.search.getAccounts(preferences)\r\n        val messageListItems = accounts\r\n            .flatMap { account ->\r\n                loadMessageListForAccount(account, config)\r\n            }\r\n            .sortedWith(config)\r\n\r\n        return messageListItems\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.search.getAccounts" ],
  "Trail-Sense/216" : [ "filter.isFilterUnwatched.isFalse()\n--------------------------------------------------\nfilter.isFilterUpcoming.isFalse()", "private fun Boolean?.isFalse(): Boolean {\r\n        if (this == null) return false\r\n        return !this\r\n    }" ],
  "Trail-Sense/218" : [ "        return ImageLoader.Builder(this)\n            .crossfade(true)\r\n            .components {\n--------------------------------------------------\n                    val last = getLastData(\"${type}_${period}\", chartData)\n                    val advice = last?.let { cross(lastRate, it) } ?: Advice.NODATA\r\n                    maItems.add(Item(name = \"${type.uppercase()} $period\", advice = advice))\n--------------------------------------------------\n\n            // Calculate cross advices\r\n            val ema25 = getLastData(\"ema_25\", chartData)\n--------------------------------------------------\n            val ema50 = getLastData(\"ema_50\", chartData)\n            val crossAdvice = if (ema25 != null && ema50 != null) {\r\n                cross(ema25, ema50)\n--------------------------------------------------\n            val crossAdvice = if (ema25 != null && ema50 != null) {\n                cross(ema25, ema50)\r\n            } else {\n--------------------------------------------------\n\n            maItems.add(Item(name = \"EMA Cross 25,50\", advice = crossAdvice))\r\n            sectionItems.add(SectionItem(name = \"Moving Averages\", items = maItems))\n--------------------------------------------------\n            val macdAdvice: Advice = if (macdData != null && macdSignalData != null) {\n                cross(macdSignalData, macdData)\r\n            } else Advice.NODATA", "private fun cross(value1: Float, value2: Float): Advice {\r\n        return when {\r\n            value1 > value2 -> Advice.BUY\r\n            value1 < value2 -> Advice.SELL\r\n            else -> Advice.NEUTRAL\r\n        }\r\n    }" ],
  "Trail-Sense/219" : [ "TextTools.buildTitleAndSummary(context, R.string.pref_onlyfuture, R.string.pref_onlyfuturesummary)\n--------------------------------------------------\nTextTools.buildTitleAndSummary(context, R.string.pref_nospoilers, R.string.pref_nospoilers_summary)\n--------------------------------------------------\nbuildTitleAndSummary(context, R.string.pref_updatewifionly, R.string.pref_updatewifionlysummary)\n--------------------------------------------------\nTextTools.buildTitleAndSummary(context, filterDescription, stateDescription)\n--------------------------------------------------\nreturn buildTitleAndSummary(context, title, summary)", "import com.battlelancer.seriesguide.R\nimport androidx.annotation.StringRes\nimport android.text.Spannable\nimport android.content.Context\nfun buildTitleAndSummary(\r\n        context: Context,\r\n        @StringRes titleRes: Int,\r\n        @StringRes summaryRes: Int\r\n    ): Spannable {\r\n        val title = context.getString(titleRes)\r\n        val summary = context.getString(summaryRes)\r\n        return buildTitleAndSummary(context, title, summary)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)" ],
  "Trail-Sense/1537" : [ "{\n        super.onResume()\r\n        if (currentNightMode != nightMode || currentPro != inventory.hasPro) {\n--------------------------------------------------\n{\n        super.onResume()\r\n        if (showKeyboard) {\n--------------------------------------------------\nsuper.onResume()\n--------------------------------------------------\nmap.onResume()", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        updateSort()\r\n    }\nimport org.tasks.R" ],
  "QuickNovel/217" : [ "", "import android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport java.util.Objects;\r\nimport java.util.Objects\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.WindowManager\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\nimport android.app.Dialog\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    Objects.requireNonNull(requireDialog().getWindow()).setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\r\n    return super.onCreateView(inflater, container, savedInstanceState);\r\n}" ],
  "QuickNovel/219" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/492" : [ "        swapData = null\n        setLoading(tradeService.state)\r\n\n--------------------------------------------------\n        val loading = state == SwapResultState.Loading\n        fromTokenService.setLoading(loading)\r\n        toTokenService.setLoading(loading)\n--------------------------------------------------\n        fromTokenService.setLoading(loading)\n        toTokenService.setLoading(loading)\r\n    }", "fun setLoading(loading: Boolean) {\r\n        isLoading = loading\r\n        syncState()\r\n    }" ],
  "MaterialFiles/1168" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1167" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1169" : [ "", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.conflate\nimport kotlinx.coroutines.flow.callbackFlow\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.channels.awaitClose\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\n\r\n@OptIn(DelicateCoroutinesApi::class)\r\npublic fun <T> LiveData<T>.asFlow(): Flow<T> = callbackFlow {\r\n    val observer = Observer<T> {\r\n        trySend(it)\r\n    }\r\n    withContext(Dispatchers.Main.immediate) {\r\n        observeForever(observer)\r\n    }\r\n\r\n    awaitClose {\r\n        GlobalScope.launch(Dispatchers.Main.immediate) {\r\n            removeObserver(observer)\r\n        }\r\n    }\r\n}.conflate()\nImport(names=[kotlinx, coroutines, GlobalScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, channels, awaitClose], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, flow, Flow], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, flow, callbackFlow], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "fcitx5-android/511" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/512" : [ "putIfNotNull(movie.isInCollection, SeriesGuideContract.Movies.IN_COLLECTION)\n--------------------------------------------------\nputIfNotNull(movie.isInWatchlist, SeriesGuideContract.Movies.IN_WATCHLIST)\n--------------------------------------------------\nputIfNotNull(movie.isWatched, SeriesGuideContract.Movies.WATCHED)", "import android.content.ContentValues\nprivate fun ContentValues.putIfNotNull(value: Boolean?, key: String) {\r\n        if (value != null) {\r\n            put(key, if (value) 1 else 0)\r\n        }\r\n    }\nImport(names=[android, content, ContentValues], wildcard=false, alias=null)" ],
  "MaterialFiles/1182" : [ "                    \"Omnia\",\n                    RpcSource.Http(listOf(URI(\"https://endpoints.omniatech.io/v1/bsc/mainnet/public\")), null),\r\n                    defaultTransactionSource(type)\n--------------------------------------------------\n                    RpcSource.Http(\n                        listOf(URI(\"https://endpoints.omniatech.io/v1/op/mainnet/public\")),\r\n                        null\n--------------------------------------------------\n                    \"Omnia\",\n                    RpcSource.Http(listOf(URI(\"https://endpoints.omniatech.io/v1/arbitrum/one/public\")), null),\r\n                    defaultTransactionSource(type)\n--------------------------------------------------\nLayoutHelper.dp(12f, binding.wrapper.context)\n--------------------------------------------------\nLayoutHelper.dp(24f, binding.wrapper.context)\n--------------------------------------------------\nLayoutHelper.dp(2f, context)\n--------------------------------------------------\nLayoutHelper.dp(size, App.instance)", "import android.content.Context\nfun dp(dp: Float, context: Context?) = context?.let {\r\n        val density = context.resources.displayMetrics.density\r\n        if (dp == 0f) 0 else Math.ceil((density * dp).toDouble()).toInt()\r\n    } ?: dp.toInt()\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/1188" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/539" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/221" : [ "                setPushNotificationState(WAIT_BACKGROUND_SYNC)\n                startServices()\r\n            }\n--------------------------------------------------\n                setPushNotificationState(WAIT_NETWORK)\n                startServices()\r\n            }\n--------------------------------------------------\n                setPushNotificationState(LISTENING)\n                startServices()\r\n            }\n--------------------------------------------------\nstartService()\n--------------------------------------------------\ncontext.startService(intent)", "import timber.log.Timber\nimport android.os.Build\nimport android.content.Intent\nprivate fun startService() {\r\n        try {\r\n            val intent = Intent(context, PushService::class.java)\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                context.startForegroundService(intent)\r\n            } else {\r\n                context.startService(intent)\r\n            }\r\n        } catch (e: Exception) {\r\n            Timber.e(e, \"Exception while trying to start PushService\")\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Iconify/538" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1540" : [ "activity.resources.getString(R.string.you_are_now_a_developer)\n--------------------------------------------------\nresources.getString(R.string.about)\n--------------------------------------------------\nresources.getString(R.string.version_n)\n--------------------------------------------------\nrequireArguments().getString(\"notes\")\n--------------------------------------------------\nres.getString(R.string.yes)\n--------------------------------------------------\nres.getString(R.string.no)\n--------------------------------------------------\nthis.getString(R.string.every_x_days)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_week)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_month)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_y_days)\n--------------------------------------------------\nresources.getString(R.string.every_month)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_month, freqNum)\n--------------------------------------------------\nresources.getString(R.string.every_day)\n--------------------------------------------------\nresources.getString(R.string.every_week)\n--------------------------------------------------\nresources.getString(R.string.every_x_days, freqDen)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_week, freqNum)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_y_days, freqNum, freqDen)\n--------------------------------------------------\nbinding.toolbar.title = getString(R.string.edit_habit)\n--------------------------------------------------\nbinding.nameInput.hint = getString(R.string.measurable_short_example)\n--------------------------------------------------\nbinding.questionInput.hint = getString(R.string.measurable_question_example)\n--------------------------------------------------\ngetString(R.string.target_type_at_least)\n--------------------------------------------------\ngetString(R.string.target_type_at_most)\n--------------------------------------------------\ngetString(R.string.every_day)\n--------------------------------------------------\ngetString(R.string.every_week)\n--------------------------------------------------\ngetString(R.string.every_month)\n--------------------------------------------------\nbinding.targetInput.error = getString(R.string.validation_cannot_be_blank)\n--------------------------------------------------\nbinding.reminderTimePicker.text = getString(R.string.reminder_off)\n--------------------------------------------------\n1 -> getString(R.string.every_day)\n--------------------------------------------------\n7 -> getString(R.string.every_week)\n--------------------------------------------------\n30 -> getString(R.string.every_month)\n--------------------------------------------------\nNumericalHabitType.AT_MOST -> getString(R.string.target_type_at_most)\n--------------------------------------------------\nelse -> getString(R.string.target_type_at_least)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_entered)\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_completed)\n--------------------------------------------------\nresources.getString(R.string.main_activity_title)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_import)\n--------------------------------------------------\ngetString(when(m) {\n    COULD_NOT_EXPORT -> R.string.could_not_export\n    IMPORT_SUCCESSFUL -> R.string.habits_imported\n    IMPORT_FAILED -> R.string.could_not_import\n    DATABASE_REPAIRED -> R.string.database_repaired\n    COULD_NOT_GENERATE_BUG_REPORT -> R.string.bug_report_failed\n    FILE_NOT_RECOGNIZED -> R.string.file_not_recognized\n})\n--------------------------------------------------\nactivity.resources.getString(R.string.toast_habit_created)\n--------------------------------------------------\nactivity.resources.getString(R.string.habits_imported)\n--------------------------------------------------\nactivity.resources.getString(R.string.file_not_recognized)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(id)\n--------------------------------------------------\nresources.getString(R.string.hint_title)\n--------------------------------------------------\nresources.getString(R.string.fa_skipped)\n--------------------------------------------------\nresources.getString(R.string.fa_question)\n--------------------------------------------------\nresources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(R.string.reminder_off)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_up)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_down)\n--------------------------------------------------\nresources.getString(R.string.today)\n--------------------------------------------------\nresources.getString(R.string.week)\n--------------------------------------------------\nresources.getString(R.string.month)\n--------------------------------------------------\nresources.getString(R.string.quarter)\n--------------------------------------------------\nresources.getString(R.string.year)\n--------------------------------------------------\ngetString(R.string.intro_title_1)\n--------------------------------------------------\ngetString(R.string.intro_description_1)\n--------------------------------------------------\ngetString(R.string.intro_title_2)\n--------------------------------------------------\ngetString(R.string.intro_description_2)\n--------------------------------------------------\ngetString(R.string.intro_title_4)\n--------------------------------------------------\ngetString(R.string.intro_description_4)\n--------------------------------------------------\nresources.getString(R.string.settings)\n--------------------------------------------------\ngetString(R.string.playStoreURL)\n--------------------------------------------------\nactivity.getString(R.string.check)\n--------------------------------------------------\nactivity.getString(R.string.uncheck)\n--------------------------------------------------\nactivity.getString(R.string.toggle)\n--------------------------------------------------\nactivity.getString(R.string.increment)\n--------------------------------------------------\nactivity.getString(R.string.decrement)\n--------------------------------------------------\nresources.getString(R.string.app_name)\n--------------------------------------------------\ncursor.getString(index)\n--------------------------------------------------\ncontext.getString(R.string.translateURL)\n--------------------------------------------------\ncontext.getString(R.string.playStoreURL)\n--------------------------------------------------\ncontext.getString(R.string.feedbackURL)\n--------------------------------------------------\ncontext.getString(R.string.privacyPolicyURL)\n--------------------------------------------------\ncontext.getString(R.string.helpURL)\n--------------------------------------------------\ncontext.getString(R.string.sourceCodeURL)\n--------------------------------------------------\ncontext.getString(R.string.codeContributorsURL)\n--------------------------------------------------\ncontext.getString(R.string.yes)\n--------------------------------------------------\ncontext.getString(R.string.no)\n--------------------------------------------------\ncontext.getString(R.string.enter)\n--------------------------------------------------\ncontext.getString(R.string.default_reminder_question)\n--------------------------------------------------\ncontext.getString(R.string.snooze)\n--------------------------------------------------\ncontext.resources.getString(R.string.reminder)\n--------------------------------------------------\ncontext.resources.getString(R.string.none)\n--------------------------------------------------\nprefs.getString(\"pref_ringtone_uri\", defaultRingtoneUri.toString())\n--------------------------------------------------\nsharedPrefs.getString(key, defValue)\n--------------------------------------------------\ncontext.resources.getString(resId)\n--------------------------------------------------\ncontext.getString(R.string.weekends)\n--------------------------------------------------\ncontext.getString(R.string.any_weekday)\n--------------------------------------------------\ncontext.getString(R.string.any_day)\n--------------------------------------------------\nresources.getString(R.string.activity_not_found)\n--------------------------------------------------\nthis.getString(toId)\n--------------------------------------------------\nthis.getString(subjectId)\n--------------------------------------------------\ncontext.getString(R.string.habit_not_found)\n--------------------------------------------------\nresources.getString(R.string.fa_check)\n--------------------------------------------------\nresources.getString(R.string.fa_times)", "override fun getString(index: Int): String? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getString(index)\r\n        }\r\n    }" ],
  "Trail-Sense/223" : [ "        super.onSaveInstanceState(outState)\n        outState.putString(STATE_SELECTED_ACCOUNT_UUID, selectedAccountUuid)\r\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n--------------------------------------------------\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n        outState.putString(STATE_SELECTED_FOLDER_DISPLAY_NAME, selectedFolderDisplayName)\r\n    }\n--------------------------------------------------\neditor.putString(\"x\", \"y\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"storage-value\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"other-value\")\n--------------------------------------------------\nputString(key, value.name)", "override fun putString(key: String, value: String?) = apply {\r\n            if (value == null) {\r\n                remove(key)\r\n            } else {\r\n                changes[key] = value\r\n                removals.remove(key)\r\n            }\r\n        }" ],
  "Iconify/536" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/224" : [ "        super.onSaveInstanceState(outState)\n        outState.putString(STATE_SELECTED_ACCOUNT_UUID, selectedAccountUuid)\r\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n--------------------------------------------------\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n        outState.putString(STATE_SELECTED_FOLDER_DISPLAY_NAME, selectedFolderDisplayName)\r\n    }\n--------------------------------------------------\neditor.putString(\"x\", \"y\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"storage-value\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"other-value\")\n--------------------------------------------------\nputString(key, value.name)", "override fun putString(key: String, value: String?) = apply {\r\n            if (value == null) {\r\n                remove(key)\r\n            } else {\r\n                changes[key] = value\r\n                removals.remove(key)\r\n            }\r\n        }" ],
  "Iconify/535" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/225" : [ "cacheMap = convertToCacheMap(dao.getAll())\n--------------------------------------------------\ncacheMap + convertToCacheMap(list)", "import io.horizontalsystems.bankwallet.entities.Wallet\nimport io.horizontalsystems.bankwallet.entities.EnabledWalletCache\nimport io.horizontalsystems.bankwallet.core.BalanceData\nprivate fun convertToCacheMap(list: List<EnabledWalletCache>): Map<String, BalanceData> {\r\n        return list.map {\r\n            val key = listOf(it.tokenQueryId, it.accountId).joinToString()\r\n            key to BalanceData(it.balance, it.balanceLocked)\r\n        }.toMap()\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, core, BalanceData], wildcard=false, alias=null)" ],
  "Trail-Sense/1547" : [ "selectedNotes.clear()\n--------------------------------------------------\npreferences.edit().clear()\n--------------------------------------------------\nclear(backupDir)\n--------------------------------------------------\nclear(folder)\n--------------------------------------------------\nlabels.clear()\n--------------------------------------------------\nitems.clear()", "import java.io.File\nprivate fun clear(directory: File) {\r\n        val files = directory.listFiles()\r\n        if (files != null) {\r\n            for (file in files) {\r\n                file.delete()\r\n            }\r\n        }\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "Trail-Sense/1544" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "Trail-Sense/226" : [ "            )\n            if (collapsed.retainAll(tasks.getSectionValues())) {\r\n                widgetPreferences.setCollapsed(collapsed)", "import androidx.core.util.forEach\nfun getSectionValues(): List<Long> {\r\n        val values = ArrayList<Long>()\r\n        sections.forEach { _, header -> values.add(header.value) }\r\n        return values\r\n    }\nimport androidx.core.util.forEach" ],
  "Iconify/532" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/228" : [ "filter.isFilterUpcoming.isNullOrFalse()\n--------------------------------------------------\nfilter.isFilterUnwatched.isNullOrFalse()", "private fun Boolean?.isNullOrFalse(): Boolean {\r\n        if (this == null) return true\r\n        return !this\r\n    }" ],
  "Trail-Sense/1548" : [ "getPlannedDuration() != newTrip.getPlannedDuration()\n--------------------------------------------------\nnewTrip.getPlannedDuration()", "import de.schildbach.pte.dto.Trip\nprivate fun Trip.getPlannedDuration(): Long {\r\n        val first = firstPublicLeg?.getDepartureTime(true) ?: firstDepartureTime\r\n        val last = lastPublicLeg?.getDepartureTime(true) ?: lastArrivalTime\r\n        return last.time - first.time\r\n    }\nImport(names=[de, schildbach, pte, dto, Trip], wildcard=false, alias=null)" ],
  "Trail-Sense/1549" : [ "adapter.submitList(data.results)\n--------------------------------------------------\nsuper.submitList(list)\n--------------------------------------------------\nlistAdapter.submitList(data)\n--------------------------------------------------\nadapter.submitList(lists)\n--------------------------------------------------\nadapter.submitList(it)\n--------------------------------------------------\nadapter.submitList(it.results)\n--------------------------------------------------\nadapter.submitList(shows)\n--------------------------------------------------\nsubmitList(episodes) {\n    if (savedInstanceState == null && startingPosition != -1) {\n        setItemChecked(startingPosition)\n        startingPosition = -1\n    } else if (scrollToCheckedItemOnDataRefresh) {\n        val position = adapter.getPositionForId(adapter.selectedItemId)\n        if (position != -1) {\n            binding?.recyclerViewEpisodes?.smoothScrollToPosition(position)\n        }\n        scrollToCheckedItemOnDataRefresh = false\n    }\n}\n--------------------------------------------------\nadapter.submitList(seasons)\n--------------------------------------------------\nsuper.submitList(modifiedList)\n--------------------------------------------------\nadapter.submitList(showItems)", "import com.battlelancer.seriesguide.R\noverride fun submitList(list: MutableList<ShowItem>?) {\r\n        if (displayFirstRunHeader) {\r\n            val modifiedList = list ?: mutableListOf()\r\n            if (!modifiedList.contains(ShowItem.HEADER_FIRST_RUN)) {\r\n                modifiedList.add(0, ShowItem.header())\r\n            }\r\n            super.submitList(modifiedList)\r\n        } else {\r\n            super.submitList(list)\r\n        }\r\n    }" ],
  "MaterialFiles/1178" : [ "is MediaUpdate -> updateItems(update.mediaList as List<T>)", "import kotlinx.coroutines.withContext\nimport android.content.Context\nprotected open suspend fun updateItems(mediaList: List<T>) {\r\n        dataset.value = withContext(coroutineContextProvider.Default) {\r\n            val list = dataset.value\r\n            val iterator = list.listIterator()\r\n            while (iterator.hasNext()) {\r\n                val media = iterator.next()\r\n                for (newItem in mediaList) if (media.equals(newItem)) {\r\n                    iterator.set(newItem)\r\n                    break\r\n                }\r\n            }\r\n            list\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "QuickNovel/220" : [ "                    } else if (existingTef != null) {\n                        if (intent.removeTask && intent.broughtToFront) {\r\n                            moveTaskToBack(true)\n--------------------------------------------------\n                } else if (task != existingTef?.task) {\n                    existingTef?.save(remove = false)\r\n                    transaction\n--------------------------------------------------\n            firebase.addTask(source ?: \"unknown\")\n            intent.removeExtra(CREATE_TASK)\r\n            intent.removeExtra(CREATE_SOURCE)\n--------------------------------------------------\n            intent.removeExtra(CREATE_TASK)\n            intent.removeExtra(CREATE_SOURCE)\r\n            taskCreator.createWithValues(filter, \"\")\n--------------------------------------------------\n            val task = getParcelableExtra(intent, OPEN_TASK, Task::class.java)\n            intent.removeExtra(OPEN_TASK)\r\n            task\n--------------------------------------------------\nparent!!.children.remove(node)\n--------------------------------------------------\noldParent!!.children.remove(toMove)\n--------------------------------------------------\noldSiblings.remove(moveThis)\n--------------------------------------------------\nparent!!.children.remove(moveThis)\n--------------------------------------------------\nidToNode.remove(taskId)\n--------------------------------------------------\nbuilder.remove(TaskContract.Tasks._UID)\n--------------------------------------------------\nbuilder.remove(TaskContract.Tasks.CREATED)\n--------------------------------------------------\nbuilder.remove(TaskContract.Tasks.CREATED).remove(TaskContract.Tasks.LAST_MODIFIED)\n--------------------------------------------------\nremove(TaskContract.Tasks._DIRTY)\n--------------------------------------------------\nremove(TaskContract.Tasks.SYNC_VERSION)\n--------------------------------------------------\nlocalCacheCache.remove(username)\n--------------------------------------------------\nremove(preferenceScreen as PreferenceGroup, resIds)\n--------------------------------------------------\nremove(preferenceScreen, resIds)\n--------------------------------------------------\nremove(listOf(it))\n--------------------------------------------------\njobs.remove(entry.time, entry)\n--------------------------------------------------\nnotificationQueue.remove(overdueJobs)\n--------------------------------------------------\nmap.overlays.remove(it)\n--------------------------------------------------\npreferences.remove(R.string.p_backups_drive_last)\n--------------------------------------------------\npreferences.remove(R.string.p_google_drive_backup_account)\n--------------------------------------------------\nremove(R.string.upgrade_to_pro)\n--------------------------------------------------\npartiallySelected.remove(tagData)\n--------------------------------------------------\nselected.remove(tagData)\n--------------------------------------------------\nremove(it)\n--------------------------------------------------\ncollapsed.remove(group)", "import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nprivate fun remove(preferenceGroup: PreferenceGroup, resIds: IntArray) {\r\n        for (resId in resIds) {\r\n            val preference: Preference? = preferenceGroup.findPreference(getString(resId))\r\n            preference?.parent?.removePreference(preference)\r\n        }\r\n    }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceGroup], wildcard=false, alias=null)" ],
  "MaterialFiles/1193" : [ "PublishSubject.create()\n--------------------------------------------------\ncreate { emitter ->\n    try {\n        logger.info(\"call btc-kit.send\")\n        kit.send(address, (amount * satoshisInBitcoin).toLong(), true, feeRate, sortingType, pluginData ?: mapOf())\n        emitter.onSuccess(Unit)\n    } catch (ex: Exception) {\n        emitter.onError(ex)\n    }\n}\n--------------------------------------------------\nPublishSubject.create<AmountType>()\n--------------------------------------------------\nPublishSubject.create<Boolean>()\n--------------------------------------------------\nPublishSubject.create<List<Account>>()\n--------------------------------------------------\nPublishSubject.create<Unit>()\n--------------------------------------------------\nPublishSubject.create<Map<Wallet, IAdapter>>()\n--------------------------------------------------\ncreate()\n--------------------------------------------------\nAPIClient.retrofit(apiURL, 60, isSafeCall).create(FullTransactionAPI::class.java)\n--------------------------------------------------\ncreate(FullTransactionAPI::class.java)\n--------------------------------------------------\nAPIClient.retrofit(apiURL, 60).create(EvmContractInfoAPI::class.java)\n--------------------------------------------------\nAPIClient.retrofit(apiUrl, 60).create(TokenInfoAPI::class.java)\n--------------------------------------------------\nAPIClient.retrofit(apiURL, 60, true).create(GuidesAPI::class.java)\n--------------------------------------------------\nAPIClient.retrofit(apiURL, 60).create(ChangeLogsAPI::class.java)\n--------------------------------------------------\nRxJava2CallAdapterFactory.create()\n--------------------------------------------------\nGsonConverterFactory.create(GsonBuilder().setLenient().create())\n--------------------------------------------------\nGsonBuilder().setLenient().create()\n--------------------------------------------------\nScalarsConverterFactory.create()\n--------------------------------------------------\nGsonConverterFactory.create(gsonBuilder.create())\n--------------------------------------------------\ngsonBuilder.create()\n--------------------------------------------------\nBehaviorSubject.create<Unit>()\n--------------------------------------------------\nAPIClient.retrofit(apiURL, 60).create(HsLabelApi::class.java)\n--------------------------------------------------\ncreate { emitter ->\n    var attempt = 0\n    while (controlConn == null && attempt++ < maxTries) {\n        try {\n            val controlPort = getControlPort()\n            if (controlPort != -1) {\n                eventMonitor(msg = \"Connecting to control port: $controlPort\")\n                val torConnSocket = Socket(TorConstants.IP_LOCALHOST, controlPort)\n                torConnSocket.soTimeout = CONTROL_SOCKET_TIMEOUT\n                val conn = TorControlConnection(torConnSocket)\n                controlConn = conn\n                eventMonitor(msg = \"SUCCESS connected to Tor control port.\")\n                emitter.onNext(conn)\n            }\n        } catch (e: Exception) {\n            controlConn = null\n            torInfo.connection.processId = -1\n            torInfo.connection.status = ConnectionStatus.FAILED\n            eventMonitor(torInfo, msg = \"Error connecting to Tor local control port: \" + e.localizedMessage)\n            emitter.tryOnError(e)\n        }\n        Thread.sleep(300)\n    }\n}\n--------------------------------------------------\ncreate { emitter ->\n    try {\n        var result = torControl?.shutdownTor() ?: false\n        if (!result) {\n            result = killTorProcess()\n        }\n        torInfo.status = EntityStatus.STOPPED\n        eventMonitor(torInfo, Level.INFO, \"Tor stopped\")\n        emitter.onSuccess(result)\n    } catch (e: java.lang.Exception) {\n        eventMonitor(torInfo, Level.SEVERE, \"Tor stopped, but with errors:${e.localizedMessage}\")\n        emitter.onError(e)\n    }\n}\n--------------------------------------------------\nPublishSubject.create<Wallet>()\n--------------------------------------------------\nPublishSubject.create<Map<String, CoinPrice?>>()\n--------------------------------------------------\nBehaviorSubject.create<Boolean>()\n--------------------------------------------------\nBehaviorSubject.create<Optional<HsTimePeriod>>()\n--------------------------------------------------\nBehaviorSubject.create<Result<ChartPointsWrapper>>()\n--------------------------------------------------\nBehaviorSubject.create<DataState<List<AuditorItem>>>()\n--------------------------------------------------\nBehaviorSubject.create<DataState<List<CoinInvestment>>>()\n--------------------------------------------------\nBehaviorSubject.create<DataState<List<CoinReport>>>()\n--------------------------------------------------\ncreate { emitter ->\n    try {\n        val treasuries = getCoinTreasuries(coinUid, currencyCode, forceRefresh)\n        val filteredTreasuries = treasuries.filter {\n            when(treasuryType) {\n                TreasuryTypeFilter.All -> true\n                TreasuryTypeFilter.Public -> it.type == TreasuryType.Public\n                TreasuryTypeFilter.Private -> it.type == TreasuryType.Private\n                TreasuryTypeFilter.ETF -> it.type == TreasuryType.Etf\n            }\n        }\n        val sortedTreasuries = if (sortDescending) {\n            filteredTreasuries.sortedByDescending {\n                it.amount\n            }\n        } else {\n            filteredTreasuries.sortedBy {\n                it.amount\n            }\n        }\n        emitter.onSuccess(sortedTreasuries)\n    } catch (exception: Exception) {\n        emitter.onError(exception)\n    }\n}\n--------------------------------------------------\nBehaviorSubject.create<DataState<List<CoinTreasury>>>()\n--------------------------------------------------\nPublishSubject.create<BlockchainWithTokens>()\n--------------------------------------------------\nPublishSubject.create<Blockchain>()\n--------------------------------------------------\nPublishSubject.create<Request>()\n--------------------------------------------------\nPublishSubject.create<TokenWithSettings>()\n--------------------------------------------------\nPublishSubject.create<Token>()\n--------------------------------------------------\nPublishSubject.create<DataState<GasPriceInfo>>()\n--------------------------------------------------\nPublishSubject.create<DataState<Transaction>>()\n--------------------------------------------------\ncreate { emitter ->\n    try {\n        val marketItems = getFavorites(forceRefresh, currency)\n        emitter.onSuccess(marketItems.sort(sortingField))\n    } catch (error: Throwable) {\n        emitter.onError(error)\n    }\n}\n--------------------------------------------------\nBehaviorSubject.create()\n--------------------------------------------------\nMarketViewItem.create(it.marketItem, marketField, true)\n--------------------------------------------------\nMarketViewItem.create(it.marketItem, marketField, it.favorited)\n--------------------------------------------------\nRetrofitUtils.build(\"${baseUrl}/v1/\", mapOf(\"apikey\" to apiKey)).create(HsService::class.java)\n--------------------------------------------------\nPublishSubject.create<State>()\n--------------------------------------------------\nPublishSubject.create<SendState>()\n--------------------------------------------------\nBehaviorSubject.create<DataState<List<FaqSection>>>()\n--------------------------------------------------\nBehaviorSubject.create<DataState<List<GuideCategory>>>()\n--------------------------------------------------\nBehaviorSubject.create<Currency>()\n--------------------------------------------------\nBehaviorSubject.create<Int>()\n--------------------------------------------------\nPublishSubject.create<SwapPendingAllowanceState>()\n--------------------------------------------------\nPublishSubject.create<SendEvmTransactionService.State>()\n--------------------------------------------------\nPublishSubject.create<SendEvmTransactionService.SendState>()\n--------------------------------------------------\nBehaviorSubject.create<DataState<Unit>>()\n--------------------------------------------------\nPublishSubject.create<Pair<TransactionSource, LastBlockInfo>>()\n--------------------------------------------------\nPublishSubject.create<List<Sign.Model.Session>>()\n--------------------------------------------------\nPublishSubject.create<Long>()\n--------------------------------------------------\ncreate(serializer = MarketWidgetStateSerializer) {\n    context.marketWidgetDataStoreFile(fileKey)\n}", "import io.horizontalsystems.bankwallet.core.App\nimport androidx.lifecycle.ViewModel\n @Suppress(\"UNCHECKED_CAST\")\r\n        override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n            return RestorePrivateKeyViewModel(\r\n                App.accountFactory\r\n            ) as T\r\n        }\nImport(names=[androidx, lifecycle, ViewModel], wildcard=false, alias=null)\nImport(names=[io, horizontalsystems, bankwallet, core, App], wildcard=false, alias=null)" ],
  "Trail-Sense/1550" : [ "extendAddOns(it)", "import com.kickstarter.models.Reward\nimport com.kickstarter.R\nprivate fun extendAddOns(flattenedList: List<Reward>): List<Reward> {\r\n            val mutableList = mutableListOf<Reward>()\r\n\r\n            flattenedList.map {\r\n                if (!it.isAddOn()) mutableList.add(it)\r\n                else {\r\n                    val q = it.quantity() ?: 1\r\n                    for (i in 1..q) {\r\n                        mutableList.add(it)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return mutableList.toList()\r\n        }" ],
  "Iconify/549" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/548" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/233" : [ "    dragRect.set(0f, 0f, dragSize, dragSize)\n    dragRect.offset(bounds.centerX() - dragSize / 2f, bounds.centerY() - dragSize / 2f)\r\n  }\n--------------------------------------------------\n      val bottom = dragRect.bottom\n      val centerX = left + dragRect.width() / 2f\r\n      val centerY = top + dragRect.height() / 2f\n--------------------------------------------------\n      val centerX = left + dragRect.width() / 2f\n      val centerY = top + dragRect.height() / 2f\r\n\n--------------------------------------------------\n\n      topCircle.center(centerX, top)\r\n      leftCircle.center(left, centerY)\n--------------------------------------------------\n      topCircle.center(centerX, top)\n      leftCircle.center(left, centerY)\r\n      rightCircle.center(right, centerY)\n--------------------------------------------------\n      leftCircle.center(left, centerY)\n      rightCircle.center(right, centerY)\r\n      bottomCircle.center(centerX, bottom)\n--------------------------------------------------\n      rightCircle.center(right, centerY)\n      bottomCircle.center(centerX, bottom)\r\n    }", "import android.view.View\nprivate fun View.center(\r\n    x: Float,\r\n    y: Float,\r\n  ) {\r\n    translationX = x - width / 2f\r\n    translationY = y - height / 2f\r\n  }\nimport android.view.View" ],
  "Trail-Sense/234" : [ "                } else {\n                    drawBackground(dX, viewWidth, viewHeight)\r\n                }", "import com.fsck.k9.ui.R\nimport android.graphics.Paint\nimport android.graphics.Canvas\nprivate fun Canvas.drawBackground(dX: Float, width: Int, height: Int) {\r\n        val swipeAction = if (dX > 0) swipeRightAction else swipeLeftAction\r\n        val backgroundColor = resourceProvider.getBackgroundColor(swipeAction)\r\n\r\n        backgroundColorPaint.color = backgroundColor\r\n        drawRect(\r\n            0F,\r\n            0F,\r\n            width.toFloat(),\r\n            height.toFloat(),\r\n            backgroundColorPaint,\r\n        )\r\n    }\nimport android.graphics.Canvas\nimport android.graphics.Paint\nimport com.fsck.k9.ui.R" ],
  "Iconify/547" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1557" : [ "", "override fun onBindViewHolder(holder: TimeZoneViewHolder, position: Int) {\r\n        val timeZone = timeZones[position]\r\n        holder.bindView(timeZone)\r\n    }" ],
  "Trail-Sense/236" : [ "{\n        val folderIds = extractFolderIds(messageReferences)\r\n\n--------------------------------------------------\n\n        val encryptionResult = encryptionExtractor.extractEncryption(message)\r\n        return if (encryptionResult != null) {\n--------------------------------------------------\nEmailSectionExtractor.extract(text)\n--------------------------------------------------\nEmailSectionExtractor(text).extract()\n--------------------------------------------------\nEmailSectionExtractor.extract(message)", "fun extract(): List<EmailSection> {\r\n        text.forEachIndexed { index, character ->\r\n            if (isStartOfLine) {\r\n                detectQuoteCharacters(index, character)\r\n            } else if (character == '\\n') {\r\n                addQuotedLineToSection(endIndex = index + 1)\r\n            }\r\n\r\n            if (character == '\\n') {\r\n                newlineIndex = index\r\n                resetForStartOfLine()\r\n            }\r\n        }\r\n\r\n        completeLastSection()\r\n\r\n        return sections\r\n    }" ],
  "Trail-Sense/1558" : [ "getEvents(minFetchedSearchTS, maxFetchedSearchTS, searchQuery = text) { events ->\n    if (text == mLatestSearchQuery) {\n        showSearchResultEvents(events, INITIAL_EVENTS)\n        if (events.size < MIN_EVENTS_TRESHOLD) {\n            minFetchedSearchTS = 0L\n            maxFetchedSearchTS = MAX_SEARCH_YEAR\n            eventsHelper.getEvents(minFetchedSearchTS, maxFetchedSearchTS, searchQuery = text) { events ->\n                events.forEach { event ->\n                    try {\n                        if (searchResultEvents.firstOrNull {\n                            it.id == event.id && it.startTS == event.startTS\n                        } == null) {\n                            searchResultEvents.add(0, event)\n                        }\n                    } catch (ignored: ConcurrentModificationException) {}\n                }\n                showSearchResultEvents(searchResultEvents, INITIAL_EVENTS)\n            }\n        }\n    }\n}\n--------------------------------------------------\ngetEvents(minFetchedSearchTS, maxFetchedSearchTS, searchQuery = text) { events ->\n    events.forEach { event ->\n        try {\n            if (searchResultEvents.firstOrNull {\n                it.id == event.id && it.startTS == event.startTS\n            } == null) {\n                searchResultEvents.add(0, event)\n            }\n        } catch (ignored: ConcurrentModificationException) {}\n    }\n    showSearchResultEvents(searchResultEvents, INITIAL_EVENTS)\n}\n--------------------------------------------------\ngetEvents(minFetchedSearchTS, oldMinFetchedTS, searchQuery = mLatestSearchQuery) { events ->\n    events.forEach { event ->\n        try {\n            if (searchResultEvents.firstOrNull {\n                it.id == event.id && it.startTS == event.startTS\n            } == null) {\n                searchResultEvents.add(0, event)\n            }\n        } catch (ignored: ConcurrentModificationException) {}\n    }\n    showSearchResultEvents(searchResultEvents, UPDATE_TOP)\n}\n--------------------------------------------------\ngetEvents(oldMaxFetchedTS, maxFetchedSearchTS, searchQuery = mLatestSearchQuery) { events ->\n    events.forEach { event ->\n        try {\n            if (searchResultEvents.firstOrNull {\n                it.id == event.id && it.startTS == event.startTS\n            } == null) {\n                searchResultEvents.add(0, event)\n            }\n        } catch (ignored: ConcurrentModificationException) {}\n    }\n    showSearchResultEvents(searchResultEvents, UPDATE_BOTTOM)\n}\n--------------------------------------------------\ngetEvents(now, now + YEAR, event.id!!, false) { events ->\n    if (events.isNotEmpty()) {\n        for (curEvent in events) {\n            if (isTask && curEvent.isTaskCompleted()) {\n                continue\n            }\n            for (curReminder in reminderSeconds) {\n                if (curEvent.getEventStartTS() - curReminder > now) {\n                    scheduleEventIn((curEvent.getEventStartTS() - curReminder) * 1000L, curEvent, showToasts)\n                    return@getEvents\n                }\n            }\n        }\n    }\n    if (showToasts) {\n        toast(com.simplemobiletools.commons.R.string.saving)\n    }\n}\n--------------------------------------------------\ncontext?.eventsHelper?.getEvents(startTS, endTS) {\n    receivedEvents(it)\n}\n--------------------------------------------------\ngetEvents(minFetchedTS, maxFetchedTS) { events ->\n    if (events.size >= MIN_EVENTS_TRESHOLD) {\n        receivedEvents(events, INITIAL_EVENTS)\n    } else {\n        if (!wereInitialEventsAdded) {\n            maxFetchedTS += FETCH_INTERVAL\n        }\n        requireContext().eventsHelper.getEvents(minFetchedTS, maxFetchedTS) {\n            mEvents = it\n            receivedEvents(mEvents, INITIAL_EVENTS, !wereInitialEventsAdded)\n        }\n    }\n    wereInitialEventsAdded = true\n}\n--------------------------------------------------\ngetEvents(minFetchedTS, maxFetchedTS) {\n    mEvents = it\n    receivedEvents(mEvents, INITIAL_EVENTS, !wereInitialEventsAdded)\n}\n--------------------------------------------------\ngetEvents(minFetchedTS, oldMinFetchedTS) {\n    it.forEach { event ->\n        if (mEvents.firstOrNull {\n            it.id == event.id && it.startTS == event.startTS\n        } == null) {\n            mEvents.add(0, event)\n        }\n    }\n    receivedEvents(mEvents, UPDATE_TOP)\n}\n--------------------------------------------------\ngetEvents(oldMaxFetchedTS, maxFetchedTS) {\n    it.forEach { event ->\n        if (mEvents.firstOrNull {\n            it.id == event.id && it.startTS == event.startTS\n        } == null) {\n            mEvents.add(0, event)\n        }\n    }\n    receivedEvents(mEvents, UPDATE_BOTTOM)\n}\n--------------------------------------------------\ngetEvents(startDateTime.seconds(), endDateTime.seconds()) { events ->\n    mListEvents = events\n    activity?.runOnUiThread {\n        updateVisibleEvents()\n    }\n}\n--------------------------------------------------\nmCalendar?.getEvents(mYear)\n--------------------------------------------------\ncontext.eventsHelper.getEvents(startTS, endTS) {\n    gotEvents(it)\n}\n--------------------------------------------------\ngetEvents(weekStartTS - DAY_SECONDS, endTS) {\n    mEvents = it\n    callback.updateWeeklyCalendar(it)\n}", "import org.joda.time.DateTime\nimport com.simplemobiletools.calendar.pro.models.Event\nimport com.simplemobiletools.calendar.pro.extensions.seconds\nimport com.simplemobiletools.calendar.pro.extensions.eventsHelper\nfun getEvents(year: Int) {\r\n        val startDateTime = DateTime().withTime(0, 0, 0, 0).withDate(year, 1, 1)\r\n        val startTS = startDateTime.seconds()\r\n        val endTS = startDateTime.plusYears(1).minusSeconds(1).seconds()\r\n        context.eventsHelper.getEvents(startTS, endTS) {\r\n            gotEvents(it)\r\n        }\r\n    }\nImport(names=[org, joda, time, DateTime], wildcard=false, alias=null)" ],
  "Iconify/544" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/1556" : [ "", "import io.horizontalsystems.bankwallet.core.providers.Translator\nimport io.horizontalsystems.bankwallet.R\nfun getRanges(currencyCode: String): List<FilterViewItemWrapper<Range?>> {\r\n    return listOf(rangeEmpty) + Range.valuesByCurrency(currencyCode).map {\r\n        FilterViewItemWrapper(Translator.getString(it.titleResId), it)\r\n    }\r\n}\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.core.providers.Translator" ],
  "Trail-Sense/1559" : [ "val validDayEvent = isDayValid(event, day.code)", "import org.joda.time.DateTime\nimport com.simplemobiletools.calendar.pro.models.Event\nimport com.simplemobiletools.calendar.pro.helpers.Formatter\nprivate fun isDayValid(event: Event, code: String): Boolean {\r\n        val date = Formatter.getDateTimeFromCode(code)\r\n        return event.startTS != event.endTS && Formatter.getDateTimeFromTS(event.endTS) == Formatter.getDateTimeFromTS(date.seconds()).withTimeAtStartOfDay()\r\n    }\nImport(names=[com, simplemobiletools, calendar, pro, helpers, Formatter], wildcard=false, alias=null)\nImport(names=[com, simplemobiletools, calendar, pro, models, Event], wildcard=false, alias=null)" ],
  "QuickNovel/236" : [ "        if (list == null) {\n            var defaultOrder = preferences.getStringValue(prefId)\r\n            if (isNullOrEmpty(defaultOrder)) {\n--------------------------------------------------\n        )\n        preferences.getStringValue(R.string.p_default_recurrence)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n                }\n        preferences.getStringValue(R.string.p_default_location)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n        if (tags.isEmpty()) {\n            preferences.getStringValue(R.string.p_default_tags)\r\n                    ?.split(\",\")\n--------------------------------------------------\npreferences.getStringValue(R.string.p_dashclock_filter)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_account)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_folder)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_list)\n--------------------------------------------------\npreferences.getStringValue(resId)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_start_of_week)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_recurrence)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_location)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_tags)", "import timber.log.Timber\nfun getStringValue(key: String?): String? = try {\r\n        prefs.getString(key, null)\r\n    } catch (e: Exception) {\r\n        Timber.e(e)\r\n        null\r\n    }\nimport timber.log.Timber" ],
  "QuickNovel/237" : [ "    when (imageSource) {\n        is ImageSource.Local -> setImageResource(imageSource.resId)\r\n        is ImageSource.Remote -> setRemoteImage(imageSource.url, imageSource.placeholder)", "import io.horizontalsystems.bankwallet.modules.market.ImageSource\nimport io.horizontalsystems.bankwallet.R\nimport android.widget.ImageView\nfun ImageView.setImage(imageSource: ImageSource) {\r\n    when (imageSource) {\r\n        is ImageSource.Local -> setImageResource(imageSource.resId)\r\n        is ImageSource.Remote -> setRemoteImage(imageSource.url, imageSource.placeholder)\r\n    }\r\n}\nimport android.widget.ImageView\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.modules.market.ImageSource" ],
  "Iconify/113" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/110" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "QuickNovel/240" : [ "        is ImageSource.Local -> setImageResource(imageSource.resId)\n        is ImageSource.Remote -> setRemoteImage(imageSource.url, imageSource.placeholder)\r\n    }", "import io.horizontalsystems.bankwallet.R\nimport coil.load\nimport android.widget.ImageView\nfun ImageView.setRemoteImage(url: String, placeholder: Int? = R.drawable.ic_placeholder) {\r\n    load(url) {\r\n        if (placeholder != null) {\r\n            error(placeholder)\r\n        }\r\n    }\r\n}\nimport android.widget.ImageView\nimport coil.load\nimport io.horizontalsystems.bankwallet.R" ],
  "Iconify/595" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Iconify/111" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/591" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/590" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/118" : [ "/**\r\n * Performs one of the ActionBar button's actions after checked notes protection\r\n */\r\npublic void performAction(MenuItem item, ActionMode actionMode) {\r\n    if (isOptionsItemFastClick()) {\r\n        return;\r\n    }\r\n    if (actionMode == null) {\r\n        switch(item.getItemId()) {\r\n            case android.R.id.home:\r\n                if (mainActivity.getDrawerLayout().isDrawerOpen(GravityCompat.START)) {\r\n                    mainActivity.getDrawerLayout().closeDrawer(GravityCompat.START);\r\n                } else {\r\n                    mainActivity.getDrawerLayout().openDrawer(GravityCompat.START);\r\n                }\r\n                break;\r\n            case R.id.menu_filter:\r\n                filterReminders(true);\r\n                break;\r\n            case R.id.menu_filter_remove:\r\n                filterReminders(false);\r\n                break;\r\n            case R.id.menu_filter_category:\r\n                filterCategoryArchived(true);\r\n                break;\r\n            case R.id.menu_filter_category_remove:\r\n                filterCategoryArchived(false);\r\n                break;\r\n            case R.id.menu_uncomplete_checklists:\r\n                filterByUncompleteChecklists();\r\n                break;\r\n            case R.id.menu_tags:\r\n                filterByTags();\r\n                break;\r\n            case R.id.menu_sort:\r\n                initSortingSubmenu();\r\n                break;\r\n            case R.id.menu_expanded_view:\r\n                switchNotesView();\r\n                break;\r\n            case R.id.menu_contracted_view:\r\n                switchNotesView();\r\n                break;\r\n            case R.id.menu_empty_trash:\r\n                emptyTrash();\r\n                break;\r\n            case R.id.menu_search:\r\n                // Nothing to do, it's all managed by SearchView component\r\n                break;\r\n            default:\r\n                LogDelegate.e(\"Wrong element choosen: \" + item.getItemId());\r\n        }\r\n    } else {\r\n        switch(item.getItemId()) {\r\n            case R.id.menu_category:\r\n                categorizeNotes();\r\n                break;\r\n            case R.id.menu_tags:\r\n                tagNotes();\r\n                break;\r\n            case R.id.menu_share:\r\n                share();\r\n                break;\r\n            case R.id.menu_merge:\r\n                merge();\r\n                break;\r\n            case R.id.menu_archive:\r\n                archiveNotes(true);\r\n                break;\r\n            case R.id.menu_unarchive:\r\n                archiveNotes(false);\r\n                break;\r\n            case R.id.menu_trash:\r\n                trashNotes(true);\r\n                break;\r\n            case R.id.menu_untrash:\r\n                trashNotes(false);\r\n                break;\r\n            case R.id.menu_delete:\r\n                deleteNotes();\r\n                break;\r\n            case R.id.menu_select_all:\r\n                selectAllNotes();\r\n                break;\r\n            case R.id.menu_add_reminder:\r\n                addReminders();\r\n                break;\r\n            //                case R.ID.menu_synchronize:\r\n            //                    synchronizeSelectedNotes();\r\n            //                    break;\r\n            default:\r\n                LogDelegate.e(\"Wrong element choosen: \" + item.getItemId());\r\n        }\r\n    }\r\n    checkSortActionPerformed(item);\r\n}\n--------------------------------------------------\n", "import android.widget.LinearLayout;\r\nimport it.feio.android.omninotes.models.Note\nimport androidx.appcompat.view.ActionMode\nimport android.widget.LinearLayout\nimport android.view.View\nimport android.view.Menu\nimport android.graphics.Color\n/**\r\n * Selects all notes in list\r\n */\r\nprivate void selectAllNotes() {\r\n    for (int i = 0; i < binding.list.getChildCount(); i++) {\r\n        LinearLayout v = binding.list.getChildAt(i).findViewById(R.id.card_layout);\r\n        v.setBackgroundColor(getResources().getColor(R.color.list_bg_selected));\r\n    }\r\n    selectedNotes.clear();\r\n    for (int i = 0; i < listAdapter.getItemCount(); i++) {\r\n        selectedNotes.add(listAdapter.getItem(i));\r\n        listAdapter.addSelectedItem(i);\r\n    }\r\n    prepareActionModeMenu();\r\n    setCabTitle();\r\n}" ],
  "Trail-Sense/640" : [ "TimeTools.getShowReleaseTime(customReleaseTime)\n--------------------------------------------------\ngetShowReleaseTime(if (usingCustomTime) releaseInfo.customReleaseTime else releaseInfo.releaseTimeOrDefault)\n--------------------------------------------------\nval time = getShowReleaseTime(releaseTime)", "import org.threeten.bp.LocalTime\nimport com.battlelancer.seriesguide.R\nfun getShowReleaseTime(showReleaseTime: Int): LocalTime {\r\n        if (showReleaseTime in 0..2359) {\r\n            val hour = showReleaseTime / 100\r\n            val minute = showReleaseTime - hour * 100\r\n            if (minute <= 59) {\r\n                return LocalTime.of(hour, minute)\r\n            }\r\n        }\r\n\r\n        // if no time is available, use a sensible default\r\n        return LocalTime.of(7, 0)\r\n    }\nImport(names=[org, threeten, bp, LocalTime], wildcard=false, alias=null)" ],
  "Iconify/119" : [ "= updater.onDeleteTask(list, filter, task.uuid)\n--------------------------------------------------\nonDelete(viewHolder.adapterPosition)", "private fun onDelete(index: Int) {\r\n        criteria.removeAt(index)\r\n        updateList()\r\n    }" ],
  "Iconify/116" : [ "@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == android.R.id.home) {\r\n        finish();\r\n        return true;\r\n    } else if (itemId == R.id.menu_force_light) {\r\n        onMenuForceLight();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == android.R.id.home) {\r\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == R.id.menu_changelog) {\r\n        onMenuChangelog();\r\n        return true;\r\n    } else if (itemId == R.id.menu_attribution) {\r\n        onMenuAttribution();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "Iconify/117" : [ "", "override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r\n        var childLeft = 0\r\n\r\n        for (i in 0 until childCount) {\r\n            val child = getChildAt(i)\r\n            if (child.visibility != View.GONE) {\r\n                val childWidth = child.measuredWidth\r\n                child.layout(childLeft, 0, childLeft + childWidth, child.measuredHeight)\r\n                childLeft += childWidth\r\n            }\r\n        }\r\n    }" ],
  "Iconify/599" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/114" : [ "super.onActivityResult(requestCode, resultCode, data)", "import com.omgodse.notally.R\nimport android.content.Intent\nimport android.app.Activity\noverride fun onActivityResult(requestCode: Int, resultCode: Int, intent: Intent?) {\r\n        if (resultCode == Activity.RESULT_OK) {\r\n            intent?.data?.let { uri ->\r\n                when (requestCode) {\r\n                    REQUEST_IMPORT_BACKUP -> model.importBackup(uri)\r\n                    REQUEST_EXPORT_BACKUP -> model.exportBackup(uri)\r\n                    REQUEST_CHOOSE_FOLDER -> model.setAutoBackupPath(uri)\r\n                }\r\n            }\r\n        }\r\n    }\nImport(names=[android, app, Activity], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, R], wildcard=false, alias=null)" ],
  "Neo-Backup/9" : [ "showFragment(if (currentFragmentId != 0) currentFragmentId else settings.getInt(\"fragment_id\", defaultFragmentId))\n--------------------------------------------------\nshowFragment(fragment, id, tag)\n--------------------------------------------------\nshowFragment(id)\n--------------------------------------------------\nshowFragment(ID_SLEEP)\n--------------------------------------------------\nelse -> showFragment(option.id)\n--------------------------------------------------\nshowFragment(viewModel.currentFragment)\n--------------------------------------------------\nshowFragment(FragmentName.SCAN)\n--------------------------------------------------\nshowFragment(FragmentName.ASK_PERMISSION)\n--------------------------------------------------\nshowFragment(if (Permissions.canReadStorage(applicationContext)) FragmentName.SCAN else FragmentName.NO_PERMISSION)\n--------------------------------------------------\nshowFragment(if (Permissions.canReadStorage(applicationContext)) FragmentName.SCAN else FragmentName.THEME)\n--------------------------------------------------\nshowFragment(FragmentName.THEME)\n--------------------------------------------------\nshowFragment(FragmentName.NOTIFICATION_PERMISSION)\n--------------------------------------------------\n(requireActivity() as OnboardingActivity).showFragment(FragmentName.ASK_PERMISSION, true)", "import androidx.fragment.app.Fragment\nprivate fun showFragment(id: Int) {\r\n        val tag = getTag(id)\r\n        val fragment = getNewFragment(id)\r\n        showFragment(fragment, id, tag)\r\n    }" ],
  "Iconify/598" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/648" : [ "delegate?.projectUpdateClicked(this, activity())", "import com.kickstarter.ui.viewholders.ProjectUpdateViewHolder\nimport com.kickstarter.models.Project\nimport com.kickstarter.models.Activity\noverride fun projectUpdateClicked(\r\n            viewHolder: ProjectUpdateViewHolder?,\r\n            activity: Activity?\r\n        ) {\r\n            if (activity != null) {\r\n                projectUpdateClick.onNext(activity)\r\n            }\r\n        }\nImport(names=[com, kickstarter, models, Activity], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, Project], wildcard=false, alias=null)\nImport(names=[com, kickstarter, ui, viewholders, ProjectUpdateViewHolder], wildcard=false, alias=null)" ],
  "QuickNovel/247" : [ "PeopleSettings.setPersonLanguage(requireContext(), event.selectedLanguageCode)", "import com.battlelancer.seriesguide.R\nimport androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nimport android.content.Context\nfun setPersonLanguage(context: Context, languageCode: String) {\r\n        PreferenceManager.getDefaultSharedPreferences(context).edit {\r\n            putString(KEY_PERSON_LANGUAGE, languageCode)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[androidx, core, content, edit], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "QuickNovel/248" : [ "                        walletId = account.id,\n                        syncMode = syncMode,\r\n                        networkType = NetworkType.MainNet,\n--------------------------------------------------\nmarketKit.sync()\n--------------------------------------------------\nit.sync()\n--------------------------------------------------\nsync(adaptersMap)\n--------------------------------------------------\nsync(nftAdapterManager.adaptersUpdatedFlow.value, true)\n--------------------------------------------------\nsync(nftKey, adapter, true)\n--------------------------------------------------\nsync(nftKey, adapter, force)\n--------------------------------------------------\nsync(it)\n--------------------------------------------------\nsync(service.blockchainItems)\n--------------------------------------------------\nsync(state.data)\n--------------------------------------------------\nsync(gasPriceService.state)\n--------------------------------------------------\nsync(gasPriceService.currentBaseFee)\n--------------------------------------------------\nsync(gasPriceServiceState.data)\n--------------------------------------------------\nsync(transaction)\n--------------------------------------------------\nsync(walletManager.activeWallets)\n--------------------------------------------------\nsync(wallets)\n--------------------------------------------------\nsync()\n--------------------------------------------------\nsync(result, rate)\n--------------------------------------------------\nsync(it, rate)\n--------------------------------------------------\nsync(fixedNonce)\n--------------------------------------------------\nsync(nonce)\n--------------------------------------------------\nsync(currentState.nonce + 1)\n--------------------------------------------------\nsync(currentState.nonce - 1)\n--------------------------------------------------\nsync(nonce, default = true)", "import io.horizontalsystems.bankwallet.entities.nft.NftKey\nimport io.horizontalsystems.bankwallet.core.adapters.nft.INftAdapter\nprivate suspend fun sync(adaptersMap: Map<NftKey, INftAdapter>, force: Boolean = false) =\r\n        adaptersMap.forEach { (nftKey, adapter) ->\r\n            sync(nftKey, adapter, force)\r\n        }\nImport(names=[io, horizontalsystems, bankwallet, core, adapters, nft, INftAdapter], wildcard=false, alias=null)" ],
  "QuickNovel/242" : [ "setValueOrPlaceholder(binding.textViewMovieGenres, TmdbTools.buildGenresString(tmdbMovie.genres))\n--------------------------------------------------\nsetValueOrPlaceholder(binding.textviewDirectors, TextTools.splitPipeSeparatedStrings(episode.directors))\n--------------------------------------------------\nsetValueOrPlaceholder(binding.textviewWriters, TextTools.splitPipeSeparatedStrings(episode.writers))\n--------------------------------------------------\nViewTools.setValueOrPlaceholder(binding.textViewFirstRelease, showForUi.releaseYear)\n--------------------------------------------------\nViewTools.setValueOrPlaceholder(binding.textViewContentRating, show.contentRating)\n--------------------------------------------------\nViewTools.setValueOrPlaceholder(binding.textViewGenres, showForUi.genres)\n--------------------------------------------------\nsetValueOrPlaceholder(binding.textViewAddGenres, TextTools.splitPipeSeparatedStrings(show.genres))", "import com.battlelancer.seriesguide.R\nimport android.widget.TextView\nimport android.view.View\nfun setValueOrPlaceholder(view: View, value: String?) {\r\n        val field = view as TextView\r\n        if (value.isNullOrEmpty()) {\r\n            field.setText(R.string.unknown)\r\n        } else {\r\n            field.text = value\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, widget, TextView], wildcard=false, alias=null)" ],
  "QuickNovel/244" : [ "client.track(\"App Open\")\n--------------------------------------------------\nclient.track(PAGE_VIEWED.eventName, props)\n--------------------------------------------------\nclient.track(CTA_CLICKED.eventName, props)\n--------------------------------------------------\nclient.track(VIDEO_PLAYBACK_STARTED.eventName, props)\n--------------------------------------------------\nclient.track(VIDEO_PLAYBACK_COMPLETED.eventName, props)\n--------------------------------------------------\nclient.track(CARD_CLICKED.eventName, props)\n--------------------------------------------------\nclient?.track(eventName)\n--------------------------------------------------\nclient?.track(eventName, additionalProperties)\n--------------------------------------------------\nAnalytics.with(context).track(eventName, this.getProperties(newProperties))\n--------------------------------------------------\ntrack(eventName, HashMap())", "fun track(eventName: String) {\r\n            clients.forEach { client ->\r\n                client?.track(eventName)\r\n            }\r\n        }" ],
  "Iconify/124" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    controller.release();\r\n    controller = null;\r\n}\n--------------------------------------------------\n", "import de.danoeh.antennapod.core.util.playback.PlaybackController;\r\nimport de.danoeh.antennapod.core.util.playback.PlaybackController\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    controller = new PlaybackController(getActivity()) {\r\n\r\n        @Override\r\n        public void loadMediaInfo() {\r\n            setupAudioTracks();\r\n        }\r\n    };\r\n    controller.init();\r\n}" ],
  "QuickNovel/250" : [ "trackArray.map {\n    it.addFlags(MediaWrapper.MEDIA_FORCE_AUDIO)\n    it\n}\n--------------------------------------------------\nlist.map {\n    getMediaWithMeta(it)\n}\n--------------------------------------------------\nmap {\n    getMediaWithMeta(it as MediaWrapper)\n}\n--------------------------------------------------\nDirectoryRepository.getInstance(context).getCustomDirectories().map {\n    it.path\n}\n--------------------------------------------------\nmediaLibraryItems.asSequence().map {\n    it as MediaWrapper\n}\n--------------------------------------------------\nmap {\n    binding.languageListSpinner.allValuesOfLanguages[it]\n}\n--------------------------------------------------\nmap {\n    binding.languageListSpinner.allValuesOfLanguages.indexOf(it)\n}\n--------------------------------------------------\nlist.map {\n    it as MediaWrapper\n}\n--------------------------------------------------\ndb.listFiles()?.map {\n    it.path\n}\n--------------------------------------------------\nmultiSelectHelper.getSelection().map {\n    it as MediaWrapper\n}\n--------------------------------------------------\nmap {\n    it.first\n}\n--------------------------------------------------\nallEntriesOfLanguages.map {\n    false\n}\n--------------------------------------------------\nselection.map {\n    false\n}\n--------------------------------------------------\nmediaList.map {\n    it.uri\n}\n--------------------------------------------------\nmediaList.map {\n    it.title\n}\n--------------------------------------------------\nmap {\n    it.length\n}\n--------------------------------------------------\ncopy.asSequence().take(index).map {\n    it.length\n}\n--------------------------------------------------\nchildren.map {\n    MLServiceLocator.getAbstractMediaWrapper(it)\n}\n--------------------------------------------------\nfoldersContentMap.get(media)?.map {\n    it as MediaWrapper\n}\n--------------------------------------------------\nmap {\n    it as MediaWrapper\n}\n--------------------------------------------------\nsuper.browseUrl(url).toList().map {\n    it as MediaWrapper\n}\n--------------------------------------------------\nmap { videoGroup ->\n    if (videoGroup.mediaCount() == 1) {\n        val video = videoGroup.media(Medialibrary.SORT_DEFAULT, false, true, false, 1, 0).getOrNull(0)\n        if (video != null) {\n            video\n        } else {\n            checkIsNetwork(videoGroup)\n            videoGroup\n        }\n    } else {\n        checkIsNetwork(videoGroup)\n        videoGroup\n    }\n}\n--------------------------------------------------\ngetMediaDirectories().filter {\n    File(it).exists()\n}.map {\n    createDirectory(it, context)\n}\n--------------------------------------------------\ngetCustomDirectories().map {\n    it.path\n}\n--------------------------------------------------\nmap { list ->\n    val existExternalSubs: MutableList<org.videolan.vlc.mediadb.models.ExternalSub> = mutableListOf()\n    list.forEach {\n        if (File(Uri.decode(it.subtitlePath)).exists()) existExternalSubs.add(it) else deleteSubtitle(it.mediaPath, it.idSubtitle)\n    }\n    existExternalSubs\n}\n--------------------------------------------------\nit.map {\n    saveSlave(mw.location, it.type, it.priority, it.uri)\n}\n--------------------------------------------------\nmap {\n    var uri = it.uri\n    if (uri.isNotEmpty()) uri = Uri.decode(it.uri)\n    IMedia.Slave(it.type, it.priority, uri)\n}\n--------------------------------------------------\nmap { (uri, _, title, iconUrl) ->\n    MLServiceLocator.getAbstractMediaWrapper(uri).apply {\n        setDisplayTitle(Uri.decode(title))\n        type = MediaWrapper.TYPE_DIR\n        iconUrl?.let {\n            artworkURL = Uri.decode(it)\n        }\n        setStateFlags(MediaLibraryItem.FLAG_FAVORITE)\n    }\n}\n--------------------------------------------------\nmap {\n    it.lowercase(Locale.getDefault())\n}\n--------------------------------------------------\nviewModelScope.map(dataset) {\n    ModelsHelper.splitList(sort, it!!.toList())\n}\n--------------------------------------------------\nviewModelScope.map(dataset) {\n    ModelsHelper.generateSections(sort, it!!.toList())\n}\n--------------------------------------------------\nmedias.map {\n    it.id\n}\n--------------------------------------------------\nmap {\n    val stopAfter = service?.playlistManager?.stopAfter\n    if (stopAfter == null || stopAfter == -1 || mediaList.indexOf(it) <= stopAfter) it.length else 0L\n}\n--------------------------------------------------\nmap { list ->\n    list.map {\n        SubtitleItem(it.idSubtitle, mediaUri, it.subLanguageID, it.movieReleaseName, State.Downloaded, \"\")\n    }\n}\n--------------------------------------------------\nmap {\n    SubtitleItem(it.idSubtitle, mediaUri, it.subLanguageID, it.movieReleaseName, State.Downloaded, \"\")\n}\n--------------------------------------------------\nmap {\n    it.getCompliantLanguageID()\n}", "import org.videolan.libvlc.Media\nfun <X, Y> CoroutineScope.map(\r\n        source: LiveData<X>,\r\n        f : suspend (value: X?) -> Y\r\n): LiveData<Y> {\r\n    return MediatorLiveData<Y>().apply {\r\n        addSource(source) {\r\n            launch { value = f(it) }\r\n        }\r\n    }\r\n}\nImport(names=[org, videolan, libvlc, Media], wildcard=false, alias=null)" ],
  "QuickNovel/251" : [ "doRequest {\n    withContext(Dispatchers.IO) {\n        provider.forUrl(url, username, password).homeSet(username, password)\n    }\n}", "import timber.log.Timber\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.NonCancellable\nprotected suspend fun <T> doRequest(action: suspend () -> T): T? =\r\n        withContext(NonCancellable) {\r\n            if (inFlight.value == true) {\r\n                return@withContext null\r\n            }\r\n            inFlight.value = true\r\n            try {\r\n                return@withContext action()\r\n            } catch (e: Exception) {\r\n                Timber.e(e)\r\n                error.value = e\r\n                return@withContext null\r\n            } finally {\r\n                inFlight.value = false\r\n            }\r\n        }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "QuickNovel/252" : [ "settingsRepository.saveSettings(key, value)\n--------------------------------------------------\nsaveSettings(intPreferencesKey(Constants.BOOKMARK_ORDER_KEY), event.order.toInt())\n--------------------------------------------------\nsaveSettings(intPreferencesKey(Constants.BOOKMARK_VIEW_KEY), event.view.value)\n--------------------------------------------------\nsaveSettings(stringSetPreferencesKey(Constants.EXCLUDED_CALENDARS_KEY), if (add) uiState.excludedCalendars.addAndToStringSet(id) else uiState.excludedCalendars.removeAndToStringSet(id))\n--------------------------------------------------\nsaveSettings(intPreferencesKey(Constants.DIARY_ORDER_KEY), event.order.toInt())", "import kotlinx.coroutines.withContext\nimport androidx.datastore.preferences.core.edit\nimport androidx.datastore.preferences.core.Preferences\noverride suspend fun <T> saveSettings(key: Preferences.Key<T>, value: T) {\r\n        withContext(ioDispatcher) {\r\n            preferences.edit { settings ->\r\n                if (settings[key] != value)\r\n                    settings[key] = value\r\n            }\r\n        }\r\n    }\nImport(names=[androidx, datastore, preferences, core, Preferences], wildcard=false, alias=null)\nImport(names=[androidx, datastore, preferences, core, edit], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/120" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Trail-Sense/651" : [ "updateStartTexts()", "private fun updateStartTexts() {\r\n        updateStartDateText()\r\n        updateStartTimeText()\r\n    }" ],
  "Trail-Sense/652" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/127" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Trail-Sense/653" : [ "override fun onPause() {\n    super.onPause()\n    localBroadcastManager.unregisterReceiver(purchaseReceiver)\n}", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n        localBroadcastManager.registerPurchaseReceiver(purchaseReceiver)\r\n        localBroadcastManager.registerRefreshListReceiver(purchaseReceiver)\r\n    }" ],
  "Iconify/128" : [ "", "import com.omgodse.notally.databinding.FragmentSettingsBinding\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        val binding = FragmentSettingsBinding.inflate(inflater)\r\n        setupBinding(binding)\r\n        return binding.root\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, fragment, app, Fragment], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, databinding, FragmentSettingsBinding], wildcard=false, alias=null)" ],
  "Trail-Sense/654" : [ "        preferences.setInt(\n                R.string.p_theme_color, getAndroidColor(preferences.getInt(R.string.p_theme_color, 7)))\r\n        for (calendar in caldavDao.getCalendars()) {\n--------------------------------------------------\n            caldavDao.update(\n                calendar.copy(color = getAndroidColor(calendar.color))\r\n            )\n--------------------------------------------------\n        for (tagData in tagDataDao.getAll()) {\n            tagData.setColor(getAndroidColor(tagData.getColor()!!))\r\n            tagDataDao.update(tagData)\n--------------------------------------------------\n                filter.copy(\n                    color = getAndroidColor(filter.color ?: 0)\r\n                )\n--------------------------------------------------\n{\r\n        return getAndroidColor(context, index)\r\n    }", "import android.content.Context\n @JvmStatic\r\n        fun getAndroidColor(context: Context, index: Int): Int {\r\n            val legacyColor = getLegacyColor(index, 0)\r\n            return if (legacyColor == 0) 0 else context.getColor(legacyColor)\r\n        }\nimport android.content.Context" ],
  "Iconify/125" : [ "", "import androidx.lifecycle.LifecycleOwner\noverride fun onStop(owner: LifecycleOwner) {\r\n        if (!viewModel.notificationHelper.allowBackgroundAudio) {\r\n            viewModel.pause()\r\n        }\r\n    }\nImport(names=[androidx, lifecycle, LifecycleOwner], wildcard=false, alias=null)" ],
  "Iconify/126" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Trail-Sense/659" : [ "        appPreferences.currentUserId = withContext(Dispatchers.IO) {\n            userDao.upsert(serverId, userId, accessToken)\r\n        }", "import androidx.room.Transaction\n @Transaction\r\n    fun upsert(serverId: Long, userId: String, accessToken: String?): Long {\r\n        return when (val user = getByUserId(serverId, userId)) {\r\n            null -> insert(serverId, userId, accessToken)\r\n            else -> {\r\n                update(user.id, accessToken)\r\n                user.id\r\n            }\r\n        }\r\n    }" ],
  "QuickNovel/253" : [ "", "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.coroutines.Job\nimport androidx.compose.foundation.MutatePriority\nsuspend fun <T, R> mutateWith(\r\n        receiver: T,\r\n        priority: MutatePriority = MutatePriority.Default,\r\n        block: suspend T.() -> R\r\n    ) = coroutineScope {\r\n        val mutator = Mutator(priority, coroutineContext[Job]!!)\r\n\r\n        tryMutateOrCancel(mutator)\r\n\r\n        mutex.withLock {\r\n            try {\r\n                receiver.block()\r\n            } finally {\r\n                currentMutator.compareAndSet(mutator, null)\r\n            }\r\n        }\r\n    }\nImport(names=[androidx, compose, foundation, MutatePriority], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, coroutineScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, sync, withLock], wildcard=false, alias=null)" ],
  "QuickNovel/254" : [ "", "import com.fsck.k9.ui.R\nfun hideAttachmentLoadingDialogOnMainThread() {\r\n        runOnMainThread {\r\n            removeDialog(R.id.dialog_attachment_progress)\r\n        }\r\n    }\nimport com.fsck.k9.ui.R" ],
  "QuickNovel/256" : [ "return mapToSet(expectedSize = size, transform)\n--------------------------------------------------\n                val headerBytes = cursor.getBlob(0)\n                val lowercaseHeaderNames = headerNames?.mapToSet(headerNames.size) { it.lowercase() }\r\n", "inline fun <T, R> Iterable<T>.mapToSet(expectedSize: Int? = null, transform: (T) -> R): Set<R> {\r\n    return if (expectedSize != null) {\r\n        mapTo(LinkedHashSet(setCapacity(expectedSize)), transform)\r\n    } else {\r\n        mapTo(mutableSetOf(), transform)\r\n    }\r\n}" ],
  "Iconify/574" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "fcitx5-android/109" : [ "colorProvider.getThemeAccent(preferences.getInt(R.string.p_theme_accent, 1))\n--------------------------------------------------\n= ThemeAccent.ACCENTS.indices.map(this@ColorProvider::getThemeAccent)", "import org.tasks.R\nfun getThemeAccent(index: Int) = ThemeAccent(context, if (isDark && desaturate) {\r\n        ThemeAccent.ACCENTS_DESATURATED[index]\r\n    } else {\r\n        ThemeAccent.ACCENTS[index]\r\n    })\nimport org.tasks.R" ],
  "Iconify/570" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/660" : [ "alarmRepository.deleteAlarm(alarmId)\n--------------------------------------------------\n        if (completed) {\n            deleteAlarm(taskId)\r\n        }", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Alarm\noverride suspend fun deleteAlarm(id: Int) {\r\n        withContext(ioDispatcher) {\r\n            alarmDao.delete(id)\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/661" : [ "audioPlayer.bookmarkModel.addBookmark(this)\n--------------------------------------------------\nbookmarkModel.addBookmark(activity)\n--------------------------------------------------\nbookmarkModel.addBookmark(this)\n--------------------------------------------------\nit.addBookmark(playbackService.getTime())\n--------------------------------------------------\nit.addBookmark(service!!.getTime())", "import org.videolan.vlc.R\nimport org.videolan.medialibrary.interfaces.media.Bookmark\nimport org.videolan.medialibrary.Tools\nimport android.content.Context\nfun addBookmark(context: Context) {\r\n        if (service == null) return\r\n        service?.currentMediaWrapper?.let {\r\n            viewModelScope.launch {\r\n                withContext(Dispatchers.IO) {\r\n                    val bookmark = it.addBookmark(service!!.getTime())\r\n                    bookmark?.setName(context.getString(R.string.bookmark_default_name, Tools.millisToString(service!!.getTime())))\r\n                }\r\n                refresh()\r\n            }\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[org, videolan, medialibrary, Tools], wildcard=false, alias=null)" ],
  "Trail-Sense/662" : [ "{\r\n        return isValidZcashAddress(address)\r\n    }\n--------------------------------------------------\n{\r\n        return isValidTransparentAddress(address) || isValidShieldedAddress(address)\r\n    }", "import java.math.BigDecimal\noverride fun isValid(text: String?): Boolean {\r\n        if (text.isNullOrBlank()) return true\r\n\r\n        val parsed = text.toBigDecimalOrNull()\r\n        return parsed != null && parsed.scale() <= 2\r\n    }" ],
  "Trail-Sense/664" : [ "this.viewModel.outputs.showAlert()\n--------------------------------------------------\nshowAlert()", "private fun showAlert() {\r\n        if (this.isVisible)\r\n            dialog.show()\r\n    }" ],
  "Trail-Sense/665" : [ "payload.toBuilder()\n--------------------------------------------------\nthis.toBuilder()\n--------------------------------------------------\nactivity().toBuilder()\n--------------------------------------------------\nbacking().toBuilder()\n--------------------------------------------------\ncheckoutData(shippingAmount, totalAmount).toBuilder()\n--------------------------------------------------\nconfig().toBuilder()\n--------------------------------------------------\nmessageThreadEnvelope().toBuilder()\n--------------------------------------------------\nproject.toBuilder()\n--------------------------------------------------\nproject().toBuilder()\n--------------------------------------------------\nRewardFactory.reward().toBuilder()\n--------------------------------------------------\nRewardFactory.addOn().toBuilder()\n--------------------------------------------------\nRewardFactory.limitReached().toBuilder()\n--------------------------------------------------\nenabled().toBuilder()\n--------------------------------------------------\nreward().toBuilder()\n--------------------------------------------------\nrewardsItem().toBuilder()\n--------------------------------------------------\nItemFactory.item().toBuilder()\n--------------------------------------------------\ncreator().toBuilder()\n--------------------------------------------------\nupdate().toBuilder()\n--------------------------------------------------\nuser().toBuilder()\n--------------------------------------------------\nSurveyResponseFactory.surveyResponse().toBuilder()\n--------------------------------------------------\nprojectNotification.toBuilder()\n--------------------------------------------------\nProjectFactory.project().toBuilder()\n--------------------------------------------------\nlistOfComments[position].toBuilder()\n--------------------------------------------------\ntoBuilder().page(page + 1)\n--------------------------------------------------\nupdateTransformer(edge?.node()?.fragments()?.post()).toBuilder()\n--------------------------------------------------\ncommentTransformer(edge?.node()?.fragments()?.comment()).toBuilder()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder()\n--------------------------------------------------\nit.toBuilder()\n--------------------------------------------------\npledgeDataAndReason.first.projectData().toBuilder()\n--------------------------------------------------\npledgeDataAndReason.first.toBuilder()\n--------------------------------------------------\nparams.toBuilder()\n--------------------------------------------------\npledgeData.toBuilder()\n--------------------------------------------------\naddOn.toBuilder()\n--------------------------------------------------\nit.first.toBuilder()\n--------------------------------------------------\nit.second.toBuilder()\n--------------------------------------------------\nuser.toBuilder()\n--------------------------------------------------\ndrawerClickParams.params().toBuilder()\n--------------------------------------------------\np.toBuilder()\n--------------------------------------------------\nthis.userOutput.value.toBuilder()\n--------------------------------------------------\nnewUser.toBuilder()", "fun toBuilder() = Builder(\r\n        category = category,\r\n        commentId = commentId,\r\n        id = id,\r\n        projectId = projectId,\r\n        projectPhoto = projectPhoto,\r\n        userPhoto = userPhoto,\r\n        updateId = updateId\r\n    )" ],
  "Iconify/578" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/1500" : [ "@Override\r\npublic void onViewCreated(@NonNull View view, Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    butPlay.setOnClickListener(v -> {\r\n        if (controller == null) {\r\n            return;\r\n        }\r\n        if (controller.getMedia() != null && controller.getMedia().getMediaType() == MediaType.VIDEO && controller.getStatus() != PlayerStatus.PLAYING) {\r\n            controller.playPause();\r\n            getContext().startActivity(PlaybackService.getPlayerActivityIntent(getContext(), controller.getMedia()));\r\n        } else {\r\n            controller.playPause();\r\n        }\r\n    });\r\n    loadMediaInfo();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    EventBus.getDefault().register(this);\r\n}\n--------------------------------------------------\n", "import android.os.Bundle;\r\nimport android.view.View;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.os.Bundle\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    EventBus.getDefault().register(this);\r\n}" ],
  "Iconify/577" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1501" : [ "audioPagerAdapter.getPageTitle(i)\n--------------------------------------------------\ntab.text = getPageTitle(position)\n--------------------------------------------------\ntitle.text = getPageTitle(i)", "import org.videolan.vlc.R\nprivate fun getPageTitle(position: Int) = when (position) {\r\n        0 -> getString(R.string.videos)\r\n        else -> getString(R.string.playlists)\r\n    }" ],
  "Trail-Sense/667" : [ "tasksRepository.getTaskById(id)\n--------------------------------------------------\n            val task =\n                intent?.getIntExtra(Constants.TASK_ID_EXTRA, 0)?.let { getTaskByIdUseCase(it) }\r\n                    ?: kotlin.run {", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Task\noverride suspend fun getTaskById(id: Int): Task {\r\n        return withContext(ioDispatcher) {\r\n            taskDao.getTask(id)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Task], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/668" : [ "tasksRepository.getTaskById(id)\n--------------------------------------------------\n            val task =\n                intent?.getIntExtra(Constants.TASK_ID_EXTRA, 0)?.let { getTaskByIdUseCase(it) }\r\n                    ?: kotlin.run {", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Task\noverride suspend fun getTaskById(id: Int): Task {\r\n        return withContext(ioDispatcher) {\r\n            taskDao.getTask(id)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Task], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/1507" : [ "    // fragment may be added to the stack before its owner activity is created/visible.\n    view?.also { onViewCreated(it, null) }\r\n  }", "import com.github.ashutoshgngwr.noice.R\nimport androidx.navigation.NavController\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n    isCancelable = false\r\n    binding.lifecycleOwner = viewLifecycleOwner\r\n    binding.viewModel = viewModel\r\n    binding.okay.setOnClickListener {\r\n      dismiss()\r\n      mainNavController.navigate(R.id.subscription_purchases)\r\n    }\r\n\r\n    analyticsProvider?.setCurrentScreen(this::class)\r\n  }\nimport android.os.Bundle\nimport android.view.View\nimport androidx.navigation.NavController\nimport com.github.ashutoshgngwr.noice.R" ],
  "Trail-Sense/669" : [ "alarmRepository.deleteAlarm(alarmId)\n--------------------------------------------------\n        if (completed) {\n            deleteAlarm(taskId)\r\n        }", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Alarm\noverride suspend fun deleteAlarm(id: Int) {\r\n        withContext(ioDispatcher) {\r\n            alarmDao.delete(id)\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/1508" : [ "listener.onLongClick(adapterPosition)", "import com.omgodse.notally.room.BaseNote\noverride fun onLongClick(position: Int) {\r\n        if (position != -1) {\r\n            adapter?.currentList?.get(position)?.let { item ->\r\n                if (item is BaseNote) {\r\n                    handleNoteSelection(item.id, position, item)\r\n                }\r\n            }\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, room, BaseNote], wildcard=false, alias=null)" ],
  "Trail-Sense/1509" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "QuickNovel/268" : [ "it.toHtml()", "import com.kickstarter.R\nimport android.text.TextUtils\nimport android.text.Spanned\nimport android.text.Html\nimport android.os.Build\nfun String.toHtml(): Spanned {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        Html.fromHtml(TextUtils.htmlEncode(this), Html.FROM_HTML_MODE_LEGACY)\r\n    } else {\r\n        Html.fromHtml(TextUtils.htmlEncode(this))\r\n    }\r\n}\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[android, text, Html], wildcard=false, alias=null)\nImport(names=[android, text, Spanned], wildcard=false, alias=null)" ],
  "QuickNovel/264" : [ "                conflictingHash = null,\n                showRawTransaction = false,\r\n                amount = transaction.value.convertZatoshiToZec(decimalCount),\n--------------------------------------------------\n                conflictingHash = null,\n                showRawTransaction = false,\r\n                amount = transaction.value.convertZatoshiToZec(decimalCount).negate(),\n--------------------------------------------------\nToast.makeText(App.instance, \"Wallet is Null\", Toast.LENGTH_SHORT).show()\n--------------------------------------------------\ninvalidUrlBottomSheetState.show()", "import io.horizontalsystems.bankwallet.modules.market.ImageSource\nimport androidx.fragment.app.FragmentManager\nimport android.view.View\nfun show(\r\n            fragmentManager: FragmentManager,\r\n            title: String,\r\n            icon: ImageSource,\r\n            items: List<BottomSheetSelectorViewItem>,\r\n            selected: List<Int>,\r\n            onItemSelected: (List<Int>) -> Unit,\r\n            onCancelled: (() -> Unit)? = null,\r\n            warningTitle: String? = null,\r\n            warning: String? = null,\r\n            notifyUnchanged: Boolean = false,\r\n            allowEmpty: Boolean\r\n        ) {\r\n            BottomSheetSelectorMultipleDialog(\r\n                title,\r\n                icon,\r\n                items,\r\n                selected,\r\n                onItemSelected,\r\n                onCancelled,\r\n                warningTitle,\r\n                warning,\r\n                notifyUnchanged,\r\n                allowEmpty\r\n            )\r\n                .show(fragmentManager, \"selector_dialog\")\r\n        }\nimport android.view.View\nimport androidx.fragment.app.FragmentManager\nimport io.horizontalsystems.bankwallet.modules.market.ImageSource" ],
  "QuickNovel/265" : [ "LocaleUtil.getLocaleName(value)\n--------------------------------------------------\nLocaleUtil.getLocaleName(track.language)", "import java.util.Locale\nfun getLocaleName(from: String): String {\r\n        vlcLocaleList.forEach {\r\n            if (it.language == from) return toTranslatedLanguage(it)\r\n            it.values.forEach { sub ->\r\n                if (sub == from) return toTranslatedLanguage(it)\r\n            }\r\n        }\r\n        return from\r\n    }" ],
  "QuickNovel/266" : [ "{\n        val overrideLocale = getOverrideLocaleForLanguage(appLanguage)\r\n        currentOverrideLocale = overrideLocale", "import java.util.Locale\nprivate fun getOverrideLocaleForLanguage(appLanguage: String): Locale? {\r\n        return if (appLanguage.isEmpty()) {\r\n            null\r\n        } else if (appLanguage.length == 5 && appLanguage[2] == '_') {\r\n            // language is in the form: en_US\r\n            val language = appLanguage.substring(0, 2)\r\n            val country = appLanguage.substring(3)\r\n            Locale(language, country)\r\n        } else {\r\n            Locale(appLanguage)\r\n        }\r\n    }\nimport java.util.Locale" ],
  "QuickNovel/267" : [ "LocaleUtil.getLocaleName(value)\n--------------------------------------------------\nLocaleUtil.getLocaleName(track.language)", "import java.util.Locale\nfun getLocaleName(from: String): String {\r\n        vlcLocaleList.forEach {\r\n            if (it.language == from) return toTranslatedLanguage(it)\r\n            it.values.forEach { sub ->\r\n                if (sub == from) return toTranslatedLanguage(it)\r\n            }\r\n        }\r\n        return from\r\n    }" ],
  "Iconify/101" : [ "@Override\r\nprotected synchronized void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n    super.onSizeChanged(h, w, oldh, oldw);\r\n    this.x = w;\r\n    this.y = h;\r\n    this.z = oldw;\r\n    this.w = oldh;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    if (!isEnabled()) {\r\n        return false;\r\n    }\r\n    switch(event.getAction()) {\r\n        case MotionEvent.ACTION_DOWN:\r\n            setSelected(true);\r\n            setPressed(true);\r\n            if (changeListener != null) {\r\n                changeListener.onStartTrackingTouch(this);\r\n            }\r\n            break;\r\n        case MotionEvent.ACTION_UP:\r\n            setSelected(false);\r\n            setPressed(false);\r\n            if (changeListener != null) {\r\n                changeListener.onStopTrackingTouch(this);\r\n            }\r\n            break;\r\n        case MotionEvent.ACTION_MOVE:\r\n            int progress = getMax() - (int) (getMax() * event.getY() / getHeight());\r\n            setProgress(progress);\r\n            onSizeChanged(getWidth(), getHeight(), 0, 0);\r\n            if (changeListener != null) {\r\n                changeListener.onProgressChanged(this, progress, true);\r\n            }\r\n            break;\r\n        case MotionEvent.ACTION_CANCEL:\r\n            break;\r\n    }\r\n    return true;\r\n}\n--------------------------------------------------\n", "@Override\r\nprotected synchronized void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n    super.onSizeChanged(h, w, oldh, oldw);\r\n    this.x = w;\r\n    this.y = h;\r\n    this.z = oldw;\r\n    this.w = oldh;\r\n}" ],
  "Iconify/102" : [ "SimpleSQLiteQuery.bind(statement, whereArgs)\n--------------------------------------------------\nSimpleSQLiteQuery.bind(stmt, bindArgs)", " @JvmStatic\r\n        fun bind(\r\n            statement: SupportSQLiteProgram,\r\n            @Suppress(\"ArrayReturn\") // Due to legacy API\r\n            bindArgs: Array<out Any?>?\r\n        ) {\r\n            if (bindArgs == null) {\r\n                return\r\n            }\r\n\r\n            val limit = bindArgs.size\r\n            for (i in 0 until limit) {\r\n                val arg = bindArgs[i]\r\n                bind(statement, i + 1, arg)\r\n            }\r\n        }" ],
  "Iconify/585" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Iconify/100" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/581" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/580" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/673" : [ "", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport com.omgodse.notally.room.Image\nimport com.omgodse.notally.miscellaneous.IO\nimport android.content.Intent\nimport android.content.Context\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        if (intent != null) {\r\n            val list = requireNotNull(intent.getParcelableArrayListExtra<Image>(EXTRA_IMAGES))\r\n            scope.launch {\r\n                withContext(Dispatchers.IO) {\r\n                    channel.send(list)\r\n                }\r\n            }\r\n        }\r\n        return START_NOT_STICKY\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/108" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/105" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Trail-Sense/1513" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Trail-Sense/1514" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "Iconify/106" : [ "R.id.cab_add_to_group -> addToGroup()", "import com.simplemobiletools.contacts.pro.R\nimport com.simplemobiletools.commons.models.RadioItem\nprivate fun addToGroup() {\r\n        val items = ArrayList<RadioItem>()\r\n        ContactsHelper(activity).getStoredGroups {\r\n            it.forEach {\r\n                items.add(RadioItem(it.id!!.toInt(), it.title))\r\n            }\r\n            items.add(RadioItem(NEW_GROUP_ID, activity.getString(R.string.create_new_group)))\r\n            showGroupsPicker(items)\r\n        }\r\n    }" ],
  "Iconify/589" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/1511" : [ "= publish(filteringJob(charSequence))", "private fun publish(list: MutableList<T>?) {\r\n        sourceSet?.let {\r\n            if (list !== null)\r\n                dataset.value = list\r\n            else {\r\n                dataset.value = it\r\n                sourceSet = null\r\n            }\r\n        }\r\n    }" ],
  "Iconify/588" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1515" : [ "kit.refresh()\n--------------------------------------------------\n{\r\n        eip20Kit.refresh()\r\n    }\n--------------------------------------------------\nit.refresh()\n--------------------------------------------------\nevmBlockchainManager.getEvmKitManager(blockchain.type).evmKitWrapper?.evmKit?.refresh()\n--------------------------------------------------\nbinanceKitManager.binanceKit?.refresh()\n--------------------------------------------------\nsolanaKitManager.solanaKitWrapper?.solanaKit?.refresh()\n--------------------------------------------------\ntronKitManager.tronKitWrapper?.tronKit?.refresh()\n--------------------------------------------------\nadaptersMap[wallet]?.refresh()\n--------------------------------------------------\nadapterManager.refresh()\n--------------------------------------------------\nrefresh()\n--------------------------------------------------\nservice.refresh()\n--------------------------------------------------\nviewModel.refresh()\n--------------------------------------------------\nnftMetadataSyncer.refresh()\n--------------------------------------------------\nMarketWidgetManager().refresh(glanceId)\n--------------------------------------------------\nrefresh(glanceId)\n--------------------------------------------------\nmarketWidgetManager.refresh(glanceId)", "fun refresh() {\r\n        stop()\r\n        start()\r\n    }" ],
  "Trail-Sense/1516" : [ "kit.refresh()\n--------------------------------------------------\n{\r\n        eip20Kit.refresh()\r\n    }\n--------------------------------------------------\nit.refresh()\n--------------------------------------------------\nevmBlockchainManager.getEvmKitManager(blockchain.type).evmKitWrapper?.evmKit?.refresh()\n--------------------------------------------------\nbinanceKitManager.binanceKit?.refresh()\n--------------------------------------------------\nsolanaKitManager.solanaKitWrapper?.solanaKit?.refresh()\n--------------------------------------------------\ntronKitManager.tronKitWrapper?.tronKit?.refresh()\n--------------------------------------------------\nadaptersMap[wallet]?.refresh()\n--------------------------------------------------\nadapterManager.refresh()\n--------------------------------------------------\nrefresh()\n--------------------------------------------------\nservice.refresh()\n--------------------------------------------------\nviewModel.refresh()\n--------------------------------------------------\nnftMetadataSyncer.refresh()\n--------------------------------------------------\nMarketWidgetManager().refresh(glanceId)\n--------------------------------------------------\nrefresh(glanceId)\n--------------------------------------------------\nmarketWidgetManager.refresh(glanceId)", "fun refresh() {\r\n        stop()\r\n        start()\r\n    }" ],
  "QuickNovel/279" : [ "UiTools.getResourceFromAttribute(requireActivity(), R.attr.background_default)\n--------------------------------------------------\nUiTools.getResourceFromAttribute(activity, R.attr.ic_passthrough)\n--------------------------------------------------\ngetResourceFromAttribute(context, attrId)\n--------------------------------------------------\nUiTools.getResourceFromAttribute(this, R.attr.actionBarSize)", "import org.videolan.vlc.R\nimport android.content.Context\nfun getResourceFromAttribute(context: Context, attrId: Int): Int {\r\n        val a = context.theme.obtainStyledAttributes(intArrayOf(attrId))\r\n        val resId = a.getResourceId(0, 0)\r\n        a.recycle()\r\n        return resId\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "QuickNovel/275" : [ "        is ImageSource.Local -> setImageResource(imageSource.resId)\n        is ImageSource.Remote -> setRemoteImage(imageSource.url, imageSource.placeholder)\r\n    }", "import io.horizontalsystems.bankwallet.R\nimport coil.load\nimport android.widget.ImageView\nfun ImageView.setRemoteImage(url: String, placeholder: Int? = R.drawable.ic_placeholder) {\r\n    load(url) {\r\n        if (placeholder != null) {\r\n            error(placeholder)\r\n        }\r\n    }\r\n}\nimport android.widget.ImageView\nimport coil.load\nimport io.horizontalsystems.bankwallet.R" ],
  "QuickNovel/276" : [ "val files = listBackupFiles()", "import java.io.File\nprivate fun listBackupFiles(): ArrayList<File> {\r\n        val files = ArrayList<File>()\r\n        for (path in basedir.list()!!) {\r\n            files.add(File(\"${basedir.path}/$path\"))\r\n        }\r\n        return files\r\n    }" ],
  "QuickNovel/278" : [ "", "import androidx.databinding.BindingAdapter\n\r\n@BindingAdapter(\"selectedPadding\")\r\nfun selectedPadding(v: View, isSelected: Boolean?) {\r\n    val padding = if (isSelected == true) 16.dp else 0.dp\r\n    v.setPadding(padding, padding, padding, padding)\r\n}" ],
  "Android-Password-Store/163" : [ "\n        this.viewModel.outputs.showCancelPledgeFragment()\r\n            .observeOn(AndroidSchedulers.mainThread())\n--------------------------------------------------\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribe { showCancelPledgeFragment(it) }\r\n            .addToDisposable(disposables)", "import com.kickstarter.ui.fragments.PledgeFragment\nimport com.kickstarter.ui.fragments.CancelPledgeFragment\nimport com.kickstarter.models.Project\nimport com.kickstarter.R\nimport androidx.fragment.app.FragmentManager\nprivate fun showCancelPledgeFragment(project: Project) {\r\n        val cancelPledgeFragment = CancelPledgeFragment.newInstance(project)\r\n        val tag = CancelPledgeFragment::class.java.simpleName\r\n        supportFragmentManager\r\n            .beginTransaction()\r\n            .setCustomAnimations(R.anim.slide_in_right, 0, 0, R.anim.slide_out_right)\r\n            .add(R.id.fragment_container, cancelPledgeFragment, tag)\r\n            .addToBackStack(tag)\r\n            .commit()\r\n    }\nimport androidx.fragment.app.FragmentManager\nimport com.kickstarter.R\nimport com.kickstarter.models.Project\nimport com.kickstarter.ui.fragments.CancelPledgeFragment\nimport com.kickstarter.ui.fragments.PledgeFragment" ],
  "MaterialFiles/404" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/282" : [ "                        }\n                        hideKeyboard()\r\n                        transaction\n--------------------------------------------------\n{\n        activity?.hideKeyboard()\r\n        if (item.itemId == R.id.menu_delete) {\n--------------------------------------------------\nhideKeyboard(name)\n--------------------------------------------------\nhideKeyboard(binding.name)\n--------------------------------------------------\nhideKeyboard(it)\n--------------------------------------------------\nactivity.hideKeyboard(commentField)", "import org.tasks.extensions.Context.hideKeyboard\nimport android.app.Activity\nfun Activity.hideKeyboard() {\r\n    currentFocus?.let {\r\n        hideKeyboard(it)\r\n    }\r\n}\nImport(names=[android, app, Activity], wildcard=false, alias=null)\nImport(names=[org, tasks, extensions, Context, hideKeyboard], wildcard=false, alias=null)" ],
  "Android-Password-Store/164" : [ "/**\r\n * Pass a new PagedList to the differ.\r\n * <p>\r\n * If a PagedList is already present, a diff will be computed asynchronously on a background\r\n * thread. When the diff is computed, it will be applied (dispatched to the\r\n * {@link ListUpdateCallback}), and the new PagedList will be swapped in as the\r\n * {@link #getCurrentList() current list}.\r\n * <p>\r\n * The commit callback can be used to know when the PagedList is committed, but note that it\r\n * may not be executed. If PagedList B is submitted immediately after PagedList A, and is\r\n * committed directly, the callback associated with PagedList A will not be run.\r\n *\r\n * @param pagedList The new PagedList.\r\n * @param commitCallback Optional runnable that is executed when the PagedList is committed, if\r\n *                       it is committed.\r\n */\r\n@SuppressWarnings(\"ReferenceEquality\")\r\npublic void submitList(@Nullable final PagedList<T> pagedList, @Nullable final Runnable commitCallback) {\r\n    if (pagedList != null) {\r\n        if (mPagedList == null && mSnapshot == null) {\r\n            mIsContiguous = pagedList.isContiguous();\r\n        } else {\r\n            if (pagedList.isContiguous() != mIsContiguous) {\r\n                throw new IllegalArgumentException(\"AsyncPagedListDiffer cannot handle both\" + \" contiguous and non-contiguous lists.\");\r\n            }\r\n        }\r\n    }\r\n    // incrementing generation means any currently-running diffs are discarded when they finish\r\n    final int runGeneration = ++mMaxScheduledGeneration;\r\n    if (pagedList == mPagedList) {\r\n        // nothing to do (Note - still had to inc generation, since may have ongoing work)\r\n        if (commitCallback != null) {\r\n            commitCallback.run();\r\n        }\r\n        return;\r\n    }\r\n    final PagedList<T> previous = (mSnapshot != null) ? mSnapshot : mPagedList;\r\n    if (pagedList == null) {\r\n        int removedCount = getItemCount();\r\n        if (mPagedList != null) {\r\n            mPagedList.removeWeakCallback(mPagedListCallback);\r\n            mPagedList = null;\r\n        } else if (mSnapshot != null) {\r\n            mSnapshot = null;\r\n        }\r\n        // dispatch update callback after updating mPagedList/mSnapshot\r\n        mUpdateCallback.onRemoved(0, removedCount);\r\n        onCurrentListChanged(previous, null, commitCallback);\r\n        return;\r\n    }\r\n    if (mPagedList == null && mSnapshot == null) {\r\n        // fast simple first insert\r\n        mPagedList = pagedList;\r\n        pagedList.addWeakCallback(null, mPagedListCallback);\r\n        // dispatch update callback after updating mPagedList/mSnapshot\r\n        mUpdateCallback.onInserted(0, pagedList.size());\r\n        onCurrentListChanged(null, pagedList, commitCallback);\r\n        return;\r\n    }\r\n    if (mPagedList != null) {\r\n        // first update scheduled on this list, so capture mPages as a snapshot, removing\r\n        // callbacks so we don't have resolve updates against a moving target\r\n        mPagedList.removeWeakCallback(mPagedListCallback);\r\n        mSnapshot = (PagedList<T>) mPagedList.snapshot();\r\n        mPagedList = null;\r\n    }\r\n    if (mSnapshot == null || mPagedList != null) {\r\n        throw new IllegalStateException(\"must be in snapshot state to diff\");\r\n    }\r\n    final PagedList<T> oldSnapshot = mSnapshot;\r\n    final PagedList<T> newSnapshot = (PagedList<T>) pagedList.snapshot();\r\n    mConfig.getBackgroundThreadExecutor().execute(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            final DiffUtil.DiffResult result;\r\n            result = PagedStorageDiffHelper.computeDiff(oldSnapshot.mStorage, newSnapshot.mStorage, mConfig.getDiffCallback());\r\n            mMainThreadExecutor.execute(new Runnable() {\r\n\r\n                @Override\r\n                public void run() {\r\n                    if (mMaxScheduledGeneration == runGeneration) {\r\n                        latchPagedList(pagedList, newSnapshot, result, oldSnapshot.mLastLoad, commitCallback);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\n--------------------------------------------------\nprivate void onCurrentListChanged(@Nullable PagedList<T> previousList, @Nullable PagedList<T> currentList, @Nullable Runnable commitCallback) {\r\n    for (PagedListListener<T> listener : mListeners) {\r\n        listener.onCurrentListChanged(previousList, currentList);\r\n    }\r\n    if (commitCallback != null) {\r\n        commitCallback.run();\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.lifecycle.Lifecycle\n@Override\r\npublic void run() {\r\n    if (!getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.STARTED))\r\n        return;\r\n    dview.scrollTo(0, tvOwner.getBottom());\r\n}" ],
  "Trail-Sense/280" : [ "discoveryParams.category()?.isRoot.isTrue()\n--------------------------------------------------\ndiscoveryParams.staffPicks().isTrue()\n--------------------------------------------------\ndiscoveryParams.isAllProjects.isTrue()\n--------------------------------------------------\ndiscoveryParams.recommended().isTrue()\n--------------------------------------------------\nparams.isAllProjects.isTrue()\n--------------------------------------------------\nparams.staffPicks().isTrue()\n--------------------------------------------------\nparams.recommended()?.isTrue()\n--------------------------------------------------\nproject.prelaunchActivated().isTrue()\n--------------------------------------------------\nthis.staffPicks().isTrue()\n--------------------------------------------------\nstaffPicks().isTrue()\n--------------------------------------------------\nrecommended().isTrue()\n--------------------------------------------------\n(starred() != null && starred() == 1).isTrue()\n--------------------------------------------------\nuser.alumniNewsletter().isTrue()\n--------------------------------------------------\nuser.artsCultureNewsletter().isTrue()\n--------------------------------------------------\nuser.filmNewsletter().isTrue()\n--------------------------------------------------\nuser.gamesNewsletter().isTrue()\n--------------------------------------------------\nuser.happeningNewsletter().isTrue()\n--------------------------------------------------\nuser.inventNewsletter().isTrue()\n--------------------------------------------------\nuser.musicNewsletter().isTrue()\n--------------------------------------------------\nuser.promoNewsletter().isTrue()\n--------------------------------------------------\nuser.weeklyNewsletter().isTrue()\n--------------------------------------------------\nuser.publishingNewsletter().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfMarketingUpdate().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfBackings().isTrue()\n--------------------------------------------------\nuser.notifyOfBackings().isTrue()\n--------------------------------------------------\nuser.notifyOfCreatorDigest().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfComments().isTrue()\n--------------------------------------------------\nuser.notifyOfComments().isTrue()\n--------------------------------------------------\nuser.notifyOfCommentReplies().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfCreatorEdu().isTrue()\n--------------------------------------------------\nuser.notifyOfCreatorEdu().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfFollower().isTrue()\n--------------------------------------------------\nuser.notifyOfFollower().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfFriendActivity().isTrue()\n--------------------------------------------------\nuser.notifyOfFriendActivity().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfMessages().isTrue()\n--------------------------------------------------\nuser.notifyOfMessages().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfPostLikes().isTrue()\n--------------------------------------------------\nuser.notifyMobileOfUpdates().isTrue()\n--------------------------------------------------\nuser.notifyOfUpdates().isTrue()\n--------------------------------------------------\nuser.social().isTrue()\n--------------------------------------------------\n(data as? Boolean?).isTrue()\n--------------------------------------------------\nthis.inset.isTrue()\n--------------------------------------------------\nit.isTrue()\n--------------------------------------------------\nbool.isTrue()\n--------------------------------------------------\nit.second.isTrue()\n--------------------------------------------------\nit.requiresAction().isTrue()\n--------------------------------------------------\nlaunchDateAndIsCreator.second.isTrue()", "fun Boolean?.isTrue(): Boolean {\r\n    return when (this) {\r\n        null -> false\r\n        true -> true\r\n        false -> false\r\n    }\r\n}" ],
  "QuickNovel/284" : [ "", "import org.isoron.uhabits.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onMove(\r\n            recyclerView: RecyclerView,\r\n            from: ViewHolder,\r\n            to: ViewHolder\r\n        ): Boolean {\r\n            controller.get().drop(from.adapterPosition, to.adapterPosition)\r\n            return true\r\n        }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, R], wildcard=false, alias=null)" ],
  "Android-Password-Store/166" : [ "@Override\r\nprotected void onExecuted(Bundle args, List<Announcement> announcements) {\r\n    boolean always = args.getBoolean(\"always\");\r\n    NotificationManager nm = Helper.getSystemService(ActivityView.this, NotificationManager.class);\r\n    if (!NotificationHelper.areNotificationsEnabled(nm))\r\n        return;\r\n    SharedPreferences.Editor editor = prefs.edit();\r\n    for (Announcement announcement : announcements) {\r\n        String key = \"announcement.\" + announcement.id;\r\n        if (announcement.isExpired()) {\r\n            editor.remove(key);\r\n            nm.cancel(announcement.id);\r\n        } else {\r\n            boolean notified = prefs.getBoolean(key, false);\r\n            if (notified && !always)\r\n                continue;\r\n            editor.putBoolean(key, true);\r\n            NotificationCompat.Builder builder = new NotificationCompat.Builder(ActivityView.this, \"announcements\").setSmallIcon(R.drawable.baseline_campaign_white_24).setContentTitle(announcement.title).setContentText(announcement.text).setAutoCancel(true).setShowWhen(true).setPriority(NotificationCompat.PRIORITY_DEFAULT).setCategory(NotificationCompat.CATEGORY_RECOMMENDATION).setVisibility(NotificationCompat.VISIBILITY_SECRET).setStyle(new NotificationCompat.BigTextStyle().bigText(announcement.text));\r\n            if (announcement.link != null) {\r\n                Intent link = new Intent(Intent.ACTION_VIEW, announcement.link).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                PendingIntent piLink = PendingIntentCompat.getActivity(ActivityView.this, PI_ANNOUNCEMENT, link, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                builder.setContentIntent(piLink);\r\n            }\r\n            Intent manage = new Intent(ActivityView.this, ActivitySetup.class).setAction(\"misc\").addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK).putExtra(\"tab\", \"misc\");\r\n            PendingIntent piManage = PendingIntentCompat.getActivity(ActivityView.this, ActivitySetup.PI_MISC, manage, PendingIntent.FLAG_UPDATE_CURRENT);\r\n            NotificationCompat.Action.Builder actionManage = new NotificationCompat.Action.Builder(R.drawable.twotone_settings_24, getString(R.string.title_setup_manage), piManage);\r\n            builder.addAction(actionManage.build());\r\n            nm.notify(announcement.id, builder.build());\r\n        }\r\n    }\r\n    editor.apply();\r\n}\n--------------------------------------------------\nprivate void bindTo(EntityCertificate certificate) {\r\n    tvEmail.setText(certificate.email);\r\n    ivIntermediate.setVisibility(certificate.intermediate ? View.VISIBLE : View.INVISIBLE);\r\n    tvSubject.setText(certificate.subject);\r\n    tvAfter.setText(certificate.after == null ? null : TF.format(certificate.after));\r\n    tvBefore.setText(certificate.before == null ? null : TF.format(certificate.before));\r\n    tvExpired.setVisibility(certificate.isExpired() ? View.VISIBLE : View.GONE);\r\n}\n--------------------------------------------------\n", "import java.security.cert.CertificateExpiredException;\r\nimport java.security.cert.CertificateExpiredException\nprivate boolean isExpired(Throwable ex) {\r\n    while (ex != null) {\r\n        if (ex instanceof CertificateExpiredException)\r\n            return true;\r\n        ex = ex.getCause();\r\n    }\r\n    return false;\r\n}" ],
  "MaterialFiles/405" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/282" : [ "factory.detailViewItems(result.data)", "import io.horizontalsystems.bankwallet.modules.coin.technicalindicators.TechnicalIndicatorsDetailsModule.SectionViewItem\nimport io.horizontalsystems.bankwallet.modules.coin.technicalindicators.TechnicalIndicatorsDetailsModule.DetailViewItem\nfun detailViewItems(items: List<TechnicalIndicatorService.SectionItem>): List<SectionViewItem> {\r\n        return items.map { item ->\r\n            SectionViewItem(\r\n                item.name,\r\n                item.items.map {\r\n                    DetailViewItem(it.name, it.advice)\r\n                }\r\n            )\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, modules, coin, technicalindicators, TechnicalIndicatorsDetailsModule, DetailViewItem], wildcard=false, alias=null)\nImport(names=[io, horizontalsystems, bankwallet, modules, coin, technicalindicators, TechnicalIndicatorsDetailsModule, SectionViewItem], wildcard=false, alias=null)" ],
  "MaterialFiles/407" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        val crumbs = copy()\r\n        writer.beginArray()\r\n        crumbs.forEach { it.toStream(writer) }\r\n        writer.endArray()\r\n    }" ],
  "Android-Password-Store/161" : [ "", "fun setControlsEnabled(enabled: Boolean) {\r\n    isEnabled = enabled\r\n    buttons.forEach { it.isEnabled = enabled }\r\n  }" ],
  "Trail-Sense/284" : [ "database.getBaseNoteDao().updateChecked(noteId, position, checked)", "suspend fun updateChecked(id: Long, position: Int, checked: Boolean) {\r\n        val items = requireNotNull(get(id)).items\r\n        items[position].checked = checked\r\n        updateItems(id, items)\r\n    }" ],
  "MaterialFiles/409" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        val crumbs = copy()\r\n        writer.beginArray()\r\n        crumbs.forEach { it.toStream(writer) }\r\n        writer.endArray()\r\n    }" ],
  "QuickNovel/281" : [ "super.onClick(v)", "import org.koin.core.component.get\nimport code.name.monkey.retromusic.R\nimport androidx.appcompat.widget.PopupMenu\nimport android.view.View\nimport android.view.MenuItem\noverride fun onClick(v: View) {\n            val popupMenu = PopupMenu(activity, v)\n            popupMenu.inflate(menuRes)\n            popupMenu.setOnMenuItemClickListener(this)\n            popupMenu.show()\n        }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, appcompat, widget, PopupMenu], wildcard=false, alias=null)" ],
  "Trail-Sense/286" : [ "auditorItems(auditors)", "import io.horizontalsystems.marketkit.models.Auditor\nimport io.horizontalsystems.bankwallet.modules.market.sortedByDescendingNullLast\nimport io.horizontalsystems.bankwallet.modules.coin.audits.CoinAuditsModule.AuditorItem\nimport io.horizontalsystems.bankwallet.core.logoUrl\nprivate fun auditorItems(auditors: List<Auditor>): List<AuditorItem> {\r\n        val auditorItems = auditors.map { auditor ->\r\n            val sortedReports = auditor.reports.sortedByDescendingNullLast { it.date }\r\n            AuditorItem(auditor.name, auditor.logoUrl, sortedReports, sortedReports.firstOrNull()?.date)\r\n        }\r\n        return auditorItems.sortedByDescendingNullLast { it.latestDate }\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, modules, coin, audits, CoinAuditsModule, AuditorItem], wildcard=false, alias=null)\nImport(names=[io, horizontalsystems, bankwallet, modules, market, sortedByDescendingNullLast], wildcard=false, alias=null)\nImport(names=[io, horizontalsystems, marketkit, models, Auditor], wildcard=false, alias=null)" ],
  "Trail-Sense/288" : [ "player.service?.playlistManager?.setDelayValue(System.currentTimeMillis(), true)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(-1L, true)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(System.currentTimeMillis(), false)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(-1L, false)", "fun setDelayValue(time: Long, start: Boolean) {\r\n        val value = delayValue.value ?: DelayValues()\r\n        if (start) value.start = time else value.stop = time\r\n        delayValue.value = value\r\n    }" ],
  "MaterialFiles/400" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/402" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/401" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/97" : [ "jsonObject.getSafeBoolean(\"bold\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"link\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"italic\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"monospace\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"strikethrough\")", "import org.json.JSONObject\nimport org.json.JSONException\nprivate fun JSONObject.getSafeBoolean(name: String): Boolean {\r\n        return try {\r\n            getBoolean(name)\r\n        } catch (exception: JSONException) {\r\n            false\r\n        }\r\n    }\nImport(names=[org, json, JSONException], wildcard=false, alias=null)\nImport(names=[org, json, JSONObject], wildcard=false, alias=null)" ],
  "Iconify/98" : [ "jsonObject.getSafeBoolean(\"bold\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"link\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"italic\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"monospace\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"strikethrough\")", "import org.json.JSONObject\nimport org.json.JSONException\nprivate fun JSONObject.getSafeBoolean(name: String): Boolean {\r\n        return try {\r\n            getBoolean(name)\r\n        } catch (exception: JSONException) {\r\n            false\r\n        }\r\n    }\nImport(names=[org, json, JSONException], wildcard=false, alias=null)\nImport(names=[org, json, JSONObject], wildcard=false, alias=null)" ],
  "Iconify/95" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    controller.release();\r\n    controller = null;\r\n}\n--------------------------------------------------\n", "import de.danoeh.antennapod.core.util.playback.PlaybackController;\r\nimport de.danoeh.antennapod.core.util.playback.PlaybackController\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    controller = new PlaybackController(getActivity()) {\r\n\r\n        @Override\r\n        public void loadMediaInfo() {\r\n            setupAudioTracks();\r\n        }\r\n    };\r\n    controller.init();\r\n}" ],
  "Iconify/96" : [ "", "import androidx.lifecycle.LifecycleOwner\noverride fun onStop(owner: LifecycleOwner) {\r\n        if (!viewModel.notificationHelper.allowBackgroundAudio) {\r\n            viewModel.pause()\r\n        }\r\n    }\nImport(names=[androidx, lifecycle, LifecycleOwner], wildcard=false, alias=null)" ],
  "Iconify/99" : [ "", "import org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        childFragmentManager.setFilterPickerResultListener(this) {\r\n            filter = it\r\n            refreshPreferences()\r\n        }\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Iconify/93" : [ "@Override\r\npublic void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\r\n    inflater.inflate(R.menu.menu_about, menu);\r\n    super.onCreateOptionsMenu(menu, inflater);\r\n}\n--------------------------------------------------\n@Override\r\npublic void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\r\n    inflater.inflate(R.menu.menu_account, menu);\r\n    super.onCreateOptionsMenu(menu, inflater);\r\n}\n--------------------------------------------------\n", "import android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuInflater\nimport android.view.Menu\n@Override\r\npublic void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\r\n    inflater.inflate(R.menu.menu_account, menu);\r\n    super.onCreateOptionsMenu(menu, inflater);\r\n}" ],
  "QuickNovel/286" : [ "", "import android.view.View;\r\nimport android.widget.AbsListView;\r\nimport android.widget.ListView;\r\nimport android.widget.ListView\nimport android.widget.AbsListView\nimport android.view.View\n/**\r\n * Updates the title and selected month if the view has moved to a new\r\n * month.\r\n */\r\n@Override\r\npublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\r\n    MonthView child = (MonthView) view.getChildAt(0);\r\n    if (child == null) {\r\n        return;\r\n    }\r\n    // Figure out where we are\r\n    long currScroll = view.getFirstVisiblePosition() * child.getHeight() - child.getBottom();\r\n    mPreviousScrollPosition = currScroll;\r\n    mPreviousScrollState = mCurrentScrollState;\r\n}" ],
  "Android-Password-Store/167" : [ "getTransactionValueEvents(transaction) + getOutgoingEip20Events(outgoingEip20Transfers)\n--------------------------------------------------\ngetTransactionValueEvents(decoration) + getOutgoingEip20Events(outgoingEip20Transfers)", "import java.math.BigInteger\nimport io.horizontalsystems.ethereumkit.models.Transaction\nimport io.horizontalsystems.bankwallet.entities.transactionrecords.evm.TransferEvent\nimport io.horizontalsystems.bankwallet.entities.TransactionValue\nprivate fun getTransactionValueEvents(transaction: Transaction): List<TransferEvent> {\r\n        val value = transaction.value\r\n        if (value == null || value <= BigInteger.ZERO) return listOf()\r\n\r\n        return listOf(\r\n            TransferEvent(transaction.to?.eip55, baseCoinValue(value, true))\r\n        )\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, entities, transactionrecords, evm, TransferEvent], wildcard=false, alias=null)\nImport(names=[io, horizontalsystems, ethereumkit, models, Transaction], wildcard=false, alias=null)\nImport(names=[java, math, BigInteger], wildcard=false, alias=null)" ],
  "Iconify/94" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == R.id.menu_clear_uploads) {\r\n        clearUploadsButtonClick.onClick(null);\r\n    } else if (id == R.id.menu_upload_workouts) {\r\n        uploadButtonClick.onClick(null);\r\n    } else if (id == R.id.menu_disconnect_account) {\r\n        disconnectButtonClick.onClick(null);\r\n    } else if (id == android.R.id.home) {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n    return true;\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport org.runnerup.R;\r\nimport org.runnerup.R\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == R.id.menu_hrzonessettings_clear) {\r\n        clearHRSettings();\r\n    } else if (id == android.R.id.home) {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n    return true;\r\n}" ],
  "QuickNovel/287" : [ "val url = getURL(start, end)", "import com.omgodse.notally.activities.TakeNote\nprivate fun String.getURL(start: Int, end: Int): String {\r\n    return if (end <= length) {\r\n        TakeNote.getURLFrom(substring(start, end))\r\n    } else TakeNote.getURLFrom(substring(start, length))\r\n}\nImport(names=[com, omgodse, notally, activities, TakeNote], wildcard=false, alias=null)" ],
  "QuickNovel/288" : [ "            }\n            return if (!TextUtils.isEmpty(address.personal) && !isSpoofAddress(address.personal)) {\r\n                address.personal\n--------------------------------------------------\n        return address.personal?.takeIf {\n            it.isNotBlank() && !it.equals(meText, ignoreCase = true) && !isSpoofAddress(it)\r\n        } ?: address.address", "import com.fsck.k9.mail.Address\nprivate fun isSpoofAddress(displayName: String): Boolean {\r\n        val atIndex = displayName.indexOf('@')\r\n        return if (atIndex > 0) {\r\n            displayName[atIndex - 1] != '('\r\n        } else {\r\n            false\r\n        }\r\n    }\nimport com.fsck.k9.mail.Address" ],
  "Android-Password-Store/169" : [ "super.onOptionsItemSelected(item)", "override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n\r\n        // Handle item selection\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                finish()\r\n                return true\r\n            }\r\n            else -> return super.onOptionsItemSelected(item)\r\n        }\r\n    }" ],
  "Iconify/92" : [ "node.items()\n--------------------------------------------------\nit.items()\n--------------------------------------------------\nbackingGr?.reward()?.items()\n--------------------------------------------------\nitems(items)\n--------------------------------------------------\nitems()\n--------------------------------------------------\nitems().size", "import java.util.ArrayList\nprotected fun items(): MutableList<Any> {\r\n        val items = ArrayList<Any>()\r\n        for (section in sections) {\r\n            items.addAll(section)\r\n        }\r\n\r\n        return items\r\n    }\nImport(names=[java, util, ArrayList], wildcard=false, alias=null)" ],
  "Android-Password-Store/175" : [ "refreshResults()", "private fun refreshResults() {\r\n        results = if (query.isBlank()) {\r\n            listOf()\r\n        } else {\r\n            marketKit.fullCoins(query)\r\n        }\r\n    }" ],
  "Android-Password-Store/176" : [ "        notificationDataStore.clearNotifications(account)\n        clearNotificationStore(account)\r\n", "import com.fsck.k9.Account\nprivate fun clearNotificationStore(account: Account) {\r\n        val notificationStore = notificationStoreProvider.getNotificationStore(account)\r\n        notificationStore.clearNotifications()\r\n    }\nimport com.fsck.k9.Account" ],
  "Android-Password-Store/177" : [ "refreshResults()", "private fun refreshResults() {\r\n        results = if (query.isBlank()) {\r\n            listOf()\r\n        } else {\r\n            marketKit.fullCoins(query)\r\n        }\r\n    }" ],
  "Android-Password-Store/170" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Android-Password-Store/173" : [ "run {\n    addNextIntent(appLaunchIntent)\n    addNextIntent(Intent(context, EpisodesActivity::class.java).putExtra(EpisodesActivity.EXTRA_LONG_EPISODE_ID, episodeId))\n    startActivities()\n}\n--------------------------------------------------\nRemoveHexagonAccountTask(requireContext()).run()\n--------------------------------------------------\nimportTask.run()\n--------------------------------------------------\ndataLibTask.run()\n--------------------------------------------------\nrun {\n    ActionsHelper.populateActions(layoutInflater, theme, binding.containerMovieActions, actions)\n}\n--------------------------------------------------\nnotificationService.run()\n--------------------------------------------------\nrun {\n    if (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) {\n        setItemChecked(position)\n    }\n}\n--------------------------------------------------\nrun {\n    showId = getLong(ARG_SHOW_ID)\n    episodeReleaseTime = getLong(ARG_EPISODE_RELEASE_TIME)\n    episodeNumber = getInt(ARG_EPISODE_NUMBER)\n}\n--------------------------------------------------\narguments?.run {\n    showId = getLong(ARG_LONG_SHOW_ROW_ID)\n}\n--------------------------------------------------\nrun {\n    isAppearanceLightStatusBars = isLightStatusBar\n    isAppearanceLightNavigationBars = isLightNavigationBar\n}", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.content.Context\nsuspend fun run(): Int {\r\n        return withContext(Dispatchers.IO) {\r\n            val result = doInBackground(this)\r\n            onPostExecute(result)\r\n            return@withContext result\r\n        }\r\n    }\nimport android.content.Context\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/297" : [ "@Override\r\npublic void onSaveInstanceState(@NonNull Bundle savedInstanceState) {\r\n    super.onSaveInstanceState(savedInstanceState);\r\n    tabs = binding.tabs;\r\n    savedInstanceState.putInt(STATE_TAB_INDEX, tabs.getSelectedTabPosition());\r\n    savedInstanceState.putParcelable(STATE_TEMP_CARD, tempLoyaltyCard);\r\n    savedInstanceState.putSerializable(STATE_TEMP_CARD_FIELD, tempLoyaltyCardField);\r\n    savedInstanceState.putInt(STATE_REQUESTED_IMAGE, mRequestedImage);\r\n    Object cardImageFrontObj = cardImageFront.getTag();\r\n    if (mFrontImageUnsaved && (cardImageFrontObj instanceof Bitmap) && Utils.saveTempImage(this, (Bitmap) cardImageFrontObj, TEMP_UNSAVED_FRONT_IMAGE_NAME, TEMP_UNSAVED_IMAGE_FORMAT) != null) {\r\n        savedInstanceState.putInt(STATE_FRONT_IMAGE_UNSAVED, 1);\r\n    } else {\r\n        savedInstanceState.putInt(STATE_FRONT_IMAGE_UNSAVED, 0);\r\n    }\r\n    Object cardImageBackObj = cardImageBack.getTag();\r\n    if (mBackImageUnsaved && (cardImageBackObj instanceof Bitmap) && Utils.saveTempImage(this, (Bitmap) cardImageBackObj, TEMP_UNSAVED_BACK_IMAGE_NAME, TEMP_UNSAVED_IMAGE_FORMAT) != null) {\r\n        savedInstanceState.putInt(STATE_BACK_IMAGE_UNSAVED, 1);\r\n    } else {\r\n        savedInstanceState.putInt(STATE_BACK_IMAGE_UNSAVED, 0);\r\n    }\r\n    Object thumbnailObj = thumbnail.getTag();\r\n    if (mIconUnsaved && (thumbnailObj instanceof Bitmap) && Utils.saveTempImage(this, (Bitmap) thumbnailObj, TEMP_UNSAVED_ICON_NAME, TEMP_UNSAVED_IMAGE_FORMAT) != null) {\r\n        savedInstanceState.putInt(STATE_ICON_UNSAVED, 1);\r\n    } else {\r\n        savedInstanceState.putInt(STATE_ICON_UNSAVED, 0);\r\n    }\r\n    savedInstanceState.putInt(STATE_UPDATE_LOYALTY_CARD, updateLoyaltyCard ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_HAS_CHANGED, hasChanged ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_FRONT_IMAGE_REMOVED, mFrontImageRemoved ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_BACK_IMAGE_REMOVED, mBackImageRemoved ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_ICON_REMOVED, mIconRemoved ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_OPEN_SET_ICON_MENU, openSetIconMenu ? 1 : 0);\r\n}\n--------------------------------------------------\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle savedInstanceState) {\r\n    super.onSaveInstanceState(savedInstanceState);\r\n    tabs = binding.tabs;\r\n    savedInstanceState.putInt(STATE_TAB_INDEX, tabs.getSelectedTabPosition());\r\n    savedInstanceState.putParcelable(STATE_TEMP_CARD, tempLoyaltyCard);\r\n    savedInstanceState.putSerializable(STATE_TEMP_CARD_FIELD, tempLoyaltyCardField);\r\n    savedInstanceState.putInt(STATE_REQUESTED_IMAGE, mRequestedImage);\r\n    Object cardImageFrontObj = cardImageFront.getTag();\r\n    if (mFrontImageUnsaved && (cardImageFrontObj instanceof Bitmap) && Utils.saveTempImage(this, (Bitmap) cardImageFrontObj, TEMP_UNSAVED_FRONT_IMAGE_NAME, TEMP_UNSAVED_IMAGE_FORMAT) != null) {\r\n        savedInstanceState.putInt(STATE_FRONT_IMAGE_UNSAVED, 1);\r\n    } else {\r\n        savedInstanceState.putInt(STATE_FRONT_IMAGE_UNSAVED, 0);\r\n    }\r\n    Object cardImageBackObj = cardImageBack.getTag();\r\n    if (mBackImageUnsaved && (cardImageBackObj instanceof Bitmap) && Utils.saveTempImage(this, (Bitmap) cardImageBackObj, TEMP_UNSAVED_BACK_IMAGE_NAME, TEMP_UNSAVED_IMAGE_FORMAT) != null) {\r\n        savedInstanceState.putInt(STATE_BACK_IMAGE_UNSAVED, 1);\r\n    } else {\r\n        savedInstanceState.putInt(STATE_BACK_IMAGE_UNSAVED, 0);\r\n    }\r\n    Object thumbnailObj = thumbnail.getTag();\r\n    if (mIconUnsaved && (thumbnailObj instanceof Bitmap) && Utils.saveTempImage(this, (Bitmap) thumbnailObj, TEMP_UNSAVED_ICON_NAME, TEMP_UNSAVED_IMAGE_FORMAT) != null) {\r\n        savedInstanceState.putInt(STATE_ICON_UNSAVED, 1);\r\n    } else {\r\n        savedInstanceState.putInt(STATE_ICON_UNSAVED, 0);\r\n    }\r\n    savedInstanceState.putInt(STATE_UPDATE_LOYALTY_CARD, updateLoyaltyCard ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_HAS_CHANGED, hasChanged ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_FRONT_IMAGE_REMOVED, mFrontImageRemoved ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_BACK_IMAGE_REMOVED, mBackImageRemoved ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_ICON_REMOVED, mIconRemoved ? 1 : 0);\r\n    savedInstanceState.putInt(STATE_OPEN_SET_ICON_MENU, openSetIconMenu ? 1 : 0);\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.util.Log;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.IOException\nimport java.io.FileOutputStream\nimport java.io.File\nimport android.util.Log\nimport android.graphics.Bitmap\nimport android.content.Context\npublic static String saveTempImage(Context context, Bitmap in, String name, Bitmap.CompressFormat format) {\r\n    File image = createTempFile(context, name);\r\n    try (FileOutputStream out = new FileOutputStream(image)) {\r\n        in.compress(format, 100, out);\r\n        return image.getAbsolutePath();\r\n    } catch (IOException e) {\r\n        Log.d(\"store temp image\", \"failed writing temp file for temporary image, name: \" + name);\r\n        return null;\r\n    }\r\n}" ],
  "Trail-Sense/298" : [ "addAccount(url, username, password!!)\n--------------------------------------------------\nviewModel.addAccount(url, username, password)\n--------------------------------------------------\naddAccount(it)\n--------------------------------------------------\naddAccountViewModel.addAccount(url, username, password)\n--------------------------------------------------\naddAccount()", "suspend fun addAccount(url: String, username: String, password: String) {\r\n        run {\r\n            clientProvider\r\n                    .forUrl(url, username, password, foreground = true)\r\n                    .getSession()\r\n        }\r\n    }" ],
  "Trail-Sense/299" : [ "        if (list == null) {\n            var defaultOrder = preferences.getStringValue(prefId)\r\n            if (isNullOrEmpty(defaultOrder)) {\n--------------------------------------------------\n        )\n        preferences.getStringValue(R.string.p_default_recurrence)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n                }\n        preferences.getStringValue(R.string.p_default_location)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n        if (tags.isEmpty()) {\n            preferences.getStringValue(R.string.p_default_tags)\r\n                    ?.split(\",\")\n--------------------------------------------------\npreferences.getStringValue(R.string.p_dashclock_filter)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_account)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_folder)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_list)\n--------------------------------------------------\npreferences.getStringValue(resId)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_start_of_week)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_recurrence)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_location)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_tags)", "import timber.log.Timber\nfun getStringValue(key: String?): String? = try {\r\n        prefs.getString(key, null)\r\n    } catch (e: Exception) {\r\n        Timber.e(e)\r\n        null\r\n    }\nimport timber.log.Timber" ],
  "Iconify/87" : [ "", "override fun onStop() {\n        super.onStop()\n        musicService.quit()\n    }" ],
  "Iconify/85" : [ "                    val youGetSectionItems = getSwapEventSectionItems(\n                        title = getYouGetString(status),\r\n                        value = valueOut,\n--------------------------------------------------\n                        getSwapEventSectionItems(\n                            title = getYouGetString(status),\r\n                            value = valueOut,", "import io.horizontalsystems.bankwallet.modules.transactions.TransactionStatus\nimport io.horizontalsystems.bankwallet.modules.transactionInfo.TransactionInfoViewItem.Transaction\nimport io.horizontalsystems.bankwallet.modules.transactionInfo.TransactionInfoViewItem.Status\nimport io.horizontalsystems.bankwallet.R\nprivate fun getYouGetString(status: TransactionStatus): String {\r\n        return if (status == TransactionStatus.Completed) {\r\n            getString(R.string.TransactionInfo_YouGot)\r\n        } else {\r\n            getString(R.string.TransactionInfo_YouGet)\r\n        }\r\n    }\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.modules.transactionInfo.TransactionInfoViewItem.Status\nimport io.horizontalsystems.bankwallet.modules.transactionInfo.TransactionInfoViewItem.Transaction\nimport io.horizontalsystems.bankwallet.modules.transactions.TransactionStatus" ],
  "Iconify/88" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/89" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/82" : [ "it.sourceUrl.isMP3Url()", "import java.util.regex.Pattern\nimport java.util.regex.Matcher\nfun String.isMP3Url(): Boolean {\r\n    val regex = \"^https?://\\\\S+\\\\.mp3\"\r\n    val pattern: Pattern = Pattern.compile(regex)\r\n    val matcher: Matcher = pattern.matcher(this)\r\n    return matcher.find()\r\n}\nImport(names=[java, util, regex, Matcher], wildcard=false, alias=null)\nImport(names=[java, util, regex, Pattern], wildcard=false, alias=null)" ],
  "Android-Password-Store/178" : [ "refreshResults()", "private fun refreshResults() {\r\n        results = if (query.isBlank()) {\r\n            listOf()\r\n        } else {\r\n            marketKit.fullCoins(query)\r\n        }\r\n    }" ],
  "Android-Password-Store/179" : [ "init()\n--------------------------------------------------\ninit(context)", "import org.isoron.uhabits.R\nimport android.graphics.Paint\nprivate fun init() {\r\n        initPaints()\r\n        initColors()\r\n        initDateFormats()\r\n        initRects()\r\n    }" ],
  "Iconify/80" : [ "", "import androidx.lifecycle.LifecycleOwner\noverride fun onStop(owner: LifecycleOwner) {\r\n        if (!viewModel.notificationHelper.allowBackgroundAudio) {\r\n            viewModel.pause()\r\n        }\r\n    }\nImport(names=[androidx, lifecycle, LifecycleOwner], wildcard=false, alias=null)" ],
  "Iconify/81" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "VinylMusicPlayer/194" : [ "return getWritableOrReadableDatabase(writable)", "import android.database.sqlite.SQLiteDatabase\nprivate fun getWritableOrReadableDatabase(writable: Boolean): SQLiteDatabase {\r\n            return if (writable) {\r\n                super.getWritableDatabase()\r\n            } else {\r\n                super.getReadableDatabase()\r\n            }\r\n        }\nImport(names=[android, database, sqlite, SQLiteDatabase], wildcard=false, alias=null)" ],
  "MaterialFiles/426" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        return if (other is AudioFileCover) {\n            other.filePath == filePath\n        } else false\n    }" ],
  "Android-Password-Store/185" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/190" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Android-Password-Store/183" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/191" : [ "@Nullable\r\n@Override\r\npublic StringBuilder read(JsonReader reader) throws IOException {\r\n    if (reader.wasNull())\r\n        return null;\r\n    StringBuilder builder = new StringBuilder();\r\n    return reader.appendString(builder);\r\n}\n--------------------------------------------------\n@Nullable\r\n@Override\r\npublic StringBuffer read(JsonReader reader) throws IOException {\r\n    if (reader.wasNull())\r\n        return null;\r\n    StringBuffer builder = new StringBuffer();\r\n    return reader.appendString(builder);\r\n}\n--------------------------------------------------\n", "import java.io.IOException;\r\nimport java.io.IOException\npublic final StringBuilder appendString(StringBuilder builder) throws IOException {\r\n    final int len = parseString();\r\n    builder.append(chars, 0, len);\r\n    return builder;\r\n}" ],
  "Android-Password-Store/184" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/75" : [ "@Override\r\nprotected synchronized void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n    super.onSizeChanged(h, w, oldh, oldw);\r\n    this.x = w;\r\n    this.y = h;\r\n    this.z = oldw;\r\n    this.w = oldh;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    if (!isEnabled()) {\r\n        return false;\r\n    }\r\n    switch(event.getAction()) {\r\n        case MotionEvent.ACTION_DOWN:\r\n            setSelected(true);\r\n            setPressed(true);\r\n            if (changeListener != null) {\r\n                changeListener.onStartTrackingTouch(this);\r\n            }\r\n            break;\r\n        case MotionEvent.ACTION_UP:\r\n            setSelected(false);\r\n            setPressed(false);\r\n            if (changeListener != null) {\r\n                changeListener.onStopTrackingTouch(this);\r\n            }\r\n            break;\r\n        case MotionEvent.ACTION_MOVE:\r\n            int progress = getMax() - (int) (getMax() * event.getY() / getHeight());\r\n            setProgress(progress);\r\n            onSizeChanged(getWidth(), getHeight(), 0, 0);\r\n            if (changeListener != null) {\r\n                changeListener.onProgressChanged(this, progress, true);\r\n            }\r\n            break;\r\n        case MotionEvent.ACTION_CANCEL:\r\n            break;\r\n    }\r\n    return true;\r\n}\n--------------------------------------------------\n", "@Override\r\nprotected synchronized void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n    super.onSizeChanged(h, w, oldh, oldw);\r\n    this.x = w;\r\n    this.y = h;\r\n    this.z = oldw;\r\n    this.w = oldh;\r\n}" ],
  "Iconify/76" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/73" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/79" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Iconify/77" : [ "", "import com.omgodse.notally.databinding.FragmentSettingsBinding\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        val binding = FragmentSettingsBinding.inflate(inflater)\r\n        setupBinding(binding)\r\n        return binding.root\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, fragment, app, Fragment], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, databinding, FragmentSettingsBinding], wildcard=false, alias=null)" ],
  "Iconify/72" : [ "            editor.putInt(\"$accountUuid.displayCount\", displayCount)\n            editor.putBoolean(\"$accountUuid.notifyNewMail\", isNotifyNewMail)\r\n            editor.putString(\"$accountUuid.folderNotifyNewMailMode\", folderNotifyNewMailMode.name)\n--------------------------------------------------\n            editor.putString(\"$accountUuid.folderNotifyNewMailMode\", folderNotifyNewMailMode.name)\n            editor.putBoolean(\"$accountUuid.notifySelfNewMail\", isNotifySelfNewMail)\r\n            editor.putBoolean(\"$accountUuid.notifyContactsMailOnly\", isNotifyContactsMailOnly)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.notifySelfNewMail\", isNotifySelfNewMail)\n            editor.putBoolean(\"$accountUuid.notifyContactsMailOnly\", isNotifyContactsMailOnly)\r\n            editor.putBoolean(\"$accountUuid.ignoreChatMessages\", isIgnoreChatMessages)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.notifyContactsMailOnly\", isNotifyContactsMailOnly)\n            editor.putBoolean(\"$accountUuid.ignoreChatMessages\", isIgnoreChatMessages)\r\n            editor.putBoolean(\"$accountUuid.notifyMailCheck\", isNotifySync)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.ignoreChatMessages\", isIgnoreChatMessages)\n            editor.putBoolean(\"$accountUuid.notifyMailCheck\", isNotifySync)\r\n            editor.putInt(\"$accountUuid.messagesNotificationChannelVersion\", messagesNotificationChannelVersion)\n--------------------------------------------------\n            editor.putString(\"$accountUuid.sortTypeEnum\", sortType.name)\n            editor.putBoolean(\"$accountUuid.sortAscending\", isSortAscending(sortType))\r\n            editor.putString(\"$accountUuid.showPicturesEnum\", showPictures.name)\n--------------------------------------------------\n            editor.putString(\"$accountUuid.folderTargetMode\", folderTargetMode.name)\n            editor.putBoolean(\"$accountUuid.signatureBeforeQuotedText\", isSignatureBeforeQuotedText)\r\n            editor.putString(\"$accountUuid.expungePolicy\", expungePolicy.name)\n--------------------------------------------------\n            editor.putString(\"$accountUuid.expungePolicy\", expungePolicy.name)\n            editor.putBoolean(\"$accountUuid.syncRemoteDeletions\", isSyncRemoteDeletions)\r\n            editor.putInt(\"$accountUuid.maxPushFolders\", maxPushFolders)\n--------------------------------------------------\n            editor.putInt(\"$accountUuid.chipColor\", chipColor)\n            editor.putBoolean(\"$accountUuid.subscribedFoldersOnly\", isSubscribedFoldersOnly)\r\n            editor.putInt(\"$accountUuid.maximumPolledMessageAge\", maximumPolledMessageAge)\n--------------------------------------------------\n            }\n            editor.putBoolean(\"$accountUuid.messageFormatAuto\", messageFormatAuto)\r\n            editor.putBoolean(\"$accountUuid.messageReadReceipt\", isMessageReadReceipt)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.messageFormatAuto\", messageFormatAuto)\n            editor.putBoolean(\"$accountUuid.messageReadReceipt\", isMessageReadReceipt)\r\n            editor.putString(\"$accountUuid.quoteStyle\", quoteStyle.name)\n--------------------------------------------------\n            editor.putString(\"$accountUuid.quotePrefix\", quotePrefix)\n            editor.putBoolean(\"$accountUuid.defaultQuotedTextShown\", isDefaultQuotedTextShown)\r\n            editor.putBoolean(\"$accountUuid.replyAfterQuote\", isReplyAfterQuote)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.defaultQuotedTextShown\", isDefaultQuotedTextShown)\n            editor.putBoolean(\"$accountUuid.replyAfterQuote\", isReplyAfterQuote)\r\n            editor.putBoolean(\"$accountUuid.stripSignature\", isStripSignature)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.replyAfterQuote\", isReplyAfterQuote)\n            editor.putBoolean(\"$accountUuid.stripSignature\", isStripSignature)\r\n            editor.putLong(\"$accountUuid.cryptoKey\", openPgpKey)\n--------------------------------------------------\n            editor.putLong(\"$accountUuid.cryptoKey\", openPgpKey)\n            editor.putBoolean(\"$accountUuid.openPgpHideSignOnly\", isOpenPgpHideSignOnly)\r\n            editor.putBoolean(\"$accountUuid.openPgpEncryptSubject\", isOpenPgpEncryptSubject)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.openPgpHideSignOnly\", isOpenPgpHideSignOnly)\n            editor.putBoolean(\"$accountUuid.openPgpEncryptSubject\", isOpenPgpEncryptSubject)\r\n            editor.putBoolean(\"$accountUuid.openPgpEncryptAllDrafts\", isOpenPgpEncryptAllDrafts)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.openPgpEncryptSubject\", isOpenPgpEncryptSubject)\n            editor.putBoolean(\"$accountUuid.openPgpEncryptAllDrafts\", isOpenPgpEncryptAllDrafts)\r\n            editor.putString(\"$accountUuid.openPgpProvider\", openPgpProvider)\n--------------------------------------------------\n            editor.putString(\"$accountUuid.openPgpProvider\", openPgpProvider)\n            editor.putBoolean(\"$accountUuid.autocryptMutualMode\", autocryptPreferEncryptMutual)\r\n            editor.putBoolean(\"$accountUuid.remoteSearchFullText\", isRemoteSearchFullText)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.autocryptMutualMode\", autocryptPreferEncryptMutual)\n            editor.putBoolean(\"$accountUuid.remoteSearchFullText\", isRemoteSearchFullText)\r\n            editor.putInt(\"$accountUuid.remoteSearchNumResults\", remoteSearchNumResults)\n--------------------------------------------------\n            editor.putInt(\"$accountUuid.remoteSearchNumResults\", remoteSearchNumResults)\n            editor.putBoolean(\"$accountUuid.uploadSentMessages\", isUploadSentMessages)\r\n            editor.putBoolean(\"$accountUuid.markMessageAsReadOnView\", isMarkMessageAsReadOnView)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.uploadSentMessages\", isUploadSentMessages)\n            editor.putBoolean(\"$accountUuid.markMessageAsReadOnView\", isMarkMessageAsReadOnView)\r\n            editor.putBoolean(\"$accountUuid.markMessageAsReadOnDelete\", isMarkMessageAsReadOnDelete)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.markMessageAsReadOnView\", isMarkMessageAsReadOnView)\n            editor.putBoolean(\"$accountUuid.markMessageAsReadOnDelete\", isMarkMessageAsReadOnDelete)\r\n            editor.putBoolean(\"$accountUuid.alwaysShowCcBcc\", isAlwaysShowCcBcc)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.markMessageAsReadOnDelete\", isMarkMessageAsReadOnDelete)\n            editor.putBoolean(\"$accountUuid.alwaysShowCcBcc\", isAlwaysShowCcBcc)\r\n\n--------------------------------------------------\n\n            editor.putBoolean(\"$accountUuid.vibrate\", notificationSettings.vibration.isEnabled)\r\n            editor.putInt(\"$accountUuid.vibratePattern\", notificationSettings.vibration.pattern.serialize())\n--------------------------------------------------\n            editor.putInt(\"$accountUuid.vibrateTimes\", notificationSettings.vibration.repeatCount)\n            editor.putBoolean(\"$accountUuid.ring\", notificationSettings.isRingEnabled)\r\n            editor.putString(\"$accountUuid.ringtone\", notificationSettings.ringtone)\n--------------------------------------------------\n            editor.putLong(\"$accountUuid.lastFolderListRefreshTime\", lastFolderListRefreshTime)\n            editor.putBoolean(\"$accountUuid.isFinishedSetup\", isFinishedSetup)\r\n            editor.putBoolean(\"$accountUuid.useCompression\", useCompression)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.isFinishedSetup\", isFinishedSetup)\n            editor.putBoolean(\"$accountUuid.useCompression\", useCompression)\r\n            editor.putBoolean(\"$accountUuid.sendClientId\", isSendClientIdEnabled)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.useCompression\", useCompression)\n            editor.putBoolean(\"$accountUuid.sendClientId\", isSendClientIdEnabled)\r\n            editor.putBoolean(\"$accountUuid.migrateToOAuth\", shouldMigrateToOAuth)\n--------------------------------------------------\n            editor.putBoolean(\"$accountUuid.sendClientId\", isSendClientIdEnabled)\n            editor.putBoolean(\"$accountUuid.migrateToOAuth\", shouldMigrateToOAuth)\r\n        }\n--------------------------------------------------\n                editor.putString(\"$uuid.$IDENTITY_EMAIL_KEY.$ident\", identity.email)\n                editor.putBoolean(\"$uuid.signatureUse.$ident\", identity.signatureUse)\r\n                editor.putString(\"$uuid.signature.$ident\", identity.signature)\n--------------------------------------------------\neditor.putBoolean(\"x\", true)\n--------------------------------------------------\noutState.putBoolean(STATE_KEY_REPLY_TO_SHOWN, view.isVisible)", "override fun putBoolean(key: String, value: Boolean) = apply {\r\n            changes[key] = value.toString()\r\n            removals.remove(key)\r\n        }" ],
  "VinylMusicPlayer/183" : [ "@Override\r\npublic boolean onNavigateUp() {\r\n    onBackPressed();\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            break;\r\n        case R.id.menu_gallery_share:\r\n            shareMedia();\r\n            break;\r\n        case R.id.menu_gallery:\r\n            viewMedia();\r\n            break;\r\n        default:\r\n            LogDelegate.e(\"Wrong element choosen: \" + item.getItemId());\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onBackPressed() {\r\n    super.onBackPressed();\r\n    this.cancel();\r\n}" ],
  "Android-Password-Store/197" : [ "@Override\r\npublic void onCreate() {\r\n    super.onCreate();\r\n    compositeSubscription = new CompositeSubscription();\r\n    mNotificationManager = (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);\r\n    MmexApplication.getApp().iocComponent.inject(this);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onDestroy() {\r\n    if (!compositeSubscription.isUnsubscribed()) {\r\n        compositeSubscription.unsubscribe();\r\n    }\r\n    super.onDestroy();\r\n}" ],
  "VinylMusicPlayer/185" : [ "", "import android.content.DialogInterface;\r\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    if (mCallback != null) {\r\n        int[] values = new int[pickers.size()];\r\n        for (int i = 0; i < pickers.size(); i++) {\r\n            pickers.get(i).clearFocus();\r\n            values[i] = pickers.get(i).getCurrent();\r\n        }\r\n        mCallback.onNumbersPicked(values);\r\n    }\r\n}" ],
  "MaterialFiles/439" : [ "monthView.setEvents(events.get(monthOfYear))", "import com.simplemobiletools.calendar.pro.models.DayYearly\nfun setEvents(events: ArrayList<DayYearly>?) {\r\n        mEvents = events\r\n        post { invalidate() }\r\n    }" ],
  "Android-Password-Store/198" : [ "playlistModel.service?.setSleepTimer(null)\n--------------------------------------------------\nplaylistModel.service?.setSleepTimer(sleepTime)\n--------------------------------------------------\nplayer.service?.setSleepTimer(null)\n--------------------------------------------------\nservice.setSleepTimer(null)\n--------------------------------------------------\nif (isPlaying) stop() else setSleepTimer(null)", "fun setSleepTimer(time: Calendar?) {\r\n        if (time != null && time.timeInMillis < System.currentTimeMillis()) return\r\n        playerSleepTime.value = time\r\n        if (time == null) stopSleepTimerJob() else startSleepTimerJob()\r\n    }" ],
  "MaterialFiles/433" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        writer.beginObject()\r\n        serialiseFields(writer)\r\n        writer.endObject()\r\n    }" ],
  "MaterialFiles/435" : [ "\n                remove(\"unread_widget.$widgetId.folder_name\")\r\n            }\n--------------------------------------------------\n        val editor = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE).edit()\n        editor.remove(PREF_PREFIX_KEY + appWidgetId)\r\n        editor.remove(PREF_PREFIX_KEY + appWidgetId + PREF_FOLDER_ID_SUFFIX_KEY)\n--------------------------------------------------\n        editor.remove(PREF_PREFIX_KEY + appWidgetId)\n        editor.remove(PREF_PREFIX_KEY + appWidgetId + PREF_FOLDER_ID_SUFFIX_KEY)\r\n        editor.apply()\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_ENCRYPT)\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_SIGN_ONLY)\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_IS_REPLY)\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_BY_CHOICE)\n--------------------------------------------------\nparameters.remove(AutocryptDraftStateHeader.PARAM_PGP_INLINE)\n--------------------------------------------------\nlocalStores.remove(accountUuid)\n--------------------------------------------------\ncolumnMap.remove(flag)\n--------------------------------------------------\nmessageCache.remove(messageId)\n--------------------------------------------------\nthreadCache.remove(threadRootId)\n--------------------------------------------------\nhiddenMessageCache.remove(messageId)\n--------------------------------------------------\nprecedingLineBreak.takeIf {\n    it.isBR()\n}?.remove()\n--------------------------------------------------\nlisteners.remove(listener)\n--------------------------------------------------\neditor.remove(\"storage-key\")\n--------------------------------------------------\nverify(storagePersisterOps).remove(\"storage-key\")\n--------------------------------------------------\neditor.remove(\"x\")\n--------------------------------------------------\nverify(storagePersisterOps).remove(\"x\")\n--------------------------------------------------\nremove(any())\n--------------------------------------------------\nworkingMap.remove(key)\n--------------------------------------------------\nremovals.remove(key)\n--------------------------------------------------\nremove(key)\n--------------------------------------------------\nchanges.remove(key)", "override fun remove(key: String) = apply {\r\n            removals.add(key)\r\n            changes.remove(key)\r\n        }" ],
  "VinylMusicPlayer/189" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/188" : [ "@Override\r\npublic void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\r\n    callback.onClick(dialog, which.ordinal());\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\r\n    callback.onClick(dialog, which.ordinal());\r\n}\n--------------------------------------------------\n", "import com.afollestad.materialdialogs.DialogAction;\r\nimport com.afollestad.materialdialogs.MaterialDialog;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport com.afollestad.materialdialogs.MaterialDialog\nimport com.afollestad.materialdialogs.DialogAction\n@Override\r\npublic void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\r\n    // close binaryDialog\r\n    dialog.cancel();\r\n}" ],
  "Iconify/64" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/65" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport java.util.List\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    // Current directory chosen\r\n    if (mChosenDirectoryListener != null) {\r\n        // Call registered listener supplied with the chosen directory\r\n        mChosenDirectoryListener.onChosenDir(mDir);\r\n    }\r\n}" ],
  "Iconify/62" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/63" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport java.util.List\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    // Current directory chosen\r\n    if (mChosenDirectoryListener != null) {\r\n        // Call registered listener supplied with the chosen directory\r\n        mChosenDirectoryListener.onChosenDir(mDir);\r\n    }\r\n}" ],
  "Iconify/68" : [ "", "import androidx.lifecycle.LifecycleOwner\noverride fun onStop(owner: LifecycleOwner) {\r\n        if (!viewModel.notificationHelper.allowBackgroundAudio) {\r\n            viewModel.pause()\r\n        }\r\n    }\nImport(names=[androidx, lifecycle, LifecycleOwner], wildcard=false, alias=null)" ],
  "Iconify/67" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/60" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport java.util.List\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    // Current directory chosen\r\n    if (mChosenDirectoryListener != null) {\r\n        // Call registered listener supplied with the chosen directory\r\n        mChosenDirectoryListener.onChosenDir(mDir);\r\n    }\r\n}" ],
  "Iconify/61" : [ "showHelpDialog()", "import org.videolan.vlc.R\nimport androidx.appcompat.app.AlertDialog\nimport android.os.Build\nprivate fun showHelpDialog() {\r\n        if (!isAdded) return\r\n        activity?.let {\r\n            val inflater = it.layoutInflater\r\n            AlertDialog.Builder(it).setView(inflater.inflate(R.layout.dialog_sd_write, null))\r\n                    .setOnDismissListener { showDialog() }\r\n                    .create().show()\r\n        }\r\n    }\nImport(names=[androidx, appcompat, app, AlertDialog], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/170" : [ "", "@Override\r\nprotected Void doInBackground(Long... args) {\r\n    for (Long id : list) {\r\n        deleteActivity(db, id);\r\n        dialog.incrementProgressBy(1);\r\n    }\r\n    return null;\r\n}" ],
  "Trail-Sense/241" : [ "requireArguments().getInt(\"color\")\n--------------------------------------------------\nrequireArguments().getInt(\"value\")\n--------------------------------------------------\nstate.bundle!!.getInt(\"x\")\n--------------------------------------------------\nstate.bundle.getInt(\"y\")\n--------------------------------------------------\nstate.bundle.getInt(\"direction\")\n--------------------------------------------------\nstate.bundle.getInt(\"dataOffset\")\n--------------------------------------------------\nstate.bundle.getInt(\"maxDataOffset\")\n--------------------------------------------------\nstate.getInt(\"habitType\")\n--------------------------------------------------\nstate.getInt(\"paletteColor\")\n--------------------------------------------------\nstate.getInt(\"freqNum\")\n--------------------------------------------------\nstate.getInt(\"freqDen\")\n--------------------------------------------------\nstate.getInt(\"reminderHour\")\n--------------------------------------------------\nstate.getInt(\"reminderMin\")\n--------------------------------------------------\nstate.getInt(\"reminderDays\")\n--------------------------------------------------\nstate.bundle!!.getInt(\"dataOffset\")\n--------------------------------------------------\nbundle.getInt(\"action\")\n--------------------------------------------------\ncursor.getInt(index)\n--------------------------------------------------\nsharedPrefs.getInt(key, defValue)\n--------------------------------------------------\nintent.extras?.getInt(EXTRA_APPWIDGET_ID, INVALID_APPWIDGET_ID)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT)", "override fun getInt(index: Int): Int? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getInt(index)\r\n        }\r\n    }" ],
  "Trail-Sense/242" : [ "requireArguments().getDouble(\"value\")\n--------------------------------------------------\ncursor.getDouble(index)", "override fun getDouble(index: Int): Double? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getDouble(index)\r\n        }\r\n    }" ],
  "Iconify/517" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/516" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/444" : [ "\n                val displayCount = if (unreadCount <= MAX_COUNT) unreadCount.toString() else \"$MAX_COUNT+\"\r\n                remoteViews.setTextViewText(R.id.unread_count, displayCount)\n--------------------------------------------------\n                    val folderId = folderRepository.getFolderId(account, folderServerId)\n                    putString(\"unread_widget.$widgetId.folder_id\", folderId?.toString())\r\n                }\n--------------------------------------------------\naddress.toString()\n--------------------------------------------------\nthis?.toString()\n--------------------------------------------------\nemailSection.toString()\n--------------------------------------------------\ntoString()\n--------------------------------------------------\nformatter.toString()\n--------------------------------------------------\nlinkText.toString()\n--------------------------------------------------\nStringBuilder(length).apply {\n    this@asString.forEach {\n        append(it)\n    }\n}.toString()\n--------------------------------------------------\nUUID.randomUUID().toString()\n--------------------------------------------------\nfolderDetails.folder.id.toString()\n--------------------------------------------------\nfolderId.toString()\n--------------------------------------------------\ndatabaseId.toString()\n--------------------------------------------------\nmessagePartId.toString()\n--------------------------------------------------\nvalue?.toString()\n--------------------------------------------------\nvalue.toString()\n--------------------------------------------------\ntext.toString()", "override fun toString() = StringBuilder().apply {\r\n        segments.forEach {\r\n            append(text, it.startIndex, it.endIndex)\r\n        }\r\n    }.toString()" ],
  "Iconify/513" : [ "setColor(c)\n--------------------------------------------------\nbinding.frequencyChart.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreRing.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreView.setColor(androidColor)\n--------------------------------------------------\nbinding.streakChart.setColor(androidColor)\n--------------------------------------------------\nbinding.targetChart.setColor(androidColor)\n--------------------------------------------------\nsetColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nchart.setColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nring.setColor(fgColor)", "import android.graphics.Paint\noverride fun setColor(color: Color) {\r\n        paint.color = color.toInt()\r\n        textPaint.color = color.toInt()\r\n    }" ],
  "VinylMusicPlayer/178" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "MaterialFiles/446" : [ "unsafeGenerateBuildId(appInfo)?.toHexString()", "internal fun ByteArray.toHexString(): String = buildString(size * 2) {\r\n    for (byte in this@toHexString) {\r\n        @Suppress(\"MagicNumber\")\r\n        val value = byte.toInt() and 0xff\r\n        if (value < HEX_RADIX) append('0')\r\n        append(value.toString(HEX_RADIX))\r\n    }\r\n}" ],
  "Iconify/51" : [ "@Override\r\npublic boolean onSupportNavigateUp() {\r\n    super.onSupportNavigateUp();\r\n    setResult(RESULT_CANCELED);\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onSupportNavigateUp() {\r\n    if (activityBinding.searchToolbar.getVisibility() == VISIBLE) {\r\n        updateToolbars(false);\r\n        return true;\r\n    } else {\r\n        return super.onSupportNavigateUp();\r\n    }\r\n}\n--------------------------------------------------\n", "@Override\r\npublic boolean onSupportNavigateUp() {\r\n    // close this activity as oppose to navigating up\r\n    finish();\r\n    return true;\r\n}" ],
  "Iconify/57" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/55" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport java.util.List\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    // Current directory chosen\r\n    if (mChosenDirectoryListener != null) {\r\n        // Call registered listener supplied with the chosen directory\r\n        mChosenDirectoryListener.onChosenDir(mDir);\r\n    }\r\n}" ],
  "Iconify/56" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport java.util.List\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    // Current directory chosen\r\n    if (mChosenDirectoryListener != null) {\r\n        // Call registered listener supplied with the chosen directory\r\n        mChosenDirectoryListener.onChosenDir(mDir);\r\n    }\r\n}" ],
  "MaterialFiles/459" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/451" : [ "            realPushAccounts.isEmpty() -> {\n                stopServices()\r\n            }\n--------------------------------------------------\n            else -> {\n                stopServices()\r\n            }\n--------------------------------------------------\nstopService()\n--------------------------------------------------\ncontext.stopService(intent)", "import timber.log.Timber\nimport android.content.Intent\nprivate fun stopService() {\r\n        try {\r\n            val intent = Intent(context, PushService::class.java)\r\n            context.stopService(intent)\r\n        } catch (e: Exception) {\r\n            Timber.w(e, \"Exception while trying to stop PushService\")\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Iconify/528" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/527" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/450" : [ "", "import com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.presentation.main.MainActivity\nimport androidx.glance.action.ActionParameters\nimport androidx.glance.GlanceId\nimport androidx.core.net.toUri\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\noverride suspend fun onAction(context: Context, glanceId: GlanceId, parameters: ActionParameters) {\r\n        val intent = Intent(\r\n            Intent.ACTION_VIEW,\r\n            Constants.CALENDAR_SCREEN_URI.toUri(),\r\n            context,\r\n            MainActivity::class.java\r\n        ).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        context.startActivity(intent)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, glance, GlanceId], wildcard=false, alias=null)\nImport(names=[androidx, glance, action, ActionParameters], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, presentation, main, MainActivity], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, util, Constants], wildcard=false, alias=null)" ],
  "Iconify/525" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/49" : [ "        setupShowWordCount()\n        setupEnableLineWrap()\r\n        setupFontSize()", "private fun setupEnableLineWrap() {\r\n        binding.settingsEnableLineWrap.isChecked = config.enableLineWrap\r\n        binding.settingsEnableLineWrapHolder.setOnClickListener {\r\n            binding.settingsEnableLineWrap.toggle()\r\n            config.enableLineWrap = binding.settingsEnableLineWrap.isChecked\r\n        }\r\n    }" ],
  "VinylMusicPlayer/165" : [ "public AlertDialogBuilder newDialog(int title) {\r\n    return newDialog().setTitle(title);\r\n}\n--------------------------------------------------\npublic AlertDialogBuilder newDialog(String title) {\r\n    return newDialog().setTitle(title);\r\n}\n--------------------------------------------------\n", "import android.app.Dialog;\r\nimport android.app.Dialog\npublic void setTitle(String title) {\r\n    this.title = title;\r\n    Dialog dialog = getDialog();\r\n    if (dialog != null) {\r\n        dialog.setTitle(title);\r\n    }\r\n}" ],
  "Iconify/524" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/454" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/457" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/166" : [ "", "@Override\r\nprotected Void doInBackground(Long... args) {\r\n    for (Long id : list) {\r\n        deleteActivity(db, id);\r\n        dialog.incrementProgressBy(1);\r\n    }\r\n    return null;\r\n}" ],
  "Iconify/521" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Iconify/42" : [ "super.onCreateViewHolder(parent, viewType)", "import code.name.monkey.retromusic.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(activity).inflate(itemLayoutRes, parent, false)\n        return createViewHolder(view, viewType)\n    }\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)" ],
  "Iconify/47" : [ "", "import android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val item = items[position]\r\n        holder.bindView(item, true, true) { itemView, layoutPosition ->\r\n            setupView(itemView, item, holder)\r\n        }\r\n        bindViewHolder(holder)\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/150" : [ "", "import androidx.annotation.Nullable;\r\nimport de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState;\r\nimport static de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState.BOTTOM;\r\nimport static de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState.MIDDLE;\r\nimport de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState.MIDDLE\nimport de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState.BOTTOM\nimport com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_COLLAPSED\nimport de.schildbach.pte.dto.Trip\nimport de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState\nimport androidx.annotation.Nullable\nprivate void onSheetStateChanged(@Nullable SheetState sheetState) {\r\n    if (sheetState == null)\r\n        return;\r\n    switch(sheetState) {\r\n        case BOTTOM:\r\n            bottomSheetBehavior.setBottom();\r\n            bottomSheetBehavior.setState(STATE_COLLAPSED);\r\n            break;\r\n        case MIDDLE:\r\n            // ensures it can be swiped down\r\n            bottomSheetBehavior.setHideable(true);\r\n            bottomSheetBehavior.setMiddle();\r\n            bottomSheetBehavior.setState(STATE_COLLAPSED);\r\n            break;\r\n    }\r\n}" ],
  "fcitx5-android/506" : [ "val intentProject = projectFromIntent(intent)", "import com.kickstarter.ui.IntentKey\nimport com.kickstarter.models.Project\nimport android.os.Build\nimport android.content.Intent\nprivate fun projectFromIntent(intent: Intent): Project? {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n            intent.getParcelableExtra(IntentKey.PROJECT, Project::class.java)\r\n        } else {\r\n            intent.getParcelableExtra(IntentKey.PROJECT) as? Project?\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, Project], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/151" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/509" : [ "getListOfCurrencies()", "import type.CurrencyCode\nprivate fun getListOfCurrencies(): List<String> {\r\n        val strings = arrayListOf<String>()\r\n        for (currency in supportedCurrencies) {\r\n            strings.add(getStringForCurrencyCode(currency))\r\n        }\r\n        return strings\r\n    }" ],
  "Trail-Sense/264" : [ "                    warnings = maxFee.warnings,\n                    errors = maxFee.errors,\r\n                    navController = navController,\n--------------------------------------------------\n                    warnings = priorityFee.warnings,\n                    errors = priorityFee.errors,\r\n                    navController = navController,\n--------------------------------------------------\n    val borderColor = when {\n        errors.isNotEmpty() -> ComposeAppTheme.colors.red50\r\n        warnings.isNotEmpty() -> ComposeAppTheme.colors.yellow50\n--------------------------------------------------\n                warnings = fee.warnings,\n                errors = fee.errors,\r\n                navController = navController,\n--------------------------------------------------\nerrors = errors(nonce)", "import io.horizontalsystems.bankwallet.modules.evmfee.FeeSettingsError\nprivate fun errors(nonce: Long): List<FeeSettingsError> {\r\n        return latestNonce?.let {\r\n            if (it > nonce) {\r\n                listOf(FeeSettingsError.UsedNonce)\r\n            } else {\r\n                listOf()\r\n            }\r\n        } ?: listOf()\r\n    }" ],
  "VinylMusicPlayer/158" : [ "        if (nowPlayingScreen != PreferenceUtil.nowPlayingScreen) {\n            postRecreate()\n        }\n--------------------------------------------------\n            TOGGLE_FULL_SCREEN -> {\n                recreate()\n            }\n--------------------------------------------------\nCaocConfig.Builder.create()\n--------------------------------------------------\nreturn create(playlistEntities, list)\n--------------------------------------------------\ncreate()\n--------------------------------------------------\nCreatePlaylistDialog.create(songs)\n--------------------------------------------------\nreturn create(list)\n--------------------------------------------------\nmaterialDialog(R.string.save_playlist_title).setView(R.layout.loading).create()\n--------------------------------------------------\ndialog = create()\n--------------------------------------------------\nAddToPlaylistDialog.create(playlists, songs)\n--------------------------------------------------\nDeleteSongsDialog.create(songs)\n--------------------------------------------------\ncreate(this)\n--------------------------------------------------\nCreatePlaylistDialog.create(emptyList())\n--------------------------------------------------\nThemedFastScroller.create(this)\n--------------------------------------------------\nThemedFastScroller.create(binding.recyclerView)\n--------------------------------------------------\nAddToPlaylistDialog.create(playlists, getGenreSongs(genre))\n--------------------------------------------------\nAddToPlaylistDialog.create(playlists, playlistWithSongs.songs.toSongs())\n--------------------------------------------------\nRenamePlaylistDialog.create(playlistWithSongs.playlistEntity)\n--------------------------------------------------\nDeletePlaylistDialog.create(playlistWithSongs.playlistEntity)\n--------------------------------------------------\nSavePlaylistDialog.create(playlistWithSongs)\n--------------------------------------------------\nDeleteSongsDialog.create(song)\n--------------------------------------------------\nAddToPlaylistDialog.create(playlists, song)\n--------------------------------------------------\nSongDetailDialog.create(song)\n--------------------------------------------------\nGsonConverterFactory.create()\n--------------------------------------------------\nGsonBuilder().setLenient().create()\n--------------------------------------------------\nGsonConverterFactory.create(gson)\n--------------------------------------------------\nretrofit.create(LastFMService::class.java)\n--------------------------------------------------\nnewBuilder.create(DeezerService::class.java)\n--------------------------------------------------\nnewBuilder.create(LyricsRestService::class.java)\n--------------------------------------------------\ngsonBuilder.create()\n--------------------------------------------------\nval mergedImage = create(arranged, IMAGE_SIZE, PARTS)", "import code.name.monkey.retromusic.model.Song\nimport android.app.Dialog\nfun create(song: Song): CreatePlaylistDialog {\n            val list = mutableListOf<Song>()\n            list.add(song)\n            return create(list)\n        }\nImport(names=[android, app, Dialog], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, model, Song], wildcard=false, alias=null)" ],
  "Trail-Sense/265" : [ "{\r\n        return transactions.sortedDescending()\r\n    }\n--------------------------------------------------\n\n    return sortedWith(comparator)\r\n}\n--------------------------------------------------\nmarketItems.sort(sortingField)\n--------------------------------------------------\nsort(itemsWithCurrencyValues)", "import io.horizontalsystems.bankwallet.modules.balance.BalanceSortType\nfun sort(items: Iterable<BalanceCexViewItem>, sortType: BalanceSortType): List<BalanceCexViewItem> {\r\n        return when (sortType) {\r\n            BalanceSortType.Value -> sortByBalance(items)\r\n            BalanceSortType.Name -> items.sortedBy { it.coinCode }\r\n            BalanceSortType.PercentGrowth -> items.sortedByDescending { it.diff }\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, modules, balance, BalanceSortType], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/154" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/156" : [ "", "import com.irccloud.android.R;\r\nimport com.irccloud.android.R\n@Override\r\npublic void run() {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            notifyDataSetChanged();\r\n        }\r\n    });\r\n}" ],
  "Iconify/32" : [ "", "import android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport it.niedermann.owncloud.notes.R;\r\nimport it.niedermann.owncloud.notes.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.content.Context\n@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n    final var view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_category, parent, false);\r\n    return new CategoryViewHolder(view);\r\n}" ],
  "Trail-Sense/272" : [ "requireArguments().getInt(\"color\")\n--------------------------------------------------\nrequireArguments().getInt(\"value\")\n--------------------------------------------------\nstate.bundle!!.getInt(\"x\")\n--------------------------------------------------\nstate.bundle.getInt(\"y\")\n--------------------------------------------------\nstate.bundle.getInt(\"direction\")\n--------------------------------------------------\nstate.bundle.getInt(\"dataOffset\")\n--------------------------------------------------\nstate.bundle.getInt(\"maxDataOffset\")\n--------------------------------------------------\nstate.getInt(\"habitType\")\n--------------------------------------------------\nstate.getInt(\"paletteColor\")\n--------------------------------------------------\nstate.getInt(\"freqNum\")\n--------------------------------------------------\nstate.getInt(\"freqDen\")\n--------------------------------------------------\nstate.getInt(\"reminderHour\")\n--------------------------------------------------\nstate.getInt(\"reminderMin\")\n--------------------------------------------------\nstate.getInt(\"reminderDays\")\n--------------------------------------------------\nstate.bundle!!.getInt(\"dataOffset\")\n--------------------------------------------------\nbundle.getInt(\"action\")\n--------------------------------------------------\ncursor.getInt(index)\n--------------------------------------------------\nsharedPrefs.getInt(key, defValue)\n--------------------------------------------------\nintent.extras?.getInt(EXTRA_APPWIDGET_ID, INVALID_APPWIDGET_ID)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT)", "override fun getInt(index: Int): Int? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getInt(index)\r\n        }\r\n    }" ],
  "Trail-Sense/275" : [ "            when (destination.id) {\n                R.id.action_home, R.id.action_song, R.id.action_album, R.id.action_artist, R.id.action_folder, R.id.action_playlist, R.id.action_genre, R.id.action_search -> {\n                    // Save the last tab\n--------------------------------------------------\n        toolbar.setNavigationOnClickListener {\n            findNavController().navigate(R.id.action_search, null, navOptions)\n        }\n--------------------------------------------------\nsearch(it.toString())\n--------------------------------------------------\nlibraryViewModel.search(query, filter)\n--------------------------------------------------\nsearch(binding.searchView.text.toString())", "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers.IO\nimport code.name.monkey.retromusic.fragments.search.Filter\nfun search(query: String?, filter: Filter) =\n        viewModelScope.launch(IO) {\n            val result = repository.search(query, filter)\n            searchResults.postValue(result)\n        }\nimport code.name.monkey.retromusic.fragments.search.Filter\nimport kotlinx.coroutines.Dispatchers.IO\nimport kotlinx.coroutines.launch" ],
  "MaterialFiles/473" : [ "ParkedOnlyOnClickListener.create(::openPreferencesOnPhone)\n--------------------------------------------------\ncreate(controlItems, AppContextProvider.appContext.getString(R.string.controls_prefs_category))\n--------------------------------------------------\nSectionedItemList.create(helpItems, AppContextProvider.appContext.getString(R.string.help))\n--------------------------------------------------\ncreate(moreItems, AppContextProvider.appContext.getString(R.string.more_preferences))\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_play_pause_video)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_pause_play_video)\n--------------------------------------------------\nMediaPlayer.Equalizer.create()\n--------------------------------------------------\ncreate()\n--------------------------------------------------\ncreate(VideosViewModel::class.java)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_delete)\n--------------------------------------------------\nVectorDrawableCompat.create(this.resources, drawableId, this.theme)\n--------------------------------------------------\nconstraintSet.create(guidelineId, ConstraintSet.VERTICAL_GUIDELINE)\n--------------------------------------------------\nRenderScript.create(AppContextProvider.appContext)\n--------------------------------------------------\nScriptIntrinsicBlur.create(rs, Element.U8_4(rs))\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(this, R.drawable.anim_play_pause_video)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(this, R.drawable.anim_pause_play_video)\n--------------------------------------------------\nPrecomputedTextCompat.create(text, params)\n--------------------------------------------------\nmodel.create(this@MiniPlayerConfigureActivity, appWidgetId)", "import org.videolan.medialibrary.interfaces.media.Playlist\nimport androidx.lifecycle.ViewModel\nimport android.content.Context\noverride fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n            @Suppress(\"UNCHECKED_CAST\")\r\n            return PlaylistsViewModel(context.applicationContext, type) as T\r\n        }\nImport(names=[androidx, lifecycle, ViewModel], wildcard=false, alias=null)\nImport(names=[org, videolan, medialibrary, interfaces, media, Playlist], wildcard=false, alias=null)" ],
  "Trail-Sense/276" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/149" : [ "", "import android.view.View;\r\nimport androidx.annotation.NonNull;\r\nimport static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_COLLAPSED;\r\nimport static com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED;\r\nimport de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState.MIDDLE\nimport de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState.EXPANDED\nimport de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState.BOTTOM\nimport com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED\nimport com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_COLLAPSED\nimport de.schildbach.pte.dto.Trip\nimport de.grobox.transportr.trips.detail.TripDetailViewModel.SheetState\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onStateChanged(@NonNull View bottomSheet, int newState) {\r\n    if (newState == STATE_COLLAPSED) {\r\n        if (bottomSheetBehavior.isMiddle()) {\r\n            viewModel.getSheetState().setValue(MIDDLE);\r\n        } else if (bottomSheetBehavior.isBottom()) {\r\n            viewModel.getSheetState().setValue(BOTTOM);\r\n        }\r\n    } else if (newState == STATE_EXPANDED) {\r\n        viewModel.getSheetState().setValue(EXPANDED);\r\n    }\r\n}" ],
  "Trail-Sense/277" : [ "        swapData = null\n        setLoading(tradeService.state)\r\n\n--------------------------------------------------\n        val loading = state == SwapResultState.Loading\n        fromTokenService.setLoading(loading)\r\n        toTokenService.setLoading(loading)\n--------------------------------------------------\n        fromTokenService.setLoading(loading)\n        toTokenService.setLoading(loading)\r\n    }", "fun setLoading(loading: Boolean) {\r\n        isLoading = loading\r\n        syncState()\r\n    }" ],
  "VinylMusicPlayer/148" : [ "@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\r\n    Dialog dialog = super.onCreateDialog(savedInstanceState);\r\n    dialog.setOnShowListener(dialogInterface -> {\r\n        BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n        setupFullHeight(bottomSheetDialog);\r\n    });\r\n    return dialog;\r\n}\n--------------------------------------------------\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\r\n    Dialog dialog = super.onCreateDialog(savedInstanceState);\r\n    dialog.setOnShowListener(dialogInterface -> {\r\n        BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n        setupFullHeight(bottomSheetDialog);\r\n    });\r\n    return dialog;\r\n}\n--------------------------------------------------\n", "import android.app.Dialog;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.FrameLayout;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport de.danoeh.antennapod.R\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport android.widget.FrameLayout\nimport android.view.ViewGroup\nimport android.view.View\nimport android.app.Dialog\nprivate void setupFullHeight(BottomSheetDialog bottomSheetDialog) {\r\n    FrameLayout bottomSheet = bottomSheetDialog.findViewById(R.id.design_bottom_sheet);\r\n    if (bottomSheet != null) {\r\n        BottomSheetBehavior<FrameLayout> behavior = BottomSheetBehavior.from(bottomSheet);\r\n        ViewGroup.LayoutParams layoutParams = bottomSheet.getLayoutParams();\r\n        bottomSheet.setLayoutParams(layoutParams);\r\n        behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n    }\r\n}" ],
  "Iconify/503" : [ "updateEventColorInfo(defaultColor = defaultColor)\n--------------------------------------------------\nupdateEventColorInfo(eventType.color)\n--------------------------------------------------\nupdateEventColorInfo(calendarColor)", "private fun updateEventColorInfo(defaultColor: Int) {\r\n        val eventColor = if (mEventColor == 0) {\r\n            defaultColor\r\n        } else {\r\n            mEventColor\r\n        }\r\n        binding.eventColor.setFillWithStroke(eventColor, getProperBackgroundColor())\r\n    }" ],
  "Trail-Sense/278" : [ "= if (viewType == 1) {\n        viewHolderFactory.newHeaderViewHolder(parent, this::toggleGroup)\r\n    } else {", "private fun toggleGroup(group: Long) {\r\n        adapter.toggleCollapsed(group)\r\n        taskList.loadTaskListContent()\r\n    }" ],
  "Iconify/502" : [ "Preferences.getInstance(application)\n--------------------------------------------------\nAppWidgetManager.getInstance(this)\n--------------------------------------------------\nEditable.Factory.getInstance()\n--------------------------------------------------\nPreferences.getInstance(app)\n--------------------------------------------------\nPreferences.getInstance(this)\n--------------------------------------------------\nWorkManager.getInstance(this)\n--------------------------------------------------\nAppWidgetManager.getInstance(context)", "import android.app.Application\nfun getInstance(app: Application): Preferences {\r\n            return instance ?: synchronized(this) {\r\n                val instance = Preferences(app)\r\n                this.instance = instance\r\n                return instance\r\n            }\r\n        }\nImport(names=[android, app, Application], wildcard=false, alias=null)" ],
  "Trail-Sense/279" : [ "                                    is DrawerItem.Header -> {\n                                        viewModel.toggleCollapsed(it.type())\r\n                                    }\n--------------------------------------------------\n                    canAdd = it.canAdd,\n                    toggleCollapsed = { onClick(it) },\r\n                    onAddClick = { onAddClick(it) },\n--------------------------------------------------\n            padding = PaddingValues(start = 16.dp),\n            onClick = toggleCollapsed,\r\n        ) {\n--------------------------------------------------\n            )\n            IconButton(onClick = toggleCollapsed) {\r\n                val rotation by animateFloatAsState(", "fun toggleCollapsed(group: Long) {\r\n        if (collapsed.contains(group)) {\r\n            collapsed.remove(group)\r\n        } else {\r\n            collapsed.add(group)\r\n        }\r\n    }" ],
  "VinylMusicPlayer/142" : [ "", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.R\nimport java.util.List\npublic static boolean isSAFRequiredForSongs(List<Song> songs) {\r\n    for (Song song : songs) {\r\n        if (isSAFRequired(song))\r\n            return true;\r\n    }\r\n    return false;\r\n}" ],
  "Iconify/21" : [ "super.onCreateViewHolder(parent, viewType)", "import code.name.monkey.retromusic.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(activity).inflate(itemLayoutRes, parent, false)\n        return createViewHolder(view, viewType)\n    }\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)" ],
  "Iconify/24" : [ "super.onCreateViewHolder(parent, viewType)", "import code.name.monkey.retromusic.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(activity).inflate(itemLayoutRes, parent, false)\n        return createViewHolder(view, viewType)\n    }\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)" ],
  "Iconify/509" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/508" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/22" : [ "", "import android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val item = items[position]\r\n        holder.bindView(item, true, true) { itemView, layoutPosition ->\r\n            setupView(itemView, item, holder)\r\n        }\r\n        bindViewHolder(holder)\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Iconify/507" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1083" : [ "onLocationSelected(it)", "import de.schildbach.pte.dto.Location\nimport de.grobox.transportr.locations.WrapLocation\nimport com.mapbox.mapboxsdk.annotations.Marker\nprivate fun onLocationSelected(location: WrapLocation?) {\r\n        if (location == null) return\r\n        val latLng = location.latLng\r\n        addMarker(latLng)\r\n        animateTo(latLng, LOCATION_ZOOM)\r\n        viewModel.clearSelectedLocation()\r\n    }\nImport(names=[de, grobox, transportr, locations, WrapLocation], wildcard=false, alias=null)" ],
  "Trail-Sense/1084" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/923" : [ "        super.onSaveInstanceState(outState)\n        outState.putString(STATE_SELECTED_ACCOUNT_UUID, selectedAccountUuid)\r\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n--------------------------------------------------\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n        outState.putString(STATE_SELECTED_FOLDER_DISPLAY_NAME, selectedFolderDisplayName)\r\n    }\n--------------------------------------------------\neditor.putString(\"x\", \"y\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"storage-value\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"other-value\")\n--------------------------------------------------\nputString(key, value.name)", "override fun putString(key: String, value: String?) = apply {\r\n            if (value == null) {\r\n                remove(key)\r\n            } else {\r\n                changes[key] = value\r\n                removals.remove(key)\r\n            }\r\n        }" ],
  "Trail-Sense/1081" : [ "setColor(c)\n--------------------------------------------------\nbinding.frequencyChart.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreRing.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreView.setColor(androidColor)\n--------------------------------------------------\nbinding.streakChart.setColor(androidColor)\n--------------------------------------------------\nbinding.targetChart.setColor(androidColor)\n--------------------------------------------------\nsetColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nchart.setColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nring.setColor(fgColor)", "import android.graphics.Color\nfun setColor(color: Int) {\r\n        this.color = color\r\n        invalidate()\r\n    }" ],
  "VinylMusicPlayer/251" : [ "streamFetcher?.cleanup()", "import java.io.InputStream\nimport java.io.IOException\nimport java.io.ByteArrayInputStream\noverride fun cleanup() {\n        // already cleaned up in loadData and ByteArrayInputStream will be GC'd\n        if (stream != null) {\n            try {\n                stream?.close()\n            } catch (ignore: IOException) {\n                // can't do much about it\n            }\n        }\n    }\nImport(names=[java, io, ByteArrayInputStream], wildcard=false, alias=null)\nImport(names=[java, io, IOException], wildcard=false, alias=null)\nImport(names=[java, io, InputStream], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/250" : [ "private File leafPartToContentValues(ContentValues cv, Part part, Body body) throws MessagingException, IOException {\r\n    AttachmentViewInfo attachment = attachmentInfoExtractor.extractAttachmentInfoForDatabase(part);\r\n    cv.put(\"display_name\", attachment.displayName);\r\n    String encoding = getTransferEncoding(part);\r\n    if (!(body instanceof SizeAware)) {\r\n        throw new IllegalStateException(\"Body needs to implement SizeAware\");\r\n    }\r\n    SizeAware sizeAwareBody = (SizeAware) body;\r\n    long fileSize = sizeAwareBody.getSize();\r\n    File file = null;\r\n    int dataLocation;\r\n    if (fileSize > MAX_BODY_SIZE_FOR_DATABASE) {\r\n        dataLocation = DataLocation.ON_DISK;\r\n        file = writeBodyToDiskIfNecessary(part);\r\n        long size = decodeAndCountBytes(file, encoding, fileSize);\r\n        cv.put(\"decoded_body_size\", size);\r\n    } else {\r\n        dataLocation = DataLocation.IN_DATABASE;\r\n        byte[] bodyData = getBodyBytes(body);\r\n        cv.put(\"data\", bodyData);\r\n        long size = decodeAndCountBytes(bodyData, encoding, bodyData.length);\r\n        cv.put(\"decoded_body_size\", size);\r\n    }\r\n    cv.put(\"data_location\", dataLocation);\r\n    cv.put(\"encoding\", encoding);\r\n    cv.put(\"content_id\", part.getContentId());\r\n    return file;\r\n}\n--------------------------------------------------\nprivate File leafPartToContentValues(ContentValues cv, Part part, Body body) throws MessagingException, IOException {\r\n    AttachmentViewInfo attachment = attachmentInfoExtractor.extractAttachmentInfoForDatabase(part);\r\n    cv.put(\"display_name\", attachment.displayName);\r\n    String encoding = getTransferEncoding(part);\r\n    if (!(body instanceof SizeAware)) {\r\n        throw new IllegalStateException(\"Body needs to implement SizeAware\");\r\n    }\r\n    SizeAware sizeAwareBody = (SizeAware) body;\r\n    long fileSize = sizeAwareBody.getSize();\r\n    File file = null;\r\n    int dataLocation;\r\n    if (fileSize > MAX_BODY_SIZE_FOR_DATABASE) {\r\n        dataLocation = DataLocation.ON_DISK;\r\n        file = writeBodyToDiskIfNecessary(part);\r\n        long size = decodeAndCountBytes(file, encoding, fileSize);\r\n        cv.put(\"decoded_body_size\", size);\r\n    } else {\r\n        dataLocation = DataLocation.IN_DATABASE;\r\n        byte[] bodyData = getBodyBytes(body);\r\n        cv.put(\"data\", bodyData);\r\n        long size = decodeAndCountBytes(bodyData, encoding, bodyData.length);\r\n        cv.put(\"decoded_body_size\", size);\r\n    }\r\n    cv.put(\"data_location\", dataLocation);\r\n    cv.put(\"encoding\", encoding);\r\n    cv.put(\"content_id\", part.getContentId());\r\n    return file;\r\n}\n--------------------------------------------------\n", "import java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.FileInputStream\nimport java.io.File\nprivate long decodeAndCountBytes(File file, String encoding, long fallbackValue) throws IOException {\r\n    InputStream inputStream = new FileInputStream(file);\r\n    try {\r\n        return decodeAndCountBytes(inputStream, encoding, fallbackValue);\r\n    } finally {\r\n        inputStream.close();\r\n    }\r\n}" ],
  "Trail-Sense/1087" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/924" : [ "@Override\r\npublic void onDismiss(DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    dismissed = true;\r\n    if (getActivity() != null && ((MainActivity) getActivity()).help_fragment == this)\r\n        ((MainActivity) getActivity()).help_fragment = null;\r\n}\n--------------------------------------------------\n", "import android.app.Dialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.DialogInterface\nimport android.app.Dialog\npublic void onDismiss(DialogInterface dialog) {\r\n    mDialog = null;\r\n    onDialogClosed(mWhichButtonClicked == DialogInterface.BUTTON_POSITIVE);\r\n}" ],
  "Trail-Sense/1088" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "MaterialFiles/927" : [ "@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (mImageURL != null)\r\n        outState.putString(\"imageURL\", mImageURL);\r\n    if (mVideoURL != null)\r\n        outState.putString(\"videoURL\", mVideoURL);\r\n}\n--------------------------------------------------\n@Override\r\npublic void onSaveInstanceState(Bundle state) {\r\n    super.onSaveInstanceState(state);\r\n    if (login != null && login.getVisibility() == View.VISIBLE) {\r\n        if (email != null)\r\n            state.putString(\"email\", email.getText().toString());\r\n        if (password != null)\r\n            state.putString(\"password\", password.getText().toString());\r\n        if (host != null)\r\n            state.putString(\"host\", host.getText().toString());\r\n        if (name != null)\r\n            state.putString(\"name\", name.getText().toString());\r\n        if (signupBtn != null)\r\n            state.putBoolean(\"signup\", signupBtn.getVisibility() == View.VISIBLE);\r\n        if (loginBtn != null)\r\n            state.putBoolean(\"login\", loginBtn.getVisibility() == View.VISIBLE);\r\n        if (sendAccessLinkBtn != null)\r\n            state.putBoolean(\"forgotPassword\", sendAccessLinkBtn.getVisibility() == View.VISIBLE);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.os.Parcel;\r\nimport android.os.Parcelable;\r\nimport android.os.Parcelable\nimport android.os.Parcel\n@Override\r\nprotected Parcelable onSaveInstanceState() {\r\n    final Parcelable superState = super.onSaveInstanceState();\r\n    if (isPersistent()) {\r\n        // No need to save instance state since it's persistent\r\n        return superState;\r\n    }\r\n    final SavedState myState = new SavedState(superState);\r\n    myState.text = getText();\r\n    return myState;\r\n}" ],
  "Trail-Sense/1085" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/926" : [ "view.notes.setText(requireArguments().getString(\"notes\")!!)\n--------------------------------------------------\nbinding.xTimesPerMonthTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.everyXDaysTextView.setText(freqDenominator.toString())\n--------------------------------------------------\nbinding.xTimesPerWeekTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.xTimesPerYDaysXTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.xTimesPerYDaysYTextView.setText(freqDenominator.toString())\n--------------------------------------------------\nview.notes.setText(originalNotes)\n--------------------------------------------------\nsetText(when {\n    originalValue < 0.01 -> \"0\"\n    else -> DecimalFormat(\"#.##\").format(originalValue)\n})\n--------------------------------------------------\nview.value.setText((Entry.SKIP.toDouble() / 1000).toString())\n--------------------------------------------------\nbinding.nameInput.setText(habit.name)\n--------------------------------------------------\nbinding.questionInput.setText(habit.question)\n--------------------------------------------------\nbinding.notesInput.setText(habit.description)\n--------------------------------------------------\nbinding.unitInput.setText(habit.unit)\n--------------------------------------------------\nbinding.targetInput.setText(habit.targetValue.toString())\n--------------------------------------------------\nfindViewById<TextView>(R.id.message).setText(getEmptyMessage())\n--------------------------------------------------\nring.setText(text)", "fun setText(text: String?) {\r\n        this.text = text\r\n        invalidate()\r\n    }" ],
  "Trail-Sense/1086" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/259" : [ "{\n            this.bitmapPool = bitmapPool\n            return this\n        }\n--------------------------------------------------\n{\n            return if (bitmapPool != null) {\n                BlurTransformation(this)", "import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool\nimport android.graphics.Bitmap\nfun bitmapPool(bitmapPool: BitmapPool?): Builder {\n            this.bitmapPool = bitmapPool\n            return this\n        }\nimport android.graphics.Bitmap\nimport com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool" ],
  "Trail-Sense/1089" : [ "callback.onMapReady(this)", "import org.tasks.location.MapFragment\nimport org.tasks.R\noverride fun onMapReady(mapFragment: MapFragment) {\r\n        map = mapFragment\r\n        map.setMarkers(listOf(place))\r\n        map.disableGestures()\r\n        map.movePosition(place.mapPosition, false)\r\n        updateGeofenceCircle()\r\n    }\nimport org.tasks.R\nimport org.tasks.location.MapFragment" ],
  "VinylMusicPlayer/258" : [ "private static StringBuilder getStringBuilder() {\r\n    if (sStringBuilder.get() == null) {\r\n        sStringBuilder.set(new StringBuilder());\r\n    }\r\n    return sStringBuilder.get();\r\n}\n--------------------------------------------------\nprivate static StringBuilder getStringBuilder() {\r\n    if (sStringBuilder.get() == null) {\r\n        sStringBuilder.set(new StringBuilder());\r\n    }\r\n    return sStringBuilder.get();\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable\n/**\r\n * Get the item in the list of loaded items at the provided index.\r\n *\r\n * @param index Index in the loaded item list. Must be >= 0, and &lt; {@link #size()}\r\n * @return The item at the passed index, or null if a null placeholder is at the specified\r\n *         position.\r\n *\r\n * @see #size()\r\n */\r\n@Override\r\n@Nullable\r\npublic T get(int index) {\r\n    T item = mStorage.get(index);\r\n    if (item != null) {\r\n        mLastItem = item;\r\n    }\r\n    return item;\r\n}" ],
  "VinylMusicPlayer/253" : [ "@Nullable\r\n@Override\r\npublic Request authenticate(Route route, @NonNull Response response) {\r\n    if (response.code() == 401) {\r\n        String accessTokenHeader = response.request().header(APIUtils.AUTHORIZATION_KEY);\r\n        if (accessTokenHeader == null) {\r\n            return null;\r\n        }\r\n        String accessToken = accessTokenHeader.substring(APIUtils.AUTHORIZATION_BASE.length());\r\n        synchronized (this) {\r\n            Account account = mRedditDataRoomDatabase.accountDao().getCurrentAccount();\r\n            if (account == null) {\r\n                return null;\r\n            }\r\n            String accessTokenFromDatabase = account.getAccessToken();\r\n            if (accessToken.equals(accessTokenFromDatabase)) {\r\n                String newAccessToken = refreshAccessToken(account);\r\n                if (!newAccessToken.equals(\"\")) {\r\n                    return response.request().newBuilder().headers(Headers.of(APIUtils.getOAuthHeader(newAccessToken))).build();\r\n                } else {\r\n                    return null;\r\n                }\r\n            } else {\r\n                return response.request().newBuilder().headers(Headers.of(APIUtils.getOAuthHeader(accessTokenFromDatabase))).build();\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n--------------------------------------------------\n@Nullable\r\n@Override\r\npublic Request authenticate(Route route, @NonNull Response response) {\r\n    if (response.code() == 401) {\r\n        String accessTokenHeader = response.request().header(APIUtils.AUTHORIZATION_KEY);\r\n        if (accessTokenHeader == null) {\r\n            return null;\r\n        }\r\n        String accessToken = accessTokenHeader.substring(APIUtils.AUTHORIZATION_BASE.length());\r\n        synchronized (this) {\r\n            Account account = mRedditDataRoomDatabase.accountDao().getCurrentAccount();\r\n            if (account == null) {\r\n                return null;\r\n            }\r\n            String accessTokenFromDatabase = account.getAccessToken();\r\n            if (accessToken.equals(accessTokenFromDatabase)) {\r\n                String newAccessToken = refreshAccessToken(account);\r\n                if (!newAccessToken.equals(\"\")) {\r\n                    return response.request().newBuilder().headers(Headers.of(APIUtils.getOAuthHeader(newAccessToken))).build();\r\n                } else {\r\n                    return null;\r\n                }\r\n            } else {\r\n                return response.request().newBuilder().headers(Headers.of(APIUtils.getOAuthHeader(accessTokenFromDatabase))).build();\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.annotation.Nullable\n@Override\r\npublic boolean equals(@Nullable Object obj) {\r\n    if (!(obj instanceof Post)) {\r\n        return false;\r\n    }\r\n    return ((Post) obj).id.equals(id);\r\n}" ],
  "VinylMusicPlayer/252" : [ "@Nullable\r\n@Override\r\npublic Request authenticate(Route route, @NonNull Response response) {\r\n    if (response.code() == 401) {\r\n        String accessTokenHeader = response.request().header(APIUtils.AUTHORIZATION_KEY);\r\n        if (accessTokenHeader == null) {\r\n            return null;\r\n        }\r\n        String accessToken = accessTokenHeader.substring(APIUtils.AUTHORIZATION_BASE.length());\r\n        synchronized (this) {\r\n            Account account = mRedditDataRoomDatabase.accountDao().getCurrentAccount();\r\n            if (account == null) {\r\n                return null;\r\n            }\r\n            String accessTokenFromDatabase = account.getAccessToken();\r\n            if (accessToken.equals(accessTokenFromDatabase)) {\r\n                String newAccessToken = refreshAccessToken(account);\r\n                if (!newAccessToken.equals(\"\")) {\r\n                    return response.request().newBuilder().headers(Headers.of(APIUtils.getOAuthHeader(newAccessToken))).build();\r\n                } else {\r\n                    return null;\r\n                }\r\n            } else {\r\n                return response.request().newBuilder().headers(Headers.of(APIUtils.getOAuthHeader(accessTokenFromDatabase))).build();\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n--------------------------------------------------\n@Nullable\r\n@Override\r\npublic Request authenticate(Route route, @NonNull Response response) {\r\n    if (response.code() == 401) {\r\n        String accessTokenHeader = response.request().header(APIUtils.AUTHORIZATION_KEY);\r\n        if (accessTokenHeader == null) {\r\n            return null;\r\n        }\r\n        String accessToken = accessTokenHeader.substring(APIUtils.AUTHORIZATION_BASE.length());\r\n        synchronized (this) {\r\n            Account account = mRedditDataRoomDatabase.accountDao().getCurrentAccount();\r\n            if (account == null) {\r\n                return null;\r\n            }\r\n            String accessTokenFromDatabase = account.getAccessToken();\r\n            if (accessToken.equals(accessTokenFromDatabase)) {\r\n                String newAccessToken = refreshAccessToken(account);\r\n                if (!newAccessToken.equals(\"\")) {\r\n                    return response.request().newBuilder().headers(Headers.of(APIUtils.getOAuthHeader(newAccessToken))).build();\r\n                } else {\r\n                    return null;\r\n                }\r\n            } else {\r\n                return response.request().newBuilder().headers(Headers.of(APIUtils.getOAuthHeader(accessTokenFromDatabase))).build();\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.annotation.Nullable\n@Override\r\npublic boolean equals(@Nullable Object obj) {\r\n    if (!(obj instanceof Post)) {\r\n        return false;\r\n    }\r\n    return ((Post) obj).id.equals(id);\r\n}" ],
  "VinylMusicPlayer/255" : [ "@Override\r\npublic void write(JsonWriter writer, @Nullable Boolean value) {\r\n    serializeNullable(value, writer);\r\n}\n--------------------------------------------------\npublic static void serialize(final Map<String, String> value, final JsonWriter sw) {\r\n    sw.writeByte(JsonWriter.OBJECT_START);\r\n    final int size = value.size();\r\n    if (size > 0) {\r\n        final Iterator<Map.Entry<String, String>> iterator = value.entrySet().iterator();\r\n        Map.Entry<String, String> kv = iterator.next();\r\n        StringConverter.serializeShort(kv.getKey(), sw);\r\n        sw.writeByte(JsonWriter.SEMI);\r\n        StringConverter.serializeNullable(kv.getValue(), sw);\r\n        for (int i = 1; i < size; i++) {\r\n            sw.writeByte(JsonWriter.COMMA);\r\n            kv = iterator.next();\r\n            StringConverter.serializeShort(kv.getKey(), sw);\r\n            sw.writeByte(JsonWriter.SEMI);\r\n            StringConverter.serializeNullable(kv.getValue(), sw);\r\n        }\r\n    }\r\n    sw.writeByte(JsonWriter.OBJECT_END);\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.annotation.Nullable\npublic static void serializeNullable(@Nullable final Long value, final JsonWriter sw) {\r\n    if (value == null) {\r\n        sw.writeNull();\r\n    } else {\r\n        serialize(value, sw);\r\n    }\r\n}" ],
  "VinylMusicPlayer/254" : [ "final void dispatchLoadRange(@PageResult.ResultType int resultType, int startPosition, int count, @NonNull Executor mainThreadExecutor, @NonNull PageResult.Receiver<T> receiver) {\r\n    LoadRangeCallback<T> callback = new LoadRangeCallbackImpl<>(this, resultType, startPosition, mainThreadExecutor, receiver);\r\n    if (count == 0) {\r\n        callback.onResult(Collections.<T>emptyList());\r\n    } else {\r\n        loadRange(new LoadRangeParams(startPosition, count), callback);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void loadInitial(@NonNull LoadInitialParams params, @NonNull LoadInitialCallback<T> callback) {\r\n    int totalCount = countItems();\r\n    if (totalCount == 0) {\r\n        callback.onResult(Collections.<T>emptyList(), 0, 0);\r\n        return;\r\n    }\r\n    // bound the size requested, based on known count\r\n    final int firstLoadPosition = computeInitialLoadPosition(params, totalCount);\r\n    final int firstLoadSize = computeInitialLoadSize(params, firstLoadPosition, totalCount);\r\n    // convert from legacy behavior\r\n    List<T> list = loadRange(firstLoadPosition, firstLoadSize);\r\n    if (list != null && list.size() == firstLoadSize) {\r\n        callback.onResult(list, firstLoadPosition, totalCount);\r\n    } else {\r\n        // null list, or size doesn't match request\r\n        // The size check is a WAR for Room 1.0, subsequent versions do the check in Room\r\n        invalidate();\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport java.util.List;\r\nimport java.util.List\nimport androidx.annotation.NonNull\n@Override\r\npublic void loadRange(@NonNull LoadRangeParams params, @NonNull LoadRangeCallback<T> callback) {\r\n    List<T> list = loadRange(params.startPosition, params.loadSize);\r\n    if (list != null) {\r\n        callback.onResult(list);\r\n    } else {\r\n        invalidate();\r\n    }\r\n}" ],
  "Android-Password-Store/209" : [ "markSeenInPrefsAndFinish()", "import com.github.ashutoshgngwr.noice.R\nimport androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nprivate fun markSeenInPrefsAndFinish() {\r\n    PreferenceManager.getDefaultSharedPreferences(this).edit {\r\n      putBoolean(PREF_HAS_USER_SEEN_APP_INTRO, true)\r\n    }\r\n\r\n    finish()\r\n  }\nImport(names=[androidx, core, content, edit], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Android-Password-Store/204" : [ "@Override\r\npublic int onStartCommand(Intent intent, int flags, int startId) {\r\n    int mediaType = intent.getIntExtra(EXTRA_MEDIA_TYPE, EXTRA_MEDIA_TYPE_IMAGE);\r\n    builder = new NotificationCompat.Builder(this, getNotificationChannelId(mediaType));\r\n    NotificationChannelCompat serviceChannel = new NotificationChannelCompat.Builder(getNotificationChannelId(mediaType), NotificationManagerCompat.IMPORTANCE_LOW).setName(getNotificationChannel(mediaType)).build();\r\n    notificationManager.createNotificationChannel(serviceChannel);\r\n    int randomNotificationIdOffset = new Random().nextInt(10000);\r\n    switch(intent.getIntExtra(EXTRA_MEDIA_TYPE, EXTRA_MEDIA_TYPE_IMAGE)) {\r\n        case EXTRA_MEDIA_TYPE_GIF:\r\n            startForeground(NotificationUtils.DOWNLOAD_GIF_NOTIFICATION_ID + randomNotificationIdOffset, createNotification(intent.getStringExtra(EXTRA_FILE_NAME)));\r\n            break;\r\n        case EXTRA_MEDIA_TYPE_VIDEO:\r\n            startForeground(NotificationUtils.DOWNLOAD_VIDEO_NOTIFICATION_ID + randomNotificationIdOffset, createNotification(intent.getStringExtra(EXTRA_FILE_NAME)));\r\n            break;\r\n        default:\r\n            startForeground(NotificationUtils.DOWNLOAD_IMAGE_NOTIFICATION_ID + randomNotificationIdOffset, createNotification(intent.getStringExtra(EXTRA_FILE_NAME)));\r\n    }\r\n    Message msg = serviceHandler.obtainMessage();\r\n    Bundle bundle = intent.getExtras();\r\n    msg.setData(bundle);\r\n    msg.arg1 = randomNotificationIdOffset;\r\n    serviceHandler.sendMessage(msg);\r\n    return START_NOT_STICKY;\r\n}\n--------------------------------------------------\n@Override\r\npublic int onStartCommand(Intent intent, int flags, int startId) {\r\n    int mediaType = intent.getIntExtra(EXTRA_MEDIA_TYPE, EXTRA_MEDIA_TYPE_IMAGE);\r\n    builder = new NotificationCompat.Builder(this, getNotificationChannelId(mediaType));\r\n    NotificationChannelCompat serviceChannel = new NotificationChannelCompat.Builder(getNotificationChannelId(mediaType), NotificationManagerCompat.IMPORTANCE_LOW).setName(getNotificationChannel(mediaType)).build();\r\n    notificationManager.createNotificationChannel(serviceChannel);\r\n    int randomNotificationIdOffset = new Random().nextInt(10000);\r\n    switch(intent.getIntExtra(EXTRA_MEDIA_TYPE, EXTRA_MEDIA_TYPE_IMAGE)) {\r\n        case EXTRA_MEDIA_TYPE_GIF:\r\n            startForeground(NotificationUtils.DOWNLOAD_GIF_NOTIFICATION_ID + randomNotificationIdOffset, createNotification(intent.getStringExtra(EXTRA_FILE_NAME)));\r\n            break;\r\n        case EXTRA_MEDIA_TYPE_VIDEO:\r\n            startForeground(NotificationUtils.DOWNLOAD_VIDEO_NOTIFICATION_ID + randomNotificationIdOffset, createNotification(intent.getStringExtra(EXTRA_FILE_NAME)));\r\n            break;\r\n        default:\r\n            startForeground(NotificationUtils.DOWNLOAD_IMAGE_NOTIFICATION_ID + randomNotificationIdOffset, createNotification(intent.getStringExtra(EXTRA_FILE_NAME)));\r\n    }\r\n    Message msg = serviceHandler.obtainMessage();\r\n    Bundle bundle = intent.getExtras();\r\n    msg.setData(bundle);\r\n    msg.arg1 = randomNotificationIdOffset;\r\n    serviceHandler.sendMessage(msg);\r\n    return START_NOT_STICKY;\r\n}\n--------------------------------------------------\n", "import android.app.Notification;\r\nimport ml.docilealligator.infinityforreddit.customtheme.CustomThemeWrapper\nimport ml.docilealligator.infinityforreddit.R\nimport android.app.Notification\nprivate Notification createNotification(String fileName) {\r\n    builder.setContentTitle(fileName).setContentText(getString(R.string.downloading)).setProgress(100, 0, false);\r\n    return builder.setSmallIcon(R.drawable.ic_notification).setColor(mCustomThemeWrapper.getColorPrimaryLightTheme()).build();\r\n}" ],
  "Trail-Sense/1090" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Android-Password-Store/201" : [ "", "@Override\r\npublic void onCreate() {\r\n    // Create a new authenticator object\r\n    mAuthenticator = new Authenticator(this);\r\n}" ],
  "Trail-Sense/1091" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Android-Password-Store/203" : [ "// Backup files\r\nprotected String backupFiles(Context context, boolean notifyProgress) {\r\n    String status;\r\n    int count, incr = 0;\r\n    DocumentFile dir, dest_dir;\r\n    dir = DocumentFile.fromTreeUri(getApplicationContext(), mBackupUri);\r\n    if (mSubDirPath.equals(Const.INCREMENTAL_BACKUP_PATH)) {\r\n        try {\r\n            // Handle merged folder\r\n            dest_dir = Utils.getSAFSubDir(getApplicationContext(), dir, Const.INCREMENTAL_BACKUP_PATH);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            status = context.getResources().getString(R.string.error_backup);\r\n            return status;\r\n        }\r\n    } else {\r\n        // Handle timestamped folder\r\n        dest_dir = dir.createDirectory(mSubDirPath);\r\n    }\r\n    // Incremental backup\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.HOUR, -24);\r\n    List<Long> results = mDatasource.getAllActiveRecordsIDsByLastModified(DBHelper.COLUMN_MODIFIED, Const.SORT_DESC, cal.getTimeInMillis(), \">\");\r\n    count = results.size();\r\n    if (notifyProgress) {\r\n        mBuilder.setContentTitle(context.getResources().getString(R.string.status_auto_backup)).setContentText(context.getResources().getString(R.string.status_auto_backup_in_progress)).setSmallIcon(R.drawable.ic_archive_vector).setColor(ContextCompat.getColor(DBApplication.getAppContext(), R.color.colorPrimary));\r\n        mBuilder.setProgress(100, incr, false);\r\n        mNotifyManager.notify(0, mBuilder.setContentIntent(mIntent).build());\r\n    }\r\n    for (int i = 0; i < count; i++) {\r\n        exportSAFFile(dest_dir, results.get(i));\r\n        // Update notification\r\n        if (notifyProgress) {\r\n            incr = (int) ((i / (float) count) * 100);\r\n            mBuilder.setProgress(100, incr, false);\r\n            mNotifyManager.notify(0, mBuilder.build());\r\n        }\r\n    }\r\n    // When the loop is finished, updates the notification\r\n    Date now = new Date();\r\n    status = context.getResources().getString(R.string.status_auto_backup_completed) + \" \" + Utils.getSystemDateFormat(context, Locale.getDefault()).format(now) + Utils.getSystemTimeFormat(context, Locale.getDefault()).format(now);\r\n    return status;\r\n}\n--------------------------------------------------\n// Backup files\r\nprotected String backupFiles(Context context, boolean notifyProgress) {\r\n    String status;\r\n    int count, incr = 0;\r\n    DocumentFile dir, dest_dir, attachment_dir, font_dir;\r\n    dir = DocumentFile.fromTreeUri(getApplicationContext(), mBackupUri);\r\n    if (mSubDirPath.equals(Const.INCREMENTAL_BACKUP_PATH)) {\r\n        try {\r\n            // Handle merged folder\r\n            dest_dir = Utils.getSAFSubDir(getApplicationContext(), dir, Const.INCREMENTAL_BACKUP_PATH);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            status = context.getResources().getString(R.string.error_backup);\r\n            return status;\r\n        }\r\n    } else {\r\n        // Handle timestamped folder\r\n        dest_dir = dir.createDirectory(mSubDirPath);\r\n    }\r\n    List<Long> results = mDatasource.getAllActiveRecordsIDs(DBHelper.COLUMN_MODIFIED, Const.SORT_DESC);\r\n    count = results.size();\r\n    if (notifyProgress) {\r\n        mBuilder.setContentTitle(context.getResources().getString(R.string.status_auto_backup)).setContentText(context.getResources().getString(R.string.status_auto_backup_in_progress)).setSmallIcon(R.drawable.ic_archive_vector).setColor(ContextCompat.getColor(DBApplication.getAppContext(), R.color.colorPrimary));\r\n        mBuilder.setProgress(100, incr, false);\r\n        mNotifyManager.notify(0, mBuilder.setContentIntent(mIntent).build());\r\n    }\r\n    for (int i = 0; i < count; i++) {\r\n        exportSAFFile(dest_dir, results.get(i));\r\n        // Update notification\r\n        if (notifyProgress) {\r\n            incr = (int) ((i / (float) count) * 100);\r\n            mBuilder.setProgress(100, incr, false);\r\n            mNotifyManager.notify(0, mBuilder.build());\r\n        }\r\n    }\r\n    // Backup attachments\r\n    attachment_dir = Utils.getSAFSubDir(getApplicationContext(), dest_dir, Const.ATTACHMENT_PATH);\r\n    Utils.exportToSAFFolder(getApplicationContext(), new File(mLocalRepoPath + \"/\" + Const.ATTACHMENT_PATH), attachment_dir, true);\r\n    // Backup fonts\r\n    font_dir = Utils.getSAFSubDir(getApplicationContext(), dest_dir, Const.CUSTOM_FONTS_PATH);\r\n    Utils.exportToSAFFolder(getApplicationContext(), new File(mLocalRepoPath + \"/\" + Const.CUSTOM_FONTS_PATH), font_dir, true);\r\n    // Backup multitype file\r\n    if (Utils.fileExists(getApplicationContext(), mLocalRepoPath, Const.MULTI_TYPE))\r\n        Utils.exportToSAFFile(getApplicationContext(), mLocalRepoPath + \"/\", Const.MULTI_TYPE, dest_dir);\r\n    // When the loop is finished, updates the notification\r\n    Date now = new Date();\r\n    status = context.getResources().getString(R.string.status_auto_backup_completed) + \" \" + Utils.getSystemDateFormat(context, Locale.getDefault()).format(now) + Utils.getSystemTimeFormat(context, Locale.getDefault()).format(now);\r\n    return status;\r\n}\n--------------------------------------------------\n", "import androidx.documentfile.provider.DocumentFile;\r\nimport java.io.File;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.io.File\nimport androidx.documentfile.provider.DocumentFile\nimport android.content.Context\n// Export a file to SAF\r\nprotected void exportSAFFile(DocumentFile dir, Long id) {\r\n    try {\r\n        String title, content;\r\n        DBEntry entry;\r\n        // Get content\r\n        List<DBEntry> results = mDatasource.getRecordById(id);\r\n        if (results.size() > 0) {\r\n            entry = results.get(0);\r\n            title = entry.getTitle();\r\n            content = entry.getContent();\r\n            Utils.writeSAFFile(getApplicationContext(), dir, title, content);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}" ],
  "Trail-Sense/1095" : [ "            synchronized(wakeLock) {\n                wakeLock.setReferenceCounted(counted)\r\n            }", "override fun setReferenceCounted(counted: Boolean) {\r\n            synchronized(wakeLock) {\r\n                wakeLock.setReferenceCounted(counted)\r\n            }\r\n        }" ],
  "MaterialFiles/931" : [ "            else ->\n                super.onActivityResult(requestCode, resultCode, data)\r\n        }\n--------------------------------------------------\n            }\n            else -> super.onActivityResult(requestCode, resultCode, data)\r\n        }\n--------------------------------------------------\nsuper.onActivityResult(requestCode, resultCode, data)\n--------------------------------------------------\ntargetFragment?.onActivityResult(targetRequestCode, RESULT_OK, data)\n--------------------------------------------------\ntargetFragment?.onActivityResult(targetRequestCode, RESULT_CANCELED, null)\n--------------------------------------------------\ntargetFragment?.onActivityResult(targetRequestCode, RESULT_OK, null)\n--------------------------------------------------\nonActivityResult(targetRequestCode, RESULT_OK, Intent().putExtra(EXTRA_TIMESTAMP, DateTime(year, month, day).millis))\n--------------------------------------------------\ntargetFragment?.onActivityResult(targetRequestCode, RESULT_OK, intent)\n--------------------------------------------------\nonActivityResult(targetRequestCode, RESULT_OK, Intent().putExtra(EXTRA_SELECTED, selected))\n--------------------------------------------------\ntargetFragment!!.onActivityResult(targetRequestCode, Activity.RESULT_OK, data)", "import org.tasks.R\nimport kotlinx.coroutines.launch\nimport androidx.lifecycle.lifecycleScope\nimport android.content.Intent\nimport android.app.Activity\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        if (requestCode == REQUEST_PURCHASE) {\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                lifecycleScope.launch {\r\n                    billingClient.queryPurchases()\r\n                }\r\n            }\r\n        } else {\r\n            super.onActivityResult(requestCode, resultCode, data)\r\n        }\r\n    }\nImport(names=[android, app, Activity], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, lifecycleScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)\nImport(names=[org, tasks, R], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/240" : [ "public List<LocalMessage> searchForMessages(LocalSearch search) throws MessagingException {\r\n    StringBuilder query = new StringBuilder();\r\n    List<String> queryArgs = new ArrayList<>();\r\n    SqlQueryBuilder.buildWhereClause(search.getConditions(), query, queryArgs);\r\n    // Avoid \"ambiguous column name\" error by prefixing \"id\" with the message table name\r\n    String where = SqlQueryBuilder.addPrefixToSelection(new String[] { \"id\" }, \"messages.\", query.toString());\r\n    String[] selectionArgs = queryArgs.toArray(new String[queryArgs.size()]);\r\n    String sqlQuery = \"SELECT \" + GET_MESSAGES_COLS + \"FROM messages \" + \"LEFT JOIN threads ON (threads.message_id = messages.id) \" + \"LEFT JOIN message_parts ON (message_parts.id = messages.message_part_id) \" + \"LEFT JOIN folders ON (folders.id = messages.folder_id) WHERE \" + \"(empty = 0 AND deleted = 0)\" + ((!TextUtils.isEmpty(where)) ? \" AND (\" + where + \")\" : \"\") + \" ORDER BY date DESC\";\r\n    Timber.d(\"Query = %s\", sqlQuery);\r\n    return getMessages(null, sqlQuery, selectionArgs);\r\n}\n--------------------------------------------------\n", "public static String addPrefixToSelection(String[] columnNames, String prefix, String selection) {\r\n    String result = selection;\r\n    for (String columnName : columnNames) {\r\n        result = result.replaceAll(\"(?<=^|[^\\\\.])\\\\b\" + columnName + \"\\\\b\", prefix + columnName);\r\n    }\r\n    return result;\r\n}" ],
  "Trail-Sense/1092" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Android-Password-Store/210" : [ "@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    try {\r\n        switch(requestCode) {\r\n            case REQUEST_DEFAULT_FOLDER:\r\n                if (resultCode == RESULT_OK && data != null)\r\n                    onDefaultFolder(data.getData());\r\n                else\r\n                    onDefaultFolder(null);\r\n                break;\r\n        }\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    try {\r\n        switch(requestCode) {\r\n            case REQUEST_DEFAULT_FOLDER:\r\n                if (resultCode == RESULT_OK && data != null)\r\n                    onDefaultFolder(data.getData());\r\n                else\r\n                    onDefaultFolder(null);\r\n                break;\r\n        }\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.SharedPreferences;\r\nimport android.net.Uri;\r\nimport androidx.preference.PreferenceManager;\r\nimport androidx.preference.PreferenceManager\nimport android.net.Uri\nimport android.content.SharedPreferences\nprivate void onDefaultFolder(Uri uri) {\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getContext());\r\n    if (uri == null)\r\n        prefs.edit().remove(\"default_folder\").apply();\r\n    else\r\n        prefs.edit().putString(\"default_folder\", uri.toString()).apply();\r\n}" ],
  "Trail-Sense/1098" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1096" : [ "initialize()\n--------------------------------------------------\ninitialize(context)", "private fun initialize() {\r\n        paintBackground.color = backgroundColor\r\n        paintBackground.isAntiAlias = true\r\n        paintProgress.isAntiAlias = true\r\n    }" ],
  "VinylMusicPlayer/245" : [ "private static boolean matchMessage(Context context, EntityMessage message, SearchCriteria criteria, boolean partial) {\r\n    if (criteria.with_unseen) {\r\n        if (message.ui_seen)\r\n            return false;\r\n    }\r\n    if (criteria.with_flagged) {\r\n        if (!message.ui_flagged)\r\n            return false;\r\n    }\r\n    if (criteria.with_hidden) {\r\n        if (message.ui_snoozed == null)\r\n            return false;\r\n    }\r\n    if (criteria.with_encrypted) {\r\n        if (message.encrypt == null || EntityMessage.ENCRYPT_NONE.equals(message.encrypt))\r\n            return false;\r\n    }\r\n    if (criteria.with_attachments) {\r\n        if (message.attachments == 0)\r\n            return false;\r\n    }\r\n    //\r\n    if (criteria.with_notes) {\r\n        if (message.notes == null)\r\n            return false;\r\n    }\r\n    //\r\n    if (criteria.with_size != null) {\r\n        if (message.total == null || message.total < criteria.with_size)\r\n            return false;\r\n    }\r\n    //\r\n    if (criteria.before != null) {\r\n        if (message.received > criteria.before)\r\n            return false;\r\n    }\r\n    //\r\n    if (criteria.after != null) {\r\n        if (message.received < criteria.after)\r\n            return false;\r\n    }\r\n    if (criteria.in_senders) {\r\n        if (contains(message.from, criteria.query, partial))\r\n            return true;\r\n    }\r\n    if (criteria.in_recipients) {\r\n        if (contains(message.to, criteria.query, partial) || contains(message.cc, criteria.query, partial) || contains(message.bcc, criteria.query, partial))\r\n            return true;\r\n    }\r\n    if (criteria.in_subject) {\r\n        if (contains(message.subject, criteria.query, partial, false))\r\n            return true;\r\n    }\r\n    if (criteria.in_keywords) {\r\n        if (message.keywords != null)\r\n            for (String keyword : message.keywords) if (contains(keyword, criteria.query, partial, false))\r\n                return true;\r\n    }\r\n    if (criteria.in_notes) {\r\n        if (contains(message.notes, criteria.query, partial, false))\r\n            return true;\r\n    }\r\n    if (criteria.in_filenames) {\r\n        DB db = DB.getInstance(context);\r\n        List<EntityAttachment> attachments = db.attachment().getAttachments(message.id);\r\n        if (attachments != null)\r\n            for (EntityAttachment attachment : attachments) if (!TextUtils.isEmpty(attachment.name) && contains(attachment.name, criteria.query, true, false))\r\n                // Partial search to find \"filename.extension\"\r\n                return true;\r\n    }\r\n    if (criteria.in_headers) {\r\n        if (message.headers != null && message.headers.contains(criteria.query))\r\n            return true;\r\n    }\r\n    if (criteria.in_html || criteria.in_message)\r\n        try {\r\n            File file = EntityMessage.getFile(context, message.id);\r\n            if (file.exists()) {\r\n                String selector = criteria.getJsoup();\r\n                if (selector != null) {\r\n                    Document d = JsoupEx.parse(file);\r\n                    return (d.select(selector).size() > 0);\r\n                }\r\n                String html = Helper.readText(file);\r\n                if (criteria.in_html) {\r\n                    if (html.contains(criteria.query))\r\n                        return true;\r\n                }\r\n                if (criteria.in_message) {\r\n                    // This won't match <p>An <b>example</b><p> when searching for \"An example\"\r\n                    if (contains(html, criteria.query, partial, true)) {\r\n                        String text = HtmlHelper.getFullText(html);\r\n                        if (contains(text, criteria.query, partial, false))\r\n                            return true;\r\n                    }\r\n                }\r\n            }\r\n        } catch (IOException ex) {\r\n            Log.e(ex);\r\n        }\r\n    return false;\r\n}\n--------------------------------------------------\nprivate static void checkEmergencyBackup(Context context) {\r\n    try {\r\n        File dbfile = context.getDatabasePath(DB_NAME);\r\n        if (dbfile.exists()) {\r\n            Log.i(\"Emergency restore /dbfile\");\r\n            return;\r\n        }\r\n        File emergency = new File(context.getFilesDir(), \"emergency.json\");\r\n        if (!emergency.exists()) {\r\n            Log.i(\"Emergency restore /json\");\r\n            return;\r\n        }\r\n        DB db = DB.getInstance(context);\r\n        if (db.account().getAccounts().size() > 0) {\r\n            Log.e(\"Emergency restore /accounts\");\r\n            return;\r\n        }\r\n        Log.e(\"Emergency restore\");\r\n        String json = Helper.readText(emergency);\r\n        JSONArray jaccounts = new JSONArray(json);\r\n        for (int a = 0; a < jaccounts.length(); a++) {\r\n            JSONObject jaccount = jaccounts.getJSONObject(a);\r\n            EntityAccount account = EntityAccount.fromJSON(jaccount);\r\n            account.created = new Date().getTime();\r\n            account.id = db.account().insertAccount(account);\r\n            JSONArray jfolders = jaccount.getJSONArray(\"folders\");\r\n            for (int f = 0; f < jfolders.length(); f++) {\r\n                EntityFolder folder = EntityFolder.fromJSON(jfolders.getJSONObject(f));\r\n                folder.account = account.id;\r\n                db.folder().insertFolder(folder);\r\n            }\r\n            JSONArray jidentities = jaccount.getJSONArray(\"identities\");\r\n            for (int i = 0; i < jidentities.length(); i++) {\r\n                EntityIdentity identity = EntityIdentity.fromJSON(jidentities.getJSONObject(i));\r\n                identity.account = account.id;\r\n                db.identity().insertIdentity(identity);\r\n            }\r\n        }\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n    }\r\n}\n--------------------------------------------------\n", "import java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.FileInputStream\nimport java.io.File\nstatic String readText(File file) throws IOException {\r\n    try (FileInputStream in = new FileInputStream(file)) {\r\n        return readStream(in);\r\n    }\r\n}" ],
  "VinylMusicPlayer/248" : [ "@NonNull\r\npublic static List<File> listFiles(@NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    List<File> fileList = new LinkedList<>();\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        Collections.addAll(fileList, found);\r\n    }\r\n    return fileList;\r\n}\n--------------------------------------------------\nprivate static void internalListFilesDeep(@NonNull Collection<File> files, @NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        for (File file : found) {\r\n            if (file.isDirectory()) {\r\n                internalListFilesDeep(files, file, fileFilter);\r\n            } else {\r\n                files.add(file);\r\n            }\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.LinkedList\nimport java.util.Collections\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<File> listFiles(@NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    List<File> fileList = new LinkedList<>();\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        Collections.addAll(fileList, found);\r\n    }\r\n    return fileList;\r\n}" ],
  "VinylMusicPlayer/247" : [ "@TargetApi(Build.VERSION_CODES.O)\r\n@NonNull\r\nprivate List<NotificationChannel> getListOfNotificationChannels() {\r\n    final List<NotificationChannel> channels = new ArrayList<>(NOTIFICATION_CHANNELS.length);\r\n    channels.add(getNotificationChannel(CHANNEL_ERRORED_PLEDGES, R.string.Fix_your_payment_method, NotificationManager.IMPORTANCE_HIGH));\r\n    channels.add(getNotificationChannel(CHANNEL_MESSAGES, R.string.Messages, NotificationManager.IMPORTANCE_DEFAULT));\r\n    channels.add(getNotificationChannel(CHANNEL_PROJECT_ACTIVITY, R.string.Project_activity, NotificationManager.IMPORTANCE_DEFAULT));\r\n    channels.add(getNotificationChannel(CHANNEL_PROJECT_REMINDER, R.string.Project_reminders, NotificationManager.IMPORTANCE_DEFAULT));\r\n    channels.add(getNotificationChannel(CHANNEL_PROJECT_UPDATES, R.string.Project_updates, NotificationManager.IMPORTANCE_DEFAULT));\r\n    final NotificationChannel followingChannel = getNotificationChannel(CHANNEL_FOLLOWING, R.string.Following, NotificationManager.IMPORTANCE_DEFAULT);\r\n    followingChannel.setDescription(this.context.getString(R.string.When_following_is_on_you_can_follow_the_acticity_of_others));\r\n    channels.add(followingChannel);\r\n    channels.add(getNotificationChannel(CHANNEL_SURVEY, R.string.Reward_surveys, NotificationManager.IMPORTANCE_HIGH));\r\n    return channels;\r\n}\n--------------------------------------------------\n@TargetApi(Build.VERSION_CODES.O)\r\n@NonNull\r\nprivate List<NotificationChannel> getListOfNotificationChannels() {\r\n    final List<NotificationChannel> channels = new ArrayList<>(NOTIFICATION_CHANNELS.length);\r\n    channels.add(getNotificationChannel(CHANNEL_ERRORED_PLEDGES, R.string.Fix_your_payment_method, NotificationManager.IMPORTANCE_HIGH));\r\n    channels.add(getNotificationChannel(CHANNEL_MESSAGES, R.string.Messages, NotificationManager.IMPORTANCE_DEFAULT));\r\n    channels.add(getNotificationChannel(CHANNEL_PROJECT_ACTIVITY, R.string.Project_activity, NotificationManager.IMPORTANCE_DEFAULT));\r\n    channels.add(getNotificationChannel(CHANNEL_PROJECT_REMINDER, R.string.Project_reminders, NotificationManager.IMPORTANCE_DEFAULT));\r\n    channels.add(getNotificationChannel(CHANNEL_PROJECT_UPDATES, R.string.Project_updates, NotificationManager.IMPORTANCE_DEFAULT));\r\n    final NotificationChannel followingChannel = getNotificationChannel(CHANNEL_FOLLOWING, R.string.Following, NotificationManager.IMPORTANCE_DEFAULT);\r\n    followingChannel.setDescription(this.context.getString(R.string.When_following_is_on_you_can_follow_the_acticity_of_others));\r\n    channels.add(followingChannel);\r\n    channels.add(getNotificationChannel(CHANNEL_SURVEY, R.string.Reward_surveys, NotificationManager.IMPORTANCE_HIGH));\r\n    return channels;\r\n}\n--------------------------------------------------\n", "import android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport androidx.annotation.NonNull;\r\nimport com.kickstarter.R\nimport androidx.annotation.NonNull\nimport android.os.Build\nimport android.app.NotificationChannel\nimport android.app.Notification\nimport android.annotation.TargetApi\n@TargetApi(Build.VERSION_CODES.O)\r\n@NonNull\r\nprivate NotificationChannel getNotificationChannel(@NonNull final String channelId, final int nameResId, final int importance) {\r\n    final CharSequence name = this.context.getString(nameResId);\r\n    return new NotificationChannel(channelId, name, importance);\r\n}" ],
  "VinylMusicPlayer/242" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "VinylMusicPlayer/244" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n@NonNull\r\npublic static synchronized HistoryStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new HistoryStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "VinylMusicPlayer/243" : [ "@Override\r\npublic void onCancelled() {\r\n    if (mCallback != null) {\r\n        mCallback.onCancelled();\r\n    }\r\n    dismiss();\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onCancelled() {\r\n    if (mCallback != null) {\r\n        mCallback.onCancelled();\r\n    }\r\n    dismiss();\r\n}" ],
  "VinylMusicPlayer/239" : [ "private static int serialize(final byte[] buf, int pos, final int value) {\r\n    int i;\r\n    if (value < 0) {\r\n        if (value == Integer.MIN_VALUE) {\r\n            for (int x = 0; x < MIN_INT.length; x++) {\r\n                buf[pos + x] = MIN_INT[x];\r\n            }\r\n            return pos + MIN_INT.length;\r\n        }\r\n        i = -value;\r\n        buf[pos++] = MINUS;\r\n    } else {\r\n        i = value;\r\n    }\r\n    final int q1 = i / 1000;\r\n    if (q1 == 0) {\r\n        pos += writeFirstBuf(buf, DIGITS[i], pos);\r\n        return pos;\r\n    }\r\n    final int r1 = i - q1 * 1000;\r\n    final int q2 = q1 / 1000;\r\n    if (q2 == 0) {\r\n        final int v1 = DIGITS[r1];\r\n        final int v2 = DIGITS[q1];\r\n        int off = writeFirstBuf(buf, v2, pos);\r\n        writeBuf(buf, v1, pos + off);\r\n        return pos + 3 + off;\r\n    }\r\n    final int r2 = q1 - q2 * 1000;\r\n    final int q3 = q2 / 1000;\r\n    final int v1 = DIGITS[r1];\r\n    final int v2 = DIGITS[r2];\r\n    if (q3 == 0) {\r\n        pos += writeFirstBuf(buf, DIGITS[q2], pos);\r\n    } else {\r\n        final int r3 = q2 - q3 * 1000;\r\n        buf[pos++] = (byte) (q3 + '0');\r\n        writeBuf(buf, DIGITS[r3], pos);\r\n        pos += 3;\r\n    }\r\n    writeBuf(buf, v2, pos);\r\n    writeBuf(buf, v1, pos + 3);\r\n    return pos + 6;\r\n}\n--------------------------------------------------\nprivate static int serialize(final byte[] buf, int pos, final int value) {\r\n    int i;\r\n    if (value < 0) {\r\n        if (value == Integer.MIN_VALUE) {\r\n            for (int x = 0; x < MIN_INT.length; x++) {\r\n                buf[pos + x] = MIN_INT[x];\r\n            }\r\n            return pos + MIN_INT.length;\r\n        }\r\n        i = -value;\r\n        buf[pos++] = MINUS;\r\n    } else {\r\n        i = value;\r\n    }\r\n    final int q1 = i / 1000;\r\n    if (q1 == 0) {\r\n        pos += writeFirstBuf(buf, DIGITS[i], pos);\r\n        return pos;\r\n    }\r\n    final int r1 = i - q1 * 1000;\r\n    final int q2 = q1 / 1000;\r\n    if (q2 == 0) {\r\n        final int v1 = DIGITS[r1];\r\n        final int v2 = DIGITS[q1];\r\n        int off = writeFirstBuf(buf, v2, pos);\r\n        writeBuf(buf, v1, pos + off);\r\n        return pos + 3 + off;\r\n    }\r\n    final int r2 = q1 - q2 * 1000;\r\n    final int q3 = q2 / 1000;\r\n    final int v1 = DIGITS[r1];\r\n    final int v2 = DIGITS[r2];\r\n    if (q3 == 0) {\r\n        pos += writeFirstBuf(buf, DIGITS[q2], pos);\r\n    } else {\r\n        final int r3 = q2 - q3 * 1000;\r\n        buf[pos++] = (byte) (q3 + '0');\r\n        writeBuf(buf, DIGITS[r3], pos);\r\n        pos += 3;\r\n    }\r\n    writeBuf(buf, v2, pos);\r\n    writeBuf(buf, v1, pos + 3);\r\n    return pos + 6;\r\n}\n--------------------------------------------------\n", "private static void writeBuf(final byte[] buf, final int v, int pos) {\r\n    buf[pos] = (byte) (v >> 16);\r\n    buf[pos + 1] = (byte) (v >> 8);\r\n    buf[pos + 2] = (byte) v;\r\n}" ],
  "Android-Password-Store/219" : [ "R.id.import_folder -> openFolder()\n--------------------------------------------------\nopenFolder(it) {\n    ImportFolderDialog(this, it.path) {\n        NotesHelper(this).getNotes {\n            mNotes = it\n            showSaveButton = false\n            initViewPager()\n        }\n    }\n}", "import java.io.File\nprivate fun openFolder(path: String, onChecksPassed: (file: File) -> Unit) {\r\n        val file = File(path)\r\n        if (file.isDirectory) {\r\n            onChecksPassed(file)\r\n        }\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "MaterialFiles/928" : [ "/**\r\n * Shows the dialog associated with this Preference. This is normally initiated\r\n * automatically on clicking on the preference. Call this method if you need to\r\n * show the dialog on some other event.\r\n *\r\n * @param state Optional instance state to restore on the dialog\r\n */\r\nprotected void showDialog(Bundle state) {\r\n    Context context = getContext();\r\n    mWhichButtonClicked = DialogInterface.BUTTON_NEGATIVE;\r\n    mBuilder = new AlertDialog.Builder(context).setTitle(getDialogTitle()).setIcon(getDialogIcon()).setPositiveButton(getPositiveButtonText(), this).setNegativeButton(getNegativeButtonText(), this);\r\n    View contentView = onCreateDialogView();\r\n    if (contentView != null) {\r\n        onBindDialogView(contentView);\r\n        mBuilder.setView(contentView);\r\n    } else {\r\n        mBuilder.setMessage(getDialogMessage());\r\n    }\r\n    onPrepareDialogBuilder(mBuilder);\r\n    // Create the dialog\r\n    final Dialog dialog = mDialog = mBuilder.create();\r\n    if (state != null) {\r\n        dialog.onRestoreInstanceState(state);\r\n    }\r\n    if (needInputMethod()) {\r\n        requestInputMethod(dialog);\r\n    }\r\n    dialog.setOnDismissListener(this);\r\n    dialog.show();\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onRestoreInstanceState(Parcelable state) {\r\n    if (state == null || !state.getClass().equals(SavedState.class)) {\r\n        // Didn't save state for us in onSaveInstanceState\r\n        super.onRestoreInstanceState(state);\r\n        return;\r\n    }\r\n    SavedState myState = (SavedState) state;\r\n    super.onRestoreInstanceState(myState.getSuperState());\r\n    if (myState.isDialogShowing) {\r\n        showDialog(myState.dialogBundle);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.os.Parcelable;\r\nimport android.os.Parcelable\nimport android.os.Parcel\n@Override\r\nprotected void onRestoreInstanceState(Parcelable state) {\r\n    if (state == null || !state.getClass().equals(SavedState.class)) {\r\n        // Didn't save state for us in onSaveInstanceState\r\n        super.onRestoreInstanceState(state);\r\n        return;\r\n    }\r\n    SavedState myState = (SavedState) state;\r\n    super.onRestoreInstanceState(myState.getSuperState());\r\n    setText(myState.text);\r\n}" ],
  "Android-Password-Store/216" : [ "                ) {\n                    viewModel.onEnterApiKey(it)\r\n                }", "fun onEnterApiKey(v: String) {\r\n        apiKey = v\r\n        emitState()\r\n    }" ],
  "Android-Password-Store/218" : [ "getBackupFile(type, timestamp, backupDirectory).also {\n    backup(coroutineScope, type, it)\n}", "import java.io.File\nprivate fun getBackupFile(backup: Backup, timestamp: String, backupDirectory: File): File {\r\n        val fileName = \"${backup.name}-$timestamp.json\"\r\n        return File(backupDirectory, fileName)\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "Android-Password-Store/211" : [ "@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    lastTheme = ThemeSwitcher.getNoTitleTheme(this);\r\n    setTheme(lastTheme);\r\n    if (savedInstanceState != null) {\r\n        ensureGeneratedViewIdGreaterThan(savedInstanceState.getInt(KEY_GENERATED_VIEW_ID, 0));\r\n    }\r\n    WindowCompat.setDecorFitsSystemWindows(getWindow(), false);\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.main);\r\n    recycledViewPool.setMaxRecycledViews(R.id.view_type_episode_item, 25);\r\n    drawerLayout = findViewById(R.id.drawer_layout);\r\n    navDrawer = findViewById(R.id.navDrawerFragment);\r\n    setNavDrawerSize();\r\n    // Consume navigation bar insets - we apply them in setPlayerVisible()\r\n    ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main_view), (v, insets) -> {\r\n        navigationBarInsets = insets.getInsets(WindowInsetsCompat.Type.navigationBars());\r\n        updateInsets();\r\n        return new WindowInsetsCompat.Builder(insets).setInsets(WindowInsetsCompat.Type.navigationBars(), Insets.NONE).build();\r\n    });\r\n    final FragmentManager fm = getSupportFragmentManager();\r\n    if (fm.findFragmentByTag(MAIN_FRAGMENT_TAG) == null) {\r\n        if (!UserPreferences.DEFAULT_PAGE_REMEMBER.equals(UserPreferences.getDefaultPage())) {\r\n            loadFragment(UserPreferences.getDefaultPage(), null);\r\n        } else {\r\n            String lastFragment = NavDrawerFragment.getLastNavFragment(this);\r\n            if (ArrayUtils.contains(NavDrawerFragment.NAV_DRAWER_TAGS, lastFragment)) {\r\n                loadFragment(lastFragment, null);\r\n            } else {\r\n                try {\r\n                    loadFeedFragmentById(Integer.parseInt(lastFragment), null);\r\n                } catch (NumberFormatException e) {\r\n                    // it's not a number, this happens if we removed\r\n                    // a label from the NAV_DRAWER_TAGS\r\n                    // give them a nice default...\r\n                    loadFragment(HomeFragment.TAG, null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    FragmentTransaction transaction = fm.beginTransaction();\r\n    NavDrawerFragment navDrawerFragment = new NavDrawerFragment();\r\n    transaction.replace(R.id.navDrawerFragment, navDrawerFragment, NavDrawerFragment.TAG);\r\n    AudioPlayerFragment audioPlayerFragment = new AudioPlayerFragment();\r\n    transaction.replace(R.id.audioplayerFragment, audioPlayerFragment, AudioPlayerFragment.TAG);\r\n    transaction.commit();\r\n    checkFirstLaunch();\r\n    View bottomSheet = findViewById(R.id.audioplayerFragment);\r\n    sheetBehavior = (LockableBottomSheetBehavior) BottomSheetBehavior.from(bottomSheet);\r\n    sheetBehavior.setHideable(false);\r\n    sheetBehavior.setBottomSheetCallback(bottomSheetCallback);\r\n    FeedUpdateManager.restartUpdateAlarm(this, false);\r\n    SynchronizationQueueSink.syncNowIfNotSyncedRecently();\r\n    WorkManager.getInstance(this).getWorkInfosByTagLiveData(FeedUpdateManager.WORK_TAG_FEED_UPDATE).observe(this, workInfos -> {\r\n        boolean isRefreshingFeeds = false;\r\n        for (WorkInfo workInfo : workInfos) {\r\n            if (workInfo.getState() == WorkInfo.State.RUNNING) {\r\n                isRefreshingFeeds = true;\r\n            } else if (workInfo.getState() == WorkInfo.State.ENQUEUED) {\r\n                isRefreshingFeeds = true;\r\n            }\r\n        }\r\n        EventBus.getDefault().postSticky(new FeedUpdateRunningEvent(isRefreshingFeeds));\r\n    });\r\n    WorkManager.getInstance(this).getWorkInfosByTagLiveData(DownloadServiceInterface.WORK_TAG).observe(this, workInfos -> {\r\n        Map<String, DownloadStatus> updatedEpisodes = new HashMap<>();\r\n        for (WorkInfo workInfo : workInfos) {\r\n            String downloadUrl = null;\r\n            for (String tag : workInfo.getTags()) {\r\n                if (tag.startsWith(DownloadServiceInterface.WORK_TAG_EPISODE_URL)) {\r\n                    downloadUrl = tag.substring(DownloadServiceInterface.WORK_TAG_EPISODE_URL.length());\r\n                }\r\n            }\r\n            if (downloadUrl == null) {\r\n                continue;\r\n            }\r\n            int status;\r\n            if (workInfo.getState() == WorkInfo.State.RUNNING) {\r\n                status = DownloadStatus.STATE_RUNNING;\r\n            } else if (workInfo.getState() == WorkInfo.State.ENQUEUED || workInfo.getState() == WorkInfo.State.BLOCKED) {\r\n                status = DownloadStatus.STATE_QUEUED;\r\n            } else {\r\n                status = DownloadStatus.STATE_COMPLETED;\r\n            }\r\n            int progress = workInfo.getProgress().getInt(DownloadServiceInterface.WORK_DATA_PROGRESS, -1);\r\n            if (progress == -1 && status != DownloadStatus.STATE_COMPLETED) {\r\n                status = DownloadStatus.STATE_QUEUED;\r\n                progress = 0;\r\n            }\r\n            updatedEpisodes.put(downloadUrl, new DownloadStatus(status, progress));\r\n        }\r\n        DownloadServiceInterface.get().setCurrentDownloads(updatedEpisodes);\r\n        EventBus.getDefault().postSticky(new EpisodeDownloadEvent(updatedEpisodes));\r\n    });\r\n}\n--------------------------------------------------\n", "import android.content.SharedPreferences;\r\nimport de.danoeh.antennapod.core.util.download.FeedUpdateManager;\r\nimport de.danoeh.antennapod.core.util.download.FeedUpdateManager\nimport de.danoeh.antennapod.R\nimport android.content.SharedPreferences\nprivate void checkFirstLaunch() {\r\n    SharedPreferences prefs = getSharedPreferences(PREF_NAME, MODE_PRIVATE);\r\n    if (prefs.getBoolean(PREF_IS_FIRST_LAUNCH, true)) {\r\n        FeedUpdateManager.restartUpdateAlarm(this, true);\r\n        SharedPreferences.Editor edit = prefs.edit();\r\n        edit.putBoolean(PREF_IS_FIRST_LAUNCH, false);\r\n        edit.apply();\r\n    }\r\n}" ],
  "Android-Password-Store/220" : [ "static void cleanup(Context context) {\r\n    long now = new Date().getTime();\r\n    // Favicons\r\n    Log.i(\"Cleanup avatars\");\r\n    for (String type : new String[] { \"notcontact\", \"favicons\", \"generated\" }) {\r\n        File[] favicons = Helper.ensureExists(context, type).listFiles();\r\n        if (favicons != null)\r\n            for (File file : favicons) if (file.lastModified() + CACHE_FAVICON_DURATION < now) {\r\n                Log.i(\"Deleting \" + file);\r\n                Helper.secureDelete(file);\r\n            }\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void run() {\r\n    try {\r\n        File[] favicons = dir.listFiles();\r\n        if (favicons != null)\r\n            for (File favicon : favicons) Helper.secureDelete(favicon);\r\n    } catch (Throwable ex) {\r\n        Log.w(ex);\r\n    }\r\n}\n--------------------------------------------------\n", "import java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\nimport java.nio.file.Files\nimport java.io.File\nstatic List<File> listFiles(File dir, Long minSize) {\r\n    List<File> files = new ArrayList<>();\r\n    if (dir != null) {\r\n        File[] listed = dir.listFiles();\r\n        if (listed != null)\r\n            for (File file : listed) if (file.isDirectory())\r\n                files.addAll(listFiles(file, minSize));\r\n            else if (minSize == null || file.length() > minSize)\r\n                files.add(file);\r\n    }\r\n    return files;\r\n}" ],
  "MaterialFiles/947" : [ "public static <T> T unmarshall(byte[] bytes, Parcelable.Creator<T> creator) {\r\n    Parcel parcel = unmarshall(bytes);\r\n    T result = creator.createFromParcel(parcel);\r\n    parcel.recycle();\r\n    return result;\r\n}\n--------------------------------------------------\nprivate static Parcel unmarshall(byte[] bytes) {\r\n    Parcel parcel = Parcel.obtain();\r\n    parcel.unmarshall(bytes, 0, bytes.length);\r\n    parcel.setDataPosition(0);\r\n    return parcel;\r\n}\n--------------------------------------------------\n", "import android.os.Parcel;\r\nimport android.os.Parcel\nprivate static Parcel unmarshall(byte[] bytes) {\r\n    Parcel parcel = Parcel.obtain();\r\n    parcel.unmarshall(bytes, 0, bytes.length);\r\n    parcel.setDataPosition(0);\r\n    return parcel;\r\n}" ],
  "VinylMusicPlayer/234" : [ "", "import android.app.ProgressDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.DialogInterface\nimport android.app.ProgressDialog\npublic void onPreExecute() {\r\n    progress = new ProgressDialog(activity);\r\n    progress.setTitle(doImport ? R.string.importing : R.string.exporting);\r\n    progress.setOnDismissListener(new DialogInterface.OnDismissListener() {\r\n\r\n        @Override\r\n        public void onDismiss(DialogInterface dialog) {\r\n            ImportExportTask.this.stop();\r\n        }\r\n    });\r\n    progress.show();\r\n}" ],
  "VinylMusicPlayer/237" : [ "@Override\r\nprotected Integer doBackgroundAction(Void... params) {\r\n    String listId = getListId();\r\n    if (isSendingToHexagon()) {\r\n        HexagonTools hexagonTools = SgApp.getServicesComponent(getContext()).hexagonTools();\r\n        Lists listsService = hexagonTools.getListsService();\r\n        if (listsService == null) {\r\n            // no longer signed in\r\n            return ERROR_HEXAGON_API;\r\n        }\r\n        // send list to be added to hexagon\r\n        SgListList wrapper = new SgListList();\r\n        List<SgList> lists = buildList(listId, listName);\r\n        wrapper.setLists(lists);\r\n        try {\r\n            listsService.save(wrapper).execute();\r\n        } catch (IOException e) {\r\n            Errors.logAndReportHexagon(\"add list\", e);\r\n            return ERROR_HEXAGON_API;\r\n        }\r\n    }\r\n    // update local state\r\n    if (!doDatabaseUpdate(getContext().getContentResolver(), listId)) {\r\n        return ERROR_DATABASE;\r\n    }\r\n    return SUCCESS;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport com.uwetrottmann.seriesguide.backend.lists.model.SgList;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\nimport com.uwetrottmann.seriesguide.backend.lists.model.SgList\nimport androidx.annotation.NonNull\n@NonNull\r\nprivate static List<SgList> buildList(@NonNull String listId, @NonNull String listName) {\r\n    List<SgList> lists = new ArrayList<>(1);\r\n    SgList list = new SgList();\r\n    list.setListId(listId);\r\n    list.setName(listName);\r\n    lists.add(list);\r\n    return lists;\r\n}" ],
  "VinylMusicPlayer/236" : [ "@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\r\n    final Bundle args = getArguments();\r\n    final long account = args.getLong(\"account\");\r\n    final int protocol = args.getInt(\"protocol\");\r\n    final long folder = args.getLong(\"folder\");\r\n    final String type = args.getString(\"type\");\r\n    final Address[] froms = DB.Converters.decodeAddresses(args.getString(\"from\"));\r\n    final Context context = getContext();\r\n    final View view = LayoutInflater.from(context).inflate(R.layout.dialog_junk, null);\r\n    final TextView tvMessage = view.findViewById(R.id.tvMessage);\r\n    final TextView tvJunkHint = view.findViewById(R.id.tvJunkHint);\r\n    final CheckBox cbBlockSender = view.findViewById(R.id.cbBlockSender);\r\n    final CheckBox cbBlockDomain = view.findViewById(R.id.cbBlockDomain);\r\n    final ImageButton ibMore = view.findViewById(R.id.ibMore);\r\n    final TextView tvMore = view.findViewById(R.id.tvMore);\r\n    final CheckBox cbJunkFilter = view.findViewById(R.id.cbJunkFilter);\r\n    final ImageButton ibInfoFilter = view.findViewById(R.id.ibInfoFilter);\r\n    final CheckBox cbBlocklist = view.findViewById(R.id.cbBlocklist);\r\n    final TextView tvBlocklist = view.findViewById(R.id.tvBlocklist);\r\n    final ImageButton ibInfoBlocklist = view.findViewById(R.id.ibInfoBlocklist);\r\n    final Button btnClear = view.findViewById(R.id.btnClear);\r\n    final ImageButton ibRules = view.findViewById(R.id.ibRules);\r\n    final ImageButton ibManage = view.findViewById(R.id.ibManage);\r\n    final Group grpBlockDomain = view.findViewById(R.id.grpBlockDomain);\r\n    final Group grpFilter = view.findViewById(R.id.grpFilter);\r\n    final Group grpManage = view.findViewById(R.id.grpManage);\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n    boolean block_sender = prefs.getBoolean(\"block_sender\", true);\r\n    boolean check_blocklist = prefs.getBoolean(\"check_blocklist\", false);\r\n    boolean use_blocklist = prefs.getBoolean(\"use_blocklist\", false);\r\n    boolean junk_hint = prefs.getBoolean(\"junk_hint\", true);\r\n    boolean canBlock = false;\r\n    if (froms != null && froms.length > 0) {\r\n        String email = ((InternetAddress) froms[0]).getAddress();\r\n        canBlock = !TextUtils.isEmpty(email);\r\n    }\r\n    // Wire controls\r\n    tvJunkHint.setVisibility(junk_hint ? View.VISIBLE : View.GONE);\r\n    tvJunkHint.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Helper.viewFAQ(v.getContext(), 92);\r\n            prefs.edit().putBoolean(\"junk_hint\", false).apply();\r\n            tvJunkHint.setVisibility(View.GONE);\r\n        }\r\n    });\r\n    cbBlockSender.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n            cbBlockDomain.setEnabled(isChecked && ActivityBilling.isPro(context));\r\n        }\r\n    });\r\n    View.OnClickListener onMore = new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (grpManage.getVisibility() == View.VISIBLE) {\r\n                ibMore.setImageLevel(1);\r\n                grpFilter.setVisibility(View.GONE);\r\n                grpManage.setVisibility(View.GONE);\r\n            } else {\r\n                ibMore.setImageLevel(0);\r\n                grpFilter.setVisibility(View.VISIBLE);\r\n                grpManage.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    };\r\n    ibMore.setOnClickListener(onMore);\r\n    tvMore.setOnClickListener(onMore);\r\n    cbJunkFilter.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n            args.putBoolean(\"filter\", isChecked);\r\n            new SimpleTask<Void>() {\r\n\r\n                @Override\r\n                protected Void onExecute(Context context, Bundle args) throws Throwable {\r\n                    long aid = args.getLong(\"account\");\r\n                    long fid = args.getLong(\"folder\");\r\n                    boolean filter = args.getBoolean(\"filter\");\r\n                    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n                    DB db = DB.getInstance(context);\r\n                    EntityFolder folder = db.folder().getFolder(fid);\r\n                    if (folder == null)\r\n                        return null;\r\n                    EntityFolder junk = db.folder().getFolderByType(aid, EntityFolder.JUNK);\r\n                    if (junk == null)\r\n                        return null;\r\n                    try {\r\n                        db.beginTransaction();\r\n                        db.folder().setFolderDownload(folder.id, folder.download || filter);\r\n                        db.folder().setFolderAutoClassify(folder.id, folder.auto_classify_source || filter, folder.auto_classify_target);\r\n                        db.folder().setFolderDownload(junk.id, junk.download || filter);\r\n                        db.folder().setFolderAutoClassify(junk.id, junk.auto_classify_source || filter, filter);\r\n                        db.setTransactionSuccessful();\r\n                    } finally {\r\n                        db.endTransaction();\r\n                    }\r\n                    prefs.edit().putBoolean(\"classification\", true).apply();\r\n                    return null;\r\n                }\r\n\r\n                @Override\r\n                protected void onException(Bundle args, Throwable ex) {\r\n                    Log.unexpectedError(getParentFragmentManager(), ex);\r\n                }\r\n            }.execute(FragmentDialogJunk.this, args, \"junk:filter\");\r\n        }\r\n    });\r\n    ibInfoFilter.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Helper.viewFAQ(v.getContext(), 163);\r\n        }\r\n    });\r\n    cbBlocklist.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n            prefs.edit().putBoolean(\"check_blocklist\", isChecked).putBoolean(\"use_blocklist\", isChecked).apply();\r\n        }\r\n    });\r\n    ibInfoBlocklist.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Helper.viewFAQ(v.getContext(), 168);\r\n        }\r\n    });\r\n    btnClear.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            new AlertDialog.Builder(v.getContext()).setIcon(R.drawable.twotone_warning_24).setTitle(R.string.title_junk_clear).setMessage(R.string.title_junk_clear_hint).setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    Bundle args = new Bundle();\r\n                    args.putLong(\"account\", account);\r\n                    args.putLong(\"folder\", folder);\r\n                    new SimpleTask<Void>() {\r\n\r\n                        @Override\r\n                        protected Void onExecute(Context context, Bundle args) throws Throwable {\r\n                            long aid = args.getLong(\"account\");\r\n                            long fid = args.getLong(\"folder\");\r\n                            DB db = DB.getInstance(context);\r\n                            int count = db.contact().deleteContact(aid, EntityContact.TYPE_JUNK);\r\n                            EntityLog.log(context, \"Deleted junk contacts=\" + count);\r\n                            EntityFolder folder = db.folder().getFolder(fid);\r\n                            if (folder == null)\r\n                                return null;\r\n                            EntityFolder junk = db.folder().getFolderByType(folder.account, EntityFolder.JUNK);\r\n                            if (junk == null)\r\n                                return null;\r\n                            List<EntityRule> rules = db.rule().getRules(fid);\r\n                            if (rules == null)\r\n                                return null;\r\n                            for (EntityRule rule : rules) {\r\n                                JSONObject jaction = new JSONObject(rule.action);\r\n                                int type = jaction.optInt(\"type\", -1);\r\n                                long target = jaction.optLong(\"target\", -1);\r\n                                if (type == EntityRule.TYPE_MOVE && target == junk.id) {\r\n                                    EntityLog.log(context, \"Deleting junk rule=\" + rule.id);\r\n                                    db.rule().deleteRule(rule.id);\r\n                                }\r\n                            }\r\n                            return null;\r\n                        }\r\n\r\n                        @Override\r\n                        protected void onExecuted(Bundle args, Void data) {\r\n                            ToastEx.makeText(getContext(), R.string.title_completed, Toast.LENGTH_LONG).show();\r\n                        }\r\n\r\n                        @Override\r\n                        protected void onException(Bundle args, Throwable ex) {\r\n                            Log.unexpectedError(getParentFragmentManager(), ex);\r\n                        }\r\n                    }.execute(FragmentDialogJunk.this, args, \"junk:clear\");\r\n                }\r\n            }).setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    // Do nothing\r\n                }\r\n            }).show();\r\n        }\r\n    });\r\n    ibRules.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            LocalBroadcastManager lbm = LocalBroadcastManager.getInstance(v.getContext());\r\n            lbm.sendBroadcast(new Intent(ActivityView.ACTION_EDIT_RULES).putExtra(\"account\", account).putExtra(\"protocol\", protocol).putExtra(\"folder\", folder).putExtra(\"type\", type));\r\n            dismiss();\r\n        }\r\n    });\r\n    ibManage.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Bundle args = new Bundle();\r\n            args.putLong(\"account\", account);\r\n            args.putBoolean(\"junk\", true);\r\n            FragmentContacts fragment = new FragmentContacts();\r\n            fragment.setArguments(args);\r\n            FragmentTransaction fragmentTransaction = getParentFragmentManager().beginTransaction();\r\n            fragmentTransaction.replace(R.id.content_frame, fragment).addToBackStack(\"contacts\");\r\n            fragmentTransaction.commit();\r\n            dismiss();\r\n        }\r\n    });\r\n    List<String> regex = new ArrayList<>();\r\n    regex.addAll(COMMON_DOMAINS);\r\n    regex.addAll(EmailProvider.getDomainNames(context));\r\n    boolean common = false;\r\n    List<String> domains = new ArrayList<>();\r\n    if (froms != null)\r\n        for (Address from : froms) {\r\n            String email = ((InternetAddress) from).getAddress();\r\n            String domain = UriHelper.getEmailDomain(email);\r\n            if (domain != null)\r\n                domain = domain.trim();\r\n            if (TextUtils.isEmpty(domain) || domains.contains(domain))\r\n                continue;\r\n            String parent = UriHelper.getParentDomain(context, domain);\r\n            if (parent != null)\r\n                domain = parent;\r\n            domains.add(domain);\r\n            for (String r : regex) if (domain.matches(r)) {\r\n                common = true;\r\n                break;\r\n            }\r\n        }\r\n    // Initialize\r\n    String who = MessageHelper.formatAddresses(froms);\r\n    String title = getString(R.string.title_ask_spam_who, who);\r\n    SpannableStringBuilder ssb = new SpannableStringBuilderEx(title);\r\n    if (who.length() > 0) {\r\n        int start = title.indexOf(who);\r\n        if (start > 0) {\r\n            int textColorPrimary = Helper.resolveColor(context, android.R.attr.textColorPrimary);\r\n            ssb.setSpan(new ForegroundColorSpan(textColorPrimary), start, start + who.length(), 0);\r\n        }\r\n    }\r\n    tvMessage.setText(ssb);\r\n    cbBlockSender.setEnabled(canBlock);\r\n    cbBlockDomain.setEnabled(false);\r\n    cbBlockSender.setChecked(canBlock && block_sender);\r\n    cbBlockDomain.setText(getString(R.string.title_block_sender_domain, TextUtils.join(\",\", domains)));\r\n    if (common) {\r\n        int dp6 = Helper.dp2pixels(context, 6);\r\n        int colorWarning = Helper.resolveColor(context, R.attr.colorWarning);\r\n        cbBlockDomain.setTextColor(colorWarning);\r\n        cbBlockDomain.setCompoundDrawablesRelativeWithIntrinsicBounds(0, 0, R.drawable.twotone_warning_24, 0);\r\n        cbBlockDomain.setCompoundDrawablePadding(dp6);\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n            TextViewCompat.setCompoundDrawableTintList(cbBlockDomain, ColorStateList.valueOf(colorWarning));\r\n    }\r\n    ibMore.setImageLevel(1);\r\n    cbBlocklist.setChecked(check_blocklist && use_blocklist);\r\n    tvBlocklist.setText(TextUtils.join(\", \", DnsBlockList.getNamesEnabled(context)));\r\n    cbBlockSender.setVisibility(View.VISIBLE);\r\n    grpBlockDomain.setVisibility(domains.size() > 0 ? View.VISIBLE : View.GONE);\r\n    grpFilter.setVisibility(View.GONE);\r\n    grpManage.setVisibility(View.GONE);\r\n    new SimpleTask<Boolean>() {\r\n\r\n        @Override\r\n        protected void onPreExecute(Bundle args) {\r\n            cbJunkFilter.setEnabled(false);\r\n        }\r\n\r\n        @Override\r\n        protected Boolean onExecute(Context context, Bundle args) {\r\n            long aid = args.getLong(\"account\");\r\n            long fid = args.getLong(\"folder\");\r\n            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n            boolean classification = prefs.getBoolean(\"classification\", false);\r\n            DB db = DB.getInstance(context);\r\n            EntityFolder folder = db.folder().getFolder(fid);\r\n            if (folder == null)\r\n                return null;\r\n            EntityFolder junk = db.folder().getFolderByType(aid, EntityFolder.JUNK);\r\n            if (junk == null)\r\n                return null;\r\n            return (classification && folder.download && folder.auto_classify_source && junk.download && junk.auto_classify_source && junk.auto_classify_target);\r\n        }\r\n\r\n        @Override\r\n        protected void onExecuted(Bundle args, Boolean filter) {\r\n            if (filter != null) {\r\n                cbJunkFilter.setChecked(filter);\r\n                cbJunkFilter.setEnabled(true);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected void onException(Bundle args, Throwable ex) {\r\n            Log.unexpectedError(getParentFragmentManager(), ex);\r\n        }\r\n    }.execute(FragmentDialogJunk.this, args, \"junk:filter\");\r\n    AlertDialog.Builder builder = new AlertDialog.Builder(context).setView(view).setNegativeButton(android.R.string.cancel, null);\r\n    builder.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            prefs.edit().putBoolean(\"block_sender\", cbBlockSender.isChecked()).apply();\r\n            getArguments().putBoolean(\"block_sender\", cbBlockSender.isChecked());\r\n            getArguments().putBoolean(\"block_domain\", cbBlockDomain.isChecked());\r\n            sendResult(Activity.RESULT_OK);\r\n        }\r\n    });\r\n    return builder.create();\r\n}\n--------------------------------------------------\n", "/*\r\n    This file is part of FairEmail.\r\n\r\n    FairEmail is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    FairEmail is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with FairEmail.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    Copyright 2018-2024 by Marcel Bokhorst (M66B)\r\n*/\r\nimport android.content.Context;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\nimport android.content.Context\nstatic List<String> getNamesEnabled(Context context) {\r\n    List<String> names = new ArrayList<>();\r\n    for (BlockList blocklist : BLOCK_LISTS) if (isEnabled(context, blocklist))\r\n        names.add(blocklist.name);\r\n    return names;\r\n}" ],
  "VinylMusicPlayer/228" : [ "setMessage(R.string.hexagon_remove_account_confirmation)\n--------------------------------------------------\nbinding.emptyViewMoviesSearch.setMessage(refresh.error.message)\n--------------------------------------------------\nbinding.emptyViewMoviesSearch.setMessage(R.string.no_results)\n--------------------------------------------------\nemptyView.setMessage(it.emptyMessage)\n--------------------------------------------------\nemptyView.setMessage(R.string.offline)\n--------------------------------------------------\nemptyView.setMessage(R.string.people_empty)\n--------------------------------------------------\nemptyView.setMessage(message)\n--------------------------------------------------\nemptyView.setMessage(result.emptyText)\n--------------------------------------------------\nsetMessage(authErrorMessage)\n--------------------------------------------------\nsetMessage(null)\n--------------------------------------------------\nsetMessage(message, false)\n--------------------------------------------------\nsetMessage(getString(R.string.waitplease), true)\n--------------------------------------------------\nsetMessage(authErrorMessage + if (currentState == null) {\n    \"\\n\\n(State is null.)\"\n} else {\n    \"\\n\\n(State does not match. Cross-site request forgery detected.)\"\n})\n--------------------------------------------------\nsetMessage(\"$authErrorMessage\\n\\n(No auth code returned.)\")\n--------------------------------------------------\nsetMessage(errorText)", "import android.view.View\nprotected fun setMessage(message: CharSequence?, progressVisible: Boolean) {\r\n        if (message == null) {\r\n            textViewMessage.visibility = View.GONE\r\n        } else {\r\n            textViewMessage.visibility = View.VISIBLE\r\n            textViewMessage.text = message\r\n        }\r\n        progressBar.visibility = if (progressVisible) View.VISIBLE else View.GONE\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Android-Password-Store/223" : [ "                                    is DrawerItem.Filter -> {\n                                        viewModel.setFilter(it.type())\r\n                                        scope.launch(Dispatchers.Default) {\n--------------------------------------------------\n                    getParcelableExtra(data, OPEN_FILTER, Filter::class.java)?.let {\n                        viewModel.setFilter(it)\r\n                    }\n--------------------------------------------------\n                    getParcelableExtra(data, EXTRA_PLACE, Place::class.java)?.let {\n                        viewModel.setFilter(PlaceFilter(it))\r\n                    }\n--------------------------------------------------\n            val task = getTaskToLoad(filter)\n            viewModel.setFilter(filter = filter, task = task)\r\n        }\n--------------------------------------------------\nlistViewModel.setFilter(FilterImpl(\"subtasks\", getQueryTemplate(it)))\n--------------------------------------------------\nsetFilter(defaultFilterProvider.getFilterPreferenceValue(filter))", "import org.tasks.filters.FilterProvider\nimport kotlinx.coroutines.flow.update\nimport com.todoroo.astrid.data.Task\nimport com.todoroo.astrid.api.Filter\nfun setFilter(\r\n        filter: Filter,\r\n        task: Task? = null,\r\n    ) {\r\n        _state.update {\r\n            it.copy(\r\n                filter = filter,\r\n                task = task,\r\n            )\r\n        }\r\n        updateFilters()\r\n        defaultFilterProvider.setLastViewedFilter(filter)\r\n    }\nimport com.todoroo.astrid.api.Filter\nimport com.todoroo.astrid.data.Task\nimport kotlinx.coroutines.flow.update\nimport org.tasks.filters.FilterProvider" ],
  "MaterialFiles/958" : [ "", "import timber.log.Timber\nimport android.os.Bundle\nimport android.content.Intent\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        if (isLocalePluginIntent(intent)) {\r\n            Timber.d(\r\n                \"Creating Activity with Intent=%s, savedInstanceState=%s, EXTRA_BUNDLE=%s\",\r\n                intent, savedInstanceState, getPreviousBundle()\r\n            )\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "MaterialFiles/957" : [ "", "import timber.log.Timber\nimport android.os.Bundle\nimport android.content.Intent\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        if (isLocalePluginIntent(intent)) {\r\n            Timber.d(\r\n                \"Creating Activity with Intent=%s, savedInstanceState=%s, EXTRA_BUNDLE=%s\",\r\n                intent, savedInstanceState, getPreviousBundle()\r\n            )\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/223" : [ "@Override\r\nprotected Integer doBackgroundAction(Void... params) {\r\n    String listId = getListId();\r\n    if (isSendingToHexagon()) {\r\n        HexagonTools hexagonTools = SgApp.getServicesComponent(getContext()).hexagonTools();\r\n        Lists listsService = hexagonTools.getListsService();\r\n        if (listsService == null) {\r\n            // no longer signed in\r\n            return ERROR_HEXAGON_API;\r\n        }\r\n        // send list to be added to hexagon\r\n        SgListList wrapper = new SgListList();\r\n        List<SgList> lists = buildList(listId, listName);\r\n        wrapper.setLists(lists);\r\n        try {\r\n            listsService.save(wrapper).execute();\r\n        } catch (IOException e) {\r\n            Errors.logAndReportHexagon(\"add list\", e);\r\n            return ERROR_HEXAGON_API;\r\n        }\r\n    }\r\n    // update local state\r\n    if (!doDatabaseUpdate(getContext().getContentResolver(), listId)) {\r\n        return ERROR_DATABASE;\r\n    }\r\n    return SUCCESS;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport com.uwetrottmann.seriesguide.backend.lists.model.SgList;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\nimport com.uwetrottmann.seriesguide.backend.lists.model.SgList\nimport androidx.annotation.NonNull\n@NonNull\r\nprivate static List<SgList> buildList(@NonNull String listId, @NonNull String listName) {\r\n    List<SgList> lists = new ArrayList<>(1);\r\n    SgList list = new SgList();\r\n    list.setListId(listId);\r\n    list.setName(listName);\r\n    lists.add(list);\r\n    return lists;\r\n}" ],
  "VinylMusicPlayer/217" : [ "            ) {\n                val songs: List<Song> = getSongs(intent.extras!!)\n                if (MusicPlayerRemote.shuffleMode == MusicService.SHUFFLE_MODE_SHUFFLE) {\n--------------------------------------------------\n                if (MusicPlayerRemote.shuffleMode == MusicService.SHUFFLE_MODE_SHUFFLE) {\n                    MusicPlayerRemote.openAndShuffleQueue(songs, true)\n                } else {\n--------------------------------------------------\n                } else {\n                    MusicPlayerRemote.openQueue(songs, 0, true)\n                }\n--------------------------------------------------\n                    val position: Int = intent.getIntExtra(\"position\", 0)\n                    val songs: List<Song> = PlaylistSongsLoader.getPlaylistSongList(get(), id)\n                    MusicPlayerRemote.openQueue(songs, position, true)\n--------------------------------------------------\n                    val songs: List<Song> = PlaylistSongsLoader.getPlaylistSongList(get(), id)\n                    MusicPlayerRemote.openQueue(songs, position, true)\n                    handled = true\n--------------------------------------------------\n                    val position: Int = intent.getIntExtra(\"position\", 0)\n                    val songs = libraryViewModel.albumById(id).songs\n                    MusicPlayerRemote.openQueue(\n--------------------------------------------------\n                    MusicPlayerRemote.openQueue(\n                        songs,\n                        position,\n--------------------------------------------------\n                    val position: Int = intent.getIntExtra(\"position\", 0)\n                    val songs: List<Song> = libraryViewModel.artistById(id).songs\n                    MusicPlayerRemote.openQueue(\n--------------------------------------------------\nsongsRepository.songs()\n--------------------------------------------------\nsongs(it)\n--------------------------------------------------\nsongs(it.toSongs())\n--------------------------------------------------\ngenreRepository.songs(genre.id)\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(ARTIST_SELECTION + AND + ALBUM_SELECTION + AND + TITLE_SELECTION, arrayOf(artistName.lowercase(), albumName.lowercase(), titleName.lowercase())))\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(ARTIST_SELECTION + AND + TITLE_SELECTION, arrayOf(artistName.lowercase(), titleName.lowercase())))\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(ALBUM_SELECTION + AND + TITLE_SELECTION, arrayOf(albumName.lowercase(), titleName.lowercase())))\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(ARTIST_SELECTION, arrayOf(artistName.lowercase())))\n--------------------------------------------------\nsongRepository.songs(songRepository.makeSongCursor(ALBUM_SELECTION, arrayOf(albumName.lowercase())))\n--------------------------------------------------\nsongRepository.songs(songRepository.makeSongCursor(TITLE_SELECTION, arrayOf(titleName.lowercase())))\n--------------------------------------------------\nsongRepository.songs(songRepository.makeSongCursor(ARTIST_SELECTION, arrayOf(query.lowercase())))\n--------------------------------------------------\nsongRepository.songs(songRepository.makeSongCursor(ALBUM_SELECTION, arrayOf(query.lowercase())))\n--------------------------------------------------\nsongRepository.songs(songRepository.makeSongCursor(TITLE_SELECTION, arrayOf(query.lowercase())))\n--------------------------------------------------\nsongRepository.songs()\n--------------------------------------------------\nsongRepository.songs(songRepository.makeSongCursor(null, null, getSongLoaderSortOrder()))\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(AudioColumns.ALBUM + \" LIKE ?\", arrayOf(\"%$query%\"), getSongLoaderSortOrder()))\n--------------------------------------------------\nsongRepository.songs(cursor)\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(AudioColumns.ARTIST_ID + \"=?\", arrayOf(artistId.toString()), getSongLoaderSortOrder()))\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(\"album_artist\" + \"=?\", arrayOf(artistName), getSongLoaderSortOrder()))\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(null, null, \"lower($ALBUM_ARTIST)\" + if (PreferenceUtil.artistSortOrder == SortOrder.ArtistSortOrder.ARTIST_A_Z) \"\" else \" DESC\"))\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(\"album_artist\" + \" LIKE ?\", arrayOf(\"%$query%\"), getSongLoaderSortOrder()))\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(AudioColumns.ARTIST + \" LIKE ?\", arrayOf(\"%$query%\"), getSongLoaderSortOrder()))\n--------------------------------------------------\nsongRepository.songs(makeGenreSongCursor(genreId))\n--------------------------------------------------\nsongRepository.songs(songRepository.makeSongCursor(selection, null))\n--------------------------------------------------\nsongRepository.songs(makeLastAddedCursor())\n--------------------------------------------------\nval songs = songs(cursor)\n--------------------------------------------------\nreturn songs(makeSongCursor(AudioColumns.TITLE + \" LIKE ?\", arrayOf(\"%$query%\")))\n--------------------------------------------------\nsongs(makeSongCursor(Constants.DATA + \"=?\", arrayOf(filePath), ignoreBlacklist = ignoreBlacklist))\n--------------------------------------------------\nsongRepository.songs(makeRecentTracksCursorAndClearUpDatabase())\n--------------------------------------------------\nsongRepository.songs(makeTopTracksCursorAndClearUpDatabase())\n--------------------------------------------------\nsongs(songRepository.makeSongCursor(null, null, MediaStore.Audio.Media.DATE_ADDED + \" ASC\"))\n--------------------------------------------------\nsongRepository.songs(makePlayedTracksCursorAndClearUpDatabase())\n--------------------------------------------------\nsongRepository.songs(makeNotRecentTracksCursorAndClearUpDatabase())", "import code.name.monkey.retromusic.model.Song\nimport android.database.Cursor\noverride fun songs(cursor: Cursor?): List<Song> {\n        val songs = arrayListOf<Song>()\n        if (cursor != null && cursor.moveToFirst()) {\n            do {\n                songs.add(getSongFromCursorImpl(cursor))\n            } while (cursor.moveToNext())\n        }\n        cursor?.close()\n        return songs\n    }\nImport(names=[android, database, Cursor], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/219" : [ "public void putLaps(List<LapEntity> laps) {\r\n    this.getLaps().clear();\r\n    this.addLaps(laps);\r\n}\n--------------------------------------------------\npublic void putPoints(List<LocationEntity> points) {\r\n    this.getLocationPoints().clear();\r\n    this.addPoints(points);\r\n}\n--------------------------------------------------\n", "public void clear() {\r\n    synchronizers.clear();\r\n    synchronizersById.clear();\r\n}" ],
  "VinylMusicPlayer/218" : [ "makeGenreSongCursor(genreId)", "import code.name.monkey.retromusic.util.PreferenceUtil\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.model.Genre\nimport code.name.monkey.retromusic.Constants.baseProjection\nimport code.name.monkey.retromusic.Constants.IS_MUSIC\nimport android.provider.MediaStore.Audio.Genres\nimport android.database.Cursor\nprivate fun makeGenreSongCursor(genreId: Long): Cursor? {\n        return try {\n            contentResolver.query(\n                Genres.Members.getContentUri(\"external\", genreId),\n                baseProjection,\n                IS_MUSIC,\n                null,\n                PreferenceUtil.songSortOrder\n            )\n        } catch (e: SecurityException) {\n            return null\n        }\n    }\nImport(names=[android, database, Cursor], wildcard=false, alias=null)\nImport(names=[android, provider, MediaStore, Audio, Genres], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, Constants, IS_MUSIC], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, Constants, baseProjection], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, model, Genre], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, util, PreferenceUtil], wildcard=false, alias=null)" ],
  "MaterialFiles/965" : [ "", "import timber.log.Timber\nimport android.os.Bundle\nimport android.content.Intent\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        if (isLocalePluginIntent(intent)) {\r\n            Timber.d(\r\n                \"Creating Activity with Intent=%s, savedInstanceState=%s, EXTRA_BUNDLE=%s\",\r\n                intent, savedInstanceState, getPreviousBundle()\r\n            )\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Trail-Sense/1040" : [ "\n            val folderIds = messageStore.getFolders(excludeLocalOnly = true) { folderDetails ->\r\n                if (folderDetails.isIntegrate) folderDetails.id else null\n--------------------------------------------------\n        val messageStore = messageStoreManager.getMessageStore(account)\n        return messageStore.getFolders(excludeLocalOnly = true) { folder ->\r\n            RemoteFolder(\n--------------------------------------------------\n        val messageStore = messageStoreManager.getMessageStore(account)\n        return messageStore.getFolders(excludeLocalOnly = true) { folder ->\r\n            RemoteFolderDetails(", "import com.fsck.k9.mailstore.RemoteFolder\nimport com.fsck.k9.Account\nimport androidx.lifecycle.LiveData\nfun getFolders(account: Account): LiveData<RemoteFolderInfo> {\r\n        if (foldersLiveData.value == null) {\r\n            loadFolders(account)\r\n        }\r\n\r\n        return foldersLiveData\r\n    }\nimport androidx.lifecycle.LiveData\nimport com.fsck.k9.Account\nimport com.fsck.k9.mailstore.RemoteFolder" ],
  "Feeder/368" : [ "super.onClick(v, position, item)\n--------------------------------------------------\neventsHandler.onClick(v, layoutPosition, it)\n--------------------------------------------------\nonClick(v, position, item)\n--------------------------------------------------\nbrowserContainer.onClick(v, position, dataset[position])\n--------------------------------------------------\nsuper.onClick(v)\n--------------------------------------------------\nclickListener.onClick(view)\n--------------------------------------------------\nclickListener.onClick(downView)\n--------------------------------------------------\nonClick(dataset[layoutPosition])\n--------------------------------------------------\nis SimpleClick -> onClick(position, item)\n--------------------------------------------------\nif (actionMode != null) onClick(position, item) else onLongClick(position, item)\n--------------------------------------------------\nonClick(it)\n--------------------------------------------------\nonClick(position, item)", "import org.videolan.medialibrary.media.MediaLibraryItem\nimport androidx.appcompat.view.ActionMode\nimport android.view.View\noverride fun onClick(v: View, position: Int, item: MediaLibraryItem) {\r\n        if (actionMode != null) {\r\n            getCurrentAdapter()?.multiSelectHelper?.toggleSelection(position)\r\n            invalidateActionMode()\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[org, videolan, medialibrary, media, MediaLibraryItem], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/691" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "Feeder/369" : [ "viewModel.onDashboardEvent(DashboardEvent.InitAll)\n--------------------------------------------------\nviewModel.onDashboardEvent(DashboardEvent.ReadPermissionChanged(it))\n--------------------------------------------------\nviewModel.onDashboardEvent(DashboardEvent.UpdateTask(it))", "import kotlinx.coroutines.launch\nimport com.mhss.app.mybrain.domain.model.Task\nimport com.mhss.app.mybrain.domain.model.CalendarEvent\nimport androidx.lifecycle.viewModelScope\nfun onDashboardEvent(event: DashboardEvent) {\r\n        when(event) {\r\n            is DashboardEvent.ReadPermissionChanged -> {\r\n                if (event.hasPermission)\r\n                    getCalendarEvents()\r\n            }\r\n            is DashboardEvent.UpdateTask -> viewModelScope.launch {\r\n                updateTask(event.task)\r\n            }\r\n            DashboardEvent.InitAll -> collectDashboardData()\r\n        }\r\n    }\nimport androidx.lifecycle.viewModelScope\nimport com.mhss.app.mybrain.domain.model.CalendarEvent\nimport com.mhss.app.mybrain.domain.model.Task\nimport kotlinx.coroutines.launch" ],
  "VinylMusicPlayer/690" : [ "@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (requestCode == REQUEST_CODE_CAMERA) {\r\n        if (resultCode == RESULT_OK) {\r\n            final Intent intent = new Intent();\r\n            intent.setData(uri);\r\n            setResult(RESULT_OK, intent);\r\n        }\r\n        finish();\r\n    } else {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n}\n--------------------------------------------------\nprivate void sendResult(DialogInterface d, int... i) {\r\n    Intent data = new Intent();\r\n    data.putExtra(EXTRA_GEOFENCE, (Parcelable) toGeofence());\r\n    getTargetFragment().onActivityResult(getTargetRequestCode(), RESULT_OK, data);\r\n    dismiss();\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (requestCode == REQUEST_CODE_CAMERA) {\r\n        if (resultCode == RESULT_OK) {\r\n            final Intent intent = new Intent();\r\n            intent.setData(uri);\r\n            setResult(RESULT_OK, intent);\r\n        }\r\n        finish();\r\n    } else {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n}" ],
  "MaterialFiles/966" : [ "", "import timber.log.Timber\nimport android.os.Bundle\nimport android.content.Intent\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        if (isLocalePluginIntent(intent)) {\r\n            Timber.d(\r\n                \"Creating Activity with Intent=%s, savedInstanceState=%s, EXTRA_BUNDLE=%s\",\r\n                intent, savedInstanceState, getPreviousBundle()\r\n            )\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Trail-Sense/1043" : [ "", "import com.simplemobiletools.commons.extensions.applyColorFilter\nimport androidx.core.graphics.drawable.toBitmap\nimport android.widget.TextView\nimport android.graphics.drawable.BitmapDrawable\nimport android.content.res.Resources\nfun TextView.addResizedBackgroundDrawable(res: Resources, drawableHeight: Int, primaryColor: Int, drawableId: Int) {\r\n    val baseDrawable = res.getDrawable(drawableId).toBitmap(drawableHeight, drawableHeight)\r\n    val scaledDrawable = BitmapDrawable(res, baseDrawable)\r\n    scaledDrawable.applyColorFilter(primaryColor)\r\n    background = scaledDrawable\r\n}\nImport(names=[android, content, res, Resources], wildcard=false, alias=null)\nImport(names=[android, graphics, drawable, BitmapDrawable], wildcard=false, alias=null)\nImport(names=[android, widget, TextView], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/213" : [ "", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.R\nimport java.util.List\npublic static boolean isSAFRequiredForSongs(List<Song> songs) {\r\n    for (Song song : songs) {\r\n        if (isSAFRequired(song))\r\n            return true;\r\n    }\r\n    return false;\r\n}" ],
  "VinylMusicPlayer/696" : [ "void setValue(int value) {\r\n    if (mSetValueListener != null) {\r\n        try {\r\n            value = mSetValueListener.preSetValue(value);\r\n        } catch (java.lang.IllegalArgumentException ex) {\r\n            if ((int) mCurrValue != -1) {\r\n                mSpin.setViewSelection((int) mCurrValue);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    mCurrValue = value;\r\n    int selectionValue = getSelectionValue(value);\r\n    mSpin.setViewSelection(selectionValue);\r\n    if (mSpin.getViewAdapter() != null) {\r\n        mSpin.setViewValue(selectionValue);\r\n    }\r\n    if (mKey == null)\r\n        return;\r\n    Editor pref = PreferenceManager.getDefaultSharedPreferences(mContext).edit();\r\n    pref.putInt(mKey, value);\r\n    pref.apply();\r\n}\n--------------------------------------------------\nprivate void setValue(String value, Boolean savePreferences) {\r\n    if (mSetValueListener != null) {\r\n        try {\r\n            value = mSetValueListener.preSetValue(value);\r\n        } catch (java.lang.IllegalArgumentException ex) {\r\n            if (mSpin.getViewAdapter() != null) {\r\n                mSpin.setViewSelection((int) mCurrValue);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    //Store the value - could be separate for distance vs time\r\n    if (value == null) {\r\n        mCurrValue = 0;\r\n    } else if (mType == Type.TS_DURATIONPICKER) {\r\n        mCurrValue = SafeParse.parseSeconds(value, 0);\r\n    } else if (mType != Type.TS_TIMEPICKER) {\r\n        mCurrValue = (long) SafeParse.parseDouble(value, 0);\r\n    }\r\n    if (mType == Type.TS_DISTANCEPICKER && !TextUtils.isEmpty(value)) {\r\n        // Should be replaced with Formatter\r\n        mSpin.setViewText(String.format(\"%s %s\", value, mContext.getResources().getString(org.runnerup.common.R.string.metrics_distance_m)));\r\n    } else {\r\n        mSpin.setViewText(value);\r\n    }\r\n    if (mType == Type.TS_SPINNER_TXT) {\r\n        if (mSpin.getViewAdapter() != null) {\r\n            int intVal = find(mSpin.getViewAdapter(), value);\r\n            // here because onclicklistener doesn't react to changing to the same value twice\r\n            mCurrValue = intVal;\r\n            mSpin.setViewSelection(intVal);\r\n        }\r\n    }\r\n    if (mKey == null || !savePreferences)\r\n        return;\r\n    Editor pref = PreferenceManager.getDefaultSharedPreferences(mContext).edit();\r\n    pref.putString(mKey, value);\r\n    pref.apply();\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.provider.Settings\nimport android.content.Intent\n@Override\r\npublic String preSetValue(String newValue) throws IllegalArgumentException {\r\n    if (newValue != null && newValue.contentEquals((String) adapter.getItem(adapter.getCount() - 1))) {\r\n        Intent i = new Intent(StartActivity.this, AudioCueSettingsActivity.class);\r\n        startActivity(i);\r\n        throw new IllegalArgumentException();\r\n    }\r\n    return newValue;\r\n}" ],
  "VinylMusicPlayer/212" : [ "private List<Item> fromNotes(List<Note> noteList, @NonNull NavigationCategory selectedCategory, @Nullable CategorySortingMethod sortingMethod) {\r\n    if (selectedCategory.getType() == DEFAULT_CATEGORY) {\r\n        final String category = selectedCategory.getCategory();\r\n        if (category != null) {\r\n            return fillListByCategory(noteList, category);\r\n        } else {\r\n            throw new IllegalStateException(NavigationCategory.class.getSimpleName() + \" type is \" + DEFAULT_CATEGORY + \", but category is null.\");\r\n        }\r\n    }\r\n    if (sortingMethod == SORT_MODIFIED_DESC) {\r\n        return fillListByTime(getApplication(), noteList);\r\n    } else {\r\n        return fillListByInitials(getApplication(), noteList);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport it.niedermann.owncloud.notes.main.items.section.SectionItem;\r\nimport it.niedermann.owncloud.notes.shared.util.NoteUtil\nimport it.niedermann.owncloud.notes.shared.model.Item\nimport it.niedermann.owncloud.notes.persistence.entity.Note\nimport it.niedermann.owncloud.notes.main.items.section.SectionItem\nimport java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<Item> fillListByCategory(@NonNull List<Note> noteList, @Nullable String currentCategory) {\r\n    final var itemList = new ArrayList<Item>();\r\n    for (final var note : noteList) {\r\n        if (currentCategory != null && !currentCategory.equals(note.getCategory())) {\r\n            itemList.add(new SectionItem(NoteUtil.extendCategory(note.getCategory())));\r\n        }\r\n        itemList.add(note);\r\n        currentCategory = note.getCategory();\r\n    }\r\n    return itemList;\r\n}" ],
  "VinylMusicPlayer/215" : [ "getSongList(selection)", "import code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.db.toSongs\nimport code.name.monkey.retromusic.db.PlaylistWithSongs\nprivate fun getSongList(playlists: List<PlaylistWithSongs>): List<Song> {\n        val songs = mutableListOf<Song>()\n        playlists.forEach {\n            songs.addAll(it.songs.toSongs())\n        }\n        return songs\n    }" ],
  "Trail-Sense/1045" : [ "            }\n            run(from, V9_7) { caldavDao.resetOrders() }\r\n            run(from, V9_7_3) { caldavDao.updateParents() }\n--------------------------------------------------\npreferences.reset()", "fun reset() {\r\n        clear()\r\n        setDefaults()\r\n    }" ],
  "Trail-Sense/1046" : [ "", "import android.graphics.Paint\noverride fun fillCircle(\r\n        centerX: Double,\r\n        centerY: Double,\r\n        radius: Double\r\n    ) {\r\n        paint.style = Paint.Style.FILL\r\n        innerCanvas.drawCircle(centerX.toDp(), centerY.toDp(), radius.toDp(), paint)\r\n    }\nImport(names=[android, graphics, Paint], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/214" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/692" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    unregisterStartEventListener();\r\n}\n--------------------------------------------------\n", "import java.util.List\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    registerStartEventListener();\r\n}" ],
  "VinylMusicPlayer/694" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == MenuHelper.save) {\r\n        return onActionDoneClick();\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    boolean result;\r\n    result = datePeriodItemSelected(item);\r\n    if (result)\r\n        return true;\r\n    result = isStatusSelectionHandled(item);\r\n    if (result)\r\n        return true;\r\n    result = isFilterSelected(item);\r\n    if (result)\r\n        return true;\r\n    switch(item.getItemId()) {\r\n        case R.id.menu_add_transaction_account:\r\n            startCheckingAccountActivity();\r\n            result = true;\r\n            break;\r\n        case R.id.menu_export_to_csv:\r\n            if (mAllDataListFragment != null && mAccount != null)\r\n                mAllDataListFragment.exportDataToCSVFile(mAccount.getName());\r\n            result = true;\r\n            break;\r\n        default:\r\n            result = false;\r\n            break;\r\n    }\r\n    // If not consumed here (true), send for further processing to the parent.\r\n    if (result) {\r\n        return result;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport com.money.manager.ex.R\nimport androidx.drawerlayout.widget.DrawerLayout\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    // nothing\r\n    if (item.getItemId() == android.R.id.home) {\r\n        // toggle drawer with the menu hardware button.\r\n        if (mDrawer != null) {\r\n            if (mDrawer.isDrawerOpen(mDrawerLayout)) {\r\n                mDrawer.closeDrawer(mDrawerLayout);\r\n            } else {\r\n                mDrawer.openDrawer(mDrawerLayout);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "Feeder/360" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/361" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Feeder/365" : [ "{\r\n        updateMenuItemColors(menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }", "import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        updateMenuItemColors(menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }\nimport android.view.Menu" ],
  "Trail-Sense/1050" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/378" : [ "        Row(modifier = Modifier.fillMaxWidth()) {\n            DisabledText(\r\n                text = stringResource(id = R.string.add_reminder),\n--------------------------------------------------\n            } else {\n                DisabledText(\r\n                    text = stringResource(id = R.string.add_attachment),", "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Text\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.ContentAlpha\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.defaultMinSize\n\r\n@Composable\r\nfun DisabledText(\r\n    text: String,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Text(\r\n        text = text,\r\n        style = MaterialTheme.typography.body1,\r\n        modifier = modifier\r\n            .alpha(alpha = ContentAlpha.disabled)\r\n            .padding(end = 16.dp)\r\n            .defaultMinSize(minHeight = 24.dp),\r\n    )\r\n}\nimport androidx.compose.foundation.layout.defaultMinSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.ContentAlpha\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.unit.dp" ],
  "Feeder/379" : [ "builder.addSegment(0, startSegment.startIndex + startOffset, startSegment.startIndex + endOffset)\n--------------------------------------------------\nbuilder.addSegment(startSegment)\n--------------------------------------------------\nbuilder.addSegment(0, startSegment.startIndex + startOffset, startSegment.endIndex)\n--------------------------------------------------\nbuilder.addSegment(segments[segmentIndex])\n--------------------------------------------------\nbuilder.addSegment(endSegment)\n--------------------------------------------------\nbuilder.addSegment(0, endSegment.startIndex, endSegment.startIndex + endOffset)\n--------------------------------------------------\nsectionBuilder.addSegment(0, sectionStartIndex, endIndex)\n--------------------------------------------------\nsectionBuilder.addSegment(spaces, startIndex, endIndex)\n--------------------------------------------------\nsectionBuilder.addSegment(0, sectionStartIndex, text.length)\n--------------------------------------------------\nsectionBuilder.addSegment(spaces, startOfContentIndex, text.length)\n--------------------------------------------------\nbuilder.addSegment(spaces, startIndex, index)", "internal fun addSegment(segment: Segment) {\r\n            indent = 0\r\n            segments.add(segment)\r\n        }" ],
  "MaterialFiles/977" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "Trail-Sense/1054" : [ "        HudHelper.showErrorMessage(view, text = message)\n        viewModel.errorShown()\r\n    }\n--------------------------------------------------\n                            SnackbarError(it.getString())\n                            viewModel.errorShown()\r\n                        }", "fun errorShown() {\r\n        showError = false\r\n        syncState()\r\n    }" ],
  "Trail-Sense/1055" : [ "showFragment(if (currentFragmentId != 0) currentFragmentId else settings.getInt(\"fragment_id\", defaultFragmentId))\n--------------------------------------------------\nshowFragment(fragment, id, tag)\n--------------------------------------------------\nshowFragment(id)\n--------------------------------------------------\nshowFragment(ID_SLEEP)\n--------------------------------------------------\nelse -> showFragment(option.id)\n--------------------------------------------------\nshowFragment(viewModel.currentFragment)\n--------------------------------------------------\nshowFragment(FragmentName.SCAN)\n--------------------------------------------------\nshowFragment(FragmentName.ASK_PERMISSION)\n--------------------------------------------------\nshowFragment(if (Permissions.canReadStorage(applicationContext)) FragmentName.SCAN else FragmentName.NO_PERMISSION)\n--------------------------------------------------\nshowFragment(if (Permissions.canReadStorage(applicationContext)) FragmentName.SCAN else FragmentName.THEME)\n--------------------------------------------------\nshowFragment(FragmentName.THEME)\n--------------------------------------------------\nshowFragment(FragmentName.NOTIFICATION_PERMISSION)\n--------------------------------------------------\n(requireActivity() as OnboardingActivity).showFragment(FragmentName.ASK_PERMISSION, true)", "import androidx.fragment.app.Fragment\nprivate fun showFragment(id: Int) {\r\n        val tag = getTag(id)\r\n        val fragment = getNewFragment(id)\r\n        showFragment(fragment, id, tag)\r\n    }" ],
  "Trail-Sense/1052" : [ "                                                        modifier = Modifier.size(48.dp),\n                                                        painter = adaptiveIconPainterResource(\r\n                                                            id = R.mipmap.launcher_main,", "import io.horizontalsystems.bankwallet.R\nimport androidx.core.graphics.drawable.toBitmap\nimport androidx.core.content.res.ResourcesCompat\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.graphics.painter.BitmapPainter\nimport androidx.compose.ui.graphics.asImageBitmap\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.Image\nimport androidx.annotation.DrawableRes\nimport android.graphics.drawable.AdaptiveIconDrawable\n\r\n@Composable\r\nfun adaptiveIconPainterResource(@DrawableRes id: Int, @DrawableRes fallbackDrawable: Int): Painter {\r\n    val res = LocalContext.current.resources\r\n    val theme = LocalContext.current.theme\r\n\r\n    val adaptiveIcon = ResourcesCompat.getDrawable(res, id, theme) as? AdaptiveIconDrawable\r\n    return if (adaptiveIcon != null) {\r\n        BitmapPainter(adaptiveIcon.toBitmap().asImageBitmap())\r\n    } else {\r\n        painterResource(fallbackDrawable)\r\n    }\r\n}\nimport android.graphics.drawable.AdaptiveIconDrawable\nimport androidx.annotation.DrawableRes\nimport androidx.compose.foundation.Image\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics.asImageBitmap\nimport androidx.compose.ui.graphics.painter.BitmapPainter\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.core.content.res.ResourcesCompat\nimport androidx.core.graphics.drawable.toBitmap\nimport io.horizontalsystems.bankwallet.R" ],
  "Trail-Sense/1053" : [ "            if (folderTotal > 0) {\n                level = (MAX_PROGRESS * activityListener.getFolderCompleted() / folderTotal).coerceAtMost(MAX_PROGRESS)\r\n            }", "fun getFolderCompleted(): Int {\r\n            synchronized(lock) {\r\n                return folderCompleted\r\n            }\r\n        }" ],
  "VinylMusicPlayer/686" : [ "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    binding = MessagesLayoutBinding.inflate(layoutInflater)\n    setContentView(binding.root)\n    setUpConnectivityStatusCheck(lifecycle)\n    val environment = this.getEnvironment()?.let { env ->\n        viewModelFactory = MessagesViewModel.Factory(env, intent)\n        env\n    }\n    ksCurrency = requireNotNull(environment?.ksCurrency())\n    ksString = requireNotNull(environment?.ksString())\n    adapter = MessagesAdapter()\n    binding.messagesRecyclerView.adapter = adapter\n    val layoutManager = LinearLayoutManager(this)\n    layoutManager.stackFromEnd = true\n    binding.messagesRecyclerView.layoutManager = layoutManager\n    binding.messagesBackingInfoView.messagesViewPledgeButton.text = getString(R.string.project_view_button)\n    setAppBarOffsetChangedListener(binding.messagesAppBarLayout)\n    binding.messageReplyLayout.messageEditText.onFocusChangeListener = View.OnFocusChangeListener { v, hasFocus ->\n        viewModel.inputs.messageEditTextIsFocused(hasFocus)\n    }\n    viewModel.outputs.backButtonIsGone().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        ViewUtils.setGone(binding.messagesToolbar.messagesToolbarBackButton, it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.backingAndProject().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        setBackingInfoView(it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.backingInfoViewIsGone().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        ViewUtils.setGone(binding.messagesBackingInfoView.backingInfoView, it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.closeButtonIsGone().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        ViewUtils.setGone(binding.messagesToolbar.messagesToolbarCloseButton, it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.creatorNameTextViewText().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        binding.messagesCreatorNameTextView.text = ksString.format(getString(R.string.project_creator_by_creator), \"creator_name\", it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.loadingIndicatorViewIsGone().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        ViewUtils.setGone(binding.messagesLoadingIndicator, it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.messageEditTextHint().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        setMessageEditTextHint(it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.messageEditTextShouldRequestFocus().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        requestFocusAndOpenKeyboard()\n    }.addToDisposable(disposables)\n    viewModel.outputs.messageList().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        adapter.messages(it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.projectNameTextViewText().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        binding.messagesProjectNameTextView.text = it\n    }.addToDisposable(disposables)\n    viewModel.outputs.projectNameToolbarTextViewText().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        binding.messagesToolbar.messagesProjectNameCollapsedTextView.text = it\n    }.addToDisposable(disposables)\n    viewModel.outputs.recyclerViewDefaultBottomPadding().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        setDefaultRecyclerViewBottomPadding()\n    }.addToDisposable(disposables)\n    viewModel.outputs.recyclerViewInitialBottomPadding().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        setInitialRecyclerViewBottomPadding(it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.scrollRecyclerViewToBottom().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        binding.messagesRecyclerView.scrollToPosition(adapter.itemCount - 1)\n    }.addToDisposable(disposables)\n    viewModel.outputs.setMessageEditText().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        binding.messageReplyLayout.messageEditText.setText(it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.sendMessageButtonIsEnabled().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        binding.messageReplyLayout.sendMessageButton.isEnabled = it\n    }.addToDisposable(disposables)\n    viewModel.outputs.showMessageErrorToast().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        ViewUtils.showToast(this, it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.startBackingActivity().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        startBackingActivity(it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.toolbarIsExpanded().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        binding.messagesAppBarLayout.setExpanded(it)\n    }.addToDisposable(disposables)\n    viewModel.outputs.viewPledgeButtonIsGone().observeOn(AndroidSchedulers.mainThread()).subscribe {\n        ViewUtils.setGone(binding.messagesBackingInfoView.messagesViewPledgeButton, it)\n    }.addToDisposable(disposables)\n    binding.messagesBackingInfoView.messagesViewPledgeButton.setOnClickListener {\n        viewPledgeButtonClicked()\n    }\n    binding.messageReplyLayout.sendMessageButton.setOnClickListener {\n        sendMessageButtonClicked()\n    }\n    binding.messagesToolbar.messagesToolbarBackButton.setOnClickListener {\n        finishWithAnimation()\n    }\n    binding.messagesToolbar.messagesToolbarCloseButton.setOnClickListener {\n        finishWithAnimation()\n    }\n    binding.messageReplyLayout.messageEditText.doOnTextChanged { message, _, _, _ ->\n        message?.let {\n            onMessageEditTextChanged(it)\n        }\n    }\n    this.onBackPressedDispatcher.addCallback {\n        finishWithAnimation()\n    }\n}", "import com.kickstarter.R\nimport android.view.View\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        binding.messagesRecyclerView.adapter = null\r\n        disposables.clear()\r\n    }" ],
  "VinylMusicPlayer/201" : [ "", "import android.database.Cursor;\r\nimport java.util.ArrayList;\r\nimport java.util.ArrayList\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\npublic ArrayList<String> getPaths() {\r\n    Cursor cursor = getReadableDatabase().query(BlacklistStoreColumns.NAME, new String[] { BlacklistStoreColumns.PATH }, null, null, null, null, null);\r\n    ArrayList<String> paths = new ArrayList<>();\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        do {\r\n            paths.add(cursor.getString(0));\r\n        } while (cursor.moveToNext());\r\n    }\r\n    if (cursor != null)\r\n        cursor.close();\r\n    return paths;\r\n}" ],
  "Trail-Sense/1056" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/203" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    ((Infinity) getApplication()).getAppComponent().inject(this);\r\n    boolean systemDefault = Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q;\r\n    int systemThemeType = Integer.parseInt(mSharedPreferences.getString(SharedPreferencesUtils.THEME_KEY, \"2\"));\r\n    switch(systemThemeType) {\r\n        case 0:\r\n            AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_NO);\r\n            getTheme().applyStyle(R.style.Theme_Normal, true);\r\n            break;\r\n        case 1:\r\n            AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_YES);\r\n            if (mSharedPreferences.getBoolean(SharedPreferencesUtils.AMOLED_DARK_KEY, false)) {\r\n                getTheme().applyStyle(R.style.Theme_Normal_AmoledDark, true);\r\n            } else {\r\n                getTheme().applyStyle(R.style.Theme_Normal_NormalDark, true);\r\n            }\r\n            break;\r\n        case 2:\r\n            if (systemDefault) {\r\n                AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_FOLLOW_SYSTEM);\r\n            } else {\r\n                AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_AUTO_BATTERY);\r\n            }\r\n            if ((getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK) == Configuration.UI_MODE_NIGHT_NO) {\r\n                getTheme().applyStyle(R.style.Theme_Normal, true);\r\n            } else {\r\n                if (mSharedPreferences.getBoolean(SharedPreferencesUtils.AMOLED_DARK_KEY, false)) {\r\n                    getTheme().applyStyle(R.style.Theme_Normal_AmoledDark, true);\r\n                } else {\r\n                    getTheme().applyStyle(R.style.Theme_Normal_NormalDark, true);\r\n                }\r\n            }\r\n    }\r\n    getTheme().applyStyle(FontStyle.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.FONT_SIZE_KEY, FontStyle.Normal.name())).getResId(), true);\r\n    getTheme().applyStyle(TitleFontStyle.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.TITLE_FONT_SIZE_KEY, TitleFontStyle.Normal.name())).getResId(), true);\r\n    getTheme().applyStyle(ContentFontStyle.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.CONTENT_FONT_SIZE_KEY, ContentFontStyle.Normal.name())).getResId(), true);\r\n    getTheme().applyStyle(FontFamily.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.FONT_FAMILY_KEY, FontFamily.Default.name())).getResId(), true);\r\n    getTheme().applyStyle(TitleFontFamily.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.TITLE_FONT_FAMILY_KEY, TitleFontFamily.Default.name())).getResId(), true);\r\n    getTheme().applyStyle(ContentFontFamily.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.CONTENT_FONT_FAMILY_KEY, ContentFontFamily.Default.name())).getResId(), true);\r\n    boolean zoomable = mSharedPreferences.getBoolean(SharedPreferencesUtils.PINCH_TO_ZOOM_VIDEO, false);\r\n    if (zoomable) {\r\n        setContentView(R.layout.activity_view_video_zoomable);\r\n    } else {\r\n        setContentView(R.layout.activity_view_video);\r\n    }\r\n    ButterKnife.bind(this);\r\n    setVolumeControlStream(AudioManager.STREAM_MUSIC);\r\n    setTitle(\" \");\r\n    if (typeface != null) {\r\n        titleTextView.setTypeface(typeface);\r\n    }\r\n    Resources resources = getResources();\r\n    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\r\n    useBottomAppBar = mSharedPreferences.getBoolean(SharedPreferencesUtils.USE_BOTTOM_TOOLBAR_IN_MEDIA_VIEWER, false);\r\n    if (useBottomAppBar) {\r\n        getSupportActionBar().hide();\r\n        bottomAppBar.setVisibility(View.VISIBLE);\r\n        backButton.setOnClickListener(view -> {\r\n            finish();\r\n        });\r\n        downloadButton.setOnClickListener(view -> {\r\n            if (isDownloading) {\r\n                return;\r\n            }\r\n            if (videoDownloadUrl == null) {\r\n                Toast.makeText(this, R.string.fetching_video_info_please_wait, Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            isDownloading = true;\r\n            requestPermissionAndDownload();\r\n        });\r\n        playbackSpeedButton.setOnClickListener(view -> {\r\n            changePlaybackSpeed();\r\n        });\r\n    } else {\r\n        ActionBar actionBar = getSupportActionBar();\r\n        Drawable upArrow = resources.getDrawable(R.drawable.ic_arrow_back_white_24dp);\r\n        actionBar.setHomeAsUpIndicator(upArrow);\r\n        actionBar.setBackgroundDrawable(new ColorDrawable(resources.getColor(R.color.transparentActionBarAndExoPlayerControllerColor)));\r\n    }\r\n    String dataSavingModeString = mSharedPreferences.getString(SharedPreferencesUtils.DATA_SAVING_MODE, SharedPreferencesUtils.DATA_SAVING_MODE_OFF);\r\n    int networkType = Utils.getConnectedNetwork(this);\r\n    if (dataSavingModeString.equals(SharedPreferencesUtils.DATA_SAVING_MODE_ALWAYS)) {\r\n        isDataSavingMode = true;\r\n    } else if (dataSavingModeString.equals(SharedPreferencesUtils.DATA_SAVING_MODE_ONLY_ON_CELLULAR_DATA)) {\r\n        isDataSavingMode = networkType == Utils.NETWORK_TYPE_CELLULAR;\r\n    }\r\n    dataSavingModeDefaultResolution = Integer.parseInt(mSharedPreferences.getString(SharedPreferencesUtils.REDDIT_VIDEO_DEFAULT_RESOLUTION, \"360\"));\r\n    if (!mSharedPreferences.getBoolean(SharedPreferencesUtils.VIDEO_PLAYER_IGNORE_NAV_BAR, false)) {\r\n        LinearLayout controllerLinearLayout = findViewById(R.id.linear_layout_exo_playback_control_view);\r\n        ViewCompat.setOnApplyWindowInsetsListener(controllerLinearLayout, new OnApplyWindowInsetsListener() {\r\n\r\n            @NonNull\r\n            @Override\r\n            public WindowInsetsCompat onApplyWindowInsets(@NonNull View v, @NonNull WindowInsetsCompat insets) {\r\n                Insets navigationBars = insets.getInsets(WindowInsetsCompat.Type.navigationBars());\r\n                ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) controllerLinearLayout.getLayoutParams();\r\n                params.bottomMargin = navigationBars.bottom;\r\n                params.rightMargin = navigationBars.right;\r\n                return WindowInsetsCompat.CONSUMED;\r\n            }\r\n        });\r\n    }\r\n    haulerView.setOnDragDismissedListener(dragDirection -> {\r\n        int slide = dragDirection == DragDirection.UP ? R.anim.slide_out_up : R.anim.slide_out_down;\r\n        finish();\r\n        overridePendingTransition(0, slide);\r\n    });\r\n    Intent intent = getIntent();\r\n    isNSFW = intent.getBooleanExtra(EXTRA_IS_NSFW, false);\r\n    if (savedInstanceState == null) {\r\n        resumePosition = intent.getLongExtra(EXTRA_PROGRESS_SECONDS, -1);\r\n        if (mSharedPreferences.getBoolean(SharedPreferencesUtils.VIDEO_PLAYER_AUTOMATIC_LANDSCAPE_ORIENTATION, false)) {\r\n            originalOrientation = resources.getConfiguration().orientation;\r\n            try {\r\n                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);\r\n                if (android.provider.Settings.System.getInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 0) == 1) {\r\n                    OrientationEventListener orientationEventListener = new OrientationEventListener(this) {\r\n\r\n                        @Override\r\n                        public void onOrientationChanged(int orientation) {\r\n                            int epsilon = 10;\r\n                            int leftLandscape = 90;\r\n                            int rightLandscape = 270;\r\n                            if (epsilonCheck(orientation, leftLandscape, epsilon) || epsilonCheck(orientation, rightLandscape, epsilon)) {\r\n                                try {\r\n                                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);\r\n                                    disable();\r\n                                } catch (Exception ignore) {\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        private boolean epsilonCheck(int a, int b, int epsilon) {\r\n                            return a > b - epsilon && a < b + epsilon;\r\n                        }\r\n                    };\r\n                    orientationEventListener.enable();\r\n                }\r\n            } catch (Exception ignore) {\r\n            }\r\n        }\r\n    }\r\n    Post post = intent.getParcelableExtra(EXTRA_POST);\r\n    if (post != null) {\r\n        titleTextView.setText(post.getTitle());\r\n    }\r\n    trackSelector = new DefaultTrackSelector(this);\r\n    if (videoType == VIDEO_TYPE_NORMAL && isDataSavingMode && dataSavingModeDefaultResolution > 0) {\r\n        trackSelector.setParameters(trackSelector.buildUponParameters().setMaxVideoSize(dataSavingModeDefaultResolution, dataSavingModeDefaultResolution));\r\n    }\r\n    player = new ExoPlayer.Builder(this).setTrackSelector(trackSelector).build();\r\n    if (zoomable) {\r\n        PlayerControlView playerControlView = findViewById(R.id.player_control_view_view_video_activity);\r\n        playerControlView.addVisibilityListener(visibility -> {\r\n            switch(visibility) {\r\n                case View.GONE:\r\n                    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE);\r\n                    break;\r\n                case View.VISIBLE:\r\n                    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\r\n            }\r\n        });\r\n        playerControlView.setPlayer(player);\r\n        ZoomSurfaceView zoomSurfaceView = findViewById(R.id.zoom_surface_view_view_video_activity);\r\n        player.addListener(new Player.Listener() {\r\n\r\n            @Override\r\n            public void onVideoSizeChanged(VideoSize videoSize) {\r\n                zoomSurfaceView.setContentSize(videoSize.width, videoSize.height);\r\n            }\r\n        });\r\n        zoomSurfaceView.addCallback(new ZoomSurfaceView.Callback() {\r\n\r\n            @Override\r\n            public void onZoomSurfaceCreated(@NonNull ZoomSurfaceView zoomSurfaceView) {\r\n                player.setVideoSurface(zoomSurfaceView.getSurface());\r\n            }\r\n\r\n            @Override\r\n            public void onZoomSurfaceDestroyed(@NonNull ZoomSurfaceView zoomSurfaceView) {\r\n            }\r\n        });\r\n        zoomSurfaceView.getEngine().addListener(new ZoomEngine.Listener() {\r\n\r\n            @Override\r\n            public void onUpdate(@NonNull ZoomEngine zoomEngine, @NonNull Matrix matrix) {\r\n                if (zoomEngine.getZoom() < 1.00001) {\r\n                    haulerView.setDragEnabled(true);\r\n                    nestedScrollView.setScrollEnabled(true);\r\n                } else {\r\n                    haulerView.setDragEnabled(false);\r\n                    nestedScrollView.setScrollEnabled(false);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onIdle(@NonNull ZoomEngine zoomEngine) {\r\n            }\r\n        });\r\n        zoomSurfaceView.setOnClickListener(view -> {\r\n            if (playerControlView.isVisible()) {\r\n                playerControlView.hide();\r\n            } else {\r\n                playerControlView.show();\r\n            }\r\n        });\r\n    } else {\r\n        PlayerView videoPlayerView = findViewById(R.id.player_view_view_video_activity);\r\n        videoPlayerView.setPlayer(player);\r\n        videoPlayerView.setControllerVisibilityListener(visibility -> {\r\n            switch(visibility) {\r\n                case View.GONE:\r\n                    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE);\r\n                    break;\r\n                case View.VISIBLE:\r\n                    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\r\n            }\r\n        });\r\n    }\r\n    if (savedInstanceState == null) {\r\n        mVideoUri = intent.getData();\r\n        videoType = getIntent().getIntExtra(EXTRA_VIDEO_TYPE, VIDEO_TYPE_NORMAL);\r\n    } else {\r\n        String videoUrl = savedInstanceState.getString(VIDEO_URI_STATE);\r\n        if (videoUrl != null) {\r\n            mVideoUri = Uri.parse(videoUrl);\r\n        }\r\n        videoType = savedInstanceState.getInt(VIDEO_TYPE_STATE);\r\n        subredditName = savedInstanceState.getString(SUBREDDIT_NAME_STATE);\r\n        id = savedInstanceState.getString(ID_STATE);\r\n        playbackSpeed = savedInstanceState.getInt(PLAYBACK_SPEED_STATE);\r\n    }\r\n    setPlaybackSpeed(Integer.parseInt(mSharedPreferences.getString(SharedPreferencesUtils.DEFAULT_PLAYBACK_SPEED, \"100\")));\r\n    if (videoType == VIDEO_TYPE_STREAMABLE) {\r\n        if (savedInstanceState != null) {\r\n            videoDownloadUrl = savedInstanceState.getString(VIDEO_DOWNLOAD_URL_STATE);\r\n        } else {\r\n            videoDownloadUrl = intent.getStringExtra(EXTRA_VIDEO_DOWNLOAD_URL);\r\n        }\r\n        String shortCode = intent.getStringExtra(EXTRA_STREAMABLE_SHORT_CODE);\r\n        videoFileName = \"Streamable-\" + shortCode + \".mp4\";\r\n        if (mVideoUri == null) {\r\n            loadStreamableVideo(shortCode, savedInstanceState);\r\n        } else {\r\n            dataSourceFactory = new CacheDataSource.Factory().setCache(mSimpleCache).setUpstreamDataSourceFactory(new DefaultHttpDataSource.Factory().setAllowCrossProtocolRedirects(true).setUserAgent(APIUtils.USER_AGENT));\r\n            player.prepare();\r\n            player.setMediaSource(new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(mVideoUri)));\r\n            preparePlayer(savedInstanceState);\r\n        }\r\n    } else if (videoType == VIDEO_TYPE_V_REDD_IT) {\r\n        loadVReddItVideo(savedInstanceState);\r\n    } else if (videoType == VIDEO_TYPE_REDGIFS) {\r\n        if (savedInstanceState != null) {\r\n            videoDownloadUrl = savedInstanceState.getString(VIDEO_DOWNLOAD_URL_STATE);\r\n        } else {\r\n            videoDownloadUrl = intent.getStringExtra(EXTRA_VIDEO_DOWNLOAD_URL);\r\n        }\r\n        String redgifsId = intent.getStringExtra(EXTRA_REDGIFS_ID);\r\n        if (redgifsId != null && redgifsId.contains(\"-\")) {\r\n            redgifsId = redgifsId.substring(0, redgifsId.indexOf('-'));\r\n        }\r\n        videoFileName = \"Redgifs-\" + redgifsId + \".mp4\";\r\n        if (mVideoUri == null) {\r\n            loadRedgifsVideo(redgifsId, savedInstanceState);\r\n        } else {\r\n            dataSourceFactory = new CacheDataSource.Factory().setCache(mSimpleCache).setUpstreamDataSourceFactory(new DefaultHttpDataSource.Factory().setAllowCrossProtocolRedirects(true).setUserAgent(APIUtils.USER_AGENT));\r\n            player.prepare();\r\n            player.setMediaSource(new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(mVideoUri)));\r\n            preparePlayer(savedInstanceState);\r\n        }\r\n    } else if (videoType == VIDEO_TYPE_DIRECT || videoType == VIDEO_TYPE_IMGUR) {\r\n        videoDownloadUrl = mVideoUri.toString();\r\n        if (videoType == VIDEO_TYPE_DIRECT) {\r\n            videoFileName = FilenameUtils.getName(videoDownloadUrl);\r\n        } else {\r\n            videoFileName = \"imgur-\" + FilenameUtils.getName(videoDownloadUrl);\r\n        }\r\n        // Produces DataSource instances through which media data is loaded.\r\n        dataSourceFactory = new CacheDataSource.Factory().setCache(mSimpleCache).setUpstreamDataSourceFactory(new DefaultHttpDataSource.Factory().setAllowCrossProtocolRedirects(true).setUserAgent(APIUtils.USER_AGENT));\r\n        // Prepare the player with the source.\r\n        player.prepare();\r\n        player.setMediaSource(new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(mVideoUri)));\r\n        preparePlayer(savedInstanceState);\r\n    } else {\r\n        videoDownloadUrl = intent.getStringExtra(EXTRA_VIDEO_DOWNLOAD_URL);\r\n        subredditName = intent.getStringExtra(EXTRA_SUBREDDIT);\r\n        id = intent.getStringExtra(EXTRA_ID);\r\n        videoFileName = subredditName + \"-\" + id + \".mp4\";\r\n        // Produces DataSource instances through which media data is loaded.\r\n        dataSourceFactory = new CacheDataSource.Factory().setCache(mSimpleCache).setUpstreamDataSourceFactory(new DefaultHttpDataSource.Factory().setAllowCrossProtocolRedirects(true).setUserAgent(APIUtils.USER_AGENT));\r\n        // Prepare the player with the source.\r\n        player.prepare();\r\n        player.setMediaSource(new HlsMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(mVideoUri)));\r\n        preparePlayer(savedInstanceState);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    ((Infinity) getApplication()).getAppComponent().inject(this);\r\n    boolean systemDefault = Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q;\r\n    int systemThemeType = Integer.parseInt(mSharedPreferences.getString(SharedPreferencesUtils.THEME_KEY, \"2\"));\r\n    switch(systemThemeType) {\r\n        case 0:\r\n            AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_NO);\r\n            getTheme().applyStyle(R.style.Theme_Normal, true);\r\n            break;\r\n        case 1:\r\n            AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_YES);\r\n            if (mSharedPreferences.getBoolean(SharedPreferencesUtils.AMOLED_DARK_KEY, false)) {\r\n                getTheme().applyStyle(R.style.Theme_Normal_AmoledDark, true);\r\n            } else {\r\n                getTheme().applyStyle(R.style.Theme_Normal_NormalDark, true);\r\n            }\r\n            break;\r\n        case 2:\r\n            if (systemDefault) {\r\n                AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_FOLLOW_SYSTEM);\r\n            } else {\r\n                AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_AUTO_BATTERY);\r\n            }\r\n            if ((getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK) == Configuration.UI_MODE_NIGHT_NO) {\r\n                getTheme().applyStyle(R.style.Theme_Normal, true);\r\n            } else {\r\n                if (mSharedPreferences.getBoolean(SharedPreferencesUtils.AMOLED_DARK_KEY, false)) {\r\n                    getTheme().applyStyle(R.style.Theme_Normal_AmoledDark, true);\r\n                } else {\r\n                    getTheme().applyStyle(R.style.Theme_Normal_NormalDark, true);\r\n                }\r\n            }\r\n    }\r\n    getTheme().applyStyle(FontStyle.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.FONT_SIZE_KEY, FontStyle.Normal.name())).getResId(), true);\r\n    getTheme().applyStyle(TitleFontStyle.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.TITLE_FONT_SIZE_KEY, TitleFontStyle.Normal.name())).getResId(), true);\r\n    getTheme().applyStyle(ContentFontStyle.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.CONTENT_FONT_SIZE_KEY, ContentFontStyle.Normal.name())).getResId(), true);\r\n    getTheme().applyStyle(FontFamily.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.FONT_FAMILY_KEY, FontFamily.Default.name())).getResId(), true);\r\n    getTheme().applyStyle(TitleFontFamily.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.TITLE_FONT_FAMILY_KEY, TitleFontFamily.Default.name())).getResId(), true);\r\n    getTheme().applyStyle(ContentFontFamily.valueOf(mSharedPreferences.getString(SharedPreferencesUtils.CONTENT_FONT_FAMILY_KEY, ContentFontFamily.Default.name())).getResId(), true);\r\n    boolean zoomable = mSharedPreferences.getBoolean(SharedPreferencesUtils.PINCH_TO_ZOOM_VIDEO, false);\r\n    if (zoomable) {\r\n        setContentView(R.layout.activity_view_video_zoomable);\r\n    } else {\r\n        setContentView(R.layout.activity_view_video);\r\n    }\r\n    ButterKnife.bind(this);\r\n    setVolumeControlStream(AudioManager.STREAM_MUSIC);\r\n    setTitle(\" \");\r\n    if (typeface != null) {\r\n        titleTextView.setTypeface(typeface);\r\n    }\r\n    Resources resources = getResources();\r\n    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\r\n    useBottomAppBar = mSharedPreferences.getBoolean(SharedPreferencesUtils.USE_BOTTOM_TOOLBAR_IN_MEDIA_VIEWER, false);\r\n    if (useBottomAppBar) {\r\n        getSupportActionBar().hide();\r\n        bottomAppBar.setVisibility(View.VISIBLE);\r\n        backButton.setOnClickListener(view -> {\r\n            finish();\r\n        });\r\n        downloadButton.setOnClickListener(view -> {\r\n            if (isDownloading) {\r\n                return;\r\n            }\r\n            if (videoDownloadUrl == null) {\r\n                Toast.makeText(this, R.string.fetching_video_info_please_wait, Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            isDownloading = true;\r\n            requestPermissionAndDownload();\r\n        });\r\n        playbackSpeedButton.setOnClickListener(view -> {\r\n            changePlaybackSpeed();\r\n        });\r\n    } else {\r\n        ActionBar actionBar = getSupportActionBar();\r\n        Drawable upArrow = resources.getDrawable(R.drawable.ic_arrow_back_white_24dp);\r\n        actionBar.setHomeAsUpIndicator(upArrow);\r\n        actionBar.setBackgroundDrawable(new ColorDrawable(resources.getColor(R.color.transparentActionBarAndExoPlayerControllerColor)));\r\n    }\r\n    String dataSavingModeString = mSharedPreferences.getString(SharedPreferencesUtils.DATA_SAVING_MODE, SharedPreferencesUtils.DATA_SAVING_MODE_OFF);\r\n    int networkType = Utils.getConnectedNetwork(this);\r\n    if (dataSavingModeString.equals(SharedPreferencesUtils.DATA_SAVING_MODE_ALWAYS)) {\r\n        isDataSavingMode = true;\r\n    } else if (dataSavingModeString.equals(SharedPreferencesUtils.DATA_SAVING_MODE_ONLY_ON_CELLULAR_DATA)) {\r\n        isDataSavingMode = networkType == Utils.NETWORK_TYPE_CELLULAR;\r\n    }\r\n    dataSavingModeDefaultResolution = Integer.parseInt(mSharedPreferences.getString(SharedPreferencesUtils.REDDIT_VIDEO_DEFAULT_RESOLUTION, \"360\"));\r\n    if (!mSharedPreferences.getBoolean(SharedPreferencesUtils.VIDEO_PLAYER_IGNORE_NAV_BAR, false)) {\r\n        LinearLayout controllerLinearLayout = findViewById(R.id.linear_layout_exo_playback_control_view);\r\n        ViewCompat.setOnApplyWindowInsetsListener(controllerLinearLayout, new OnApplyWindowInsetsListener() {\r\n\r\n            @NonNull\r\n            @Override\r\n            public WindowInsetsCompat onApplyWindowInsets(@NonNull View v, @NonNull WindowInsetsCompat insets) {\r\n                Insets navigationBars = insets.getInsets(WindowInsetsCompat.Type.navigationBars());\r\n                ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) controllerLinearLayout.getLayoutParams();\r\n                params.bottomMargin = navigationBars.bottom;\r\n                params.rightMargin = navigationBars.right;\r\n                return WindowInsetsCompat.CONSUMED;\r\n            }\r\n        });\r\n    }\r\n    haulerView.setOnDragDismissedListener(dragDirection -> {\r\n        int slide = dragDirection == DragDirection.UP ? R.anim.slide_out_up : R.anim.slide_out_down;\r\n        finish();\r\n        overridePendingTransition(0, slide);\r\n    });\r\n    Intent intent = getIntent();\r\n    isNSFW = intent.getBooleanExtra(EXTRA_IS_NSFW, false);\r\n    if (savedInstanceState == null) {\r\n        resumePosition = intent.getLongExtra(EXTRA_PROGRESS_SECONDS, -1);\r\n        if (mSharedPreferences.getBoolean(SharedPreferencesUtils.VIDEO_PLAYER_AUTOMATIC_LANDSCAPE_ORIENTATION, false)) {\r\n            originalOrientation = resources.getConfiguration().orientation;\r\n            try {\r\n                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);\r\n                if (android.provider.Settings.System.getInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 0) == 1) {\r\n                    OrientationEventListener orientationEventListener = new OrientationEventListener(this) {\r\n\r\n                        @Override\r\n                        public void onOrientationChanged(int orientation) {\r\n                            int epsilon = 10;\r\n                            int leftLandscape = 90;\r\n                            int rightLandscape = 270;\r\n                            if (epsilonCheck(orientation, leftLandscape, epsilon) || epsilonCheck(orientation, rightLandscape, epsilon)) {\r\n                                try {\r\n                                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);\r\n                                    disable();\r\n                                } catch (Exception ignore) {\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        private boolean epsilonCheck(int a, int b, int epsilon) {\r\n                            return a > b - epsilon && a < b + epsilon;\r\n                        }\r\n                    };\r\n                    orientationEventListener.enable();\r\n                }\r\n            } catch (Exception ignore) {\r\n            }\r\n        }\r\n    }\r\n    Post post = intent.getParcelableExtra(EXTRA_POST);\r\n    if (post != null) {\r\n        titleTextView.setText(post.getTitle());\r\n    }\r\n    trackSelector = new DefaultTrackSelector(this);\r\n    if (videoType == VIDEO_TYPE_NORMAL && isDataSavingMode && dataSavingModeDefaultResolution > 0) {\r\n        trackSelector.setParameters(trackSelector.buildUponParameters().setMaxVideoSize(dataSavingModeDefaultResolution, dataSavingModeDefaultResolution));\r\n    }\r\n    player = new ExoPlayer.Builder(this).setTrackSelector(trackSelector).build();\r\n    if (zoomable) {\r\n        PlayerControlView playerControlView = findViewById(R.id.player_control_view_view_video_activity);\r\n        playerControlView.addVisibilityListener(visibility -> {\r\n            switch(visibility) {\r\n                case View.GONE:\r\n                    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE);\r\n                    break;\r\n                case View.VISIBLE:\r\n                    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\r\n            }\r\n        });\r\n        playerControlView.setPlayer(player);\r\n        ZoomSurfaceView zoomSurfaceView = findViewById(R.id.zoom_surface_view_view_video_activity);\r\n        player.addListener(new Player.Listener() {\r\n\r\n            @Override\r\n            public void onVideoSizeChanged(VideoSize videoSize) {\r\n                zoomSurfaceView.setContentSize(videoSize.width, videoSize.height);\r\n            }\r\n        });\r\n        zoomSurfaceView.addCallback(new ZoomSurfaceView.Callback() {\r\n\r\n            @Override\r\n            public void onZoomSurfaceCreated(@NonNull ZoomSurfaceView zoomSurfaceView) {\r\n                player.setVideoSurface(zoomSurfaceView.getSurface());\r\n            }\r\n\r\n            @Override\r\n            public void onZoomSurfaceDestroyed(@NonNull ZoomSurfaceView zoomSurfaceView) {\r\n            }\r\n        });\r\n        zoomSurfaceView.getEngine().addListener(new ZoomEngine.Listener() {\r\n\r\n            @Override\r\n            public void onUpdate(@NonNull ZoomEngine zoomEngine, @NonNull Matrix matrix) {\r\n                if (zoomEngine.getZoom() < 1.00001) {\r\n                    haulerView.setDragEnabled(true);\r\n                    nestedScrollView.setScrollEnabled(true);\r\n                } else {\r\n                    haulerView.setDragEnabled(false);\r\n                    nestedScrollView.setScrollEnabled(false);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onIdle(@NonNull ZoomEngine zoomEngine) {\r\n            }\r\n        });\r\n        zoomSurfaceView.setOnClickListener(view -> {\r\n            if (playerControlView.isVisible()) {\r\n                playerControlView.hide();\r\n            } else {\r\n                playerControlView.show();\r\n            }\r\n        });\r\n    } else {\r\n        PlayerView videoPlayerView = findViewById(R.id.player_view_view_video_activity);\r\n        videoPlayerView.setPlayer(player);\r\n        videoPlayerView.setControllerVisibilityListener(visibility -> {\r\n            switch(visibility) {\r\n                case View.GONE:\r\n                    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE);\r\n                    break;\r\n                case View.VISIBLE:\r\n                    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\r\n            }\r\n        });\r\n    }\r\n    if (savedInstanceState == null) {\r\n        mVideoUri = intent.getData();\r\n        videoType = getIntent().getIntExtra(EXTRA_VIDEO_TYPE, VIDEO_TYPE_NORMAL);\r\n    } else {\r\n        String videoUrl = savedInstanceState.getString(VIDEO_URI_STATE);\r\n        if (videoUrl != null) {\r\n            mVideoUri = Uri.parse(videoUrl);\r\n        }\r\n        videoType = savedInstanceState.getInt(VIDEO_TYPE_STATE);\r\n        subredditName = savedInstanceState.getString(SUBREDDIT_NAME_STATE);\r\n        id = savedInstanceState.getString(ID_STATE);\r\n        playbackSpeed = savedInstanceState.getInt(PLAYBACK_SPEED_STATE);\r\n    }\r\n    setPlaybackSpeed(Integer.parseInt(mSharedPreferences.getString(SharedPreferencesUtils.DEFAULT_PLAYBACK_SPEED, \"100\")));\r\n    if (videoType == VIDEO_TYPE_STREAMABLE) {\r\n        if (savedInstanceState != null) {\r\n            videoDownloadUrl = savedInstanceState.getString(VIDEO_DOWNLOAD_URL_STATE);\r\n        } else {\r\n            videoDownloadUrl = intent.getStringExtra(EXTRA_VIDEO_DOWNLOAD_URL);\r\n        }\r\n        String shortCode = intent.getStringExtra(EXTRA_STREAMABLE_SHORT_CODE);\r\n        videoFileName = \"Streamable-\" + shortCode + \".mp4\";\r\n        if (mVideoUri == null) {\r\n            loadStreamableVideo(shortCode, savedInstanceState);\r\n        } else {\r\n            dataSourceFactory = new CacheDataSource.Factory().setCache(mSimpleCache).setUpstreamDataSourceFactory(new DefaultHttpDataSource.Factory().setAllowCrossProtocolRedirects(true).setUserAgent(APIUtils.USER_AGENT));\r\n            player.prepare();\r\n            player.setMediaSource(new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(mVideoUri)));\r\n            preparePlayer(savedInstanceState);\r\n        }\r\n    } else if (videoType == VIDEO_TYPE_V_REDD_IT) {\r\n        loadVReddItVideo(savedInstanceState);\r\n    } else if (videoType == VIDEO_TYPE_REDGIFS) {\r\n        if (savedInstanceState != null) {\r\n            videoDownloadUrl = savedInstanceState.getString(VIDEO_DOWNLOAD_URL_STATE);\r\n        } else {\r\n            videoDownloadUrl = intent.getStringExtra(EXTRA_VIDEO_DOWNLOAD_URL);\r\n        }\r\n        String redgifsId = intent.getStringExtra(EXTRA_REDGIFS_ID);\r\n        if (redgifsId != null && redgifsId.contains(\"-\")) {\r\n            redgifsId = redgifsId.substring(0, redgifsId.indexOf('-'));\r\n        }\r\n        videoFileName = \"Redgifs-\" + redgifsId + \".mp4\";\r\n        if (mVideoUri == null) {\r\n            loadRedgifsVideo(redgifsId, savedInstanceState);\r\n        } else {\r\n            dataSourceFactory = new CacheDataSource.Factory().setCache(mSimpleCache).setUpstreamDataSourceFactory(new DefaultHttpDataSource.Factory().setAllowCrossProtocolRedirects(true).setUserAgent(APIUtils.USER_AGENT));\r\n            player.prepare();\r\n            player.setMediaSource(new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(mVideoUri)));\r\n            preparePlayer(savedInstanceState);\r\n        }\r\n    } else if (videoType == VIDEO_TYPE_DIRECT || videoType == VIDEO_TYPE_IMGUR) {\r\n        videoDownloadUrl = mVideoUri.toString();\r\n        if (videoType == VIDEO_TYPE_DIRECT) {\r\n            videoFileName = FilenameUtils.getName(videoDownloadUrl);\r\n        } else {\r\n            videoFileName = \"imgur-\" + FilenameUtils.getName(videoDownloadUrl);\r\n        }\r\n        // Produces DataSource instances through which media data is loaded.\r\n        dataSourceFactory = new CacheDataSource.Factory().setCache(mSimpleCache).setUpstreamDataSourceFactory(new DefaultHttpDataSource.Factory().setAllowCrossProtocolRedirects(true).setUserAgent(APIUtils.USER_AGENT));\r\n        // Prepare the player with the source.\r\n        player.prepare();\r\n        player.setMediaSource(new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(mVideoUri)));\r\n        preparePlayer(savedInstanceState);\r\n    } else {\r\n        videoDownloadUrl = intent.getStringExtra(EXTRA_VIDEO_DOWNLOAD_URL);\r\n        subredditName = intent.getStringExtra(EXTRA_SUBREDDIT);\r\n        id = intent.getStringExtra(EXTRA_ID);\r\n        videoFileName = subredditName + \"-\" + id + \".mp4\";\r\n        // Produces DataSource instances through which media data is loaded.\r\n        dataSourceFactory = new CacheDataSource.Factory().setCache(mSimpleCache).setUpstreamDataSourceFactory(new DefaultHttpDataSource.Factory().setAllowCrossProtocolRedirects(true).setUserAgent(APIUtils.USER_AGENT));\r\n        // Prepare the player with the source.\r\n        player.prepare();\r\n        player.setMediaSource(new HlsMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(mVideoUri)));\r\n        preparePlayer(savedInstanceState);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport com.google.android.exoplayer2.upstream.cache.Cache;\r\nimport com.google.android.exoplayer2.upstream.cache.Cache\nimport androidx.annotation.Nullable\npublic Builder setCache(@Nullable Cache cache) {\r\n    this.cache = cache;\r\n    return this;\r\n}" ],
  "Trail-Sense/1057" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/972" : [ "@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n    outState.putParcelable(\"category\", category);\r\n    super.onSaveInstanceState(outState);\r\n}\n--------------------------------------------------\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n    if (noteTmp != null) {\r\n        noteTmp.setTitle(getNoteTitle());\r\n        noteTmp.setContent(getNoteContent());\r\n        outState.putParcelable(\"noteTmp\", noteTmp);\r\n        outState.putParcelable(\"note\", note);\r\n        outState.putParcelable(\"noteOriginal\", noteOriginal);\r\n        outState.putParcelable(\"attachmentUri\", attachmentUri);\r\n        outState.putBoolean(\"orientationChanged\", orientationChanged);\r\n    }\r\n    super.onSaveInstanceState(outState);\r\n}\n--------------------------------------------------\n", "import android.os.Bundle;\r\nimport it.feio.android.omninotes.models.Note\nimport android.os.Bundle\nimport android.net.Uri\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n    if (noteTmp != null) {\r\n        noteTmp.setTitle(getNoteTitle());\r\n        noteTmp.setContent(getNoteContent());\r\n        outState.putParcelable(\"noteTmp\", noteTmp);\r\n        outState.putParcelable(\"note\", note);\r\n        outState.putParcelable(\"noteOriginal\", noteOriginal);\r\n        outState.putParcelable(\"attachmentUri\", attachmentUri);\r\n        outState.putBoolean(\"orientationChanged\", orientationChanged);\r\n    }\r\n    super.onSaveInstanceState(outState);\r\n}" ],
  "MaterialFiles/971" : [ "", "import android.os.Bundle\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        requireActivity().title = title\r\n    }\nimport android.os.Bundle" ],
  "VinylMusicPlayer/200" : [ "private void show_topic_popup(final Channel c) {\r\n    if (c != null) {\r\n        Server s = ServersList.getInstance().getServer(c.cid);\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);\r\n        View v = getLayoutInflater().inflate(R.layout.dialog_topic, null);\r\n        String heading = \"Topic for \";\r\n        if (c.getBuffer() != null) {\r\n            heading += c.getBuffer().getDisplayName();\r\n        } else {\r\n            heading += c.name;\r\n        }\r\n        if (s != null) {\r\n            heading += \" (\" + ((s.getName() != null && s.getName().length() > 0) ? s.getName() : s.getHostname()) + \")\";\r\n        }\r\n        ((TextView) v.findViewById(R.id.topic_heading)).setText(heading);\r\n        if (c.topic_text.length() > 0) {\r\n            String author = \"\";\r\n            if (c.topic_author != null && c.topic_author.length() > 0) {\r\n                author = \"— Set by \" + c.topic_author;\r\n                if (c.topic_time > 0) {\r\n                    author += \" on \" + DateFormat.getDateTimeInstance().format(new Date(c.topic_time * 1000));\r\n                }\r\n                v.findViewById(R.id.setBy).setVisibility(View.VISIBLE);\r\n                ((TextView) v.findViewById(R.id.setBy)).setText(author);\r\n            }\r\n            ((TextView) v.findViewById(R.id.topic)).setText(ColorFormatter.html_to_spanned(ColorFormatter.emojify(ColorFormatter.irc_to_html(TextUtils.htmlEncode(c.topic_text))), true, server));\r\n        } else {\r\n            ((TextView) v.findViewById(R.id.topic)).setText(\"No topic set.\");\r\n        }\r\n        if (s != null && s.isSlack()) {\r\n            v.findViewById(R.id.url_heading).setVisibility(View.VISIBLE);\r\n            v.findViewById(R.id.channel_url_card).setVisibility(View.VISIBLE);\r\n            String url = s.getSlackBaseURL() + \"/messages/\" + c.getBuffer().normalizedName() + \"/details\";\r\n            ((TextView) v.findViewById(R.id.channel_url)).setText(Html.fromHtml(\"<a href='\" + TextUtils.htmlEncode(url) + \"'>\" + TextUtils.htmlEncode(url) + \"</a>\"));\r\n        } else {\r\n            if (c.url != null && c.url.length() > 0) {\r\n                v.findViewById(R.id.url_heading).setVisibility(View.VISIBLE);\r\n                v.findViewById(R.id.channel_url_card).setVisibility(View.VISIBLE);\r\n                ((TextView) v.findViewById(R.id.channel_url)).setText(Html.fromHtml(\"<a href='\" + TextUtils.htmlEncode(c.url) + \"'>\" + TextUtils.htmlEncode(c.url) + \"</a>\"));\r\n            }\r\n        }\r\n        if (c.mode != null && c.mode.length() > 0) {\r\n            v.findViewById(R.id.mode).setVisibility(View.VISIBLE);\r\n            ((TextView) v.findViewById(R.id.mode)).setText(\"Mode: +\" + c.mode);\r\n            for (Channel.Mode m : c.modes) {\r\n                switch(m.mode) {\r\n                    case \"i\":\r\n                        v.findViewById(R.id.mode_i).setVisibility(View.VISIBLE);\r\n                        break;\r\n                    case \"k\":\r\n                        v.findViewById(R.id.mode_k).setVisibility(View.VISIBLE);\r\n                        ((TextView) v.findViewById(R.id.key)).setText(m.param);\r\n                        break;\r\n                    case \"m\":\r\n                        v.findViewById(R.id.mode_m).setVisibility(View.VISIBLE);\r\n                        break;\r\n                    case \"n\":\r\n                        v.findViewById(R.id.mode_n).setVisibility(View.VISIBLE);\r\n                        break;\r\n                    case \"p\":\r\n                        v.findViewById(R.id.mode_p).setVisibility(View.VISIBLE);\r\n                        break;\r\n                    case \"s\":\r\n                        v.findViewById(R.id.mode_s).setVisibility(View.VISIBLE);\r\n                        break;\r\n                    case \"t\":\r\n                        v.findViewById(R.id.mode_t).setVisibility(View.VISIBLE);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        builder.setView(v);\r\n        builder.setPositiveButton(\"Close\", new DialogInterface.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        boolean canEditTopic = false;\r\n        if (c.hasMode(\"t\")) {\r\n            if (s != null) {\r\n                User self_user = UsersList.getInstance().getUser(c.bid, s.getNick());\r\n                canEditTopic = (self_user != null && (self_user.mode.contains(s.MODE_OPER) || self_user.mode.contains(s.MODE_OWNER) || self_user.mode.contains(s.MODE_ADMIN) || self_user.mode.contains(server.MODE_OP) || self_user.mode.contains(server.MODE_HALFOP)));\r\n            }\r\n        } else {\r\n            canEditTopic = c.bid > 0;\r\n        }\r\n        if (canEditTopic) {\r\n            builder.setNeutralButton(\"Edit Topic\", new DialogInterface.OnClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    dialog.dismiss();\r\n                    editTopic(c);\r\n                }\r\n            });\r\n        }\r\n        final AlertDialog dialog = builder.create();\r\n        dialog.setOwnerActivity(MainActivity.this);\r\n        dialog.show();\r\n        ((TextView) v.findViewById(R.id.topic)).setMovementMethod(new IRCCloudLinkMovementMethod() {\r\n\r\n            @Override\r\n            public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {\r\n                if (super.onTouchEvent(widget, buffer, event) && event.getAction() == MotionEvent.ACTION_UP) {\r\n                    dialog.dismiss();\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        ((TextView) v.findViewById(R.id.channel_url)).setMovementMethod(new IRCCloudLinkMovementMethod() {\r\n\r\n            @Override\r\n            public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {\r\n                if (super.onTouchEvent(widget, buffer, event) && event.getAction() == MotionEvent.ACTION_UP) {\r\n                    dialog.dismiss();\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n}\n--------------------------------------------------\nprivate void update_subtitle() {\r\n    if (server == null || buffer == null) {\r\n        title.setText(bufferToOpen);\r\n        subtitle.setVisibility(View.GONE);\r\n    } else {\r\n        if (buffer.isConsole()) {\r\n            if (server.getName().length() > 0) {\r\n                title.setText(server.getName());\r\n                if (progressBar.getVisibility() == View.GONE) {\r\n                    actionBar.setTitle(server.getName());\r\n                    actionBar.setSubtitle(null);\r\n                }\r\n            } else {\r\n                title.setText(server.getHostname());\r\n                if (progressBar.getVisibility() == View.GONE) {\r\n                    actionBar.setTitle(server.getHostname());\r\n                    actionBar.setSubtitle(null);\r\n                }\r\n            }\r\n        } else {\r\n            title.setText(buffer.getDisplayName());\r\n            if (progressBar.getVisibility() == View.GONE) {\r\n                actionBar.setTitle(buffer.getDisplayName());\r\n                actionBar.setSubtitle(null);\r\n            }\r\n        }\r\n        if (msgid != null && msgid.length() > 0) {\r\n            actionBar.setTitle(\"Thread\");\r\n            title.setText(\"Thread\");\r\n            subtitle.setVisibility(View.VISIBLE);\r\n            subtitle.setText(buffer.getDisplayName());\r\n            actionBar.setSubtitle(buffer.getDisplayName());\r\n            key.setVisibility(View.GONE);\r\n        } else if (buffer.getArchived() > 0 && !buffer.isConsole()) {\r\n            subtitle.setVisibility(View.VISIBLE);\r\n            subtitle.setText(\"(archived)\");\r\n            if (buffer.isConversation()) {\r\n                title.setContentDescription(\"Conversation with \" + title.getText());\r\n            } else if (buffer.isChannel()) {\r\n                title.setContentDescription(\"Channel \" + buffer.normalizedName());\r\n            }\r\n        } else {\r\n            if (buffer.isConversation() && !buffer.isMPDM()) {\r\n                title.setContentDescription(\"Conversation with \" + title.getText());\r\n                if (buffer.getAway_msg() != null && buffer.getAway_msg().length() > 0) {\r\n                    subtitle.setVisibility(View.VISIBLE);\r\n                    if (buffer.getAway_msg() != null && buffer.getAway_msg().length() > 0) {\r\n                        subtitle.setText(ColorFormatter.strip(\"Away: \" + buffer.getAway_msg()));\r\n                    } else {\r\n                        subtitle.setText(\"Away\");\r\n                    }\r\n                } else {\r\n                    User u = UsersList.getInstance().findUserOnConnection(buffer.getCid(), buffer.getName());\r\n                    if (u != null && u.away > 0) {\r\n                        subtitle.setVisibility(View.VISIBLE);\r\n                        if (u.away_msg != null && u.away_msg.length() > 0) {\r\n                            subtitle.setText(ColorFormatter.strip(\"Away: \" + u.away_msg));\r\n                        } else {\r\n                            subtitle.setText(\"Away\");\r\n                        }\r\n                    } else {\r\n                        subtitle.setVisibility(View.GONE);\r\n                    }\r\n                }\r\n                key.setVisibility(View.GONE);\r\n            } else if (buffer.isChannel() || buffer.isMPDM()) {\r\n                if (buffer.isMPDM())\r\n                    title.setContentDescription(\"Conversation with \" + title.getText());\r\n                else\r\n                    title.setContentDescription(\"Channel \" + buffer.normalizedName() + \". Double-tap to view or edit the topic.\");\r\n                Channel c = ChannelsList.getInstance().getChannelForBuffer(buffer.getBid());\r\n                if (c != null && c.topic_text.length() > 0) {\r\n                    subtitle.setVisibility(View.VISIBLE);\r\n                    subtitle.setText(ColorFormatter.strip(c.topic_text));\r\n                    subtitle.setContentDescription(\".\");\r\n                } else {\r\n                    subtitle.setVisibility(View.GONE);\r\n                }\r\n                if (c != null && (c.hasMode(\"k\") || (server != null && server.isSlack() && !buffer.isMPDM() && c.hasMode(\"s\")))) {\r\n                    key.setText(FontAwesome.LOCK);\r\n                    key.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    key.setVisibility(View.GONE);\r\n                }\r\n            } else if (buffer.isConsole()) {\r\n                subtitle.setVisibility(View.VISIBLE);\r\n                subtitle.setText(server.getHostname() + \":\" + server.getPort());\r\n                title.setContentDescription(\"Network \" + server.getName());\r\n                subtitle.setContentDescription(\".\");\r\n                key.setText(server.getIcon());\r\n                key.setVisibility(View.VISIBLE);\r\n            }\r\n            if (progressBar.getVisibility() == View.GONE && NetworkConnection.getInstance().getState() != NetworkConnection.STATE_CONNECTED) {\r\n                subtitle.setVisibility(View.VISIBLE);\r\n                subtitle.setText(\"(Offline)\");\r\n                actionBar.setSubtitle(\"(Offline)\");\r\n            }\r\n        }\r\n    }\r\n    supportInvalidateOptionsMenu();\r\n}\n--------------------------------------------------\n", "import com.irccloud.android.data.model.User;\r\nimport com.irccloud.android.data.model.User\npublic synchronized String getDisplayName(int cid, String nick) {\r\n    for (Integer bid : users.keySet()) {\r\n        if (users.get(bid) != null) {\r\n            for (User u : users.get(bid).values()) {\r\n                if (u.cid != cid)\r\n                    break;\r\n                if (u.nick.equalsIgnoreCase(nick))\r\n                    return u.getDisplayName();\r\n            }\r\n        }\r\n    }\r\n    return nick;\r\n}" ],
  "VinylMusicPlayer/683" : [ "@Override\r\npublic boolean onNavigateUp() {\r\n    onBackPressed();\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            break;\r\n        case R.id.menu_gallery_share:\r\n            shareMedia();\r\n            break;\r\n        case R.id.menu_gallery:\r\n            viewMedia();\r\n            break;\r\n        default:\r\n            LogDelegate.e(\"Wrong element choosen: \" + item.getItemId());\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment\n@Override\r\npublic void onBackPressed() {\r\n    if (!backStack.isEmpty()) {\r\n        replaceFragment(backStack.remove(backStack.size() - 1));\r\n    } else {\r\n        super.onBackPressed();\r\n    }\r\n}" ],
  "VinylMusicPlayer/679" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}" ],
  "Feeder/371" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/372" : [ "addListItem()", "import com.omgodse.notally.room.ListItem\nimport com.omgodse.notally.recyclerview.viewholder.MakeListVH\nprivate fun addListItem() {\r\n        val position = model.items.size\r\n        val listItem = ListItem(String(), false)\r\n        model.items.add(listItem)\r\n        adapter.notifyItemInserted(position)\r\n        binding.RecyclerView.post {\r\n            val viewHolder = binding.RecyclerView.findViewHolderForAdapterPosition(position) as MakeListVH?\r\n            viewHolder?.binding?.EditText?.requestFocus()\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, recyclerview, viewholder, MakeListVH], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, ListItem], wildcard=false, alias=null)" ],
  "Feeder/373" : [ "addListItem()", "import com.omgodse.notally.room.ListItem\nimport com.omgodse.notally.recyclerview.viewholder.MakeListVH\nprivate fun addListItem() {\r\n        val position = model.items.size\r\n        val listItem = ListItem(String(), false)\r\n        model.items.add(listItem)\r\n        adapter.notifyItemInserted(position)\r\n        binding.RecyclerView.post {\r\n            val viewHolder = binding.RecyclerView.findViewHolderForAdapterPosition(position) as MakeListVH?\r\n            viewHolder?.binding?.EditText?.requestFocus()\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, recyclerview, viewholder, MakeListVH], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, ListItem], wildcard=false, alias=null)" ],
  "Feeder/375" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "Feeder/376" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "Feeder/389" : [ "", "import android.content.ComponentName;\r\nimport android.os.IBinder;\r\nimport org.runnerup.tracker.Tracker;\r\nimport org.runnerup.tracker.Tracker\nimport android.os.IBinder\nimport android.content.ComponentName\npublic void onServiceConnected(ComponentName className, IBinder service) {\r\n    // This is called when the connection with the service has been\r\n    // established, giving us the service object we can use to\r\n    // interact with the service. Because we have bound to a explicit\r\n    // service that we know is running in our own process, we can\r\n    // cast its IBinder to a concrete class and directly access it.\r\n    mTracker = ((Tracker.LocalBinder) service).getService();\r\n    // Tell the user about this for our demo.\r\n    StartActivity.this.onGpsTrackerBound();\r\n}" ],
  "MaterialFiles/99" : [ "{\n        migrateUriPreference(R.string.p_backup_dir)\r\n        migrateUriPreference(R.string.p_attachment_dir)\n--------------------------------------------------\n        migrateUriPreference(R.string.p_backup_dir)\n        migrateUriPreference(R.string.p_attachment_dir)\r\n        for (userActivity in userActivityDao.getComments()) {", "import java.io.File\nimport org.tasks.Strings.isNullOrEmpty\nimport org.tasks.R\nimport android.net.Uri\nprivate fun migrateUriPreference(pref: Int) {\r\n        val path = preferences.getStringValue(pref)\r\n        if (isNullOrEmpty(path)) {\r\n            return\r\n        }\r\n        val file = File(path)\r\n        try {\r\n            if (file.canWrite()) {\r\n                preferences.setUri(pref, file.toURI())\r\n            } else {\r\n                preferences.remove(pref)\r\n            }\r\n        } catch (ignored: SecurityException) {\r\n            preferences.remove(pref)\r\n        }\r\n    }\nimport android.net.Uri\nimport org.tasks.R\nimport org.tasks.Strings.isNullOrEmpty\nimport java.io.File" ],
  "Trail-Sense/1062" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/502" : [ "checkUri(uri) {\n    addNoteFromUri(uri)\n}", "import com.simplemobiletools.notes.pro.R\nimport android.widget.Toast\nimport android.net.Uri\nprivate fun checkUri(uri: Uri, onChecksPassed: () -> Unit) {\r\n        val inputStream = try {\r\n            contentResolver.openInputStream(uri) ?: return\r\n        } catch (e: Exception) {\r\n            showErrorToast(e)\r\n            return\r\n        }\r\n\r\n        if (inputStream.available() > 1000 * 1000) {\r\n            toast(R.string.file_too_large)\r\n        } else {\r\n            onChecksPassed()\r\n        }\r\n    }\nImport(names=[android, net, Uri], wildcard=false, alias=null)" ],
  "MaterialFiles/97" : [ "                                intent.data = uri\n                                startActivity(intent)\n                            }.setActionTextColor(accentColor()).show()\n--------------------------------------------------\n        if (!hasPermissions()) {\n            startActivity(Intent(this, PermissionActivity::class.java))\n            finish()\n--------------------------------------------------\n                }\n                start()\n            }\n--------------------------------------------------\nprogressViewUpdateHelper.start()\n--------------------------------------------------\nanimate().translationY(0f).alpha(1f).setDuration(1500).start()\n--------------------------------------------------\nstart()\n--------------------------------------------------\ntimerUpdater.start()\n--------------------------------------------------\nupdateHelper.start()\n--------------------------------------------------\nanimator.start()\n--------------------------------------------------\nprogressViewUpdateHelper?.start()\n--------------------------------------------------\nvalueAnimator?.setDuration(ViewUtil.RETRO_MUSIC_ANIM_TIME.toLong())?.start()\n--------------------------------------------------\ndrawable.start()\n--------------------------------------------------\nObjectAnimator.ofFloat(viewPager, View.ALPHA, if (visible) 0F else 1F).start()\n--------------------------------------------------\nObjectAnimator.ofFloat(viewPager, View.ALPHA, 1F).start()\n--------------------------------------------------\nanimatorSet.start()\n--------------------------------------------------\nstopWatch.start()\n--------------------------------------------------\nrollAnimator.start()", "fun start() {\n        synchronized(this) {\n            startTime = System.currentTimeMillis()\n            isRunning = true\n        }\n    }" ],
  "MaterialFiles/989" : [ "super.onCancel(dialog)", "import com.battlelancer.seriesguide.backend.RemoveCloudAccountDialogFragment.CanceledEvent\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCancel(dialog: DialogInterface) {\r\n        super.onCancel(dialog)\r\n        sendCanceledEvent()\r\n    }\nImport(names=[android, app, Dialog], wildcard=false, alias=null)\nImport(names=[android, content, DialogInterface], wildcard=false, alias=null)" ],
  "MaterialFiles/505" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/504" : [ "delegate.close()\n--------------------------------------------------\nclose()\n--------------------------------------------------\nsuper.close()\n--------------------------------------------------\nlockChannel?.close()", "override fun close() {\r\n        if (lazyDelegate.isInitialized()) {\r\n            delegate.close()\r\n        }\r\n    }" ],
  "MaterialFiles/96" : [ "kit.start()\n--------------------------------------------------\n{\r\n        // started via EthereumKitManager\r\n    }\n--------------------------------------------------\nstart()\n--------------------------------------------------\nit.start()\n--------------------------------------------------\nadapter.start()\n--------------------------------------------------\nLockScreenActivity.start(activity)\n--------------------------------------------------\nevmKit.start()\n--------------------------------------------------\ntorOperator.start()\n--------------------------------------------------\ntronKitWrapper?.tronKit?.start()\n--------------------------------------------------\nThread(Runnable {\n    torControl.onBootstrapped(torControl.torInfo)\n}).start()\n--------------------------------------------------\nservice.start()\n--------------------------------------------------\nIntroActivity.start(this)\n--------------------------------------------------\nMainModule.start(this, intent.data)\n--------------------------------------------------\ntotalBalance.start(viewModelScope)\n--------------------------------------------------\nnonceService.start()\n--------------------------------------------------\nsettingsService.start()\n--------------------------------------------------\nrepository.start()\n--------------------------------------------------\ntorManager.start()", "import android.content.Intent\nimport android.content.Context\nfun start(context: Context) {\r\n            val intent = Intent(context, IntroActivity::class.java)\r\n            context.startActivity(intent)\r\n        }\nimport android.content.Context\nimport android.content.Intent" ],
  "Trail-Sense/1060" : [ "checksum.update(buffer.array())\n--------------------------------------------------\nplaylistAdapter.update(it)\n--------------------------------------------------\nstate.update(pos, VLCOptions.getEqualizerSavedState(activity))\n--------------------------------------------------\nstate.update(presetCount + customCount, false)\n--------------------------------------------------\nstate.update(pos, false)\n--------------------------------------------------\nstate.update(allSets.indexOf(newName), true)\n--------------------------------------------------\nstate.update(0, true)\n--------------------------------------------------\nstate.update(revertPos, true)\n--------------------------------------------------\nstate.update(pos, true)\n--------------------------------------------------\nif (!isEmpty()) update(ArrayList(0))\n--------------------------------------------------\nadapter.update(mediaLibraryItems!!)\n--------------------------------------------------\nstorageBrowserAdapter.update(it)\n--------------------------------------------------\nfavoritesAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(filtered)\n--------------------------------------------------\nadapter.update(it)\n--------------------------------------------------\nadapter.update(renderers)\n--------------------------------------------------\nupdate(dataset, finalList)\n--------------------------------------------------\nadapter.update(bookmarkList)\n--------------------------------------------------\nadapter.update(bookmarks)\n--------------------------------------------------\n(recyclerview.adapter as OptionsAdapter).update(options)\n--------------------------------------------------\nhistoryAdapter.update(it)\n--------------------------------------------------\nstreamsAdapter.update(it)\n--------------------------------------------------\nmd.update(input.toByteArray())\n--------------------------------------------------\noverlayDelegate.playlistAdapter.update(mediaWrappers)\n--------------------------------------------------\nplaylistModel?.update()\n--------------------------------------------------\nplayer.update()\n--------------------------------------------------\ncallback.update()\n--------------------------------------------------\nwidgetDao.update(widget)\n--------------------------------------------------\nmd.update(certificate)\n--------------------------------------------------\nupdate()", "fun update(oldList: List<D>, newList: List<D>) {\r\n            this.oldList = oldList\r\n            this.newList = newList\r\n        }" ],
  "MaterialFiles/988" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1065" : [ "listener.onConnectivityChanged()", "import kotlinx.coroutines.launch\nprivate fun onConnectivityChanged() {\r\n        coroutineScope.launch(coroutineDispatcher) {\r\n            synchronized(lock) {\r\n                for (accountPushController in pushers.values) {\r\n                    accountPushController.reconnect()\r\n                }\r\n            }\r\n\r\n            updatePushers()\r\n        }\r\n    }\nimport kotlinx.coroutines.launch" ],
  "MaterialFiles/95" : [ "addDevice(action.uuid, action.path, true)\n--------------------------------------------------\nMedialibraryUtils.addDevice(path, it.applicationContext)\n--------------------------------------------------\nmedialibrary.addDevice(\"main-storage\", path, false)\n--------------------------------------------------\nmedialibrary.addDevice(uuid, path, true)\n--------------------------------------------------\nmedialibrary.addDevice(uuid, path, false)\n--------------------------------------------------\nmedialibrary.addDevice(if (isMainStorage) \"main-storage\" else uuid, device, !isMainStorage)\n--------------------------------------------------\nmedialibrary.addDevice(uuid, device, true)", "import org.videolan.vlc.MediaParsingService\nimport org.videolan.resources.util.launchForeground\nimport org.videolan.resources.EXTRA_PATH\nimport org.videolan.resources.ACTION_DISCOVER_DEVICE\nimport org.videolan.resources.ACTION_DISCOVER\nimport android.content.Intent\nimport android.content.Context\nfun addDevice(path: String, context: Context) {\r\n        val intent = Intent(ACTION_DISCOVER_DEVICE, null, context, MediaParsingService::class.java)\r\n        intent.putExtra(EXTRA_PATH, path)\r\n        context.launchForeground(intent)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[org, videolan, vlc, MediaParsingService], wildcard=false, alias=null)" ],
  "MaterialFiles/94" : [ "playlistModel.service?.setSleepTimer(null)\n--------------------------------------------------\nplaylistModel.service?.setSleepTimer(sleepTime)\n--------------------------------------------------\nplayer.service?.setSleepTimer(null)\n--------------------------------------------------\nservice.setSleepTimer(null)\n--------------------------------------------------\nif (isPlaying) stop() else setSleepTimer(null)", "fun setSleepTimer(time: Calendar?) {\r\n        if (time != null && time.timeInMillis < System.currentTimeMillis()) return\r\n        playerSleepTime.value = time\r\n        if (time == null) stopSleepTimerJob() else startSleepTimerJob()\r\n    }" ],
  "MaterialFiles/509" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "Trail-Sense/1063" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1064" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/508" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Trail-Sense/1069" : [ "listener.onConnectivityChanged()", "import kotlinx.coroutines.launch\nprivate fun onConnectivityChanged() {\r\n        coroutineScope.launch(coroutineDispatcher) {\r\n            synchronized(lock) {\r\n                for (accountPushController in pushers.values) {\r\n                    accountPushController.reconnect()\r\n                }\r\n            }\r\n\r\n            updatePushers()\r\n        }\r\n    }\nimport kotlinx.coroutines.launch" ],
  "MaterialFiles/91" : [ "", "import java.io\n @Throws(Exception::class)\n    fun getStringFromFile(title: String, artist: String): String {\n        val file = File(getLrcPath(title, artist))\n        val fin = FileInputStream(file)\n        val ret = convertStreamToString(fin)\n        fin.close()\n        return ret\n    }" ],
  "MaterialFiles/90" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Trail-Sense/1067" : [ "super.onDraw(canvas)", "import androidx.recyclerview.widget.RecyclerView\nimport android.graphics.Canvas\noverride fun onDraw(c: Canvas, parent: RecyclerView, state: RecyclerView.State) {\r\n        if (parent.layoutManager == null) {\r\n            return\r\n        }\r\n        if (orientation == VERTICAL) {\r\n            drawVertical(c, parent)\r\n        } else {\r\n            drawHorizontal(c, parent)\r\n        }\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)" ],
  "MaterialFiles/980" : [ "super.onCancel(dialog)", "import com.battlelancer.seriesguide.backend.RemoveCloudAccountDialogFragment.CanceledEvent\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCancel(dialog: DialogInterface) {\r\n        super.onCancel(dialog)\r\n        sendCanceledEvent()\r\n    }\nImport(names=[android, app, Dialog], wildcard=false, alias=null)\nImport(names=[android, content, DialogInterface], wildcard=false, alias=null)" ],
  "Trail-Sense/1068" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/671" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    EntityLog.log(this, \"Activity create \" + this.getClass().getName() + \" version=\" + BuildConfig.VERSION_NAME + BuildConfig.REVISION + \" process=\" + android.os.Process.myPid());\r\n    Intent intent = getIntent();\r\n    if (intent != null)\r\n        EntityLog.log(this, intent + \" extras=\" + TextUtils.join(\", \", Log.getExtras(intent.getExtras())));\r\n    getSupportFragmentManager().registerFragmentLifecycleCallbacks(lifecycleCallbacks, true);\r\n    this.contacts = hasPermission(Manifest.permission.READ_CONTACTS);\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n    boolean secure = prefs.getBoolean(\"secure\", false);\r\n    if (secure)\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n    if (!this.getClass().equals(ActivityMain.class)) {\r\n        themeId = FragmentDialogTheme.getTheme(this);\r\n        setTheme(themeId);\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            boolean dark = Helper.isDarkTheme(this);\r\n            Window window = getWindow();\r\n            View view = window.getDecorView();\r\n            int flags = view.getSystemUiVisibility();\r\n            if (dark)\r\n                flags &= ~View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;\r\n            view.setSystemUiVisibility(flags);\r\n        }\r\n    }\r\n    String requestKey = getRequestKey();\r\n    if (!BuildConfig.PLAY_STORE_RELEASE)\r\n        EntityLog.log(this, \"Listening key=\" + requestKey);\r\n    getSupportFragmentManager().setFragmentResultListener(requestKey, this, new FragmentResultListener() {\r\n\r\n        @Override\r\n        public void onFragmentResult(@NonNull String requestKey, @NonNull Bundle result) {\r\n            try {\r\n                result.setClassLoader(ApplicationEx.class.getClassLoader());\r\n                int requestCode = result.getInt(\"requestCode\");\r\n                int resultCode = result.getInt(\"resultCode\");\r\n                EntityLog.log(ActivityBase.this, \"Received key=\" + requestKey + \" request=\" + requestCode + \" result=\" + resultCode);\r\n                Intent data = new Intent();\r\n                data.putExtra(\"args\", result);\r\n                onActivityResult(requestCode, resultCode, data);\r\n            } catch (Throwable ex) {\r\n                Log.e(ex);\r\n            }\r\n        }\r\n    });\r\n    prefs.registerOnSharedPreferenceChangeListener(this);\r\n    int colorPrimaryDark = Helper.resolveColor(this, androidx.appcompat.R.attr.colorPrimaryDark);\r\n    try {\r\n        Drawable d = getDrawable(R.drawable.baseline_mail_24);\r\n        Bitmap bm = Bitmap.createBitmap(d.getIntrinsicWidth(), d.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(bm);\r\n        d.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());\r\n        d.setTint(Color.WHITE);\r\n        d.draw(canvas);\r\n        int colorPrimary = colorPrimaryDark;\r\n        if (colorPrimary != 0 && Color.alpha(colorPrimary) != 255) {\r\n            Log.w(\"Task color primary=\" + Integer.toHexString(colorPrimary));\r\n            colorPrimary = ColorUtils.setAlphaComponent(colorPrimary, 255);\r\n        }\r\n        ActivityManager.TaskDescription td = new ActivityManager.TaskDescription(null, bm, colorPrimary);\r\n        setTaskDescription(td);\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n    }\r\n    boolean navbar_colorize = prefs.getBoolean(\"navbar_colorize\", false);\r\n    if (navbar_colorize) {\r\n        Window window = getWindow();\r\n        if (window != null)\r\n            window.setNavigationBarColor(colorPrimaryDark);\r\n    }\r\n    FragmentManager fm = getSupportFragmentManager();\r\n    Fragment bfragment = fm.findFragmentByTag(\"androidx.biometric.BiometricFragment\");\r\n    if (bfragment == null)\r\n        bfragment = fm.findFragmentByTag(\"androidx.biometric.FingerprintDialogFragment\");\r\n    if (bfragment != null) {\r\n        Log.e(\"Orphan fragment tag=\" + bfragment.getTag());\r\n        fm.beginTransaction().remove(bfragment).commitNowAllowingStateLoss();\r\n        /*\r\n                java.lang.RuntimeException: Unable to start activity ComponentInfo{eu.faircode.email/eu.faircode.email.ActivitySetup}: androidx.fragment.app.Fragment$InstantiationException: Unable to instantiate fragment androidx.biometric.FingerprintDialogFragment: could not find Fragment constructor\r\n                  at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2957)\r\n                  at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3032)\r\n                  at android.app.ActivityThread.handleRelaunchActivity(ActivityThread.java:4921)\r\n                  at android.app.ActivityThread.-wrap19(Unknown Source:0)\r\n                  at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1702)\r\n                  at android.os.Handler.dispatchMessage(Handler.java:105)\r\n                  at android.os.Looper.loop(Looper.java:164)\r\n                  at android.app.ActivityThread.main(ActivityThread.java:6944)\r\n                  at java.lang.reflect.Method.invoke(Native Method)\r\n                  at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)\r\n                  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)\r\n                Caused by: androidx.fragment.app.Fragment$InstantiationException: Unable to instantiate fragment androidx.biometric.FingerprintDialogFragment: could not find Fragment constructor\r\n                  at androidx.fragment.app.Fragment.instantiate(SourceFile:8)\r\n                  at androidx.fragment.app.FragmentContainer.instantiate(SourceFile:1)\r\n                  at androidx.fragment.app.FragmentManager$3.instantiate(SourceFile:1)\r\n                  at androidx.fragment.app.FragmentStateManager.<init>(SourceFile:12)\r\n                  at androidx.fragment.app.FragmentManager.restoreSaveState(SourceFile:11)\r\n                  at androidx.fragment.app.FragmentController.restoreSaveState(SourceFile:2)\r\n                  at androidx.fragment.app.FragmentActivity$2.onContextAvailable(SourceFile:5)\r\n                  at androidx.activity.contextaware.ContextAwareHelper.dispatchOnContextAvailable(SourceFile:3)\r\n                  at androidx.activity.ComponentActivity.onCreate(SourceFile:2)\r\n                  at androidx.fragment.app.FragmentActivity.onCreate(SourceFile:1)\r\n                  at eu.faircode.email.ActivityBase.onCreate(SourceFile:37)\r\n                  at eu.faircode.email.ActivitySetup.onCreate(SourceFile:1)\r\n                  at android.app.Activity.performCreate(Activity.java:7183)\r\n                  at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1220)\r\n                  at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2910)\r\n                  ... 10 more\r\n                Caused by: java.lang.NoSuchMethodException: <init> []\r\n                  at java.lang.Class.getConstructor0(Class.java:2320)\r\n                  at java.lang.Class.getConstructor(Class.java:1725)\r\n                  at androidx.fragment.app.Fragment.instantiate(SourceFile:4)\r\n             */\r\n    }\r\n    Fragment ffragment = fm.findFragmentByTag(\"androidx.biometric.FingerprintDialogFragment\");\r\n    if (ffragment != null) {\r\n        Log.e(\"Orphan FingerprintDialogFragment\");\r\n        fm.beginTransaction().remove(ffragment).commitNowAllowingStateLoss();\r\n    }\r\n    checkAuthentication(true);\r\n    super.onCreate(savedInstanceState);\r\n}\n--------------------------------------------------\n@Override\r\npublic void onCheckedChanged(CompoundButton compoundButton, boolean checked) {\r\n    prefs.edit().putBoolean(\"navbar_colorize\", checked).apply();\r\n    setNavigationBarColor(checked ? Helper.resolveColor(getContext(), androidx.appcompat.R.attr.colorPrimaryDark) : Color.BLACK);\r\n}\n--------------------------------------------------\n", "import android.view.Window;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentActivity\nimport android.view.Window\nimport android.graphics.Color\nprivate void setNavigationBarColor(int color) {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity == null)\r\n        return;\r\n    Window window = activity.getWindow();\r\n    if (window == null)\r\n        return;\r\n    window.setNavigationBarColor(color);\r\n}" ],
  "MaterialFiles/985" : [ "super.onCancel(dialog)", "import com.battlelancer.seriesguide.backend.RemoveCloudAccountDialogFragment.CanceledEvent\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCancel(dialog: DialogInterface) {\r\n        super.onCancel(dialog)\r\n        sendCanceledEvent()\r\n    }\nImport(names=[android, app, Dialog], wildcard=false, alias=null)\nImport(names=[android, content, DialogInterface], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/672" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    // Update currenlty selected item\r\n    mToolBarSelectedItemId = itemId;\r\n    if (itemId == R.id.menu_style) {\r\n        showStylePopup(findViewById(R.id.menu_style));\r\n        return true;\r\n    } else if (itemId == R.id.menu_markdown_view) {\r\n        toggleMarkdownView();\r\n        return true;\r\n    } else if (itemId == R.id.menu_toggle_title) {\r\n        showHideTitle(!mTitleBarVisible);\r\n        return true;\r\n    } else if (itemId == R.id.menu_save) {\r\n        handleSave();\r\n        return true;\r\n    } else if (itemId == R.id.menu_revert) {\r\n        handleRevert();\r\n        return true;\r\n    } else if (itemId == R.id.menu_metadata) {\r\n        handleMetadata();\r\n        return true;\r\n    } else if (itemId == R.id.menu_edit_tools) {\r\n        showEditToolFragment();\r\n        return true;\r\n    } else if (itemId == R.id.menu_encrypt_decrypt) {\r\n        handleEncryptDecrypt();\r\n        return true;\r\n    } else if (itemId == R.id.menu_paste_calendar) {\r\n        doPasteCalendar();\r\n        return true;\r\n    } else if (itemId == R.id.menu_full_screen) {\r\n        enterImmersiveMode();\r\n        return true;\r\n    } else if (itemId == R.id.menu_clear_cache) {\r\n        doClearCache();\r\n        return true;\r\n    } else if (itemId == R.id.menu_export) {\r\n        handleExport();\r\n        return true;\r\n    } else if (itemId == R.id.menu_print) {\r\n        if (mMarkdownMode)\r\n            createWebPrintJob(mMarkdownView);\r\n        else\r\n            doExportHTML(true);\r\n        return true;\r\n    } else if (itemId == R.id.menu_share) {\r\n        doShare();\r\n        return true;\r\n    } else if (itemId == android.R.id.home) {\r\n        handleHome();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "VinylMusicPlayer/668" : [ "{\r\n        super.onCreate(savedInstanceState)\r\n        theme.applyTheme(this)\r\n        window.statusBarColor = ContextCompat.getColor(this, android.R.color.transparent)\r\n        val binding = ActivityLocationPickerBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        toolbar = binding.toolbar\r\n        appBarLayout = binding.appBarLayout\r\n        toolbarLayout = binding.collapsingToolbarLayout\r\n        coordinatorLayout = binding.coordinator\r\n        searchView = binding.search.apply {\r\n            setOnClickListener { searchPlace() }\r\n        }\r\n        loadingIndicator = binding.loadingIndicator\r\n        chooseRecentLocation = binding.chooseRecentLocation\r\n        recyclerView = binding.recentLocations\r\n        val configuration = resources.configuration\r\n        if (configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\r\n                && configuration.smallestScreenWidthDp < 480) {\r\n            searchView.visibility = View.GONE\r\n        }\r\n        val currentPlace: Place? = intent.getParcelableExtra(EXTRA_PLACE)\r\n        if (savedInstanceState == null) {\r\n            mapPosition = currentPlace?.mapPosition ?: intent.getParcelableExtra(EXTRA_MAP_POSITION)\r\n        } else {\r\n            mapPosition = savedInstanceState.getParcelable(EXTRA_MAP_POSITION)\r\n            offset = savedInstanceState.getInt(EXTRA_APPBAR_OFFSET)\r\n            viewModel.restoreState(savedInstanceState)\r\n        }\r\n        toolbar.setNavigationIcon(R.drawable.ic_outline_arrow_back_24px)\r\n        toolbar.setNavigationOnClickListener { collapseToolbar() }\r\n        toolbar.inflateMenu(R.menu.menu_location_picker)\r\n        val menu = toolbar.menu\r\n        search = menu.findItem(R.id.menu_search)\r\n        search.setOnActionExpandListener(this)\r\n        toolbar.setOnMenuItemClickListener(this)\r\n        val themeColor = theme.themeColor\r\n        themeColor.applyToNavigationBar(this)\r\n        val dark = preferences.mapTheme == 2\r\n                || preferences.mapTheme == 0 && theme.themeBase.isDarkTheme(this)\r\n        map.init(this, this, dark)\r\n        val params = appBarLayout.layoutParams as CoordinatorLayout.LayoutParams\r\n        val behavior = AppBarLayout.Behavior()\r\n        behavior.setDragCallback(\r\n                object : DragCallback() {\r\n                    override fun canDrag(appBarLayout: AppBarLayout): Boolean {\r\n                        return false\r\n                    }\r\n                })\r\n        params.behavior = behavior\r\n        appBarLayout.addOnOffsetChangedListener { appBarLayout: AppBarLayout, offset: Int ->\r\n            if (offset == 0 && this.offset != 0) {\r\n                closeSearch()\r\n                hideKeyboard()\r\n            }\r\n            this.offset = offset\r\n            toolbar.alpha = abs(offset / appBarLayout.totalScrollRange.toFloat())\r\n        }\r\n        coordinatorLayout.addOnLayoutChangeListener(\r\n                object : View.OnLayoutChangeListener {\r\n                    override fun onLayoutChange(\r\n                            v: View, l: Int, t: Int, r: Int, b: Int, ol: Int, ot: Int, or: Int, ob: Int) {\r\n                        coordinatorLayout.removeOnLayoutChangeListener(this)\r\n                        locationDao\r\n                                .getPlaceUsage()\r\n                                .observe(this@LocationPickerActivity) {\r\n                                    places: List<PlaceUsage> -> updatePlaces(places)\r\n                                }\r\n                    }\r\n                })\r\n        if (offset != 0) {\r\n            appBarLayout.post { expandToolbar(false) }\r\n        }\r\n        findViewById<View>(R.id.google_marker).visibility = View.VISIBLE\r\n        searchAdapter = LocationSearchAdapter(viewModel.getAttributionRes(dark), this)\r\n        recentsAdapter = LocationPickerAdapter(this, inventory, colorProvider, this)\r\n        recentsAdapter!!.setHasStableIds(true)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        recyclerView.adapter = if (search.isActionViewExpanded) searchAdapter else recentsAdapter\r\n\r\n        binding.currentLocation.setOnClickListener { currentLocation() }\r\n        binding.selectThisLocation.setOnClickListener { selectLocation() }\r\n    }", "override fun onDestroy() {\r\n        super.onDestroy()\r\n        map.onDestroy()\r\n    }" ],
  "Feeder/380" : [ "", "import com.mhss.app.mybrain.domain.model.SubTask\nimport com.google.gson.reflect.TypeToken\nimport com.google.gson.Gson\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun fromSubTasksList(value: List<SubTask>): String {\r\n        val gson = Gson()\r\n        val type = TypeToken.getParameterized(List::class.java, SubTask::class.java).type\r\n        return gson.toJson(value, type)\r\n    }\nImport(names=[com, google, gson, Gson], wildcard=false, alias=null)\nImport(names=[com, google, gson, reflect, TypeToken], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, domain, model, SubTask], wildcard=false, alias=null)" ],
  "Feeder/381" : [ "\n                InfoText(text = stringResource(R.string.LocalBackup_ProtextBackupWithPasswordInfo))\r\n                VSpacer(24.dp)\n--------------------------------------------------\n            block.sectionDescription?.let {\n                InfoText(it)\r\n            }\n--------------------------------------------------\nInfoText(text = stringResource(R.string.CoinPage_EmaSettingsDescription))\n--------------------------------------------------\nInfoText(text = stringResource(R.string.CoinPage_MacdSettingsDescription))\n--------------------------------------------------\nInfoText(text = stringResource(R.string.CoinPage_RsiSettingsDescription))\n--------------------------------------------------\nInfoText(text = stringResource(R.string.BitcoinHodling_Description))", "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Text\nimport androidx.compose.foundation.layout.padding\n\r\n@Composable\r\nfun InfoText(\r\n    text: String,\r\n    paddingBottom: Dp = 12.dp,\r\n) {\r\n    subhead2_grey(\r\n        modifier = Modifier.padding(start = 32.dp, top = 12.dp, end = 32.dp, bottom = paddingBottom),\r\n        text = text\r\n    )\r\n}\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp" ],
  "Feeder/382" : [ "", "import com.mhss.app.mybrain.domain.model.SubTask\nimport com.google.gson.reflect.TypeToken\nimport com.google.gson.Gson\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun fromSubTasksList(value: List<SubTask>): String {\r\n        val gson = Gson()\r\n        val type = TypeToken.getParameterized(List::class.java, SubTask::class.java).type\r\n        return gson.toJson(value, type)\r\n    }\nImport(names=[com, google, gson, Gson], wildcard=false, alias=null)\nImport(names=[com, google, gson, reflect, TypeToken], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, domain, model, SubTask], wildcard=false, alias=null)" ],
  "MaterialFiles/89" : [ "location = getLocalLyricOriginalFile(song.data)\n--------------------------------------------------\ngetLocalLyricOriginalFile(song.data)", "private fun getLocalLyricOriginalFile(path: String): File? {\n        val file = File(getLrcOriginalPath(path))\n        return if (file.exists()) {\n            file\n        } else {\n            null\n        }\n    }" ],
  "Feeder/388" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1072" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "Trail-Sense/1070" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/999" : [ "super.onResume()", "import org.videolan.vlc.R\nimport android.view\noverride fun onResume() {\r\n        if (viewModel.isApiLoading.value == false) viewModel.onRefresh()\r\n        super.onResume()\r\n    }\nImport(names=[android, view], wildcard=true, alias=null)" ],
  "Trail-Sense/1071" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1076" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1077" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "MaterialFiles/992" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1078" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1079" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/660" : [ "@Override\r\npublic void onBackPressed() {\r\n    super.onBackPressed();\r\n    close();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onBackPressed() {\r\n    super.onBackPressed();\r\n    NotesApplication.updateLastInteraction();\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onBackPressed() {\r\n    super.onBackPressed();\r\n    close();\r\n}" ],
  "MaterialFiles/993" : [ "super.onCancel(dialog)", "import com.battlelancer.seriesguide.backend.RemoveCloudAccountDialogFragment.CanceledEvent\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCancel(dialog: DialogInterface) {\r\n        super.onCancel(dialog)\r\n        sendCanceledEvent()\r\n    }\nImport(names=[android, app, Dialog], wildcard=false, alias=null)\nImport(names=[android, content, DialogInterface], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/661" : [ "                override fun handleOnBackPressed() {\n                    if (!handleBackPress()) {\n                        remove()", "import com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED\nprivate fun handleBackPress(): Boolean {\n        if (panelState == STATE_EXPANDED) {\n            collapsePanel()\n            return true\n        }\n        return false\n    }\nimport com.google.android.material.bottomsheet.BottomSheetBehavior\nimport com.google.android.material.bottomsheet.BottomSheetBehavior.STATE_EXPANDED" ],
  "Feeder/390" : [ "@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    try {\r\n        String packageName = CustomTabsHelper.getPackageNameToUse(this);\r\n        if (packageName != null && packageName.length() > 0)\r\n            CustomTabsClient.bindCustomTabsService(this, packageName, mCustomTabsConnection);\r\n    } catch (Exception e) {\r\n    }\r\n}\n--------------------------------------------------\n", "import android.app.Activity\n@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    if (imgurTask != null)\r\n        imgurTask.setActivity(null);\r\n    if (fileUploadTask != null)\r\n        fileUploadTask.setActivity(null);\r\n    try {\r\n        if (excludeBIDTask != null)\r\n            excludeBIDTask.cancel(true);\r\n    } catch (Exception e) {\r\n    }\r\n    ExcludeBIDTask t = new ExcludeBIDTask();\r\n    t.execute(-1);\r\n    try {\r\n        unbindService(mCustomTabsConnection);\r\n    } catch (Exception e) {\r\n    }\r\n}" ],
  "MaterialFiles/2" : [ "@Override\r\nprotected void applyCustomTheme() {\r\n    applyAppBarLayoutAndCollapsingToolbarLayoutAndToolbarTheme(appBarLayout, collapsingToolbarLayout, toolbar);\r\n    coordinatorLayout.setBackgroundColor(mCustomThemeWrapper.getBackgroundColor());\r\n    changeColorTextView(content, mCustomThemeWrapper.getPrimaryTextColor());\r\n    if (typeface != null) {\r\n        Utils.setFontToAllTextViews(coordinatorLayout, typeface);\r\n    }\r\n}\n--------------------------------------------------\nprivate void changeColorTextView(ViewGroup viewGroup, int color) {\r\n    final int childCount = viewGroup.getChildCount();\r\n    for (int i = 0; i < childCount; i++) {\r\n        View child = viewGroup.getChildAt(i);\r\n        if (child instanceof ViewGroup) {\r\n            changeColorTextView((ViewGroup) child, color);\r\n        } else if (child instanceof TextView) {\r\n            ((TextView) child).setTextColor(color);\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nprivate void changeColorTextView(ViewGroup viewGroup, int color) {\r\n    final int childCount = viewGroup.getChildCount();\r\n    for (int i = 0; i < childCount; i++) {\r\n        View child = viewGroup.getChildAt(i);\r\n        if (child instanceof ViewGroup) {\r\n            changeColorTextView((ViewGroup) child, color);\r\n        } else if (child instanceof TextView) {\r\n            ((TextView) child).setTextColor(color);\r\n        }\r\n    }\r\n}" ],
  "Feeder/392" : [ "private void onGpsTrackerBound() {\r\n    // check and request permissions at startup\r\n    boolean missingEssentialPermission = checkPermissions(false);\r\n    if (!missingEssentialPermission && getAutoStartGps()) {\r\n        startGps();\r\n    } else {\r\n        switch(mTracker.getState()) {\r\n            case INIT:\r\n            case CLEANUP:\r\n                mTracker.setup();\r\n                break;\r\n            case INITIALIZING:\r\n            case INITIALIZED:\r\n                break;\r\n            case CONNECTING:\r\n            case CONNECTED:\r\n            case STARTED:\r\n            case PAUSED:\r\n                if (BuildConfig.DEBUG) {\r\n                    //Seem to happen when returning to RunnerUp\r\n                    Log.e(getClass().getName(), \"onGpsTrackerBound unexpected tracker state: \" + mTracker.getState().toString());\r\n                }\r\n                break;\r\n            case ERROR:\r\n                break;\r\n        }\r\n    }\r\n    updateView();\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.util.Log;\r\nimport org.runnerup.tracker.Tracker;\r\nimport org.runnerup.tracker.Tracker\nimport org.runnerup.R\nimport android.util.Log\nimport android.provider.Settings\nimport android.content.Intent\nprivate void startGps() {\r\n    Log.v(getClass().getName(), \"StartActivity.startGps()\");\r\n    if (!mGpsStatus.isEnabled()) {\r\n        startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));\r\n    }\r\n    if (mGpsStatus != null && !mGpsStatus.isLogging())\r\n        mGpsStatus.start(this);\r\n    if (mTracker != null) {\r\n        mTracker.connect();\r\n    }\r\n    notificationStateManager.displayNotificationState(gpsSearchingState);\r\n}" ],
  "Feeder/393" : [ "", "import androidx.activity.compose.setContent\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setContent {\r\n            IntroScreen(viewModel, nightMode) { finish() }\r\n        }\r\n        setStatusBarTransparent()\r\n    }\nimport android.os.Bundle\nimport androidx.activity.compose.setContent" ],
  "MaterialFiles/9" : [ "delegate.close()\n--------------------------------------------------\nclose()\n--------------------------------------------------\nsuper.close()\n--------------------------------------------------\nlockChannel?.close()", "override fun close() {\r\n        if (lazyDelegate.isInitialized()) {\r\n            delegate.close()\r\n        }\r\n    }" ],
  "Feeder/399" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        writer.beginObject()\r\n        serialiseFields(writer)\r\n        writer.endObject()\r\n    }" ],
  "Iconify/157" : [ "{\n        super.setImageDrawable(drawable)\r\n        onSetImageDrawableListener?.onSetImageDrawable()\n--------------------------------------------------\nimageView.setImageDrawable(null)", "import android.graphics.drawable.Drawable\noverride fun setImageDrawable(drawable: Drawable?) {\r\n        super.setImageDrawable(drawable)\r\n        onSetImageDrawableListener?.onSetImageDrawable()\r\n    }\nimport android.graphics.drawable.Drawable" ],
  "Feeder/324" : [ "binding.EnterBody.text?.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n--------------------------------------------------\neditable.setSpan(StyleSpan(Typeface.BOLD), start, end)\n--------------------------------------------------\neditable.setSpan(StyleSpan(Typeface.ITALIC), start, end)\n--------------------------------------------------\neditable.setSpan(URLSpan(url), start, end)\n--------------------------------------------------\neditable.setSpan(TypefaceSpan(\"monospace\"), start, end)\n--------------------------------------------------\neditable.setSpan(StrikethroughSpan(), start, end)\n--------------------------------------------------\nsetSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n--------------------------------------------------\nsetSpan(span, start, length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)", "import android.text.Spanned\nimport android.text.Spannable\nprivate fun Spannable.setSpan(span: Any, start: Int, end: Int) {\r\n    if (end <= length) {\r\n        setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n    } else setSpan(span, start, length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n}\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[android, text, Spanned], wildcard=false, alias=null)" ],
  "Feeder/325" : [ "binding.EnterBody.text?.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n--------------------------------------------------\neditable.setSpan(StyleSpan(Typeface.BOLD), start, end)\n--------------------------------------------------\neditable.setSpan(StyleSpan(Typeface.ITALIC), start, end)\n--------------------------------------------------\neditable.setSpan(URLSpan(url), start, end)\n--------------------------------------------------\neditable.setSpan(TypefaceSpan(\"monospace\"), start, end)\n--------------------------------------------------\neditable.setSpan(StrikethroughSpan(), start, end)\n--------------------------------------------------\nsetSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n--------------------------------------------------\nsetSpan(span, start, length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)", "import android.text.Spanned\nimport android.text.Spannable\nprivate fun Spannable.setSpan(span: Any, start: Int, end: Int) {\r\n    if (end <= length) {\r\n        setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n    } else setSpan(span, start, length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n}\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[android, text, Spanned], wildcard=false, alias=null)" ],
  "Feeder/326" : [ "\n        builder.append(AutocryptDraftStateHeader.PARAM_ENCRYPT)\r\n        builder.append(if (isEncrypt) \"=yes; \" else \"=no; \")\n--------------------------------------------------\n        builder.append(AutocryptDraftStateHeader.PARAM_ENCRYPT)\n        builder.append(if (isEncrypt) \"=yes; \" else \"=no; \")\r\n\n--------------------------------------------------\n        if (isReply) {\n            builder.append(AutocryptDraftStateHeader.PARAM_IS_REPLY).append(\"=yes; \")\r\n        }\n--------------------------------------------------\n        if (isSignOnly) {\n            builder.append(AutocryptDraftStateHeader.PARAM_SIGN_ONLY).append(\"=yes; \")\r\n        }\n--------------------------------------------------\n        if (isByChoice) {\n            builder.append(AutocryptDraftStateHeader.PARAM_BY_CHOICE).append(\"=yes; \")\r\n        }\n--------------------------------------------------\n        if (isPgpInline) {\n            builder.append(AutocryptDraftStateHeader.PARAM_PGP_INLINE).append(\"=yes; \")\r\n        }\n--------------------------------------------------\nappend(text, it.startIndex, it.endIndex)\n--------------------------------------------------\nappend(text)\n--------------------------------------------------\nlinkText.append(text)\n--------------------------------------------------\nappend(\"* \")\n--------------------------------------------------\nname == \"li\" -> append(\"\\n\")\n--------------------------------------------------\nname == \"br\" -> append(\"\\n\")\n--------------------------------------------------\nappend(\" <${node.attr(\"href\")}>\")\n--------------------------------------------------\noutput.append(text)\n--------------------------------------------------\nappend(\"\\n\")\n--------------------------------------------------\nappend(it)\n--------------------------------------------------\nhead().append(htmlHeadProvider.headHtml)\n--------------------------------------------------\noutput.append(\"\\r\\n\")\n--------------------------------------------------\noutput.append(\"\\t•  \")", "private fun append(text: String) {\r\n        if (text == \" \" && (output.isEmpty() || output.last() in listOf(' ', '\\n'))) {\r\n            return\r\n        }\r\n\r\n        output.append(text)\r\n    }" ],
  "Feeder/327" : [ "                    },\n                    textStyle = ColoredTextStyle(\r\n                        color = inputTextColor,\n--------------------------------------------------\n                            singleLine = true,\n                            textStyle = ColoredTextStyle(\r\n                                color = ComposeAppTheme.colors.leah,", "import androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.graphics.Color\nfun ColoredTextStyle(textStyle: TextStyle, color: Color, textAlign: TextAlign? = null): TextStyle {\r\n    return TextStyle(\r\n        color = color,\r\n        fontWeight = textStyle.fontWeight,\r\n        fontSize = textStyle.fontSize,\r\n        fontStyle = textStyle.fontStyle,\r\n        textAlign = textAlign\r\n    )\r\n}\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.style.TextAlign" ],
  "Feeder/328" : [ "fragmentTransaction {\n    add(R.id.fragment_container, UnreadWidgetConfigurationFragment.create(appWidgetId))\n}\n--------------------------------------------------\n        if (!hasMessageListFragment) {\n            val fragmentTransaction = fragmentManager.beginTransaction()\r\n            val messageListFragment = MessageListFragment.newInstance(\n--------------------------------------------------\n            )\n            fragmentTransaction.add(R.id.message_list_container, messageListFragment)\r\n            fragmentTransaction.commitNow()\n--------------------------------------------------\n            fragmentTransaction.add(R.id.message_list_container, messageListFragment)\n            fragmentTransaction.commitNow()\r\n\n--------------------------------------------------\n        if (fragmentManager.findFragmentByTag(FRAGMENT_TAG_PLACEHOLDER) == null) {\n            val fragmentTransaction = fragmentManager.beginTransaction()\r\n            fragmentTransaction.replace(R.id.message_view_container, messageViewPlaceHolder!!, FRAGMENT_TAG_PLACEHOLDER)\n--------------------------------------------------\n            val fragmentTransaction = fragmentManager.beginTransaction()\n            fragmentTransaction.replace(R.id.message_view_container, messageViewPlaceHolder!!, FRAGMENT_TAG_PLACEHOLDER)\r\n            fragmentTransaction.commit()\n--------------------------------------------------\n            fragmentTransaction.replace(R.id.message_view_container, messageViewPlaceHolder!!, FRAGMENT_TAG_PLACEHOLDER)\n            fragmentTransaction.commit()\r\n        }\n--------------------------------------------------\n        if (messageViewContainerFragment != null) {\n            val fragmentTransaction = supportFragmentManager.beginTransaction()\r\n            fragmentTransaction.remove(messageViewContainerFragment!!)\n--------------------------------------------------\n            val fragmentTransaction = supportFragmentManager.beginTransaction()\n            fragmentTransaction.remove(messageViewContainerFragment!!)\r\n            messageViewContainerFragment = null\n--------------------------------------------------\n            messageViewContainerFragment = null\n            fragmentTransaction.commit()\r\n\n--------------------------------------------------\n{\n        val fragmentTransaction = supportFragmentManager.beginTransaction()\r\n        fragmentTransaction.remove(messageListFragment!!)\n--------------------------------------------------\n        val fragmentTransaction = supportFragmentManager.beginTransaction()\n        fragmentTransaction.remove(messageListFragment!!)\r\n        messageListFragment = null\n--------------------------------------------------\n        messageListFragment = null\n        fragmentTransaction.commit()\r\n    }", "import androidx.fragment.app.FragmentTransaction\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\ninline fun FragmentActivity.fragmentTransaction(crossinline block: FragmentTransaction.() -> Unit) {\r\n    with(supportFragmentManager.beginTransaction()) {\r\n        block()\r\n        commit()\r\n    }\r\n}\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.FragmentTransaction" ],
  "Iconify/153" : [ "drainQueue()\n--------------------------------------------------\n        val recyclerViewState = recyclerView.layoutManager!!.onSaveInstanceState()\n        super.drainQueue()\r\n        recyclerView.layoutManager!!.onRestoreInstanceState(recyclerViewState)\n--------------------------------------------------\n            dragging = false\n            drainQueue()\r\n            if (taskList.isActionModeActive) {", "import java.util.Queue\noverride fun drainQueue() {\r\n        val recyclerViewState = recyclerView.layoutManager!!.onSaveInstanceState()\r\n        super.drainQueue()\r\n        recyclerView.layoutManager!!.onRestoreInstanceState(recyclerViewState)\r\n    }\nimport java.util.Queue" ],
  "Feeder/329" : [ "        // Headline\n        safeLet(headline, headlineStyle, headlineSpacing) { text, style, space ->\r\n            Text(text = text, style = style, color = colors.kds_support_700)\n--------------------------------------------------\n            // Left Button\n            safeLet(leftButtonText, leftButtonTextStyle) { text, style ->\r\n                Button(\n--------------------------------------------------\n            // Right Button\n            safeLet(rightButtonText, rightButtonTextStyle) { text, style ->\r\n                Button(", "inline fun <T : Any> safeLet(vararg elements: T?, block: (List<T>) -> Unit) {\r\n    if (elements.all { it != null }) {\r\n        block(elements.filterNotNull())\r\n    }\r\n}" ],
  "Trail-Sense/1481" : [ "extendAddOns(it)", "import com.kickstarter.models.Reward\nimport com.kickstarter.R\nprivate fun extendAddOns(flattenedList: List<Reward>): List<Reward> {\r\n            val mutableList = mutableListOf<Reward>()\r\n\r\n            flattenedList.map {\r\n                if (!it.isAddOn()) mutableList.add(it)\r\n                else {\r\n                    val q = it.quantity() ?: 1\r\n                    for (i in 1..q) {\r\n                        mutableList.add(it)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return mutableList.toList()\r\n        }" ],
  "Trail-Sense/1003" : [ "override fun onResume() {\n    super.onResume()\n    updateHelper.start()\n}", "override fun onPause() {\n        super.onPause()\n        updateHelper.stop()\n    }" ],
  "Trail-Sense/1487" : [ "StringBuilder().select(fields).from(table)\n--------------------------------------------------\n{\n        val source = getTask(from)\r\n        val targetTaskId = source.uuid\n--------------------------------------------------\nfrom(Task.TABLE)\n--------------------------------------------------\nBottomSheetBehavior.from(bottomSheet)\n--------------------------------------------------\nLayoutInflater.from(context)\n--------------------------------------------------\nNotificationManagerCompat.from(context)\n--------------------------------------------------\nLayoutInflater.from(requireActivity())\n--------------------------------------------------\nDateTime.from(rrule.until)", "import com.todoroo.andlib.sql.StringBuilderExtensions.from\nimport com.todoroo.andlib.data.Table\nfun from(fromTable: Table?): Query {\r\n        table = fromTable\r\n        return this\r\n    }\nImport(names=[com, todoroo, andlib, data, Table], wildcard=false, alias=null)\nImport(names=[com, todoroo, andlib, sql, StringBuilderExtensions, from], wildcard=false, alias=null)" ],
  "Trail-Sense/1004" : [ "        intent.hasExtra(CREATE_TASK) -> {\n            val source = intent.getStringExtra(CREATE_SOURCE)\r\n            firebase.addTask(source ?: \"unknown\")\n--------------------------------------------------\n                OPEN_FILTER: ${getParcelableExtra(intent, OPEN_FILTER, Filter::class.java)?.let { \"${it.title}: $it\" }}\n                LOAD_FILTER: ${intent.getStringExtra(LOAD_FILTER)}\r\n                OPEN_TASK: ${getParcelableExtra(intent, OPEN_TASK, Task::class.java)}\n--------------------------------------------------\n            applyToNavigationBar(this@MainActivity)\n            applyTaskDescription(this@MainActivity, filter.title ?: getString(R.string.app_name))\r\n        }\n--------------------------------------------------\ncontext.getString(R.string.gcal_completed_title, task.title)\n--------------------------------------------------\nchildren.getString(i)\n--------------------------------------------------\nsubarray.getString(0)\n--------------------------------------------------\ngetString(resId)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\ncontext.getString(R.string.WID_dateButtonUnset)\n--------------------------------------------------\ncontext.getString(R.string.DLG_hour_minutes)\n--------------------------------------------------\nif (isNew) getString(R.string.new_list) else gtasksList.name!!\n--------------------------------------------------\ntitle = getString(R.string.manage_drawer)\n--------------------------------------------------\nif (isNew) getString(R.string.new_tag) else tagData.name!!\n--------------------------------------------------\nnameLayout.error = getString(R.string.name_cannot_be_empty)\n--------------------------------------------------\nnameLayout.error = getString(R.string.tag_already_exists)\n--------------------------------------------------\nprefs.getString(KEY_LAST_HASH, null)\n--------------------------------------------------\ncontext.getString(R.string.tasks_caldav_url)\n--------------------------------------------------\njson.getString(\"sub\")\n--------------------------------------------------\nJSONObject(response).getString(\"email\")\n--------------------------------------------------\ngetString(R.string.authorization_cancelled)\n--------------------------------------------------\nbinding.description.text = getString(R.string.error_adding_account, it)\n--------------------------------------------------\nif (caldavAccount == null) getString(R.string.add_account) else caldavAccount!!.name\n--------------------------------------------------\ngetString(R.string.this_feature_requires_a_subscription)\n--------------------------------------------------\nbinding.nameLayout.error = getString(R.string.name_cannot_be_empty)\n--------------------------------------------------\nbinding.urlLayout.error = getString(R.string.url_required)\n--------------------------------------------------\nbinding.urlLayout.error = getString(R.string.url_host_name_required)\n--------------------------------------------------\nbinding.urlLayout.error = getString(R.string.url_invalid_scheme)\n--------------------------------------------------\nbinding.userLayout.error = getString(R.string.username_required)\n--------------------------------------------------\nbinding.passwordLayout.error = getString(R.string.password_required)\n--------------------------------------------------\ngetString(resId, *formatArgs)\n--------------------------------------------------\njson.getString(\"uri\")\n--------------------------------------------------\njson.getString(\"path\")\n--------------------------------------------------\narguments.getString(EXTRA_EXTENSION)\n--------------------------------------------------\ngetString(R.string.import_summary_message, \"\", r.getQuantityString(R.plurals.Ntasks, result.taskCount, result.taskCount), r.getQuantityString(R.plurals.Ntasks, result.importCount, result.importCount), r.getQuantityString(R.plurals.Ntasks, result.skipCount, result.skipCount), r.getQuantityString(R.plurals.Ntasks, 0, 0))\n--------------------------------------------------\ngetString(it)\n--------------------------------------------------\ndialog?.getButton(AlertDialog.BUTTON_POSITIVE)?.text = getString(stringRes)\n--------------------------------------------------\nsuper.newURL.takeIf {\n    it.isNotBlank()\n} ?: getString(R.string.etebase_url)\n--------------------------------------------------\nif (isNullOrEmpty(url)) getString(R.string.etesync_url) else url\n--------------------------------------------------\ngetString(resId, formatArgs)\n--------------------------------------------------\nsavedInstanceState.getString(EXTRA_PICTURE)\n--------------------------------------------------\nsavedInstanceState.getString(EXTRA_TEXT)\n--------------------------------------------------\ngetString(R.string.take_a_picture)\n--------------------------------------------------\ngetString(R.string.actfm_picture_clear)\n--------------------------------------------------\ncontext.getString(R.string.TEA_ctrl_hide_section_pref)\n--------------------------------------------------\ncontext.getString(resId)\n--------------------------------------------------\nactivity.getString(R.string.gtasks_error_accountNotFound, accountName)\n--------------------------------------------------\ngetString(prefId)\n--------------------------------------------------\ngetString(R.string.app_name)\n--------------------------------------------------\ngetString(notificationBody)\n--------------------------------------------------\ninputData.getString(EXTRA_URI)\n--------------------------------------------------\nbundle.getString(ListNotificationBundle.BUNDLE_EXTRA_STRING_FILTER)\n--------------------------------------------------\ncontext.getString(R.string.requires_pro_subscription)\n--------------------------------------------------\ntoolbar.title = getString(getRootTitle())\n--------------------------------------------------\ngetString(R.string.last_backup, timestamp?.takeIf {\n    it >= 0\n}?.let {\n    DateUtilities.getLongDateStringWithTime(it, locale)\n} ?: getString(R.string.last_backup_never))\n--------------------------------------------------\ngetString(R.string.last_backup_never)\n--------------------------------------------------\naccount?.takeIf {\n    it.isNotBlank()\n} ?: getString(R.string.none)\n--------------------------------------------------\ngetString(R.string.backup_location_warning, FileHelper.uri2String(preferences.externalStorage))\n--------------------------------------------------\ngetString(settingResId)\n--------------------------------------------------\ngetString(relativeResId)\n--------------------------------------------------\ngetString(R.string.use_locale_default)\n--------------------------------------------------\ngetString(R.string.tasks_org)\n--------------------------------------------------\ngetString(R.string.microsoft)\n--------------------------------------------------\ngetString(R.string.gtasks_GPr_header)\n--------------------------------------------------\ntitle = getString(R.string.name_your_price)\n--------------------------------------------------\ntitle = getString(R.string.manage_subscription)\n--------------------------------------------------\nsummary = getString(R.string.current_subscription, getString(interval, price))\n--------------------------------------------------\ngetString(interval, price)\n--------------------------------------------------\nname ?: getString(R.string.dont_add_to_calendar)\n--------------------------------------------------\nrequireContext().getString(R.string.none)\n--------------------------------------------------\ngetString(R.string.no_reminders)\n--------------------------------------------------\nNOTIFY_AT_DEADLINE -> getString(R.string.when_due)\n--------------------------------------------------\nNOTIFY_AFTER_DEADLINE -> getString(R.string.when_overdue)\n--------------------------------------------------\nNOTIFY_AT_START -> getString(R.string.when_started)\n--------------------------------------------------\nrequireContext().getString(R.string.repeat_option_does_not_repeat)\n--------------------------------------------------\narguments?.getString(EXTRA_FILTER)\n--------------------------------------------------\ngetString(R.string.tasks_caldav_url)\n--------------------------------------------------\nval label = getString(labelRes)\n--------------------------------------------------\nfindPreference(R.string.local_lists).summary = getString(R.string.migrate_count, quantityString)\n--------------------------------------------------\nit.description ?: getString(R.string.app_password)\n--------------------------------------------------\n${getString(R.string.app_password_created_at, formatString(it.createdAt))}\n--------------------------------------------------\ngetString(R.string.app_password_last_access, formatString(it.lastAccess) ?: getString(R.string.last_backup_never))\n--------------------------------------------------\nformatString(it.lastAccess) ?: getString(R.string.last_backup_never)\n--------------------------------------------------\nit.getString(USERNAME)\n--------------------------------------------------\nit.getString(PASSWORD)\n--------------------------------------------------\nif (isNull(key)) null else getString(key)\n--------------------------------------------------\npref.summary = getString(R.string.widget_id, id)\n--------------------------------------------------\nresources.getString(R.string.when_started)\n--------------------------------------------------\nresources.getString(res, resources.getDurationString(alarm.time))\n--------------------------------------------------\nresources.getString(R.string.when_due)\n--------------------------------------------------\nresources.getString(R.string.randomly_every, resources.getDurationString(alarm.time))\n--------------------------------------------------\ngetString(R.string.snoozed_until, DateUtilities.getLongDateStringWithTime(alarm.time, locale))\n--------------------------------------------------\ngetString(R.string.repeats_plural_number_of_times, getDurationString(interval), repeat, getQuantityString(R.plurals.repeat_times, repeat))\n--------------------------------------------------\ncontext.getString(getSingleFrequencyResource(frequency))\n--------------------------------------------------\ngetString(R.string.repeats_single_on_number_of_times, frequencyString, dayString, count, countString)\n--------------------------------------------------\ncontext.getString(R.string.repeats_single_on, frequencyString, dayString)\n--------------------------------------------------\ngetString(R.string.repeats_single_on_until, frequencyString, dayString, DateUtilities.getLongDateString(repeatUntil, locale))\n--------------------------------------------------\ncontext.getString(R.string.repeats_single_number_of_times, frequencyString, count, countString)\n--------------------------------------------------\ncontext.getString(R.string.repeats_single, frequencyString)\n--------------------------------------------------\ngetString(R.string.repeats_single_until, frequencyString, DateUtilities.getLongDateString(repeatUntil, locale))\n--------------------------------------------------\ngetString(R.string.repeats_plural_on_number_of_times, frequencyPlural, dayString, count, countString)\n--------------------------------------------------\ncontext.getString(R.string.repeats_plural_on, frequencyPlural, dayString)\n--------------------------------------------------\ngetString(R.string.repeats_plural_on_until, frequencyPlural, dayString, DateUtilities.getLongDateString(repeatUntil, locale))\n--------------------------------------------------\ncontext.getString(R.string.repeats_plural_number_of_times, frequencyPlural, count, countString)\n--------------------------------------------------\ncontext.getString(R.string.repeats_plural, frequencyPlural)\n--------------------------------------------------\ngetString(R.string.repeats_plural_until, frequencyPlural, DateUtilities.getLongDateString(repeatUntil, locale))\n--------------------------------------------------\ncontext.getString(R.string.list_separator_with_space)\n--------------------------------------------------\ngetString(R.string.repeat_monthly_every_day_of_nth_week, context.getString(R.string.repeat_monthly_last_week), weekday)\n--------------------------------------------------\ncontext.getString(R.string.repeat_monthly_last_week)\n--------------------------------------------------\ngetString(R.string.repeat_monthly_every_day_of_nth_week, context.getString(NTH_WEEK[weekdayNum.offset - 1]), weekday)\n--------------------------------------------------\ncontext.getString(NTH_WEEK[weekdayNum.offset - 1])\n--------------------------------------------------\ncontext.getString(nameResId)\n--------------------------------------------------\ncontext.getString(R.string.create_new_tag, tagData.name)\n--------------------------------------------------\nactivity.getString(R.string.app_name)\n--------------------------------------------------\nrequireContext().getString(it.first!!)", "import com.google.gson.JsonObject\nprivate fun JsonObject.getString(field: String): String? = if (has(field)) {\r\n            get(field).asString\r\n        } else {\r\n            null\r\n        }\nimport com.google.gson.JsonObject" ],
  "Trail-Sense/1486" : [ "", "import com.kickstarter.models.Project\nfun initialProject(): Project {\r\n        return project()\r\n            .toBuilder()\r\n            .rewards(null)\r\n            .build()\r\n    }\nImport(names=[com, kickstarter, models, Project], wildcard=false, alias=null)" ],
  "Trail-Sense/1007" : [ "", "import com.omgodse.notally.preferences.View\nimport android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n        adapter = null\r\n    }" ],
  "Trail-Sense/720" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "Trail-Sense/1489" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "Iconify/158" : [ "                .into(object : CustomTarget<Bitmap>(widgetImageSize, widgetImageSize) {\n                    override fun onResourceReady(\n                        resource: Bitmap,\n--------------------------------------------------\n                .into(object : CustomTarget<BitmapPaletteWrapper>(imageSize, imageSize) {\n                    override fun onResourceReady(\n                        resource: BitmapPaletteWrapper,\n--------------------------------------------------\nsuper.onResourceReady(resource, transition)", "import com.bumptech.glide.request.transition.Transition\nimport code.name.monkey.retromusic.util.ColorUtil\nimport code.name.monkey.retromusic.glide.palette.BitmapPaletteWrapper\nimport code.name.monkey.appthemehelper.util.ATHUtil\noverride fun onResourceReady(\n        resource: BitmapPaletteWrapper,\n        transition: Transition<in BitmapPaletteWrapper>?\n    ) {\n        super.onResourceReady(resource, transition)\n        onColorReady(\n            ColorUtil.getColor(\n                resource.palette,\n                ATHUtil.resolveColor(view.context, androidx.appcompat.R.attr.colorPrimary)\n            )\n        )\n    }\nImport(names=[code, name, monkey, appthemehelper, util, ATHUtil], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, glide, palette, BitmapPaletteWrapper], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, util, ColorUtil], wildcard=false, alias=null)\nImport(names=[com, bumptech, glide, request, transition, Transition], wildcard=false, alias=null)" ],
  "Trail-Sense/722" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/649" : [ "{\r\n        super.onStart()\r\n        orientationListener.enable()\r\n    }", "override fun onStop() {\r\n        super.onStop()\r\n        orientationListener.disable()\r\n    }" ],
  "Trail-Sense/724" : [ "", "import android.os.Bundle\nimport android.app.Activity\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        \r\n        requireActivity().onBackPressedDispatcher.addCallback(requireActivity(), onBackPressed)\r\n    }\nimport android.app.Activity\nimport android.os.Bundle" ],
  "VinylMusicPlayer/75" : [ "private void loadToplist(String country) {\r\n    if (disposable != null) {\r\n        disposable.dispose();\r\n    }\r\n    gridView.setVisibility(View.GONE);\r\n    txtvError.setVisibility(View.GONE);\r\n    butRetry.setVisibility(View.GONE);\r\n    butRetry.setText(R.string.retry_label);\r\n    txtvEmpty.setVisibility(View.GONE);\r\n    progressBar.setVisibility(View.VISIBLE);\r\n    if (hidden) {\r\n        gridView.setVisibility(View.GONE);\r\n        txtvError.setVisibility(View.VISIBLE);\r\n        txtvError.setText(getResources().getString(R.string.discover_is_hidden));\r\n        butRetry.setVisibility(View.GONE);\r\n        txtvEmpty.setVisibility(View.GONE);\r\n        progressBar.setVisibility(View.GONE);\r\n        return;\r\n    }\r\n    //noinspection ConstantConditions\r\n    if (BuildConfig.FLAVOR.equals(\"free\") && needsConfirm) {\r\n        txtvError.setVisibility(View.VISIBLE);\r\n        txtvError.setText(\"\");\r\n        butRetry.setVisibility(View.VISIBLE);\r\n        butRetry.setText(R.string.discover_confirm);\r\n        butRetry.setOnClickListener(v -> {\r\n            prefs.edit().putBoolean(ItunesTopListLoader.PREF_KEY_NEEDS_CONFIRM, false).apply();\r\n            needsConfirm = false;\r\n            loadToplist(country);\r\n        });\r\n        txtvEmpty.setVisibility(View.GONE);\r\n        progressBar.setVisibility(View.GONE);\r\n        return;\r\n    }\r\n    ItunesTopListLoader loader = new ItunesTopListLoader(getContext());\r\n    disposable = Observable.fromCallable(() -> loader.loadToplist(country, NUM_OF_TOP_PODCASTS, DBReader.getFeedList())).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(podcasts -> {\r\n        progressBar.setVisibility(View.GONE);\r\n        topList = podcasts;\r\n        updateData(topList);\r\n    }, error -> {\r\n        Log.e(TAG, Log.getStackTraceString(error));\r\n        progressBar.setVisibility(View.GONE);\r\n        txtvError.setText(error.getMessage());\r\n        txtvError.setVisibility(View.VISIBLE);\r\n        butRetry.setOnClickListener(v -> loadToplist(country));\r\n        butRetry.setVisibility(View.VISIBLE);\r\n    });\r\n}\n--------------------------------------------------\n@Override\r\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    super.onCreateView(inflater, container, savedInstanceState);\r\n    View root = inflater.inflate(R.layout.quick_feed_discovery, container, false);\r\n    View discoverMore = root.findViewById(R.id.discover_more);\r\n    discoverMore.setOnClickListener(v -> ((MainActivity) getActivity()).loadChildFragment(new DiscoveryFragment()));\r\n    discoverGridLayout = root.findViewById(R.id.discover_grid);\r\n    errorView = root.findViewById(R.id.discover_error);\r\n    errorTextView = root.findViewById(R.id.discover_error_txtV);\r\n    errorRetry = root.findViewById(R.id.discover_error_retry_btn);\r\n    poweredByTextView = root.findViewById(R.id.discover_powered_by_itunes);\r\n    adapter = new FeedDiscoverAdapter((MainActivity) getActivity());\r\n    discoverGridLayout.setAdapter(adapter);\r\n    discoverGridLayout.setOnItemClickListener(this);\r\n    DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();\r\n    float screenWidthDp = displayMetrics.widthPixels / displayMetrics.density;\r\n    if (screenWidthDp > 600) {\r\n        discoverGridLayout.setNumColumns(6);\r\n    } else {\r\n        discoverGridLayout.setNumColumns(4);\r\n    }\r\n    // Fill with dummy elements to have a fixed height and\r\n    // prevent the UI elements below from jumping on slow connections\r\n    List<PodcastSearchResult> dummies = new ArrayList<>();\r\n    for (int i = 0; i < NUM_SUGGESTIONS; i++) {\r\n        dummies.add(PodcastSearchResult.dummy());\r\n    }\r\n    adapter.updateData(dummies);\r\n    loadToplist();\r\n    EventBus.getDefault().register(this);\r\n    return root;\r\n}\n--------------------------------------------------\n", "import java.util.List\nimport de.danoeh.antennapod.model.feed.FeedItem\npublic void updateData(List<FeedItem> newData) {\r\n    data = newData;\r\n    notifyDataSetChanged();\r\n}" ],
  "Trail-Sense/726" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "fcitx5-android/481" : [ "    setFragmentResultListener(resultKey) { _, result ->\n      result.getSerializableCompat(PresetPickerFragment.EXTRA_SELECTED_PRESET, Preset::class)\r\n        .also { viewModel.save(alarm.copy(preset = it)) }\n--------------------------------------------------\n      ACTION_PLAY_PRESET -> {\n        val preset = intent.extras?.getSerializableCompat(INTENT_EXTRA_PRESET, Preset::class)\r\n        requireNotNull(preset) { \"intent extra '${INTENT_EXTRA_PRESET}' is required to send '${ACTION_PLAY_PRESET}' command\" }", "import kotlin.reflect.safeCast\nimport kotlin.reflect.KClass\nimport android.os.Bundle\nimport android.os.Build\nfun <T : java.io.Serializable> Bundle.getSerializableCompat(\r\n  key: String,\r\n  kClass: KClass<T>\r\n): T? {\r\n  return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n    getSerializable(key, kClass.java)\r\n  } else {\r\n    @Suppress(\"DEPRECATION\")\r\n    getSerializable(key)?.let { kClass.safeCast(it) }\r\n  }\r\n}\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[kotlin, reflect, KClass], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/645" : [ "listener.onShuffleModeChanged()\n--------------------------------------------------\nactivity.onShuffleModeChanged()\n--------------------------------------------------\nsuper.onShuffleModeChanged()", "override fun onShuffleModeChanged() {\n        for (listener in mMusicServiceEventListeners) {\n            listener.onShuffleModeChanged()\n        }\n    }" ],
  "Trail-Sense/728" : [ "            val actualRelease =\n                if (hasNextEpisode) TimeTools.applyUserOffset(context, show.nextAirdateMs) else null\r\n            return bindViewAt(\n--------------------------------------------------\n                episodeDescription,\n                actualRelease = TimeTools.applyUserOffset(context, episode.episode_firstairedms),\r\n                episode.network,\n--------------------------------------------------\nTimeTools.applyUserOffset(context, item.nextAirdateMs)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, nextEpisodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, episode_firstairedms)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), episodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, sgShow.nextAirdateMs)\n--------------------------------------------------\ndateTime = applyUserOffset(context, dateTime)", "import java.util.Date\nimport org.threeten.bp.ZonedDateTime\nimport com.battlelancer.seriesguide.settings.DisplaySettings\nimport android.content.Context\nprivate fun applyUserOffset(context: Context, dateTime: ZonedDateTime): ZonedDateTime {\r\n        val offset = DisplaySettings.getShowsTimeOffset(context)\r\n        if (offset != 0) {\r\n            return dateTime.plusHours(offset.toLong())\r\n        }\r\n        return dateTime\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, settings, DisplaySettings], wildcard=false, alias=null)\nImport(names=[org, threeten, bp, ZonedDateTime], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/648" : [ "{\r\n        super.onStop()\r\n        orientationListener.disable()\r\n    }", "override fun onStart() {\r\n        super.onStart()\r\n        orientationListener.enable()\r\n    }" ],
  "VinylMusicPlayer/647" : [ "", "import androidx.appcompat.widget.Toolbar\nimport android.view.ViewTreeObserver\nimport android.view.View\n@Override\r\npublic void onGlobalLayout() {\r\n    appBarLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);\r\n    collapsingToolbarLayout.setScrimVisibleHeightTrigger(toolbar.getHeight() + tabLayout.getHeight() + getStatusBarHeight() * 2);\r\n}" ],
  "fcitx5-android/482" : [ "            val context = requireContext()\n            val playOptions = requireArguments().getParcelableCompat<PlayOptions>(Constants.EXTRA_MEDIA_PLAY_OPTIONS)\r\n            if (playOptions == null) {\n--------------------------------------------------\n        super.onCreate(savedInstanceState)\n        server = requireNotNull(requireArguments().getParcelableCompat(FRAGMENT_WEB_VIEW_EXTRA_SERVER)) {\r\n            \"Server entity has not been supplied!\"", "import org.jellyfin.mobile.utils.AndroidVersion\nimport android.os.Bundle\n\r\n@Suppress(\"DEPRECATION\")\r\ninline fun <reified T> Bundle.getParcelableCompat(key: String?): T? = when {\r\n    AndroidVersion.isAtLeastT -> getParcelable(key, T::class.java)\r\n    else -> getParcelable(key)\r\n}\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[org, jellyfin, mobile, utils, AndroidVersion], wildcard=false, alias=null)" ],
  "fcitx5-android/484" : [ "TextUtils.equals(status, \"CONNECTED\")\n--------------------------------------------------\nTextUtils.equals(status, \"FAILED\")\n--------------------------------------------------\nsuper.equals(other)\n--------------------------------------------------\nother.address.equals(address, ignoreCase = true)\n--------------------------------------------------\naddress.equals(uniswapKit.etherToken().address.hex, true)\n--------------------------------------------------\naddress.equals(uniswapV3Kit.etherToken().address.hex, true)\n--------------------------------------------------\nmanufacturer.equals(Build.MANUFACTURER, ignoreCase = true)", "override fun equals(other: Any?): Boolean {\r\n        return other is ZcashTransaction &&\r\n                other.transactionHash.contentEquals(transactionHash)\r\n    }" ],
  "Feeder/320" : [ "            isSignatureBeforeQuotedText = storage.getBoolean(\"$accountUuid.signatureBeforeQuotedText\", false)\n            replaceIdentities(loadIdentities(accountUuid, storage))\r\n\n--------------------------------------------------\nthis?.replace(\"\\r\\n\", \"\\n\")\n--------------------------------------------------\nthis?.toString()?.replace(\"\\r\\n\", \"\\n\")\n--------------------------------------------------\nthis?.toString()?.replace(\"\\n\", \"\\r\\n\")\n--------------------------------------------------\nintermediateText.replace(\"(?m)^----.*?$\".toRegex(), \"\")\n--------------------------------------------------\nintermediateText.replace(\"\\\\s*([-=_]{30,}+)\\\\s*\".toRegex(), \" \")\n--------------------------------------------------\nintermediateText.replace(\"https?://\\\\S+\".toRegex(), \"...\")\n--------------------------------------------------\nintermediateText.replace('\\n', ' ')\n--------------------------------------------------\nintermediateText.replace(\"\\\\s+\".toRegex(), \" \")\n--------------------------------------------------\ntext.replace(REGEX_CRLF, \"\\n\")\n--------------------------------------------------\nreplace(PREVIEW_OBJECT_CHARACTER, PREVIEW_OBJECT_REPLACEMENT)\n--------------------------------------------------\nreplace(NBSP_CHARACTER, NBSP_REPLACEMENT)\n--------------------------------------------------\n= replace(\"([\\\\r\\\\n])\".toRegex(), \"\")", "private fun <T> List<T>.replace(old: T, new: T): List<T> {\r\n        return map { element ->\r\n            if (element === old) new else element\r\n        }\r\n    }" ],
  "Feeder/321" : [ "addEmptyLine()", "private fun addEmptyLine() {\r\n        if (output.isEmpty() || output.endsWith(\"\\n\\n\")) {\r\n            return\r\n        }\r\n\r\n        startNewLine()\r\n        append(\"\\n\")\r\n    }" ],
  "Feeder/322" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/78" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/334" : [ "@Override\r\npublic void onItemClick(AdapterView<?> adapterView, View view, int pos, long id) {\r\n    final Context context = adapterView.getContext();\r\n    EntityAnswer answer = (EntityAnswer) adapterView.getAdapter().getItem(pos);\r\n    Helper.getParallelExecutor().submit(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                DB db = DB.getInstance(context);\r\n                db.answer().applyAnswer(answer.id, new Date().getTime());\r\n            } catch (Throwable ex) {\r\n                Log.e(ex);\r\n            }\r\n        }\r\n    });\r\n    String html = answer.getHtml(context, null);\r\n    String text = HtmlHelper.getText(context, html);\r\n    ClipboardManager cbm = Helper.getSystemService(ActivityAnswer.this, ClipboardManager.class);\r\n    cbm.setPrimaryClip(ClipData.newHtmlText(getString(R.string.app_name), text, html));\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU)\r\n        ToastEx.makeText(context, R.string.title_clipboard_copied, Toast.LENGTH_LONG).show();\r\n    if (!readonly) {\r\n        Intent result = new Intent();\r\n        result.putExtra(Intent.EXTRA_PROCESS_TEXT, text);\r\n        setResult(RESULT_OK, result);\r\n    }\r\n    finish();\r\n}\n--------------------------------------------------\n@Override\r\nprotected Result onExecute(Context context, Bundle args) throws Throwable {\r\n    Uri uri = args.getParcelable(\"uri\");\r\n    NoStreamException.check(uri, context);\r\n    Result result = new Result();\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n    boolean download_plain = prefs.getBoolean(\"download_plain\", false);\r\n    ContentResolver resolver = context.getContentResolver();\r\n    try (InputStream is = resolver.openInputStream(uri)) {\r\n        if (is == null)\r\n            throw new FileNotFoundException(uri.toString());\r\n        Properties props = MessageHelper.getSessionProperties(true);\r\n        Session isession = Session.getInstance(props, null);\r\n        MimeMessage imessage = new MimeMessage(isession, is);\r\n        MessageHelper helper = new MessageHelper(imessage, context);\r\n        result.from = MessageHelper.formatAddresses(helper.getFrom());\r\n        result.to = MessageHelper.formatAddresses(helper.getTo());\r\n        result.replyTo = MessageHelper.formatAddresses(helper.getReply());\r\n        result.cc = MessageHelper.formatAddresses(helper.getCc());\r\n        result.bcc = MessageHelper.formatAddresses(helper.getBcc());\r\n        result.sent = helper.getSent();\r\n        result.received = helper.getReceivedHeader();\r\n        result.subject = helper.getSubject();\r\n        result.parts = helper.getMessageParts(false);\r\n        String html = result.parts.getHtml(context, download_plain);\r\n        if (html != null) {\r\n            Document parsed = JsoupEx.parse(html);\r\n            HtmlHelper.autoLink(parsed);\r\n            Document document = HtmlHelper.sanitizeView(context, parsed, false);\r\n            result.body = HtmlHelper.fromDocument(context, document, new HtmlHelper.ImageGetterEx() {\r\n\r\n                @Override\r\n                public Drawable getDrawable(Element img) {\r\n                    Drawable d = null;\r\n                    if (TextUtils.isEmpty(img.attr(\"x-tracking\"))) {\r\n                        String src = img.attr(\"src\");\r\n                        if (src.startsWith(\"cid:\")) {\r\n                            String cid = \"<\" + src.substring(4) + \">\";\r\n                            Integer w = Helper.parseInt(img.attr(\"width\"));\r\n                            Integer h = Helper.parseInt(img.attr(\"height\"));\r\n                            Resources res = context.getResources();\r\n                            int scaleToPixels = res.getDisplayMetrics().widthPixels;\r\n                            for (MessageHelper.AttachmentPart apart : result.parts.getAttachmentParts()) if (cid.equals(apart.attachment.cid)) {\r\n                                try {\r\n                                    Bitmap bm = ImageHelper.getScaledBitmap(apart.part.getInputStream(), src, apart.attachment.type, scaleToPixels);\r\n                                    d = new BitmapDrawable(res, bm);\r\n                                    d.setBounds(0, 0, bm.getWidth(), bm.getHeight());\r\n                                    ImageHelper.fitDrawable(d, w == null ? 0 : w, h == null ? 0 : h, 1.0f, tvBody);\r\n                                } catch (Throwable ex) {\r\n                                    Log.e(ex);\r\n                                }\r\n                                break;\r\n                            }\r\n                            if (d == null)\r\n                                d = ContextCompat.getDrawable(context, R.drawable.twotone_broken_image_24);\r\n                        } else\r\n                            d = ContextCompat.getDrawable(context, R.drawable.twotone_image_24);\r\n                    } else {\r\n                        d = ContextCompat.getDrawable(context, R.drawable.twotone_my_location_24);\r\n                        d.setTint(Helper.resolveColor(context, R.attr.colorWarning));\r\n                    }\r\n                    d.setBounds(0, 0, d.getIntrinsicWidth(), d.getIntrinsicHeight());\r\n                    return d;\r\n                }\r\n            }, null);\r\n        }\r\n        int textColorLink = Helper.resolveColor(context, android.R.attr.textColorLink);\r\n        SpannableStringBuilder ssb = new SpannableStringBuilderEx();\r\n        MessageHelper.getStructure(imessage, ssb, 0, textColorLink);\r\n        result.structure = ssb;\r\n        result.headers = HtmlHelper.highlightHeaders(context, helper.getFrom(), helper.getTo(), helper.getReceivedHeader(), helper.getHeaders(), false);\r\n        return result;\r\n    }\r\n}\n--------------------------------------------------\n", "import android.text.Html;\r\nimport org.jsoup.Jsoup;\r\nimport org.jsoup.nodes.Document;\r\nimport org.jsoup.nodes.Document\nimport org.jsoup.Jsoup\nimport android.text.Html\nprivate String getHtml() {\r\n    HtmlHelper.clearComposingText(etText);\r\n    if (etText.isRaw()) {\r\n        saved = etText.getText().toString();\r\n        return saved;\r\n    } else {\r\n        if (saved != null)\r\n            return saved;\r\n        String html = HtmlHelper.toHtml(etText.getText(), this);\r\n        Document d = JsoupEx.parse(html);\r\n        return d.body().html();\r\n    }\r\n}" ],
  "Trail-Sense/1490" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Feeder/336" : [ "filter.isFilterUnwatched.isFalse()\n--------------------------------------------------\nfilter.isFilterUpcoming.isFalse()", "private fun Boolean?.isFalse(): Boolean {\r\n        if (this == null) return false\r\n        return !this\r\n    }" ],
  "Feeder/337" : [ "            isSignatureBeforeQuotedText = storage.getBoolean(\"$accountUuid.signatureBeforeQuotedText\", false)\n            replaceIdentities(loadIdentities(accountUuid, storage))\r\n\n--------------------------------------------------\nthis?.replace(\"\\r\\n\", \"\\n\")\n--------------------------------------------------\nthis?.toString()?.replace(\"\\r\\n\", \"\\n\")\n--------------------------------------------------\nthis?.toString()?.replace(\"\\n\", \"\\r\\n\")\n--------------------------------------------------\nintermediateText.replace(\"(?m)^----.*?$\".toRegex(), \"\")\n--------------------------------------------------\nintermediateText.replace(\"\\\\s*([-=_]{30,}+)\\\\s*\".toRegex(), \" \")\n--------------------------------------------------\nintermediateText.replace(\"https?://\\\\S+\".toRegex(), \"...\")\n--------------------------------------------------\nintermediateText.replace('\\n', ' ')\n--------------------------------------------------\nintermediateText.replace(\"\\\\s+\".toRegex(), \" \")\n--------------------------------------------------\ntext.replace(REGEX_CRLF, \"\\n\")\n--------------------------------------------------\nreplace(PREVIEW_OBJECT_CHARACTER, PREVIEW_OBJECT_REPLACEMENT)\n--------------------------------------------------\nreplace(NBSP_CHARACTER, NBSP_REPLACEMENT)\n--------------------------------------------------\n= replace(\"([\\\\r\\\\n])\".toRegex(), \"\")", "private fun <T> List<T>.replace(old: T, new: T): List<T> {\r\n        return map { element ->\r\n            if (element === old) new else element\r\n        }\r\n    }" ],
  "Iconify/166" : [ "\n        startHandleCommand(intent, startId)\r\n", "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport android.content.Intent\nprivate fun startHandleCommand(intent: Intent, startId: Int) {\r\n        coroutineScope.launch(Dispatchers.IO) {\r\n            handleCommand(intent)\r\n            stopSelf(startId)\r\n        }\r\n    }\nimport android.content.Intent\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch" ],
  "Trail-Sense/1494" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1010" : [ "", "override fun onPause() {\n        super.onPause()\n        musicService.pause()\n    }" ],
  "Feeder/338" : [ "= !updater.isDescendantOf(target.uuid, source.uuid)\n--------------------------------------------------\nif (isDescendantOf(before, target)) {\n    return\n}\n--------------------------------------------------\nreturn isDescendantOf(idToNode[desc], idToNode[parent])", "private fun isDescendantOf(desc: Node?, parent: Node?): Boolean {\r\n        var curr = desc\r\n        while (curr !== treeRoot) {\r\n            if (curr === parent) {\r\n                return true\r\n            }\r\n            curr = curr!!.parent\r\n        }\r\n        return false\r\n    }" ],
  "Trail-Sense/1011" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Iconify/161" : [ "", "override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r\n        var childLeft = 0\r\n\r\n        for (i in 0 until childCount) {\r\n            val child = getChildAt(i)\r\n            if (child.visibility != View.GONE) {\r\n                val childWidth = child.measuredWidth\r\n                child.layout(childLeft, 0, childLeft + childWidth, child.measuredHeight)\r\n                childLeft += childWidth\r\n            }\r\n        }\r\n    }" ],
  "Trail-Sense/1014" : [ "            \"account_remote_search_num_results\" -> account.remoteSearchNumResults = value.toInt()\n            \"account_ringtone\" -> setNotificationSound(value)\r\n            \"notification_light\" -> setNotificationLight(value)\n--------------------------------------------------\n\n        notificationSoundPreference?.setNotificationSound(notificationSettings.ringtone?.toUri())\r\n", "private fun setNotificationSound(value: String) {\r\n        account.notificationSettings.let { notificationSettings ->\r\n            if (!notificationSettings.isRingEnabled || notificationSettings.ringtone != value) {\r\n                account.updateNotificationSettings { it.copy(isRingEnabled = true, ringtone = value) }\r\n                notificationSettingsChanged = true\r\n            }\r\n        }\r\n    }" ],
  "VinylMusicPlayer/642" : [ "listener.onPlayStateChanged()\n--------------------------------------------------\nactivity.onPlayStateChanged()\n--------------------------------------------------\nsuper.onPlayStateChanged()", "override fun onPlayStateChanged() {\n        for (listener in mMusicServiceEventListeners) {\n            listener.onPlayStateChanged()\n        }\n    }" ],
  "Trail-Sense/1498" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/641" : [ "listener.onQueueChanged()\n--------------------------------------------------\nactivity.onQueueChanged()\n--------------------------------------------------\nsuper.onQueueChanged()", "override fun onQueueChanged() {\n        for (listener in mMusicServiceEventListeners) {\n            listener.onQueueChanged()\n        }\n    }" ],
  "Trail-Sense/1015" : [ "                            icon = getIcon(item),\n                            color = getColor(item),\r\n                            count = item.count.takeIf { it != NO_COUNT } ?: try {\n--------------------------------------------------\n            list = list,\n            colorProvider = { chipProvider.getColor(it) },\r\n            onClick = {\n--------------------------------------------------\ncontext.getColor(R.color.overdue)\n--------------------------------------------------\ncontext!!.getColor(getPriorityResId(priority))\n--------------------------------------------------\ngetColor(R.color.icon_tint_with_alpha)\n--------------------------------------------------\ntagData.getColor()\n--------------------------------------------------\nContextCompat.getColor(this, R.color.overdue)\n--------------------------------------------------\ngetColor(R.color.snackbar_text_color)\n--------------------------------------------------\ngetColor(R.color.snackbar_action_color)\n--------------------------------------------------\ngetColor(R.color.snackbar_background)\n--------------------------------------------------\nrequireContext().getColor(color)\n--------------------------------------------------\ncontext.getColor(textColor)\n--------------------------------------------------\nrequireContext().getColor(R.color.icon_tint_with_alpha)\n--------------------------------------------------\nContextCompat.getColor(activity, R.color.text_primary)\n--------------------------------------------------\ncontext.getColor(R.color.map_circle_fill)\n--------------------------------------------------\ncontext.getColor(R.color.map_circle_stroke)\n--------------------------------------------------\nrequireContext().getColor(R.color.overdue)\n--------------------------------------------------\ngetColor(when {\n    hasError -> R.color.overdue\n    hasWarning -> R.color.orange_500\n    else -> R.color.icon_tint_with_alpha\n})\n--------------------------------------------------\ncontext?.getColor(R.color.icon_tint_with_alpha)\n--------------------------------------------------\ncontext.getColor(R.color.icon_tint_with_alpha)\n--------------------------------------------------\nContextCompat.getColor(requireContext(), R.color.icon_tint_with_alpha)\n--------------------------------------------------\ngetColor(tagData)\n--------------------------------------------------\ngetColor(context, if (groupMode == SORT_START && value > 0 && value.toDateTime().plusDays(1).startOfDay().isBeforeNow) {\n    R.color.overdue\n} else {\n    textColor\n})\n--------------------------------------------------\ncontext.getColor(background)", "import com.todoroo.astrid.api.Filter\nprivate fun getColor(filter: Filter): Int {\r\n        if (filter.tint != 0) {\r\n            val color = colorProvider.getThemeColor(filter.tint, true)\r\n            if (color.isFree || inventory.purchasedThemes()) {\r\n                return color.primaryColor\r\n            }\r\n        }\r\n        return 0\r\n    }\nimport com.todoroo.astrid.api.Filter" ],
  "VinylMusicPlayer/644" : [ "listener.onRepeatModeChanged()\n--------------------------------------------------\nactivity.onRepeatModeChanged()\n--------------------------------------------------\nsuper.onRepeatModeChanged()", "import code.name.monkey.retromusic.R\noverride fun onRepeatModeChanged() {\n        for (listener in mMusicServiceEventListeners) {\n            listener.onRepeatModeChanged()\n        }\n    }" ],
  "Trail-Sense/1013" : [ "ForegroundDetector.registerOn(app)", "import android.app.Application.ActivityLifecycleCallbacks\nimport android.app.Application\nimport android.app.Activity\n @JvmStatic\r\n    fun registerOn(application: Application) {\r\n        if (application === observedApplication) {\r\n            return\r\n        }\r\n\r\n        observedApplication?.unregisterActivityLifecycleCallbacks(this)\r\n        observedApplication = application\r\n        application.registerActivityLifecycleCallbacks(this)\r\n    }\nimport android.app.Activity\nimport android.app.Application\nimport android.app.Application.ActivityLifecycleCallbacks" ],
  "VinylMusicPlayer/643" : [ "listener.onMediaStoreChanged()\n--------------------------------------------------\nactivity.onMediaStoreChanged()", "override fun onMediaStoreChanged() {\n        for (listener in mMusicServiceEventListeners) {\n            listener.onMediaStoreChanged()\n        }\n    }" ],
  "Trail-Sense/1019" : [ "ForegroundDetector.registerOn(app)", "import android.app.Application.ActivityLifecycleCallbacks\nimport android.app.Application\nimport android.app.Activity\n @JvmStatic\r\n    fun registerOn(application: Application) {\r\n        if (application === observedApplication) {\r\n            return\r\n        }\r\n\r\n        observedApplication?.unregisterActivityLifecycleCallbacks(this)\r\n        observedApplication = application\r\n        application.registerActivityLifecycleCallbacks(this)\r\n    }\nimport android.app.Activity\nimport android.app.Application\nimport android.app.Application.ActivityLifecycleCallbacks" ],
  "Trail-Sense/731" : [ "val idMap = getIdMap(taskDao, localIds)", "import com.todoroo.astrid.dao.TaskDao\nprivate suspend fun getIdMap(taskDao: TaskDao, keys: List<Long>): MutableMap<Long, String> {\r\n            val tasks = taskDao.fetch(keys)\r\n            val map: MutableMap<Long, String> = HashMap()\r\n            for (task in tasks) {\r\n                map[task.id] = task.uuid\r\n            }\r\n            return map\r\n        }\nImport(names=[com, todoroo, astrid, dao, TaskDao], wildcard=false, alias=null)" ],
  "Trail-Sense/732" : [ "", "import de.grobox.transportr.R\nimport android.widget.DatePicker\noverride fun onDateSet(datePicker: DatePicker, year: Int, month: Int, day: Int) {\r\n        calendar.set(YEAR, year)\r\n        calendar.set(MONTH, month)\r\n        calendar.set(DAY_OF_MONTH, day)\r\n        showDate(calendar)\r\n    }\nImport(names=[android, widget, DatePicker], wildcard=false, alias=null)" ],
  "Iconify/169" : [ "updateProgressTextColor()", "import android.graphics.Color\nprivate fun updateProgressTextColor() {\n        val color = Color.WHITE\n        binding.songTotalTime.setTextColor(color)\n        binding.songCurrentProgress.setTextColor(color)\n        binding.songInfo.setTextColor(color)\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/640" : [ "listener.onPlayingMetaChanged()\n--------------------------------------------------\nactivity.onPlayingMetaChanged()\n--------------------------------------------------\nsuper.onPlayingMetaChanged()", "override fun onPlayingMetaChanged() {\n        super.onPlayingMetaChanged()\n        updateSongs()\n    }" ],
  "Trail-Sense/733" : [ "goToDateTime(newDateTime)", "import org.joda.time.DateTime\nimport com.simplemobiletools.calendar.pro.helpers.Formatter\noverride fun goToDateTime(dateTime: DateTime) {\r\n        currentDayCode = Formatter.getDayCodeFromDateTime(dateTime)\r\n        setupFragment()\r\n    }\nImport(names=[com, simplemobiletools, calendar, pro, helpers, Formatter], wildcard=false, alias=null)\nImport(names=[org, joda, time, DateTime], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/639" : [ "this@AbsMusicServiceActivity.onServiceDisconnected()\n--------------------------------------------------\nlistener.onServiceDisconnected()", "import code.name.monkey.retromusic.R\noverride fun onServiceDisconnected() {\n        if (receiverRegistered) {\n            unregisterReceiver(musicStateReceiver)\n            receiverRegistered = false\n        }\n\n        for (listener in mMusicServiceEventListeners) {\n            listener.onServiceDisconnected()\n        }\n    }" ],
  "VinylMusicPlayer/87" : [ "@NonNull\r\n@Override\r\npublic String getPopupText(int position) {\r\n    switch(getItemViewType(position)) {\r\n        case VIEW_TYPE_USER:\r\n            int offset = (mFavoriteSubscribedUserData != null && mFavoriteSubscribedUserData.size() > 0) ? mFavoriteSubscribedUserData.size() + 2 : 0;\r\n            return mSubscribedUserData.get(position - offset).getName().substring(0, 1).toUpperCase();\r\n        case VIEW_TYPE_FAVORITE_USER:\r\n            return mFavoriteSubscribedUserData.get(position - 1).getName().substring(0, 1).toUpperCase();\r\n        default:\r\n            return \"\";\r\n    }\r\n}\n--------------------------------------------------\n@NonNull\r\n@Override\r\npublic String getPopupText(int position) {\r\n    switch(getItemViewType(position)) {\r\n        case VIEW_TYPE_MULTI_REDDIT:\r\n            int offset = (mFavoriteMultiReddits != null && mFavoriteMultiReddits.size() > 0) ? mFavoriteMultiReddits.size() + 2 : 0;\r\n            return mMultiReddits.get(position - offset).getDisplayName().substring(0, 1).toUpperCase();\r\n        case VIEW_TYPE_FAVORITE_MULTI_REDDIT:\r\n            return mFavoriteMultiReddits.get(position - 1).getDisplayName().substring(0, 1).toUpperCase();\r\n        default:\r\n            return \"\";\r\n    }\r\n}\n--------------------------------------------------\n", "import ml.docilealligator.infinityforreddit.R\nimport android.view.View\n@Override\r\npublic int getItemViewType(int position) {\r\n    if (position == 0) {\r\n        return VIEW_TYPE_HEADER;\r\n    }\r\n    return VIEW_TYPE_POST_FILTER;\r\n}" ],
  "VinylMusicPlayer/86" : [ "{\n        super.onBindViewHolder(holder, position)\n        val song = dataSet[position]\n--------------------------------------------------\nsuper.onBindViewHolder(holder, position - 1)\n--------------------------------------------------\nsuper.onBindViewHolder(holder, position)", "import code.name.monkey.retromusic.util.MusicUtil\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.R\nimport android.view.View\noverride fun onBindViewHolder(holder: SongAdapter.ViewHolder, position: Int) {\n        super.onBindViewHolder(holder, position)\n        val song = dataSet[position]\n        holder.time?.text = MusicUtil.getReadableDurationString(song.duration)\n        if (holder.itemViewType == HISTORY || holder.itemViewType == CURRENT) {\n            setAlpha(holder, 0.5f)\n        }\n    }\nimport android.view.View\nimport code.name.monkey.retromusic.R\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.util.MusicUtil" ],
  "Trail-Sense/736" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "fcitx5-android/470" : [ "@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n    Crouton.cancelAllCroutons();\r\n}\n--------------------------------------------------\n", "@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    if (isPasswordAccepted) {\r\n        init();\r\n    } else {\r\n        checkPassword();\r\n    }\r\n}" ],
  "VinylMusicPlayer/635" : [ "        permissions = getPermissionsToRequest()\n        hadPermissions = hasPermissions()\n        permissionDeniedMessage = null\n--------------------------------------------------\n        super.onResume()\n        val hasPermissions = hasPermissions()\n        if (hasPermissions != hadPermissions) {\n--------------------------------------------------\n        val hasPermissions = hasPermissions()\n        if (hasPermissions != hadPermissions) {\n            hadPermissions = hasPermissions\n--------------------------------------------------\n        if (hasPermissions != hadPermissions) {\n            hadPermissions = hasPermissions\n            if (VersionUtils.hasMarshmallow()) {\n--------------------------------------------------\n            if (VersionUtils.hasMarshmallow()) {\n                onHasPermissionsChanged(hasPermissions)\n            }\n--------------------------------------------------\n{\n        // implemented by sub classes\n        logD(hasPermissions)\n    }\n--------------------------------------------------\nhasPermissions()\n--------------------------------------------------\nreturn hasPermissions()", "import code.name.monkey.retromusic.R\nimport androidx.core.app.ActivityCompat\nimport android.content.pm.PackageManager\nprotected fun hasPermissions(): Boolean {\n        for (permission in permissions) {\n            if (ActivityCompat.checkSelfPermission(this,\n                    permission) != PackageManager.PERMISSION_GRANTED\n            ) {\n                return false\n            }\n        }\n        return true\n    }\nimport android.content.pm.PackageManager\nimport androidx.core.app.ActivityCompat\nimport code.name.monkey.retromusic.R" ],
  "fcitx5-android/472" : [ "", "import org.tasks.ui.TaskEditViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n            inflater: LayoutInflater,\r\n            container: ViewGroup?,\r\n            savedInstanceState: Bundle?\r\n    ): View {\r\n        viewModel = ViewModelProvider(requireParentFragment())[TaskEditViewModel::class.java]\r\n        val view = bind(container)\r\n        createView(savedInstanceState)\r\n        return view\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, ViewModelProvider], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/636" : [ "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    serviceToken = MusicPlayerRemote.bindToService(this, object : ServiceConnection {\n        override fun onServiceConnected(name: ComponentName, service: IBinder) {\n            this@AbsMusicServiceActivity.onServiceConnected()\n        }\n\n        override fun onServiceDisconnected(name: ComponentName) {\n            this@AbsMusicServiceActivity.onServiceDisconnected()\n        }\n    })\n    setPermissionDeniedMessage(getString(R.string.permission_external_storage_denied))\n}", "import code.name.monkey.retromusic.helper.MusicPlayerRemote\nimport code.name.monkey.retromusic.R\noverride fun onDestroy() {\n        super.onDestroy()\n        MusicPlayerRemote.unbindFromService(serviceToken)\n        if (receiverRegistered) {\n            unregisterReceiver(musicStateReceiver)\n            receiverRegistered = false\n        }\n    }\nImport(names=[code, name, monkey, retromusic, helper, MusicPlayerRemote], wildcard=false, alias=null)" ],
  "fcitx5-android/474" : [ "@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\r\n    Dialog dialog = super.onCreateDialog(savedInstanceState);\r\n    dialog.setOnShowListener(dialogInterface -> {\r\n        BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n        setupFullHeight(bottomSheetDialog);\r\n    });\r\n    return dialog;\r\n}\n--------------------------------------------------\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\r\n    Dialog dialog = super.onCreateDialog(savedInstanceState);\r\n    dialog.setOnShowListener(dialogInterface -> {\r\n        BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n        setupFullHeight(bottomSheetDialog);\r\n    });\r\n    return dialog;\r\n}\n--------------------------------------------------\n", "import android.app.Dialog;\r\nimport android.os.Bundle;\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport de.danoeh.antennapod.R\nimport android.widget.Button\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.os.Bundle\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    dialog = new MaterialAlertDialogBuilder(getContext()).setTitle(R.string.audio_controls).setView(R.layout.audio_controls).setPositiveButton(R.string.close_label, null).create();\r\n    return dialog;\r\n}" ],
  "Iconify/170" : [ "super.onDetachedFromWindow()", "import android.os.Handler\noverride fun onDetachedFromWindow() {\r\n    countdownHandler.removeCallbacks(updateCallback)\r\n    super.onDetachedFromWindow()\r\n  }" ],
  "fcitx5-android/473" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "fcitx5-android/476" : [ "", "import android.view.View;\r\nimport android.widget.Button\nimport android.view.View\n@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v == incButton)\r\n        buttonLongClick(+1);\r\n    else\r\n        buttonLongClick(-1);\r\n    return true;\r\n}" ],
  "fcitx5-android/475" : [ "", "import android.view.View;\r\nimport android.widget.Button\nimport android.view.View\n@Override\r\npublic boolean onLongClick(View v) {\r\n    if (v == incButton)\r\n        buttonLongClick(+1);\r\n    else\r\n        buttonLongClick(-1);\r\n    return true;\r\n}" ],
  "Feeder/330" : [ "/**\r\n * Starts the intent created in {@link TweetComposer.Builder#createIntent()}\r\n */\r\npublic void show() {\r\n    final Intent intent = createIntent();\r\n    this.context.startActivity(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n/**\r\n * Creates {@link android.content.Intent} based on data in {@link TweetComposer.Builder}\r\n * @return an Intent to the Twitter for Android or a web intent.\r\n */\r\npublic Intent createIntent() {\r\n    Intent intent = createTwitterIntent();\r\n    if (intent == null) {\r\n        intent = createWebIntent();\r\n    }\r\n    return intent;\r\n}" ],
  "Feeder/331" : [ "{\n        fragmentTransactionWithBackStack {\r\n            replace(R.id.accountSettingsContainer, AccountSettingsFragment.create(accountUuid, preferenceScreen.key))\n--------------------------------------------------\n{\n        fragmentTransactionWithBackStack {\r\n            replace(R.id.generalSettingsContainer, GeneralSettingsFragment.create(preferenceScreen.key))", "import androidx.fragment.app.FragmentTransaction\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\ninline fun FragmentActivity.fragmentTransactionWithBackStack(\r\n    name: String? = null,\r\n    crossinline block: FragmentTransaction.() -> Unit,\r\n) {\r\n    fragmentTransaction {\r\n        block()\r\n        addToBackStack(name)\r\n    }\r\n}\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.FragmentTransaction" ],
  "Feeder/333" : [ "viewModel.outputs.startShareOnTwitter()\n--------------------------------------------------\nstartShareOnTwitter(it)", "import com.kickstarter.libs.TweetComposer\nimport android.util.Pair\nimport android.net.Uri\nprivate fun startShareOnTwitter(projectNameAndShareUrl: Pair<String, String>) {\r\n        val projectName = projectNameAndShareUrl.first\r\n        val shareUrl = projectNameAndShareUrl.second\r\n        TweetComposer.Builder(context())\r\n            .text(shareString(projectName))\r\n            .uri(Uri.parse(shareUrl))\r\n            .show()\r\n    }\nImport(names=[android, util, Pair], wildcard=false, alias=null)\nImport(names=[com, kickstarter, libs, TweetComposer], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/89" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/134" : [ "setResultOnPreferenceClick(\"importData\", RESULT_IMPORT_DATA)\n--------------------------------------------------\nsetResultOnPreferenceClick(\"exportCSV\", RESULT_EXPORT_CSV)\n--------------------------------------------------\nsetResultOnPreferenceClick(\"exportDB\", RESULT_EXPORT_DB)\n--------------------------------------------------\nsetResultOnPreferenceClick(\"repairDB\", RESULT_REPAIR_DB)\n--------------------------------------------------\nsetResultOnPreferenceClick(\"bugReport\", RESULT_BUG_REPORT)", "import org.isoron.uhabits.R\nimport androidx.preference.Preference\nprivate fun setResultOnPreferenceClick(key: String, result: Int) {\r\n        val pref = findPreference(key)\r\n        pref.onPreferenceClickListener =\r\n            Preference.OnPreferenceClickListener {\r\n                requireActivity().setResult(result)\r\n                requireActivity().finish()\r\n                true\r\n            }\r\n    }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)" ],
  "Feeder/345" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/346" : [ "", "import android.net.Uri;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.net.Uri\n/**\r\n * Sets Image {@link android.net.Uri} for the Tweet. Only valid if the Twitter App is\r\n * installed.\r\n * The Uri should be a file Uri to a local file (e.g. <pre><code>Uri.fromFile(someExternalStorageFile)</code></pre>))\r\n */\r\npublic Builder image(@NonNull final Uri imageUri) {\r\n    if (this.imageUri != null) {\r\n        throw new IllegalStateException(\"imageUri already set.\");\r\n    }\r\n    this.imageUri = imageUri;\r\n    return this;\r\n}" ],
  "Iconify/135" : [ "override fun onCreate(savedInstanceState: Bundle?) {\n    superDelegate.onCreate(savedInstanceState)\n    removeActivityDelegate(superDelegate)\n    addActiveDelegate(this)\n}", "override fun onDestroy() {\r\n        superDelegate.onDestroy()\r\n        removeActivityDelegate(this)\r\n    }" ],
  "Feeder/347" : [ "            HSSectionRounded {\n                blockchains.forEachIndexed { index, item ->\r\n                    BlockchainCell(\n--------------------------------------------------\n                    BlockchainCell(\n                        item = item,\r\n                        selected = selectedItem == item,\n--------------------------------------------------\n                        item = item,\n                        selected = selectedItem == item,\r\n                        onCheck = {\n--------------------------------------------------\n                        onCheck = {\n                            selectedItem = item\r\n                            navController.previousBackStackEntry\n--------------------------------------------------\n                                ?.savedStateHandle\n                                ?.set(BlockchainSelectorResult, listOf(item))\r\n                            navController.popBackStack()\n--------------------------------------------------\n            .clickable {\n                onCheck(item)\r\n            }\n--------------------------------------------------\n            painter = rememberAsyncImagePainter(\n                model = item.type.imageUrl,\r\n                error = painterResource(R.drawable.ic_platform_placeholder_32)\n--------------------------------------------------\n                .weight(1f),\n            text = item.name,\r\n            maxLines = 1,\n--------------------------------------------------\nitem {\n    CoinAuditHeader(viewItem.name, viewItem.logoUrl)\n    Spacer(modifier = Modifier.height(8.dp))\n}\n--------------------------------------------------\nitem {\n    CellMultilineLawrenceSection(viewItem.auditViewItems) { auditViewItem ->\n        CoinAudit(auditViewItem) {\n            auditViewItem.reportUrl?.let {\n                onClickReportUrl(it)\n            }\n        }\n    }\n    Spacer(modifier = Modifier.height(24.dp))\n}\n--------------------------------------------------\nitem {\n    Spacer(modifier = Modifier.height(32.dp))\n    CellFooter(text = stringResource(id = R.string.CoinPage_Audits_PoweredBy))\n}\n--------------------------------------------------\nitem {\n    Spacer(modifier = Modifier.height(12.dp))\n    viewItems?.let { (regularAccounts, watchAccounts) ->\n        if (regularAccounts.isNotEmpty()) {\n            AccountsSection(regularAccounts, viewModel, navController)\n            Spacer(modifier = Modifier.height(32.dp))\n        }\n        if (watchAccounts.isNotEmpty()) {\n            AccountsSection(watchAccounts, viewModel, navController)\n            Spacer(modifier = Modifier.height(32.dp))\n        }\n    }\n    val args = when(mode) {\n        ManageAccountsModule.Mode.Manage -> ManageAccountsModule.prepareParams(R.id.manageAccountsFragment, false)\n        ManageAccountsModule.Mode.Switcher -> ManageAccountsModule.prepareParams(R.id.manageAccountsFragment, true)\n    }\n    val actions = listOf(ActionViewItem(R.drawable.ic_plus, R.string.ManageAccounts_CreateNewWallet) {\n        navController.navigateWithTermsAccepted {\n            navController.slideFromRight(R.id.createAccountFragment, args)\n        }\n    }, ActionViewItem(R.drawable.ic_download_20, R.string.ManageAccounts_ImportWallet) {\n        navController.slideFromRight(R.id.importWalletFragment, args)\n    }, ActionViewItem(R.drawable.icon_binocule_20, R.string.ManageAccounts_WatchAddress) {\n        navController.slideFromRight(R.id.watchAddressFragment, args)\n    })\n    CellUniversalLawrenceSection(actions) {\n        RowUniversal(onClick = it.callback) {\n            Icon(modifier = Modifier.padding(horizontal = 16.dp), painter = painterResource(id = it.icon), contentDescription = null, tint = ComposeAppTheme.colors.jacob)\n            body_jacob(text = stringResource(id = it.title))\n        }\n    }\n    Spacer(modifier = Modifier.height(32.dp))\n}\n--------------------------------------------------\nitem(assetMetadata, collectionMetadata)\n--------------------------------------------------\nitem {\n    VSpacer(12.dp)\n}\n--------------------------------------------------\nitem {\n    VSpacer(32.dp)\n}", "import io.horizontalsystems.marketkit.models.Blockchain\nprivate fun item(blockchain: Blockchain): Item {\r\n        val enabled = isEnabled(blockchain)\r\n        val hasSettings = enabled && hasSettings(blockchain)\r\n        return Item(blockchain, enabled, hasSettings)\r\n    }\nimport io.horizontalsystems.marketkit.models.Blockchain" ],
  "Iconify/130" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Feeder/349" : [ "ComposeAppTheme {\n    GetContent(findNavController())\n}\n--------------------------------------------------\n\n    Column(modifier = Modifier.background(color = ComposeAppTheme.colors.tyler)) {\r\n        AppBar(\n--------------------------------------------------\n                            contentDescription = null,\n                            tint = ComposeAppTheme.colors.grey\r\n                        )\n--------------------------------------------------\nComposeAppTheme {\n    BottomSheetHeader(iconPainter = painterResource(R.drawable.icon_24_warning_2), iconTint = ColorFilter.tint(ComposeAppTheme.colors.lucian), title = title, onCloseClick = {\n        navController.popBackStack()\n    }) {\n        VSpacer(12.dp)\n        TextImportantError(modifier = Modifier.padding(horizontal = 16.dp), text = errorText)\n        VSpacer(8.dp)\n        ButtonPrimaryYellow(modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp, vertical = 24.dp), title = stringResource(R.string.Button_Ok), onClick = {\n            navController.popBackStack()\n        })\n        VSpacer(8.dp)\n    }\n}\n--------------------------------------------------\nComposeAppTheme {\n    PinUnlock(onSuccess = {\n        setResult(RESULT_OK)\n        finish()\n    })\n}\n--------------------------------------------------\nComposeAppTheme {\n    BottomSheetHeader(iconPainter = painterResource(R.drawable.ic_attention_24), iconTint = ColorFilter.tint(ComposeAppTheme.colors.jacob), title = stringResource(R.string.ManageAccount_BackupRequired_Title), onCloseClick = {\n        navController.popBackStack()\n    }) {\n        VSpacer(12.dp)\n        TextImportantWarning(modifier = Modifier.padding(horizontal = 16.dp), text = text)\n        VSpacer(32.dp)\n        ButtonPrimaryYellowWithIcon(modifier = Modifier.fillMaxWidth().padding(horizontal = 24.dp), title = stringResource(R.string.BackupRecoveryPhrase_ManualBackup), icon = R.drawable.ic_edit_24, iconTint = ComposeAppTheme.colors.dark, onClick = {\n            navController.slideFromBottom(R.id.backupKeyFragment, BackupKeyModule.prepareParams(account))\n        })\n        VSpacer(12.dp)\n        ButtonPrimaryDefaultWithIcon(modifier = Modifier.fillMaxWidth().padding(horizontal = 24.dp), title = stringResource(R.string.BackupRecoveryPhrase_LocalBackup), icon = R.drawable.ic_file_24, iconTint = ComposeAppTheme.colors.claude, onClick = {\n            navController.slideFromBottom(R.id.backupLocalFragment, BackupLocalFragment.prepareParams(account.id))\n        })\n        VSpacer(12.dp)\n        ButtonPrimaryTransparent(modifier = Modifier.fillMaxWidth().padding(horizontal = 24.dp), title = stringResource(R.string.BackupRecoveryPhrase_Later), onClick = {\n            navController.popBackStack()\n        })\n        VSpacer(32.dp)\n    }\n}\n--------------------------------------------------\nComposeAppTheme {\n    BiometricDisabledDialog({})\n}\n--------------------------------------------------\nComposeAppTheme {\n    val icon = if (showAsWarning) R.drawable.ic_attention_24 else R.drawable.ic_info_24\n    val iconTint = if (showAsWarning) {\n        ColorFilter.tint(ComposeAppTheme.colors.jacob)\n    } else {\n        ColorFilter.tint(ComposeAppTheme.colors.grey)\n    }\n    BottomSheetHeader(iconPainter = painterResource(icon), iconTint = iconTint, title = title, onCloseClick = {\n        navController.popBackStack()\n    }) {\n        if (showAsWarning) {\n            TextImportantWarning(modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp), text = text)\n        } else {\n            body_bran(modifier = Modifier.padding(horizontal = 32.dp, vertical = 12.dp), text = text)\n        }\n        if (showAsWarning) {\n            VSpacer(12.dp)\n            ButtonPrimaryYellow(modifier = Modifier.fillMaxWidth().padding(horizontal = 24.dp), title = stringResource(R.string.Button_Understand), onClick = {\n                navController.popBackStack()\n            })\n        }\n        Spacer(Modifier.height(32.dp))\n    }\n}\n--------------------------------------------------\nComposeAppTheme {\n    Surface(color = ComposeAppTheme.colors.tyler) {\n        Column {\n            AppBar(menuItems = listOf(MenuItem(title = TranslatableString.ResString(R.string.Button_Close), icon = R.drawable.ic_close, onClick = onCloseClick)))\n            Column(modifier = Modifier.fillMaxWidth().verticalScroll(rememberScrollState())) {\n                InfoHeader(R.string.BtcBlockchainSettings_TransactionInputsOutputs)\n                InfoBody(R.string.BtcBlockchainSettings_TransactionInputsOutputsDescription)\n                Spacer(Modifier.height(20.dp))\n            }\n        }\n    }\n}\n--------------------------------------------------\nComposeAppTheme {\n    BottomSheetHeader(iconPainter = painterResource(R.drawable.ic_mail_24), iconTint = ColorFilter.tint(ComposeAppTheme.colors.jacob), title = stringResource(R.string.SettingsContact_Title), onCloseClick = onCloseClick) {\n        VSpacer(24.dp)\n        ButtonPrimaryYellow(modifier = Modifier.fillMaxWidth().padding(horizontal = 24.dp), title = stringResource(R.string.Settings_Contact_ViaEmail), onClick = {\n            sendEmail(reportEmail, context)\n        })\n        VSpacer(12.dp)\n        ButtonPrimaryDefault(modifier = Modifier.fillMaxWidth().padding(horizontal = 24.dp), title = stringResource(R.string.Settings_Contact_ViaTelegram), onClick = {\n            navController.slideFromRight(R.id.personalSupportFragment)\n        })\n        VSpacer(24.dp)\n    }\n}\n--------------------------------------------------\nComposeAppTheme {\n    BottomSheetHeader(iconPainter = painterResource(R.drawable.ic_delete_20), iconTint = ColorFilter.tint(ComposeAppTheme.colors.lucian), title = stringResource(R.string.WalletConnect_DeleteAllPairs), onCloseClick = {\n        navController.popBackStack()\n    }) {\n        TextImportantWarning(modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp), text = stringResource(R.string.WalletConnect_Pairings_ConfirmationDeleteAll))\n        Spacer(Modifier.height(20.dp))\n        ButtonPrimaryRed(modifier = Modifier.fillMaxWidth().padding(horizontal = 24.dp), title = stringResource(R.string.WalletConnect_Pairings_Delete), onClick = {\n            ConfirmDeleteAllPairingsDialog.setResult(navController, true)\n            navController.popBackStack()\n        })\n        Spacer(Modifier.height(32.dp))\n    }\n}\n--------------------------------------------------\nComposeAppTheme {\n    WCSessionError(\"Error text\", NavController(context))\n}\n--------------------------------------------------\nComposeAppTheme {\n    WalletConnectErrorNoAccount {\n        findNavController().popBackStack()\n    }\n}\n--------------------------------------------------\nComposeAppTheme {\n    WalletConnectErrorNoAccount({})\n}\n--------------------------------------------------\nComposeAppTheme {\n    Column(modifier = Modifier.background(color = ComposeAppTheme.colors.tyler)) {\n        AppBar(title = stringResource(R.string.WidgetList_Config_Title), navigationIcon = null, menuItems = listOf(MenuItem(title = TranslatableString.ResString(R.string.Button_Close), icon = R.drawable.ic_close, onClick = {\n            finish()\n        })))\n        Column(modifier = Modifier.fillMaxSize().verticalScroll(rememberScrollState())) {\n            Spacer(modifier = Modifier.height(12.dp))\n            CellSingleLineLawrenceSection(MarketWidgetManager.getMarketWidgetTypes()) { type ->\n                Row(modifier = Modifier.fillMaxSize().clickable(onClick = {\n                    selectedType = type\n                    finishActivity(type, appWidgetId, currentGlanceId, context)\n                }).padding(horizontal = 16.dp), verticalAlignment = Alignment.CenterVertically) {\n                    body_leah(text = stringResource(type.title), modifier = Modifier.weight(1f))\n                    if (selectedType == type) {\n                        Image(painter = painterResource(id = R.drawable.ic_checkmark_20), contentDescription = null, colorFilter = ColorFilter.tint(ComposeAppTheme.colors.jacob))\n                    }\n                }\n            }\n            if (manufacturer.equals(Build.MANUFACTURER, ignoreCase = true)) {\n                Spacer(modifier = Modifier.height(24.dp))\n                TextImportantWarning(modifier = Modifier.padding(horizontal = 16.dp), text = stringResource(R.string.Widget_EnableAutostartWarning))\n            }\n            Spacer(modifier = Modifier.height(24.dp))\n        }\n    }\n}", "import androidx.compose.runtime.Composable\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.foundation.isSystemInDarkTheme\n\r\n@Composable\r\nfun ComposeAppTheme(\r\n    darkTheme: Boolean = isSystemInDarkTheme(),\r\n    content: @Composable() () -> Unit\r\n) {\r\n\r\n    val colors = if (darkTheme) {\r\n        darkPalette\r\n    } else {\r\n        lightPalette\r\n    }\r\n\r\n    //custom styles\r\n    ProvideLocalAssets(colors = colors, typography = Typography()) {\r\n        //material styles\r\n        MaterialTheme(\r\n            content = content\r\n        )\r\n    }\r\n\r\n}\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.runtime.Composable" ],
  "Trail-Sense/1021" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/131" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Trail-Sense/1022" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1025" : [ "requireArguments().getInt(\"color\")\n--------------------------------------------------\nrequireArguments().getInt(\"value\")\n--------------------------------------------------\nstate.bundle!!.getInt(\"x\")\n--------------------------------------------------\nstate.bundle.getInt(\"y\")\n--------------------------------------------------\nstate.bundle.getInt(\"direction\")\n--------------------------------------------------\nstate.bundle.getInt(\"dataOffset\")\n--------------------------------------------------\nstate.bundle.getInt(\"maxDataOffset\")\n--------------------------------------------------\nstate.getInt(\"habitType\")\n--------------------------------------------------\nstate.getInt(\"paletteColor\")\n--------------------------------------------------\nstate.getInt(\"freqNum\")\n--------------------------------------------------\nstate.getInt(\"freqDen\")\n--------------------------------------------------\nstate.getInt(\"reminderHour\")\n--------------------------------------------------\nstate.getInt(\"reminderMin\")\n--------------------------------------------------\nstate.getInt(\"reminderDays\")\n--------------------------------------------------\nstate.bundle!!.getInt(\"dataOffset\")\n--------------------------------------------------\nbundle.getInt(\"action\")\n--------------------------------------------------\ncursor.getInt(index)\n--------------------------------------------------\nsharedPrefs.getInt(key, defValue)\n--------------------------------------------------\nintent.extras?.getInt(EXTRA_APPWIDGET_ID, INVALID_APPWIDGET_ID)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH)\n--------------------------------------------------\noptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT)", "override fun getInt(index: Int): Int? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getInt(index)\r\n        }\r\n    }" ],
  "VinylMusicPlayer/90" : [ "        if (holder.itemViewType == HISTORY || holder.itemViewType == CURRENT) {\n            setAlpha(holder, 0.5f)\n        }", "import code.name.monkey.retromusic.model.Song\nimport android.view.View\nprivate fun setAlpha(holder: SongAdapter.ViewHolder, alpha: Float) {\n        holder.image?.alpha = alpha\n        holder.title?.alpha = alpha\n        holder.text?.alpha = alpha\n        holder.paletteColorContainer?.alpha = alpha\n        holder.dragView?.alpha = alpha\n        holder.menu?.alpha = alpha\n    }\nimport android.view.View\nimport code.name.monkey.retromusic.model.Song" ],
  "Trail-Sense/1023" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/111" : [ "        coroutineScope.launch {\n            writeToFile()\r\n        }\n--------------------------------------------------\n        } catch (e: Throwable) {\n            logger.warning(\"writeToFile() error\", e)\r\n        }", "import java.io.OutputStream\noverride suspend fun writeTo(t: MarketWidgetState, output: OutputStream) {\r\n            output.use {\r\n                it.write(\r\n                    gson.toJson(t).encodeToByteArray()\r\n                )\r\n            }\r\n        }\nImport(names=[java, io, OutputStream], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/632" : [ "super.onPostCreate(savedInstanceState)", "import android.os.Bundle\noverride fun onPostCreate(savedInstanceState: Bundle?) {\r\n        super.onPostCreate(savedInstanceState)\r\n\r\n        delayedHide()\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Trail-Sense/1024" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1029" : [ "\"SMA\" -> calculateSMA(points, period)\n--------------------------------------------------\n            try {\n                val smaValues = ChartIndicatorManager.calculateSMA(period = period, points = pointsForIndicators)\r\n                chartData[\"sma_$period\"] = smaValues", "fun calculateSMA(\r\n            points: LinkedHashMap<Long, Float>,\r\n            period: Int\r\n        ): LinkedHashMap<Long, Float> {\r\n            val pointsList = points.toList()\r\n            return LinkedHashMap(\r\n                pointsList.windowed(period, 1) {\r\n                    it.last().first to it.map { it.second }.average().toFloat()\r\n                }.toMap()\r\n            )\r\n        }" ],
  "Trail-Sense/741" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/117" : [ "@Override\r\npublic void onTerminate() {\r\n    super.onTerminate();\r\n    // on terminate is never called\r\n    // ref: http://stackoverflow.com/questions/15162562/application-lifecycle\r\n    Timber.d(\"Application terminated\");\r\n}\n--------------------------------------------------\n", "import timber.log.Timber;\r\nimport timber.log.Timber\n@Override\r\npublic void onTerminate() {\r\n    super.onTerminate();\r\n    // on terminate is never called\r\n    // ref: http://stackoverflow.com/questions/15162562/application-lifecycle\r\n    Timber.d(\"Application terminated\");\r\n}" ],
  "Neo-Backup/115" : [ "", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\nimport java.util.Collection;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.LinkedList\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<File> listFilesDeep(@NonNull Collection<File> files, @Nullable FileFilter fileFilter) {\r\n    List<File> resFiles = new LinkedList<>();\r\n    for (File file : files) {\r\n        if (file.isDirectory()) {\r\n            internalListFilesDeep(resFiles, file, fileFilter);\r\n        } else if (fileFilter == null || fileFilter.accept(file)) {\r\n            resFiles.add(file);\r\n        }\r\n    }\r\n    return resFiles;\r\n}" ],
  "Trail-Sense/1028" : [ "        }\n        val senderEmailAddress = getSenderEmailAddress(message) ?: return false\r\n        return contactRepository.hasContactFor(senderEmailAddress)", "import com.fsck.k9.mail.Message\nimport app.k9mail.core.common.mail.toEmailAddressOrNull\nimport app.k9mail.core.common.mail.EmailAddress\nprivate fun getSenderEmailAddress(message: Message): EmailAddress? {\r\n        val from = message.from\r\n        return if (from == null || from.isEmpty()) {\r\n            null\r\n        } else {\r\n            from[0].address.toEmailAddressOrNull()\r\n        }\r\n    }\nimport app.k9mail.core.common.mail.EmailAddress\nimport app.k9mail.core.common.mail.toEmailAddressOrNull\nimport com.fsck.k9.mail.Message" ],
  "Iconify/137" : [ "", "override fun onPause() {\n        super.onPause()\n        musicService.pause()\n    }" ],
  "VinylMusicPlayer/99" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/745" : [ "override fun onPause() {\n    super.onPause()\n    if (config!!.autosaveNotes) {\n        saveText(false)\n    }\n    removeTextWatcher()\n}", "import com.simplemobiletools.notes.pro.helpers.NotesHelper\nimport com.simplemobiletools.notes.pro.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        NotesHelper(requireActivity()).getNoteWithId(noteId) {\r\n            if (it != null) {\r\n                note = it\r\n                setupFragment()\r\n            }\r\n        }\r\n    }\nImport(names=[com, simplemobiletools, notes, pro, helpers, NotesHelper], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/627" : [ "@Override\r\nprotected void onResume() {\r\n    try {\r\n        super.onResume();\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"resuming main activity\");\r\n    }\r\n    // check if restart activity\r\n    if (isRestartActivitySet()) {\r\n        // restart and exit\r\n        restartActivity();\r\n    }\r\n}\n--------------------------------------------------\n/*\r\n        Custom methods\r\n     */\r\npublic void changeDatabase(@NonNull DatabaseMetadata database) {\r\n    // Reuse existing metadata, if found.\r\n    DatabaseMetadata existing = mDatabases.get().get(database.localPath);\r\n    if (existing != null) {\r\n        Timber.v(\"Existing database found. Reusing metadata.\");\r\n        database = existing;\r\n    }\r\n    try {\r\n        new MmxDatabaseUtils(this).useDatabase(database);\r\n    } catch (Exception e) {\r\n        if (e instanceof IllegalArgumentException) {\r\n            Timber.w(e.getMessage());\r\n        } else {\r\n            Timber.e(e, \"changing the database\");\r\n        }\r\n        return;\r\n    }\r\n    // Refresh the recent files list.\r\n    getDatabases().load();\r\n    setRestartActivity(true);\r\n    restartActivity();\r\n}\n--------------------------------------------------\n", "import com.money.manager.ex.home.MainActivity;\r\nimport com.money.manager.ex.home.MainActivity\nimport com.money.manager.ex.R\nprivate void restartActivity() {\r\n    MainActivity.setRestartActivity(true);\r\n    getActivity().recreate();\r\n}" ],
  "Trail-Sense/746" : [ "override fun onResume() {\n    super.onResume()\n    updateHelper.start()\n}", "override fun onPause() {\n        super.onPause()\n        updateHelper.stop()\n    }" ],
  "VinylMusicPlayer/97" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    // Undo delete\r\n    undoDeletion();\r\n}" ],
  "Trail-Sense/747" : [ "", "import code.name.monkey.retromusic.helper.MusicPlayerRemote\nimport code.name.monkey.retromusic.R\nimport android.app.Activity\noverride fun onDestroyView() {\n        super.onDestroyView()\n        if (MusicPlayerRemote.playingQueue.isNotEmpty())\n            mainActivity.expandPanel()\n        _binding = null\n    }" ],
  "VinylMusicPlayer/95" : [ "", "import code.name.monkey.retromusic.R\nimport code.name.monkey.appthemehelper.util.ColorUtil\nimport androidx.core.view\nimport androidx.appcompat.app.AppCompatActivity\nimport android.view.View\nimport android.graphics.Color\nfun AppCompatActivity.setStatusBarColorPreMarshmallow(color: Int) {\n    val statusBar = window.decorView.rootView.findViewById<View>(R.id.status_bar)\n    if (statusBar != null) {\n        statusBar.setBackgroundColor(\n            ColorUtil.darkenColor(\n                color\n            )\n        )\n    } else {\n        window.statusBarColor = ColorUtil.darkenColor(color)\n    }\n}\nImport(names=[android, graphics, Color], wildcard=false, alias=null)\nImport(names=[androidx, appcompat, app, AppCompatActivity], wildcard=false, alias=null)\nImport(names=[code, name, monkey, appthemehelper, util, ColorUtil], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/626" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "VinylMusicPlayer/625" : [ "@Override\r\npublic boolean onNavigateUp() {\r\n    onBackPressed();\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            break;\r\n        case R.id.menu_gallery_share:\r\n            shareMedia();\r\n            break;\r\n        case R.id.menu_gallery:\r\n            viewMedia();\r\n            break;\r\n        default:\r\n            LogDelegate.e(\"Wrong element choosen: \" + item.getItemId());\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment\n@Override\r\npublic void onBackPressed() {\r\n    if (!backStack.isEmpty()) {\r\n        replaceFragment(backStack.remove(backStack.size() - 1));\r\n    } else {\r\n        super.onBackPressed();\r\n    }\r\n}" ],
  "Feeder/340" : [ "alarmRepository.deleteAlarm(alarmId)\n--------------------------------------------------\n        if (completed) {\n            deleteAlarm(taskId)\r\n        }", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Alarm\noverride suspend fun deleteAlarm(id: Int) {\r\n        withContext(ioDispatcher) {\r\n            alarmDao.delete(id)\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Feeder/342" : [ "parseTextElement(element, mutableListOf())\n--------------------------------------------------\ntextNode.parseTextElement(element)\n--------------------------------------------------\nparseTextElement(it, textComponents)", "import org.jsoup.nodes.TextNode\nimport org.jsoup.nodes.Element\nprivate fun parseTextElement(\r\n        element: Element,\r\n        textComponents: MutableList<TextComponent>\r\n    ): List<TextComponent> {\r\n\r\n        for (node in element.childNodes()) {\r\n            (node as? TextNode)?.let { textNode ->\r\n                if (textNode.text().trim().isNotEmpty()) {\r\n                    textComponents.add(textNode.parseTextElement(element))\r\n                }\r\n            }\r\n            (node as? Element)?.let {\r\n                parseTextElement(it, textComponents)\r\n            }\r\n        }\r\n        return textComponents.toList()\r\n    }\nImport(names=[org, jsoup, nodes, Element], wildcard=false, alias=null)\nImport(names=[org, jsoup, nodes, TextNode], wildcard=false, alias=null)" ],
  "Feeder/343" : [ "parseTextElement(element, mutableListOf())\n--------------------------------------------------\ntextNode.parseTextElement(element)\n--------------------------------------------------\nparseTextElement(it, textComponents)", "import org.jsoup.nodes.TextNode\nimport org.jsoup.nodes.Element\nprivate fun parseTextElement(\r\n        element: Element,\r\n        textComponents: MutableList<TextComponent>\r\n    ): List<TextComponent> {\r\n\r\n        for (node in element.childNodes()) {\r\n            (node as? TextNode)?.let { textNode ->\r\n                if (textNode.text().trim().isNotEmpty()) {\r\n                    textComponents.add(textNode.parseTextElement(element))\r\n                }\r\n            }\r\n            (node as? Element)?.let {\r\n                parseTextElement(it, textComponents)\r\n            }\r\n        }\r\n        return textComponents.toList()\r\n    }\nImport(names=[org, jsoup, nodes, Element], wildcard=false, alias=null)\nImport(names=[org, jsoup, nodes, TextNode], wildcard=false, alias=null)" ],
  "Feeder/344" : [ "appendColumns(columns!!)", "private fun StringBuilder.appendColumns(columns: Array<out String>) {\r\n        val n = columns.size\r\n        for (i in 0 until n) {\r\n            val column = columns[i]\r\n            if (i > 0) {\r\n                append(\", \")\r\n            }\r\n            append(column)\r\n        }\r\n        append(' ')\r\n    }" ],
  "Trail-Sense/1032" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/621" : [ "@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (requestCode == REQUEST_CODE_CAMERA) {\r\n        if (resultCode == RESULT_OK) {\r\n            final Intent intent = new Intent();\r\n            intent.setData(uri);\r\n            setResult(RESULT_OK, intent);\r\n        }\r\n        finish();\r\n    } else {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n}\n--------------------------------------------------\nprivate void sendResult(DialogInterface d, int... i) {\r\n    Intent data = new Intent();\r\n    data.putExtra(EXTRA_GEOFENCE, (Parcelable) toGeofence());\r\n    getTargetFragment().onActivityResult(getTargetRequestCode(), RESULT_OK, data);\r\n    dismiss();\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (requestCode == REQUEST_CODE_CAMERA) {\r\n        if (resultCode == RESULT_OK) {\r\n            final Intent intent = new Intent();\r\n            intent.setData(uri);\r\n            setResult(RESULT_OK, intent);\r\n        }\r\n        finish();\r\n    } else {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n}" ],
  "Trail-Sense/756" : [ "binding.toolbar.setBackgroundColor(androidColor)\n--------------------------------------------------\nsetBackgroundColor(sres.getColor(R.attr.headerBackgroundColor))\n--------------------------------------------------\nsetBackgroundColor(resources.getColor(R.color.indigo_500))\n--------------------------------------------------\nview.setBackgroundColor(sr.getColor(R.attr.contrast0))\n--------------------------------------------------\nring.setBackgroundColor(bgColor)", "import android.graphics.Color\noverride fun setBackgroundColor(backgroundColor: Int) {\r\n        this.backgroundColor = backgroundColor\r\n        invalidate()\r\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)" ],
  "Trail-Sense/757" : [ "setPosition(logo.x + logo.width - 12.dp, logo.x + logo.width - 12.dp, logo.y + logo.height - 24.dp, logo.y + logo.height + 24.dp)\n--------------------------------------------------\nsetPosition(logo.x + 12.dp, logo.x + 12.dp, logo.y + logo.height - 24.dp, logo.y + logo.height + 24.dp)\n--------------------------------------------------\nsetPosition(currentHeight * proportion)\n--------------------------------------------------\nplayer.setPosition(0F)\n--------------------------------------------------\nsetPosition((time.toFloat() / NO_LENGTH_PROGRESS_MAX.toFloat()))\n--------------------------------------------------\nplaylistManager.player.setPosition(pos)", "import org.videolan.vlc.R\nprivate fun setPosition(y: Float) {\r\n        val position = y / currentHeight\r\n        val handleHeight = handle.height\r\n        handle.y = getValueInRange(0, currentHeight - handleHeight, ((currentHeight - handleHeight) * position).toInt()).toFloat()\r\n        val bubbleHeight = bubble.height\r\n        bubble.y = getValueInRange(0, currentHeight - bubbleHeight, ((currentHeight - bubbleHeight) * position).toInt() - handleHeight).toFloat()\r\n    }" ],
  "Trail-Sense/758" : [ "resetTimer()", "import java.util.Timer\nprivate fun resetTimer() {\r\n        stopTimer()\r\n        startTimer()\r\n    }" ],
  "fcitx5-android/490" : [ "setColor(c)\n--------------------------------------------------\nbinding.frequencyChart.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreRing.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreView.setColor(androidColor)\n--------------------------------------------------\nbinding.streakChart.setColor(androidColor)\n--------------------------------------------------\nbinding.targetChart.setColor(androidColor)\n--------------------------------------------------\nsetColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nchart.setColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nring.setColor(fgColor)", "import android.graphics.Color\nfun setColor(color: Int) {\r\n        this.color = color\r\n        invalidate()\r\n    }" ],
  "VinylMusicPlayer/618" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}" ],
  "fcitx5-android/494" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/493" : [ "client.track(\"App Open\")\n--------------------------------------------------\nclient.track(PAGE_VIEWED.eventName, props)\n--------------------------------------------------\nclient.track(CTA_CLICKED.eventName, props)\n--------------------------------------------------\nclient.track(VIDEO_PLAYBACK_STARTED.eventName, props)\n--------------------------------------------------\nclient.track(VIDEO_PLAYBACK_COMPLETED.eventName, props)\n--------------------------------------------------\nclient.track(CARD_CLICKED.eventName, props)\n--------------------------------------------------\nclient?.track(eventName)\n--------------------------------------------------\nclient?.track(eventName, additionalProperties)\n--------------------------------------------------\nAnalytics.with(context).track(eventName, this.getProperties(newProperties))\n--------------------------------------------------\ntrack(eventName, HashMap())", "fun track(eventName: String, additionalProperties: Map<String, Any>) {\r\n            clients.forEach { client ->\r\n                client?.track(eventName, additionalProperties)\r\n            }\r\n        }" ],
  "Feeder/351" : [ "", "import androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.ripple.RippleTheme\nimport androidx.compose.foundation.isSystemInDarkTheme\n @Composable\r\n    override fun defaultColor(): Color = RippleTheme.defaultRippleColor(\r\n        if (isSystemInDarkTheme()) Color.White else Color.Black,\r\n        lightTheme = true\r\n    )\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.material.ripple.RippleTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics.Color" ],
  "MaterialFiles/1106" : [ "view?.onLongClick(x / canvas.innerDensity, y / canvas.innerDensity)", "import android.view.View\noverride fun onLongClick(v: View): Boolean {\r\n        onEdit()\r\n        return true\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Feeder/353" : [ "BackupRecoveryPhraseDialog.prepareParams(account)\n--------------------------------------------------\n                        R.id.backupKeyFragment,\n                        BackupKeyModule.prepareParams(account)\r\n                    )\n--------------------------------------------------\n                        R.id.backupLocalFragment,\n                        BackupLocalFragment.prepareParams(account.id)\r\n                    )\n--------------------------------------------------\nFeeSettingsInfoDialog.prepareParams(title, info)\n--------------------------------------------------\nWC2RequestFragment.prepareParams(requestId)\n--------------------------------------------------\nBackupKeyModule.prepareParams(account)\n--------------------------------------------------\nBackupLocalFragment.prepareParams(account.id)\n--------------------------------------------------\nManageAccountsModule.prepareParams(R.id.manageAccountsFragment, false)\n--------------------------------------------------\nManageAccountsModule.prepareParams(R.id.manageAccountsFragment, true)\n--------------------------------------------------\nManageAccountModule.prepareParams(accountViewItem.accountId)\n--------------------------------------------------\nCoinFragment.prepareParams(coinUid, \"market_watchlist\")\n--------------------------------------------------\nMarketTopCoinsFragment.prepareParams(sortingField, topMarket, marketField)\n--------------------------------------------------\nMarketPlatformFragment.prepareParams(it)\n--------------------------------------------------\nTopPlatformsFragment.prepareParams(timeDuration)\n--------------------------------------------------\nBchAddressTypeSelectFragment.prepareParams(coin.uid)\n--------------------------------------------------\nDerivationSelectFragment.prepareParams(coin.uid)\n--------------------------------------------------\nNetworkSelectFragment.prepareParams(coin.uid)\n--------------------------------------------------\nSendEvmSettingsFragment.prepareParams(parentNavGraphId)\n--------------------------------------------------\nSwapApproveConfirmationModule.prepareParams(sendEvmData, swapApproveViewModel.dex.blockchainType)\n--------------------------------------------------\nSwapMainModule.prepareParams(it.wallet.token, R.id.swapTokenSelectFragment)", "import androidx.core.os.bundleOf\nfun prepareParams(title: String, text: String) = bundleOf(\r\n            keyTitle to title,\r\n            keyText to text\r\n        )\nImport(names=[androidx, core, os, bundleOf], wildcard=false, alias=null)" ],
  "MaterialFiles/1105" : [ "view?.onLongClick(x / canvas.innerDensity, y / canvas.innerDensity)", "import android.view.View\noverride fun onLongClick(v: View): Boolean {\r\n        onEdit()\r\n        return true\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "fcitx5-android/499" : [ "StringBuilder().select(fields).from(table).join(joins)\n--------------------------------------------------\nStringBuilder().join(joins)", "fun StringBuilder.join(joins: List<Join>): StringBuilder {\r\n        if (joins.isNotEmpty()) {\r\n            append(\"${joins.joinToString(\" \")} \")\r\n        }\r\n        return this\r\n    }" ],
  "Feeder/355" : [ "                    },\n                    textStyle = ColoredTextStyle(\r\n                        color = inputTextColor,\n--------------------------------------------------\n                            singleLine = true,\n                            textStyle = ColoredTextStyle(\r\n                                color = ComposeAppTheme.colors.leah,", "import androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.graphics.Color\nfun ColoredTextStyle(textStyle: TextStyle, color: Color, textAlign: TextAlign? = null): TextStyle {\r\n    return TextStyle(\r\n        color = color,\r\n        fontWeight = textStyle.fontWeight,\r\n        fontSize = textStyle.fontSize,\r\n        fontStyle = textStyle.fontStyle,\r\n        textAlign = textAlign\r\n    )\r\n}\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.style.TextAlign" ],
  "Iconify/198" : [ "setupColorPreference(R.string.p_theme_color, themeColor.pickerColor, ColorPickerAdapter.Palette.COLORS, REQUEST_COLOR_PICKER)\n--------------------------------------------------\nsetupColorPreference(R.string.p_theme_accent, themeAccent.pickerColor, ColorPickerAdapter.Palette.ACCENTS, REQUEST_ACCENT_PICKER)\n--------------------------------------------------\nsetupColorPreference(R.string.p_theme_launcher, launcher.pickerColor, ColorPickerAdapter.Palette.LAUNCHERS, REQUEST_LAUNCHER_PICKER)", "import org.tasks.dialogs.ColorPickerAdapter\nimport org.tasks.dialogs.ColorPalettePicker.Companion.newColorPalette\nimport org.tasks.R\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nprivate fun setupColorPreference(\r\n        @StringRes prefId: Int,\r\n        color: Int,\r\n        palette: ColorPickerAdapter.Palette,\r\n        requestCode: Int\r\n    ) {\r\n        tintColorPreference(prefId, color)\r\n        findPreference(prefId).setOnPreferenceClickListener {\r\n            newColorPalette(this, requestCode, color, palette)\r\n                .show(parentFragmentManager, FRAG_TAG_COLOR_PICKER)\r\n            false\r\n        }\r\n    }\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)\nImport(names=[org, tasks, dialogs, ColorPalettePicker, Companion, newColorPalette], wildcard=false, alias=null)\nImport(names=[org, tasks, dialogs, ColorPickerAdapter], wildcard=false, alias=null)" ],
  "Iconify/194" : [ "", "import org.tasks.preferences.Preferences\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        childFragmentManager.setFilterPickerResultListener(this) {\r\n            widgetPreferences.setFilter(defaultFilterProvider.getFilterPreferenceValue(it))\r\n            updateFilter()\r\n        }\r\n    }\nimport android.os.Bundle\nimport androidx.preference.Preference\nimport com.todoroo.astrid.api.Filter\nimport org.tasks.R\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.preferences.Preferences" ],
  "VinylMusicPlayer/611" : [ "@Override\r\nprotected void onResume() {\r\n    try {\r\n        super.onResume();\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"resuming main activity\");\r\n    }\r\n    // check if restart activity\r\n    if (isRestartActivitySet()) {\r\n        // restart and exit\r\n        restartActivity();\r\n    }\r\n}\n--------------------------------------------------\n/*\r\n        Custom methods\r\n     */\r\npublic void changeDatabase(@NonNull DatabaseMetadata database) {\r\n    // Reuse existing metadata, if found.\r\n    DatabaseMetadata existing = mDatabases.get().get(database.localPath);\r\n    if (existing != null) {\r\n        Timber.v(\"Existing database found. Reusing metadata.\");\r\n        database = existing;\r\n    }\r\n    try {\r\n        new MmxDatabaseUtils(this).useDatabase(database);\r\n    } catch (Exception e) {\r\n        if (e instanceof IllegalArgumentException) {\r\n            Timber.w(e.getMessage());\r\n        } else {\r\n            Timber.e(e, \"changing the database\");\r\n        }\r\n        return;\r\n    }\r\n    // Refresh the recent files list.\r\n    getDatabases().load();\r\n    setRestartActivity(true);\r\n    restartActivity();\r\n}\n--------------------------------------------------\n", "import com.money.manager.ex.home.MainActivity;\r\nimport com.money.manager.ex.home.MainActivity\nimport com.money.manager.ex.R\nprivate void restartActivity() {\r\n    MainActivity.setRestartActivity(true);\r\n    getActivity().recreate();\r\n}" ],
  "VinylMusicPlayer/610" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "Trail-Sense/1448" : [ "{\n        super.onResume()\r\n        if (currentNightMode != nightMode || currentPro != inventory.hasPro) {\n--------------------------------------------------\n{\n        super.onResume()\r\n        if (showKeyboard) {\n--------------------------------------------------\nsuper.onResume()\n--------------------------------------------------\nmap.onResume()", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        updateSort()\r\n    }\nimport org.tasks.R" ],
  "Trail-Sense/1445" : [ "= returnSelectedTime(morning)\n--------------------------------------------------\n= returnSelectedTime(afternoon)\n--------------------------------------------------\n= returnSelectedTime(evening)\n--------------------------------------------------\n= returnSelectedTime(night)\n--------------------------------------------------\n= returnSelectedTime(customTime)\n--------------------------------------------------\n                val timestamp = data!!.getLongExtra(MyTimePickerDialog.EXTRA_TIMESTAMP, today.millis)\n                returnSelectedTime(newDateTime(timestamp).millisOfDay + 1000)\r\n            } else {\n--------------------------------------------------\nreturnSelectedTime(newDateTime(timestamp).millisOfDay + 1000)", "private fun returnSelectedTime(millisOfDay: Int) {\r\n        val day = when {\r\n            selectedDay == DUE_TIME -> DUE_DATE\r\n            selectedDay != 0L -> selectedDay\r\n            today.withMillisOfDay(millisOfDay).isAfterNow -> today.millis\r\n            else -> today.plusDays(1).millis\r\n        }\r\n        returnDate(day = day, time = millisOfDay)\r\n    }" ],
  "Trail-Sense/1446" : [ "        }\n        uniswapInfo?.deadline?.let {\r\n            otherViewItems.add(\n--------------------------------------------------\n                val subscriptions = marketKit.subscriptionsSingle(addresses).await()\n                val address = subscriptions.maxByOrNull { it.deadline }?.address ?: throw NoSubscription()\r\n", "import io.horizontalsystems.uniswapkit.models.TradeOptions\nimport io.horizontalsystems.bankwallet.core.providers.Translator\nimport io.horizontalsystems.bankwallet.R\nfun deadline(ttl: Long): String? {\r\n        val defaultTradeOptions = TradeOptions()\r\n        return if (ttl == defaultTradeOptions.ttl) {\r\n            null\r\n        } else {\r\n            Translator.getString(R.string.Duration_Minutes, ttl / 60)\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, core, providers, Translator], wildcard=false, alias=null)\nImport(names=[io, horizontalsystems, uniswapkit, models, TradeOptions], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/605" : [ "@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (requestCode == REQUEST_CODE_CAMERA) {\r\n        if (resultCode == RESULT_OK) {\r\n            final Intent intent = new Intent();\r\n            intent.setData(uri);\r\n            setResult(RESULT_OK, intent);\r\n        }\r\n        finish();\r\n    } else {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n}\n--------------------------------------------------\nprivate void sendResult(DialogInterface d, int... i) {\r\n    Intent data = new Intent();\r\n    data.putExtra(EXTRA_GEOFENCE, (Parcelable) toGeofence());\r\n    getTargetFragment().onActivityResult(getTargetRequestCode(), RESULT_OK, data);\r\n    dismiss();\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    if (requestCode == REQUEST_CODE_CAMERA) {\r\n        if (resultCode == RESULT_OK) {\r\n            final Intent intent = new Intent();\r\n            intent.setData(uri);\r\n            setResult(RESULT_OK, intent);\r\n        }\r\n        finish();\r\n    } else {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n}" ],
  "Trail-Sense/1449" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/607" : [ "@Override\r\npublic boolean onNavigateUp() {\r\n    onBackPressed();\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            break;\r\n        case R.id.menu_gallery_share:\r\n            shareMedia();\r\n            break;\r\n        case R.id.menu_gallery:\r\n            viewMedia();\r\n            break;\r\n        default:\r\n            LogDelegate.e(\"Wrong element choosen: \" + item.getItemId());\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment\n@Override\r\npublic void onBackPressed() {\r\n    if (!backStack.isEmpty()) {\r\n        replaceFragment(backStack.remove(backStack.size() - 1));\r\n    } else {\r\n        super.onBackPressed();\r\n    }\r\n}" ],
  "VinylMusicPlayer/602" : [ "@Override\r\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    View root = inflater.inflate(R.layout.fragment_subscriptions, container, false);\r\n    toolbar = root.findViewById(R.id.toolbar);\r\n    toolbar.setOnMenuItemClickListener(this);\r\n    toolbar.setOnLongClickListener(v -> {\r\n        subscriptionRecycler.scrollToPosition(5);\r\n        subscriptionRecycler.post(() -> subscriptionRecycler.smoothScrollToPosition(0));\r\n        return false;\r\n    });\r\n    displayUpArrow = getParentFragmentManager().getBackStackEntryCount() != 0;\r\n    if (savedInstanceState != null) {\r\n        displayUpArrow = savedInstanceState.getBoolean(KEY_UP_ARROW);\r\n    }\r\n    ((MainActivity) getActivity()).setupToolbarToggle(toolbar, displayUpArrow);\r\n    toolbar.inflateMenu(R.menu.subscriptions);\r\n    for (int i = 0; i < COLUMN_CHECKBOX_IDS.length; i++) {\r\n        // Do this in Java to localize numbers\r\n        toolbar.getMenu().findItem(COLUMN_CHECKBOX_IDS[i]).setTitle(String.format(Locale.getDefault(), \"%d\", i + MIN_NUM_COLUMNS));\r\n    }\r\n    refreshToolbarState();\r\n    if (getArguments() != null) {\r\n        displayedFolder = getArguments().getString(ARGUMENT_FOLDER, null);\r\n        if (displayedFolder != null) {\r\n            toolbar.setTitle(displayedFolder);\r\n        }\r\n    }\r\n    subscriptionRecycler = root.findViewById(R.id.subscriptions_grid);\r\n    subscriptionRecycler.addItemDecoration(new SubscriptionsRecyclerAdapter.GridDividerItemDecorator());\r\n    registerForContextMenu(subscriptionRecycler);\r\n    subscriptionRecycler.addOnScrollListener(new LiftOnScrollListener(root.findViewById(R.id.appbar)));\r\n    subscriptionAdapter = new SubscriptionsRecyclerAdapter((MainActivity) getActivity()) {\r\n\r\n        @Override\r\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {\r\n            super.onCreateContextMenu(menu, v, menuInfo);\r\n            MenuItemUtils.setOnClickListeners(menu, SubscriptionFragment.this::onContextItemSelected);\r\n        }\r\n    };\r\n    setColumnNumber(prefs.getInt(PREF_NUM_COLUMNS, getDefaultNumOfColumns()));\r\n    subscriptionAdapter.setOnSelectModeListener(this);\r\n    subscriptionRecycler.setAdapter(subscriptionAdapter);\r\n    setupEmptyView();\r\n    progressBar = root.findViewById(R.id.progressBar);\r\n    progressBar.setVisibility(View.VISIBLE);\r\n    FloatingActionButton subscriptionAddButton = root.findViewById(R.id.subscriptions_add);\r\n    subscriptionAddButton.setOnClickListener(view -> {\r\n        if (getActivity() instanceof MainActivity) {\r\n            ((MainActivity) getActivity()).loadChildFragment(new AddFeedFragment());\r\n        }\r\n    });\r\n    feedsFilteredMsg = root.findViewById(R.id.feeds_filtered_message);\r\n    feedsFilteredMsg.setOnClickListener((l) -> new SubscriptionsFilterDialog().show(getChildFragmentManager(), \"filter\"));\r\n    swipeRefreshLayout = root.findViewById(R.id.swipeRefresh);\r\n    swipeRefreshLayout.setDistanceToTriggerSync(getResources().getInteger(R.integer.swipe_refresh_distance));\r\n    swipeRefreshLayout.setOnRefreshListener(() -> FeedUpdateManager.runOnceOrAsk(requireContext()));\r\n    speedDialView = root.findViewById(R.id.fabSD);\r\n    speedDialView.setOverlayLayout(root.findViewById(R.id.fabSDOverlay));\r\n    speedDialView.inflate(R.menu.nav_feed_action_speeddial);\r\n    speedDialView.setOnChangeListener(new SpeedDialView.OnChangeListener() {\r\n\r\n        @Override\r\n        public boolean onMainActionSelected() {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public void onToggleChanged(boolean isOpen) {\r\n        }\r\n    });\r\n    speedDialView.setOnActionSelectedListener(actionItem -> {\r\n        new FeedMultiSelectActionHandler((MainActivity) getActivity(), subscriptionAdapter.getSelectedItems()).handleAction(actionItem.getId());\r\n        return true;\r\n    });\r\n    return root;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    final int itemId = item.getItemId();\r\n    if (itemId == R.id.refresh_item) {\r\n        FeedUpdateManager.runOnceOrAsk(requireContext());\r\n        return true;\r\n    } else if (itemId == R.id.subscriptions_filter) {\r\n        new SubscriptionsFilterDialog().show(getChildFragmentManager(), \"filter\");\r\n        return true;\r\n    } else if (itemId == R.id.subscriptions_sort) {\r\n        FeedSortDialog.showDialog(requireContext());\r\n        return true;\r\n    } else if (itemId == R.id.subscription_num_columns_2) {\r\n        setColumnNumber(2);\r\n        return true;\r\n    } else if (itemId == R.id.subscription_num_columns_3) {\r\n        setColumnNumber(3);\r\n        return true;\r\n    } else if (itemId == R.id.subscription_num_columns_4) {\r\n        setColumnNumber(4);\r\n        return true;\r\n    } else if (itemId == R.id.subscription_num_columns_5) {\r\n        setColumnNumber(5);\r\n        return true;\r\n    } else if (itemId == R.id.action_search) {\r\n        ((MainActivity) getActivity()).loadChildFragment(SearchFragment.newInstance());\r\n        return true;\r\n    } else if (itemId == R.id.action_statistics) {\r\n        ((MainActivity) getActivity()).loadChildFragment(new StatisticsFragment());\r\n        return true;\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\n", "import androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport de.danoeh.antennapod.R;\r\nimport de.danoeh.antennapod.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.GridLayoutManager\nimport android.view.View\nimport android.content.Context\nprivate void setColumnNumber(int columns) {\r\n    GridLayoutManager gridLayoutManager = new GridLayoutManager(getContext(), columns, RecyclerView.VERTICAL, false);\r\n    subscriptionAdapter.setColumnCount(columns);\r\n    subscriptionRecycler.setLayoutManager(gridLayoutManager);\r\n    prefs.edit().putInt(PREF_NUM_COLUMNS, columns).apply();\r\n    refreshToolbarState();\r\n}" ],
  "VinylMusicPlayer/603" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}" ],
  "MaterialFiles/1114" : [ "amountType.toggle()\n--------------------------------------------------\n                                    modifier = Modifier.padding(horizontal = 16.dp),\n                                    onClick = { viewModel.toggle(wallet) }\r\n                                ) {\n--------------------------------------------------\n                                        onCheckedChange = {\n                                            viewModel.toggle(wallet)\r\n                                        },", "fun toggle() {\r\n        if (toggleAvailable) {\r\n            amountType = amountType.toggle()\r\n        }\r\n    }" ],
  "MaterialFiles/1116" : [ "updateSnackbar(child, dependency)", "import org.videolan.tools.dp\nimport com.google.android.material.snackbar.Snackbar\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport android.view.View\nimport android.view.Gravity\nprivate fun updateSnackbar(child: View, view: View) {\r\n        if (view.layoutParams is CoordinatorLayout.LayoutParams) {\r\n            val params = view.layoutParams as CoordinatorLayout.LayoutParams\r\n\r\n            if (params.anchorId != child.id) {\r\n                params.anchorId = child.id\r\n                params.anchorGravity = Gravity.TOP\r\n                params.gravity = Gravity.TOP\r\n                params.bottomMargin = 8.dp\r\n                view.layoutParams = params\r\n            }\r\n        }\r\n    }\nImport(names=[android, view, Gravity], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, coordinatorlayout, widget, CoordinatorLayout], wildcard=false, alias=null)" ],
  "Trail-Sense/1450" : [ "@Override\r\npublic void lockSwipeRightToGoBack() {\r\n    if (mSliderPanel != null) {\r\n        mSliderPanel.lock();\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void lockSwipeRightToGoBack() {\r\n    if (mSliderPanel != null) {\r\n        mSliderPanel.lock();\r\n    }\r\n}\n--------------------------------------------------\n", "public void lock() {\r\n    dragHelper.abort();\r\n    isLocked = true;\r\n}" ],
  "MaterialFiles/1131" : [ "updateSnackbar(child, dependency)", "import org.videolan.tools.dp\nimport com.google.android.material.snackbar.Snackbar\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport android.view.View\nimport android.view.Gravity\nprivate fun updateSnackbar(child: View, view: View) {\r\n        if (view.layoutParams is CoordinatorLayout.LayoutParams) {\r\n            val params = view.layoutParams as CoordinatorLayout.LayoutParams\r\n\r\n            if (params.anchorId != child.id) {\r\n                params.anchorId = child.id\r\n                params.anchorGravity = Gravity.TOP\r\n                params.gravity = Gravity.TOP\r\n                params.bottomMargin = 8.dp\r\n                view.layoutParams = params\r\n            }\r\n        }\r\n    }\nImport(names=[android, view, Gravity], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, coordinatorlayout, widget, CoordinatorLayout], wildcard=false, alias=null)" ],
  "Trail-Sense/1451" : [ "run {\n    addNextIntent(appLaunchIntent)\n    addNextIntent(Intent(context, EpisodesActivity::class.java).putExtra(EpisodesActivity.EXTRA_LONG_EPISODE_ID, episodeId))\n    startActivities()\n}\n--------------------------------------------------\nRemoveHexagonAccountTask(requireContext()).run()\n--------------------------------------------------\nimportTask.run()\n--------------------------------------------------\ndataLibTask.run()\n--------------------------------------------------\nrun {\n    ActionsHelper.populateActions(layoutInflater, theme, binding.containerMovieActions, actions)\n}\n--------------------------------------------------\nnotificationService.run()\n--------------------------------------------------\nrun {\n    if (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) {\n        setItemChecked(position)\n    }\n}\n--------------------------------------------------\nrun {\n    showId = getLong(ARG_SHOW_ID)\n    episodeReleaseTime = getLong(ARG_EPISODE_RELEASE_TIME)\n    episodeNumber = getInt(ARG_EPISODE_NUMBER)\n}\n--------------------------------------------------\narguments?.run {\n    showId = getLong(ARG_LONG_SHOW_ROW_ID)\n}\n--------------------------------------------------\nrun {\n    isAppearanceLightStatusBars = isLightStatusBar\n    isAppearanceLightNavigationBars = isLightNavigationBar\n}", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.sync.withPermit\nimport kotlinx.coroutines.sync.Semaphore\nimport kotlinx.coroutines.Dispatchers\nimport android.content.Context\nsuspend fun run() {\r\n            withContext(Dispatchers.IO) {\r\n                removeJobSemaphore.withPermit {\r\n                    val result = doInBackground()\r\n                    onPostExecute(result)\r\n                }\r\n            }\r\n        }\nImport(names=[kotlinx, coroutines, sync, withPermit], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/1455" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "MaterialFiles/1129" : [ "@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    Bitmap cloud = BitmapFactory.decodeResource(getResources(), R.drawable.splash_logo);\r\n    setTaskDescription(new ActivityManager.TaskDescription(getResources().getString(R.string.app_name), cloud, 0xff0b2e60));\r\n    requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n    try {\r\n        setContentView(R.layout.activity_login);\r\n    } catch (Exception e) {\r\n        Toast.makeText(this, \"Unable to load resources required for this device configuration.  Please reinstall the app from the Play Store or install the correct APKs for this device configuration.\", Toast.LENGTH_LONG).show();\r\n        finish();\r\n        return;\r\n    }\r\n    loading = findViewById(R.id.loading);\r\n    connecting = findViewById(R.id.connecting);\r\n    connectingMsg = findViewById(R.id.connectingMsg);\r\n    progressBar = findViewById(R.id.connectingProgress);\r\n    loginHint = findViewById(R.id.loginHint);\r\n    signupHint = findViewById(R.id.signupHint);\r\n    hostHint = findViewById(R.id.hostHint);\r\n    login = findViewById(R.id.login);\r\n    name = findViewById(R.id.name);\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"name\"))\r\n        name.setText(savedInstanceState.getString(\"name\"));\r\n    email = findViewById(R.id.email);\r\n    if (BuildConfig.ENTERPRISE)\r\n        email.setHint(R.string.email_enterprise);\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"email\"))\r\n        email.setText(savedInstanceState.getString(\"email\"));\r\n    password = findViewById(R.id.password);\r\n    password.setOnEditorActionListener(new OnEditorActionListener() {\r\n\r\n        public boolean onEditorAction(TextView exampleView, int actionId, KeyEvent event) {\r\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                login.post(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        login();\r\n                    }\r\n                });\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"password\"))\r\n        password.setText(savedInstanceState.getString(\"password\"));\r\n    host = findViewById(R.id.host);\r\n    if (BuildConfig.ENTERPRISE)\r\n        host.setText(NetworkConnection.IRCCLOUD_HOST);\r\n    else\r\n        host.setVisibility(View.GONE);\r\n    host.setOnEditorActionListener(new OnEditorActionListener() {\r\n\r\n        public boolean onEditorAction(TextView exampleView, int actionId, KeyEvent event) {\r\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                login.post(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        login();\r\n                    }\r\n                });\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"host\"))\r\n        host.setText(savedInstanceState.getString(\"host\"));\r\n    else\r\n        host.setText(getSharedPreferences(\"prefs\", 0).getString(\"host\", BuildConfig.HOST));\r\n    if (host.getText().toString().equals(\"api.irccloud.com\") || host.getText().toString().equals(\"www.irccloud.com\"))\r\n        host.setText(\"\");\r\n    loginBtn = findViewById(R.id.loginBtn);\r\n    loginBtn.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            login.post(new Runnable() {\r\n\r\n                @Override\r\n                public void run() {\r\n                    if (auth_url != null) {\r\n                        Intent i = new Intent(LoginActivity.this, SAMLAuthActivity.class);\r\n                        i.putExtra(\"auth_url\", auth_url);\r\n                        i.putExtra(\"title\", loginBtn.getText().toString());\r\n                        startActivityForResult(i, REQUEST_SAML);\r\n                    } else {\r\n                        login();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    loginBtn.setFocusable(true);\r\n    loginBtn.requestFocus();\r\n    sendAccessLinkBtn = findViewById(R.id.sendAccessLink);\r\n    sendAccessLinkBtn.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            new ResetPasswordTask().execute((Void) null);\r\n        }\r\n    });\r\n    nextBtn = findViewById(R.id.nextBtn);\r\n    nextBtn.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            if (host.getText().length() > 0) {\r\n                NetworkConnection.IRCCLOUD_HOST = host.getText().toString();\r\n                trimHost();\r\n                new EnterpriseConfigTask().execute((Void) null);\r\n            }\r\n        }\r\n    });\r\n    TOS = findViewById(R.id.TOS);\r\n    TOS.setMovementMethod(IRCCloudLinkMovementMethod.getInstance());\r\n    forgotPassword = findViewById(R.id.forgotPassword);\r\n    forgotPassword.setOnClickListener(forgotPasswordClickListener);\r\n    enterpriseLearnMore = findViewById(R.id.enterpriseLearnMore);\r\n    enterpriseLearnMore.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            if (isPackageInstalled(\"com.irccloud.android\", LoginActivity.this)) {\r\n                startActivity(getPackageManager().getLaunchIntentForPackage(\"com.irccloud.android\"));\r\n            } else {\r\n                try {\r\n                    IRCCloudLinkMovementMethod.launchBrowser(Uri.parse(\"market://details?id=com.irccloud.android\"), LoginActivity.this);\r\n                } catch (Exception e) {\r\n                    IRCCloudLinkMovementMethod.launchBrowser(Uri.parse(\"https://play.google.com/store/apps/details?id=com.irccloud.android\"), LoginActivity.this);\r\n                }\r\n            }\r\n        }\r\n\r\n        private boolean isPackageInstalled(String packagename, Context context) {\r\n            PackageManager pm = context.getPackageManager();\r\n            try {\r\n                pm.getPackageInfo(packagename, PackageManager.GET_ACTIVITIES);\r\n                return true;\r\n            } catch (NameNotFoundException e) {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n    enterpriseHint = findViewById(R.id.enterpriseHint);\r\n    EnterYourEmail = findViewById(R.id.enterYourEmail);\r\n    signupHint.setOnClickListener(signupHintClickListener);\r\n    loginHint.setOnClickListener(loginHintClickListener);\r\n    signupBtn = findViewById(R.id.signupBtn);\r\n    signupBtn.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            login();\r\n        }\r\n    });\r\n    TextView version = findViewById(R.id.version);\r\n    try {\r\n        version.setText(\"Version \" + getPackageManager().getPackageInfo(getPackageName(), 0).versionName);\r\n    } catch (NameNotFoundException e) {\r\n        version.setVisibility(View.GONE);\r\n    }\r\n    Typeface SourceSansProRegular = ResourcesCompat.getFont(IRCCloudApplication.getInstance().getApplicationContext(), R.font.sourcesansproregular);\r\n    Typeface SourceSansProLightItalic = ResourcesCompat.getFont(IRCCloudApplication.getInstance().getApplicationContext(), R.font.sourcesansprolightit);\r\n    for (int i = 0; i < signupHint.getChildCount(); i++) {\r\n        View v = signupHint.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface(SourceSansProRegular);\r\n        }\r\n    }\r\n    for (int i = 0; i < loginHint.getChildCount(); i++) {\r\n        View v = loginHint.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface(SourceSansProRegular);\r\n        }\r\n    }\r\n    LinearLayout IRCCloud = findViewById(R.id.IRCCloud);\r\n    for (int i = 0; i < IRCCloud.getChildCount(); i++) {\r\n        View v = IRCCloud.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface(SourceSansProRegular);\r\n        }\r\n    }\r\n    notAProblem = findViewById(R.id.notAProblem);\r\n    for (int i = 0; i < notAProblem.getChildCount(); i++) {\r\n        View v = notAProblem.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface((i == 0) ? SourceSansProRegular : SourceSansProLightItalic);\r\n        }\r\n    }\r\n    loginSignupHint = findViewById(R.id.loginSignupHint);\r\n    for (int i = 0; i < loginSignupHint.getChildCount(); i++) {\r\n        View v = loginSignupHint.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface(SourceSansProRegular);\r\n            v.setOnClickListener((i == 0) ? loginHintClickListener : signupHintClickListener);\r\n        }\r\n    }\r\n    name.setTypeface(SourceSansProRegular);\r\n    email.setTypeface(SourceSansProRegular);\r\n    password.setTypeface(SourceSansProRegular);\r\n    host.setTypeface(SourceSansProRegular);\r\n    loginBtn.setTypeface(SourceSansProRegular);\r\n    signupBtn.setTypeface(SourceSansProRegular);\r\n    TOS.setTypeface(SourceSansProRegular);\r\n    EnterYourEmail.setTypeface(SourceSansProRegular);\r\n    hostHint.setTypeface(SourceSansProLightItalic);\r\n    if (BuildConfig.ENTERPRISE) {\r\n        name.setVisibility(View.GONE);\r\n        email.setVisibility(View.GONE);\r\n        password.setVisibility(View.GONE);\r\n        loginBtn.setVisibility(View.GONE);\r\n        signupBtn.setVisibility(View.GONE);\r\n        TOS.setVisibility(View.GONE);\r\n        signupHint.setVisibility(View.GONE);\r\n        loginHint.setVisibility(View.GONE);\r\n        forgotPassword.setVisibility(View.GONE);\r\n        loginSignupHint.setVisibility(View.GONE);\r\n        EnterYourEmail.setVisibility(View.GONE);\r\n        sendAccessLinkBtn.setVisibility(View.GONE);\r\n        notAProblem.setVisibility(View.GONE);\r\n        enterpriseLearnMore.setVisibility(View.VISIBLE);\r\n        enterpriseHint.setVisibility(View.VISIBLE);\r\n        host.setVisibility(View.VISIBLE);\r\n        nextBtn.setVisibility(View.VISIBLE);\r\n        hostHint.setVisibility(View.VISIBLE);\r\n        host.requestFocus();\r\n    }\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"signup\") && savedInstanceState.getBoolean(\"signup\")) {\r\n        signupHintClickListener.onClick(null);\r\n    }\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"login\") && savedInstanceState.getBoolean(\"login\")) {\r\n        loginHintClickListener.onClick(null);\r\n    }\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"forgotPassword\") && savedInstanceState.getBoolean(\"forgotPassword\")) {\r\n        forgotPasswordClickListener.onClick(null);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    Bitmap cloud = BitmapFactory.decodeResource(getResources(), R.drawable.splash_logo);\r\n    setTaskDescription(new ActivityManager.TaskDescription(getResources().getString(R.string.app_name), cloud, 0xff0b2e60));\r\n    requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n    try {\r\n        setContentView(R.layout.activity_login);\r\n    } catch (Exception e) {\r\n        Toast.makeText(this, \"Unable to load resources required for this device configuration.  Please reinstall the app from the Play Store or install the correct APKs for this device configuration.\", Toast.LENGTH_LONG).show();\r\n        finish();\r\n        return;\r\n    }\r\n    loading = findViewById(R.id.loading);\r\n    connecting = findViewById(R.id.connecting);\r\n    connectingMsg = findViewById(R.id.connectingMsg);\r\n    progressBar = findViewById(R.id.connectingProgress);\r\n    loginHint = findViewById(R.id.loginHint);\r\n    signupHint = findViewById(R.id.signupHint);\r\n    hostHint = findViewById(R.id.hostHint);\r\n    login = findViewById(R.id.login);\r\n    name = findViewById(R.id.name);\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"name\"))\r\n        name.setText(savedInstanceState.getString(\"name\"));\r\n    email = findViewById(R.id.email);\r\n    if (BuildConfig.ENTERPRISE)\r\n        email.setHint(R.string.email_enterprise);\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"email\"))\r\n        email.setText(savedInstanceState.getString(\"email\"));\r\n    password = findViewById(R.id.password);\r\n    password.setOnEditorActionListener(new OnEditorActionListener() {\r\n\r\n        public boolean onEditorAction(TextView exampleView, int actionId, KeyEvent event) {\r\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                login.post(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        login();\r\n                    }\r\n                });\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"password\"))\r\n        password.setText(savedInstanceState.getString(\"password\"));\r\n    host = findViewById(R.id.host);\r\n    if (BuildConfig.ENTERPRISE)\r\n        host.setText(NetworkConnection.IRCCLOUD_HOST);\r\n    else\r\n        host.setVisibility(View.GONE);\r\n    host.setOnEditorActionListener(new OnEditorActionListener() {\r\n\r\n        public boolean onEditorAction(TextView exampleView, int actionId, KeyEvent event) {\r\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                login.post(new Runnable() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        login();\r\n                    }\r\n                });\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"host\"))\r\n        host.setText(savedInstanceState.getString(\"host\"));\r\n    else\r\n        host.setText(getSharedPreferences(\"prefs\", 0).getString(\"host\", BuildConfig.HOST));\r\n    if (host.getText().toString().equals(\"api.irccloud.com\") || host.getText().toString().equals(\"www.irccloud.com\"))\r\n        host.setText(\"\");\r\n    loginBtn = findViewById(R.id.loginBtn);\r\n    loginBtn.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            login.post(new Runnable() {\r\n\r\n                @Override\r\n                public void run() {\r\n                    if (auth_url != null) {\r\n                        Intent i = new Intent(LoginActivity.this, SAMLAuthActivity.class);\r\n                        i.putExtra(\"auth_url\", auth_url);\r\n                        i.putExtra(\"title\", loginBtn.getText().toString());\r\n                        startActivityForResult(i, REQUEST_SAML);\r\n                    } else {\r\n                        login();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    loginBtn.setFocusable(true);\r\n    loginBtn.requestFocus();\r\n    sendAccessLinkBtn = findViewById(R.id.sendAccessLink);\r\n    sendAccessLinkBtn.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            new ResetPasswordTask().execute((Void) null);\r\n        }\r\n    });\r\n    nextBtn = findViewById(R.id.nextBtn);\r\n    nextBtn.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            if (host.getText().length() > 0) {\r\n                NetworkConnection.IRCCLOUD_HOST = host.getText().toString();\r\n                trimHost();\r\n                new EnterpriseConfigTask().execute((Void) null);\r\n            }\r\n        }\r\n    });\r\n    TOS = findViewById(R.id.TOS);\r\n    TOS.setMovementMethod(IRCCloudLinkMovementMethod.getInstance());\r\n    forgotPassword = findViewById(R.id.forgotPassword);\r\n    forgotPassword.setOnClickListener(forgotPasswordClickListener);\r\n    enterpriseLearnMore = findViewById(R.id.enterpriseLearnMore);\r\n    enterpriseLearnMore.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            if (isPackageInstalled(\"com.irccloud.android\", LoginActivity.this)) {\r\n                startActivity(getPackageManager().getLaunchIntentForPackage(\"com.irccloud.android\"));\r\n            } else {\r\n                try {\r\n                    IRCCloudLinkMovementMethod.launchBrowser(Uri.parse(\"market://details?id=com.irccloud.android\"), LoginActivity.this);\r\n                } catch (Exception e) {\r\n                    IRCCloudLinkMovementMethod.launchBrowser(Uri.parse(\"https://play.google.com/store/apps/details?id=com.irccloud.android\"), LoginActivity.this);\r\n                }\r\n            }\r\n        }\r\n\r\n        private boolean isPackageInstalled(String packagename, Context context) {\r\n            PackageManager pm = context.getPackageManager();\r\n            try {\r\n                pm.getPackageInfo(packagename, PackageManager.GET_ACTIVITIES);\r\n                return true;\r\n            } catch (NameNotFoundException e) {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n    enterpriseHint = findViewById(R.id.enterpriseHint);\r\n    EnterYourEmail = findViewById(R.id.enterYourEmail);\r\n    signupHint.setOnClickListener(signupHintClickListener);\r\n    loginHint.setOnClickListener(loginHintClickListener);\r\n    signupBtn = findViewById(R.id.signupBtn);\r\n    signupBtn.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            login();\r\n        }\r\n    });\r\n    TextView version = findViewById(R.id.version);\r\n    try {\r\n        version.setText(\"Version \" + getPackageManager().getPackageInfo(getPackageName(), 0).versionName);\r\n    } catch (NameNotFoundException e) {\r\n        version.setVisibility(View.GONE);\r\n    }\r\n    Typeface SourceSansProRegular = ResourcesCompat.getFont(IRCCloudApplication.getInstance().getApplicationContext(), R.font.sourcesansproregular);\r\n    Typeface SourceSansProLightItalic = ResourcesCompat.getFont(IRCCloudApplication.getInstance().getApplicationContext(), R.font.sourcesansprolightit);\r\n    for (int i = 0; i < signupHint.getChildCount(); i++) {\r\n        View v = signupHint.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface(SourceSansProRegular);\r\n        }\r\n    }\r\n    for (int i = 0; i < loginHint.getChildCount(); i++) {\r\n        View v = loginHint.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface(SourceSansProRegular);\r\n        }\r\n    }\r\n    LinearLayout IRCCloud = findViewById(R.id.IRCCloud);\r\n    for (int i = 0; i < IRCCloud.getChildCount(); i++) {\r\n        View v = IRCCloud.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface(SourceSansProRegular);\r\n        }\r\n    }\r\n    notAProblem = findViewById(R.id.notAProblem);\r\n    for (int i = 0; i < notAProblem.getChildCount(); i++) {\r\n        View v = notAProblem.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface((i == 0) ? SourceSansProRegular : SourceSansProLightItalic);\r\n        }\r\n    }\r\n    loginSignupHint = findViewById(R.id.loginSignupHint);\r\n    for (int i = 0; i < loginSignupHint.getChildCount(); i++) {\r\n        View v = loginSignupHint.getChildAt(i);\r\n        if (v instanceof TextView) {\r\n            ((TextView) v).setTypeface(SourceSansProRegular);\r\n            v.setOnClickListener((i == 0) ? loginHintClickListener : signupHintClickListener);\r\n        }\r\n    }\r\n    name.setTypeface(SourceSansProRegular);\r\n    email.setTypeface(SourceSansProRegular);\r\n    password.setTypeface(SourceSansProRegular);\r\n    host.setTypeface(SourceSansProRegular);\r\n    loginBtn.setTypeface(SourceSansProRegular);\r\n    signupBtn.setTypeface(SourceSansProRegular);\r\n    TOS.setTypeface(SourceSansProRegular);\r\n    EnterYourEmail.setTypeface(SourceSansProRegular);\r\n    hostHint.setTypeface(SourceSansProLightItalic);\r\n    if (BuildConfig.ENTERPRISE) {\r\n        name.setVisibility(View.GONE);\r\n        email.setVisibility(View.GONE);\r\n        password.setVisibility(View.GONE);\r\n        loginBtn.setVisibility(View.GONE);\r\n        signupBtn.setVisibility(View.GONE);\r\n        TOS.setVisibility(View.GONE);\r\n        signupHint.setVisibility(View.GONE);\r\n        loginHint.setVisibility(View.GONE);\r\n        forgotPassword.setVisibility(View.GONE);\r\n        loginSignupHint.setVisibility(View.GONE);\r\n        EnterYourEmail.setVisibility(View.GONE);\r\n        sendAccessLinkBtn.setVisibility(View.GONE);\r\n        notAProblem.setVisibility(View.GONE);\r\n        enterpriseLearnMore.setVisibility(View.VISIBLE);\r\n        enterpriseHint.setVisibility(View.VISIBLE);\r\n        host.setVisibility(View.VISIBLE);\r\n        nextBtn.setVisibility(View.VISIBLE);\r\n        hostHint.setVisibility(View.VISIBLE);\r\n        host.requestFocus();\r\n    }\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"signup\") && savedInstanceState.getBoolean(\"signup\")) {\r\n        signupHintClickListener.onClick(null);\r\n    }\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"login\") && savedInstanceState.getBoolean(\"login\")) {\r\n        loginHintClickListener.onClick(null);\r\n    }\r\n    if (savedInstanceState != null && savedInstanceState.containsKey(\"forgotPassword\") && savedInstanceState.getBoolean(\"forgotPassword\")) {\r\n        forgotPasswordClickListener.onClick(null);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (drawerLayout != null) {\r\n        drawerLayout.closeDrawers();\r\n    }\r\n}" ],
  "QuickNovel/10" : [ "build()\n--------------------------------------------------\nbuilder().tag(tag).build()\n--------------------------------------------------\nbuilder().tag(\"activity\").build()\n--------------------------------------------------\nbuilder().tag(\"discovery_activity_sample\").build()\n--------------------------------------------------\nbuilder().tag(\"category\").build()\n--------------------------------------------------\nbuilder().tag(\"category\" + sort.refTagSuffix()).build()\n--------------------------------------------------\nbuilder().tag(\"category_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"city\").build()\n--------------------------------------------------\nbuilder().tag(\"android_project_collection_tag_$tagId\").build()\n--------------------------------------------------\nbuilder().tag(\"dashboard\").build()\n--------------------------------------------------\nbuilder().tag(\"android_deep_link\").build()\n--------------------------------------------------\nbuilder().tag(\"discovery\").build()\n--------------------------------------------------\nbuilder().tag(\"pledge_info\").build()\n--------------------------------------------------\nbuilder().tag(\"android_project_share\").build()\n--------------------------------------------------\nbuilder().tag(\"push\").build()\n--------------------------------------------------\nbuilder().tag(\"recommended\").build()\n--------------------------------------------------\nbuilder().tag(\"recommended\" + sort.refTagSuffix()).build()\n--------------------------------------------------\nbuilder().tag(\"search\").build()\n--------------------------------------------------\nbuilder().tag(\"search_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"search_popular_title_view\").build()\n--------------------------------------------------\nbuilder().tag(\"search_popular_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"social\").build()\n--------------------------------------------------\nbuilder().tag(\"survey\").build()\n--------------------------------------------------\nbuilder().tag(\"thanks\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_facebook_share\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_twitter_share\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_share\").build()\n--------------------------------------------------\nbuilder().tag(\"update\").build()\n--------------------------------------------------\nbuilder().tag(\"android_update_share\").build()\n--------------------------------------------------\npayload.toBuilder().traits(uniqueTraits).build()\n--------------------------------------------------\nRelativeDateTimeOptions.builder().build()\n--------------------------------------------------\nNumberOptions.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().category(it).build()\n--------------------------------------------------\nNavigationDrawerData.Section.builder().rows(it.first).expanded(it.second).build()\n--------------------------------------------------\nNavigationDrawerData.Section.Row.builder().params(it).build()\n--------------------------------------------------\nDiscoveryParams.builder().recommended(true).backed(-1).build()\n--------------------------------------------------\nDiscoveryParams.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().staffPicks(true).build()\n--------------------------------------------------\nDiscoveryParams.builder().starred(1).build()\n--------------------------------------------------\nNavigationDrawerData.Section.builder().rows(it).build()\n--------------------------------------------------\nNumberOptions.builder().precision(precision).build()\n--------------------------------------------------\nuriBuilder.build()\n--------------------------------------------------\nbuilder.build()\n--------------------------------------------------\nConstraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()\n--------------------------------------------------\nAccessTokenEnvelope.builder().user(user).accessToken(token).build()\n--------------------------------------------------\nActivityEnvelope.UrlsEnvelope.ApiEnvelope.builder().moreActivities(\"\").build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_BACKING).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_FAILURE).project(failedProject()).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_SUCCESS).project(successfulProject()).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_UPDATE).project(project()).user(user()).build()\n--------------------------------------------------\nbacking().toBuilder().status(status).build()\n--------------------------------------------------\ncheckoutData(shippingAmount, totalAmount).toBuilder().id(id).build()\n--------------------------------------------------\nCommentEnvelope.builder().totalCount(0).comments(emptyList()).pageInfoEnvelope(null).build()\n--------------------------------------------------\nconfig().toBuilder().countryCode(\"CA\").build()\n--------------------------------------------------\nconfig().toBuilder().countryCode(\"IT\").build()\n--------------------------------------------------\nconfig().toBuilder().abExperiments(abExperiments).build()\n--------------------------------------------------\nconfig().toBuilder().features(features.toMutableMap()).build()\n--------------------------------------------------\nCreatorDetails.builder().backingsCount(3).launchedProjectsCount(2).build()\n--------------------------------------------------\nbuilder().id(-1L).displayableName(\"\").name(\"\").country(\"\").expandedCountry(\"\").build()\n--------------------------------------------------\nmessageThreadEnvelope().toBuilder().messages(null).build()\n--------------------------------------------------\nbuilder().ed(url).full(url).little(url).med(url).small(url).thumb(url).build()\n--------------------------------------------------\nProjectData.builder().project(project).build()\n--------------------------------------------------\nUrls.builder().web(web).build()\n--------------------------------------------------\nproject.toBuilder().backing(backing).isBacking(true).build()\n--------------------------------------------------\nproject().toBuilder().country(\"GB\").currency(\"GBP\").currencySymbol(\"£\").build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).limit(10).build()\n--------------------------------------------------\nRewardFactory.addOn().toBuilder().remaining(0).limit(0).quantity(1).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).isAvailable(true).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(false).build()\n--------------------------------------------------\nproject().toBuilder().rewards(listOf(rw, rwWithAddOn)).build()\n--------------------------------------------------\nRewardFactory.limitReached().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nproject().toBuilder().name(\"halfwayProject\").goal(100.0).pledged(50.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"allTheWayProject\").goal(100.0).pledged(100.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"doubledGoalProject\").goal(100.0).pledged(200.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"failedProject\").state(Project.STATE_FAILED).build()\n--------------------------------------------------\nproject().toBuilder().name(\"almostCompleteProject\").deadline(DateTime().plusDays(1)).build()\n--------------------------------------------------\nproject().toBuilder().name(\"featuredProject\").featuredAt(DateTime()).build()\n--------------------------------------------------\nproject().toBuilder().name(\"savedProject\").isStarred(true).build()\n--------------------------------------------------\nproject().toBuilder().name(\"staffPickProject\").staffPick(true).build()\n--------------------------------------------------\nproject().toBuilder().rewards(null).build()\n--------------------------------------------------\nenabled().toBuilder().email(false).mobile(false).build()\n--------------------------------------------------\nProjectNotification.Project.builder().id(1L).name(\"SKULL GRAPHIC TEE\").build()\n--------------------------------------------------\nProjectNotification.Urls.Api.builder().notification(\"/url\").build()\n--------------------------------------------------\nProjectNotification.Urls.builder().api(api).build()\n--------------------------------------------------\nReferralAggregateStats.builder().custom(10f).external(15f).internal(20f).build()\n--------------------------------------------------\nRewardStats.builder().backersCount(10).rewardId(1).minimum(5).pledged(10f).build()\n--------------------------------------------------\nbuilder().alert(\"You've received a new push notification\").title(\"Hello\").build()\n--------------------------------------------------\nPushNotificationEnvelope.builder().gcm(gcm).build()\n--------------------------------------------------\nreward().toBuilder().isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().quantity(1).isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().quantity(5).isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nreward().toBuilder().backersCount(100).build()\n--------------------------------------------------\nreward().toBuilder().endsAt(DateTime.now().minusDays(2)).build()\n--------------------------------------------------\nreward().toBuilder().endsAt(DateTime.now().plusDays(2)).build()\n--------------------------------------------------\nrewardsItem().toBuilder().rewardId(rewardId).build()\n--------------------------------------------------\nreward().toBuilder().limit(10).remaining(5).build()\n--------------------------------------------------\nreward().toBuilder().backersCount(0).build()\n--------------------------------------------------\nreward().toBuilder().minimum(country.maxPledge.toDouble()).backersCount(0).build()\n--------------------------------------------------\nSingleLocation.builder().id(IdFactory.id().toLong()).localizedName(localizedLocationName).build()\n--------------------------------------------------\nreward().toBuilder().description(\"\").build()\n--------------------------------------------------\nItemFactory.item().toBuilder().id(itemId).build()\n--------------------------------------------------\nShippingRule.builder().id(1L).cost(30.0).location(LocationFactory.unitedStates()).build()\n--------------------------------------------------\nShippingRule.builder().id(2L).cost(40.0).location(LocationFactory.germany()).build()\n--------------------------------------------------\nShippingRule.builder().id(3L).cost(10.0).location(LocationFactory.mexico()).build()\n--------------------------------------------------\nShippingRule.builder().id(-1L).location(LocationFactory.empty()).cost(-1.0).build()\n--------------------------------------------------\nShippingRulesEnvelope.builder().shippingRules(listOf()).build()\n--------------------------------------------------\nStoredCard.builder().lastFourDigits(\"1234\").resourceId(1234).clientSetupId(\"ClientSetupId\").build()\n--------------------------------------------------\nSurveyResponse.Urls.Web.builder().survey(surveyUrl).build()\n--------------------------------------------------\nSurveyResponse.Urls.builder().web(web).build()\n--------------------------------------------------\ncreator().toBuilder().id(278438049L).build()\n--------------------------------------------------\nproject().toBuilder().creator(creator).build()\n--------------------------------------------------\nUpdate.Urls.Web.builder().update(updatesUrl + \"id\").likes(\"$updatesUrl/likes\").build()\n--------------------------------------------------\nUpdate.Urls.builder().web(web).build()\n--------------------------------------------------\nupdate().toBuilder().isPublic(false).build()\n--------------------------------------------------\nuser().toBuilder().social(true).build()\n--------------------------------------------------\nuser().toBuilder().needsPassword(true).build()\n--------------------------------------------------\nuser().toBuilder().createdProjectsCount(0).memberProjectsCount(10).build()\n--------------------------------------------------\nuser().toBuilder().createdProjectsCount(5).memberProjectsCount(10).build()\n--------------------------------------------------\nuser().toBuilder().location(germany()).build()\n--------------------------------------------------\nuser().toBuilder().location(mexico()).build()\n--------------------------------------------------\nuser().toBuilder().optedOutOfRecommendations(true).build()\n--------------------------------------------------\nproject().toBuilder().slug(param).build()\n--------------------------------------------------\nDiscoverEnvelope.StatsEnvelope.builder().count(10).build()\n--------------------------------------------------\nUpdatesEnvelope.UrlsEnvelope.ApiEnvelope.builder().moreUpdates(\"http://more.updates.please\").build()\n--------------------------------------------------\nuser().toBuilder().build()\n--------------------------------------------------\nAccessTokenEnvelope.builder().user(user().toBuilder().build()).accessToken(\"deadbeef\").build()\n--------------------------------------------------\nuser().toBuilder().name(name).build()\n--------------------------------------------------\nproject.toBuilder().isStarred(true).build()\n--------------------------------------------------\nSurveyResponseFactory.surveyResponse().toBuilder().id(surveyResponseId).build()\n--------------------------------------------------\nproject.toBuilder().isStarred(!project.isStarred()).build()\n--------------------------------------------------\nprojectNotification.toBuilder().email(checked).mobile(checked).build()\n--------------------------------------------------\nbuilder().code(200).message(\"\").build()\n--------------------------------------------------\nproject.toBuilder().isStarred(false).build()\n--------------------------------------------------\nProjectFactory.project().toBuilder().slug(slug).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().isAddOn(true).quantity(2).build()\n--------------------------------------------------\nUser.builder().build()\n--------------------------------------------------\nUrls.builder().build()\n--------------------------------------------------\nUri.parse(webProjectUrl()).buildUpon().scheme(\"https\").build()\n--------------------------------------------------\nProject.builder().build()\n--------------------------------------------------\nApi.builder().build()\n--------------------------------------------------\nItem.builder().build()\n--------------------------------------------------\nLocation.builder().build()\n--------------------------------------------------\nWeb.builder().build()\n--------------------------------------------------\nAvatar.builder().build()\n--------------------------------------------------\nErrorEnvelope.builder().errorMessages(listOf(t.message ?: \"\")).build()\n--------------------------------------------------\nUrlsEnvelope.builder().build()\n--------------------------------------------------\nApiEnvelope.builder().build()\n--------------------------------------------------\ntoBuilder().page(page + 1).build()\n--------------------------------------------------\notherBuilder.build()\n--------------------------------------------------\nbuilder.sort(Sort.MAGIC).build()\n--------------------------------------------------\nbuilder.url(url(initialRequest.url)).build()\n--------------------------------------------------\nrequestBuilder.build()\n--------------------------------------------------\nCancelBackingMutation.builder().backingId(encodeRelayId(backing)).note(note).build()\n--------------------------------------------------\nCheckout.builder().id(decodeRelayId(checkoutPayload?.id())).backing(backing).build()\n--------------------------------------------------\nGetBackingQuery.builder().backingId(backingId).build()\n--------------------------------------------------\nClearUserUnseenActivityMutation.builder().build()\n--------------------------------------------------\nGetProjectUpdatesQuery.builder().cursor(cursor).slug(slug).limit(limit).build()\n--------------------------------------------------\nupdateTransformer(edge?.node()?.fragments()?.post()).toBuilder().build()\n--------------------------------------------------\nGetProjectCommentsQuery.builder().cursor(cursor).slug(slug).limit(limit).build()\n--------------------------------------------------\ncommentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n--------------------------------------------------\nGetProjectUpdateCommentsQuery.builder().cursor(cursor).id(updateId).limit(limit).build()\n--------------------------------------------------\nFetchProjectQuery.builder().slug(slug).build()\n--------------------------------------------------\nGetRootCategoriesQuery.builder().build()\n--------------------------------------------------\nFetchCategoryQuery.builder().categoryParam(categoryParam).build()\n--------------------------------------------------\nDiscoverEnvelope.builder().projects(projects).pageInfoEnvelope(pageInfoEnvelope).build()\n--------------------------------------------------\nGetCommentQuery.builder().commentableId(commentableId).build()\n--------------------------------------------------\nCreatePasswordMutation.builder().password(password).passwordConfirmation(confirmPassword).build()\n--------------------------------------------------\nProjectCreatorDetailsQuery.builder().slug(slug).build()\n--------------------------------------------------\nDeletePaymentSourceMutation.builder().paymentSourceId(paymentSourceId).build()\n--------------------------------------------------\nErroredBackingsQuery.builder().build()\n--------------------------------------------------\nErroredBacking.builder().project(project).build()\n--------------------------------------------------\nGetProjectBackingQuery.builder().slug(slug).build()\n--------------------------------------------------\nGetShippingRulesForRewardIdQuery.builder().rewardId(encodeRelayId(reward)).build()\n--------------------------------------------------\nGetProjectAddOnsQuery.builder().slug(slug).locationId(encodeRelayId(locationId)).build()\n--------------------------------------------------\nWatchProjectMutation.builder().id(encodeRelayId(project)).build()\n--------------------------------------------------\nUnwatchProjectMutation.builder().id(encodeRelayId(project)).build()\n--------------------------------------------------\nUserPaymentsQuery.builder().build()\n--------------------------------------------------\nUpdateUserCurrencyMutation.builder().chosenCurrency(currency).build()\n--------------------------------------------------\nUserPrivacyQuery.builder().build()\n--------------------------------------------------\nUpdateUserEmailMutation.builder().email(email).currentPassword(currentPassword).build()\n--------------------------------------------------\nSendEmailVerificationMutation.builder().build()\n--------------------------------------------------\nProjectFaq.builder().id(id).answer(answer).createdAt(createdAt).question(question).build()\n--------------------------------------------------\nItem.builder().name(name).description(description).id(id).build()\n--------------------------------------------------\nRewardsItem.builder().id(id).itemId(item.id()).item(item).rewardId(0).quantity(quantity).build()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder().minimum(minPledge).build()\n--------------------------------------------------\nWeb.builder().project(url).rewards(\"$url/rewards\").build()\n--------------------------------------------------\nUrls.builder().web(urlsWeb).build()\n--------------------------------------------------\nAvatar.builder().medium(user?.imageUrl()).build()\n--------------------------------------------------\nUser.builder().id(id).name(name).avatar(avatar).chosenCurrency(chosenCurrency).build()\n--------------------------------------------------\nAvatar.builder().medium(post?.author()?.fragments()?.user()?.imageUrl()).build()\n--------------------------------------------------\nUpdate.Urls.Web.builder().update(\"$url/posts/$id\").build()\n--------------------------------------------------\nUpdate.Urls.builder().web(urlsWeb).build()\n--------------------------------------------------\nAvatar.builder().medium(commentFr?.author()?.fragments()?.user()?.imageUrl()).build()\n--------------------------------------------------\nAvatar.builder().medium(backerData?.imageUrl()).build()\n--------------------------------------------------\nUser.builder().id(backerId).name(nameBacker).avatar(avatar).build()\n--------------------------------------------------\nit.toBuilder().quantity(q + 1).build()\n--------------------------------------------------\nVideo.builder().base(base).frame(frame).high(high).hls(hls).build()\n--------------------------------------------------\nShippingRule.builder().cost(cost).location(location).build()\n--------------------------------------------------\nLocation.builder().id(id).country(country).displayableName(displayName).name(name).build()\n--------------------------------------------------\nShippingRulesEnvelope.builder().shippingRules(shippingRulesList).build()\n--------------------------------------------------\nThirdPartyEventItemInput.builder().itemId(it.itemId).itemName(it.itemName).price(it.price).build()\n--------------------------------------------------\nTriggerThirdPartyEventMutation.builder().triggerThirdPartyEventInput(graphInput).build()\n--------------------------------------------------\nenvironment?.build()\n--------------------------------------------------\ngetEnvironment()?.build()\n--------------------------------------------------\nplayerBuilder.build()\n--------------------------------------------------\nbuilder().requestCode(requestCode).resultCode(resultCode).intent(intent).build()\n--------------------------------------------------\nProjectData.builder().build()\n--------------------------------------------------\nReward.builder().build()\n--------------------------------------------------\nbuilder().pledgeFlowContext(pledgeFlowContext).projectData(projectData).reward(reward).build()\n--------------------------------------------------\npledgeDataAndReason.first.projectData().toBuilder().project(reducedProject).build()\n--------------------------------------------------\npledgeDataAndReason.first.toBuilder().projectData(reducedProjectData).build()\n--------------------------------------------------\nImageRequest.Builder(LocalContext.current).data(imageUrl).crossfade(true).build()\n--------------------------------------------------\nRelativeDateTimeOptions.builder().absolute(true).relativeToDateTime(DateTime.now()).build()\n--------------------------------------------------\nAudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()\n--------------------------------------------------\nenvironment().build()\n--------------------------------------------------\nShareLinkContent.Builder().setContentUrl(Uri.parse(shareUrl)).build()\n--------------------------------------------------\npledgeData.toBuilder().addOns(finalList).shippingRule(shippingRule).build()\n--------------------------------------------------\npledgeData.toBuilder().addOns(finalList).build()\n--------------------------------------------------\npledgeData.toBuilder().build()\n--------------------------------------------------\naddOn.toBuilder().quantity(currentSelection[addOn.id()]).build()\n--------------------------------------------------\nit.toBuilder().shippingRules(graphAddOn.shippingRules()).build()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder().minimum(projectData.backing()?.amount() ?: 1.0).build()\n--------------------------------------------------\nit.first.toBuilder().commentCardState(commentCardState?.commentCardStatus ?: 0).build()\n--------------------------------------------------\nit.second.toBuilder().id(id).build()\n--------------------------------------------------\nuser.toBuilder().notifyMobileOfMarketingUpdate(true).build()\n--------------------------------------------------\nOkHttpClient.Builder().build()\n--------------------------------------------------\nRequest.Builder().url(uri.toString()).build()\n--------------------------------------------------\nbuilder().refTagFromIntent(refTag.second).refTagFromCookie(cookieRefTag).project(it.second).build()\n--------------------------------------------------\ndrawerClickParams.params().toBuilder().sort(currentParams).build()\n--------------------------------------------------\np.toBuilder().sort(s).build()\n--------------------------------------------------\nit.first.toBuilder().sort(it.second).build()\n--------------------------------------------------\nDiscoveryParams.builder().sort(DiscoveryParams.Sort.MAGIC).tagId(it).build()\n--------------------------------------------------\nuser.toBuilder().showPublicProfile(!showProfile).build()\n--------------------------------------------------\nMessageThread.builder().build()\n--------------------------------------------------\nthis.toBuilder().alumniNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().artsCultureNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().filmNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().gamesNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().happeningNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().inventNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().musicNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().promoNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().publishingNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().weeklyNewsletter(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfBackings(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfComments(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfCreatorEdu(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfFollower(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfFriendActivity(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfMessages(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfPostLikes(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfUpdates(checked).build()\n--------------------------------------------------\nuserBuilder.build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfMarketingUpdate(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfComments(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCommentReplies(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCreatorDigest(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCreatorEdu(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfFollower(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfFriendActivity(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfMessages(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfUpdates(checked).build()\n--------------------------------------------------\nRefTag.Builder().build()\n--------------------------------------------------\nStoredCard.builder().build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().social(true).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().social(false).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().optedOutOfRecommendations(!checked).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().showPublicProfile(!checked).build()\n--------------------------------------------------\nDiscoveryParams.builder().backed(1).perPage(18).sort(DiscoveryParams.Sort.ENDING_SOON).build()\n--------------------------------------------------\nErrorEnvelope.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().sort(defaultSort).build()\n--------------------------------------------------\nDiscoveryParams.builder().term(it).build()\n--------------------------------------------------\nit.first.toBuilder().needsPassword(false).build()", "import android.app.Activity\nfun build() = ActivityResult(\r\n            requestCode = requestCode,\r\n            resultCode = resultCode,\r\n            intent = intent\r\n        )\nImport(names=[android, app, Activity], wildcard=false, alias=null)" ],
  "Feeder/301" : [ "viewModel.onSelectTopMarket(topMarket, listType)\n--------------------------------------------------\nonSelectTopMarket(topMarket, boardItem.type)", "import io.horizontalsystems.bankwallet.ui.compose.Select\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket\nimport io.horizontalsystems.bankwallet.modules.market.MarketModule.ListType\nfun onSelectTopMarket(topMarket: TopMarket, listType: ListType) {\r\n        when (listType) {\r\n            ListType.TopGainers -> {\r\n                gainersTopMarket = topMarket\r\n                syncViewItems()\r\n            }\r\n            ListType.TopLosers -> {\r\n                losersTopMarket = topMarket\r\n                syncViewItems()\r\n            }\r\n        }\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.MarketModule.ListType\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket\nimport io.horizontalsystems.bankwallet.ui.compose.Select" ],
  "Iconify/178" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/11" : [ "                addCategory(Intent.CATEGORY_OPENABLE)\n                setInitialUri(activity, this, initial)\r\n\n--------------------------------------------------\n            putExtra(\"android.content.extra.SHOW_FILESIZE\", true)\n            setInitialUri(fragment.context, this, initial)\r\n        }", "import java.io.File\nimport timber.log.Timber\nimport androidx.documentfile.provider.DocumentFile\nimport android.provider.DocumentsContract\nimport android.os.Build\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nimport android.content.ContentResolver\nimport android.annotation.TargetApi\n @TargetApi(Build.VERSION_CODES.O)\r\n    private fun setInitialUri(context: Context?, intent: Intent, uri: Uri?) {\r\n        if (uri == null || uri.scheme != ContentResolver.SCHEME_CONTENT) {\r\n            return\r\n        }\r\n        try {\r\n            intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, DocumentFile.fromTreeUri(context!!, uri)!!.uri)\r\n        } catch (e: Exception) {\r\n            Timber.e(e)\r\n        }\r\n    }\nimport android.annotation.TargetApi\nimport android.content.ContentResolver\nimport android.content.Context\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Build\nimport android.provider.DocumentsContract\nimport androidx.documentfile.provider.DocumentFile\nimport timber.log.Timber\nimport java.io.File" ],
  "Feeder/302" : [ "            )\n            if (entryChanged(\r\n                    state.entry,", "import com.mhss.app.mybrain.domain.model.DiaryEntry\nprivate fun entryChanged(\r\n    entry: DiaryEntry?,\r\n    newEntry: DiaryEntry\r\n): Boolean {\r\n    return entry?.title != newEntry.title ||\r\n            entry.content != newEntry.content ||\r\n            entry.mood != newEntry.mood ||\r\n            entry.createdDate != newEntry.createdDate\r\n}\nimport com.mhss.app.mybrain.domain.model.DiaryEntry" ],
  "Iconify/176" : [ "mergeSignatureInfoBuildId(buildId, secondarySignature)", "import kotlin.experimental.xor\nprivate fun mergeSignatureInfoBuildId(buildId: ByteArray, signature: ByteArray) {\r\n        for (i in buildId.indices) {\r\n            buildId[i] = buildId[i] xor signature[i]\r\n        }\r\n    }\nImport(names=[kotlin, experimental, xor], wildcard=false, alias=null)" ],
  "MaterialFiles/1140" : [ "updateTextAppearance(remainingMillis <= 0)", "import com.github.ashutoshgngwr.noice.R\nimport android.os.Build\nprivate fun updateTextAppearance(disabled: Boolean) {\r\n    val style = if (disabled) {\r\n      R.style.TextAppearance_App_CountdownTextView_Disabled\r\n    } else {\r\n      R.style.TextAppearance_App_CountdownTextView\r\n    }\r\n\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n      setTextAppearance(style)\r\n    } else {\r\n      @Suppress(\"DEPRECATION\")\r\n      setTextAppearance(context, style)\r\n    }\r\n  }\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[com, github, ashutoshgngwr, noice, R], wildcard=false, alias=null)" ],
  "Feeder/303" : [ "    BackHandler {\n        addOrUpdateNote(\r\n            Note(", "import com.mhss.app.mybrain.domain.model.Note\nprivate fun addOrUpdateNote(\r\n    newNote: Note,\r\n    note: Note? = null,\r\n    onNotChanged: () -> Unit = {},\r\n    onUpdate: (Note) -> Unit,\r\n) {\r\n    if (note != null) {\r\n        if (noteChanged(newNote, note))\r\n            onUpdate(note)\r\n        else\r\n            onNotChanged()\r\n    } else {\r\n        onUpdate(newNote)\r\n    }\r\n}\nimport com.mhss.app.mybrain.domain.model.Note" ],
  "Feeder/304" : [ "", "import com.mhss.app.mybrain.presentation.util.Screen\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpacesScreenPreview() {\r\n    SpacesScreen(\r\n        navController = rememberNavController()\r\n    )\r\n}\nImport(names=[androidx, navigation, compose, rememberNavController], wildcard=false, alias=null)" ],
  "MaterialFiles/1142" : [ "@Override\r\npublic void addAttachmentView(final Attachment attachment) {\r\n    attachmentsView.setVisibility(View.VISIBLE);\r\n    View view = getLayoutInflater().inflate(R.layout.message_compose_attachment, attachmentsView, false);\r\n    attachmentViews.put(attachment.uri, view);\r\n    View deleteButton = view.findViewById(R.id.attachment_delete);\r\n    deleteButton.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            attachmentPresenter.onClickRemoveAttachment(attachment.uri);\r\n        }\r\n    });\r\n    updateAttachmentView(attachment);\r\n    attachmentsView.addView(view);\r\n}\n--------------------------------------------------\n/**\r\n * Migrates Child views as declared in xml to the inner foldableContainer\r\n */\r\nprivate void migrateChildrenToContainer() {\r\n    // Collect children of FoldableLinearLayout as declared in XML\r\n    int childNum = getChildCount();\r\n    View[] children = new View[childNum];\r\n    for (int i = 0; i < childNum; i++) {\r\n        children[i] = getChildAt(i);\r\n    }\r\n    if (children[0].getId() == R.id.foldableControl) {\r\n    }\r\n    // remove all of them from FoldableLinearLayout\r\n    detachAllViewsFromParent();\r\n    // Inflate the inner foldable_linearlayout.xml\r\n    LayoutInflater inflator = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\n    mFoldableLayout = inflator.inflate(R.layout.foldable_linearlayout, this, true);\r\n    mFoldableContainer = mFoldableLayout.findViewById(R.id.foldableContainer);\r\n    // Push previously collected children into foldableContainer.\r\n    for (int i = 0; i < childNum; i++) {\r\n        addView(children[i]);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.ViewGroup\nimport android.view.View\nimport androidx.annotation.NonNull\n@Override\r\npublic void addView(@NonNull View child, int index, ViewGroup.LayoutParams params) {\r\n    if (isInEditMode() && mInitChild-- > 0) {\r\n        return;\r\n    }\r\n    super.addView(child, index, params);\r\n}" ],
  "Feeder/305" : [ "", "import com.mhss.app.mybrain.presentation.util.Screen\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpacesScreenPreview() {\r\n    SpacesScreen(\r\n        navController = rememberNavController()\r\n    )\r\n}\nImport(names=[androidx, navigation, compose, rememberNavController], wildcard=false, alias=null)" ],
  "QuickNovel/16" : [ "Translator.getString(R.string.FeeSettings_RiskOfGettingStuck_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuck)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuckLegacy_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuckLegacy)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_Overpricing_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_Overpricing)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpact)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpactTooHigh, warning.providerName)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpactWarning)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Warning_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientBalance_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_InsufficientBalanceForFee, baseCoinService.token.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.SendEvmSettings_Error_NonceUsed_Title)\n--------------------------------------------------\nTranslator.getString(R.string.SendEvmSettings_Error_NonceUsed)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_InsufficientBalance, baseCoinService.coinValue(convertedError.requiredBalance).getFormattedFull())\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_ExecutionReverted, convertedError.message ?: \"\")\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_CannotEstimate_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_CannotEstimate, baseCoinService.token.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_LowerThanBaseGasLimit_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_LowerThanBaseGasLimit)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientLiquidity_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientLiquidity)\n--------------------------------------------------\ns.getString()\n--------------------------------------------------\ndescription?.getString()\n--------------------------------------------------\nTranslator.getString(R.string.CoinPage_NoData)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_InvalidAddress)\n--------------------------------------------------\npreferences.getString(SEND_INPUT_TYPE, null)\n--------------------------------------------------\npreferences.getString(\"marketSearchRecentCoinUids\", null)\n--------------------------------------------------\npreferences.getString(BASE_CURRENCY_CODE, null)\n--------------------------------------------------\npreferences.getString(AUTH_TOKEN, null)\n--------------------------------------------------\npreferences.getString(APP_ID, null)\n--------------------------------------------------\npreferences.getString(BASE_BITCOIN_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_LITECOIN_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_ETHEREUM_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_DASH_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_BINANCE_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_ZCASH_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(SORT_TYPE, null)\n--------------------------------------------------\npreferences.getString(APP_VERSIONS, null)\n--------------------------------------------------\npreferences.getString(ENCRYPTION_CHECKER_TEXT, null)\n--------------------------------------------------\npreferences.getString(CURRENT_THEME, null)\n--------------------------------------------------\npreferences.getString(\"balanceViewType\", null)\n--------------------------------------------------\npreferences.getString(PIN, null)\n--------------------------------------------------\npreferences.getString(SYNC_MODE, null)\n--------------------------------------------------\npreferences.getString(BITCOIN_DERIVATION, null)\n--------------------------------------------------\npreferences.getString(\"balanceTotalCoinUid\", null)\n--------------------------------------------------\npreferences.getString(MARKET_CURRENT_TAB, null)\n--------------------------------------------------\npreferences.getString(NOTIFICATION_ID, null)\n--------------------------------------------------\npreferences.getString(CHANGELOG_SHOWN_FOR_APP_VERSION, null)\n--------------------------------------------------\npreferences.getString(LAUNCH_PAGE, null)\n--------------------------------------------------\npreferences.getString(APP_ICON, null)\n--------------------------------------------------\npreferences.getString(MAIN_TAB, null)\n--------------------------------------------------\npreferences.getString(MARKET_FAVORITES_SORTING_FIELD, null)\n--------------------------------------------------\npreferences.getString(MARKET_FAVORITES_MARKET_FIELD, null)\n--------------------------------------------------\npreferences.getString(getSwapProviderKey(blockchainType), null)\n--------------------------------------------------\npreferences.getString(APP_AUTO_LOCK_INTERVAL, null)\n--------------------------------------------------\nTranslator.getString(R.string.LargeNumberFormat, formattedNumber, Translator.getString(it))\n--------------------------------------------------\nTranslator.getString(it)\n--------------------------------------------------\nTranslator.getString(R.string.ManageAccount_BirthdayHeight, token.coin.code)\n--------------------------------------------------\nApp.instance.localizedContext().getString(id)\n--------------------------------------------------\nApp.instance.localizedContext().getString(id, *params)\n--------------------------------------------------\nzcashAccountsCursor.getString(idColumnIndex)\n--------------------------------------------------\nzcashAccountsCursor.getString(birthdayHeightColumnIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(coinTypeIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(keyIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(valueIndex)\n--------------------------------------------------\nfirstAccountCursor.getString(idColumnIndex)\n--------------------------------------------------\ncursor.getString(coinTypeColumnIndex)\n--------------------------------------------------\ncursor.getString(keyColumnIndex)\n--------------------------------------------------\ncursor.getString(valueColumnIndex)\n--------------------------------------------------\nwalletsCursor.getString(coinIdColumnIndex)\n--------------------------------------------------\nSettings.Secure.getString(context.contentResolver, Settings.Secure.DEFAULT_INPUT_METHOD)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_InvalidBlockchainAddress, blockchainName)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_WatchWallets)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_Watchlist)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_CustomRpc)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_AppSettingsTitle)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_AppSettingsDescription)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Syncing_WithProgress, state.progress.toString())\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Syncing)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_SearchingTransactions)\n--------------------------------------------------\ngetString(R.string.Balance_SyncedUntil, DateHelper.formatDate(state.lastBlockDate, \"MMM d, yyyy\"))\n--------------------------------------------------\nTranslator.getString(R.string.Balance_FoundTx, state.count.toString())\n--------------------------------------------------\nTranslator.getString(R.string.Hud_Text_NoInternet)\n--------------------------------------------------\nTranslator.getString(item.restoreMode.title)\n--------------------------------------------------\nTranslator.getString(mode.title)\n--------------------------------------------------\nTranslator.getString(mode.description)\n--------------------------------------------------\nauditViewItem.issues.getString()\n--------------------------------------------------\nrequireArguments().getString(COIN_UID_KEY, \"\")\n--------------------------------------------------\nrequireArguments().getString(API_TAG_KEY, \"\")\n--------------------------------------------------\nTranslator.getString(R.string.Error_NotInteger)\n--------------------------------------------------\nTranslator.getString(R.string.Error_OutOfRange, lower, upper)\n--------------------------------------------------\narguments?.getString(\"indicatorId\")\n--------------------------------------------------\nTranslator.getString(rankType.title)\n--------------------------------------------------\nTranslator.getString(rankType.description)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts_Error_DefinedName)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts_Error_DefinedAddress, contact.name)\n--------------------------------------------------\nTranslator.getString(R.string.CreateWallet_N_Words, wordsCount)\n--------------------------------------------------\nTranslator.getString(R.string.CreateWallet_N_WordsRecommended, wordsCount)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Receive_AddressMemoAlert)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Receive_AddressAlert)\n--------------------------------------------------\nTranslator.getString(R.string.NotAvailable)\n--------------------------------------------------\nTranslator.getString(R.string.AddEvmSyncSource_Error_InvalidUrl)\n--------------------------------------------------\nTranslator.getString(R.string.AddEvmSyncSource_Warning_UrlExists)\n--------------------------------------------------\nrequireArguments().getString(keyTitle)\n--------------------------------------------------\nrequireArguments().getString(keyText)\n--------------------------------------------------\nrequireArguments().getString(LOCK_TIME)\n--------------------------------------------------\nrequireArguments().getString(TEXT)\n--------------------------------------------------\narguments?.getString(EVM_ADDRESS_KEY)\n--------------------------------------------------\narguments?.getString(markdownUrlKey)\n--------------------------------------------------\nTranslator.getString(R.string.Market_MinutesAgo, minutesAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_HoursAgo, hoursAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_DaysAgo, daysAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_Category_TopCoins)\n--------------------------------------------------\nTranslator.getString(R.string.Market_Category_TopCoins_Description)\n--------------------------------------------------\nTranslator.getString(R.string.Nft_TopCollections)\n--------------------------------------------------\nTranslator.getString(R.string.Nft_TopCollections_Description)\n--------------------------------------------------\nrequireArguments().getString(collectionUidKey, \"\")\n--------------------------------------------------\nrequireArguments().getString(blockchainTypeUidKey, \"\")\n--------------------------------------------------\nrequireArguments().getString(TITLE)\n--------------------------------------------------\nTranslator.getString(R.string.Send_Error_UnsupportedAddress)\n--------------------------------------------------\nTranslator.getString(R.string.Tron_AddressNotActive_Warning)\n--------------------------------------------------\nTranslator.getString(R.string.Tron_SelfSendTrxNotAllowed)\n--------------------------------------------------\nTranslator.getString(R.string.Send_Error_SendToSelf)\n--------------------------------------------------\nTranslator.getString(R.string.is_release)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_DeadlineMinute, lowerMinutes)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_DeadlineMinute, upperMinutes)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageZero)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_DeadlineZero)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageTooLow)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageTooHigh, invalidSlippageType.max)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Warning_UnusualSlippage)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_Percent, priceImpact * BigDecimal.valueOf(-1))\n--------------------------------------------------\nTranslator.getString(R.string.Duration_Minutes, ttl / 60)\n--------------------------------------------------\narguments?.getString(TRANSACTION_HASH_KEY)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Title)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Title)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Description)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Description, baseToken.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Button)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Button)\n--------------------------------------------------\nTranslator.getString(R.string.Timestamp_Today)\n--------------------------------------------------\nTranslator.getString(R.string.Timestamp_Yesterday)\n--------------------------------------------------\narguments?.getString(WC_CONNECTION_URI_KEY)\n--------------------------------------------------\nTranslator.getString(R.string.Watch_Error_InvalidAddressFormat)\n--------------------------------------------------\nTranslator.getString(id, formatArgs)\n--------------------------------------------------\nTranslator.getString(R.string.Any)\n--------------------------------------------------\ncontext.getString(R.string.Hud_Text_NoInternet)\n--------------------------------------------------\ncontext.getString(R.string.SyncError)", "import androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\n @Composable\r\n    fun getString(): String {\r\n        return when (this) {\r\n            is PlainString -> text\r\n            is ResString -> stringResource(id, *formatArgs)\r\n        }\r\n    }\nImport(names=[androidx, compose, ui, res, stringResource], wildcard=false, alias=null)" ],
  "Feeder/307" : [ "player.service?.playlistManager?.setDelayValue(System.currentTimeMillis(), true)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(-1L, true)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(System.currentTimeMillis(), false)\n--------------------------------------------------\nplayer.service?.playlistManager?.setDelayValue(-1L, false)", "fun setDelayValue(time: Long, start: Boolean) {\r\n        val value = delayValue.value ?: DelayValues()\r\n        if (start) value.start = time else value.stop = time\r\n        delayValue.value = value\r\n    }" ],
  "Iconify/173" : [ "@Override\r\nprotected boolean onStateChange(int[] states) {\r\n    boolean pressedOrFocused = false;\r\n    for (int state : states) {\r\n        if (state == android.R.attr.state_pressed || state == android.R.attr.state_focused) {\r\n            pressedOrFocused = true;\r\n            break;\r\n        }\r\n    }\r\n    if (pressedOrFocused) {\r\n        super.setColorFilter(getPressedColor(mColor), PorterDuff.Mode.SRC_ATOP);\r\n    } else {\r\n        super.setColorFilter(mColor, PorterDuff.Mode.SRC_ATOP);\r\n    }\r\n    return super.onStateChange(states);\r\n}\n--------------------------------------------------\n", "import android.graphics.PorterDuff;\r\nimport android.graphics.PorterDuff\nimport android.graphics.Color\n@Override\r\nprotected boolean onStateChange(int[] states) {\r\n    boolean pressedOrFocused = false;\r\n    for (int state : states) {\r\n        if (state == android.R.attr.state_pressed || state == android.R.attr.state_focused) {\r\n            pressedOrFocused = true;\r\n            break;\r\n        }\r\n    }\r\n    if (pressedOrFocused) {\r\n        super.setColorFilter(getPressedColor(mColor), PorterDuff.Mode.SRC_ATOP);\r\n    } else {\r\n        super.setColorFilter(mColor, PorterDuff.Mode.SRC_ATOP);\r\n    }\r\n    return super.onStateChange(states);\r\n}" ],
  "MaterialFiles/1143" : [ "                            title = item.title ?: \"\",\n                            icon = getIcon(item),\r\n                            color = getColor(item),\n--------------------------------------------------\n        if (filter.icon < 1000 || filter.icon == CustomIcons.PLACE || inventory.hasPro) {\n            val icon = CustomIcons.getIconResId(filter.icon)\r\n            if (icon != null) {\n--------------------------------------------------\ngtasksList.getIcon()\n--------------------------------------------------\ntagData.getIcon()\n--------------------------------------------------\ngetIcon()!!\n--------------------------------------------------\ngetIcon(tagData)", "import org.tasks.themes.CustomIcons\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nfun getIcon(filter: Filter): Int {\r\n        if (filter.icon < 1000 || inventory.hasPro) {\r\n            val icon = CustomIcons.getIconResId(filter.icon)\r\n            if (icon != null) {\r\n                return icon\r\n            }\r\n        }\r\n        return R.drawable.ic_list_24px\r\n    }\nimport com.todoroo.astrid.api.Filter\nimport org.tasks.R\nimport org.tasks.themes.CustomIcons" ],
  "QuickNovel/19" : [ "finishAndShowSuccessToast(it)", "import com.kickstarter.libs.utils.ViewUtils\nimport com.kickstarter.R\nprivate fun finishAndShowSuccessToast(successStringRes: Int) {\r\n        finish()\r\n        ViewUtils.showToast(this, getString(successStringRes))\r\n    }\nImport(names=[com, kickstarter, libs, utils, ViewUtils], wildcard=false, alias=null)" ],
  "Feeder/309" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1466" : [ "= fragmentIsVisible(TripsFragment.TAG)", "protected fun fragmentIsVisible(tag: String): Boolean {\r\n        val fragment = supportFragmentManager.findFragmentByTag(tag)\r\n        return fragment != null && fragment.isVisible\r\n    }" ],
  "Trail-Sense/1469" : [ "", "override suspend fun getPlaylistSongs(playlist: Playlist): List<Song> =\n        if (playlist is AbsCustomPlaylist) {\n            playlist.songs()\n        } else {\n            PlaylistSongsLoader.getPlaylistSongList(context, playlist.id)\n        }" ],
  "Trail-Sense/1468" : [ "\n        return filterByRange(filterMarketCap, marketCap.toLong())\r\n                && filterByRange(filterVolume, totalVolume.toLong())\n--------------------------------------------------\n        return filterByRange(filterMarketCap, marketCap.toLong())\n                && filterByRange(filterVolume, totalVolume.toLong())\r\n                && inBlockchain(marketInfo.fullCoin.tokens)\n--------------------------------------------------\n                && inBlockchain(marketInfo.fullCoin.tokens)\n                && filterByRange(filterPriceChange, priceChangeValue.toLong())\r\n                && (!filterPriceCloseToAth || closeToAllTime(marketInfo.athPercentage))", "private fun filterByRange(filter: Pair<Long?, Long?>?, value: Long?): Boolean {\r\n        if (filter == null) return true\r\n\r\n        filter.first?.let { min ->\r\n            if (value == null || value < min) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        filter.second?.let { max ->\r\n            if (value == null || value > max) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }" ],
  "Trail-Sense/702" : [ "                        .fillMaxWidth()\n                        .wrapContentHeight()\r\n                        .padding(end = 16.dp),\n--------------------------------------------------\n            .fillMaxWidth()\n            .wrapContentHeight()\r\n            .padding(\n--------------------------------------------------\nthemeBase.wrap(context)", "import android.content.Context\nprivate fun wrap(context: Context): Context {\r\n        val wrapper = themeBase.wrap(context)\r\n        applyToContext(wrapper)\r\n        return wrapper\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/703" : [ "                        .fillMaxWidth()\n                        .wrapContentHeight()\r\n                        .padding(end = 16.dp),\n--------------------------------------------------\n            .fillMaxWidth()\n            .wrapContentHeight()\r\n            .padding(\n--------------------------------------------------\nthemeBase.wrap(context)", "import android.content.Context\nprivate fun wrap(context: Context): Context {\r\n        val wrapper = themeBase.wrap(context)\r\n        applyToContext(wrapper)\r\n        return wrapper\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/705" : [ "if (!item.isActionViewExpanded) setSearchVisibility(true)\n--------------------------------------------------\nsetSearchVisibility(true)\n--------------------------------------------------\nsetSearchVisibility(false)\n--------------------------------------------------\n(current as Filterable).setSearchVisibility(visible)\n--------------------------------------------------\n(getCurrentFragment() as? Filterable)?.setSearchVisibility(visible)", "import org.videolan.vlc.interfaces.Filterable\nimport org.videolan.vlc.R\nprivate fun setSearchVisibility(visible: Boolean) {\r\n        val current = currentFragment\r\n        if (current is Filterable) {\r\n            (current as Filterable).setSearchVisibility(visible)\r\n            makeRoomForSearch(visible)\r\n        }\r\n    }\nImport(names=[org, videolan, vlc, interfaces, Filterable], wildcard=false, alias=null)" ],
  "Trail-Sense/709" : [ "", "import android.location.Location\noverride fun onLocationChanged(location: Location) {\r\n        if (isBetterPosition(location, _position.value)) {\r\n            _position.value = location\r\n        }\r\n    }\nImport(names=[android, location, Location], wildcard=false, alias=null)" ],
  "Iconify/181" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/182" : [ "adapter.toggleSelection(position)\n--------------------------------------------------\ntoggleSelection(position)", "fun toggleSelection(position: Int) {\r\n        val h = getItem(position) ?: return\r\n        val k = selected.indexOf(h)\r\n        if (k < 0) selected.add(h) else selected.remove(h)\r\n        notifyDataSetChanged()\r\n    }" ],
  "Iconify/180" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1138" : [ "super.onViewCreated(view, savedInstanceState)", "import code.name.monkey.retromusic.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        setupRecyclerView()\n        setupToolbar()\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "QuickNovel/20" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "QuickNovel/21" : [ "            } else if (MediaStore.Audio.Playlists.CONTENT_TYPE == mimeType) {\n                val id = parseLongFromIntent(intent, \"playlistId\", \"playlist\")\n                if (id >= 0L) {\n--------------------------------------------------\n            } else if (MediaStore.Audio.Albums.CONTENT_TYPE == mimeType) {\n                val id = parseLongFromIntent(intent, \"albumId\", \"album\")\n                if (id >= 0L) {\n--------------------------------------------------\n            } else if (MediaStore.Audio.Artists.CONTENT_TYPE == mimeType) {\n                val id = parseLongFromIntent(intent, \"artistId\", \"artist\")\n                if (id >= 0L) {", "import org.koin.android.ext.android.get\nimport code.name.monkey.retromusic.util.logE\nimport android.content.Intent\nprivate fun parseLongFromIntent(\n        intent: Intent,\n        longKey: String,\n        stringKey: String,\n    ): Long {\n        var id = intent.getLongExtra(longKey, -1)\n        if (id < 0) {\n            val idString = intent.getStringExtra(stringKey)\n            if (idString != null) {\n                try {\n                    id = idString.toLong()\n                } catch (e: NumberFormatException) {\n                    logE(e)\n                }\n            }\n        }\n        return id\n    }\nimport android.content.Intent\nimport code.name.monkey.retromusic.util.logE\nimport org.koin.android.ext.android.get" ],
  "Feeder/300" : [ "dialogConfirmed(binding.deleteNoteCheckbox.isChecked)\n--------------------------------------------------\ndialogConfirmed()", "private fun dialogConfirmed(deleteFile: Boolean) {\r\n        callback(deleteFile && note.path.isNotEmpty())\r\n        dialog?.dismiss()\r\n    }" ],
  "QuickNovel/23" : [ "val updatedList = updateQuantity(listAddOns.second, selection)", "import com.kickstarter.models.Reward\nprivate fun updateQuantity(addOnsList: List<Reward>, currentSelection: MutableMap<Long, Int>): List<Reward> =\r\n            addOnsList.map { addOn ->\r\n                if (currentSelection.containsKey(addOn.id())) {\r\n                    return@map addOn.toBuilder().quantity(currentSelection[addOn.id()]).build()\r\n                } else return@map addOn\r\n            }" ],
  "Feeder/313" : [ "                ) {\n                    viewModel.onEnterSecretKey(it)\r\n                }", "fun onEnterSecretKey(v: String) {\r\n        secretKey = v\r\n        emitState()\r\n    }" ],
  "Feeder/314" : [ "Translator.getString(R.string.FeeSettings_RiskOfGettingStuck_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuck)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuckLegacy_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_RiskOfGettingStuckLegacy)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_Overpricing_Title)\n--------------------------------------------------\nTranslator.getString(R.string.FeeSettings_Overpricing)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpact)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpactTooHigh, warning.providerName)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_PriceImpactWarning)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Warning_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientBalance_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_InsufficientBalanceForFee, baseCoinService.token.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.SendEvmSettings_Error_NonceUsed_Title)\n--------------------------------------------------\nTranslator.getString(R.string.SendEvmSettings_Error_NonceUsed)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_InsufficientBalance, baseCoinService.coinValue(convertedError.requiredBalance).getFormattedFull())\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_ExecutionReverted, convertedError.message ?: \"\")\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_CannotEstimate_Title)\n--------------------------------------------------\ngetString(R.string.EthereumTransaction_Error_CannotEstimate, baseCoinService.token.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_LowerThanBaseGasLimit_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_LowerThanBaseGasLimit)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientLiquidity_Title)\n--------------------------------------------------\nTranslator.getString(R.string.EthereumTransaction_Error_InsufficientLiquidity)\n--------------------------------------------------\ns.getString()\n--------------------------------------------------\ndescription?.getString()\n--------------------------------------------------\nTranslator.getString(R.string.CoinPage_NoData)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_InvalidAddress)\n--------------------------------------------------\npreferences.getString(SEND_INPUT_TYPE, null)\n--------------------------------------------------\npreferences.getString(\"marketSearchRecentCoinUids\", null)\n--------------------------------------------------\npreferences.getString(BASE_CURRENCY_CODE, null)\n--------------------------------------------------\npreferences.getString(AUTH_TOKEN, null)\n--------------------------------------------------\npreferences.getString(APP_ID, null)\n--------------------------------------------------\npreferences.getString(BASE_BITCOIN_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_LITECOIN_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_ETHEREUM_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_DASH_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_BINANCE_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(BASE_ZCASH_PROVIDER, null)\n--------------------------------------------------\npreferences.getString(SORT_TYPE, null)\n--------------------------------------------------\npreferences.getString(APP_VERSIONS, null)\n--------------------------------------------------\npreferences.getString(ENCRYPTION_CHECKER_TEXT, null)\n--------------------------------------------------\npreferences.getString(CURRENT_THEME, null)\n--------------------------------------------------\npreferences.getString(\"balanceViewType\", null)\n--------------------------------------------------\npreferences.getString(PIN, null)\n--------------------------------------------------\npreferences.getString(SYNC_MODE, null)\n--------------------------------------------------\npreferences.getString(BITCOIN_DERIVATION, null)\n--------------------------------------------------\npreferences.getString(\"balanceTotalCoinUid\", null)\n--------------------------------------------------\npreferences.getString(MARKET_CURRENT_TAB, null)\n--------------------------------------------------\npreferences.getString(NOTIFICATION_ID, null)\n--------------------------------------------------\npreferences.getString(CHANGELOG_SHOWN_FOR_APP_VERSION, null)\n--------------------------------------------------\npreferences.getString(LAUNCH_PAGE, null)\n--------------------------------------------------\npreferences.getString(APP_ICON, null)\n--------------------------------------------------\npreferences.getString(MAIN_TAB, null)\n--------------------------------------------------\npreferences.getString(MARKET_FAVORITES_SORTING_FIELD, null)\n--------------------------------------------------\npreferences.getString(MARKET_FAVORITES_MARKET_FIELD, null)\n--------------------------------------------------\npreferences.getString(getSwapProviderKey(blockchainType), null)\n--------------------------------------------------\npreferences.getString(APP_AUTO_LOCK_INTERVAL, null)\n--------------------------------------------------\nTranslator.getString(R.string.LargeNumberFormat, formattedNumber, Translator.getString(it))\n--------------------------------------------------\nTranslator.getString(it)\n--------------------------------------------------\nTranslator.getString(R.string.ManageAccount_BirthdayHeight, token.coin.code)\n--------------------------------------------------\nApp.instance.localizedContext().getString(id)\n--------------------------------------------------\nApp.instance.localizedContext().getString(id, *params)\n--------------------------------------------------\nzcashAccountsCursor.getString(idColumnIndex)\n--------------------------------------------------\nzcashAccountsCursor.getString(birthdayHeightColumnIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(coinTypeIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(keyIndex)\n--------------------------------------------------\nsettingsToMigrateCursor.getString(valueIndex)\n--------------------------------------------------\nfirstAccountCursor.getString(idColumnIndex)\n--------------------------------------------------\ncursor.getString(coinTypeColumnIndex)\n--------------------------------------------------\ncursor.getString(keyColumnIndex)\n--------------------------------------------------\ncursor.getString(valueColumnIndex)\n--------------------------------------------------\nwalletsCursor.getString(coinIdColumnIndex)\n--------------------------------------------------\nSettings.Secure.getString(context.contentResolver, Settings.Secure.DEFAULT_INPUT_METHOD)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_InvalidBlockchainAddress, blockchainName)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_WatchWallets)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_Watchlist)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_CustomRpc)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_AppSettingsTitle)\n--------------------------------------------------\nTranslator.getString(R.string.BackupManager_AppSettingsDescription)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Syncing_WithProgress, state.progress.toString())\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Syncing)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_SearchingTransactions)\n--------------------------------------------------\ngetString(R.string.Balance_SyncedUntil, DateHelper.formatDate(state.lastBlockDate, \"MMM d, yyyy\"))\n--------------------------------------------------\nTranslator.getString(R.string.Balance_FoundTx, state.count.toString())\n--------------------------------------------------\nTranslator.getString(R.string.Hud_Text_NoInternet)\n--------------------------------------------------\nTranslator.getString(item.restoreMode.title)\n--------------------------------------------------\nTranslator.getString(mode.title)\n--------------------------------------------------\nTranslator.getString(mode.description)\n--------------------------------------------------\nauditViewItem.issues.getString()\n--------------------------------------------------\nrequireArguments().getString(COIN_UID_KEY, \"\")\n--------------------------------------------------\nrequireArguments().getString(API_TAG_KEY, \"\")\n--------------------------------------------------\nTranslator.getString(R.string.Error_NotInteger)\n--------------------------------------------------\nTranslator.getString(R.string.Error_OutOfRange, lower, upper)\n--------------------------------------------------\narguments?.getString(\"indicatorId\")\n--------------------------------------------------\nTranslator.getString(rankType.title)\n--------------------------------------------------\nTranslator.getString(rankType.description)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts_Error_DefinedName)\n--------------------------------------------------\nTranslator.getString(R.string.Contacts_Error_DefinedAddress, contact.name)\n--------------------------------------------------\nTranslator.getString(R.string.CreateWallet_N_Words, wordsCount)\n--------------------------------------------------\nTranslator.getString(R.string.CreateWallet_N_WordsRecommended, wordsCount)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Receive_AddressMemoAlert)\n--------------------------------------------------\nTranslator.getString(R.string.Balance_Receive_AddressAlert)\n--------------------------------------------------\nTranslator.getString(R.string.NotAvailable)\n--------------------------------------------------\nTranslator.getString(R.string.AddEvmSyncSource_Error_InvalidUrl)\n--------------------------------------------------\nTranslator.getString(R.string.AddEvmSyncSource_Warning_UrlExists)\n--------------------------------------------------\nrequireArguments().getString(keyTitle)\n--------------------------------------------------\nrequireArguments().getString(keyText)\n--------------------------------------------------\nrequireArguments().getString(LOCK_TIME)\n--------------------------------------------------\nrequireArguments().getString(TEXT)\n--------------------------------------------------\narguments?.getString(EVM_ADDRESS_KEY)\n--------------------------------------------------\narguments?.getString(markdownUrlKey)\n--------------------------------------------------\nTranslator.getString(R.string.Market_MinutesAgo, minutesAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_HoursAgo, hoursAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_DaysAgo, daysAgo)\n--------------------------------------------------\nTranslator.getString(R.string.Market_Category_TopCoins)\n--------------------------------------------------\nTranslator.getString(R.string.Market_Category_TopCoins_Description)\n--------------------------------------------------\nTranslator.getString(R.string.Nft_TopCollections)\n--------------------------------------------------\nTranslator.getString(R.string.Nft_TopCollections_Description)\n--------------------------------------------------\nrequireArguments().getString(collectionUidKey, \"\")\n--------------------------------------------------\nrequireArguments().getString(blockchainTypeUidKey, \"\")\n--------------------------------------------------\nrequireArguments().getString(TITLE)\n--------------------------------------------------\nTranslator.getString(R.string.Send_Error_UnsupportedAddress)\n--------------------------------------------------\nTranslator.getString(R.string.Tron_AddressNotActive_Warning)\n--------------------------------------------------\nTranslator.getString(R.string.Tron_SelfSendTrxNotAllowed)\n--------------------------------------------------\nTranslator.getString(R.string.Send_Error_SendToSelf)\n--------------------------------------------------\nTranslator.getString(R.string.is_release)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_DeadlineMinute, lowerMinutes)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_DeadlineMinute, upperMinutes)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageZero)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_DeadlineZero)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageTooLow)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Error_SlippageTooHigh, invalidSlippageType.max)\n--------------------------------------------------\nTranslator.getString(R.string.SwapSettings_Warning_UnusualSlippage)\n--------------------------------------------------\nTranslator.getString(R.string.Swap_Percent, priceImpact * BigDecimal.valueOf(-1))\n--------------------------------------------------\nTranslator.getString(R.string.Duration_Minutes, ttl / 60)\n--------------------------------------------------\narguments?.getString(TRANSACTION_HASH_KEY)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Title)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Title)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Description)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Description, baseToken.coin.code)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_SpeedUp_Button)\n--------------------------------------------------\nTranslator.getString(R.string.TransactionInfoOptions_Cancel_Button)\n--------------------------------------------------\nTranslator.getString(R.string.Timestamp_Today)\n--------------------------------------------------\nTranslator.getString(R.string.Timestamp_Yesterday)\n--------------------------------------------------\narguments?.getString(WC_CONNECTION_URI_KEY)\n--------------------------------------------------\nTranslator.getString(R.string.Watch_Error_InvalidAddressFormat)\n--------------------------------------------------\nTranslator.getString(id, formatArgs)\n--------------------------------------------------\nTranslator.getString(R.string.Any)\n--------------------------------------------------\ncontext.getString(R.string.Hud_Text_NoInternet)\n--------------------------------------------------\ncontext.getString(R.string.SyncError)", "import androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\n @Composable\r\n    fun getString(): String {\r\n        return when (this) {\r\n            is PlainString -> text\r\n            is ResString -> stringResource(id, *formatArgs)\r\n        }\r\n    }\nImport(names=[androidx, compose, ui, res, stringResource], wildcard=false, alias=null)" ],
  "MaterialFiles/1151" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "QuickNovel/25" : [ "stopActionMode()\n--------------------------------------------------\nif (adapter.multiSelectHelper.getSelection().isEmpty()) stopActionMode()\n--------------------------------------------------\ncurrent.stopActionMode()\n--------------------------------------------------\n(viewPager.findCurrentFragment(childFragmentManager) as? BaseFragment)?.stopActionMode()", "import androidx.appcompat.view.ActionMode\nprivate fun stopActionMode() = actionMode?.let {\r\n        it.finish()\r\n        onDestroyActionMode(it)\r\n    }" ],
  "Iconify/188" : [ "setupColorPreference(R.string.p_theme_color, themeColor.pickerColor, ColorPickerAdapter.Palette.COLORS, REQUEST_COLOR_PICKER)\n--------------------------------------------------\nsetupColorPreference(R.string.p_theme_accent, themeAccent.pickerColor, ColorPickerAdapter.Palette.ACCENTS, REQUEST_ACCENT_PICKER)\n--------------------------------------------------\nsetupColorPreference(R.string.p_theme_launcher, launcher.pickerColor, ColorPickerAdapter.Palette.LAUNCHERS, REQUEST_LAUNCHER_PICKER)", "import org.tasks.dialogs.ColorPickerAdapter\nimport org.tasks.dialogs.ColorPalettePicker.Companion.newColorPalette\nimport org.tasks.R\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nprivate fun setupColorPreference(\r\n        @StringRes prefId: Int,\r\n        color: Int,\r\n        palette: ColorPickerAdapter.Palette,\r\n        requestCode: Int\r\n    ) {\r\n        tintColorPreference(prefId, color)\r\n        findPreference(prefId).setOnPreferenceClickListener {\r\n            newColorPalette(this, requestCode, color, palette)\r\n                .show(parentFragmentManager, FRAG_TAG_COLOR_PICKER)\r\n            false\r\n        }\r\n    }\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)\nImport(names=[org, tasks, dialogs, ColorPalettePicker, Companion, newColorPalette], wildcard=false, alias=null)\nImport(names=[org, tasks, dialogs, ColorPickerAdapter], wildcard=false, alias=null)" ],
  "QuickNovel/26" : [ "\n        val messageId = messageStore.saveLocalMessage(folderId, message.toSaveMessageData(subject))\r\n\n--------------------------------------------------\n        val messageStore = messageStoreManager.getMessageStore(account)\n        val messageData = message.toSaveMessageData(plaintextSubject)\r\n", "import com.fsck.k9.message.extractors.PreviewResult\nimport com.fsck.k9.mailstore.SaveMessageData\nimport com.fsck.k9.mail.MessageDownloadState\nimport com.fsck.k9.mail.Message\nprivate fun Message.toSaveMessageData(\r\n        subject: String? = getSubject(),\r\n        date: Long = sentDate?.time ?: System.currentTimeMillis(),\r\n        internalDate: Long = date,\r\n        downloadState: MessageDownloadState = getDownloadState(),\r\n        attachmentCount: Int = 0,\r\n        previewResult: PreviewResult = PreviewResult.none(),\r\n        textForSearchIndex: String? = null,\r\n        encryptionType: String? = null,\r\n    ): SaveMessageData {\r\n        return SaveMessageData(\r\n            message = this,\r\n            subject,\r\n            date,\r\n            internalDate,\r\n            downloadState,\r\n            attachmentCount,\r\n            previewResult,\r\n            textForSearchIndex,\r\n            encryptionType,\r\n        )\r\n    }\nimport com.fsck.k9.mail.Message\nimport com.fsck.k9.mail.MessageDownloadState\nimport com.fsck.k9.mailstore.SaveMessageData\nimport com.fsck.k9.message.extractors.PreviewResult" ],
  "QuickNovel/27" : [ "{\r\n        super.onResume()\r\n\r\n        viewModel.reload()\r\n    }", "import com.fsck.k9.ui.R\nimport app.k9mail.core.android.common.contact.CachingRepository\nfun reload() {\r\n        messageReference?.let { messageReference ->\r\n            if (contactRepository is CachingRepository) {\r\n                contactRepository.clearCache()\r\n            }\r\n\r\n            loadData(messageReference)\r\n        }\r\n    }\nimport app.k9mail.core.android.common.contact.CachingRepository\nimport com.fsck.k9.ui.R" ],
  "Feeder/317" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/916" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Iconify/183" : [ "", "import org.tasks.preferences.Preferences\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        childFragmentManager.setFilterPickerResultListener(this) {\r\n            widgetPreferences.setFilter(defaultFilterProvider.getFilterPreferenceValue(it))\r\n            updateFilter()\r\n        }\r\n    }\nimport android.os.Bundle\nimport androidx.preference.Preference\nimport com.todoroo.astrid.api.Filter\nimport org.tasks.R\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.preferences.Preferences" ],
  "Feeder/319" : [ "= publish(filteringJob(charSequence))", "private fun publish(list: MutableList<T>?) {\r\n        sourceSet?.let {\r\n            if (list !== null)\r\n                dataset.value = list\r\n            else {\r\n                dataset.value = it\r\n                sourceSet = null\r\n            }\r\n        }\r\n    }" ],
  "Trail-Sense/1474" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1478" : [ "pinManager.isUnique(pin, level)\n--------------------------------------------------\n            stage == Enter -> {\n                if (pinComponent.isUnique(enteredPin, forDuress)) {\r\n                    submittedPin = enteredPin", "override fun isUnique(pin: String, forDuress: Boolean): Boolean {\r\n        val level = if (forDuress) {\r\n            userManager.getUserLevel() + 1\r\n        } else {\r\n            userManager.getUserLevel()\r\n        }\r\n        return pinManager.isUnique(pin, level)\r\n    }" ],
  "Trail-Sense/711" : [ "TextUtils.equals(status, \"CONNECTED\")\n--------------------------------------------------\nTextUtils.equals(status, \"FAILED\")\n--------------------------------------------------\nsuper.equals(other)\n--------------------------------------------------\nother.address.equals(address, ignoreCase = true)\n--------------------------------------------------\naddress.equals(uniswapKit.etherToken().address.hex, true)\n--------------------------------------------------\naddress.equals(uniswapV3Kit.etherToken().address.hex, true)\n--------------------------------------------------\nmanufacturer.equals(Build.MANUFACTURER, ignoreCase = true)", "import io.horizontalsystems.marketkit.models.Coin\noverride fun equals(other: Any?): Boolean {\r\n        if (other is CoinValue) {\r\n            return coin.uid == other.coin.uid && value == other.value\r\n        }\r\n\r\n        return super.equals(other)\r\n    }\nImport(names=[io, horizontalsystems, marketkit, models, Coin], wildcard=false, alias=null)" ],
  "Trail-Sense/713" : [ "binding.emailWarningTextView.setTextColor(ContextCompat.getColor(this@ChangeEmailActivity, it))\n--------------------------------------------------\nbinding.unreadCountTextView.setTextColor(ContextCompat.getColor(this, it))\n--------------------------------------------------\nsetTextColor(textColor)\n--------------------------------------------------\nsetTextColor(it, pledgeAmount)\n--------------------------------------------------\ntextView.setTextColor(color)\n--------------------------------------------------\nbinding.unseenActivityCount.setTextColor(ContextCompat.getColor(context(), it))\n--------------------------------------------------\nsetTextColor(ContextCompat.getColor(context(), it))", "import com.kickstarter.R\nimport androidx.core.content.ContextCompat\nimport android.widget.TextView\nimport android.view.View\nprivate fun setTextColor(colorResId: Int, vararg textViews: TextView) {\r\n        context?.let {\r\n            val color = ContextCompat.getColor(it, colorResId)\r\n            for (textView in textViews) {\r\n                textView.setTextColor(color)\r\n            }\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, widget, TextView], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)" ],
  "Trail-Sense/714" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "Trail-Sense/718" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/193" : [ "", "import org.tasks.preferences.Preferences\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        childFragmentManager.setFilterPickerResultListener(this) {\r\n            widgetPreferences.setFilter(defaultFilterProvider.getFilterPreferenceValue(it))\r\n            updateFilter()\r\n        }\r\n    }\nimport android.os.Bundle\nimport androidx.preference.Preference\nimport com.todoroo.astrid.api.Filter\nimport org.tasks.R\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.preferences.Preferences" ],
  "QuickNovel/31" : [ "                } else {\n                    clearUi()\r\n                    TaskListFragment.newTaskListFragment(newFilter)\n--------------------------------------------------\n        AndroidUtilities.assertMainThread()\n        clearUi()\r\n        return coroutineScope {\n--------------------------------------------------\nidToNode.clear()\n--------------------------------------------------\npurchases.clear()\n--------------------------------------------------\nEtebaseLocalCache.clear(context, username)\n--------------------------------------------------\nclear(context, it)\n--------------------------------------------------\njobs.clear()\n--------------------------------------------------\ntoolbar.menu.clear()\n--------------------------------------------------\nvtodoCache.clear()\n--------------------------------------------------\nEtebaseLocalCache.clear(context)\n--------------------------------------------------\nnotificationQueue.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ncaldavCalendars.clear()\n--------------------------------------------------\ntagDatas.clear()", "fun clear(key: String?) {\r\n        val editor = prefs.edit()\r\n        editor.remove(key)\r\n        editor.apply()\r\n    }" ],
  "QuickNovel/32" : [ "            val folderServerId = folderId?.let {\n                folderRepository.getFolderServerId(account, folderId)\r\n            } ?: importedFolderServerId\n--------------------------------------------------\n\n        val folderServerIds = backendStorage.getFolderServerIds()\r\n        assertThat(folderServerIds).contains(FOLDER_SERVER_ID)", "import com.fsck.k9.Account\nfun getFolderServerId(account: Account, folderId: Long): String? {\r\n        val messageStore = messageStoreManager.getMessageStore(account)\r\n        return messageStore.getFolder(folderId) { folder ->\r\n            folder.serverId\r\n        }\r\n    }\nimport com.fsck.k9.Account" ],
  "Feeder/311" : [ "kit.refresh()\n--------------------------------------------------\n{\r\n        eip20Kit.refresh()\r\n    }\n--------------------------------------------------\nit.refresh()\n--------------------------------------------------\nevmBlockchainManager.getEvmKitManager(blockchain.type).evmKitWrapper?.evmKit?.refresh()\n--------------------------------------------------\nbinanceKitManager.binanceKit?.refresh()\n--------------------------------------------------\nsolanaKitManager.solanaKitWrapper?.solanaKit?.refresh()\n--------------------------------------------------\ntronKitManager.tronKitWrapper?.tronKit?.refresh()\n--------------------------------------------------\nadaptersMap[wallet]?.refresh()\n--------------------------------------------------\nadapterManager.refresh()\n--------------------------------------------------\nrefresh()\n--------------------------------------------------\nservice.refresh()\n--------------------------------------------------\nviewModel.refresh()\n--------------------------------------------------\nnftMetadataSyncer.refresh()\n--------------------------------------------------\nMarketWidgetManager().refresh(glanceId)\n--------------------------------------------------\nrefresh(glanceId)\n--------------------------------------------------\nmarketWidgetManager.refresh(glanceId)", "import kotlinx.coroutines.launch\nfun refresh() {\r\n        coroutineScope.launch {\r\n            adaptersMap.values.forEach { it.sync() }\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)" ],
  "MaterialFiles/129" : [ "super.onActive()\n--------------------------------------------------\ncallback.onActive()", "import androidx.annotation.MainThread\n @MainThread\r\n    override fun onActive() {\r\n        super.onActive()\r\n        callback.onActive()\r\n    }" ],
  "MaterialFiles/1280" : [ "                                searchText = value\n                                viewModel.onEnterQuery(value)\r\n                            },\n--------------------------------------------------\n                        if (searchMode) {\n                            viewModel.onEnterQuery(null)\r\n                            searchMode = false\n--------------------------------------------------\nviewModel.onEnterQuery(it)", "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.ensureActive\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nfun onEnterQuery(q: String) {\r\n        searchJob?.cancel()\r\n        searchJob = viewModelScope.launch(Dispatchers.IO) {\r\n            items = allItems.filter {\r\n                it.title.contains(q, true) || it.subtitle.contains(q, true)\r\n            }\r\n            ensureActive()\r\n            emitState()\r\n        }\r\n    }\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.ensureActive\nimport kotlinx.coroutines.launch" ],
  "Iconify/673" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/672" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/671" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/670" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/98" : [ "    if (uiState.closeScreen) {\n        viewModel.closeScreenCalled()\r\n        onFinish()", "fun closeScreenCalled() {\r\n        closeScreen = false\r\n        syncState()\r\n    }" ],
  "Trail-Sense/95" : [ "if (!this::receiver.isInitialized) restoreReceiver(savedInstanceState)", "import org.videolan.vlc.R\nimport android.os.Bundle\nprivate fun restoreReceiver(savedInstanceState: Bundle?) {\r\n        if (savedInstanceState != null) {\r\n            val fragments = requireActivity().supportFragmentManager.fragments\r\n            for ((index, fragment) in fragments.withIndex()) {\r\n                if (fragment is CtxActionReceiver) {\r\n                    receiver = fragment\r\n                    return\r\n                } else if (index > 1) break\r\n            }\r\n        }\r\n        dismiss()\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Trail-Sense/1640" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "Trail-Sense/1645" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "Trail-Sense/565" : [ "super.getItemOffsets(outRect, view, parent, state)", "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {\r\n        super.getItemOffsets(outRect, view, parent, state)\r\n        outRect.apply {\r\n            bottom = margin\r\n        }\r\n    }\nImport(names=[android, graphics, Rect], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)" ],
  "Iconify/678" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/1646" : [ "", "import org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    EventBus.getDefault().unregister(this);\r\n    if (disposable != null) {\r\n        disposable.dispose();\r\n    }\r\n}" ],
  "Trail-Sense/94" : [ "if (!this::receiver.isInitialized) restoreReceiver(savedInstanceState)", "import org.videolan.vlc.R\nimport android.os.Bundle\nprivate fun restoreReceiver(savedInstanceState: Bundle?) {\r\n        if (savedInstanceState != null) {\r\n            val fragments = requireActivity().supportFragmentManager.fragments\r\n            for ((index, fragment) in fragments.withIndex()) {\r\n                if (fragment is CtxActionReceiver) {\r\n                    receiver = fragment\r\n                    return\r\n                } else if (index > 1) break\r\n            }\r\n        }\r\n        dismiss()\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Trail-Sense/1643" : [ "override fun onPause() {\n    super.onPause()\n    localBroadcastManager.unregisterReceiver(purchaseReceiver)\n}", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n        localBroadcastManager.registerPurchaseReceiver(purchaseReceiver)\r\n        localBroadcastManager.registerRefreshListReceiver(purchaseReceiver)\r\n    }" ],
  "Trail-Sense/1644" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Trail-Sense/92" : [ "super.onBackPressed()", "override fun onBackPressed() {\r\n        if (model.actionMode.enabled.value) {\r\n            model.actionMode.close(true)\r\n        } else super.onBackPressed()\r\n    }" ],
  "Trail-Sense/1647" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Iconify/684" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/683" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/682" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/681" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/570" : [ "", "import androidx.viewbinding.ViewBinding\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val viewBinding = getViewBinding(resourceId, parent)\r\n        val viewHolder = viewHolder(viewBinding)\r\n        viewHolder?.bindData(getItem(position))\r\n        return viewBinding.root\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)" ],
  "Trail-Sense/571" : [ "{\n        val snippet = getPreview(message)\r\n        if (message.subject.isNullOrEmpty() && snippet != null) {\n--------------------------------------------------\n            if (appearance.previewLines > 0) {\n                val preview = getPreview(isMessageEncrypted, previewText)\r\n                if (preview.isNotEmpty()) {", "import com.fsck.k9.ui.R\nprivate fun getPreview(isMessageEncrypted: Boolean, previewText: String): String {\r\n        return if (isMessageEncrypted) {\r\n            res.getString(R.string.preview_encrypted)\r\n        } else {\r\n            previewText\r\n        }\r\n    }\nimport com.fsck.k9.ui.R" ],
  "Trail-Sense/573" : [ "", "import android.content.DialogInterface;\r\nimport android.content.DialogInterface\npublic void onDismiss(DialogInterface dialog) {\r\n    // Allow auto save\r\n    mAutoSaveSafe = true;\r\n    // Allow reload\r\n    mReloadSafe = true;\r\n}" ],
  "Iconify/209" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/131" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1653" : [ "override fun onCreate() {\n    super.onCreate()\n    startForeground()\n}", "override fun onDestroy() {\r\n        super.onDestroy()\r\n        stopForeground(true)\r\n        job.cancel()\r\n    }" ],
  "MaterialFiles/134" : [ "clearCurrentDialog()", "import android.app.Dialog\nfun clearCurrentDialog() {\r\n            currentDialog?.dismiss()\r\n            currentDialog = null\r\n        }\nImport(names=[android, app, Dialog], wildcard=false, alias=null)" ],
  "Trail-Sense/574" : [ "super.onViewCreated(view, savedInstanceState)", "import com.google.android.material.bottomsheet.BottomSheetBehavior\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n         BottomSheetBehavior.from(view.parent as View).skipCollapsed = true\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[com, google, android, material, bottomsheet, BottomSheetBehavior], wildcard=false, alias=null)" ],
  "Iconify/207" : [ "viewModel.provideOnActivityResult(create(requestCode, resultCode, intent))", "import com.kickstarter.ui.data.ActivityResult\nimport com.kickstarter.libs.ActivityRequestCodes\nimport android.app.Activity\nfun provideOnActivityResult(activityResult: ActivityResult) {\r\n            callbackManager?.onActivityResult(\r\n                activityResult.requestCode(),\r\n                activityResult.resultCode(),\r\n                activityResult.intent()\r\n            )\r\n\r\n            if (activityResult.isRequestCode(ActivityRequestCodes.LOGIN_FLOW) &&\r\n                activityResult.resultCode() == Activity.RESULT_OK\r\n            ) {\r\n                finishWithSuccessfulResult.onNext(Unit)\r\n            }\r\n        }\nImport(names=[android, app, Activity], wildcard=false, alias=null)\nImport(names=[com, kickstarter, ui, data, ActivityResult], wildcard=false, alias=null)" ],
  "Trail-Sense/1651" : [ "        handleIntent(intent)\n        return super.onStartCommand(intent, flags, startId)\r\n    }", "import android.media.session.MediaSession\nimport android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        if (mediaSession == null) {\r\n            initMediaSession()\r\n        }\r\n        handleIntent(intent)\r\n        return super.onStartCommand(intent, flags, startId)\r\n    }\nimport android.content.Intent\nimport android.media.session.MediaSession" ],
  "Trail-Sense/576" : [ "", "import androidx.viewbinding.ViewBinding\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val viewBinding = getViewBinding(resourceId, parent)\r\n        val viewHolder = viewHolder(viewBinding)\r\n        viewHolder?.bindData(getItem(position))\r\n        return viewBinding.root\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)" ],
  "Iconify/689" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "MaterialFiles/136" : [ "            if (longArray?.isNotEmpty() == true) {\n                taskAdapter.setSelected(longArray.toList())\r\n                startActionMode()\n--------------------------------------------------\n                lifecycleScope.launch {\n                    setSelected(taskDao.fetchTasks(preferences, filter)\r\n                        .map(TaskContainer::id))\n--------------------------------------------------\n{\n        taskAdapter.setSelected(tasks)\r\n        updateModeTitle()\n--------------------------------------------------\n        onTaskCreated(duplicates)\n        setSelected(duplicates.map(Task::id))\r\n        makeSnackbar(R.string.copy_multiple_tasks_confirmation, duplicates.size.toString())?.show()\n--------------------------------------------------\nsetSelected(selectedDay = data?.getLongExtra(EXTRA_DAY, 0L) ?: NO_DAY, selectedTime = data?.getIntExtra(EXTRA_TIME, 0) ?: NO_TIME)\n--------------------------------------------------\nviewModel.setSelected(it, intent.getParcelableArrayListExtra(EXTRA_PARTIALLY_SELECTED))", "fun setSelected(selectedDay: Long, selectedTime: Int) {\r\n        _selectedDay.value = selectedDay\r\n        _selectedTime.value = selectedTime\r\n    }" ],
  "Trail-Sense/1656" : [ "{\n        super.onResume()\r\n        if (currentNightMode != nightMode || currentPro != inventory.hasPro) {\n--------------------------------------------------\n{\n        super.onResume()\r\n        if (showKeyboard) {\n--------------------------------------------------\nsuper.onResume()\n--------------------------------------------------\nmap.onResume()", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        updateSort()\r\n    }\nimport org.tasks.R" ],
  "Trail-Sense/1657" : [ "", "import androidx.preference.PreferenceManager\noverride fun onPause() {\r\n        super.onPause()\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit()\r\n            .putInt(ListsSettings.KEY_LAST_ACTIVE_LISTS_TAB, binding.viewPagerLists.currentItem)\r\n            .apply()\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "MaterialFiles/138" : [ "        if (grantResults.isNotEmpty() && permissions[0] == ACCESS_FINE_LOCATION && grantResults[0] == PERMISSION_GRANTED) {\n            viewModel.positionController.permissionGranted()\r\n            tryActivateLocationComponent()", "import androidx.core.location.LocationManagerCompat\nimport android.location.LocationManager\nimport android.location.Location\nfun permissionGranted() {\r\n        _positionState.value = if (LocationManagerCompat.isLocationEnabled(locationManager))\r\n            PositionState.ENABLED\r\n        else\r\n            PositionState.DISABLED\r\n    }" ],
  "Iconify/202" : [ "", "import org.tasks.preferences.Preferences\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        childFragmentManager.setFilterPickerResultListener(this) {\r\n            widgetPreferences.setFilter(defaultFilterProvider.getFilterPreferenceValue(it))\r\n            updateFilter()\r\n        }\r\n    }\nimport android.os.Bundle\nimport androidx.preference.Preference\nimport com.todoroo.astrid.api.Filter\nimport org.tasks.R\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.preferences.Preferences" ],
  "Iconify/203" : [ "", "import org.tasks.preferences.Preferences\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        childFragmentManager.setFilterPickerResultListener(this) {\r\n            widgetPreferences.setFilter(defaultFilterProvider.getFilterPreferenceValue(it))\r\n            updateFilter()\r\n        }\r\n    }\nimport android.os.Bundle\nimport androidx.preference.Preference\nimport com.todoroo.astrid.api.Filter\nimport org.tasks.R\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.preferences.Preferences" ],
  "Trail-Sense/1658" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "MaterialFiles/130" : [ "super.onActive()\n--------------------------------------------------\ncallback.onActive()", "import androidx.annotation.MainThread\n @MainThread\r\n    override fun onActive() {\r\n        super.onActive()\r\n        callback.onActive()\r\n    }" ],
  "Iconify/652" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/651" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/79" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    MmexApplication.getApp().iocComponent.inject(this);\r\n    if (showPrerequisite()) {\r\n        finish();\r\n        return;\r\n    }\r\n    Amplitude amplitude = MmexApplication.getAmplitude();\r\n    // todo: remove this after the users upgrade the recent files list.\r\n    migrateRecentDatabases();\r\n    // Reset the request for restart. If we are in onCreate, we are restarting already.\r\n    setRestartActivity(false);\r\n    // Layout\r\n    setContentView(R.layout.main_activity);\r\n    Toolbar toolbar = findViewById(R.id.toolbar);\r\n    if (toolbar != null)\r\n        setSupportActionBar(toolbar);\r\n    LinearLayout fragmentDetail = findViewById(R.id.fragmentDetail);\r\n    setDualPanel(fragmentDetail != null && fragmentDetail.getVisibility() == View.VISIBLE);\r\n    // Initialize current device orientation.\r\n    if (deviceOrientation == Constants.NOT_SET) {\r\n        deviceOrientation = getResources().getConfiguration().orientation;\r\n    }\r\n    // Intent. Opening from the notification or the file system.\r\n    handleIntent();\r\n    // Restore state. Check authentication, etc.\r\n    if (savedInstanceState != null) {\r\n        restoreInstanceState(savedInstanceState);\r\n    }\r\n    handleDeviceRotation();\r\n    // Close any existing notifications.\r\n    ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).cancel(SyncConstants.NOTIFICATION_SYNC_OPEN_FILE);\r\n    showCurrentDatabasePath(this);\r\n    // Read something from the database at this stage so that the db file gets created.\r\n    InfoService infoService = new InfoService(this);\r\n    String uid = infoService.getInfoValue(InfoKeys.UID);\r\n    if (uid == null || uid.isEmpty()) {\r\n        uid = \"android_\" + Instant.now().atZone(ZoneId.of(\"UTC\")).format(DateTimeFormatter.ofPattern(\"yyyyMMddHHmmssSSS\"));\r\n    }\r\n    amplitude.setUserId(uid);\r\n    infoService.setInfoValue(InfoKeys.UID, uid);\r\n    // fragments\r\n    initHomeFragment();\r\n    // start notification for recurring transaction\r\n    if (!isRecurringTransactionStarted) {\r\n        AppSettings settings = new AppSettings(this);\r\n        boolean showNotification = settings.getBehaviourSettings().getNotificationRecurringTransaction();\r\n        if (showNotification) {\r\n            RecurringTransactionNotifications notifications = new RecurringTransactionNotifications(this);\r\n            notifications.notifyRepeatingTransaction();\r\n            isRecurringTransactionStarted = true;\r\n        }\r\n    }\r\n    // notification send broadcast\r\n    Intent serviceRepeatingTransaction = new Intent(getApplicationContext(), RecurringTransactionBootReceiver.class);\r\n    getApplicationContext().sendBroadcast(serviceRepeatingTransaction);\r\n    initializeDrawer();\r\n    initializeSync();\r\n}\n--------------------------------------------------\n", "import android.app.NotificationManager;\r\nimport com.money.manager.ex.R\nimport android.content.Context\nimport android.app.NotificationManager\n@Override\r\nprotected void onDestroy() {\r\n    NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\n    if (notificationManager != null)\r\n        notificationManager.cancelAll();\r\n    super.onDestroy();\r\n}" ],
  "Trail-Sense/580" : [ "super.onViewCreated(view, savedInstanceState)", "import com.omgodse.notally.preferences.View\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        binding?.ImageView?.setImageResource(getBackground())\r\n\r\n        setupAdapter()\r\n        setupRecyclerView()\r\n        setupObserver()\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, preferences, View], wildcard=false, alias=ViewPref)" ],
  "Trail-Sense/581" : [ "", "import android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport it.feio.android.omninotes.databinding.FragmentDetailBinding;\r\nimport it.feio.android.omninotes.databinding.FragmentDetailBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    binding = FragmentDetailBinding.inflate(inflater, container, false);\r\n    return binding.getRoot();\r\n}" ],
  "Trail-Sense/100" : [ "list.getTracks()", "import org.videolan.medialibrary.media.MediaLibraryItem\nimport org.videolan.medialibrary.interfaces.media\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nprivate suspend fun List<MediaLibraryItem>.getTracks() = withContext(Dispatchers.Default) {\r\n        ArrayList<MediaWrapper>().apply {\r\n            for (mediaItem in this@getTracks) addAll(Arrays.asList(*mediaItem.tracks))\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/659" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/585" : [ "updateActionBarTitle()", "import com.simplemobiletools.calendar.pro.R\nprivate fun updateActionBarTitle() {\r\n        binding.eventToolbar.title = if (mIsNewEvent) {\r\n            getString(R.string.new_event)\r\n        } else {\r\n            getString(R.string.edit_event)\r\n        }\r\n    }" ],
  "Trail-Sense/74" : [ "static int getMessageCount(Folder folder) {\r\n    try {\r\n        // Prevent pool lock\r\n        if (folder instanceof IMAPFolder) {\r\n            int count = ((IMAPFolder) folder).getCachedCount();\r\n            Log.i(folder.getFullName() + \" total count=\" + count);\r\n            return count;\r\n        }\r\n        int count = 0;\r\n        for (Message message : folder.getMessages()) if (!message.isExpunged())\r\n            count++;\r\n        return count;\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n        return -1;\r\n    }\r\n}\n--------------------------------------------------\n", "public synchronized int getCachedCount() {\r\n    synchronized (messageCacheLock) {\r\n        if (messageCache == null)\r\n            return -1;\r\n        return messageCache.getCount();\r\n    }\r\n}" ],
  "Trail-Sense/586" : [ "currentNotesView()\n--------------------------------------------------\ncurrentNotesView()?.let { noteView ->\n    noteView.text!!.clearBackgroundSpans()\n}\n--------------------------------------------------\ncurrentNotesView()?.let { noteView ->\n    noteView.requestFocus()\n    noteView.setSelection(0)\n}", "import com.simplemobiletools.notes.pro.models.Note\nprivate fun currentNotesView() = if (binding.viewPager == null) {\r\n        null\r\n    } else {\r\n        mAdapter?.getCurrentNotesView(binding.viewPager.currentItem)\r\n    }" ],
  "MaterialFiles/147" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/656" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/72" : [ "static int getMessageCount(Folder folder) {\r\n    try {\r\n        // Prevent pool lock\r\n        if (folder instanceof IMAPFolder) {\r\n            int count = ((IMAPFolder) folder).getCachedCount();\r\n            Log.i(folder.getFullName() + \" total count=\" + count);\r\n            return count;\r\n        }\r\n        int count = 0;\r\n        for (Message message : folder.getMessages()) if (!message.isExpunged())\r\n            count++;\r\n        return count;\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n        return -1;\r\n    }\r\n}\n--------------------------------------------------\n", "public synchronized int getCachedCount() {\r\n    synchronized (messageCacheLock) {\r\n        if (messageCache == null)\r\n            return -1;\r\n        return messageCache.getCount();\r\n    }\r\n}" ],
  "Trail-Sense/104" : [ "", "import android.os.Bundle;\r\nimport android.os.Bundle\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_stats);\r\n    initData();\r\n}" ],
  "MaterialFiles/146" : [ "listener.onLongClick(adapterPosition)", "import com.omgodse.notally.room.BaseNote\noverride fun onLongClick(position: Int) {\r\n        if (position != -1) {\r\n            adapter?.currentList?.get(position)?.let { item ->\r\n                if (item is BaseNote) {\r\n                    handleNoteSelection(item.id, position, item)\r\n                }\r\n            }\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, room, BaseNote], wildcard=false, alias=null)" ],
  "Trail-Sense/589" : [ "GetContent(findNavController())", "import io.horizontalsystems.core.parcelable\nimport io.horizontalsystems.bankwallet.modules.contacts.model.Contact\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.NavController\nimport androidx.compose.runtime.Composable\n @Composable\r\n    override fun GetContent(navController: NavController) {\r\n        ContactsNavHost(\r\n            navController = navController,\r\n            mode = arguments?.parcelable(modeKey) ?: Mode.Full\r\n        )\r\n    }\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.NavHost\nimport io.horizontalsystems.bankwallet.modules.contacts.model.Contact\nimport io.horizontalsystems.core.parcelable" ],
  "Iconify/654" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/106" : [ "@Override\r\nprotected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n    webView.restoreState(savedInstanceState);\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onRestoreInstanceState(Parcelable state) {\r\n    SavedState savedState = (SavedState) state;\r\n    super.onRestoreInstanceState(savedState.getSuperState());\r\n    this.startXs = savedState.startXs;\r\n    this.colors = savedState.colors;\r\n    invalidate();\r\n}\n--------------------------------------------------\n", "import android.os.Bundle;\r\nimport androidx.annotation.NonNull;\r\nimport ml.docilealligator.infinityforreddit.R\nimport androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n    webView.restoreState(savedInstanceState);\r\n}" ],
  "Trail-Sense/108" : [ "@Override\r\npublic boolean onNavigateUp() {\r\n    onBackPressed();\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            break;\r\n        case R.id.menu_gallery_share:\r\n            shareMedia();\r\n            break;\r\n        case R.id.menu_gallery:\r\n            viewMedia();\r\n            break;\r\n        default:\r\n            LogDelegate.e(\"Wrong element choosen: \" + item.getItemId());\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment\n@Override\r\npublic void onBackPressed() {\r\n    if (!backStack.isEmpty()) {\r\n        replaceFragment(backStack.remove(backStack.size() - 1));\r\n    } else {\r\n        super.onBackPressed();\r\n    }\r\n}" ],
  "QuickNovel/108" : [ "it.parseToDouble()\n--------------------------------------------------\nit.second.parseToDouble()\n--------------------------------------------------\nbonusAmount.parseToDouble()\n--------------------------------------------------\nb.parseToDouble()\n--------------------------------------------------\nbAmount.parseToDouble()", "import java.text.NumberFormat\nimport com.braze.support.emptyToNull\nfun String?.parseToDouble(): Double {\r\n    val format = NumberFormat.getInstance()\r\n    try {\r\n        this?.emptyToNull()?.let {\r\n            val number = format.parse(it)\r\n            return number?.toDouble() ?: 0.0\r\n        } ?: return 0.0\r\n    } catch (t: Throwable) {\r\n        return 0.0\r\n    }\r\n}\nImport(names=[java, text, NumberFormat], wildcard=false, alias=null)" ],
  "MaterialFiles/140" : [ "{\r\n        synchronizer.close()\r\n    }\n--------------------------------------------------\nresponse.close()\n--------------------------------------------------\nfis.close()\n--------------------------------------------------\nbufferedReader.close()\n--------------------------------------------------\nps.close()\n--------------------------------------------------\nstmOut.close()\n--------------------------------------------------\ninpStream.close()\n--------------------------------------------------\nzis?.close()\n--------------------------------------------------\nout.close()\n--------------------------------------------------\nstream.close()\n--------------------------------------------------\nzipFile.close()\n--------------------------------------------------\nsocket.close()\n--------------------------------------------------\nclose()", "override fun close() {\r\n        super.close()\r\n        onCancelled?.invoke()\r\n    }" ],
  "VinylMusicPlayer/19" : [ "onBindViewHolder(holder, position)", "import com.omgodse.notally.recyclerview.viewholder.ErrorVH\noverride fun onBindViewHolder(holder: ErrorVH, position: Int) {\r\n        val error = items[position]\r\n        holder.bind(error)\r\n    }\nImport(names=[com, omgodse, notally, recyclerview, viewholder, ErrorVH], wildcard=false, alias=null)" ],
  "QuickNovel/105" : [ "UnaryCriterion.eq(this, value)\n--------------------------------------------------\n                        containerColor = MaterialTheme.colors.surface,\n                        onDismissRequest = { viewModel.setDrawerOpen(false) }\r\n                    ) {\n--------------------------------------------------\n                                    DrawerAction.SETTINGS ->\n                                        settingsRequest.launch(\r\n                                            Intent(\n--------------------------------------------------\n{\n        when (requestCode) {\r\n            REQUEST_NEW_LIST ->\n--------------------------------------------------\n            else ->\n                super.onActivityResult(requestCode, resultCode, data)\r\n        }\n--------------------------------------------------\nTask.UUID.eq(ids[i])\n--------------------------------------------------\nTask.ID.eq(field(\"$TAGS_METADATA_JOIN.task\"))\n--------------------------------------------------\nTask.PARENT.eq(task.id)", "fun eq(value: Any?): Criterion = if (value == null) {\r\n        UnaryCriterion.isNull(this)\r\n    } else {\r\n        UnaryCriterion.eq(this, value)\r\n    }" ],
  "QuickNovel/106" : [ "        // coming from multiple sources.\n        NdkPluginCaller.setStaticData(mapOf(\"usage\" to mapOf(\"config\" to configDifferences)))\r\n    }", "fun setStaticData(data: Map<String, Any>) {\r\n        val method = setStaticData\r\n        if (method != null) {\r\n            method.invoke(ndkPlugin, data)\r\n        }\r\n    }" ],
  "VinylMusicPlayer/14" : [ "receiveColor(currentColorReceiver!!, currentColorReceiverPosition)\n--------------------------------------------------\nfragment.receiveColor(colorReceiver, position)\n--------------------------------------------------\n(binding.viewPager.adapter as AlbumCoverPagerAdapter).receiveColor(colorReceiver, position)", "import code.name.monkey.retromusic.R\nimport androidx.fragment.app.Fragment\nfun receiveColor(colorReceiver: AlbumCoverFragment.ColorReceiver, position: Int) {\n\n        if (getFragment(position) is AlbumCoverFragment) {\n            val fragment = getFragment(position) as AlbumCoverFragment\n            currentColorReceiver = null\n            currentColorReceiverPosition = -1\n            fragment.receiveColor(colorReceiver, position)\n        } else {\n            currentColorReceiver = colorReceiver\n            currentColorReceiverPosition = position\n        }\n    }" ],
  "VinylMusicPlayer/12" : [ "onBindViewHolder(holder, position)", "import com.omgodse.notally.room.Color\nimport com.omgodse.notally.recyclerview.viewholder.ColorVH\noverride fun onBindViewHolder(holder: ColorVH, position: Int) {\r\n        val color = colors[position]\r\n        holder.bind(color)\r\n    }\nImport(names=[com, omgodse, notally, recyclerview, viewholder, ColorVH], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, Color], wildcard=false, alias=null)" ],
  "QuickNovel/102" : [ "", "import org.tasks.R\nimport androidx.compose.foundation.layout.padding\nimport android.view.View\nprivate fun setTopPadding(padding: Int, vararg views: View) {\r\n        for (v in views) {\r\n            v.setPaddingRelative(v.paddingStart, padding, v.paddingEnd, v.paddingBottom)\r\n        }\r\n    }\nimport android.view.View\nimport androidx.compose.foundation.layout.padding\nimport org.tasks.R" ],
  "Iconify/663" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/662" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/661" : [ "updateEventColorInfo(defaultColor = defaultColor)\n--------------------------------------------------\nupdateEventColorInfo(eventType.color)\n--------------------------------------------------\nupdateEventColorInfo(calendarColor)", "private fun updateEventColorInfo(defaultColor: Int) {\r\n        val eventColor = if (mEventColor == 0) {\r\n            defaultColor\r\n        } else {\r\n            mEventColor\r\n        }\r\n        binding.eventColor.setFillWithStroke(eventColor, getProperBackgroundColor())\r\n    }" ],
  "Iconify/660" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/592" : [ "checksum.update(buffer.array())\n--------------------------------------------------\nplaylistAdapter.update(it)\n--------------------------------------------------\nstate.update(pos, VLCOptions.getEqualizerSavedState(activity))\n--------------------------------------------------\nstate.update(presetCount + customCount, false)\n--------------------------------------------------\nstate.update(pos, false)\n--------------------------------------------------\nstate.update(allSets.indexOf(newName), true)\n--------------------------------------------------\nstate.update(0, true)\n--------------------------------------------------\nstate.update(revertPos, true)\n--------------------------------------------------\nstate.update(pos, true)\n--------------------------------------------------\nif (!isEmpty()) update(ArrayList(0))\n--------------------------------------------------\nadapter.update(mediaLibraryItems!!)\n--------------------------------------------------\nstorageBrowserAdapter.update(it)\n--------------------------------------------------\nfavoritesAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(filtered)\n--------------------------------------------------\nadapter.update(it)\n--------------------------------------------------\nadapter.update(renderers)\n--------------------------------------------------\nupdate(dataset, finalList)\n--------------------------------------------------\nadapter.update(bookmarkList)\n--------------------------------------------------\nadapter.update(bookmarks)\n--------------------------------------------------\n(recyclerview.adapter as OptionsAdapter).update(options)\n--------------------------------------------------\nhistoryAdapter.update(it)\n--------------------------------------------------\nstreamsAdapter.update(it)\n--------------------------------------------------\nmd.update(input.toByteArray())\n--------------------------------------------------\noverlayDelegate.playlistAdapter.update(mediaWrappers)\n--------------------------------------------------\nplaylistModel?.update()\n--------------------------------------------------\nplayer.update()\n--------------------------------------------------\ncallback.update()\n--------------------------------------------------\nwidgetDao.update(widget)\n--------------------------------------------------\nmd.update(certificate)\n--------------------------------------------------\nupdate()", "fun update(oldList: List<D>, newList: List<D>) {\r\n            this.oldList = oldList\r\n            this.newList = newList\r\n        }" ],
  "Trail-Sense/88" : [ "super.onSaveInstanceState(outState)", "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(KEY_STATE, state)\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Trail-Sense/89" : [ "val tv = showTvUi()", "import org.videolan.tools.Settings\nimport org.videolan.tools.KEY_CURRENT_SETTINGS_VERSION\nimport org.videolan.resources.AndroidDevices\nprivate fun showTvUi(): Boolean {\r\n        val settings = Settings.getInstance(this)\r\n        //because the [VersionMigration] is done after the first call to this method, we have to keep the old implementation for people coming from an older version of the app\r\n        if (settings.getInt(KEY_CURRENT_SETTINGS_VERSION, 0) < 5) return AndroidDevices.isAndroidTv || !AndroidDevices.isChromeBook && !AndroidDevices.hasTsp ||\r\n                settings.getBoolean(\"tv_ui\", false)\r\n        return  settings.getBoolean(\"tv_ui\", false)\r\n    }\nImport(names=[org, videolan, resources, AndroidDevices], wildcard=false, alias=null)\nImport(names=[org, videolan, tools, Settings], wildcard=false, alias=null)" ],
  "Trail-Sense/594" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/595" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/112" : [ "                                navController.ensurePinSet(R.string.PinSet_ForBiometrics) {\n                                    viewModel.enableBiometrics()\r\n                                }", "fun enableBiometrics() {\r\n        pinComponent.isBiometricAuthEnabled = true\r\n        emitState()\r\n    }" ],
  "MaterialFiles/156" : [ "super.onCancel(dialog)", "import com.battlelancer.seriesguide.backend.RemoveCloudAccountDialogFragment.CanceledEvent\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCancel(dialog: DialogInterface) {\r\n        super.onCancel(dialog)\r\n        sendCanceledEvent()\r\n    }\nImport(names=[android, app, Dialog], wildcard=false, alias=null)\nImport(names=[android, content, DialogInterface], wildcard=false, alias=null)" ],
  "Trail-Sense/596" : [ "                        .fillMaxWidth()\n                        .wrapContentHeight()\r\n                        .padding(end = 16.dp),\n--------------------------------------------------\n            .fillMaxWidth()\n            .wrapContentHeight()\r\n            .padding(\n--------------------------------------------------\nthemeBase.wrap(context)", "import android.content.Context\nprivate fun wrap(context: Context): Context {\r\n        val wrapper = themeBase.wrap(context)\r\n        applyToContext(wrapper)\r\n        return wrapper\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/113" : [ "pinManager.disablePin(userManager.getUserLevel())\n--------------------------------------------------\n{\n        pinComponent.disablePin()\r\n        pinComponent.isBiometricAuthEnabled = false", "fun disablePin() {\r\n        pinComponent.disablePin()\r\n        pinComponent.isBiometricAuthEnabled = false\r\n        emitState()\r\n    }" ],
  "Trail-Sense/85" : [ "super.onActivityResult(requestCode, resultCode, intent)\n--------------------------------------------------\nsuper.onActivityResult(requestCode, resultCode, data)", "import android.content.Intent\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == SEND_CRASH_RESULT) {\r\n            resume()\r\n        }\r\n        if (requestCode == PROPAGATE_RESULT) {\r\n            setResult(resultCode, data)\r\n            finish()\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "MaterialFiles/158" : [ "@Override\r\nprotected List<NavigationItem> doInBackground(Void... params) {\r\n    return buildMainMenu();\r\n}\n--------------------------------------------------\nprivate void refreshMenus() {\r\n    buildMainMenu();\r\n    LogDelegate.v(\"Finished main menu initialization\");\r\n    buildCategoriesMenu();\r\n    LogDelegate.v(\"Finished categories menu initialization\");\r\n    mDrawerToggle.syncState();\r\n}\n--------------------------------------------------\n", "import it.feio.android.omninotes.async.MainMenuTask;\r\nimport it.feio.android.omninotes.async.MainMenuTask\nimport android.os.AsyncTask\nprivate void buildMainMenu() {\r\n    MainMenuTask task = new MainMenuTask(this);\r\n    task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\r\n}" ],
  "Trail-Sense/82" : [ "setWidth()", "import androidx.core.view.updateLayoutParams\nimport android.view.ViewGroup\nprivate fun setWidth() {\n        val width = resources.displayMetrics.widthPixels * 0.8\n        binding.root.updateLayoutParams<ViewGroup.LayoutParams> { this.width = width.toInt() }\n    }" ],
  "Iconify/667" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/599" : [ "scaleDetector.onTouchEvent(motionEvent)\n--------------------------------------------------\ngestureDetector.onTouchEvent(motionEvent)\n--------------------------------------------------\nsuper.onTouchEvent(event)", "import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n        return if (isScrollable) {\r\n            super.onTouchEvent(event)\r\n        } else {\r\n            true\r\n        }\r\n    }\nImport(names=[android, view, MotionEvent], wildcard=false, alias=null)" ],
  "Trail-Sense/83" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/118" : [ "updateDependencies(context)", "import org.isoron.uhabits.core.preferences.Preferences\nimport org.isoron.uhabits.core.models.Habit\nimport org.isoron.uhabits.HabitsApplication\nimport android.content.Context\nprivate fun updateDependencies(context: Context) {\r\n        val app = context.applicationContext as HabitsApplication\r\n        habits = app.component.habitList\r\n        preferences = app.component.preferences\r\n        widgetPrefs = app.component.widgetPreferences\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, HabitsApplication], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, core, models, Habit], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/22" : [ "receiveColor(currentColorReceiver!!, currentColorReceiverPosition)\n--------------------------------------------------\nfragment.receiveColor(colorReceiver, position)\n--------------------------------------------------\n(binding.viewPager.adapter as AlbumCoverPagerAdapter).receiveColor(colorReceiver, position)", "import code.name.monkey.retromusic.R\ninternal fun receiveColor(colorReceiver: ColorReceiver, request: Int) {\n            if (isColorReady) {\n                colorReceiver.onColorReady(color, request)\n            } else {\n                this.colorReceiver = colorReceiver\n                this.request = request\n            }\n        }" ],
  "VinylMusicPlayer/21" : [ "setColor(c)\n--------------------------------------------------\nbinding.frequencyChart.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreRing.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreView.setColor(androidColor)\n--------------------------------------------------\nbinding.streakChart.setColor(androidColor)\n--------------------------------------------------\nbinding.targetChart.setColor(androidColor)\n--------------------------------------------------\nsetColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nchart.setColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nring.setColor(fgColor)", "import android.graphics.Color\nfun setColor(color: Int) {\r\n        this.color = color\r\n        invalidate()\r\n    }" ],
  "Trail-Sense/119" : [ "startService(intent)\n--------------------------------------------------\ncontext.startService(serviceIntent)\n--------------------------------------------------\nstartService(context, command)\n--------------------------------------------------\ncontext.startService(intent)", "import androidx.core.content.ContextCompat\nimport android.content.Intent\nimport android.content.Context\nprivate fun startService(context: Context, command: String?) {\n            val intent = Intent(context, MusicService::class.java)\n            intent.action = command\n            try {\n                context.startService(intent)\n            } catch (e: Exception) {\n                ContextCompat.startForegroundService(context, intent)\n            }\n        }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/20" : [ "loadAlbumCover(album, holder)\n--------------------------------------------------\nloadAlbumCover(albumCover = view.findViewById(R.id.player_image))\n--------------------------------------------------\nloadAlbumCover(song, holder)\n--------------------------------------------------\nloadAlbumCover(album)", "import com.bumptech.glide.Glide\nimport code.name.monkey.retromusic.util.color.MediaNotificationProcessor\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.glide.RetroMusicColoredTarget\nimport code.name.monkey.retromusic.glide.RetroGlideExtension.songCoverOptions\nimport code.name.monkey.retromusic.glide.RetroGlideExtension.asBitmapPalette\nimport code.name.monkey.retromusic.glide.RetroGlideExtension\nimport code.name.monkey.retromusic.R\nimport android.widget.ImageView\nimport android.view.View\nprivate fun loadAlbumCover(albumCover: ImageView) {\n            Glide.with(this)\n                .asBitmapPalette()\n                .songCoverOptions(song)\n                //.checkIgnoreMediaStore()\n                .load(RetroGlideExtension.getSongModel(song))\n                .dontAnimate()\n                .into(object : RetroMusicColoredTarget(albumCover) {\n                    override fun onColorReady(colors: MediaNotificationProcessor) {\n                        setColor(colors)\n                    }\n                })\n        }\nImport(names=[android, widget, ImageView], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, R], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, glide, RetroMusicColoredTarget], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, util, color, MediaNotificationProcessor], wildcard=false, alias=null)\nImport(names=[com, bumptech, glide, Glide], wildcard=false, alias=null)" ],
  "MaterialFiles/150" : [ "", "import org.tasks.R\nimport android.os.Bundle\nimport android.content.Intent\nimport android.accounts.AccountManager\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        val chooseAccountIntent = AccountManager.newChooseAccountIntent(\r\n                null, null, arrayOf(\"com.google\"), null, null, null, null)\r\n        startActivityForResult(chooseAccountIntent, RC_CHOOSE_ACCOUNT)\r\n    }\nImport(names=[android, accounts, AccountManager], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[org, tasks, R], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/27" : [ "onBindViewHolder(holder, position)", "import com.omgodse.notally.room.Color\nimport com.omgodse.notally.recyclerview.viewholder.ColorVH\noverride fun onBindViewHolder(holder: ColorVH, position: Int) {\r\n        val color = colors[position]\r\n        holder.bind(color)\r\n    }\nImport(names=[com, omgodse, notally, recyclerview, viewholder, ColorVH], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, Color], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/24" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/23" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/113" : [ "", "import org.tasks.R\nimport androidx.compose.foundation.layout.padding\nimport android.view.View\nprivate fun setTopPadding(padding: Int, vararg views: View) {\r\n        for (v in views) {\r\n            v.setPaddingRelative(v.paddingStart, padding, v.paddingEnd, v.paddingBottom)\r\n        }\r\n    }\nimport android.view.View\nimport androidx.compose.foundation.layout.padding\nimport org.tasks.R" ],
  "Iconify/233" : [ "buildInfoString(resources.getString(R.string.up_next), MusicUtil.getReadableDurationString(duration))\n--------------------------------------------------\nMusicUtil.buildInfoString(songCountString, \"\")", "fun buildInfoString(string1: String?, string2: String?): String {\n        if (string1.isNullOrEmpty()) {\n            return if (string2.isNullOrEmpty()) \"\" else string2\n        }\n        return if (string2.isNullOrEmpty()) if (string1.isNullOrEmpty()) \"\" else string1 else \"$string1  •  $string2\"\n    }" ],
  "Iconify/231" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/120" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/8" : [ "{\n        super.onResume()\r\n        if (currentNightMode != nightMode || currentPro != inventory.hasPro) {\n--------------------------------------------------\n{\n        super.onResume()\r\n        if (showKeyboard) {\n--------------------------------------------------\nsuper.onResume()\n--------------------------------------------------\nmap.onResume()", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        updateSort()\r\n    }\nimport org.tasks.R" ],
  "Neo-Backup/376" : [ "kit.refresh()\n--------------------------------------------------\n{\r\n        eip20Kit.refresh()\r\n    }\n--------------------------------------------------\nit.refresh()\n--------------------------------------------------\nevmBlockchainManager.getEvmKitManager(blockchain.type).evmKitWrapper?.evmKit?.refresh()\n--------------------------------------------------\nbinanceKitManager.binanceKit?.refresh()\n--------------------------------------------------\nsolanaKitManager.solanaKitWrapper?.solanaKit?.refresh()\n--------------------------------------------------\ntronKitManager.tronKitWrapper?.tronKit?.refresh()\n--------------------------------------------------\nadaptersMap[wallet]?.refresh()\n--------------------------------------------------\nadapterManager.refresh()\n--------------------------------------------------\nrefresh()\n--------------------------------------------------\nservice.refresh()\n--------------------------------------------------\nviewModel.refresh()\n--------------------------------------------------\nnftMetadataSyncer.refresh()\n--------------------------------------------------\nMarketWidgetManager().refresh(glanceId)\n--------------------------------------------------\nrefresh(glanceId)\n--------------------------------------------------\nmarketWidgetManager.refresh(glanceId)", "fun refresh() {\r\n        stop()\r\n        start()\r\n    }" ],
  "BCR/32" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/377" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/374" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/33" : [ "adapter.getItem(position)\n--------------------------------------------------\nsortedCountries[it].getItem()\n--------------------------------------------------\nnetworks[it].getItem()", "import androidx.fragment.app.Fragment\noverride fun getItem(i: Int): Fragment {\r\n            return when (i) {\r\n                0 -> ContributorFragment()\r\n                1 -> TranslatorsFragment()\r\n                else -> throw IllegalArgumentException()\r\n            }\r\n        }\nImport(names=[androidx, fragment, app, Fragment], wildcard=false, alias=null)" ],
  "Trail-Sense/520" : [ "startService(intent)\n--------------------------------------------------\ncontext.startService(serviceIntent)\n--------------------------------------------------\nstartService(context, command)\n--------------------------------------------------\ncontext.startService(intent)", "import androidx.core.content.ContextCompat\nimport android.content.Intent\nimport android.content.Context\nprivate fun startService(context: Context, command: String?) {\n            val intent = Intent(context, MusicService::class.java)\n            intent.action = command\n            try {\n                context.startService(intent)\n            } catch (e: Exception) {\n                ContextCompat.startForegroundService(context, intent)\n            }\n        }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)" ],
  "MaterialFiles/169" : [ "_tripsRepository.toggleFavState()", "import de.schildbach.pte.dto.Trip\nimport de.grobox.transportr.R\nfun toggleFavState() {\r\n        val oldFavState = isFavTrip.value\r\n        if (uid == 0L || oldFavState == null) throw IllegalStateException()\r\n        searchesRepository.updateFavoriteState(uid, !oldFavState)\r\n        isFavTrip.value = !oldFavState\r\n    }" ],
  "Iconify/238" : [ "public static String decrypt(String seed, String encrypted) throws Exception {\r\n    byte[] rawKey = getRawKey(seed.getBytes());\r\n    byte[] enc = toByte(encrypted);\r\n    byte[] result = decrypt(rawKey, enc);\r\n    return new String(result);\r\n}\n--------------------------------------------------\npublic static String fromHex(String hex) {\r\n    return new String(toByte(hex));\r\n}\n--------------------------------------------------\n", "public static byte[] toByte(String hexString) {\r\n    int len = hexString.length() / 2;\r\n    byte[] result = new byte[len];\r\n    for (int i = 0; i < len; i++) result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\r\n    return result;\r\n}" ],
  "Trail-Sense/522" : [ "override fun onPause() {\n    super.onPause()\n    localBroadcastManager.unregisterReceiver(purchaseReceiver)\n}", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n        localBroadcastManager.registerPurchaseReceiver(purchaseReceiver)\r\n        localBroadcastManager.registerRefreshListReceiver(purchaseReceiver)\r\n    }" ],
  "Neo-Backup/378" : [ "storage.delete(id)\n--------------------------------------------------\ncexAssetsDao.delete(account.id)\n--------------------------------------------------\ndao.delete(coinUid)\n--------------------------------------------------\ndao.delete(id)\n--------------------------------------------------\ndao.delete(blockchainTypeUid, url)\n--------------------------------------------------\ndao.delete(accountId)\n--------------------------------------------------\nfileTorRcCustom.delete()\n--------------------------------------------------\nwalletManager.delete(listOf(wallet))\n--------------------------------------------------\nrepository.delete(contact.uid)\n--------------------------------------------------\nwalletManager.delete(listOf(it))", "import java.io.File\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.update\nfun delete(id: String) {\r\n        contactsMap.remove(id)\r\n        _contactsFlow.update { contacts }\r\n\r\n        coroutineScope.launch {\r\n            writeToFile()\r\n        }\r\n    }\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport java.io.File" ],
  "BCR/30" : [ "                                intent.data = uri\n                                startActivity(intent)\n                            }.setActionTextColor(accentColor()).show()\n--------------------------------------------------\n        if (!hasPermissions()) {\n            startActivity(Intent(this, PermissionActivity::class.java))\n            finish()\n--------------------------------------------------\n                }\n                start()\n            }\n--------------------------------------------------\nprogressViewUpdateHelper.start()\n--------------------------------------------------\nanimate().translationY(0f).alpha(1f).setDuration(1500).start()\n--------------------------------------------------\nstart()\n--------------------------------------------------\ntimerUpdater.start()\n--------------------------------------------------\nupdateHelper.start()\n--------------------------------------------------\nanimator.start()\n--------------------------------------------------\nprogressViewUpdateHelper?.start()\n--------------------------------------------------\nvalueAnimator?.setDuration(ViewUtil.RETRO_MUSIC_ANIM_TIME.toLong())?.start()\n--------------------------------------------------\ndrawable.start()\n--------------------------------------------------\nObjectAnimator.ofFloat(viewPager, View.ALPHA, if (visible) 0F else 1F).start()\n--------------------------------------------------\nObjectAnimator.ofFloat(viewPager, View.ALPHA, 1F).start()\n--------------------------------------------------\nanimatorSet.start()\n--------------------------------------------------\nstopWatch.start()\n--------------------------------------------------\nrollAnimator.start()", "import android.media.MediaPlayer\noverride fun start(): Boolean {\n        super.start()\n        return try {\n            mCurrentMediaPlayer.start()\n            true\n        } catch (e: IllegalStateException) {\n            false\n        }\n    }\nimport android.media.MediaPlayer" ],
  "Trail-Sense/1605" : [ "viewModel.reset()\n--------------------------------------------------\nfeeService.reset()\n--------------------------------------------------\nnonceService.reset()\n--------------------------------------------------\nservice.reset()", "suspend fun reset() {\r\n        feeService.reset()\r\n        nonceService.reset()\r\n    }" ],
  "VinylMusicPlayer/33" : [ "        if (item?.itemId == R.id.action_multi_select_adapter_check_all) {\n            checkAll()\n        } else {", "private fun checkAll() {\n        if (actionMode != null) {\n            checked.clear()\n            for (i in 0 until itemCount) {\n                val identifier = getIdentifier(i)\n                if (identifier != null) {\n                    checked.add(identifier)\n                }\n            }\n            notifyDataSetChanged()\n            updateCab()\n        }\n    }" ],
  "VinylMusicPlayer/32" : [ "toggleChecked(layoutPosition)\n--------------------------------------------------\nreturn toggleChecked(layoutPosition)\n--------------------------------------------------\ntoggleChecked(position)\n--------------------------------------------------\nisPositionInRange(position) && toggleChecked(position)", "protected fun toggleChecked(position: Int): Boolean {\n        val identifier = getIdentifier(position) ?: return false\n        if (!checked.remove(identifier)) {\n            checked.add(identifier)\n        }\n        notifyItemChanged(position)\n        updateCab()\n        return true\n    }" ],
  "Trail-Sense/1604" : [ "invalidateActionMode()\n--------------------------------------------------\nif (actionMode == null) startActionMode() else invalidateActionMode()", "import androidx.appcompat.view.ActionMode\nprivate fun invalidateActionMode() {\r\n        if (actionMode != null)\r\n            actionMode!!.invalidate()\r\n    }" ],
  "QuickNovel/129" : [ "apiClientType.updateUserSettings(updatedUser)\n--------------------------------------------------\nthis.apiClient.updateUserSettings(user)\n--------------------------------------------------\nthis.client.updateUserSettings(user)", "import rx.Observable\nimport com.kickstarter.models.User\nimport com.kickstarter.mock.factories.UserFactory.user\noverride fun updateUserSettings(user: User): Observable<User> {\r\n        val map: Map<String, Any> = mapOf(Pair(\"user\", user))\r\n        observable.onNext(\r\n            Pair(\"update_user_settings\", map)\r\n        )\r\n        return Observable.just(user)\r\n    }\nImport(names=[com, kickstarter, mock, factories, UserFactory, user], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, User], wildcard=false, alias=null)\nImport(names=[rx, Observable], wildcard=false, alias=null)" ],
  "BCR/25" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/24" : [ "super.onStop()\n--------------------------------------------------\nsuperDelegate.onStop()", "import androidx.appcompat.view.ActionMode\noverride fun onStop() {\r\n        super.onStop()\r\n        stopActionMode()\r\n    }" ],
  "BCR/27" : [ "super.onClick(v, position, item)\n--------------------------------------------------\neventsHandler.onClick(v, layoutPosition, it)\n--------------------------------------------------\nonClick(v, position, item)\n--------------------------------------------------\nbrowserContainer.onClick(v, position, dataset[position])\n--------------------------------------------------\nsuper.onClick(v)\n--------------------------------------------------\nclickListener.onClick(view)\n--------------------------------------------------\nclickListener.onClick(downView)\n--------------------------------------------------\nonClick(dataset[layoutPosition])\n--------------------------------------------------\nis SimpleClick -> onClick(position, item)\n--------------------------------------------------\nif (actionMode != null) onClick(position, item) else onLongClick(position, item)\n--------------------------------------------------\nonClick(it)\n--------------------------------------------------\nonClick(position, item)", "import android.content.DialogInterface\noverride fun onClick(dialog: DialogInterface?, index: Int, isChecked: Boolean) {\r\n        if (index < selection.size) {\r\n            selection[index] = isChecked\r\n        } else  throw IllegalArgumentException(\"Argument 'index' is out of bounds.\")\r\n        updateBadge()\r\n    }\nImport(names=[android, content, DialogInterface], wildcard=false, alias=null)" ],
  "BCR/26" : [ "adapter.getItem(position)\n--------------------------------------------------\nsortedCountries[it].getItem()\n--------------------------------------------------\nnetworks[it].getItem()", "import androidx.fragment.app.Fragment\noverride fun getItem(i: Int): Fragment {\r\n            return when (i) {\r\n                0 -> ContributorFragment()\r\n                1 -> TranslatorsFragment()\r\n                else -> throw IllegalArgumentException()\r\n            }\r\n        }\nImport(names=[androidx, fragment, app, Fragment], wildcard=false, alias=null)" ],
  "Trail-Sense/1608" : [ "            disconnect = getDisconnectButtonState(state, connection),\n            cancel = getCancelButtonState(state),\r\n            remove = getRemoveButtonState(state, connection),", "import io.horizontalsystems.bankwallet.modules.walletconnect.session.v2.WC2SessionServiceState.Ready\nimport io.horizontalsystems.bankwallet.R\nprivate fun getCancelButtonState(state: WC2SessionServiceState): WCButtonState {\r\n        return if (state != Ready) {\r\n            WCButtonState.Enabled\r\n        } else {\r\n            WCButtonState.Hidden\r\n        }\r\n    }\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.modules.walletconnect.session.v2.WC2SessionServiceState.Ready" ],
  "Trail-Sense/7" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/6" : [ "updateStartTexts()", "private fun updateStartTexts() {\r\n        updateStartDateText()\r\n        updateStartTimeText()\r\n    }" ],
  "fcitx5-android/201" : [ "binding.targetChart.setValues(state.values)\n--------------------------------------------------\nchart.setValues(data.values)", "fun setValues(values: List<Double>) {\r\n        this.values = values\r\n        requestLayout()\r\n    }" ],
  "Trail-Sense/5" : [ "override fun onResume() {\n    super.onResume()\n    updateHelper.start()\n}", "override fun onPause() {\n        super.onPause()\n        updateHelper.stop()\n    }" ],
  "QuickNovel/127" : [ "        }\n        val deleteIntent = Intent(context, NotificationClearedReceiver::class.java)\r\n        deleteIntent.putExtra(EXTRA_NOTIFICATION_ID, notificationId)", "import kotlinx.coroutines.runBlocking\noverride fun onCleared() {\r\n        if (!cleared) {\r\n            runBlocking {\r\n                save(remove = false)\r\n            }\r\n        }\r\n    }\nimport kotlinx.coroutines.runBlocking" ],
  "Trail-Sense/4" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "fcitx5-android/203" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Verify storage permission\r\n    verifyStoragePermission();\r\n    // Verify notification permission\r\n    verifyNotificationPermission();\r\n    ////////////////\r\n    // Setup theme\r\n    ////////////////\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    ///////////////////////////\r\n    // Setup main application\r\n    ///////////////////////////\r\n    setupApplication();\r\n    //////////////////\r\n    // Setup database\r\n    //////////////////\r\n    setupDatabase();\r\n    //////////////////\r\n    // Setup backup\r\n    //////////////////\r\n    setupBackup();\r\n    /////////////////\r\n    // Setup toolbar\r\n    ////////////////\r\n    setupToolBar();\r\n    ////////////////////\r\n    // Setup status bar\r\n    ///////////////////\r\n    setupStatusBar();\r\n    ////////////////////\r\n    // Setup animation\r\n    ///////////////////\r\n    setupAnimation();\r\n    ///////////////////////////\r\n    // Setup navigation drawer\r\n    //////////////////////////\r\n    setupNavigationDrawer(savedInstanceState);\r\n    ///////////////////////\r\n    // Setup recycler view\r\n    ///////////////////////\r\n    setupRecyclerView();\r\n    /////////////\r\n    // Setup FAB\r\n    /////////////\r\n    setupFAB();\r\n    ///////////////////////\r\n    // Setup file observer\r\n    ///////////////////////\r\n    setupFileObserver();\r\n    ////////////////\r\n    // Setup mirror\r\n    ////////////////\r\n    setupMirror();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    ///////////////////////\r\n    // Apply theme\r\n    ///////////////////////\r\n    applyTheme();\r\n    /////////////////////\r\n    // Setup animation\r\n    /////////////////////\r\n    setupAnimation();\r\n    //////////////////////////\r\n    // Setup the startup list\r\n    //////////////////////////\r\n    setupStartupList();\r\n    ////////////////////////////\r\n    // Setup local find history\r\n    ////////////////////////////\r\n    setupLocalFindHistory();\r\n    /////////////////////////\r\n    // Setup process text\r\n    /////////////////////////\r\n    setupProcessText();\r\n    ///////////////////\r\n    // Handle intent\r\n    ///////////////////\r\n    handleIntent(getIntent());\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport com.appmindlab.nano.R.id.fab\nimport java.util.List\nimport com.google.android.material.floatingactionbutton.FloatingActionButton\nimport android.view.View\n// Setup FAB\r\nprivate void setupFAB() {\r\n    mFab = (FloatingActionButton) findViewById(fab);\r\n    // Set handler\r\n    mFab.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            doAdd();\r\n        }\r\n    });\r\n}" ],
  "QuickNovel/121" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/36" : [ "", "import code.name.monkey.retromusic.R\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.view.ActionMode\noverride fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean {\n        if (item?.itemId == R.id.action_multi_select_adapter_check_all) {\n            checkAll()\n        } else {\n            onMultipleItemAction(item!!, ArrayList(checked))\n            actionMode?.finish()\n            clearChecked()\n        }\n        return true\n    }\nimport android.view.ActionMode\nimport android.view.Menu\nimport android.view.MenuItem\nimport code.name.monkey.retromusic.R" ],
  "fcitx5-android/202" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/35" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/242" : [ "@Override\r\nprotected Void onExecute(Context context, Bundle args) throws Throwable {\r\n    Uri uri = args.getParcelable(\"uri\");\r\n    Log.i(\"Import certificate uri=\" + uri);\r\n    if (uri == null)\r\n        throw new FileNotFoundException();\r\n    boolean der = false;\r\n    String extension = Helper.getExtension(uri.getLastPathSegment());\r\n    DocumentFile dfile = DocumentFile.fromSingleUri(context, uri);\r\n    String type = (dfile == null ? null : dfile.getType());\r\n    // https://pki-tutorial.readthedocs.io/en/latest/mime.html\r\n    if (!\"pem\".equalsIgnoreCase(extension) && !\"application/x-pem-file\".equals(type))\r\n        try {\r\n            if (type != null && type.startsWith(\"application/\"))\r\n                der = true;\r\n        } catch (Throwable ex) {\r\n            Log.w(ex);\r\n        }\r\n    Log.i(\"Extension=\" + extension + \"type=\" + type + \" DER=\" + der);\r\n    X509Certificate cert;\r\n    CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n    try (InputStream is = context.getContentResolver().openInputStream(uri)) {\r\n        if (is == null)\r\n            throw new FileNotFoundException(uri.toString());\r\n        if (der)\r\n            cert = (X509Certificate) fact.generateCertificate(is);\r\n        else {\r\n            // throws DecoderException extends IllegalStateException\r\n            PemObject pem = new PemReader(new InputStreamReader(is)).readPemObject();\r\n            if (pem == null)\r\n                throw new IllegalArgumentException(\"Invalid key file\");\r\n            ByteArrayInputStream bis = new ByteArrayInputStream(pem.getContent());\r\n            cert = (X509Certificate) fact.generateCertificate(bis);\r\n        }\r\n    }\r\n    String fingerprint = EntityCertificate.getFingerprintSha256(cert);\r\n    List<String> emails = EntityCertificate.getEmailAddresses(cert);\r\n    if (emails.size() == 0)\r\n        throw new IllegalArgumentException(\"No email address found in key\");\r\n    DB db = DB.getInstance(context);\r\n    for (String email : emails) {\r\n        EntityCertificate record = db.certificate().getCertificate(fingerprint, email);\r\n        if (record == null) {\r\n            record = EntityCertificate.from(cert, email);\r\n            record.id = db.certificate().insertCertificate(record);\r\n        }\r\n    }\r\n    return null;\r\n}\n--------------------------------------------------\n@Override\r\nprotected File onExecute(Context context, Bundle args) throws CertificateException, IOException {\r\n    long id = args.getLong(\"id\");\r\n    DB db = DB.getInstance(context);\r\n    EntityCertificate certificate = db.certificate().getCertificate(id);\r\n    if (certificate == null)\r\n        return null;\r\n    File dir = Helper.ensureExists(context, \"shared\");\r\n    String name = Helper.sanitizeFilename(certificate.email);\r\n    File file = new File(dir, name + \".pem\");\r\n    Helper.writeText(file, certificate.getPem());\r\n    return file;\r\n}\n--------------------------------------------------\n", "import android.util.Base64;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.security.cert.CertificateException;\r\nimport java.security.cert.CertificateFactory;\r\nimport java.security.cert.X509Certificate;\r\nimport java.security.cert.X509Certificate\nimport java.security.cert.CertificateFactory\nimport java.security.cert.CertificateException\nimport java.io.ByteArrayInputStream\nimport android.util.Base64\nX509Certificate getCertificate() throws CertificateException {\r\n    byte[] encoded = Base64.decode(this.data, Base64.NO_WRAP);\r\n    return (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInputStream(encoded));\r\n}" ],
  "QuickNovel/130" : [ "{\r\n        feeRateService.setFeeRate(value)\r\n    }\n--------------------------------------------------\n\n        feeService.setFeeRate(feeRateState.feeRate)\r\n        amountService.setFeeRate(feeRateState.feeRate)\n--------------------------------------------------\n        feeService.setFeeRate(feeRateState.feeRate)\n        amountService.setFeeRate(feeRateState.feeRate)\r\n", "fun setFeeRate(feeRate: Int?) {\r\n        this.feeRate = feeRate\r\n\r\n        refreshFee()\r\n        emitState()\r\n    }" ],
  "Iconify/241" : [ "private void http_thread() {\r\n    try {\r\n        mThread.setName(\"http-stream-thread\");\r\n        int port = (mURI.getPort() != -1) ? mURI.getPort() : (mURI.getProtocol().equals(\"https\") ? 443 : 80);\r\n        String path = TextUtils.isEmpty(mURI.getPath()) ? \"/\" : mURI.getPath();\r\n        if (!TextUtils.isEmpty(mURI.getQuery())) {\r\n            path += \"?\" + mURI.getQuery();\r\n        }\r\n        PrintWriter out = new PrintWriter(mSocket.getOutputStream());\r\n        if (mProxyHost != null && mProxyHost.length() > 0 && mProxyPort > 0) {\r\n            out.print(\"CONNECT \" + mURI.getHost() + \":\" + port + \" HTTP/1.0\\r\\n\");\r\n            out.print(\"\\r\\n\");\r\n            out.flush();\r\n            HybiParser.HappyDataInputStream stream = new HybiParser.HappyDataInputStream(mSocket.getInputStream());\r\n            // Read HTTP response status line.\r\n            String statusLineString = readLine(stream);\r\n            if (statusLineString == null) {\r\n                throw new Exception(\"Received no reply from server.\");\r\n            } else {\r\n                StatusLine statusLine = StatusLine.parse(statusLineString);\r\n                if (statusLine.code != HttpURLConnection.HTTP_OK) {\r\n                    throw new Exception(statusLine.toString());\r\n                }\r\n            }\r\n            // Read HTTP response headers.\r\n            while (!TextUtils.isEmpty(readLine(stream))) ;\r\n            if (mURI.getProtocol().equals(\"https\")) {\r\n                mSocket = getSSLSocketFactory().createSocket(mSocket, mURI.getHost(), port, false);\r\n                SSLSocket s = (SSLSocket) mSocket;\r\n                try {\r\n                    s.setEnabledProtocols(ENABLED_PROTOCOLS);\r\n                } catch (IllegalArgumentException e) {\r\n                    //Not supported on older Android versions\r\n                }\r\n                try {\r\n                    s.setEnabledCipherSuites(ENABLED_CIPHERS);\r\n                } catch (IllegalArgumentException e) {\r\n                    //Not supported on older Android versions\r\n                }\r\n                out = new PrintWriter(mSocket.getOutputStream());\r\n            }\r\n        }\r\n        if (mURI.getProtocol().equals(\"https\")) {\r\n            SSLSocket s = (SSLSocket) mSocket;\r\n            StrictHostnameVerifier verifier = new StrictHostnameVerifier();\r\n            if (!verifier.verify(mURI.getHost(), s.getSession()))\r\n                throw new SSLException(\"Hostname mismatch\");\r\n        }\r\n        IRCCloudLog.Log(Log.DEBUG, TAG, \"Sending HTTP request\");\r\n        out.print(\"GET \" + path + \" HTTP/1.0\\r\\n\");\r\n        out.print(\"Host: \" + mURI.getHost() + \"\\r\\n\");\r\n        if (mURI.getHost().equals(NetworkConnection.IRCCLOUD_HOST) && NetworkConnection.getInstance().session != null && NetworkConnection.getInstance().session.length() > 0)\r\n            out.print(\"Cookie: session=\" + NetworkConnection.getInstance().session + \"\\r\\n\");\r\n        out.print(\"Connection: close\\r\\n\");\r\n        out.print(\"Accept-Encoding: gzip\\r\\n\");\r\n        out.print(\"User-Agent: \" + NetworkConnection.getInstance().useragent + \"\\r\\n\");\r\n        out.print(\"\\r\\n\");\r\n        out.flush();\r\n        HybiParser.HappyDataInputStream stream = new HybiParser.HappyDataInputStream(mSocket.getInputStream());\r\n        // Read HTTP response status line.\r\n        String statusLineString = readLine(stream);\r\n        StatusLine statusLine;\r\n        if (statusLineString == null) {\r\n            throw new Exception(\"Received no reply from server.\");\r\n        } else {\r\n            IRCCloudLog.Log(Log.DEBUG, TAG, \"Got HTTP response: \" + statusLineString);\r\n            statusLine = StatusLine.parse(statusLineString);\r\n            if (metric != null)\r\n                metric.setHttpResponseCode(statusLine.code);\r\n            if (statusLine.code != HttpURLConnection.HTTP_OK && statusLine.code != HttpURLConnection.HTTP_MOVED_PERM) {\r\n                IRCCloudLog.Log(Log.ERROR, TAG, \"Failure: \" + mURI + \": \" + statusLine.toString());\r\n                throw new Exception(statusLine.toString());\r\n            }\r\n        }\r\n        // Read HTTP response headers.\r\n        String line;\r\n        boolean gzipped = false;\r\n        while (!TextUtils.isEmpty(line = readLine(stream))) {\r\n            int index = line.indexOf(\":\");\r\n            Headers header = new Headers.Builder().add(line.substring(0, index).trim(), line.substring(index + 1)).build();\r\n            if (header.name(0).equalsIgnoreCase(\"content-encoding\") && header.value(0).equalsIgnoreCase(\"gzip\"))\r\n                gzipped = true;\r\n            if (metric != null && header.name(0).equalsIgnoreCase(\"content-type\"))\r\n                metric.setResponseContentType(header.value(0));\r\n            if (metric != null && header.name(0).equalsIgnoreCase(\"content-length\"))\r\n                metric.setResponsePayloadSize(Long.valueOf(header.value(0)));\r\n            if (statusLine.code == HttpURLConnection.HTTP_MOVED_PERM && header.name(0).equalsIgnoreCase(\"location\")) {\r\n                IRCCloudLog.Log(Log.INFO, TAG, \"Redirecting to: \" + header.value(0));\r\n                mURI = new URL(header.value(0));\r\n                mSocket.close();\r\n                mSocket = null;\r\n                mThread = null;\r\n                connect();\r\n                return;\r\n            }\r\n        }\r\n        if (gzipped)\r\n            onStreamConnected(new GZIPInputStream(mSocket.getInputStream()));\r\n        else\r\n            onStreamConnected(mSocket.getInputStream());\r\n        onFetchComplete();\r\n        if (metric != null)\r\n            metric.stop();\r\n    } catch (Exception ex) {\r\n        NetworkConnection.printStackTraceToCrashlytics(ex);\r\n        onFetchFailed();\r\n    }\r\n}\n--------------------------------------------------\nprivate void http_thread() {\r\n    try {\r\n        mThread.setName(\"http-stream-thread\");\r\n        int port = (mURI.getPort() != -1) ? mURI.getPort() : (mURI.getProtocol().equals(\"https\") ? 443 : 80);\r\n        String path = TextUtils.isEmpty(mURI.getPath()) ? \"/\" : mURI.getPath();\r\n        if (!TextUtils.isEmpty(mURI.getQuery())) {\r\n            path += \"?\" + mURI.getQuery();\r\n        }\r\n        PrintWriter out = new PrintWriter(mSocket.getOutputStream());\r\n        if (mProxyHost != null && mProxyHost.length() > 0 && mProxyPort > 0) {\r\n            out.print(\"CONNECT \" + mURI.getHost() + \":\" + port + \" HTTP/1.0\\r\\n\");\r\n            out.print(\"\\r\\n\");\r\n            out.flush();\r\n            HybiParser.HappyDataInputStream stream = new HybiParser.HappyDataInputStream(mSocket.getInputStream());\r\n            // Read HTTP response status line.\r\n            String statusLineString = readLine(stream);\r\n            if (statusLineString == null) {\r\n                throw new Exception(\"Received no reply from server.\");\r\n            } else {\r\n                StatusLine statusLine = StatusLine.parse(statusLineString);\r\n                if (statusLine.code != HttpURLConnection.HTTP_OK) {\r\n                    throw new Exception(statusLine.toString());\r\n                }\r\n            }\r\n            // Read HTTP response headers.\r\n            while (!TextUtils.isEmpty(readLine(stream))) ;\r\n            if (mURI.getProtocol().equals(\"https\")) {\r\n                mSocket = getSSLSocketFactory().createSocket(mSocket, mURI.getHost(), port, false);\r\n                SSLSocket s = (SSLSocket) mSocket;\r\n                try {\r\n                    s.setEnabledProtocols(ENABLED_PROTOCOLS);\r\n                } catch (IllegalArgumentException e) {\r\n                    //Not supported on older Android versions\r\n                }\r\n                try {\r\n                    s.setEnabledCipherSuites(ENABLED_CIPHERS);\r\n                } catch (IllegalArgumentException e) {\r\n                    //Not supported on older Android versions\r\n                }\r\n                out = new PrintWriter(mSocket.getOutputStream());\r\n            }\r\n        }\r\n        if (mURI.getProtocol().equals(\"https\")) {\r\n            SSLSocket s = (SSLSocket) mSocket;\r\n            StrictHostnameVerifier verifier = new StrictHostnameVerifier();\r\n            if (!verifier.verify(mURI.getHost(), s.getSession()))\r\n                throw new SSLException(\"Hostname mismatch\");\r\n        }\r\n        IRCCloudLog.Log(Log.DEBUG, TAG, \"Sending HTTP request\");\r\n        out.print(\"GET \" + path + \" HTTP/1.0\\r\\n\");\r\n        out.print(\"Host: \" + mURI.getHost() + \"\\r\\n\");\r\n        if (mURI.getHost().equals(NetworkConnection.IRCCLOUD_HOST) && NetworkConnection.getInstance().session != null && NetworkConnection.getInstance().session.length() > 0)\r\n            out.print(\"Cookie: session=\" + NetworkConnection.getInstance().session + \"\\r\\n\");\r\n        out.print(\"Connection: close\\r\\n\");\r\n        out.print(\"Accept-Encoding: gzip\\r\\n\");\r\n        out.print(\"User-Agent: \" + NetworkConnection.getInstance().useragent + \"\\r\\n\");\r\n        out.print(\"\\r\\n\");\r\n        out.flush();\r\n        HybiParser.HappyDataInputStream stream = new HybiParser.HappyDataInputStream(mSocket.getInputStream());\r\n        // Read HTTP response status line.\r\n        String statusLineString = readLine(stream);\r\n        StatusLine statusLine;\r\n        if (statusLineString == null) {\r\n            throw new Exception(\"Received no reply from server.\");\r\n        } else {\r\n            IRCCloudLog.Log(Log.DEBUG, TAG, \"Got HTTP response: \" + statusLineString);\r\n            statusLine = StatusLine.parse(statusLineString);\r\n            if (metric != null)\r\n                metric.setHttpResponseCode(statusLine.code);\r\n            if (statusLine.code != HttpURLConnection.HTTP_OK && statusLine.code != HttpURLConnection.HTTP_MOVED_PERM) {\r\n                IRCCloudLog.Log(Log.ERROR, TAG, \"Failure: \" + mURI + \": \" + statusLine.toString());\r\n                throw new Exception(statusLine.toString());\r\n            }\r\n        }\r\n        // Read HTTP response headers.\r\n        String line;\r\n        boolean gzipped = false;\r\n        while (!TextUtils.isEmpty(line = readLine(stream))) {\r\n            int index = line.indexOf(\":\");\r\n            Headers header = new Headers.Builder().add(line.substring(0, index).trim(), line.substring(index + 1)).build();\r\n            if (header.name(0).equalsIgnoreCase(\"content-encoding\") && header.value(0).equalsIgnoreCase(\"gzip\"))\r\n                gzipped = true;\r\n            if (metric != null && header.name(0).equalsIgnoreCase(\"content-type\"))\r\n                metric.setResponseContentType(header.value(0));\r\n            if (metric != null && header.name(0).equalsIgnoreCase(\"content-length\"))\r\n                metric.setResponsePayloadSize(Long.valueOf(header.value(0)));\r\n            if (statusLine.code == HttpURLConnection.HTTP_MOVED_PERM && header.name(0).equalsIgnoreCase(\"location\")) {\r\n                IRCCloudLog.Log(Log.INFO, TAG, \"Redirecting to: \" + header.value(0));\r\n                mURI = new URL(header.value(0));\r\n                mSocket.close();\r\n                mSocket = null;\r\n                mThread = null;\r\n                connect();\r\n                return;\r\n            }\r\n        }\r\n        if (gzipped)\r\n            onStreamConnected(new GZIPInputStream(mSocket.getInputStream()));\r\n        else\r\n            onStreamConnected(mSocket.getInputStream());\r\n        onFetchComplete();\r\n        if (metric != null)\r\n            metric.stop();\r\n    } catch (Exception ex) {\r\n        NetworkConnection.printStackTraceToCrashlytics(ex);\r\n        onFetchFailed();\r\n    }\r\n}\n--------------------------------------------------\n", "import org.json.JSONObject;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.io.OutputStream\nimport java.io.InputStream\nimport java.io.ByteArrayOutputStream\nimport org.json.JSONObject\nprotected void onStreamConnected(InputStream is) throws Exception {\r\n    if (isCancelled)\r\n        return;\r\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\r\n    byte[] buffer = new byte[8192];\r\n    int len;\r\n    while ((len = is.read(buffer)) != -1) {\r\n        os.write(buffer, 0, len);\r\n    }\r\n    String response = os.toString(\"UTF-8\");\r\n    is.close();\r\n    result = new JSONObject(response);\r\n}" ],
  "Neo-Backup/381" : [ "            val account = loadAccount(accountUuid)\n            val folderDetails = folderRepository.loadFolderDetails(account, folderId)\r\n            if (folderDetails == null) {", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.fsck.k9.mailstore.FolderRepository\nimport com.fsck.k9.mailstore.FolderDetails\nimport com.fsck.k9.mailstore.Folder\nimport com.fsck.k9.Account\nprivate suspend fun FolderRepository.loadFolderDetails(account: Account, folderId: Long): FolderDetails? {\r\n        return withContext(Dispatchers.IO) {\r\n            getFolderDetails(account, folderId)\r\n        }\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.mailstore.Folder\nimport com.fsck.k9.mailstore.FolderDetails\nimport com.fsck.k9.mailstore.FolderRepository\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/20" : [ "@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == R.id.action_refresh_account_posts_activity) {\r\n        if (mFragment != null) {\r\n            ((PostFragment) mFragment).refresh();\r\n        }\r\n        return true;\r\n    } else if (itemId == R.id.action_change_post_layout_account_posts_activity) {\r\n        postLayoutBottomSheetFragment.show(getSupportFragmentManager(), postLayoutBottomSheetFragment.getTag());\r\n        return true;\r\n    } else if (itemId == android.R.id.home) {\r\n        finish();\r\n        return true;\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == android.R.id.home) {\r\n        finish();\r\n        return true;\r\n    } else if (itemId == R.id.action_refresh_account_saved_thing_activity) {\r\n        sectionsPagerAdapter.refresh();\r\n        return true;\r\n    } else if (itemId == R.id.action_change_post_layout_account_saved_thing_activity) {\r\n        postLayoutBottomSheetFragment.show(getSupportFragmentManager(), postLayoutBottomSheetFragment.getTag());\r\n        return true;\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment;\r\nimport ml.docilealligator.infinityforreddit.fragments.PostFragment;\r\nimport ml.docilealligator.infinityforreddit.post.Post;\r\nimport ml.docilealligator.infinityforreddit.post.Post\nimport ml.docilealligator.infinityforreddit.fragments.PostFragment\nimport androidx.fragment.app.Fragment\npublic void refresh() {\r\n    PostFragment currentFragment = getCurrentFragment();\r\n    if (currentFragment != null) {\r\n        currentFragment.refresh();\r\n    }\r\n}" ],
  "Neo-Backup/388" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value:Int) {\r\n        val wasBlocking = shouldDisableDependents()\r\n        persistInt(value)\r\n        val isBlocking = shouldDisableDependents()\r\n        if (isBlocking != wasBlocking) {\r\n            notifyDependencyChange(isBlocking)\r\n        }\r\n        notifyChanged()\r\n    }" ],
  "BCR/23" : [ "DI.start(this, listOf(provideAppModule()) + coreModules + uiModules + commonAppModules)\n--------------------------------------------------\n            val intent = Intent(requireContext(), ChooseAccount::class.java)\n            startActivityForResult(intent, REQUEST_CHOOSE_ACCOUNT)\r\n            false\n--------------------------------------------------\n            )\n            startActivityForResult(intent, REQUEST_CHOOSE_FOLDER)\r\n            false\n--------------------------------------------------\nmatcher.start()\n--------------------------------------------------\nDI.start(this, coreModules + storageModule + testModule)", "import timber.log.Timber\nfun start() {\r\n        Timber.v(\"PushServiceManager.start()\")\r\n        if (isServiceStarted.compareAndSet(false, true)) {\r\n            startService()\r\n        } else {\r\n            Timber.v(\"..PushService already running\")\r\n        }\r\n    }\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Neo-Backup/385" : [ "kit.refresh()\n--------------------------------------------------\n{\r\n        eip20Kit.refresh()\r\n    }\n--------------------------------------------------\nit.refresh()\n--------------------------------------------------\nevmBlockchainManager.getEvmKitManager(blockchain.type).evmKitWrapper?.evmKit?.refresh()\n--------------------------------------------------\nbinanceKitManager.binanceKit?.refresh()\n--------------------------------------------------\nsolanaKitManager.solanaKitWrapper?.solanaKit?.refresh()\n--------------------------------------------------\ntronKitManager.tronKitWrapper?.tronKit?.refresh()\n--------------------------------------------------\nadaptersMap[wallet]?.refresh()\n--------------------------------------------------\nadapterManager.refresh()\n--------------------------------------------------\nrefresh()\n--------------------------------------------------\nservice.refresh()\n--------------------------------------------------\nviewModel.refresh()\n--------------------------------------------------\nnftMetadataSyncer.refresh()\n--------------------------------------------------\nMarketWidgetManager().refresh(glanceId)\n--------------------------------------------------\nrefresh(glanceId)\n--------------------------------------------------\nmarketWidgetManager.refresh(glanceId)", "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun refresh() {\r\n        viewModelScope.launch {\r\n            service.refresh()\r\n        }\r\n    }\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.launch" ],
  "MaterialFiles/177" : [ "it.isSupported(address)", "import io.horizontalsystems.tonkit.TonKit\noverride fun isSupported(value: String) = try {\r\n        TonKit.validate(value)\r\n        true\r\n    } catch (e: Exception) {\r\n        false\r\n    }\nImport(names=[io, horizontalsystems, tonkit, TonKit], wildcard=false, alias=null)" ],
  "Neo-Backup/386" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/248" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "Trail-Sense/1612" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/532" : [ "\n        binding.currentLocation.setOnClickListener { currentLocation() }\r\n        binding.selectThisLocation.setOnClickListener { selectLocation() }\n--------------------------------------------------\n            try {\n                locationService.currentLocation()?.let { map.movePosition(it, animate) }\r\n            } catch (e: Exception) {", "import org.tasks.R\nprivate fun currentLocation() {\r\n        if (permissionRequestor.requestForegroundLocation()) {\r\n            moveToCurrentLocation(true)\r\n        }\r\n    }\nimport org.tasks.R" ],
  "Trail-Sense/533" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "Iconify/246" : [ "/**\r\n * Formats a stack trace element into a simple call site.\r\n *\r\n * @param s the stack trace element to format.\r\n * @return the formatted stack trace element.\r\n * @throws NullPointerException if stack trace element is null.\r\n * @see #formatThrown(java.util.logging.LogRecord)\r\n */\r\nprivate String formatStackTraceElement(final StackTraceElement s) {\r\n    String v = simpleClassName(s.getClassName());\r\n    String result = s.toString().replace(s.getClassName(), v);\r\n    //If the class name contains the simple file name then remove file name.\r\n    v = simpleFileName(s.getFileName());\r\n    if (v != null && result.startsWith(v)) {\r\n        result = result.replace(s.getFileName(), \"\");\r\n    }\r\n    return result;\r\n}\n--------------------------------------------------\n", "/**\r\n * Converts a file name with an extension to a file name without an\r\n * extension.\r\n *\r\n * @param name the full file name or null.\r\n * @return the simple file name or null.\r\n */\r\nprivate static String simpleFileName(String name) {\r\n    if (name != null) {\r\n        final int index = name.lastIndexOf('.');\r\n        name = index > -1 ? name.substring(0, index) : name;\r\n    }\r\n    return name;\r\n}" ],
  "Neo-Backup/389" : [ "            onSearchTextChanged = { text ->\n                viewModel.updateFilter(text)\r\n            }\n--------------------------------------------------\nviewModel.updateFilter(text)", "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun updateFilter(q: String) {\r\n        viewModelScope.launch {\r\n            query = q\r\n            refreshViewItems(service.balanceItemsFlow.value)\r\n        }\r\n    }\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.launch" ],
  "Trail-Sense/534" : [ "if (isNotConnected(context)) {\n    return@withContext true\n}\n--------------------------------------------------\nUtils.isNotConnected(requireContext())", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.uwetrottmann.androidutils.AndroidUtils\nimport com.battlelancer.seriesguide.R\nimport android.widget.Toast\nimport android.content.Context\nprivate suspend fun isNotConnected(context: Context): Boolean {\r\n        val isConnected = AndroidUtils.isNetworkConnected(context)\r\n        // display offline toast\r\n        if (!isConnected) {\r\n            withContext(Dispatchers.Main) {\r\n                Toast.makeText(context, R.string.offline, Toast.LENGTH_LONG).show()\r\n            }\r\n        }\r\n        return !isConnected\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, widget, Toast], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)\nImport(names=[com, uwetrottmann, androidutils, AndroidUtils], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/247" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "Trail-Sense/1616" : [ "@Override\r\npublic void onCreate() {\r\n    super.onCreate();\r\n    compositeSubscription = new CompositeSubscription();\r\n    mNotificationManager = (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);\r\n    MmexApplication.getApp().iocComponent.inject(this);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onDestroy() {\r\n    if (!compositeSubscription.isUnsubscribed()) {\r\n        compositeSubscription.unsubscribe();\r\n    }\r\n    super.onDestroy();\r\n}" ],
  "BCR/18" : [ "updateEmptyView(adapter.itemCount == 0)\n--------------------------------------------------\nupdateEmptyView(isEmpty)", "import androidx.core.view.isGone\nimport android.view.View\nprivate fun updateEmptyView(isEmpty: Boolean) {\r\n        recyclerView.isGone = isEmpty\r\n        textViewEmpty.isGone = !isEmpty\r\n    }\nImport(names=[androidx, core, view, isGone], wildcard=false, alias=null)" ],
  "BCR/17" : [ "/**\r\n * Adjustment of all the old attachments without mimetype field set into DB\r\n */\r\nprivate void onUpgradeTo476() {\r\n    final DbHelper dbHelper = DbHelper.getInstance();\r\n    for (Attachment attachment : dbHelper.getAllAttachments()) {\r\n        if (attachment.getMime_type() == null) {\r\n            String mimeType = StorageHelper.getMimeType(attachment.getUri().toString());\r\n            if (!TextUtils.isEmpty(mimeType)) {\r\n                String type = mimeType.replaceFirst(\"/.*\", \"\");\r\n                switch(type) {\r\n                    case \"image\":\r\n                        attachment.setMime_type(MIME_TYPE_IMAGE);\r\n                        break;\r\n                    case \"video\":\r\n                        attachment.setMime_type(MIME_TYPE_VIDEO);\r\n                        break;\r\n                    case \"audio\":\r\n                        attachment.setMime_type(MIME_TYPE_AUDIO);\r\n                        break;\r\n                    default:\r\n                        attachment.setMime_type(MIME_TYPE_FILES);\r\n                        break;\r\n                }\r\n                dbHelper.updateAttachment(attachment);\r\n            } else {\r\n                attachment.setMime_type(MIME_TYPE_FILES);\r\n            }\r\n        }\r\n    }\r\n}\n--------------------------------------------------\nprivate void initViewAttachments() {\r\n    // Attachments position based on preferences\r\n    if (Prefs.getBoolean(PREF_ATTACHMENTS_ON_BOTTOM, false)) {\r\n        binding.detailAttachmentsBelow.inflate();\r\n    } else {\r\n        binding.detailAttachmentsAbove.inflate();\r\n    }\r\n    mGridView = binding.detailRoot.findViewById(R.id.gridview);\r\n    // Some fields can be filled by third party application and are always shown\r\n    mAttachmentAdapter = new AttachmentAdapter(mainActivity, noteTmp.getAttachmentsList());\r\n    // Initialzation of gridview for images\r\n    mGridView.setAdapter(mAttachmentAdapter);\r\n    mGridView.autoresize();\r\n    // Click events for images in gridview (zooms image)\r\n    mGridView.setOnItemClickListener((parent, v, position, id) -> {\r\n        Attachment attachment = (Attachment) parent.getAdapter().getItem(position);\r\n        Uri shareableAttachmentUri = mainActivity.getShareableAttachmentUri(attachment);\r\n        if (shareableAttachmentUri == null) {\r\n            return;\r\n        }\r\n        Intent attachmentIntent;\r\n        if (MIME_TYPE_FILES.equals(attachment.getMime_type())) {\r\n            attachmentIntent = new Intent(Intent.ACTION_VIEW);\r\n            attachmentIntent.setDataAndType(shareableAttachmentUri, StorageHelper.getMimeType(mainActivity, shareableAttachmentUri));\r\n            attachmentIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\r\n            if (IntentChecker.isAvailable(mainActivity.getApplicationContext(), attachmentIntent, null)) {\r\n                startActivity(attachmentIntent);\r\n            } else {\r\n                mainActivity.showMessage(R.string.feature_not_available_on_this_device, ONStyle.WARN);\r\n            }\r\n            // Media files will be opened in internal gallery\r\n        } else if (MIME_TYPE_IMAGE.equals(attachment.getMime_type()) || MIME_TYPE_SKETCH.equals(attachment.getMime_type()) || MIME_TYPE_VIDEO.equals(attachment.getMime_type())) {\r\n            // Title\r\n            noteTmp.setTitle(getNoteTitle());\r\n            noteTmp.setContent(getNoteContent());\r\n            String title1 = TextHelper.parseTitleAndContent(mainActivity, noteTmp)[0].toString();\r\n            // Images\r\n            int clickedImage = 0;\r\n            ArrayList<Attachment> images = new ArrayList<>();\r\n            for (Attachment mAttachment : noteTmp.getAttachmentsList()) {\r\n                if (MIME_TYPE_IMAGE.equals(mAttachment.getMime_type()) || MIME_TYPE_SKETCH.equals(mAttachment.getMime_type()) || MIME_TYPE_VIDEO.equals(mAttachment.getMime_type())) {\r\n                    images.add(mAttachment);\r\n                    if (mAttachment.equals(attachment)) {\r\n                        clickedImage = images.size() - 1;\r\n                    }\r\n                }\r\n            }\r\n            // Intent\r\n            attachmentIntent = new Intent(mainActivity, GalleryActivity.class);\r\n            attachmentIntent.putExtra(GALLERY_TITLE, title1);\r\n            attachmentIntent.putParcelableArrayListExtra(GALLERY_IMAGES, images);\r\n            attachmentIntent.putExtra(GALLERY_CLICKED_IMAGE, clickedImage);\r\n            startActivity(attachmentIntent);\r\n        } else if (MIME_TYPE_AUDIO.equals(attachment.getMime_type())) {\r\n            playback(v, attachment.getUri());\r\n        }\r\n    });\r\n    mGridView.setOnItemLongClickListener((parent, v, position, id) -> {\r\n        // To avoid deleting audio attachment during playback\r\n        if (mPlayer != null) {\r\n            return false;\r\n        }\r\n        List<String> items = Arrays.asList(getResources().getStringArray(R.array.attachments_actions));\r\n        if (!MIME_TYPE_SKETCH.equals(mAttachmentAdapter.getItem(position).getMime_type())) {\r\n            items = items.subList(0, items.size() - 1);\r\n        }\r\n        Attachment attachment = mAttachmentAdapter.getItem(position);\r\n        new MaterialDialog.Builder(mainActivity).title(attachment.getName() + \" (\" + AttachmentsHelper.getSize(attachment) + \")\").items(items.toArray(new String[items.size()])).itemsCallback((materialDialog, view, i, charSequence) -> performAttachmentAction(position, i)).build().show();\r\n        return true;\r\n    });\r\n}\n--------------------------------------------------\n", "import android.webkit.MimeTypeMap;\r\nimport java.io.File\nimport android.webkit.MimeTypeMap\npublic static String getMimeType(String url) {\r\n    String type = null;\r\n    String extension = MimeTypeMap.getFileExtensionFromUrl(url);\r\n    if (extension != null) {\r\n        MimeTypeMap mime = MimeTypeMap.getSingleton();\r\n        type = mime.getMimeTypeFromExtension(extension);\r\n    }\r\n    return type;\r\n}" ],
  "Trail-Sense/537" : [ "        itemAdapter = ItemAdapter()\n        itemAdapter.itemFilter.filterPredicate = ::folderListFilter\r\n", "import java.util.Locale\nprivate fun folderListFilter(item: FolderListItem, constraint: CharSequence?): Boolean {\r\n        if (constraint.isNullOrEmpty()) return true\r\n\r\n        val locale = Locale.getDefault()\r\n        val displayName = item.displayName.lowercase(locale)\r\n        return constraint.splitToSequence(\" \")\r\n            .filter { it.isNotEmpty() }\r\n            .map { it.lowercase(locale) }\r\n            .any { it in displayName }\r\n    }\nimport java.util.Locale" ],
  "VinylMusicPlayer/43" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/538" : [ "handleProjectUpdateUriRequest(request)", "import okhttp3.Request\nimport com.kickstarter.models.Update\nimport com.kickstarter.R\nimport android.net.Uri\nprivate fun handleProjectUpdateUriRequest(request: Request): Boolean {\r\n        this.viewModel.inputs.goToUpdateRequest(request)\r\n        return false\r\n    }\nImport(names=[com, kickstarter, R], wildcard=false, alias=null)\nImport(names=[okhttp3, Request], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/42" : [ "categoryInfo.visible && isLastCheckedCategory(categoryInfo)", "import code.name.monkey.retromusic.model.CategoryInfo\nprivate fun isLastCheckedCategory(categoryInfo: CategoryInfo): Boolean {\n        if (categoryInfo.visible) {\n            for (c in categoryInfos) {\n                if (c !== categoryInfo && c.visible) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\nImport(names=[code, name, monkey, retromusic, model, CategoryInfo], wildcard=false, alias=null)" ],
  "BCR/19" : [ "dialogConfirmed(binding.deleteNoteCheckbox.isChecked)\n--------------------------------------------------\ndialogConfirmed()", "private fun dialogConfirmed(deleteFile: Boolean) {\r\n        callback(deleteFile && note.path.isNotEmpty())\r\n        dialog?.dismiss()\r\n    }" ],
  "BCR/14" : [ "simpleSongAdapter.swapDataSet(album.songs)\n--------------------------------------------------\nadapter?.swapDataSet(it)\n--------------------------------------------------\nadapter?.swapDataSet(listOf())\n--------------------------------------------------\nsongAdapter.swapDataSet(songs)\n--------------------------------------------------\nsongAdapter.swapDataSet(emptyList())\n--------------------------------------------------\nadapter?.swapDataSet(MusicPlayerRemote.playingQueue, MusicPlayerRemote.position)\n--------------------------------------------------\nplayingQueueAdapter?.swapDataSet(MusicPlayerRemote.playingQueue, MusicPlayerRemote.position)\n--------------------------------------------------\nplaylistSongAdapter.swapDataSet(songs)\n--------------------------------------------------\nsearchAdapter.swapDataSet(listOf())\n--------------------------------------------------\nsearchAdapter.swapDataSet(data)\n--------------------------------------------------\nsearchAdapter.swapDataSet(ArrayList())", "import java.io.File\nfun swapDataSet(songFiles: List<File>) {\n        this.dataSet = songFiles\n        notifyDataSetChanged()\n    }" ],
  "BCR/13" : [ "        newAccount.name = account.options.accountName\n        newAccount.senderName = account.options.displayName\r\n        if (account.options.emailSignature != null) {\n--------------------------------------------------\n{\n        val accountName = account.displayName\r\n        val backendStorage = backendStorageFactory.createBackendStorage(account)", "import com.fsck.k9.mailstore.Folder\nfun displayName(folder: Folder): String {\r\n        return if (folder.isLocalOnly) {\r\n            localFolderDisplayName(folder)\r\n        } else {\r\n            remoteFolderDisplayName(folder)\r\n        }\r\n    }\nImport(names=[com, fsck, k9, mailstore, Folder], wildcard=false, alias=null)" ],
  "Trail-Sense/1619" : [ "IntentFactory().startEditActivity(requireActivity(), HabitType.YES_NO.value)\n--------------------------------------------------\nIntentFactory().startEditActivity(requireActivity(), HabitType.NUMERICAL.value)\n--------------------------------------------------\nintentFactory.startEditActivity(activity, selected[0])\n--------------------------------------------------\nIntentFactory().startEditActivity(this@ShowHabitActivity, habit)\n--------------------------------------------------\nval intent = startEditActivity(context)", "import android.content.Intent\nimport android.content.Context\nfun startEditActivity(context: Context, habitType: Int): Intent {\r\n        val intent = startEditActivity(context)\r\n        intent.putExtra(\"habitType\", habitType)\r\n        return intent\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "BCR/15" : [ "setDevice(intent.getStringExtra(EXTRA_PATH)!!, intent.getStringExtra(EXTRA_UUID)!!, intent.getBooleanExtra(EXTRA_SCAN, false))", "fun setDevice(path: String, uuid: String, scan: Boolean) {\r\n        this.path = path\r\n        this.uuid = uuid\r\n        this.scan = scan\r\n    }" ],
  "QuickNovel/136" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/138" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/48" : [ "", "import android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\n@Override\r\npublic void setPrimaryItem(@NonNull ViewGroup container, int position, @NonNull Object object) {\r\n    Fragment fragment = (Fragment) object;\r\n    if (fragment != mCurrentPrimaryItem) {\r\n        if (mCurrentPrimaryItem != null) {\r\n            mCurrentPrimaryItem.setMenuVisibility(false);\r\n            mCurrentPrimaryItem.setUserVisibleHint(false);\r\n        }\r\n        fragment.setMenuVisibility(true);\r\n        fragment.setUserVisibleHint(true);\r\n        mCurrentPrimaryItem = fragment;\r\n    }\r\n}" ],
  "QuickNovel/132" : [ "", "import java.util.Locale\nfun String.sentenceCase(): String {\r\n    return if (this.length <= 1) this.uppercase(Locale.getDefault())\r\n    else this.substring(0, 1).uppercase(Locale.getDefault()) + this.substring(1)\r\n        .lowercase(Locale.getDefault())\r\n}" ],
  "Iconify/696" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/140" : [ "        super.onSaveInstanceState(outState)\n        outState.putString(STATE_SELECTED_ACCOUNT_UUID, selectedAccountUuid)\r\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n--------------------------------------------------\n        outState.putLongIfPresent(STATE_SELECTED_FOLDER_ID, selectedFolderId)\n        outState.putString(STATE_SELECTED_FOLDER_DISPLAY_NAME, selectedFolderDisplayName)\r\n    }\n--------------------------------------------------\neditor.putString(\"x\", \"y\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"storage-value\")\n--------------------------------------------------\neditor.putString(\"storage-key\", \"other-value\")\n--------------------------------------------------\nputString(key, value.name)", "override fun putString(key: String, value: String?) = apply {\r\n            if (value == null) {\r\n                remove(key)\r\n            } else {\r\n                changes[key] = value\r\n                removals.remove(key)\r\n            }\r\n        }" ],
  "Iconify/212" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/695" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/693" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "QuickNovel/142" : [ "invoke(stringSetPreferencesKey(Constants.EXCLUDED_CALENDARS_KEY), emptySet())\n--------------------------------------------------\nentryPoint.getAllEventsUseCase().invoke(includedCalendars.toIntList(), true)\n--------------------------------------------------\ninvoke(intPreferencesKey(Constants.TASKS_ORDER_KEY), Order.DateModified(OrderType.ASC()).toInt())\n--------------------------------------------------\ninvoke(booleanPreferencesKey(Constants.SHOW_COMPLETED_TASKS_KEY), false)\n--------------------------------------------------\nentryPoint.getAllTasksUseCase().invoke(order.toOrder(), showCompletedTasks)", "suspend operator fun invoke(taskId: Int, completed: Boolean) {\r\n        tasksRepository.completeTask(taskId, completed)\r\n        if (completed) {\r\n            deleteAlarm(taskId)\r\n        }\r\n    }" ],
  "Neo-Backup/394" : [ "{\r\n        apiClientController.setupServer(hostname)\r\n        refreshServer()\r\n    }", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nsuspend fun setupServer(hostname: String) {\r\n        appPreferences.currentServerId = withContext(Dispatchers.IO) {\r\n            serverDao.getServerByHostname(hostname)?.id ?: serverDao.insert(hostname)\r\n        }\r\n        apiClient.baseUrl = hostname\r\n    }\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/692" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/187" : [ "super.onActive()\n--------------------------------------------------\ncallback.onActive()", "import androidx.annotation.MainThread\n @MainThread\r\n    override fun onActive() {\r\n        super.onActive()\r\n        callback.onActive()\r\n    }" ],
  "Neo-Backup/398" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/399" : [ "            val account = loadAccount(accountUuid)\n            val folderDetails = folderRepository.loadFolderDetails(account, folderId)\r\n            if (folderDetails == null) {", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.fsck.k9.mailstore.FolderRepository\nimport com.fsck.k9.mailstore.FolderDetails\nimport com.fsck.k9.mailstore.Folder\nimport com.fsck.k9.Account\nprivate suspend fun FolderRepository.loadFolderDetails(account: Account, folderId: Long): FolderDetails? {\r\n        return withContext(Dispatchers.IO) {\r\n            getFolderDetails(account, folderId)\r\n        }\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.mailstore.Folder\nimport com.fsck.k9.mailstore.FolderDetails\nimport com.fsck.k9.mailstore.FolderRepository\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/186" : [ "super.onActive()\n--------------------------------------------------\ncallback.onActive()", "import androidx.annotation.MainThread\n @MainThread\r\n    override fun onActive() {\r\n        super.onActive()\r\n        callback.onActive()\r\n    }" ],
  "BCR/12" : [ "static void cleanup(Context context) {\r\n    long now = new Date().getTime();\r\n    // Favicons\r\n    Log.i(\"Cleanup avatars\");\r\n    for (String type : new String[] { \"notcontact\", \"favicons\", \"generated\" }) {\r\n        File[] favicons = Helper.ensureExists(context, type).listFiles();\r\n        if (favicons != null)\r\n            for (File file : favicons) if (file.lastModified() + CACHE_FAVICON_DURATION < now) {\r\n                Log.i(\"Deleting \" + file);\r\n                Helper.secureDelete(file);\r\n            }\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void run() {\r\n    try {\r\n        File[] favicons = dir.listFiles();\r\n        if (favicons != null)\r\n            for (File favicon : favicons) Helper.secureDelete(favicon);\r\n    } catch (Throwable ex) {\r\n        Log.w(ex);\r\n    }\r\n}\n--------------------------------------------------\n", "import java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\nimport java.nio.file.Files\nimport java.io.File\nstatic List<File> listFiles(File dir, Long minSize) {\r\n    List<File> files = new ArrayList<>();\r\n    if (dir != null) {\r\n        File[] listed = dir.listFiles();\r\n        if (listed != null)\r\n            for (File file : listed) if (file.isDirectory())\r\n                files.addAll(listFiles(file, minSize));\r\n            else if (minSize == null || file.length() > minSize)\r\n                files.add(file);\r\n    }\r\n    return files;\r\n}" ],
  "MaterialFiles/189" : [ "getPlaylistFromCursorImpl(cursor)", "import code.name.monkey.retromusic.model.Playlist\nimport code.name.monkey.retromusic.extensions.getString\nimport code.name.monkey.retromusic.extensions.getLong\nimport android.database.Cursor\nprivate fun getPlaylistFromCursorImpl(\n        cursor: Cursor\n    ): Playlist {\n        val id = cursor.getLong(0)\n        val name = cursor.getString(1)\n        return if (name != null) {\n            Playlist(id, name)\n        } else {\n            Playlist.empty\n        }\n    }\nImport(names=[android, database, Cursor], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, model, Playlist], wildcard=false, alias=null)" ],
  "BCR/11" : [ "joinProject(it)", "import com.kickstarter.models.Reward\nimport com.kickstarter.models.Project\nimport com.kickstarter.R\nimport android.util.Pair\nprivate fun joinProject(items: Pair<List<Reward>, Project>?): List<Pair<Project, Reward>> {\r\n            return items?.first?.map {\r\n                Pair(items.second, it)\r\n            } ?: emptyList()\r\n        }\nImport(names=[android, util, Pair], wildcard=false, alias=null)\nImport(names=[com, kickstarter, R], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, Project], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, Reward], wildcard=false, alias=null)" ],
  "Trail-Sense/542" : [ "            preview = getMessagePreview(message),\n            summary = buildMessageSummary(sender, getMessageSubject(message)),\r\n        )", "import com.fsck.k9.mail.Message\nimport android.text.SpannableStringBuilder\nprivate fun buildMessageSummary(sender: String?, subject: String): CharSequence {\r\n        return if (sender == null) {\r\n            subject\r\n        } else {\r\n            SpannableStringBuilder().apply {\r\n                append(sender)\r\n                append(\" \")\r\n                append(subject)\r\n            }\r\n        }\r\n    }\nimport android.text.SpannableStringBuilder\nimport com.fsck.k9.mail.Message" ],
  "Trail-Sense/543" : [ "                val messageDetailsUi = MessageDetailsUi(\n                    date = buildDisplayDate(messageDetails.date),\r\n                    cryptoDetails = cryptoResult?.toCryptoDetails(),", "import com.fsck.k9.mailstore.MessageDate\nprivate fun buildDisplayDate(messageDate: MessageDate): String? {\r\n        return when (messageDate) {\r\n            is MessageDate.InvalidDate -> messageDate.dateHeader\r\n            MessageDate.MissingDate -> null\r\n            is MessageDate.ValidDate -> dateFormat.format(messageDate.date)\r\n        }\r\n    }\nimport com.fsck.k9.mailstore.MessageDate" ],
  "Trail-Sense/1623" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/215" : [ "displayRenameDialog()", "import com.simplemobiletools.notes.pro.models.Note\nimport com.simplemobiletools.notes.pro.R\nimport androidx.viewpager.widget.ViewPager\nprivate fun displayRenameDialog() {\r\n        RenameNoteDialog(this, mCurrentNote, getCurrentNoteText()) {\r\n            mCurrentNote = it\r\n            initViewPager(mCurrentNote.id)\r\n        }\r\n    }\nImport(names=[com, simplemobiletools, notes, pro, R], wildcard=false, alias=null)\nImport(names=[com, simplemobiletools, notes, pro, models, Note], wildcard=false, alias=null)" ],
  "Iconify/216" : [ "", "import org.tasks.preferences.Preferences\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        childFragmentManager.setFilterPickerResultListener(this) {\r\n            widgetPreferences.setFilter(defaultFilterProvider.getFilterPreferenceValue(it))\r\n            updateFilter()\r\n        }\r\n    }\nimport android.os.Bundle\nimport androidx.preference.Preference\nimport com.todoroo.astrid.api.Filter\nimport org.tasks.R\nimport org.tasks.dialogs.FilterPicker.Companion.setFilterPickerResultListener\nimport org.tasks.preferences.Preferences" ],
  "Trail-Sense/545" : [ "filteringJob(charSequence)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nprotected open suspend fun filteringJob(charSequence: CharSequence?) : MutableList<T>? {\r\n        if (charSequence !== null) initSource()?.let {\r\n            return withContext(Dispatchers.Default) { mutableListOf<T>().apply {\r\n                val queryStrings = charSequence.trim().toString().split(\" \")\r\n                for (item in it) for (query in queryStrings)\r\n                    if (item.title.contains(query, true)) {\r\n                        this.add(item)\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/214" : [ "adapter.toggleSelection(position)\n--------------------------------------------------\ntoggleSelection(position)", "fun toggleSelection(position: Int) {\r\n        val h = getItem(position) ?: return\r\n        val k = selected.indexOf(h)\r\n        if (k < 0) selected.add(h) else selected.remove(h)\r\n        notifyDataSetChanged()\r\n    }" ],
  "VinylMusicPlayer/54" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/549" : [ "            val actualRelease =\n                if (hasNextEpisode) TimeTools.applyUserOffset(context, show.nextAirdateMs) else null\r\n            return bindViewAt(\n--------------------------------------------------\n                episodeDescription,\n                actualRelease = TimeTools.applyUserOffset(context, episode.episode_firstairedms),\r\n                episode.network,\n--------------------------------------------------\nTimeTools.applyUserOffset(context, item.nextAirdateMs)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, nextEpisodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, episode_firstairedms)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), episodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, sgShow.nextAirdateMs)\n--------------------------------------------------\ndateTime = applyUserOffset(context, dateTime)", "import java.util.Date\nimport org.threeten.bp.ZonedDateTime\nimport com.battlelancer.seriesguide.settings.DisplaySettings\nimport android.content.Context\nprivate fun applyUserOffset(context: Context, dateTime: ZonedDateTime): ZonedDateTime {\r\n        val offset = DisplaySettings.getShowsTimeOffset(context)\r\n        if (offset != 0) {\r\n            return dateTime.plusHours(offset.toLong())\r\n        }\r\n        return dateTime\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, settings, DisplaySettings], wildcard=false, alias=null)\nImport(names=[org, threeten, bp, ZonedDateTime], wildcard=false, alias=null)" ],
  "MaterialFiles/182" : [ "        dueDate = remote.dueDateTime.toLong(0L)\n        creationDate = remote.createdDateTime.parseDateTime()\r\n        modificationDate = remote.lastModifiedDateTime.parseDateTime()\n--------------------------------------------------\n        creationDate = remote.createdDateTime.parseDateTime()\n        modificationDate = remote.lastModifiedDateTime.parseDateTime()\r\n        recurrence = remote.recurrence?.let { recurrence ->", "import java.time.ZonedDateTime\nimport org.tasks.time.DateTime\nprivate fun String?.parseDateTime(): Long =\r\n        this\r\n            ?.let { ZonedDateTime.parse(this).toInstant().toEpochMilli() }\r\n            ?: System.currentTimeMillis()\nimport org.tasks.time.DateTime\nimport java.time.ZonedDateTime" ],
  "MaterialFiles/184" : [ "        intent.hasExtra(CREATE_TASK) -> {\n            val source = intent.getStringExtra(CREATE_SOURCE)\r\n            firebase.addTask(source ?: \"unknown\")\n--------------------------------------------------\n                OPEN_FILTER: ${getParcelableExtra(intent, OPEN_FILTER, Filter::class.java)?.let { \"${it.title}: $it\" }}\n                LOAD_FILTER: ${intent.getStringExtra(LOAD_FILTER)}\r\n                OPEN_TASK: ${getParcelableExtra(intent, OPEN_TASK, Task::class.java)}\n--------------------------------------------------\n            applyToNavigationBar(this@MainActivity)\n            applyTaskDescription(this@MainActivity, filter.title ?: getString(R.string.app_name))\r\n        }\n--------------------------------------------------\ncontext.getString(R.string.gcal_completed_title, task.title)\n--------------------------------------------------\nchildren.getString(i)\n--------------------------------------------------\nsubarray.getString(0)\n--------------------------------------------------\ngetString(resId)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\ncontext.getString(R.string.WID_dateButtonUnset)\n--------------------------------------------------\ncontext.getString(R.string.DLG_hour_minutes)\n--------------------------------------------------\nif (isNew) getString(R.string.new_list) else gtasksList.name!!\n--------------------------------------------------\ntitle = getString(R.string.manage_drawer)\n--------------------------------------------------\nif (isNew) getString(R.string.new_tag) else tagData.name!!\n--------------------------------------------------\nnameLayout.error = getString(R.string.name_cannot_be_empty)\n--------------------------------------------------\nnameLayout.error = getString(R.string.tag_already_exists)\n--------------------------------------------------\nprefs.getString(KEY_LAST_HASH, null)\n--------------------------------------------------\ncontext.getString(R.string.tasks_caldav_url)\n--------------------------------------------------\njson.getString(\"sub\")\n--------------------------------------------------\nJSONObject(response).getString(\"email\")\n--------------------------------------------------\ngetString(R.string.authorization_cancelled)\n--------------------------------------------------\nbinding.description.text = getString(R.string.error_adding_account, it)\n--------------------------------------------------\nif (caldavAccount == null) getString(R.string.add_account) else caldavAccount!!.name\n--------------------------------------------------\ngetString(R.string.this_feature_requires_a_subscription)\n--------------------------------------------------\nbinding.nameLayout.error = getString(R.string.name_cannot_be_empty)\n--------------------------------------------------\nbinding.urlLayout.error = getString(R.string.url_required)\n--------------------------------------------------\nbinding.urlLayout.error = getString(R.string.url_host_name_required)\n--------------------------------------------------\nbinding.urlLayout.error = getString(R.string.url_invalid_scheme)\n--------------------------------------------------\nbinding.userLayout.error = getString(R.string.username_required)\n--------------------------------------------------\nbinding.passwordLayout.error = getString(R.string.password_required)\n--------------------------------------------------\ngetString(resId, *formatArgs)\n--------------------------------------------------\njson.getString(\"uri\")\n--------------------------------------------------\njson.getString(\"path\")\n--------------------------------------------------\narguments.getString(EXTRA_EXTENSION)\n--------------------------------------------------\ngetString(R.string.import_summary_message, \"\", r.getQuantityString(R.plurals.Ntasks, result.taskCount, result.taskCount), r.getQuantityString(R.plurals.Ntasks, result.importCount, result.importCount), r.getQuantityString(R.plurals.Ntasks, result.skipCount, result.skipCount), r.getQuantityString(R.plurals.Ntasks, 0, 0))\n--------------------------------------------------\ngetString(it)\n--------------------------------------------------\ndialog?.getButton(AlertDialog.BUTTON_POSITIVE)?.text = getString(stringRes)\n--------------------------------------------------\nsuper.newURL.takeIf {\n    it.isNotBlank()\n} ?: getString(R.string.etebase_url)\n--------------------------------------------------\nif (isNullOrEmpty(url)) getString(R.string.etesync_url) else url\n--------------------------------------------------\ngetString(resId, formatArgs)\n--------------------------------------------------\nsavedInstanceState.getString(EXTRA_PICTURE)\n--------------------------------------------------\nsavedInstanceState.getString(EXTRA_TEXT)\n--------------------------------------------------\ngetString(R.string.take_a_picture)\n--------------------------------------------------\ngetString(R.string.actfm_picture_clear)\n--------------------------------------------------\ncontext.getString(R.string.TEA_ctrl_hide_section_pref)\n--------------------------------------------------\ncontext.getString(resId)\n--------------------------------------------------\nactivity.getString(R.string.gtasks_error_accountNotFound, accountName)\n--------------------------------------------------\ngetString(prefId)\n--------------------------------------------------\ngetString(R.string.app_name)\n--------------------------------------------------\ngetString(notificationBody)\n--------------------------------------------------\ninputData.getString(EXTRA_URI)\n--------------------------------------------------\nbundle.getString(ListNotificationBundle.BUNDLE_EXTRA_STRING_FILTER)\n--------------------------------------------------\ncontext.getString(R.string.requires_pro_subscription)\n--------------------------------------------------\ntoolbar.title = getString(getRootTitle())\n--------------------------------------------------\ngetString(R.string.last_backup, timestamp?.takeIf {\n    it >= 0\n}?.let {\n    DateUtilities.getLongDateStringWithTime(it, locale)\n} ?: getString(R.string.last_backup_never))\n--------------------------------------------------\ngetString(R.string.last_backup_never)\n--------------------------------------------------\naccount?.takeIf {\n    it.isNotBlank()\n} ?: getString(R.string.none)\n--------------------------------------------------\ngetString(R.string.backup_location_warning, FileHelper.uri2String(preferences.externalStorage))\n--------------------------------------------------\ngetString(settingResId)\n--------------------------------------------------\ngetString(relativeResId)\n--------------------------------------------------\ngetString(R.string.use_locale_default)\n--------------------------------------------------\ngetString(R.string.tasks_org)\n--------------------------------------------------\ngetString(R.string.microsoft)\n--------------------------------------------------\ngetString(R.string.gtasks_GPr_header)\n--------------------------------------------------\ntitle = getString(R.string.name_your_price)\n--------------------------------------------------\ntitle = getString(R.string.manage_subscription)\n--------------------------------------------------\nsummary = getString(R.string.current_subscription, getString(interval, price))\n--------------------------------------------------\ngetString(interval, price)\n--------------------------------------------------\nname ?: getString(R.string.dont_add_to_calendar)\n--------------------------------------------------\nrequireContext().getString(R.string.none)\n--------------------------------------------------\ngetString(R.string.no_reminders)\n--------------------------------------------------\nNOTIFY_AT_DEADLINE -> getString(R.string.when_due)\n--------------------------------------------------\nNOTIFY_AFTER_DEADLINE -> getString(R.string.when_overdue)\n--------------------------------------------------\nNOTIFY_AT_START -> getString(R.string.when_started)\n--------------------------------------------------\nrequireContext().getString(R.string.repeat_option_does_not_repeat)\n--------------------------------------------------\narguments?.getString(EXTRA_FILTER)\n--------------------------------------------------\ngetString(R.string.tasks_caldav_url)\n--------------------------------------------------\nval label = getString(labelRes)\n--------------------------------------------------\nfindPreference(R.string.local_lists).summary = getString(R.string.migrate_count, quantityString)\n--------------------------------------------------\nit.description ?: getString(R.string.app_password)\n--------------------------------------------------\n${getString(R.string.app_password_created_at, formatString(it.createdAt))}\n--------------------------------------------------\ngetString(R.string.app_password_last_access, formatString(it.lastAccess) ?: getString(R.string.last_backup_never))\n--------------------------------------------------\nformatString(it.lastAccess) ?: getString(R.string.last_backup_never)\n--------------------------------------------------\nit.getString(USERNAME)\n--------------------------------------------------\nit.getString(PASSWORD)\n--------------------------------------------------\nif (isNull(key)) null else getString(key)\n--------------------------------------------------\npref.summary = getString(R.string.widget_id, id)\n--------------------------------------------------\nresources.getString(R.string.when_started)\n--------------------------------------------------\nresources.getString(res, resources.getDurationString(alarm.time))\n--------------------------------------------------\nresources.getString(R.string.when_due)\n--------------------------------------------------\nresources.getString(R.string.randomly_every, resources.getDurationString(alarm.time))\n--------------------------------------------------\ngetString(R.string.snoozed_until, DateUtilities.getLongDateStringWithTime(alarm.time, locale))\n--------------------------------------------------\ngetString(R.string.repeats_plural_number_of_times, getDurationString(interval), repeat, getQuantityString(R.plurals.repeat_times, repeat))\n--------------------------------------------------\ncontext.getString(getSingleFrequencyResource(frequency))\n--------------------------------------------------\ngetString(R.string.repeats_single_on_number_of_times, frequencyString, dayString, count, countString)\n--------------------------------------------------\ncontext.getString(R.string.repeats_single_on, frequencyString, dayString)\n--------------------------------------------------\ngetString(R.string.repeats_single_on_until, frequencyString, dayString, DateUtilities.getLongDateString(repeatUntil, locale))\n--------------------------------------------------\ncontext.getString(R.string.repeats_single_number_of_times, frequencyString, count, countString)\n--------------------------------------------------\ncontext.getString(R.string.repeats_single, frequencyString)\n--------------------------------------------------\ngetString(R.string.repeats_single_until, frequencyString, DateUtilities.getLongDateString(repeatUntil, locale))\n--------------------------------------------------\ngetString(R.string.repeats_plural_on_number_of_times, frequencyPlural, dayString, count, countString)\n--------------------------------------------------\ncontext.getString(R.string.repeats_plural_on, frequencyPlural, dayString)\n--------------------------------------------------\ngetString(R.string.repeats_plural_on_until, frequencyPlural, dayString, DateUtilities.getLongDateString(repeatUntil, locale))\n--------------------------------------------------\ncontext.getString(R.string.repeats_plural_number_of_times, frequencyPlural, count, countString)\n--------------------------------------------------\ncontext.getString(R.string.repeats_plural, frequencyPlural)\n--------------------------------------------------\ngetString(R.string.repeats_plural_until, frequencyPlural, DateUtilities.getLongDateString(repeatUntil, locale))\n--------------------------------------------------\ncontext.getString(R.string.list_separator_with_space)\n--------------------------------------------------\ngetString(R.string.repeat_monthly_every_day_of_nth_week, context.getString(R.string.repeat_monthly_last_week), weekday)\n--------------------------------------------------\ncontext.getString(R.string.repeat_monthly_last_week)\n--------------------------------------------------\ngetString(R.string.repeat_monthly_every_day_of_nth_week, context.getString(NTH_WEEK[weekdayNum.offset - 1]), weekday)\n--------------------------------------------------\ncontext.getString(NTH_WEEK[weekdayNum.offset - 1])\n--------------------------------------------------\ncontext.getString(nameResId)\n--------------------------------------------------\ncontext.getString(R.string.create_new_tag, tagData.name)\n--------------------------------------------------\nactivity.getString(R.string.app_name)\n--------------------------------------------------\nrequireContext().getString(it.first!!)", "import com.google.gson.JsonObject\nprivate fun JsonObject.getString(field: String): String? = if (has(field)) {\r\n            get(field).asString\r\n        } else {\r\n            null\r\n        }\nimport com.google.gson.JsonObject" ],
  "QuickNovel/147" : [ "            'o' -> {\n                messageListFragment!!.onCycleSort()\r\n                return true", "import com.fsck.k9.Account.SortType\nfun onCycleSort() {\r\n        val sortTypes = SortType.entries\r\n        val currentIndex = sortTypes.indexOf(sortType)\r\n        val newIndex = if (currentIndex == sortTypes.lastIndex) 0 else currentIndex + 1\r\n        val nextSortType = sortTypes[newIndex]\r\n        changeSort(nextSortType)\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.Account.SortType" ],
  "fcitx5-android/220" : [ "", "import android.view.View;\r\nimport android.view.View\n@Override\r\npublic boolean onLongClick(View view) {\r\n    mCallback.showHelp(view);\r\n    return true;\r\n}" ],
  "QuickNovel/148" : [ "htmlSanitizer.sanitize(html)\n--------------------------------------------------\n\n        val result = htmlSanitizer.sanitize(html)\r\n", "import org.jsoup.nodes.Document\nimport org.jsoup.Jsoup\nfun sanitize(html: String): Document {\r\n        val dirtyDocument = Jsoup.parse(html)\r\n        val cleanedDocument = bodyCleaner.clean(dirtyDocument)\r\n        headCleaner.clean(dirtyDocument, cleanedDocument)\r\n        return cleanedDocument\r\n    }\nImport(names=[org, jsoup, Jsoup], wildcard=false, alias=null)\nImport(names=[org, jsoup, nodes, Document], wildcard=false, alias=null)" ],
  "fcitx5-android/222" : [ "super.onKeyUp(keyCode, event)", "import org.videolan.tools.KeyHelper\nimport android.view.KeyEvent\noverride fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean {\r\n        KeyHelper.manageModifiers(event)\r\n        return super.onKeyUp(keyCode, event)\r\n    }\nImport(names=[android, view, KeyEvent], wildcard=false, alias=null)\nImport(names=[org, videolan, tools, KeyHelper], wildcard=false, alias=null)" ],
  "QuickNovel/144" : [ "                if (position > 0) {\n                    Timber.d(\"Playback stopped [player=$player, position=$position]\")\r\n                    notifyEvent(Constants.EVENT_TIME_UPDATE, \"$position\")\n--------------------------------------------------\n            Activity.RESULT_CANCELED -> {\n                Timber.d(\"Playback stopped by unknown error [player=$player]\")\r\n                notifyEvent(Constants.EVENT_CANCELED)\n--------------------------------------------------\n                        if (position > 0) {\n                            Timber.d(\"Playback stopped [player=$player, position=$position, duration=$duration]\")\r\n                            notifyEvent(Constants.EVENT_TIME_UPDATE, \"$position\")\n--------------------------------------------------\n            Activity.RESULT_CANCELED -> {\n                Timber.d(\"Playback stopped by user [player=$player]\")\r\n                notifyEvent(Constants.EVENT_CANCELED)\n--------------------------------------------------\n            Activity.RESULT_FIRST_USER -> {\n                Timber.d(\"Playback stopped by unknown error [player=$player]\")\r\n                notifyEvent(Constants.EVENT_CANCELED)\n--------------------------------------------------\n                    Timber.d(\n                        \"Playback stopped [player=$player, extraPosition=$extraPosition, extraDuration=$extraDuration]\",\r\n                    )\n--------------------------------------------------\nviewModel.stop()", "import com.google.android.exoplayer2.Player\nfun stop() {\r\n        pause()\r\n        reportPlaybackStop()\r\n        releasePlayer()\r\n    }\nimport com.google.android.exoplayer2.Player" ],
  "VinylMusicPlayer/57" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport android.content.DialogInterface\npublic void onClick(DialogInterface dialog, int id) {\r\n    String metadata = metadata_str.getText().toString().trim().replaceAll(\"\\\\r\\\\n|\\\\r|\\\\n|\" + Const.DELIMITER + \"|\" + Const.SUBDELIMITER, \" \");\r\n    doSetMetadata(ids, metadata);\r\n    return;\r\n}" ],
  "Iconify/223" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/550" : [ "", "import android.location.Location\noverride fun onLocationChanged(location: Location) {\r\n        if (isBetterPosition(location, _position.value)) {\r\n            _position.value = location\r\n        }\r\n    }\nImport(names=[android, location, Location], wildcard=false, alias=null)" ],
  "Trail-Sense/551" : [ "", "import android.location.Location\noverride fun onLocationChanged(location: Location) {\r\n        if (isBetterPosition(location, _position.value)) {\r\n            _position.value = location\r\n        }\r\n    }\nImport(names=[android, location, Location], wildcard=false, alias=null)" ],
  "Trail-Sense/552" : [ "", "import androidx.viewbinding.ViewBinding\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val viewBinding = getViewBinding(resourceId, parent)\r\n        val viewHolder = viewHolder(viewBinding)\r\n        viewHolder?.bindData(getItem(position))\r\n        return viewBinding.root\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)" ],
  "Trail-Sense/554" : [ "", "import org.videolan.medialibrary.interfaces.media.MediaWrapper\noverride fun getAndRemoveDestination(): MediaWrapper? {\r\n        val destination = privateDestination\r\n        privateDestination = null\r\n        return destination\r\n    }\nImport(names=[org, videolan, medialibrary, interfaces, media, MediaWrapper], wildcard=false, alias=null)" ],
  "Trail-Sense/1634" : [ "info.getEntries(requireContext())", "import com.omgodse.notally.R\nimport android.content.Context\noverride fun getEntries(context: Context): Array<String> {\r\n        val ids = arrayOf(R.string.list, R.string.grid)\r\n        return convertToValues(ids, context)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, R], wildcard=false, alias=null)" ],
  "Trail-Sense/555" : [ "", "import org.videolan.medialibrary.interfaces.media.MediaWrapper\noverride fun getAndRemoveDestination(): MediaWrapper? {\r\n        val destination = privateDestination\r\n        privateDestination = null\r\n        return destination\r\n    }\nImport(names=[org, videolan, medialibrary, interfaces, media, MediaWrapper], wildcard=false, alias=null)" ],
  "Iconify/224" : [ "setOnActionClickListener {\n    val i = Intent(activity, SecondaryActivity::class.java)\n    i.putExtra(\"fragment\", SecondaryActivity.HISTORY)\n    requireActivity().startActivityForResult(i, SecondaryActivity.ACTIVITY_RESULT_SECONDARY)\n}", "import android.view.View\nfun setOnActionClickListener(listener: (View) -> Unit) {\r\n        this.actionClickListener = listener\r\n        titleContent.isEnabled = actionClickListener != null\r\n    }" ],
  "Trail-Sense/556" : [ "getOrPutImage(path) {\n    runBlocking(Dispatchers.IO) {\n        var bitmap = AudioUtil.readCoverBitmap(path, width)\n        if (bitmap != null) bitmap = padSquare(bitmap)\n        if (bitmap == null) bitmap = ctx.getBitmapFromDrawable(R.drawable.ic_no_media, width, width)\n        return@runBlocking BitmapUtil.encodeImage(bitmap, ENABLE_TRACING) {\n            getTimestamp()\n        }\n    }\n}\n--------------------------------------------------\ngetOrPutImage(if (nonTransparent) \"${key}_nonTransparent\" else key) {\n    runBlocking(Dispatchers.IO) {\n        var bitmap = if (mw != null) ThumbnailsProvider.obtainBitmap(mw, width) else null\n        if (bitmap == null) bitmap = readEmbeddedArtwork(mw, width)\n        if (padSquare && bitmap != null) bitmap = padSquare(bitmap)\n        if (bitmap == null) bitmap = ctx.getBitmapFromDrawable(fallbackIcon ?: R.drawable.ic_no_media, if (isLarge) width169 else width, if (isLarge) height169 else width)\n        if (nonTransparent) bitmap = removeTransparency(bitmap)\n        return@runBlocking BitmapUtil.encodeImage(bitmap, ENABLE_TRACING) {\n            getTimestamp()\n        }\n    }\n}", " @Synchronized\r\n        fun getOrPutImage(key: String, defaultValue: () -> ByteArray?): ByteArray? {\r\n            val value = memCache.get(key)\r\n            return if (value == null) {\r\n                val answer = defaultValue()\r\n                if (answer != null) {\r\n                    memCache.put(key, answer)\r\n                    answer\r\n                } else null\r\n            } else {\r\n                value\r\n            }\r\n        }" ],
  "Iconify/225" : [ "setVisibilityIfNecessary(binding.webViewProgress.root, View.GONE)\n--------------------------------------------------\nsetVisibilityIfNecessary(binding.webViewProgress.root, View.VISIBLE)", "import android.view.View\nprivate fun setVisibilityIfNecessary(view: View, visibility: Int) {\r\n        if (view.visibility != visibility) {\r\n            view.visibility = visibility\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Trail-Sense/1633" : [ "                    painter = painterResource(\n                        id = getDrawableResource(item.provider.id, context)\r\n                            ?: R.drawable.coin_placeholder\n--------------------------------------------------\n                        painter = painterResource(\n                            id = getDrawableResource(item.id, context)\r\n                                ?: R.drawable.coin_placeholder", "import io.horizontalsystems.bankwallet.R\nimport android.content.Context\nprivate fun getDrawableResource(name: String, context: Context): Int? {\r\n    val resourceId = context.resources.getIdentifier(name, \"drawable\", context.packageName)\r\n    return if (resourceId == 0) null else resourceId\r\n}\nimport android.content.Context\nimport io.horizontalsystems.bankwallet.R" ],
  "Trail-Sense/557" : [ "getOrPutImage(path) {\n    runBlocking(Dispatchers.IO) {\n        var bitmap = AudioUtil.readCoverBitmap(path, width)\n        if (bitmap != null) bitmap = padSquare(bitmap)\n        if (bitmap == null) bitmap = ctx.getBitmapFromDrawable(R.drawable.ic_no_media, width, width)\n        return@runBlocking BitmapUtil.encodeImage(bitmap, ENABLE_TRACING) {\n            getTimestamp()\n        }\n    }\n}\n--------------------------------------------------\ngetOrPutImage(if (nonTransparent) \"${key}_nonTransparent\" else key) {\n    runBlocking(Dispatchers.IO) {\n        var bitmap = if (mw != null) ThumbnailsProvider.obtainBitmap(mw, width) else null\n        if (bitmap == null) bitmap = readEmbeddedArtwork(mw, width)\n        if (padSquare && bitmap != null) bitmap = padSquare(bitmap)\n        if (bitmap == null) bitmap = ctx.getBitmapFromDrawable(fallbackIcon ?: R.drawable.ic_no_media, if (isLarge) width169 else width, if (isLarge) height169 else width)\n        if (nonTransparent) bitmap = removeTransparency(bitmap)\n        return@runBlocking BitmapUtil.encodeImage(bitmap, ENABLE_TRACING) {\n            getTimestamp()\n        }\n    }\n}", " @Synchronized\r\n        fun getOrPutImage(key: String, defaultValue: () -> ByteArray?): ByteArray? {\r\n            val value = memCache.get(key)\r\n            return if (value == null) {\r\n                val answer = defaultValue()\r\n                if (answer != null) {\r\n                    memCache.put(key, answer)\r\n                    answer\r\n                } else null\r\n            } else {\r\n                value\r\n            }\r\n        }" ],
  "VinylMusicPlayer/66" : [ "@SuppressWarnings(\"WeakerAccess\")\r\n/* synthetic access */\r\nvoid onAttached(@NonNull View view) {\r\n    RecyclerView.ViewHolder holder = mRecyclerView.findContainingViewHolder(view);\r\n    if (holder == null) {\r\n        if (DEBUG) {\r\n            Log.w(TAG, \"Unable to find ViewHolder for View. Ignoring onAttached event.\");\r\n        }\r\n        return;\r\n    }\r\n    int position = holder.getAbsoluteAdapterPosition();\r\n    long id = holder.getItemId();\r\n    if (position != RecyclerView.NO_POSITION && id != RecyclerView.NO_ID) {\r\n        mPositionToKey.put(position, id);\r\n        mKeyToPosition.put(id, position);\r\n    }\r\n}\n--------------------------------------------------\n@SuppressWarnings(\"WeakerAccess\")\r\n/* synthetic access */\r\nvoid onDetached(@NonNull View view) {\r\n    RecyclerView.ViewHolder holder = mRecyclerView.findContainingViewHolder(view);\r\n    if (holder == null) {\r\n        if (DEBUG) {\r\n            Log.w(TAG, \"Unable to find ViewHolder for View. Ignoring onDetached event.\");\r\n        }\r\n        return;\r\n    }\r\n    int position = holder.getAbsoluteAdapterPosition();\r\n    long id = holder.getItemId();\r\n    if (position != RecyclerView.NO_POSITION && id != RecyclerView.NO_ID) {\r\n        mPositionToKey.delete(position);\r\n        mKeyToPosition.remove(id);\r\n    }\r\n}\n--------------------------------------------------\n", "@Override\r\npublic long getItemId(int position) {\r\n    if (position < 0 || position >= selected.size())\r\n        return -1L;\r\n    return selected.get(position).id;\r\n}" ],
  "Trail-Sense/1638" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Trail-Sense/1639" : [ "            run(from, V4_9_5) { removeDuplicateTags() }\n            run(from, V5_3_0) { migrateFilters() }\r\n            run(from, V6_0_beta_1) { migrateDefaultSyncList() }", "import org.tasks.data.Filter\nprivate suspend fun migrateFilters() {\r\n        for (filter in filterDao.getFilters()) {\r\n            filterDao.update(\r\n                filter.copy(\r\n                    sql = migrateMetadata(filter.dirtyHack),\r\n                    criterion = migrateMetadata(filter.criterion),\r\n                )\r\n            )\r\n        }\r\n    }\nimport org.tasks.data.Filter" ],
  "VinylMusicPlayer/64" : [ "            }\n            return super.onSongMenuItemClick(item)\n        }\n--------------------------------------------------\nonSongMenuItemClick(item) || super.onMenuItemClick(item)", "import code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.dialogs.RemoveSongFromPlaylistDialog\nimport code.name.monkey.retromusic.db.toSongEntity\nimport code.name.monkey.retromusic.R\nimport android.view.MenuItem\noverride fun onSongMenuItemClick(item: MenuItem): Boolean {\n            when (item.itemId) {\n                R.id.action_remove_from_playlist -> {\n                    RemoveSongFromPlaylistDialog.create(song.toSongEntity(playlistId))\n                        .show(activity.supportFragmentManager, \"REMOVE_FROM_PLAYLIST\")\n                    return true\n                }\n            }\n            return super.onSongMenuItemClick(item)\n        }\nimport android.view.MenuItem\nimport code.name.monkey.retromusic.R\nimport code.name.monkey.retromusic.db.toSongEntity\nimport code.name.monkey.retromusic.dialogs.RemoveSongFromPlaylistDialog\nimport code.name.monkey.retromusic.model.Song" ],
  "VinylMusicPlayer/62" : [ "public int getItemViewType(int position) {\r\n    int type = 1;\r\n    for (String section : this.sections.keySet()) {\r\n        Adapter adapter = sections.get(section);\r\n        int size = adapter.getCount() + 1;\r\n        // check if position inside this section\r\n        if (position == 0)\r\n            return TYPE_SECTION_HEADER;\r\n        if (position < size)\r\n            return type + adapter.getItemViewType(position - 1);\r\n        // otherwise jump into next section\r\n        position -= size;\r\n        type += adapter.getViewTypeCount();\r\n    }\r\n    return -1;\r\n}\n--------------------------------------------------\npublic boolean isEnabled(int position) {\r\n    return (getItemViewType(position) != TYPE_SECTION_HEADER);\r\n}\n--------------------------------------------------\n", "import android.view.View\n@Override\r\npublic int getItemViewType(int position) {\r\n    synchronized (data) {\r\n        return data.get(position).row_type;\r\n    }\r\n}" ],
  "MaterialFiles/194" : [ "      val soundCount = binding.intensity.value.toInt()\n      val tags = binding.tags.getSelectedChips()\r\n        .map { it.tag as SoundTag }", "import com.google.android.material.chip.ChipGroup\nimport com.google.android.material.chip.Chip\nimport androidx.core.view.forEach\nprivate fun ChipGroup.getSelectedChips(): List<Chip> {\r\n    val result = mutableListOf<Chip>()\r\n    forEach { view ->\r\n      if (view is Chip && view.isChecked) {\r\n        result.add(view)\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\nimport androidx.core.view.forEach\nimport com.google.android.material.chip.Chip\nimport com.google.android.material.chip.ChipGroup" ],
  "VinylMusicPlayer/61" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/196" : [ "            mode = (activity as AppCompatActivity).startSupportActionMode(this)\n            updateModeTitle()\r\n            Flags.set(Flags.TLFP_NO_INTERCEPT_TOUCH)\n--------------------------------------------------\n        taskAdapter.setSelected(tasks)\n        updateModeTitle()\r\n        recyclerAdapter?.notifyDataSetChanged()\n--------------------------------------------------\ntaskList.updateModeTitle()", "import kotlin.math.max\nfun updateModeTitle() {\r\n        if (mode != null) {\r\n            val count = max(1, taskAdapter.numSelected)\r\n            mode!!.title = count.toString()\r\n        }\r\n    }\nimport kotlin.math.max" ],
  "QuickNovel/158" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "fcitx5-android/212" : [ "                actions = {\n                    IconButton(onClick = { openDeleteDialog = true }) {\r\n                        Icon(Icons.Default.Delete, stringResource(R.string.delete_folder))\n--------------------------------------------------\n                    }\n                    IconButton(onClick = { openEditDialog = true }) {\r\n                        Icon(Icons.Default.Edit, stringResource(R.string.delete_folder))\n--------------------------------------------------\n            FloatingActionButton(\n                onClick = {\r\n                        navController.navigate(\n--------------------------------------------------\n                        note = note,\n                        onClick = {\r\n                            navController.navigate(\n--------------------------------------------------\n                            note = note,\n                            onClick = {\r\n                                navController.navigate(\n--------------------------------------------------\n                        shape = RoundedCornerShape(25.dp),\n                        onClick = {\r\n                            viewModel.onEvent(NoteEvent.DeleteFolder(folder!!))\n--------------------------------------------------\n                        shape = RoundedCornerShape(25.dp),\n                        onClick = {\r\n                            openDeleteDialog = false\n--------------------------------------------------\n                        shape = RoundedCornerShape(25.dp),\n                        onClick = {\r\n                            viewModel.onEvent(NoteEvent.UpdateFolder(folder?.copy(name = name)!!))\n--------------------------------------------------\n                        shape = RoundedCornerShape(25.dp),\n                        onClick = { openEditDialog = false },\r\n                    ) {\n--------------------------------------------------\nonClick(bookmark)\n--------------------------------------------------\nonClick(entry)\n--------------------------------------------------\nonClick(note)\n--------------------------------------------------\nsuper.onClick()\n--------------------------------------------------\nonClick()", "import com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.presentation.main.MainActivity\nimport androidx.core.net.toUri\nimport android.content.Intent\noverride fun onClick() {\r\n        super.onClick()\r\n        val intent = Intent(\r\n            Intent.ACTION_VIEW,\r\n            \"${Constants.TASKS_SCREEN_URI}/true\".toUri(),\r\n            this,\r\n            MainActivity::class.java\r\n        ).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        startActivityAndCollapse(intent)\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, presentation, main, MainActivity], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/69" : [ "@Override\r\npublic int preSetValue(int newValueId) throws IllegalArgumentException {\r\n    String newValue = (String) adapter.getItem(newValueId);\r\n    PreferenceManager prefMgr = getPreferenceManager();\r\n    if (newValue.contentEquals(DEFAULT)) {\r\n        prefMgr.getSharedPreferences().edit().apply();\r\n        switchTo(null);\r\n    } else if (newValue.contentEquals(getString(org.runnerup.common.R.string.New_audio_scheme))) {\r\n        createNewAudioSchemeDialog();\r\n    } else {\r\n        prefMgr.getSharedPreferences().edit().apply();\r\n        updateSortOrder(newValue);\r\n        switchTo(newValue);\r\n    }\r\n    throw new IllegalArgumentException();\r\n}\n--------------------------------------------------\n@Override\r\npublic View getView(int position, View convertView, ViewGroup parent) {\r\n    if (convertView == null) {\r\n        convertView = inflater.inflate(android.R.layout.simple_spinner_dropdown_item, parent, false);\r\n    }\r\n    TextView ret = convertView.findViewById(android.R.id.text1);\r\n    ret.setText(getItem(position).toString());\r\n    return ret;\r\n}\n--------------------------------------------------\n", "@Override\r\npublic Object getItem(int position) {\r\n    if (position < entries.length)\r\n        return entries[position];\r\n    return null;\r\n}" ],
  "VinylMusicPlayer/67" : [ "/**\r\n * Removes all observers that are tied to the given {@link LifecycleOwner}.\r\n *\r\n * @param owner The {@code LifecycleOwner} scope for the observers to be removed.\r\n */\r\n@SuppressWarnings(\"WeakerAccess\")\r\n@MainThread\r\npublic void removeObservers(@NonNull final LifecycleOwner owner) {\r\n    assertMainThread(\"removeObservers\");\r\n    for (Map.Entry<Observer<? super T>, ObserverWrapper> entry : mObservers) {\r\n        if (entry.getValue().isAttachedTo(owner)) {\r\n            removeObserver(entry.getKey());\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n@Nullable\r\n@Override\r\npublic Object getLastKey() {\r\n    return mDataSource.getKey(mLastLoad, mLastItem);\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable\n@Nullable\r\n@Override\r\nfinal Key getKey(int position, Value item) {\r\n    if (item == null) {\r\n        return null;\r\n    }\r\n    return getKey(item);\r\n}" ],
  "QuickNovel/157" : [ "refreshWithMinLoadingSpinnerPeriod()", "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport io.horizontalsystems.bankwallet.R\nimport androidx.lifecycle.viewModelScope\nprivate fun refreshWithMinLoadingSpinnerPeriod() {\r\n        service.refresh()\r\n        viewModelScope.launch {\r\n            isRefreshingLiveData.postValue(true)\r\n            delay(1000)\r\n            isRefreshingLiveData.postValue(false)\r\n        }\r\n    }\nImport(names=[androidx, lifecycle, viewModelScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, delay], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)" ],
  "QuickNovel/161" : [ "= when (syncState) {\r\n        is SyncState.Synced -> AdapterState.Synced\n--------------------------------------------------\n        is SyncState.Synced -> AdapterState.Synced\n        is SyncState.NotSynced -> AdapterState.NotSynced(syncState.error)\r\n        is SyncState.Syncing -> AdapterState.Syncing()\n--------------------------------------------------\nsyncState(it)\n--------------------------------------------------\nsyncState()", "import io.horizontalsystems.bankwallet.entities.DataState\nprivate fun syncState(state: DataState<List<MarketTickerItem>>) {\r\n        viewStateLiveData.postValue(state.viewState)\r\n\r\n        state.dataOrNull?.let { data ->\r\n            viewItemsLiveData.postValue(data.map { createViewItem(it) })\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, entities, DataState], wildcard=false, alias=null)" ],
  "Trail-Sense/17" : [ "", "import org.tasks.R\nimport kotlinx.coroutines.launch\nimport androidx.preference.Preference\nimport androidx.lifecycle.lifecycleScope\nimport android.os.Bundle\nfinal override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(getPreferenceXml(), rootKey)\r\n\r\n        tintIcons(preferenceScreen, requireContext().getColor(R.color.icon_tint_with_alpha))\r\n\r\n        lifecycleScope.launch {\r\n            setupPreferences(savedInstanceState)\r\n        }\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, lifecycleScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)" ],
  "Trail-Sense/18" : [ "", "import com.simplemobiletools.notes.pro.models.Note\noverride fun onResume() {\r\n        super.onResume()\r\n        loadNoteById(noteId)\r\n    }" ],
  "QuickNovel/162" : [ "done(startId)\n--------------------------------------------------\n                .setShowWhen(true)\n                .setSmallIcon(R.drawable.ic_done_all_white_24dp)\r\n                .setStyle(style)\n--------------------------------------------------\n\n        // you're done, or not yours - don't sound, do delete\r\n        if (task.isCompleted || task.isDeleted) {\n--------------------------------------------------\n                R.drawable.ic_check_white_24dp,\n                context.getString(R.string.rmd_NoA_done),\r\n                completePendingIntent)", "private fun done(startId: Int) {\r\n        scheduleNext()\r\n        stopSelf(startId)\r\n    }" ],
  "Trail-Sense/15" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Trail-Sense/13" : [ "@Override\r\npublic void onViewCreated(@NonNull View view, Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    butPlay.setOnClickListener(v -> {\r\n        if (controller == null) {\r\n            return;\r\n        }\r\n        if (controller.getMedia() != null && controller.getMedia().getMediaType() == MediaType.VIDEO && controller.getStatus() != PlayerStatus.PLAYING) {\r\n            controller.playPause();\r\n            getContext().startActivity(PlaybackService.getPlayerActivityIntent(getContext(), controller.getMedia()));\r\n        } else {\r\n            controller.playPause();\r\n        }\r\n    });\r\n    loadMediaInfo();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    EventBus.getDefault().register(this);\r\n}\n--------------------------------------------------\n", "import android.os.Bundle;\r\nimport android.view.View;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.os.Bundle\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    EventBus.getDefault().register(this);\r\n}" ],
  "MaterialFiles/529" : [ "ParkedOnlyOnClickListener.create(::openPreferencesOnPhone)\n--------------------------------------------------\ncreate(controlItems, AppContextProvider.appContext.getString(R.string.controls_prefs_category))\n--------------------------------------------------\nSectionedItemList.create(helpItems, AppContextProvider.appContext.getString(R.string.help))\n--------------------------------------------------\ncreate(moreItems, AppContextProvider.appContext.getString(R.string.more_preferences))\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_play_pause_video)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_pause_play_video)\n--------------------------------------------------\nMediaPlayer.Equalizer.create()\n--------------------------------------------------\ncreate()\n--------------------------------------------------\ncreate(VideosViewModel::class.java)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_delete)\n--------------------------------------------------\nVectorDrawableCompat.create(this.resources, drawableId, this.theme)\n--------------------------------------------------\nconstraintSet.create(guidelineId, ConstraintSet.VERTICAL_GUIDELINE)\n--------------------------------------------------\nRenderScript.create(AppContextProvider.appContext)\n--------------------------------------------------\nScriptIntrinsicBlur.create(rs, Element.U8_4(rs))\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(this, R.drawable.anim_play_pause_video)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(this, R.drawable.anim_pause_play_video)\n--------------------------------------------------\nPrecomputedTextCompat.create(text, params)\n--------------------------------------------------\nmodel.create(this@MiniPlayerConfigureActivity, appWidgetId)", "import org.videolan.medialibrary.interfaces.media.Playlist\nimport androidx.lifecycle.ViewModel\nimport android.content.Context\noverride fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n            @Suppress(\"UNCHECKED_CAST\")\r\n            return PlaylistsViewModel(context.applicationContext, type) as T\r\n        }\nImport(names=[androidx, lifecycle, ViewModel], wildcard=false, alias=null)\nImport(names=[org, videolan, medialibrary, interfaces, media, Playlist], wildcard=false, alias=null)" ],
  "Trail-Sense/161" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/14" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    binding.editContent.removeTextChangedListener(textWatcher);\r\n    cancelTimers();\r\n    final ViewGroup parentView = requireActivity().findViewById(android.R.id.content);\r\n    if (parentView != null && parentView.getChildCount() > 0) {\r\n        keyboardShown = DisplayUtils.isSoftKeyboardVisible(parentView.getChildAt(0));\r\n    } else {\r\n        keyboardShown = false;\r\n    }\r\n}\n--------------------------------------------------\n", "import it.niedermann.owncloud.notes.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    binding.editContent.addTextChangedListener(textWatcher);\r\n    if (keyboardShown) {\r\n        openSoftKeyboard();\r\n    }\r\n}" ],
  "Trail-Sense/162" : [ "scaleDetector.onTouchEvent(motionEvent)\n--------------------------------------------------\ngestureDetector.onTouchEvent(motionEvent)\n--------------------------------------------------\nsuper.onTouchEvent(event)", "import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n        return if (isScrollable) {\r\n            super.onTouchEvent(event)\r\n        } else {\r\n            true\r\n        }\r\n    }\nImport(names=[android, view, MotionEvent], wildcard=false, alias=null)" ],
  "Trail-Sense/164" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/165" : [ "", "import com.omgodse.notally.preferences.View\nimport android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n        adapter = null\r\n    }" ],
  "Trail-Sense/166" : [ "@Override\r\npublic void onDismiss(@NonNull DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    getActivity().finish();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onDismiss(@NonNull DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    if (nextcloudLoginFlow != null) {\r\n        nextcloudLoginFlow.cancel();\r\n    }\r\n}\n--------------------------------------------------\n", "import android.app.Dialog;\r\nimport android.content.DialogInterface;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.DialogInterface\nimport android.app.Dialog\n@Override\r\npublic void onDismiss(@NonNull DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    if (nextcloudLoginFlow != null) {\r\n        nextcloudLoginFlow.cancel();\r\n    }\r\n}" ],
  "BCR/74" : [ "appendPath(update()?.id().toString())\n--------------------------------------------------\nUrlUtils.appendPath(project(), \"creator_bio\")\n--------------------------------------------------\nUrlUtils.appendPath(project(), \"description\")\n--------------------------------------------------\nUrlUtils.appendPath(env?.webEndpoint() ?: \"\", COMMENT_KICKSTARTER_GUIDELINES)\n--------------------------------------------------\nUrlUtils.appendPath(it.webEndpoint(), path)\n--------------------------------------------------\nappendPath(environment?.webEndpoint() ?: \"\", CommentsActivity.COMMENT_KICKSTARTER_GUIDELINES)\n--------------------------------------------------\nUrlUtils.appendPath(baseUrl, HelpActivity.TERMS_OF_USE)\n--------------------------------------------------\nUrlUtils.appendPath(baseUrl, HelpActivity.COOKIES)\n--------------------------------------------------\nUrlUtils.appendPath(baseUrl, HelpActivity.PRIVACY)\n--------------------------------------------------\nUrlUtils.appendPath(baseUrl, \"trust\")\n--------------------------------------------------\nUrlUtils.appendPath(environment.webEndpoint(), ENVIROMENT)\n--------------------------------------------------\nUrlUtils.appendPath(environment.webEndpoint(), ACCOUNTABILITY)", "import android.net.Uri\nfun appendPath(baseUrl: String, path: String): String {\r\n        val uriBuilder = Uri.parse(baseUrl).buildUpon()\r\n        uriBuilder.appendEncodedPath(path)\r\n\r\n        return uriBuilder.build().toString()\r\n    }\nImport(names=[android, net, Uri], wildcard=false, alias=null)" ],
  "BCR/73" : [ "getAudioFile(songPaths!![0]).tagOrCreateAndSetDefault", "import java.io.File\nimport org.jaudiotagger.audio.AudioFileIO\nimport org.jaudiotagger.audio.AudioFile\nimport android.util.Log\nprivate fun getAudioFile(path: String): AudioFile {\n        return try {\n            if (!this::audioFile.isInitialized) {\n                audioFile = AudioFileIO.read(File(path))\n            }\n            audioFile\n        } catch (e: Exception) {\n            Log.e(TAG, \"Could not read audio file $path\", e)\n            AudioFile()\n        }\n    }\nImport(names=[android, util, Log], wildcard=false, alias=null)\nImport(names=[org, jaudiotagger, audio, AudioFile], wildcard=false, alias=null)\nImport(names=[org, jaudiotagger, audio, AudioFileIO], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "QuickNovel/169" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/167" : [ "", "import org.tasks.ui.TaskEditViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n            inflater: LayoutInflater,\r\n            container: ViewGroup?,\r\n            savedInstanceState: Bundle?\r\n    ): View {\r\n        viewModel = ViewModelProvider(requireParentFragment())[TaskEditViewModel::class.java]\r\n        val view = bind(container)\r\n        createView(savedInstanceState)\r\n        return view\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, ViewModelProvider], wildcard=false, alias=null)" ],
  "QuickNovel/168" : [ "getListOfCurrencies()", "import type.CurrencyCode\nprivate fun getListOfCurrencies(): List<String> {\r\n        val strings = arrayListOf<String>()\r\n        for (currency in supportedCurrencies) {\r\n            strings.add(getStringForCurrencyCode(currency))\r\n        }\r\n        return strings\r\n    }" ],
  "Trail-Sense/28" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/29" : [ "@Override\r\npublic ResultCode onConnecting(final Callback callback, Context context) {\r\n    if (ContextCompat.checkSelfPermission(this.tracker, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n        mWithoutGps = true;\r\n    }\r\n    try {\r\n        LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        frequency_ms = parseAndFixInteger(preferences, R.string.pref_pollInterval, \"1000\", context);\r\n        if (!mWithoutGps) {\r\n            Integer frequency_meters = parseAndFixInteger(preferences, R.string.pref_pollDistance, \"0\", context);\r\n            lm.requestLocationUpdates(GPS_PROVIDER, frequency_ms, frequency_meters, tracker);\r\n            mGpsStatus = new GpsStatus(context);\r\n            mGpsStatus.start(this);\r\n            mConnectCallback = callback;\r\n            return ResultCode.RESULT_PENDING;\r\n        } else {\r\n            String[] list = { GPS_PROVIDER, NETWORK_PROVIDER, PASSIVE_PROVIDER };\r\n            mLastLocation = null;\r\n            for (String s : list) {\r\n                Location tmp = lm.getLastKnownLocation(s);\r\n                if (mLastLocation == null || tmp.getTime() > mLastLocation.getTime()) {\r\n                    mLastLocation = tmp;\r\n                }\r\n            }\r\n            if (mLastLocation != null) {\r\n                mLastLocation.removeSpeed();\r\n                mLastLocation.removeAltitude();\r\n                mLastLocation.removeAccuracy();\r\n                mLastLocation.removeBearing();\r\n            }\r\n            gpsLessLocationProvider.run();\r\n            return ResultCode.RESULT_OK;\r\n        }\r\n    } catch (Exception ex) {\r\n        return ResultCode.RESULT_ERROR;\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic ResultCode onConnecting(final Callback callback, Context context) {\r\n    if (ContextCompat.checkSelfPermission(this.tracker, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n        mWithoutGps = true;\r\n    }\r\n    try {\r\n        LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        frequency_ms = parseAndFixInteger(preferences, R.string.pref_pollInterval, \"1000\", context);\r\n        if (!mWithoutGps) {\r\n            Integer frequency_meters = parseAndFixInteger(preferences, R.string.pref_pollDistance, \"0\", context);\r\n            lm.requestLocationUpdates(GPS_PROVIDER, frequency_ms, frequency_meters, tracker);\r\n            mGpsStatus = new GpsStatus(context);\r\n            mGpsStatus.start(this);\r\n            mConnectCallback = callback;\r\n            return ResultCode.RESULT_PENDING;\r\n        } else {\r\n            String[] list = { GPS_PROVIDER, NETWORK_PROVIDER, PASSIVE_PROVIDER };\r\n            mLastLocation = null;\r\n            for (String s : list) {\r\n                Location tmp = lm.getLastKnownLocation(s);\r\n                if (mLastLocation == null || tmp.getTime() > mLastLocation.getTime()) {\r\n                    mLastLocation = tmp;\r\n                }\r\n            }\r\n            if (mLastLocation != null) {\r\n                mLastLocation.removeSpeed();\r\n                mLastLocation.removeAltitude();\r\n                mLastLocation.removeAccuracy();\r\n                mLastLocation.removeBearing();\r\n            }\r\n            gpsLessLocationProvider.run();\r\n            return ResultCode.RESULT_OK;\r\n        }\r\n    } catch (Exception ex) {\r\n        return ResultCode.RESULT_ERROR;\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.text.TextUtils\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate Integer parseAndFixInteger(SharedPreferences preferences, int resId, String def, Context context) {\r\n    String s = preferences.getString(context.getString(resId), def);\r\n    if (TextUtils.isEmpty(s)) {\r\n        // Update the settings\r\n        SharedPreferences.Editor prefedit = preferences.edit();\r\n        prefedit.putString(context.getString(resId), def);\r\n        prefedit.apply();\r\n        s = def;\r\n    }\r\n    return Integer.parseInt(s);\r\n}" ],
  "QuickNovel/173" : [ "", "import org.tasks.ui.TaskEditViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n            inflater: LayoutInflater,\r\n            container: ViewGroup?,\r\n            savedInstanceState: Bundle?\r\n    ): View {\r\n        viewModel = ViewModelProvider(requireParentFragment())[TaskEditViewModel::class.java]\r\n        val view = bind(container)\r\n        createView(savedInstanceState)\r\n        return view\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, ViewModelProvider], wildcard=false, alias=null)" ],
  "QuickNovel/174" : [ "super.onViewCreated(view, savedInstanceState)", "import com.omgodse.notally.preferences.View\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        binding?.ImageView?.setImageResource(getBackground())\r\n\r\n        setupAdapter()\r\n        setupRecyclerView()\r\n        setupObserver()\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, preferences, View], wildcard=false, alias=ViewPref)" ],
  "Trail-Sense/26" : [ "", "import org.tasks.R\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        refreshButtons()\r\n    }" ],
  "QuickNovel/175" : [ "", "import android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport ml.docilealligator.infinityforreddit.R;\r\nimport ml.docilealligator.infinityforreddit.comment.Comment;\r\nimport ml.docilealligator.infinityforreddit.databinding.ItemCommentBinding\nimport ml.docilealligator.infinityforreddit.comment.Comment\nimport ml.docilealligator.infinityforreddit.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\n@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n    if (viewType == VIEW_TYPE_DATA) {\r\n        return new CommentViewHolder(ItemCommentBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false));\r\n    } else if (viewType == VIEW_TYPE_ERROR) {\r\n        return new ErrorViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_footer_error, parent, false));\r\n    } else {\r\n        return new LoadingViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_footer_loading, parent, false));\r\n    }\r\n}" ],
  "Trail-Sense/27" : [ "/**\r\n * Called by Tracker during initialization\r\n */\r\n@Override\r\npublic ResultCode onInit(final Callback callback, Context context) {\r\n    return forEach(\"onInit\", (comp0, currentResultCode, callback0, context0) -> {\r\n        if (currentResultCode == ResultCode.RESULT_OK)\r\n            return comp0.onInit(callback0, context0);\r\n        else\r\n            return currentResultCode;\r\n    }, callback, context);\r\n}\n--------------------------------------------------\npublic void setup() {\r\n    switch(state.get()) {\r\n        case INIT:\r\n            break;\r\n        case INITIALIZING:\r\n        case INITIALIZED:\r\n            return;\r\n        case CONNECTING:\r\n        case CONNECTED:\r\n        case STARTED:\r\n        case PAUSED:\r\n        case ERROR:\r\n        case STOPPED:\r\n            if (BuildConfig.DEBUG) {\r\n                throw new AssertionError();\r\n            }\r\n            return;\r\n        case CLEANUP:\r\n            // if CLEANUP is in progress, setup will continue once complete\r\n            nextState = TrackerState.INITIALIZING;\r\n            return;\r\n    }\r\n    state.set(TrackerState.INITIALIZING);\r\n    TrackerComponent.ResultCode result = components.onInit(onInitCallback, getApplicationContext());\r\n    if (result != TrackerComponent.ResultCode.RESULT_PENDING) {\r\n        onInitCallback.run(components, result);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.location.Location;\r\nimport android.location.LocationManager;\r\nimport org.runnerup.R;\r\nimport android.location.LocationManager.GPS_PROVIDER\nimport org.runnerup.R\nimport android.location.LocationManager\nimport android.location.Location\nimport android.content.Context\n@Override\r\npublic ResultCode onInit(final Callback callback, Context context) {\r\n    try {\r\n        LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n        if (lm == null) {\r\n            return ResultCode.RESULT_NOT_SUPPORTED;\r\n        }\r\n        if (lm.getProvider(LocationManager.GPS_PROVIDER) == null) {\r\n            return ResultCode.RESULT_NOT_SUPPORTED;\r\n        }\r\n    } catch (Exception ex) {\r\n        return ResultCode.RESULT_ERROR;\r\n    }\r\n    return ResultCode.RESULT_OK;\r\n}" ],
  "MaterialFiles/537" : [ "= updateState {\n    event\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.AddBreadcrumb(breadcrumb.impl.message, breadcrumb.impl.type, \"t${breadcrumb.impl.timestamp.time}\", breadcrumb.impl.metadata ?: mutableMapOf())\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.UpdateOrientation(orientation)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.Install(conf.apiKey, conf.enabledErrorTypes.ndkCrashes, conf.appVersion, conf.buildUuid, conf.releaseStage, lastRunInfoPath, consecutiveLaunchCrashes, conf.sendThreads)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.DeliverPending\n}\n--------------------------------------------------\n= updateState {\n    StateEvent.UpdateContext(getContext())\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.AddFeatureFlag(name)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.AddFeatureFlag(name, variant)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.ClearFeatureFlag(name)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.ClearFeatureFlags\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.UpdateIsLaunching(false)\n}\n--------------------------------------------------\nupdateState {\n    StateEvent.UpdateMemoryTrimEvent(isLowMemory, memoryTrimLevel, trimLevelDescription)\n}\n--------------------------------------------------\nnull -> updateState {\n    StateEvent.ClearMetadataSection(section)\n}\n--------------------------------------------------\nelse -> updateState {\n    StateEvent.ClearMetadataValue(section, key)\n}\n--------------------------------------------------\nelse -> updateState {\n    AddMetadata(section, key, metadata.getMetadata(section, key))\n}\n--------------------------------------------------\nupdateState {\n    AddMetadata(section, it.key, metadata.getMetadata(section, it.key))\n}\n--------------------------------------------------\n= updateState {\n    StateEvent.UpdateUser(user)\n}", "internal inline fun updateState(provider: () -> StateEvent) {\r\n        // optimization to avoid unnecessary iterator and StateEvent construction\r\n        if (observers.isEmpty()) {\r\n            return\r\n        }\r\n\r\n        // construct the StateEvent object and notify observers\r\n        val event = provider()\r\n        observers.forEach { it.onStateChange(event) }\r\n    }" ],
  "Trail-Sense/24" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "Trail-Sense/172" : [ "inactiveColor = setAlpha(inactiveColor!!, 0.1f)", "import android.graphics.Color\n @JvmStatic\r\n    fun setAlpha(color: Int, newAlpha: Float): Int {\r\n        val intAlpha = (newAlpha * 255).toInt()\r\n        return Color.argb(intAlpha, Color.red(color), Color.green(color), Color.blue(color))\r\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)" ],
  "Trail-Sense/173" : [ "setColor(c)\n--------------------------------------------------\nbinding.frequencyChart.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreRing.setColor(androidColor)\n--------------------------------------------------\nbinding.scoreView.setColor(androidColor)\n--------------------------------------------------\nbinding.streakChart.setColor(androidColor)\n--------------------------------------------------\nbinding.targetChart.setColor(androidColor)\n--------------------------------------------------\nsetColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nchart.setColor(WidgetTheme().color(habit.color).toInt())\n--------------------------------------------------\nring.setColor(fgColor)", "import android.graphics.Color\nfun setColor(color: Int) {\r\n        this.color = color\r\n        invalidate()\r\n    }" ],
  "Trail-Sense/20" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "Iconify/605" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "BCR/64" : [ "JsonHelper.serialize(payload)\n--------------------------------------------------\nJsonHelper.serialize(breadcrumb)\n--------------------------------------------------\nserialize(value, baos)\n--------------------------------------------------\ndslJson.serialize(value, stream)", "import java.io.OutputStream\nimport java.io.IOException\nimport java.io.FileOutputStream\nimport java.io.File\nfun serialize(value: Any, file: File) {\r\n        val parentFile = file.parentFile\r\n        if (parentFile != null && !parentFile.exists()) {\r\n            if (!parentFile.mkdirs()) {\r\n                throw FileSystemException(file, null, \"Could not create parent dirs of file\")\r\n            }\r\n        }\r\n        try {\r\n            FileOutputStream(file).use { stream -> dslJson.serialize(value, stream) }\r\n        } catch (ex: IOException) {\r\n            throw IOException(\"Could not serialize JSON document to $file\", ex)\r\n        }\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)\nImport(names=[java, io, FileOutputStream], wildcard=false, alias=null)\nImport(names=[java, io, IOException], wildcard=false, alias=null)" ],
  "Iconify/601" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/600" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/609" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/608" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "QuickNovel/176" : [ "super.onBindViewHolder(viewHolder, position)", "import com.battlelancer.seriesguide.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r\n            is FirstRunViewHolder -> holder.bind() // do nothing\r\n            is ShowsViewHolder -> holder.bind(getItem(position), context)\r\n            else -> throw IllegalArgumentException(\"Unknown view holder type\")\r\n        }\r\n    }\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)" ],
  "QuickNovel/177" : [ "", "import org.tasks.ui.TaskEditViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n            inflater: LayoutInflater,\r\n            container: ViewGroup?,\r\n            savedInstanceState: Bundle?\r\n    ): View {\r\n        viewModel = ViewModelProvider(requireParentFragment())[TaskEditViewModel::class.java]\r\n        val view = bind(container)\r\n        createView(savedInstanceState)\r\n        return view\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, ViewModelProvider], wildcard=false, alias=null)" ],
  "MaterialFiles/547" : [ "is MediaWrapper -> getMediaThumbnail(item, width)\n--------------------------------------------------\nThumbnailsProvider.getMediaThumbnail(mw, 272.toPixel())", "import org.videolan.vlc.gui.helpers.AudioUtil.readCoverBitmap\nimport org.videolan.medialibrary.interfaces.media.MediaWrapper\nimport androidx.annotation.WorkerThread\nimport android.net.Uri\nimport android.graphics.Bitmap\n @WorkerThread\r\n    fun getMediaThumbnail(item: MediaWrapper, width: Int): Bitmap? {\r\n        return if (isMediaVideo(item))\r\n            getVideoThumbnail(item, width)\r\n        else\r\n            readCoverBitmap(Uri.decode(item.artworkMrl), width)\r\n    }\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)\nImport(names=[org, videolan, medialibrary, interfaces, media, MediaWrapper], wildcard=false, alias=null)\nImport(names=[org, videolan, vlc, gui, helpers, AudioUtil, readCoverBitmap], wildcard=false, alias=null)" ],
  "Trail-Sense/180" : [ "      if (preset == null) {\n        Toast.makeText(\r\n          this@PresetShortcutHandlerActivity,\n--------------------------------------------------\n    binding.randomPresetButton.setOnLongClickListener {\n      Toast.makeText(requireContext(), R.string.random_preset, Toast.LENGTH_LONG).show()\r\n      true\n--------------------------------------------------\n    binding.savePresetButton.setOnLongClickListener {\n      Toast.makeText(requireContext(), R.string.save_preset, Toast.LENGTH_LONG).show()\r\n      true", "import com.google.android.material.snackbar.Snackbar\nimport com.google.android.material.snackbar.BaseTransientBottomBar\nimport com.github.ashutoshgngwr.noice.R\nimport androidx.appcompat.view.ContextThemeWrapper\nimport androidx.annotation.StyleRes\nimport androidx.annotation.DrawableRes\nimport android.widget.TextView\nimport android.view.View\nprivate fun make(\r\n    view: View,\r\n    msg: String,\r\n    @BaseTransientBottomBar.Duration length: Int,\r\n    @StyleRes theme: Int,\r\n    @DrawableRes icon: Int? = null,\r\n  ): Snackbar {\r\n    val snackBar = Snackbar.make(ContextThemeWrapper(view.context, theme), view, msg, length)\r\n    icon?.also {\r\n      snackBar.view.findViewById<TextView>(com.google.android.material.R.id.snackbar_text)\r\n        .setCompoundDrawablesRelativeWithIntrinsicBounds(it, 0, 0, 0)\r\n    }\r\n\r\n    return snackBar\r\n  }\nimport android.view.View\nimport android.widget.TextView\nimport androidx.annotation.DrawableRes\nimport androidx.annotation.StyleRes\nimport androidx.appcompat.view.ContextThemeWrapper\nimport com.github.ashutoshgngwr.noice.R\nimport com.google.android.material.snackbar.BaseTransientBottomBar\nimport com.google.android.material.snackbar.Snackbar" ],
  "QuickNovel/185" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/549" : [ "jsonObject.getSafeBoolean(\"bold\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"link\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"italic\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"monospace\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"strikethrough\")", "import org.json.JSONObject\nimport org.json.JSONException\nprivate fun JSONObject.getSafeBoolean(name: String): Boolean {\r\n        return try {\r\n            getBoolean(name)\r\n        } catch (exception: JSONException) {\r\n            false\r\n        }\r\n    }\nImport(names=[org, json, JSONException], wildcard=false, alias=null)\nImport(names=[org, json, JSONObject], wildcard=false, alias=null)" ],
  "Trail-Sense/184" : [ "storeImportFileUri(JsonExportTask.BACKUP_SHOWS, uri)\n--------------------------------------------------\nstoreImportFileUri(JsonExportTask.BACKUP_LISTS, uri)\n--------------------------------------------------\nstoreImportFileUri(JsonExportTask.BACKUP_MOVIES, uri)\n--------------------------------------------------\nBackupSettings.storeImportFileUri(context, type, uri)", "import android.view.View\nimport android.net.Uri\nprivate fun storeImportFileUri(type: Int, uri: Uri?) {\r\n        if (uri == null) return\r\n        DataLiberationTools.tryToPersistUri(requireContext(), uri)\r\n        BackupSettings.storeImportFileUri(context, type, uri)\r\n        updateFileViews()\r\n    }\nImport(names=[android, net, Uri], wildcard=false, alias=null)" ],
  "Trail-Sense/185" : [ "TimeTools.formatToLocalDateAndTime(requireContext(), movieDetails.lastUpdatedMillis)\n--------------------------------------------------\nTimeTools.formatToLocalDateAndTime(application, show.lastUpdatedMs)", "import java.util.Date\nimport org.threeten.bp.LocalDate\nimport com.battlelancer.seriesguide.R\nimport android.text.format.DateUtils\nimport android.content.Context\nfun formatToLocalDateAndTime(context: Context, timeInMillis: Long): String {\r\n        return if (timeInMillis != 0L) {\r\n            DateUtils.formatDateTime(\r\n                context, timeInMillis,\r\n                DateUtils.FORMAT_SHOW_DATE or DateUtils.FORMAT_SHOW_TIME\r\n            )\r\n        } else {\r\n            context.getString(R.string.unknown)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, format, DateUtils], wildcard=false, alias=null)\nImport(names=[java, util, Date], wildcard=false, alias=null)" ],
  "Trail-Sense/186" : [ "@Override\r\npublic void onCreate(Bundle icicle) {\r\n    super.onCreate(icicle);\r\n    setResult(RESULT_CANCELED);\r\n    setLayout(R.layout.account_list);\r\n    ListView listView = getListView();\r\n    listView.setOnItemClickListener(this);\r\n    listView.setItemsCanFocus(false);\r\n}\n--------------------------------------------------\n/**\r\n * Create a new {@link AccountsAdapter} instance and assign it to the {@link ListView}.\r\n *\r\n * @param realAccounts\r\n *         An array of accounts to display.\r\n */\r\npublic void populateListView(List<Account> realAccounts) {\r\n    List<BaseAccount> accounts = new ArrayList<>();\r\n    if (K9.isShowUnifiedInbox()) {\r\n        BaseAccount unifiedInboxAccount = SearchAccount.createUnifiedInboxAccount();\r\n        accounts.add(unifiedInboxAccount);\r\n    }\r\n    accounts.addAll(realAccounts);\r\n    AccountsAdapter adapter = new AccountsAdapter(accounts);\r\n    ListView listView = getListView();\r\n    listView.setAdapter(adapter);\r\n    listView.invalidate();\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport android.widget.ListView;\r\nimport android.widget.ListView\nimport android.view.View\nprotected ListView getListView() {\r\n    if (list == null) {\r\n        list = findViewById(android.R.id.list);\r\n        View emptyView = findViewById(android.R.id.empty);\r\n        if (emptyView != null) {\r\n            list.setEmptyView(emptyView);\r\n        }\r\n    }\r\n    return list;\r\n}" ],
  "QuickNovel/182" : [ "openUrl(PAYPAL_URL)\n--------------------------------------------------\nopenUrl(KOFI_URL)\n--------------------------------------------------\nopenUrl(Constants.TELEGRAM_CHANGE_LOG)\n--------------------------------------------------\nrequireContext().openUrl(url)\n--------------------------------------------------\nR.id.pinterestLink -> openUrl(Constants.PINTEREST)\n--------------------------------------------------\nR.id.faqLink -> openUrl(Constants.FAQ_LINK)\n--------------------------------------------------\nR.id.telegramLink -> openUrl(Constants.APP_TELEGRAM_LINK)\n--------------------------------------------------\nR.id.appGithub -> openUrl(Constants.GITHUB_PROJECT)\n--------------------------------------------------\nR.id.appTranslation -> openUrl(Constants.TRANSLATE)\n--------------------------------------------------\nR.id.appRate -> openUrl(Constants.RATE_ON_GOOGLE_PLAY)\n--------------------------------------------------\nR.id.instagramLink -> openUrl(Constants.APP_INSTAGRAM_LINK)\n--------------------------------------------------\nR.id.twitterLink -> openUrl(Constants.APP_TWITTER_LINK)\n--------------------------------------------------\nR.id.websiteLink -> openUrl(Constants.WEBSITE)\n--------------------------------------------------\nopenUrl(googleSearchLrcUrl)", "import androidx.core.net.toUri\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nimport android.app.Activity\nfun Context.openUrl(url: String) {\n    val i = Intent(Intent.ACTION_VIEW)\n    i.data = url.toUri()\n    i.flags = Intent.FLAG_ACTIVITY_NEW_TASK\n    startActivity(i)\n}\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "Trail-Sense/187" : [ "        preferences.setInt(\n                R.string.p_theme_color, getAndroidColor(preferences.getInt(R.string.p_theme_color, 7)))\r\n        for (calendar in caldavDao.getCalendars()) {\n--------------------------------------------------\n            caldavDao.update(\n                calendar.copy(color = getAndroidColor(calendar.color))\r\n            )\n--------------------------------------------------\n        for (tagData in tagDataDao.getAll()) {\n            tagData.setColor(getAndroidColor(tagData.getColor()!!))\r\n            tagDataDao.update(tagData)\n--------------------------------------------------\n                filter.copy(\n                    color = getAndroidColor(filter.color ?: 0)\r\n                )\n--------------------------------------------------\n{\r\n        return getAndroidColor(context, index)\r\n    }", "import android.content.Context\n @JvmStatic\r\n        fun getAndroidColor(context: Context, index: Int): Int {\r\n            val legacyColor = getLegacyColor(index, 0)\r\n            return if (legacyColor == 0) 0 else context.getColor(legacyColor)\r\n        }\nimport android.content.Context" ],
  "Feeder/76" : [ "                            .replace(R.id.detail, newEmptyTaskEditFragment())\n                            .runOnCommit {\r\n                                if (isSinglePaneLayout) {\n--------------------------------------------------\n                        .replace(R.id.detail, newTaskEditFragment(task), FRAG_TAG_TASK_EDIT)\n                        .runOnCommit {\r\n                            if (isSinglePaneLayout) {\n--------------------------------------------------\n                    .replace(R.id.master, tlf, FRAG_TAG_TASK_LIST)\n                    .runOnCommit { updateSystemBars(newFilter) }\r\n                    .commit()\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(account).createGtaskList(name)!!\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).deleteGtaskList(list.uuid)\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).renameGtaskList(list.uuid, name)!!\n}\n--------------------------------------------------\ngetEmail(authState.accessToken) ?: run {\n    error(\"Failed to fetch profile\")\n    return@launch\n}\n--------------------------------------------------\nrun {\n    clientProvider.forUrl(url, username, password, foreground = true).getSession()\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).makeCollection(name, color)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).deleteCollection(calendar)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).updateCollection(calendar, name, color)\n}\n--------------------------------------------------\nrun {\n    if (isNullOrEmpty(pass)) {\n        clientProvider.forUrl(url, user, null, session, true).getSession()\n    } else {\n        clientProvider.forUrl(url, user, pass, foreground = true).getSession()\n    }\n}\n--------------------------------------------------\nrun()\n--------------------------------------------------\nthrottle.run {\n    notificationManagerCompat.notify(id, notification)\n}", "override suspend fun run(): Result {\r\n        firebase.updateRemoteConfig()\r\n        return Result.success()\r\n    }" ],
  "Trail-Sense/188" : [ "        preferences.setInt(\n                R.string.p_theme_color, getAndroidColor(preferences.getInt(R.string.p_theme_color, 7)))\r\n        for (calendar in caldavDao.getCalendars()) {\n--------------------------------------------------\n            caldavDao.update(\n                calendar.copy(color = getAndroidColor(calendar.color))\r\n            )\n--------------------------------------------------\n        for (tagData in tagDataDao.getAll()) {\n            tagData.setColor(getAndroidColor(tagData.getColor()!!))\r\n            tagDataDao.update(tagData)\n--------------------------------------------------\n                filter.copy(\n                    color = getAndroidColor(filter.color ?: 0)\r\n                )\n--------------------------------------------------\n{\r\n        return getAndroidColor(context, index)\r\n    }", "import android.content.Context\n @JvmStatic\r\n        fun getAndroidColor(context: Context, index: Int): Int {\r\n            val legacyColor = getLegacyColor(index, 0)\r\n            return if (legacyColor == 0) 0 else context.getColor(legacyColor)\r\n        }\nimport android.content.Context" ],
  "Feeder/74" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "BCR/50" : [ "super.onClick(v, position, item)\n--------------------------------------------------\neventsHandler.onClick(v, layoutPosition, it)\n--------------------------------------------------\nonClick(v, position, item)\n--------------------------------------------------\nbrowserContainer.onClick(v, position, dataset[position])\n--------------------------------------------------\nsuper.onClick(v)\n--------------------------------------------------\nclickListener.onClick(view)\n--------------------------------------------------\nclickListener.onClick(downView)\n--------------------------------------------------\nonClick(dataset[layoutPosition])\n--------------------------------------------------\nis SimpleClick -> onClick(position, item)\n--------------------------------------------------\nif (actionMode != null) onClick(position, item) else onLongClick(position, item)\n--------------------------------------------------\nonClick(it)\n--------------------------------------------------\nonClick(position, item)", "import android.content.DialogInterface\noverride fun onClick(dialog: DialogInterface?, index: Int, isChecked: Boolean) {\r\n        if (index < selection.size) {\r\n            selection[index] = isChecked\r\n        } else  throw IllegalArgumentException(\"Argument 'index' is out of bounds.\")\r\n        updateBadge()\r\n    }\nImport(names=[android, content, DialogInterface], wildcard=false, alias=null)" ],
  "Feeder/79" : [ "addAccount(url, username, password!!)\n--------------------------------------------------\nviewModel.addAccount(url, username, password)\n--------------------------------------------------\naddAccount(it)\n--------------------------------------------------\naddAccountViewModel.addAccount(url, username, password)\n--------------------------------------------------\naddAccount()", "suspend fun addAccount(url: String, username: String, password: String) {\r\n        run {\r\n            clientProvider\r\n                    .forUrl(url, username, password, foreground = true)\r\n                    .getSession()\r\n        }\r\n    }" ],
  "MaterialFiles/543" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "MaterialFiles/542" : [ "setDevice(intent.getStringExtra(EXTRA_PATH)!!, intent.getStringExtra(EXTRA_UUID)!!, intent.getBooleanExtra(EXTRA_SCAN, false))", "fun setDevice(path: String, uuid: String, scan: Boolean) {\r\n        this.path = path\r\n        this.uuid = uuid\r\n        this.scan = scan\r\n    }" ],
  "BCR/52" : [ "stream.toByteArray()\n--------------------------------------------------\nbos.toByteArray()\n--------------------------------------------------\ninput.toByteArray()\n--------------------------------------------------\nstacktraceContent.toString().toByteArray(Charsets.UTF_8)\n--------------------------------------------------\npackageInfo.signatures[0].toByteArray()\n--------------------------------------------------\nbaos.toByteArray()\n--------------------------------------------------\nbuffer.toByteArray()\n--------------------------------------------------\npath.toByteArray()", "import org.videolan.vlc.R\nfun InputStream.toByteArray(): ByteArray {\r\n    val buffer = ByteArrayOutputStream()\r\n\r\n    var nRead: Int\r\n    val data = ByteArray(16384)\r\n\r\n    while (this.read(data, 0, data.size).also { nRead = it } != -1) {\r\n        buffer.write(data, 0, nRead)\r\n    }\r\n\r\n    return buffer.toByteArray()\r\n}" ],
  "Feeder/77" : [ "taskDao.insertTask(task)\n--------------------------------------------------\n{\r\n        return tasksRepository.insertTask(task)\r\n    }", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Task\noverride suspend fun insertTask(task: Task): Long {\r\n        return withContext(ioDispatcher) {\r\n            taskDao.insertTask(task)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Task], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "MaterialFiles/545" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "BCR/51" : [ "stream.toByteArray()\n--------------------------------------------------\nbos.toByteArray()\n--------------------------------------------------\ninput.toByteArray()\n--------------------------------------------------\nstacktraceContent.toString().toByteArray(Charsets.UTF_8)\n--------------------------------------------------\npackageInfo.signatures[0].toByteArray()\n--------------------------------------------------\nbaos.toByteArray()\n--------------------------------------------------\nbuffer.toByteArray()\n--------------------------------------------------\npath.toByteArray()", "import org.videolan.vlc.R\nfun InputStream.toByteArray(): ByteArray {\r\n    val buffer = ByteArrayOutputStream()\r\n\r\n    var nRead: Int\r\n    val data = ByteArray(16384)\r\n\r\n    while (this.read(data, 0, data.size).also { nRead = it } != -1) {\r\n        buffer.write(data, 0, nRead)\r\n    }\r\n\r\n    return buffer.toByteArray()\r\n}" ],
  "BCR/46" : [ "DI.start(this, listOf(provideAppModule()) + coreModules + uiModules + commonAppModules)\n--------------------------------------------------\n            val intent = Intent(requireContext(), ChooseAccount::class.java)\n            startActivityForResult(intent, REQUEST_CHOOSE_ACCOUNT)\r\n            false\n--------------------------------------------------\n            )\n            startActivityForResult(intent, REQUEST_CHOOSE_FOLDER)\r\n            false\n--------------------------------------------------\nmatcher.start()\n--------------------------------------------------\nDI.start(this, coreModules + storageModule + testModule)", "import timber.log.Timber\nfun start() {\r\n        Timber.v(\"PushServiceManager.start()\")\r\n        if (isServiceStarted.compareAndSet(false, true)) {\r\n            startService()\r\n        } else {\r\n            Timber.v(\"..PushService already running\")\r\n        }\r\n    }\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "BCR/48" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/189" : [ "", "import android.content.Context\nfun getScreenHeight(context: Context): Int {\n        val displayMetrics = context.resources.displayMetrics\n        return displayMetrics.heightPixels\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "QuickNovel/196" : [ "updateExcludedCalendars(event.calendar.id.toInt(), event.calendar.included)", "import kotlinx.coroutines.launch\nimport com.mhss.app.mybrain.util.settings.removeAndToStringSet\nimport com.mhss.app.mybrain.util.settings.addAndToStringSet\nimport com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.domain.model.Calendar\nimport com.mhss.app.mybrain.R\nimport androidx.lifecycle.viewModelScope\nimport androidx.datastore.preferences.core.stringSetPreferencesKey\nprivate fun updateExcludedCalendars(id: Int, add: Boolean) {\r\n        viewModelScope.launch {\r\n            saveSettings(\r\n                stringSetPreferencesKey(Constants.EXCLUDED_CALENDARS_KEY),\r\n                if (add) uiState.excludedCalendars.addAndToStringSet(id)\r\n                else uiState.excludedCalendars.removeAndToStringSet(id)\r\n            )\r\n        }\r\n    }\nImport(names=[androidx, datastore, preferences, core, stringSetPreferencesKey], wildcard=false, alias=null)\nImport(names=[androidx, lifecycle, viewModelScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)" ],
  "QuickNovel/193" : [ "model.updateUserStatus()\n--------------------------------------------------\nupdateUserStatus()", "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport com.battlelancer.seriesguide.util.Utils\nimport androidx.lifecycle.viewModelScope\nimport android.app.Application\nfun updateUserStatus() {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val currentState = hasAccessToX.value\r\n            val newState = Utils.hasAccessToX(getApplication())\r\n            if (currentState != newState) {\r\n                hasAccessToX.postValue(newState)\r\n            }\r\n        }\r\n    }\nImport(names=[androidx, lifecycle, viewModelScope], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, util, Utils], wildcard=false, alias=null)" ],
  "BCR/42" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/84" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Feeder/85" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "MaterialFiles/554" : [ "Files.createDirectory(file.toPath())\n--------------------------------------------------\ncreateDirectory(file)", "import java.nio.file.Files\nimport java.io.File\nimport android.os.Build\nprivate fun createDirectory(file: File) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            Files.createDirectory(file.toPath())\r\n        } else file.mkdir()\r\n    }\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)\nImport(names=[java, nio, file, Files], wildcard=false, alias=null)" ],
  "BCR/41" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/88" : [ "jsonObject.getSafeBoolean(\"bold\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"link\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"italic\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"monospace\")\n--------------------------------------------------\njsonObject.getSafeBoolean(\"strikethrough\")", "import org.json.JSONObject\nimport org.json.JSONException\nprivate fun JSONObject.getSafeBoolean(name: String): Boolean {\r\n        return try {\r\n            getBoolean(name)\r\n        } catch (exception: JSONException) {\r\n            false\r\n        }\r\n    }\nImport(names=[org, json, JSONException], wildcard=false, alias=null)\nImport(names=[org, json, JSONObject], wildcard=false, alias=null)" ],
  "MaterialFiles/555" : [ "                setPushNotificationState(WAIT_BACKGROUND_SYNC)\n                startServices()\r\n            }\n--------------------------------------------------\n                setPushNotificationState(WAIT_NETWORK)\n                startServices()\r\n            }\n--------------------------------------------------\n                setPushNotificationState(LISTENING)\n                startServices()\r\n            }\n--------------------------------------------------\nstartService()\n--------------------------------------------------\ncontext.startService(intent)", "import timber.log.Timber\nimport android.os.Build\nimport android.content.Intent\nprivate fun startService() {\r\n        try {\r\n            val intent = Intent(context, PushService::class.java)\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                context.startForegroundService(intent)\r\n            } else {\r\n                context.startService(intent)\r\n            }\r\n        } catch (e: Exception) {\r\n            Timber.e(e, \"Exception while trying to start PushService\")\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Feeder/89" : [ "\n        val iv = EncryptDecryptManager.generateRandomBytes(16).toHexString()\r\n        val encrypted = encryptDecryptManager.encrypt(secretText, key, iv)", "import java.security.SecureRandom\nfun generateRandomBytes(number: Int): ByteArray {\r\n            val random = SecureRandom()\r\n            val bytes = ByteArray(number)\r\n            random.nextBytes(bytes)\r\n            return bytes\r\n        }\nImport(names=[java, security, SecureRandom], wildcard=false, alias=null)" ],
  "BCR/40" : [ "super.onStop()\n--------------------------------------------------\nsuperDelegate.onStop()", "import androidx.appcompat.view.ActionMode\noverride fun onStop() {\r\n        super.onStop()\r\n        stopActionMode()\r\n    }" ],
  "BCR/39" : [ "                                intent.data = uri\n                                startActivity(intent)\n                            }.setActionTextColor(accentColor()).show()\n--------------------------------------------------\n        if (!hasPermissions()) {\n            startActivity(Intent(this, PermissionActivity::class.java))\n            finish()\n--------------------------------------------------\n                }\n                start()\n            }\n--------------------------------------------------\nprogressViewUpdateHelper.start()\n--------------------------------------------------\nanimate().translationY(0f).alpha(1f).setDuration(1500).start()\n--------------------------------------------------\nstart()\n--------------------------------------------------\ntimerUpdater.start()\n--------------------------------------------------\nupdateHelper.start()\n--------------------------------------------------\nanimator.start()\n--------------------------------------------------\nprogressViewUpdateHelper?.start()\n--------------------------------------------------\nvalueAnimator?.setDuration(ViewUtil.RETRO_MUSIC_ANIM_TIME.toLong())?.start()\n--------------------------------------------------\ndrawable.start()\n--------------------------------------------------\nObjectAnimator.ofFloat(viewPager, View.ALPHA, if (visible) 0F else 1F).start()\n--------------------------------------------------\nObjectAnimator.ofFloat(viewPager, View.ALPHA, 1F).start()\n--------------------------------------------------\nanimatorSet.start()\n--------------------------------------------------\nstopWatch.start()\n--------------------------------------------------\nrollAnimator.start()", "import android.media.MediaPlayer\noverride fun start(): Boolean {\n        super.start()\n        return try {\n            mCurrentMediaPlayer.start()\n            true\n        } catch (e: IllegalStateException) {\n            false\n        }\n    }\nimport android.media.MediaPlayer" ],
  "BCR/35" : [ "NotificationSettings.getLatestToIncludeTreshold(context)\n--------------------------------------------------\nNotificationSettings.getLatestToIncludeTreshold(requireContext())\n--------------------------------------------------\nval minutes = getLatestToIncludeTreshold(context)", "import com.battlelancer.seriesguide.R\nimport androidx.preference.PreferenceManager\nimport android.content.Context\nfun getLatestToIncludeTreshold(context: Context): Int {\r\n        var threshold = THRESHOLD_DEFAULT_MIN\r\n        try {\r\n            val value = PreferenceManager.getDefaultSharedPreferences(context)\r\n                .getString(KEY_THRESHOLD, null)\r\n            if (value != null) {\r\n                threshold = value.toInt()\r\n            }\r\n        } catch (ignored: NumberFormatException) {\r\n        }\r\n        return threshold\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Iconify/630" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/568" : [ "= safeGetSystemService(Context.ACTIVITY_SERVICE)\n--------------------------------------------------\n= safeGetSystemService(Context.CONNECTIVITY_SERVICE)\n--------------------------------------------------\n= safeGetSystemService(Context.STORAGE_SERVICE)\n--------------------------------------------------\n= safeGetSystemService(Context.LOCATION_SERVICE)", "import java.lang.RuntimeException\nimport android.content.Context\nprivate inline fun <reified T> Context.safeGetSystemService(name: String): T? {\r\n    return try {\r\n        getSystemService(name) as? T\r\n    } catch (exc: RuntimeException) {\r\n        null\r\n    }\r\n}\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[java, lang, RuntimeException], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/292" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/295" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/57" : [ "super.onWindowFocusChanged(hasWindowFocus)", "override fun onWindowFocusChanged(hasWindowFocus: Boolean) {\r\n        if (!isActionModeOn) {\r\n            super.onWindowFocusChanged(hasWindowFocus)\r\n        }\r\n    }" ],
  "Trail-Sense/58" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/291" : [ "@Override\r\npublic void run() {\r\n    Server server = ServersList.getInstance().getServer(o.cid());\r\n    AlertDialog.Builder builder = new AlertDialog.Builder(BaseActivity.this);\r\n    View view = getDialogTextPrompt();\r\n    TextView prompt = view.findViewById(R.id.prompt);\r\n    final EditText keyinput = view.findViewById(R.id.textInput);\r\n    keyinput.setText(\"\");\r\n    keyinput.setOnEditorActionListener(new OnEditorActionListener() {\r\n\r\n        public boolean onEditorAction(TextView textView, int actionId, KeyEvent event) {\r\n            if (actionId == EditorInfo.IME_NULL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                try {\r\n                    if (keyinput.getText() != null)\r\n                        conn.join(o.cid(), o.getString(\"chan\"), keyinput.getText().toString(), null);\r\n                } catch (Exception e) {\r\n                    // TODO Auto-generated catch block\r\n                    NetworkConnection.printStackTraceToCrashlytics(e);\r\n                }\r\n                ((AlertDialog) keyinput.getTag()).dismiss();\r\n            }\r\n            return true;\r\n        }\r\n    });\r\n    try {\r\n        prompt.setText(\"Password for \" + o.getString(\"chan\"));\r\n    } catch (Exception e) {\r\n        // TODO Auto-generated catch block\r\n        NetworkConnection.printStackTraceToCrashlytics(e);\r\n    }\r\n    builder.setTitle(server.getName() + \" (\" + server.getHostname() + \":\" + (server.getPort()) + \")\");\r\n    builder.setView(view);\r\n    builder.setPositiveButton(\"Join\", new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            try {\r\n                conn.join(o.cid(), o.getString(\"chan\"), keyinput.getText().toString(), null);\r\n            } catch (Exception e) {\r\n                // TODO Auto-generated catch block\r\n                NetworkConnection.printStackTraceToCrashlytics(e);\r\n            }\r\n            dialog.dismiss();\r\n        }\r\n    });\r\n    builder.setNegativeButton(\"Cancel\", new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            dialog.dismiss();\r\n        }\r\n    });\r\n    AlertDialog dialog = builder.create();\r\n    keyinput.setTag(dialog);\r\n    dialog.setOwnerActivity(BaseActivity.this);\r\n    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\r\n    if (!isFinishing())\r\n        dialog.show();\r\n}\n--------------------------------------------------\npublic boolean onEditorAction(TextView textView, int actionId, KeyEvent event) {\r\n    if (actionId == EditorInfo.IME_NULL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n        try {\r\n            if (keyinput.getText() != null)\r\n                conn.join(o.cid(), o.getString(\"chan\"), keyinput.getText().toString(), null);\r\n        } catch (Exception e) {\r\n            // TODO Auto-generated catch block\r\n            NetworkConnection.printStackTraceToCrashlytics(e);\r\n        }\r\n        ((AlertDialog) keyinput.getTag()).dismiss();\r\n    }\r\n    return true;\r\n}\n--------------------------------------------------\n", "public int cid() {\r\n    if (cid == -1)\r\n        cid = getInt(\"cid\");\r\n    return cid;\r\n}" ],
  "VinylMusicPlayer/290" : [ "@Override\r\npublic void run() {\r\n    Server server = ServersList.getInstance().getServer(o.cid());\r\n    AlertDialog.Builder builder = new AlertDialog.Builder(BaseActivity.this);\r\n    View view = getDialogTextPrompt();\r\n    TextView prompt = view.findViewById(R.id.prompt);\r\n    final EditText keyinput = view.findViewById(R.id.textInput);\r\n    keyinput.setText(\"\");\r\n    keyinput.setOnEditorActionListener(new OnEditorActionListener() {\r\n\r\n        public boolean onEditorAction(TextView textView, int actionId, KeyEvent event) {\r\n            if (actionId == EditorInfo.IME_NULL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                try {\r\n                    if (keyinput.getText() != null)\r\n                        conn.join(o.cid(), o.getString(\"chan\"), keyinput.getText().toString(), null);\r\n                } catch (Exception e) {\r\n                    // TODO Auto-generated catch block\r\n                    NetworkConnection.printStackTraceToCrashlytics(e);\r\n                }\r\n                ((AlertDialog) keyinput.getTag()).dismiss();\r\n            }\r\n            return true;\r\n        }\r\n    });\r\n    try {\r\n        prompt.setText(\"Password for \" + o.getString(\"chan\"));\r\n    } catch (Exception e) {\r\n        // TODO Auto-generated catch block\r\n        NetworkConnection.printStackTraceToCrashlytics(e);\r\n    }\r\n    builder.setTitle(server.getName() + \" (\" + server.getHostname() + \":\" + (server.getPort()) + \")\");\r\n    builder.setView(view);\r\n    builder.setPositiveButton(\"Join\", new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            try {\r\n                conn.join(o.cid(), o.getString(\"chan\"), keyinput.getText().toString(), null);\r\n            } catch (Exception e) {\r\n                // TODO Auto-generated catch block\r\n                NetworkConnection.printStackTraceToCrashlytics(e);\r\n            }\r\n            dialog.dismiss();\r\n        }\r\n    });\r\n    builder.setNegativeButton(\"Cancel\", new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            dialog.dismiss();\r\n        }\r\n    });\r\n    AlertDialog dialog = builder.create();\r\n    keyinput.setTag(dialog);\r\n    dialog.setOwnerActivity(BaseActivity.this);\r\n    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\r\n    if (!isFinishing())\r\n        dialog.show();\r\n}\n--------------------------------------------------\npublic boolean onEditorAction(TextView textView, int actionId, KeyEvent event) {\r\n    if (actionId == EditorInfo.IME_NULL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n        try {\r\n            if (keyinput.getText() != null)\r\n                conn.join(o.cid(), o.getString(\"chan\"), keyinput.getText().toString(), null);\r\n        } catch (Exception e) {\r\n            // TODO Auto-generated catch block\r\n            NetworkConnection.printStackTraceToCrashlytics(e);\r\n        }\r\n        ((AlertDialog) keyinput.getTag()).dismiss();\r\n    }\r\n    return true;\r\n}\n--------------------------------------------------\n", "public int cid() {\r\n    if (cid == -1)\r\n        cid = getInt(\"cid\");\r\n    return cid;\r\n}" ],
  "Trail-Sense/56" : [ "extendAddOns(it)", "import com.kickstarter.models.Reward\nimport com.kickstarter.R\nprivate fun extendAddOns(flattenedList: List<Reward>): List<Reward> {\r\n            val mutableList = mutableListOf<Reward>()\r\n\r\n            flattenedList.map {\r\n                if (!it.isAddOn()) mutableList.add(it)\r\n                else {\r\n                    val q = it.quantity() ?: 1\r\n                    for (i in 1..q) {\r\n                        mutableList.add(it)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return mutableList.toList()\r\n        }" ],
  "Trail-Sense/120" : [ "service.start()\n--------------------------------------------------\nlogcat!!.start(this)\n--------------------------------------------------\nsaveThread!!.start()\n--------------------------------------------------\nmIDebugLogService!!.start()\n--------------------------------------------------\ncurrentPlayingVisu?.start()\n--------------------------------------------------\nminiVisualizer.start()\n--------------------------------------------------\ndrawable.start()\n--------------------------------------------------\ndrawableSmall.start()\n--------------------------------------------------\ndrawableHeaderLarge.start()\n--------------------------------------------------\nanimatorSet.start()\n--------------------------------------------------\nseek.start()\n--------------------------------------------------\nthirdItemBinding.playing.start()\n--------------------------------------------------\nholder.binding.playing.start()\n--------------------------------------------------\nclient.start()\n--------------------------------------------------\nanim.start()\n--------------------------------------------------\nresizeAnimation.start()\n--------------------------------------------------\nslideHorizontalAnimator.start()\n--------------------------------------------------\nVideoPlayerActivity.start(fragment.requireContext(), mw.uri)\n--------------------------------------------------\ncolorAnimation.start()\n--------------------------------------------------\ncolorAnimation2.start()\n--------------------------------------------------\nProcessBuilder().command(\"logcat\", \"-c\").redirectErrorStream(true).start()\n--------------------------------------------------\nPlaybackService.start(this)\n--------------------------------------------------\nstart(context, uri, null, false, -1)\n--------------------------------------------------\nstart(context, uri, null, fromStart, -1)\n--------------------------------------------------\nstart(context, uri, title, false, -1)\n--------------------------------------------------\nstart(context, uri, null, false, openedPosition)\n--------------------------------------------------\nplayer.statsDelegate.start()\n--------------------------------------------------\nstart()\n--------------------------------------------------\nslideAnimator.start()\n--------------------------------------------------\ntapRight.start()\n--------------------------------------------------\ntapLeft.start()\n--------------------------------------------------\nseekAnimatorSet.start()\n--------------------------------------------------\nanimator.start()\n--------------------------------------------------\ncurrentAnimator?.start()\n--------------------------------------------------\nstopSet.start()\n--------------------------------------------------\nanimation.start()\n--------------------------------------------------\nkeyAnimation.start()\n--------------------------------------------------\nPlaybackService.start(context)\n--------------------------------------------------\nmedialibrary.start()\n--------------------------------------------------\nhandlerThread.start()\n--------------------------------------------------\nif (it.connected) start() else stop()\n--------------------------------------------------\nrd.start()", "import java.util\nimport org.videolan.vlc.util\nimport org.videolan.resources.util.launchForeground\nfun start(context: Context) {\r\n            if (instance != null) return\r\n            val serviceIntent = Intent(context, PlaybackService::class.java)\r\n            context.launchForeground(serviceIntent)\r\n        }" ],
  "Trail-Sense/53" : [ "return buildResultFailure(R.string.trakt_error_not_exists)\n--------------------------------------------------\nreturn buildResultFailure(R.string.unknown)\n--------------------------------------------------\nreturn buildResultFailure(R.string.trakt_error_credentials)\n--------------------------------------------------\nbuildResultFailure()\n--------------------------------------------------\nbuildResultFailure(R.string.offline)\n--------------------------------------------------\nbuildResultFailure(false)\n--------------------------------------------------\nbuildResultFailure(true)", "import com.battlelancer.seriesguide.R\nimport androidx.annotation.StringRes\nprivate fun buildResultFailure(@StringRes emptyTextResId: Int): Result {\r\n        return Result(\r\n            emptyText = context.getString(emptyTextResId)\r\n        )\r\n    }\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)" ],
  "Iconify/638" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/122" : [ "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n", "public synchronized static ImageList getInstance() {\r\n    if (instance == null)\r\n        instance = new ImageList();\r\n    return instance;\r\n}" ],
  "MaterialFiles/563" : [ "private void initializeControls() {\r\n    mViewHolder = new AccountEditViewHolder(this);\r\n    // Initial balance.\r\n    ArrayAdapter<String> adapterSymbol = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, new String[] { \"+\", \"-\" });\r\n    mViewHolder.spinSymbolInitialBalance.setAdapter(adapterSymbol);\r\n    mViewHolder.txtInitialBalance.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Calculator.forActivity(AccountEditActivity.this).currency(mAccount.getCurrencyId()).amount(mAccount.getInitialBalance()).show(RequestCodes.AMOUNT);\r\n        }\r\n    });\r\n    // Account Type adapters and values\r\n    String[] mAccountTypeItems = getResources().getStringArray(R.array.accounttype_items);\r\n    mAccountTypeValues = AccountTypes.getNames();\r\n    ArrayAdapter<String> adapterAccountType = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, mAccountTypeItems);\r\n    adapterAccountType.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    mViewHolder.accountTypeSpinner.setAdapter(adapterAccountType);\r\n    if (!(TextUtils.isEmpty(mAccount.getTypeName()))) {\r\n        if (Arrays.asList(mAccountTypeValues).contains(mAccount.getTypeName())) {\r\n            int position = Arrays.asList(mAccountTypeValues).indexOf(mAccount.getTypeName());\r\n            mViewHolder.accountTypeSpinner.setSelection(position, true);\r\n        }\r\n    } else {\r\n        AccountTypes accountType = getSelectedAccountType();\r\n        mAccount.setType(accountType);\r\n    }\r\n    // Account Status adapters and values\r\n    String[] mAccountStatusItems = getResources().getStringArray(R.array.accountstatus_items);\r\n    mAccountStatusValues = getResources().getStringArray(R.array.accountstatus_values);\r\n    ArrayAdapter<String> adapterAccountStatus = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, mAccountStatusItems);\r\n    mViewHolder.spinAccountStatus.setAdapter(adapterAccountStatus);\r\n    adapterAccountStatus.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    if (!(TextUtils.isEmpty(mAccount.getStatus()))) {\r\n        if (Arrays.asList(mAccountStatusValues).contains(mAccount.getStatus())) {\r\n            mViewHolder.spinAccountStatus.setSelection(Arrays.asList(mAccountStatusValues).indexOf(mAccount.getStatus()), true);\r\n        }\r\n    } else {\r\n        String selectedStatus = (String) mViewHolder.spinAccountStatus.getSelectedItem();\r\n        AccountStatuses status = AccountStatuses.get(selectedStatus);\r\n        mAccount.setStatus(status);\r\n    }\r\n    Date date = mAccount.getInitialDate();\r\n    if (date == null) {\r\n        date = new MmxDate().toDate();\r\n        mAccount.setInitialDate(date);\r\n    }\r\n    showDate(date);\r\n    // Set up control listeners\r\n    initializeDefaultAccountControls();\r\n    mViewHolder.accountTypeSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            if ((position >= 0) && (position <= mAccountTypeValues.length)) {\r\n                //ArrayAdapter<String> adapter = (ArrayAdapter<String>) parent.getAdapter();\r\n                String accountTypeValue = mAccountTypeValues[position];\r\n                AccountTypes accountType = AccountTypes.get(accountTypeValue);\r\n                mAccount.setType(accountType);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    mViewHolder.spinAccountStatus.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            if ((position >= 0) && (position <= mAccountStatusValues.length)) {\r\n                String selectedStatus = mAccountStatusValues[position];\r\n                AccountStatuses status = AccountStatuses.get(selectedStatus);\r\n                mAccount.setStatus(status);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    // Favourite\r\n    initializeFavouriteAccountControls();\r\n    mViewHolder.txtSelectCurrency.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Intent intent = new Intent(AccountEditActivity.this, CurrencyListActivity.class);\r\n            intent.setAction(Intent.ACTION_PICK);\r\n            startActivityForResult(intent, RequestCodes.CURRENCY);\r\n        }\r\n    });\r\n    //Date picker\r\n    mViewHolder.txtInitialDate.setOnClickListener(new View.OnClickListener() {\r\n\r\n        final DatePickerDialog.OnDateSetListener listener = (view, year, month, dayOfMonth) -> {\r\n            Date dateTime = dateTimeUtils.from(year, month, dayOfMonth);\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        };\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            MmxDate dateTime = new MmxDate(mAccount.getInitialDate());\r\n            DatePickerDialog datePicker = new DatePickerDialog(AccountEditActivity.this, listener, dateTime.getYear(), dateTime.getMonthOfYear(), dateTime.getDayOfMonth());\r\n            // Customize the DatePickerDialog if needed\r\n            datePicker.show();\r\n        }\r\n    });\r\n    mViewHolder.previousDayButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            Date dateTime = new MmxDate(mAccount.getInitialDate()).minusDays(1).toDate();\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        }\r\n    });\r\n    mViewHolder.nextDayButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            Date dateTime = new MmxDate(mAccount.getInitialDate()).plusDays(1).toDate();\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        }\r\n    });\r\n    // Notes\r\n    UIHelper ui = new UIHelper(this);\r\n    mViewHolder.edtNotes.setCompoundDrawablesWithIntrinsicBounds(ui.getIcon(GoogleMaterial.Icon.gmd_content_paste), null, null, null);\r\n    // Display data.\r\n    displayAccountValues();\r\n    // Refresh data on the other controls\r\n    refreshCurrencyName();\r\n}\n--------------------------------------------------\nprivate void initializeControls() {\r\n    mViewHolder = new AccountEditViewHolder(this);\r\n    // Initial balance.\r\n    ArrayAdapter<String> adapterSymbol = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, new String[] { \"+\", \"-\" });\r\n    mViewHolder.spinSymbolInitialBalance.setAdapter(adapterSymbol);\r\n    mViewHolder.txtInitialBalance.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Calculator.forActivity(AccountEditActivity.this).currency(mAccount.getCurrencyId()).amount(mAccount.getInitialBalance()).show(RequestCodes.AMOUNT);\r\n        }\r\n    });\r\n    // Account Type adapters and values\r\n    String[] mAccountTypeItems = getResources().getStringArray(R.array.accounttype_items);\r\n    mAccountTypeValues = AccountTypes.getNames();\r\n    ArrayAdapter<String> adapterAccountType = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, mAccountTypeItems);\r\n    adapterAccountType.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    mViewHolder.accountTypeSpinner.setAdapter(adapterAccountType);\r\n    if (!(TextUtils.isEmpty(mAccount.getTypeName()))) {\r\n        if (Arrays.asList(mAccountTypeValues).contains(mAccount.getTypeName())) {\r\n            int position = Arrays.asList(mAccountTypeValues).indexOf(mAccount.getTypeName());\r\n            mViewHolder.accountTypeSpinner.setSelection(position, true);\r\n        }\r\n    } else {\r\n        AccountTypes accountType = getSelectedAccountType();\r\n        mAccount.setType(accountType);\r\n    }\r\n    // Account Status adapters and values\r\n    String[] mAccountStatusItems = getResources().getStringArray(R.array.accountstatus_items);\r\n    mAccountStatusValues = getResources().getStringArray(R.array.accountstatus_values);\r\n    ArrayAdapter<String> adapterAccountStatus = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, mAccountStatusItems);\r\n    mViewHolder.spinAccountStatus.setAdapter(adapterAccountStatus);\r\n    adapterAccountStatus.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    if (!(TextUtils.isEmpty(mAccount.getStatus()))) {\r\n        if (Arrays.asList(mAccountStatusValues).contains(mAccount.getStatus())) {\r\n            mViewHolder.spinAccountStatus.setSelection(Arrays.asList(mAccountStatusValues).indexOf(mAccount.getStatus()), true);\r\n        }\r\n    } else {\r\n        String selectedStatus = (String) mViewHolder.spinAccountStatus.getSelectedItem();\r\n        AccountStatuses status = AccountStatuses.get(selectedStatus);\r\n        mAccount.setStatus(status);\r\n    }\r\n    Date date = mAccount.getInitialDate();\r\n    if (date == null) {\r\n        date = new MmxDate().toDate();\r\n        mAccount.setInitialDate(date);\r\n    }\r\n    showDate(date);\r\n    // Set up control listeners\r\n    initializeDefaultAccountControls();\r\n    mViewHolder.accountTypeSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            if ((position >= 0) && (position <= mAccountTypeValues.length)) {\r\n                //ArrayAdapter<String> adapter = (ArrayAdapter<String>) parent.getAdapter();\r\n                String accountTypeValue = mAccountTypeValues[position];\r\n                AccountTypes accountType = AccountTypes.get(accountTypeValue);\r\n                mAccount.setType(accountType);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    mViewHolder.spinAccountStatus.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            if ((position >= 0) && (position <= mAccountStatusValues.length)) {\r\n                String selectedStatus = mAccountStatusValues[position];\r\n                AccountStatuses status = AccountStatuses.get(selectedStatus);\r\n                mAccount.setStatus(status);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    // Favourite\r\n    initializeFavouriteAccountControls();\r\n    mViewHolder.txtSelectCurrency.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Intent intent = new Intent(AccountEditActivity.this, CurrencyListActivity.class);\r\n            intent.setAction(Intent.ACTION_PICK);\r\n            startActivityForResult(intent, RequestCodes.CURRENCY);\r\n        }\r\n    });\r\n    //Date picker\r\n    mViewHolder.txtInitialDate.setOnClickListener(new View.OnClickListener() {\r\n\r\n        final DatePickerDialog.OnDateSetListener listener = (view, year, month, dayOfMonth) -> {\r\n            Date dateTime = dateTimeUtils.from(year, month, dayOfMonth);\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        };\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            MmxDate dateTime = new MmxDate(mAccount.getInitialDate());\r\n            DatePickerDialog datePicker = new DatePickerDialog(AccountEditActivity.this, listener, dateTime.getYear(), dateTime.getMonthOfYear(), dateTime.getDayOfMonth());\r\n            // Customize the DatePickerDialog if needed\r\n            datePicker.show();\r\n        }\r\n    });\r\n    mViewHolder.previousDayButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            Date dateTime = new MmxDate(mAccount.getInitialDate()).minusDays(1).toDate();\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        }\r\n    });\r\n    mViewHolder.nextDayButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            Date dateTime = new MmxDate(mAccount.getInitialDate()).plusDays(1).toDate();\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        }\r\n    });\r\n    // Notes\r\n    UIHelper ui = new UIHelper(this);\r\n    mViewHolder.edtNotes.setCompoundDrawablesWithIntrinsicBounds(ui.getIcon(GoogleMaterial.Icon.gmd_content_paste), null, null, null);\r\n    // Display data.\r\n    displayAccountValues();\r\n    // Refresh data on the other controls\r\n    refreshCurrencyName();\r\n}\n--------------------------------------------------\n", "public static boolean contains(String name) {\r\n    for (CloudStorageProviderEnum provider : CloudStorageProviderEnum.values()) {\r\n        if (provider.name().equalsIgnoreCase(name))\r\n            return true;\r\n    }\r\n    return false;\r\n}" ],
  "Iconify/635" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/125" : [ "openUrl(R.string.documentation, R.string.url_backups)\n--------------------------------------------------\n        } else {\n            openUrl(R.string.rate_tasks, R.string.market_url)\r\n        }\n--------------------------------------------------\n\n        openUrl(R.string.documentation, R.string.url_documentation)\r\n        openUrl(R.string.issue_tracker, R.string.url_issue_tracker)\n--------------------------------------------------\n        openUrl(R.string.documentation, R.string.url_documentation)\n        openUrl(R.string.issue_tracker, R.string.url_issue_tracker)\r\n        openUrl(R.string.follow_reddit, R.string.url_reddit)\n--------------------------------------------------\n        openUrl(R.string.issue_tracker, R.string.url_issue_tracker)\n        openUrl(R.string.follow_reddit, R.string.url_reddit)\r\n        openUrl(R.string.follow_twitter, R.string.url_twitter)\n--------------------------------------------------\n        openUrl(R.string.follow_reddit, R.string.url_reddit)\n        openUrl(R.string.follow_twitter, R.string.url_twitter)\r\n        openUrl(R.string.source_code, R.string.url_source_code)\n--------------------------------------------------\n        openUrl(R.string.follow_twitter, R.string.url_twitter)\n        openUrl(R.string.source_code, R.string.url_source_code)\r\n        openUrl(R.string.privacy_policy, R.string.url_privacy_policy)\n--------------------------------------------------\n        openUrl(R.string.source_code, R.string.url_source_code)\n        openUrl(R.string.privacy_policy, R.string.url_privacy_policy)\r\n    }\n--------------------------------------------------\nopenUrl(R.string.translations, R.string.url_translations)\n--------------------------------------------------\nopenUrl(R.string.app_passwords_more_info, R.string.url_app_passwords)", "import org.tasks.extensions.Context.openUri\nimport androidx.preference.Preference\nprotected fun openUrl(prefId: Int, url: Int) =\r\n        findPreference(prefId).setOnPreferenceClickListener {\r\n            context?.openUri(url)\r\n            false\r\n        }" ],
  "VinylMusicPlayer/296" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/127" : [ "simpleSongAdapter.swapDataSet(album.songs)\n--------------------------------------------------\nadapter?.swapDataSet(it)\n--------------------------------------------------\nadapter?.swapDataSet(listOf())\n--------------------------------------------------\nsongAdapter.swapDataSet(songs)\n--------------------------------------------------\nsongAdapter.swapDataSet(emptyList())\n--------------------------------------------------\nadapter?.swapDataSet(MusicPlayerRemote.playingQueue, MusicPlayerRemote.position)\n--------------------------------------------------\nplayingQueueAdapter?.swapDataSet(MusicPlayerRemote.playingQueue, MusicPlayerRemote.position)\n--------------------------------------------------\nplaylistSongAdapter.swapDataSet(songs)\n--------------------------------------------------\nsearchAdapter.swapDataSet(listOf())\n--------------------------------------------------\nsearchAdapter.swapDataSet(data)\n--------------------------------------------------\nsearchAdapter.swapDataSet(ArrayList())", "import code.name.monkey.retromusic.model.Album\nfun swapDataSet(dataSet: List<Album>) {\n        this.dataSet = dataSet\n        notifyDataSetChanged()\n    }" ],
  "MaterialFiles/567" : [ "removeAccount()\n--------------------------------------------------\nsuper.removeAccount()", "import timber.log.Timber\noverride suspend fun removeAccount() {\r\n        try {\r\n            caldavAccount?.let { clientProvider.forAccount(it).logout() }\r\n        } catch (e: Exception) {\r\n            Timber.e(e)\r\n        }\r\n        super.removeAccount()\r\n    }\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Iconify/631" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/639" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/641" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/640" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/283" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/131" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/649" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/64" : [ "\n            wallets[title] = getAccountDetails(account)\r\n        }", "import io.horizontalsystems.bankwallet.entities.Account\nprivate fun getAccountDetails(account: Account): LinkedHashMap<String, Any> {\r\n        val accountDetails = LinkedHashMap<String, Any>()\r\n\r\n        accountDetails[\"Origin\"] = getAccountOrigin(account)\r\n        accountDetails[\"Type\"] = account.type.description\r\n\r\n        return accountDetails\r\n    }\nimport io.horizontalsystems.bankwallet.entities.Account" ],
  "Trail-Sense/132" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/572" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/289" : [ "private static void attachTasks(Context context, long id, int sequence) {\r\n    try {\r\n        DB db = DB.getInstance(context);\r\n        EntityAttachment attachment = new EntityAttachment();\r\n        attachment.message = id;\r\n        attachment.sequence = sequence;\r\n        attachment.name = \"tasks.txt\";\r\n        attachment.type = \"text/plain\";\r\n        attachment.disposition = Part.ATTACHMENT;\r\n        attachment.size = null;\r\n        attachment.progress = 0;\r\n        attachment.id = db.attachment().insertAttachment(attachment);\r\n        long size = 0;\r\n        File file = attachment.getFile(context);\r\n        try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) {\r\n            for (SimpleTask task : SimpleTask.getList()) size += write(os, String.format(\"%s\\r\\n\", task.toString()));\r\n            size += write(os, \"\\r\\n\");\r\n            for (TwoStateOwner owner : TwoStateOwner.getList()) size += write(os, String.format(\"%s\\r\\n\", owner.toString()));\r\n        }\r\n        db.attachment().setDownloaded(attachment.id, size);\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n    }\r\n}\n--------------------------------------------------\nprivate static void attachTasks(Context context, long id, int sequence) {\r\n    try {\r\n        DB db = DB.getInstance(context);\r\n        EntityAttachment attachment = new EntityAttachment();\r\n        attachment.message = id;\r\n        attachment.sequence = sequence;\r\n        attachment.name = \"tasks.txt\";\r\n        attachment.type = \"text/plain\";\r\n        attachment.disposition = Part.ATTACHMENT;\r\n        attachment.size = null;\r\n        attachment.progress = 0;\r\n        attachment.id = db.attachment().insertAttachment(attachment);\r\n        long size = 0;\r\n        File file = attachment.getFile(context);\r\n        try (OutputStream os = new BufferedOutputStream(new FileOutputStream(file))) {\r\n            for (SimpleTask task : SimpleTask.getList()) size += write(os, String.format(\"%s\\r\\n\", task.toString()));\r\n            size += write(os, \"\\r\\n\");\r\n            for (TwoStateOwner owner : TwoStateOwner.getList()) size += write(os, String.format(\"%s\\r\\n\", owner.toString()));\r\n        }\r\n        db.attachment().setDownloaded(attachment.id, size);\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n    }\r\n}\n--------------------------------------------------\n", "import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\nstatic List<TwoStateOwner> getList() {\r\n    synchronized (list) {\r\n        return new ArrayList<>(list);\r\n    }\r\n}" ],
  "Iconify/648" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "MaterialFiles/571" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Feeder/62" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "Feeder/63" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "Trail-Sense/60" : [ "facebookLoginClick()\n--------------------------------------------------\nfacebookLoginClick(this, resources.getStringArray(R.array.facebook_permissions_array).asList())", "import com.kickstarter.ui.activities.LoginToutActivity\nimport com.facebook.login.LoginManager\nimport android.app.Activity\noverride fun facebookLoginClick(\r\n            activity: LoginToutActivity?,\r\n            facebookPermissions: List<String>\r\n        ) {\r\n            facebookLoginClick.onNext(facebookPermissions)\r\n            if (activity != null) {\r\n                LoginManager.getInstance()\r\n                    .logInWithReadPermissions(activity, facebookPermissions)\r\n            }\r\n        }\nImport(names=[com, facebook, login, LoginManager], wildcard=false, alias=null)\nImport(names=[com, kickstarter, ui, activities, LoginToutActivity], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/286" : [ "{\n        if (!tryToHandleOpenPlayingQueue(\n                queue,\n--------------------------------------------------\n\n        if (!tryToHandleOpenPlayingQueue(\n                queue,", "import code.name.monkey.retromusic.model.Song\nprivate fun tryToHandleOpenPlayingQueue(\n        queue: List<Song>,\n        startPosition: Int,\n        startPlaying: Boolean,\n    ): Boolean {\n        if (playingQueue === queue) {\n            if (startPlaying) {\n                playSongAt(startPosition)\n            } else {\n                position = startPosition\n            }\n            return true\n        }\n        return false\n    }\nimport code.name.monkey.retromusic.model.Song" ],
  "Iconify/645" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Feeder/69" : [ "BalanceSortType.getTypeFromString(sortString)", "fun getTypeFromString(value: String): BalanceSortType = when (value) {\r\n            \"value\" -> Value\r\n            \"percent_growth\" -> PercentGrowth\r\n            else -> Name\r\n        }" ],
  "VinylMusicPlayer/288" : [ "public long getSelectedPosition() {\r\n    ensureList();\r\n    return mList.getSelectedPosition();\r\n}\n--------------------------------------------------\n", "public long getSelectedPosition() {\r\n    ensureList();\r\n    return mList.getSelectedPosition();\r\n}" ],
  "VinylMusicPlayer/287" : [ "", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static State forThread(@NonNull java.lang.Thread thread) {\r\n    java.lang.Thread.State state = thread.getState();\r\n    return getState(state);\r\n}" ],
  "Feeder/67" : [ "SeasonTools.getSeasonString(context, seasonNumbersOrNull.number)\n--------------------------------------------------\nSeasonTools.getSeasonString(this, seasonNumber)\n--------------------------------------------------\nSeasonTools.getSeasonString(context, season.number)", "import com.battlelancer.seriesguide.R\nimport android.content.Context\nfun getSeasonString(context: Context, seasonNumber: Int): String {\r\n        return if (seasonNumber == 0) {\r\n            context.getString(R.string.specialseason)\r\n        } else {\r\n            context.getString(R.string.season_number, seasonNumber)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Feeder/71" : [ "PlaybackService.equalizer.setValue(if (isChecked) equalizer else null)\n--------------------------------------------------\nbar.setValue(equalizer.getAmp(i))\n--------------------------------------------------\nMediaParsingService.newStorages.setValue(null)\n--------------------------------------------------\nplayerBrightnessProgress.setValue(brightness)\n--------------------------------------------------\nplayerVolumeProgress.setValue(volume)\n--------------------------------------------------\ntipsBrightnessProgress.setValue(50)\n--------------------------------------------------\ntipsVolumeProgress.setValue(50)\n--------------------------------------------------\nprogress.setValue(value)\n--------------------------------------------------\nsetValue(if (restore) getPersistedInt(FALLBACK_DEFAULT_VALUE) else defaultValue as Int)\n--------------------------------------------------\nsuper.setValue(value)", "fun setValue(value: Int) {\r\n        this.value = value\r\n        invalidate()\r\n    }" ],
  "BCR/90" : [ "createRemindersNotificationChannel()", "import com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.R\nimport android.app.NotificationManager\nimport android.app.NotificationChannel\nprivate fun createRemindersNotificationChannel() {\r\n        val channel = NotificationChannel(\r\n            Constants.REMINDERS_CHANNEL_ID,\r\n            getString(R.string.reminders_channel_name),\r\n            NotificationManager.IMPORTANCE_DEFAULT\r\n        )\r\n        channel.description = getString(R.string.reminders_channel_description)\r\n        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n        notificationManager.createNotificationChannel(channel)\r\n\r\n    }\nImport(names=[android, app, NotificationChannel], wildcard=false, alias=null)\nImport(names=[android, app, NotificationManager], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, util, Constants], wildcard=false, alias=null)" ],
  "MaterialFiles/107" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/270" : [ "@Override\r\npublic void onClick(View view) {\r\n    final AvatarsAdapterEntry avatarToDelete = (AvatarsAdapterEntry) getItem((Integer) view.getTag());\r\n    AlertDialog.Builder builder = new AlertDialog.Builder(AvatarsActivity.this);\r\n    builder.setTitle(\"Delete Avatar\");\r\n    builder.setMessage(\"Are you sure you want to delete this avatar?\");\r\n    builder.setPositiveButton(\"Delete\", new DialogInterface.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialogInterface, int i) {\r\n            NetworkConnection.getInstance().set_avatar(avatarToDelete.cid, avatarToDelete.orgId, null, null);\r\n        }\r\n    });\r\n    builder.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(DialogInterface dialogInterface, int i) {\r\n            dialogInterface.dismiss();\r\n        }\r\n    });\r\n    AlertDialog d = builder.create();\r\n    d.setOwnerActivity(AvatarsActivity.this);\r\n    d.show();\r\n}\n--------------------------------------------------\npublic void setMenuColorFilter(final Menu menu) {\r\n    for (int i = 0; i < menu.size(); i++) {\r\n        MenuItem menuItem = menu.getItem(i);\r\n        Drawable d = menuItem.getIcon();\r\n        if (d != null) {\r\n            d.mutate();\r\n            d.setColorFilter(ColorScheme.getInstance().navBarSubheadingColor, PorterDuff.Mode.SRC_ATOP);\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "public Object getItem(int position) {\r\n    if (position < data.size())\r\n        return data.get(position);\r\n    else\r\n        return null;\r\n}" ],
  "MaterialFiles/106" : [ "Files.createDirectory(file.toPath())\n--------------------------------------------------\ncreateDirectory(file)", "import java.nio.file.Files\nimport java.io.File\nimport android.os.Build\nprivate fun createDirectory(file: File) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            Files.createDirectory(file.toPath())\r\n        } else file.mkdir()\r\n    }\nImport(names=[android, os, Build], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)\nImport(names=[java, nio, file, Files], wildcard=false, alias=null)" ],
  "Trail-Sense/37" : [ "{\n    var expanded by remember { mutableStateOf(false) }\r\n    Scaffold(\n--------------------------------------------------\n                        modifier = Modifier.testTag(LoginToutTestTag.OPTIONS_ICON.name),\n                        onClick = { expanded = !expanded },\r\n                        enabled = true\n--------------------------------------------------\n                            KSLoginDropdownMenu(\n                                expanded = expanded,\r\n                                onDismissed = { expanded = !expanded },\n--------------------------------------------------\n                                expanded = expanded,\n                                onDismissed = { expanded = !expanded },\r\n                                onTermsOfUseClicked = onTermsOfUseClicked,\n--------------------------------------------------\nif (isExpanded) collapse() else expand()", "private fun expand() {\r\n        expandAnimation()\r\n        isExpanded = true\r\n    }" ],
  "BCR/92" : [ "return buildResultFailure(R.string.trakt_error_not_exists)\n--------------------------------------------------\nreturn buildResultFailure(R.string.unknown)\n--------------------------------------------------\nreturn buildResultFailure(R.string.trakt_error_credentials)\n--------------------------------------------------\nbuildResultFailure()\n--------------------------------------------------\nbuildResultFailure(R.string.offline)\n--------------------------------------------------\nbuildResultFailure(false)\n--------------------------------------------------\nbuildResultFailure(true)", "import com.battlelancer.seriesguide.R\nprivate fun buildResultFailure(): Result {\r\n        return Result(\r\n            emptyText = context.getString(\r\n                R.string.api_error_generic,\r\n                context.getString(R.string.trakt)\r\n            )\r\n        )\r\n    }\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/272" : [ "private void deliver() {\r\n    if (\"androidx.fragment.app.FragmentViewLifecycleOwner\".equals(owner.getClass().getName()))\r\n        try {\r\n            Field mFragment = owner.getClass().getDeclaredField(\"mFragment\");\r\n            mFragment.setAccessible(true);\r\n            Fragment fragment = (Fragment) mFragment.get(owner);\r\n            if (fragment != null && (fragment.getContext() == null || fragment.getActivity() == null)) {\r\n                // Since deliver is executed for resumed fragments only, this should never happen\r\n                Log.e(\"Fragment without activity\" + \" task=\" + name + \" context=\" + (fragment.getContext() != null) + \" activity=\" + (fragment.getActivity() != null) + \" fragment=\" + fragment.getClass().getName() + \" lifecycle=\" + owner.getLifecycle().getCurrentState());\r\n                return;\r\n            }\r\n        } catch (Throwable ex) {\r\n            Log.w(ex);\r\n        }\r\n    try {\r\n        onPostExecute(args);\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n        try {\r\n            onException(args, ex);\r\n        } catch (Throwable exex) {\r\n            Log.e(exex);\r\n        }\r\n    } finally {\r\n        try {\r\n            if (error == null) {\r\n                if (log && BuildConfig.BETA_RELEASE) {\r\n                    Log.i(\"Crumb \" + name);\r\n                    Map<String, String> crumb = new HashMap<>();\r\n                    crumb.put(\"name\", name);\r\n                    Log.breadcrumb(\"task\", crumb);\r\n                }\r\n                onExecuted(args, (T) data);\r\n            } else\r\n                try {\r\n                    onException(args, error);\r\n                } catch (Throwable exex) {\r\n                    Log.e(exex);\r\n                }\r\n        } catch (Throwable ex) {\r\n            Log.e(ex);\r\n            try {\r\n                onException(args, ex);\r\n            } catch (Throwable exex) {\r\n                Log.e(exex);\r\n            }\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import android.os.Bundle;\r\nimport android.os.Bundle\n@Override\r\nprotected void onPostExecute(Bundle args) {\r\n    if (highlightSpan != null)\r\n        etBody.getText().removeSpan(highlightSpan);\r\n}" ],
  "BCR/91" : [ "\n            updateNotificationSettings {\r\n                NotificationSettings(", "import android.app.Notification\nprivate fun updateNotification() {\r\n        val notification = createNotification()\r\n        notificationManager.notify(notificationId, notification)\r\n    }\nimport android.app.Notification" ],
  "Trail-Sense/141" : [ "findLocation(location.latAsDouble, location.lonAsDouble)\n--------------------------------------------------\nfindLocation(location.latitude, location.longitude)\n--------------------------------------------------\ngeoCoder.findLocation(it)", "import de.schildbach.pte.dto.Location\nfun findLocation(location: android.location.Location) {\r\n        if (location.latitude == 0.0 && location.latitude == 0.0) return\r\n        findLocation(location.latitude, location.longitude)\r\n    }" ],
  "Trail-Sense/31" : [ "disconnect()", "import android.view.View\nprivate fun disconnect() {\r\n        TraktCredentials.get(requireContext()).removeCredentials()\r\n        updateViews()\r\n    }" ],
  "VinylMusicPlayer/279" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/583" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Feeder/32" : [ "apiClient.fetchUnansweredSurveys()", "import rx.Observable\nimport com.kickstarter.models.SurveyResponse\nimport com.kickstarter.mock.factories.SurveyResponseFactory\noverride fun fetchUnansweredSurveys(): Observable<List<SurveyResponse>> {\r\n        return Observable.just(\r\n            listOf(\r\n                SurveyResponseFactory.surveyResponse(),\r\n                SurveyResponseFactory.surveyResponse()\r\n            )\r\n        )\r\n    }\nImport(names=[com, kickstarter, mock, factories, SurveyResponseFactory], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, SurveyResponse], wildcard=false, alias=null)\nImport(names=[rx, Observable], wildcard=false, alias=null)" ],
  "Iconify/615" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "BCR/97" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/585" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/145" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/584" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/146" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/94" : [ "", "import androidx.glance.action.ActionParameters\nimport androidx.glance.GlanceId\nimport android.content.Intent\nimport android.content.Context\noverride suspend fun onAction(context: Context, glanceId: GlanceId, parameters: ActionParameters) {\r\n        parameters[taskId]?.let { id ->\r\n            parameters[completed].let { completed ->\r\n                val intent = Intent(context, CompleteTaskWidgetReceiver::class.java)\r\n                intent.putExtra(\"taskId\", id)\r\n                intent.putExtra(\"completed\", completed)\r\n                context.sendBroadcast(intent)\r\n            }\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, glance, GlanceId], wildcard=false, alias=null)\nImport(names=[androidx, glance, action, ActionParameters], wildcard=false, alias=null)" ],
  "Trail-Sense/148" : [ "            val networkType = BinanceChainKit.NetworkType.MainNet\n            BinanceChainKit.clear(App.instance, networkType, walletId)\r\n        }\n--------------------------------------------------\n{\r\n            BitcoinKit.clear(App.instance, NetworkType.MainNet, walletId)\r\n        }\n--------------------------------------------------\nSolanaKit.clear(App.instance, walletId)\n--------------------------------------------------\nTronKit.clear(App.instance, network, walletId)\n--------------------------------------------------\nBinanceAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinCashAdapter.clear(accountId)\n--------------------------------------------------\nECashAdapter.clear(accountId)\n--------------------------------------------------\nDashAdapter.clear(accountId)\n--------------------------------------------------\nEvmAdapter.clear(accountId)\n--------------------------------------------------\nEip20Adapter.clear(accountId)\n--------------------------------------------------\nZcashAdapter.clear(accountId)\n--------------------------------------------------\nSolanaAdapter.clear(accountId)\n--------------------------------------------------\nTronAdapter.clear(accountId)\n--------------------------------------------------\nstorage.clear()\n--------------------------------------------------\naccountsCache.clear()\n--------------------------------------------------\nadaptersMap.clear()\n--------------------------------------------------\naccountManager.clear()\n--------------------------------------------------\nwalletManager.clear()\n--------------------------------------------------\nlocalStorage.clear()\n--------------------------------------------------\npreferences.edit().clear()\n--------------------------------------------------\nthis.adaptersMap.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ndisposables.clear()\n--------------------------------------------------\nupdatesDisposables.clear()\n--------------------------------------------------\nbalanceAdapterRepository.clear()\n--------------------------------------------------\ndisposable.clear()\n--------------------------------------------------\nrecordMap.clear()\n--------------------------------------------------\nmetadataMap.clear()\n--------------------------------------------------\nnftItemMap.clear()\n--------------------------------------------------\ndao.clear()\n--------------------------------------------------\nfeeService.clear()\n--------------------------------------------------\nsettingsService.clear()\n--------------------------------------------------\nrepository.clear()\n--------------------------------------------------\nservice.clear()\n--------------------------------------------------\ntransactionRecords.clear()\n--------------------------------------------------\nadapters.clear()", "override fun clear() {\r\n        disposable.clear()\r\n        settingsService.clear()\r\n    }" ],
  "VinylMusicPlayer/274" : [ "MusicPlayerRemote.unbindFromService(serviceToken)", "fun unbindFromService(token: ServiceToken?) {\n        if (token == null) {\n            return\n        }\n        val mContextWrapper = token.mWrappedContext\n        val mBinder = mConnectionMap.remove(mContextWrapper) ?: return\n        mContextWrapper.unbindService(mBinder)\n        if (mConnectionMap.isEmpty()) {\n            musicService = null\n        }\n    }" ],
  "Iconify/611" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/586" : [ "", "import com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.presentation.main.MainActivity\nimport androidx.glance.action.ActionParameters\nimport androidx.glance.GlanceId\nimport androidx.core.net.toUri\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\noverride suspend fun onAction(context: Context, glanceId: GlanceId, parameters: ActionParameters) {\r\n        parameters[eventJson]?.let {\r\n            val intent = Intent(\r\n                Intent.ACTION_VIEW,\r\n                \"${Constants.CALENDAR_DETAILS_SCREEN_URI}/$it\".toUri(),\r\n                context,\r\n                MainActivity::class.java\r\n            ).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n            context.startActivity(intent)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, glance, GlanceId], wildcard=false, alias=null)\nImport(names=[androidx, glance, action, ActionParameters], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, presentation, main, MainActivity], wildcard=false, alias=null)" ],
  "Feeder/33" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/610" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/34" : [ "toggleAnimation(isExpanded)", "private fun toggleAnimation(isExpanded: Boolean) {\r\n        if (isExpanded)\r\n            collapseAnimation()\r\n        else\r\n            expandAnimation()\r\n\r\n        this.isExpanded = !isExpanded\r\n    }" ],
  "VinylMusicPlayer/276" : [ "this@AbsMusicServiceActivity.onServiceDisconnected()\n--------------------------------------------------\nlistener.onServiceDisconnected()", "override fun onServiceDisconnected(className: ComponentName) {\n            mCallback?.onServiceDisconnected(className)\n            musicService = null\n        }" ],
  "BCR/95" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/619" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/618" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/49" : [ "\n    if (!hasPostNotificationsPermission()) {\r\n      requestPostNotificationsPermission()", "import com.github.ashutoshgngwr.noice.ext.hasSelfPermission\nimport com.github.ashutoshgngwr.noice.R\nimport android.os.Build\nimport android.Manifest\nprivate fun hasPostNotificationsPermission(): Boolean {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n      return requireContext().hasSelfPermission(Manifest.permission.POST_NOTIFICATIONS)\r\n    }\r\n\r\n    return true\r\n  }\nimport android.Manifest\nimport android.os.Build\nimport com.github.ashutoshgngwr.noice.R\nimport com.github.ashutoshgngwr.noice.ext.hasSelfPermission" ],
  "Trail-Sense/46" : [ "fragment.getCurrentDate()\n--------------------------------------------------\ngetCurrentDate()!!", "import org.joda.time.DateTime\nimport com.simplemobiletools.calendar.pro.helpers.Formatter\noverride fun getCurrentDate(): DateTime? {\r\n        return if (currentDayCode != \"\") {\r\n            Formatter.getDateTimeFromCode(currentDayCode)\r\n        } else {\r\n            null\r\n        }\r\n    }\nImport(names=[com, simplemobiletools, calendar, pro, helpers, Formatter], wildcard=false, alias=null)\nImport(names=[org, joda, time, DateTime], wildcard=false, alias=null)" ],
  "Trail-Sense/47" : [ "            // Enable WebView debugging\n            if (isWebViewSupported()) {\r\n                WebView.setWebContentsDebuggingEnabled(true)\n--------------------------------------------------\n        // Check WebView support\n        if (!isWebViewSupported()) {\r\n            AlertDialog.Builder(this).apply {", "import timber.log.Timber\nimport android.webkit.WebView\nimport android.webkit.CookieManager\nimport android.content.pm.PackageManager\nimport android.content.Context\nfun Context.isWebViewSupported(): Boolean {\r\n    @Suppress(\"TooGenericExceptionCaught\")\r\n    try {\r\n        // May throw android.webkit.WebViewFactory$MissingWebViewPackageException if WebView is not installed\r\n        CookieManager.getInstance()\r\n    } catch (e: Exception) {\r\n        Timber.e(e)\r\n        return false\r\n    }\r\n\r\n    return packageManager.hasSystemFeature(PackageManager.FEATURE_WEBVIEW)\r\n}\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, webkit, CookieManager], wildcard=false, alias=null)\nImport(names=[android, webkit, WebView], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Trail-Sense/151" : [ "                .data(arguments.coverUri)\n                .transformations(CropTransformation(binding.cropOverlay, binding.coverImage))\r\n                .build(),", "import coil.size.Size\nimport android.graphics.Rect\nimport android.graphics.Bitmap\noverride suspend fun transform(\r\n    input: Bitmap,\r\n    size: Size,\r\n  ): Bitmap {\r\n    val scaleFactor: Float = input.width.toFloat() / cropSource.measuredWidth\r\n    scaleRect(rect, scaleFactor)\r\n    return Bitmap.createBitmap(input, rect.left, rect.top, rect.width(), rect.height())\r\n  }\nimport android.graphics.Bitmap\nimport android.graphics.Rect\nimport coil.size.Size" ],
  "Trail-Sense/44" : [ "@Override\r\npublic void onChanged(@Nullable List<TupleAccountEx> accounts) {\r\n    if (accounts == null)\r\n        accounts = new ArrayList<>();\r\n    boolean authorized = true;\r\n    for (TupleAccountEx account : accounts) if (account.auth_type != AUTH_TYPE_PASSWORD && !Helper.hasPermissions(getContext(), Helper.getOAuthPermissions())) {\r\n        authorized = false;\r\n    }\r\n    btnGrant.setVisibility(authorized ? View.GONE : View.VISIBLE);\r\n    adapter.set(accounts);\r\n    pbWait.setVisibility(View.GONE);\r\n    grpReady.setVisibility(View.VISIBLE);\r\n    if (accounts.size() == 0) {\r\n        fab.setCustomSize(Helper.dp2pixels(context, 2 * 56));\r\n        if (animator != null && !animator.isStarted())\r\n            animator.start();\r\n    } else {\r\n        fab.clearCustomSize();\r\n        if (animator != null && animator.isStarted())\r\n            animator.end();\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n    if (Helper.hasPermissions(getContext(), permissions)) {\r\n        btnGrant.setVisibility(View.GONE);\r\n        ServiceSynchronize.reload(getContext(), null, false, \"Permissions regranted\");\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.Context\nstatic boolean hasPermissions(Context context, String[] permissions) {\r\n    for (String permission : permissions) if (!hasPermission(context, permission))\r\n        return false;\r\n    return true;\r\n}" ],
  "Trail-Sense/152" : [ "        currentPage -= currentPageOffset.roundToInt()\n        snapToOffset(0f)\r\n        selectionState = SelectionState.Selected\n--------------------------------------------------\n                        val newPos = (pos + dy).coerceIn(min.toFloat(), max.toFloat())\n                        snapToOffset(newPos / pageSize)\r\n                    }", "suspend fun snapToOffset(offset: Float) {\r\n        val max = if (currentPage == minPage) 0f else 1f\r\n        val min = if (currentPage == maxPage) 0f else -1f\r\n        _currentPageOffset.snapTo(offset.coerceIn(min, max))\r\n    }" ],
  "Trail-Sense/153" : [ "textSize = getDimension(context!!, R.dimen.smallTextSize)\n--------------------------------------------------\nval defaultTextSize = getDimension(ctx, R.dimen.smallTextSize)\n--------------------------------------------------\nval maxTextSize = getDimension(context, R.dimen.tinyTextSize)\n--------------------------------------------------\nval minTextSize = getDimension(context, R.dimen.tinyTextSize)\n--------------------------------------------------\nval maxTextSize = getDimension(context, R.dimen.regularTextSize)\n--------------------------------------------------\ntinyTextSize = getDimension(context, R.dimen.tinyTextSize)\n--------------------------------------------------\ngetDimension(context, R.dimen.checkmarkWidth).toInt()\n--------------------------------------------------\ngetDimension(context, R.dimen.checkmarkHeight).toInt()\n--------------------------------------------------\ntextSize = getDimension(context, R.dimen.smallerTextSize)\n--------------------------------------------------\ncontext.resources.getDimension(id)\n--------------------------------------------------\nInterfaceUtils.getDimension(context, id)\n--------------------------------------------------\ngetDimension(context, R.dimen.smallTextSize)", "import org.isoron.uhabits.R\nimport androidx.annotation.AttrRes\nimport android.content.res.TypedArray\nfun getDimension(@AttrRes attrId: Int): Int {\r\n        val ta = getTypedArray(attrId)\r\n        val dim = ta.getDimensionPixelSize(0, 0)\r\n        ta.recycle()\r\n        return dim\r\n    }\nImport(names=[androidx, annotation, AttrRes], wildcard=false, alias=null)" ],
  "Trail-Sense/45" : [ "{\n        // In onDestroy() you should tear down anything that was setup for\r\n        // your data source, eg. cursors, connections, etc.\n--------------------------------------------------\n{\r\n        super.onDestroyView()\r\n        binding = null\r\n    }\n--------------------------------------------------\nsuper.onDestroy()", "import androidx.preference.PreferenceManager\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener\nimport android.content.SharedPreferences\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        val prefs = PreferenceManager.getDefaultSharedPreferences(requireContext())\r\n        prefs.unregisterOnSharedPreferenceChangeListener(onPreferenceChangeListener)\r\n    }\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "Trail-Sense/42" : [ "private void showInfoDialog() {\r\n    AlertDialog.Builder infoDialog = new MaterialAlertDialogBuilder(this);\r\n    int dialogContentPadding = getResources().getDimensionPixelSize(R.dimen.alert_dialog_content_padding);\r\n    infoDialog.setTitle(loyaltyCard.store);\r\n    TextView infoTextview = new TextView(this);\r\n    infoTextview.setPadding(dialogContentPadding, dialogContentPadding / 2, dialogContentPadding, 0);\r\n    infoTextview.setAutoLinkMask(Linkify.ALL);\r\n    infoTextview.setTextIsSelectable(true);\r\n    SpannableStringBuilder infoText = new SpannableStringBuilder();\r\n    if (!loyaltyCard.note.isEmpty()) {\r\n        infoText.append(loyaltyCard.note);\r\n    }\r\n    if (loyaltyCardGroups.size() > 0) {\r\n        List<String> groupNames = new ArrayList<>();\r\n        for (Group group : loyaltyCardGroups) {\r\n            groupNames.add(group._id);\r\n        }\r\n        padSpannableString(infoText);\r\n        infoText.append(getString(R.string.groupsList, TextUtils.join(\", \", groupNames)));\r\n    }\r\n    if (hasBalance(loyaltyCard)) {\r\n        padSpannableString(infoText);\r\n        infoText.append(getString(R.string.balanceSentence, Utils.formatBalance(this, loyaltyCard.balance, loyaltyCard.balanceType)));\r\n    }\r\n    appendDateInfo(infoText, loyaltyCard.validFrom, (Utils::isNotYetValid), R.string.validFromSentence, R.string.validFromSentence);\r\n    appendDateInfo(infoText, loyaltyCard.expiry, (Utils::hasExpired), R.string.expiryStateSentenceExpired, R.string.expiryStateSentence);\r\n    infoTextview.setText(infoText);\r\n    infoDialog.setView(infoTextview);\r\n    infoDialog.setPositiveButton(R.string.ok, (dialogInterface, i) -> dialogInterface.dismiss());\r\n    infoDialog.create().show();\r\n}\n--------------------------------------------------\nprivate void showInfoDialog() {\r\n    AlertDialog.Builder infoDialog = new MaterialAlertDialogBuilder(this);\r\n    int dialogContentPadding = getResources().getDimensionPixelSize(R.dimen.alert_dialog_content_padding);\r\n    infoDialog.setTitle(loyaltyCard.store);\r\n    TextView infoTextview = new TextView(this);\r\n    infoTextview.setPadding(dialogContentPadding, dialogContentPadding / 2, dialogContentPadding, 0);\r\n    infoTextview.setAutoLinkMask(Linkify.ALL);\r\n    infoTextview.setTextIsSelectable(true);\r\n    SpannableStringBuilder infoText = new SpannableStringBuilder();\r\n    if (!loyaltyCard.note.isEmpty()) {\r\n        infoText.append(loyaltyCard.note);\r\n    }\r\n    if (loyaltyCardGroups.size() > 0) {\r\n        List<String> groupNames = new ArrayList<>();\r\n        for (Group group : loyaltyCardGroups) {\r\n            groupNames.add(group._id);\r\n        }\r\n        padSpannableString(infoText);\r\n        infoText.append(getString(R.string.groupsList, TextUtils.join(\", \", groupNames)));\r\n    }\r\n    if (hasBalance(loyaltyCard)) {\r\n        padSpannableString(infoText);\r\n        infoText.append(getString(R.string.balanceSentence, Utils.formatBalance(this, loyaltyCard.balance, loyaltyCard.balanceType)));\r\n    }\r\n    appendDateInfo(infoText, loyaltyCard.validFrom, (Utils::isNotYetValid), R.string.validFromSentence, R.string.validFromSentence);\r\n    appendDateInfo(infoText, loyaltyCard.expiry, (Utils::hasExpired), R.string.expiryStateSentenceExpired, R.string.expiryStateSentence);\r\n    infoTextview.setText(infoText);\r\n    infoDialog.setView(infoTextview);\r\n    infoDialog.setPositiveButton(R.string.ok, (dialogInterface, i) -> dialogInterface.dismiss());\r\n    infoDialog.create().show();\r\n}\n--------------------------------------------------\n", "import android.text.SpannableStringBuilder;\r\nimport android.text.SpannableStringBuilder\nimport android.os.Build\nprivate SpannableStringBuilder padSpannableString(SpannableStringBuilder spannableStringBuilder) {\r\n    if (spannableStringBuilder.length() > 0) {\r\n        spannableStringBuilder.append(\"\\n\\n\");\r\n    }\r\n    return spannableStringBuilder;\r\n}" ],
  "Trail-Sense/154" : [ "androidDirFinder.getFilesDir(\"CSV\")\n--------------------------------------------------\nAndroidDirFinder(context).getFilesDir(\"Logs\")\n--------------------------------------------------\nAndroidDirFinder(context).getFilesDir(\"Backups\")", "import java.io.File\nimport org.isoron.uhabits.utils.FileUtils\nimport androidx.core.content.ContextCompat\nimport android.content.Context\nfun getFilesDir(relativePath: String): File? {\r\n        return FileUtils.getDir(\r\n            ContextCompat.getExternalFilesDirs(context, null),\r\n            relativePath\r\n        )\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, utils, FileUtils], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "MaterialFiles/594" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/593" : [ "delegate.close()\n--------------------------------------------------\nclose()\n--------------------------------------------------\nsuper.close()\n--------------------------------------------------\nlockChannel?.close()", "override fun close() {\r\n        if (lazyDelegate.isInitialized()) {\r\n            delegate.close()\r\n        }\r\n    }" ],
  "Trail-Sense/43" : [ "adapter.submitList(data.results)\n--------------------------------------------------\nsuper.submitList(list)\n--------------------------------------------------\nlistAdapter.submitList(data)\n--------------------------------------------------\nadapter.submitList(lists)\n--------------------------------------------------\nadapter.submitList(it)\n--------------------------------------------------\nadapter.submitList(it.results)\n--------------------------------------------------\nadapter.submitList(shows)\n--------------------------------------------------\nsubmitList(episodes) {\n    if (savedInstanceState == null && startingPosition != -1) {\n        setItemChecked(startingPosition)\n        startingPosition = -1\n    } else if (scrollToCheckedItemOnDataRefresh) {\n        val position = adapter.getPositionForId(adapter.selectedItemId)\n        if (position != -1) {\n            binding?.recyclerViewEpisodes?.smoothScrollToPosition(position)\n        }\n        scrollToCheckedItemOnDataRefresh = false\n    }\n}\n--------------------------------------------------\nadapter.submitList(seasons)\n--------------------------------------------------\nsuper.submitList(modifiedList)\n--------------------------------------------------\nadapter.submitList(showItems)", "import com.battlelancer.seriesguide.R\noverride fun submitList(list: MutableList<ShowItem>?) {\r\n        if (displayFirstRunHeader) {\r\n            val modifiedList = list ?: mutableListOf()\r\n            if (!modifiedList.contains(ShowItem.HEADER_FIRST_RUN)) {\r\n                modifiedList.add(0, ShowItem.header())\r\n            }\r\n            super.submitList(modifiedList)\r\n        } else {\r\n            super.submitList(list)\r\n        }\r\n    }" ],
  "Trail-Sense/40" : [ "addAtTop(tbar)", "import org.isoron.uhabits.R\nimport android.widget.RelativeLayout.ALIGN_PARENT_TOP\nimport android.widget.RelativeLayout\nimport android.view.ViewGroup.LayoutParams.WRAP_CONTENT\nimport android.view.ViewGroup.LayoutParams.MATCH_PARENT\nimport android.view.View\nfun RelativeLayout.addAtTop(\r\n    view: View,\r\n    width: Int = MATCH_PARENT,\r\n    height: Int = WRAP_CONTENT\r\n) {\r\n    view.layoutParams = RelativeLayout.LayoutParams(width, height).apply {\r\n        addRule(ALIGN_PARENT_TOP)\r\n    }\r\n    view.id = View.generateViewId()\r\n    this.addView(view)\r\n}\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup, LayoutParams, MATCH_PARENT], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup, LayoutParams, WRAP_CONTENT], wildcard=false, alias=null)\nImport(names=[android, widget, RelativeLayout], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, R], wildcard=false, alias=null)" ],
  "Iconify/625" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/158" : [ "", "import com.omgodse.notally.preferences.View\nimport android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n        adapter = null\r\n    }" ],
  "BCR/83" : [ "        }\n        val share = FileProvider.getUriForFile(context, Constants.FILE_PROVIDER_AUTHORITY, File(uri.path))\r\n        intent.setDataAndType(share, mimeType)\n--------------------------------------------------\n{\n            getUris(observer.authority).forEach {\r\n                context.contentResolver.registerContentObserver(it, false, observer)", "import org.tasks.Strings.isNullOrEmpty\nimport android.net.Uri\nprivate fun getUri(key: Int): Uri? {\r\n        val uri = getStringValue(key)\r\n        return if (isNullOrEmpty(uri)) null else Uri.parse(uri)\r\n    }\nimport android.net.Uri\nimport org.tasks.Strings.isNullOrEmpty" ],
  "MaterialFiles/114" : [ "override fun onDestroy() {\n    super.onDestroy()\n    stopForeground(true)\n    job.cancel()\n}", "override fun onCreate() {\r\n        super.onCreate()\r\n        startForeground()\r\n    }" ],
  "Trail-Sense/159" : [ "@Override\r\npublic void onDismiss(@NonNull DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    getActivity().finish();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onDismiss(@NonNull DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    if (nextcloudLoginFlow != null) {\r\n        nextcloudLoginFlow.cancel();\r\n    }\r\n}\n--------------------------------------------------\n", "import android.app.Dialog;\r\nimport android.content.DialogInterface;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.DialogInterface\nimport android.app.Dialog\n@Override\r\npublic void onDismiss(@NonNull DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    if (nextcloudLoginFlow != null) {\r\n        nextcloudLoginFlow.cancel();\r\n    }\r\n}" ],
  "MaterialFiles/597" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "Iconify/621" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/85" : [ "                } else {\n                    clearUi()\r\n                    TaskListFragment.newTaskListFragment(newFilter)\n--------------------------------------------------\n        AndroidUtilities.assertMainThread()\n        clearUi()\r\n        return coroutineScope {\n--------------------------------------------------\nidToNode.clear()\n--------------------------------------------------\npurchases.clear()\n--------------------------------------------------\nEtebaseLocalCache.clear(context, username)\n--------------------------------------------------\nclear(context, it)\n--------------------------------------------------\njobs.clear()\n--------------------------------------------------\ntoolbar.menu.clear()\n--------------------------------------------------\nvtodoCache.clear()\n--------------------------------------------------\nEtebaseLocalCache.clear(context)\n--------------------------------------------------\nnotificationQueue.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ncaldavCalendars.clear()\n--------------------------------------------------\ntagDatas.clear()", "fun clear(key: String?) {\r\n        val editor = prefs.edit()\r\n        editor.remove(key)\r\n        editor.apply()\r\n    }" ],
  "MaterialFiles/115" : [ "public static void enqueueWork(Context context, Intent work) {\r\n    if (BuildHelper.isAboveOrEqual(VERSION_CODES.O)) {\r\n        enqueueWork(context, AlarmRestoreOnRebootService.class, JOB_ID, work);\r\n    } else {\r\n        Intent jobIntent = new Intent(context, AlarmRestoreOnRebootService.class);\r\n        context.startService(jobIntent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onReceive(Context ctx, Intent intent) {\r\n    LogDelegate.i(\"System rebooted: refreshing reminders\");\r\n    if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) {\r\n        AlarmRestoreOnRebootService.enqueueWork(ctx, intent);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.Intent;\r\nimport it.feio.android.omninotes.helpers.BuildHelper\nimport android.os.Build.VERSION_CODES\nimport android.content.Intent\nimport android.content.Context\npublic static void enqueueWork(Context context, Intent work) {\r\n    if (BuildHelper.isAboveOrEqual(VERSION_CODES.O)) {\r\n        enqueueWork(context, AlarmRestoreOnRebootService.class, JOB_ID, work);\r\n    } else {\r\n        Intent jobIntent = new Intent(context, AlarmRestoreOnRebootService.class);\r\n        context.startService(jobIntent);\r\n    }\r\n}" ],
  "Iconify/620" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "BCR/84" : [ "        super.onNewIntent(intent)\n        setIntent(intent)\r\n        logIntent(\"onNewIntent\")\n--------------------------------------------------\n{\n        preferences.setInt(\r\n                R.string.p_theme_color, getAndroidColor(preferences.getInt(R.string.p_theme_color, 7)))\n--------------------------------------------------\npreferences.setInt(R.string.p_theme, index)\n--------------------------------------------------\npreferences.setInt(R.string.p_theme_color, color)\n--------------------------------------------------\npreferences.setInt(R.string.p_theme_accent, index)\n--------------------------------------------------\npreferences.setInt(R.string.p_theme_launcher, index)\n--------------------------------------------------\nremoteViews.setInt(R.id.widget_title, \"setTextColor\", color.colorOnPrimary)\n--------------------------------------------------\nremoteViews.setInt(it, \"setColorFilter\", color.colorOnPrimary)\n--------------------------------------------------\nsetInt(R.id.widget_header, \"setBackgroundColor\", ColorUtils.setAlphaComponent(color.primaryColor, widgetPreferences.headerOpacity))\n--------------------------------------------------\nsetInt(R.id.list_view, \"setBackgroundColor\", ColorUtils.setAlphaComponent(bgColor, widgetPreferences.rowOpacity))\n--------------------------------------------------\nsetInt(R.id.empty_view, \"setBackgroundColor\", ColorUtils.setAlphaComponent(bgColor, widgetPreferences.footerOpacity))\n--------------------------------------------------\nrv.setInt(view, \"setBackgroundResource\", drawableRes)", "fun setInt(key: String?, value: Int) {\r\n        val editor = prefs.edit()\r\n        editor.putInt(key, value)\r\n        editor.apply()\r\n    }" ],
  "Iconify/629" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/628" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/370" : [ "                val allSongs = songRepository.songs().toMutableList()\n                makeShuffleList(allSongs, -1)\n                musicService.openQueue(allSongs, 0, true)\n--------------------------------------------------\n                this.shuffleMode = shuffleMode\n                makeShuffleList(playingQueue, getPosition())\n                position = 0\n--------------------------------------------------\n            if (shuffleMode == SHUFFLE_MODE_SHUFFLE) {\n                makeShuffleList(this.playingQueue, startPosition)\n                position = 0", "import code.name.monkey.retromusic.model.Song\nfun makeShuffleList(listToShuffle: MutableList<Song>, current: Int) {\n        if (listToShuffle.isEmpty()) return\n        if (current >= 0) {\n            val song = listToShuffle.removeAt(current)\n            listToShuffle.shuffle()\n            listToShuffle.add(0, song)\n        } else {\n            listToShuffle.shuffle()\n        }\n    }" ],
  "VinylMusicPlayer/372" : [ "@Override\r\npublic void onRepeatModeChanged(int repeatMode) {\r\n    for (EventListener eventListener : this) {\r\n        eventListener.onRepeatModeChanged(repeatMode);\r\n    }\r\n}\n--------------------------------------------------\n", "import java.util.List\n@Override\r\npublic void onRepeatModeChanged(int repeatMode) {\r\n    for (EventListener eventListener : this) {\r\n        eventListener.onRepeatModeChanged(repeatMode);\r\n    }\r\n}" ],
  "VinylMusicPlayer/371" : [ "{\n        binding.shuffleButton.setOnClickListener { MusicPlayerRemote.toggleShuffleMode() }\n    }\n--------------------------------------------------\n        if (musicService != null) {\n            musicService?.toggleShuffle()\n            return true", "import org.koin.java.KoinJavaComponent.get\nfun toggleShuffle() {\n        if (getShuffleMode() == SHUFFLE_MODE_NONE) {\n            setShuffleMode(SHUFFLE_MODE_SHUFFLE)\n        } else {\n            setShuffleMode(SHUFFLE_MODE_NONE)\n        }\n    }\nimport org.koin.java.KoinJavaComponent.get" ],
  "Android-Password-Store/13" : [ "notifyChange()", "import com.fsck.k9.DI\nprivate fun notifyChange() {\r\n        val messageListRepository = DI.get<MessageListRepository>()\r\n        messageListRepository.notifyMessageListChanged(accountUuid)\r\n    }\nImport(names=[com, fsck, k9, DI], wildcard=false, alias=null)" ],
  "Android-Password-Store/15" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Android-Password-Store/16" : [ "        } else {\n            messageHelper.getSenderDisplayName(displayAddress)\r\n        }\n--------------------------------------------------\n        } else {\n            messageHelper.getSenderDisplayName(displayAddress).toString()\r\n        }", "import com.fsck.k9.mail.Address\nimport com.fsck.k9.K9.isShowContactName\nfun getSenderDisplayName(address: Address?): CharSequence {\r\n        if (address == null) {\r\n            return resourceProvider.contactUnknownSender()\r\n        }\r\n        val repository = if (isShowContactName) contactRepository else null\r\n        return toFriendly(address, repository)\r\n    }\nimport com.fsck.k9.K9.isShowContactName\nimport com.fsck.k9.mail.Address" ],
  "Android-Password-Store/17" : [ "val files = listBackupFiles()", "import java.io.File\nprivate fun listBackupFiles(): ArrayList<File> {\r\n        val files = ArrayList<File>()\r\n        for (path in basedir.list()!!) {\r\n            files.add(File(\"${basedir.path}/$path\"))\r\n        }\r\n        return files\r\n    }" ],
  "VinylMusicPlayer/378" : [ "super.onReset()", "override fun onReset() {\n        super.onReset()\n        // Ensure the loader is stopped\n        onStopLoading()\n        this.mData = null\n    }" ],
  "Android-Password-Store/18" : [ "cover.byteSize()", "import org.videolan.vlc.R\nimport android.os.Build\nimport android.graphics.Bitmap\nfun Bitmap.byteSize(): Int {\r\n    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) {\r\n        return allocationByteCount\r\n    }\r\n    return rowBytes * height\r\n}\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)\nImport(names=[android, os, Build], wildcard=false, alias=null)" ],
  "Android-Password-Store/19" : [ "", "import javax.inject.Singleton\nimport voice.common.DispatcherProvider\nimport kotlinx.coroutines.Dispatchers\nimport dagger.Provides\n @Provides\r\n  @Singleton\r\n  fun dispatcherProvider(): DispatcherProvider {\r\n    return DispatcherProvider(\r\n      main = Dispatchers.Main,\r\n      io = Dispatchers.IO,\r\n    )\r\n  }\nimport dagger.Provides\nimport kotlinx.coroutines.Dispatchers\nimport voice.common.DispatcherProvider\nimport javax.inject.Singleton" ],
  "VinylMusicPlayer/379" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n@NonNull\r\npublic static synchronized HistoryStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new HistoryStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "VinylMusicPlayer/373" : [ "MusicPlayerRemote.cycleRepeatMode()", "fun cycleRepeatMode() {\n        repeatMode = when (repeatMode) {\n            REPEAT_MODE_NONE -> REPEAT_MODE_ALL\n            REPEAT_MODE_ALL -> REPEAT_MODE_THIS\n            else -> REPEAT_MODE_NONE\n        }\n    }" ],
  "Iconify/10" : [ "override fun onStop() {\n    super.onStop()\n    preferenceScreen.sharedPreferences!!.unregisterOnSharedPreferenceChangeListener(this)\n}", "import androidx.preference.Preference\noverride fun onStart() {\r\n        super.onStart()\r\n        preferenceScreen.sharedPreferences!!.registerOnSharedPreferenceChangeListener(this)\r\n    }" ],
  "Iconify/11" : [ "override fun onStart() {\n    super.onStart()\n    preferenceScreen.sharedPreferences!!.registerOnSharedPreferenceChangeListener(this)\n}", "import androidx.preference.Preference\noverride fun onStop() {\r\n        super.onStop()\r\n        preferenceScreen.sharedPreferences!!\r\n                .unregisterOnSharedPreferenceChangeListener(this)\r\n    }" ],
  "Iconify/12" : [ "", "import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        prepareLocaleList()\r\n        setupTheme()\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/361" : [ "        }\n        rePosition(position)\n        notifyChange(QUEUE_CHANGED)\n--------------------------------------------------\n            playingQueue.removeAt(deletePosition)\n            rePosition(deletePosition)\n        }\n--------------------------------------------------\n            originalPlayingQueue.removeAt(originalDeletePosition)\n            rePosition(originalDeletePosition)\n        }", "import org.koin.java.KoinJavaComponent.get\nprivate fun rePosition(deletedPosition: Int) {\n        val currentPosition = getPosition()\n        if (deletedPosition < currentPosition) {\n            position = currentPosition - 1\n        } else if (deletedPosition == currentPosition) {\n            if (playingQueue.size > deletedPosition) {\n                setPosition(position)\n            } else {\n                setPosition(position - 1)\n            }\n        }\n    }\nimport org.koin.java.KoinJavaComponent.get" ],
  "Android-Password-Store/23" : [ "playlistModel.getPlaylistPosition(position, item)", "import org.videolan.medialibrary.interfaces.media.MediaWrapper\nfun getPlaylistPosition(position: Int, media: MediaWrapper): Int {\r\n        val list = originalDataset ?: dataset.value\r\n        if (position in 0 until list.size && list[position] == media) return position\r\n        else {\r\n            for ((index, item) in list.withIndex()) if (item == media) {\r\n                return index\r\n            }\r\n        }\r\n        return -1\r\n    }\nImport(names=[org, videolan, medialibrary, interfaces, media, MediaWrapper], wildcard=false, alias=null)" ],
  "Android-Password-Store/25" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Verify storage permission\r\n    verifyStoragePermission();\r\n    // Verify notification permission\r\n    verifyNotificationPermission();\r\n    ////////////////\r\n    // Setup theme\r\n    ////////////////\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    ///////////////////////////\r\n    // Setup main application\r\n    ///////////////////////////\r\n    setupApplication();\r\n    //////////////////\r\n    // Setup database\r\n    //////////////////\r\n    setupDatabase();\r\n    //////////////////\r\n    // Setup backup\r\n    //////////////////\r\n    setupBackup();\r\n    /////////////////\r\n    // Setup toolbar\r\n    ////////////////\r\n    setupToolBar();\r\n    ////////////////////\r\n    // Setup status bar\r\n    ///////////////////\r\n    setupStatusBar();\r\n    ////////////////////\r\n    // Setup animation\r\n    ///////////////////\r\n    setupAnimation();\r\n    ///////////////////////////\r\n    // Setup navigation drawer\r\n    //////////////////////////\r\n    setupNavigationDrawer(savedInstanceState);\r\n    ///////////////////////\r\n    // Setup recycler view\r\n    ///////////////////////\r\n    setupRecyclerView();\r\n    /////////////\r\n    // Setup FAB\r\n    /////////////\r\n    setupFAB();\r\n    ///////////////////////\r\n    // Setup file observer\r\n    ///////////////////////\r\n    setupFileObserver();\r\n    ////////////////\r\n    // Setup mirror\r\n    ////////////////\r\n    setupMirror();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    ///////////////////////\r\n    // Apply theme\r\n    ///////////////////////\r\n    applyTheme();\r\n    /////////////////////\r\n    // Setup animation\r\n    /////////////////////\r\n    setupAnimation();\r\n    //////////////////////////\r\n    // Setup the startup list\r\n    //////////////////////////\r\n    setupStartupList();\r\n    ////////////////////////////\r\n    // Setup local find history\r\n    ////////////////////////////\r\n    setupLocalFindHistory();\r\n    /////////////////////////\r\n    // Setup process text\r\n    /////////////////////////\r\n    setupProcessText();\r\n    ///////////////////\r\n    // Handle intent\r\n    ///////////////////\r\n    handleIntent(getIntent());\r\n}\n--------------------------------------------------\n", "// Setup main application\r\nprivate void setupApplication() {\r\n    mApp = (DBApplication) getApplication();\r\n    // Self reference\r\n    main_activity = this;\r\n}" ],
  "VinylMusicPlayer/366" : [ "private void saveCache() {\r\n    if (savePostFeedScrolledPosition && postType == PostPagingSource.TYPE_FRONT_PAGE && sortType != null && sortType.getType() == SortType.Type.BEST && mAdapter != null) {\r\n        Post currentPost = mAdapter.getItemByPosition(maxPosition);\r\n        if (currentPost != null) {\r\n            String accountNameForCache = accountName.equals(Account.ANONYMOUS_ACCOUNT) ? SharedPreferencesUtils.FRONT_PAGE_SCROLLED_POSITION_ANONYMOUS : accountName;\r\n            String key = accountNameForCache + SharedPreferencesUtils.FRONT_PAGE_SCROLLED_POSITION_FRONT_PAGE_BASE;\r\n            String value = currentPost.getFullName();\r\n            mPostFeedScrolledPositionSharedPreferences.edit().putString(key, value).apply();\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import ml.docilealligator.infinityforreddit.post.Post;\r\nimport ml.docilealligator.infinityforreddit.post.Post\nimport androidx.annotation.Nullable\n@Nullable\r\npublic Post getItemByPosition(int position) {\r\n    if (position >= 0 && super.getItemCount() > position) {\r\n        return super.getItem(position);\r\n    }\r\n    return null;\r\n}" ],
  "VinylMusicPlayer/363" : [ "@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    if (holder instanceof CommentBaseViewHolder) {\r\n        Comment comment = getCurrentComment(position);\r\n        if (comment != null) {\r\n            if (mIsSingleCommentThreadMode && comment.getId().equals(mSingleCommentId)) {\r\n                holder.itemView.setBackgroundColor(mSingleCommentThreadBackgroundColor);\r\n            }\r\n            String authorPrefixed = \"u/\" + comment.getAuthor();\r\n            ((CommentBaseViewHolder) holder).authorTextView.setText(authorPrefixed);\r\n            if (comment.getAuthorFlairHTML() != null && !comment.getAuthorFlairHTML().equals(\"\")) {\r\n                ((CommentBaseViewHolder) holder).authorFlairTextView.setVisibility(View.VISIBLE);\r\n                Utils.setHTMLWithImageToTextView(((CommentBaseViewHolder) holder).authorFlairTextView, comment.getAuthorFlairHTML(), true);\r\n            } else if (comment.getAuthorFlair() != null && !comment.getAuthorFlair().equals(\"\")) {\r\n                ((CommentBaseViewHolder) holder).authorFlairTextView.setVisibility(View.VISIBLE);\r\n                ((CommentBaseViewHolder) holder).authorFlairTextView.setText(comment.getAuthorFlair());\r\n            }\r\n            if (comment.isSubmitter()) {\r\n                ((CommentBaseViewHolder) holder).authorTextView.setTextColor(mSubmitterColor);\r\n                Drawable submitterDrawable = Utils.getTintedDrawable(mActivity, R.drawable.ic_mic_14dp, mSubmitterColor);\r\n                ((CommentBaseViewHolder) holder).authorTextView.setCompoundDrawablesWithIntrinsicBounds(submitterDrawable, null, null, null);\r\n            } else if (comment.isModerator()) {\r\n                ((CommentBaseViewHolder) holder).authorTextView.setTextColor(mModeratorColor);\r\n                Drawable moderatorDrawable = Utils.getTintedDrawable(mActivity, R.drawable.ic_verified_user_14dp, mModeratorColor);\r\n                ((CommentBaseViewHolder) holder).authorTextView.setCompoundDrawablesWithIntrinsicBounds(moderatorDrawable, null, null, null);\r\n            } else if (comment.getAuthor().equals(mAccountName)) {\r\n                ((CommentBaseViewHolder) holder).authorTextView.setTextColor(mCurrentUserColor);\r\n                Drawable currentUserDrawable = Utils.getTintedDrawable(mActivity, R.drawable.ic_current_user_14dp, mCurrentUserColor);\r\n                ((CommentBaseViewHolder) holder).authorTextView.setCompoundDrawablesWithIntrinsicBounds(currentUserDrawable, null, null, null);\r\n            }\r\n            if (comment.getAuthorIconUrl() == null) {\r\n                mFragment.loadIcon(comment.getAuthor(), (authorName, iconUrl) -> {\r\n                    if (authorName.equals(comment.getAuthor())) {\r\n                        comment.setAuthorIconUrl(iconUrl);\r\n                    }\r\n                    Comment currentComment = getCurrentComment(holder);\r\n                    if (currentComment != null && authorName.equals(currentComment.getAuthor())) {\r\n                        mGlide.load(iconUrl).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0))).error(mGlide.load(R.drawable.subreddit_default_icon).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0)))).into(((CommentBaseViewHolder) holder).authorIconImageView);\r\n                    }\r\n                });\r\n            } else {\r\n                mGlide.load(comment.getAuthorIconUrl()).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0))).error(mGlide.load(R.drawable.subreddit_default_icon).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0)))).into(((CommentBaseViewHolder) holder).authorIconImageView);\r\n            }\r\n            if (mShowElapsedTime) {\r\n                ((CommentBaseViewHolder) holder).commentTimeTextView.setText(Utils.getElapsedTime(mActivity, comment.getCommentTimeMillis()));\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).commentTimeTextView.setText(Utils.getFormattedTime(mLocale, comment.getCommentTimeMillis(), mTimeFormatPattern));\r\n            }\r\n            if (mCommentToolbarHidden) {\r\n                ((CommentBaseViewHolder) holder).bottomConstraintLayout.getLayoutParams().height = 0;\r\n                if (!mHideTheNumberOfVotes) {\r\n                    ((CommentBaseViewHolder) holder).topScoreTextView.setVisibility(View.VISIBLE);\r\n                }\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).bottomConstraintLayout.getLayoutParams().height = LinearLayout.LayoutParams.WRAP_CONTENT;\r\n                ((CommentBaseViewHolder) holder).topScoreTextView.setVisibility(View.GONE);\r\n            }\r\n            mEmoteCloseBracketInlineProcessor.setMediaMetadataMap(comment.getMediaMetadataMap());\r\n            mImageAndGifPlugin.setMediaMetadataMap(comment.getMediaMetadataMap());\r\n            ((CommentBaseViewHolder) holder).mMarkwonAdapter.setMarkdown(mCommentMarkwon, comment.getCommentMarkdown());\r\n            // noinspection NotifyDataSetChanged\r\n            ((CommentBaseViewHolder) holder).mMarkwonAdapter.notifyDataSetChanged();\r\n            if (!mHideTheNumberOfVotes) {\r\n                String commentText = \"\";\r\n                String topScoreText = \"\";\r\n                if (comment.isScoreHidden()) {\r\n                    commentText = mActivity.getString(R.string.hidden);\r\n                } else {\r\n                    commentText = Utils.getNVotes(mShowAbsoluteNumberOfVotes, comment.getScore() + comment.getVoteType());\r\n                    topScoreText = mActivity.getString(R.string.top_score, Utils.getNVotes(mShowAbsoluteNumberOfVotes, comment.getScore() + comment.getVoteType()));\r\n                }\r\n                ((CommentBaseViewHolder) holder).scoreTextView.setText(commentText);\r\n                ((CommentBaseViewHolder) holder).topScoreTextView.setText(topScoreText);\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).scoreTextView.setText(mActivity.getString(R.string.vote));\r\n            }\r\n            if (comment.isEdited()) {\r\n                ((CommentBaseViewHolder) holder).editedTextView.setVisibility(View.VISIBLE);\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).editedTextView.setVisibility(View.GONE);\r\n            }\r\n            ((CommentBaseViewHolder) holder).commentIndentationView.setShowOnlyOneDivider(mShowOnlyOneCommentLevelIndicator);\r\n            ((CommentBaseViewHolder) holder).commentIndentationView.setLevelAndColors(comment.getDepth(), verticalBlockColors);\r\n            if (comment.getDepth() >= mDepthThreshold) {\r\n                ((CommentBaseViewHolder) holder).saveButton.setVisibility(View.GONE);\r\n                ((CommentBaseViewHolder) holder).replyButton.setVisibility(View.GONE);\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).saveButton.setVisibility(View.VISIBLE);\r\n                ((CommentBaseViewHolder) holder).replyButton.setVisibility(View.VISIBLE);\r\n            }\r\n            if (comment.hasReply()) {\r\n                if (comment.getChildCount() > 0 && (mAlwaysShowChildCommentCount || !comment.isExpanded())) {\r\n                    ((CommentBaseViewHolder) holder).expandButton.setText(\"+\" + comment.getChildCount());\r\n                }\r\n                if (comment.isExpanded()) {\r\n                    ((CommentBaseViewHolder) holder).expandButton.setCompoundDrawablesWithIntrinsicBounds(collapseDrawable, null, null, null);\r\n                } else {\r\n                    ((CommentBaseViewHolder) holder).expandButton.setCompoundDrawablesWithIntrinsicBounds(expandDrawable, null, null, null);\r\n                }\r\n                ((CommentBaseViewHolder) holder).expandButton.setVisibility(View.VISIBLE);\r\n            }\r\n            switch(comment.getVoteType()) {\r\n                case Comment.VOTE_TYPE_UPVOTE:\r\n                    ((CommentBaseViewHolder) holder).upvoteButton.setIconResource(R.drawable.ic_upvote_filled_24dp);\r\n                    ((CommentBaseViewHolder) holder).upvoteButton.setIconTint(ColorStateList.valueOf(mUpvotedColor));\r\n                    ((CommentBaseViewHolder) holder).scoreTextView.setTextColor(mUpvotedColor);\r\n                    ((CommentBaseViewHolder) holder).topScoreTextView.setTextColor(mUpvotedColor);\r\n                    break;\r\n                case Comment.VOTE_TYPE_DOWNVOTE:\r\n                    ((CommentBaseViewHolder) holder).downvoteButton.setIconResource(R.drawable.ic_downvote_filled_24dp);\r\n                    ((CommentBaseViewHolder) holder).downvoteButton.setIconTint(ColorStateList.valueOf(mDownvotedColor));\r\n                    ((CommentBaseViewHolder) holder).scoreTextView.setTextColor(mDownvotedColor);\r\n                    ((CommentBaseViewHolder) holder).topScoreTextView.setTextColor(mDownvotedColor);\r\n                    break;\r\n            }\r\n            if (mPost.isArchived()) {\r\n                ((CommentBaseViewHolder) holder).replyButton.setIconTint(ColorStateList.valueOf(mVoteAndReplyUnavailableVoteButtonColor));\r\n                ((CommentBaseViewHolder) holder).upvoteButton.setIconTint(ColorStateList.valueOf(mVoteAndReplyUnavailableVoteButtonColor));\r\n                ((CommentBaseViewHolder) holder).scoreTextView.setTextColor(mVoteAndReplyUnavailableVoteButtonColor);\r\n                ((CommentBaseViewHolder) holder).downvoteButton.setIconTint(ColorStateList.valueOf(mVoteAndReplyUnavailableVoteButtonColor));\r\n            }\r\n            if (mPost.isLocked()) {\r\n                ((CommentBaseViewHolder) holder).replyButton.setIconTint(ColorStateList.valueOf(mVoteAndReplyUnavailableVoteButtonColor));\r\n            }\r\n            if (comment.isSaved()) {\r\n                ((CommentBaseViewHolder) holder).saveButton.setIconResource(R.drawable.ic_bookmark_grey_24dp);\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).saveButton.setIconResource(R.drawable.ic_bookmark_border_grey_24dp);\r\n            }\r\n            if (position == mSearchCommentIndex) {\r\n                holder.itemView.setBackgroundColor(Color.parseColor(\"#03A9F4\"));\r\n            }\r\n            if (mShowCommentDivider) {\r\n                if (mDividerType == DIVIDER_PARENT && comment.getDepth() == 0) {\r\n                    RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) holder.itemView.getLayoutParams();\r\n                    params.setMargins(0, (int) Utils.convertDpToPixel(16, mActivity), 0, 0);\r\n                }\r\n            }\r\n        }\r\n    } else if (holder instanceof CommentFullyCollapsedViewHolder) {\r\n        Comment comment = getCurrentComment(position);\r\n        if (comment != null) {\r\n            String authorWithPrefix = \"u/\" + comment.getAuthor();\r\n            ((CommentFullyCollapsedViewHolder) holder).usernameTextView.setText(authorWithPrefix);\r\n            if (comment.getAuthorIconUrl() == null) {\r\n                mFragment.loadIcon(comment.getAuthor(), (authorName, iconUrl) -> {\r\n                    if (authorName.equals(comment.getAuthor())) {\r\n                        comment.setAuthorIconUrl(iconUrl);\r\n                    }\r\n                    Comment currentComment = getCurrentComment(holder);\r\n                    if (currentComment != null && authorName.equals(currentComment.getAuthor())) {\r\n                        mGlide.load(iconUrl).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0))).error(mGlide.load(R.drawable.subreddit_default_icon).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0)))).into(((CommentFullyCollapsedViewHolder) holder).authorIconImageView);\r\n                    }\r\n                });\r\n            } else {\r\n                mGlide.load(comment.getAuthorIconUrl()).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0))).error(mGlide.load(R.drawable.subreddit_default_icon).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0)))).into(((CommentFullyCollapsedViewHolder) holder).authorIconImageView);\r\n            }\r\n            if (comment.getChildCount() > 0) {\r\n                ((CommentFullyCollapsedViewHolder) holder).childCountTextView.setVisibility(View.VISIBLE);\r\n                ((CommentFullyCollapsedViewHolder) holder).childCountTextView.setText(\"+\" + comment.getChildCount());\r\n            } else {\r\n                ((CommentFullyCollapsedViewHolder) holder).childCountTextView.setVisibility(View.GONE);\r\n            }\r\n            if (mShowElapsedTime) {\r\n                ((CommentFullyCollapsedViewHolder) holder).commentTimeTextView.setText(Utils.getElapsedTime(mActivity, comment.getCommentTimeMillis()));\r\n            } else {\r\n                ((CommentFullyCollapsedViewHolder) holder).commentTimeTextView.setText(Utils.getFormattedTime(mLocale, comment.getCommentTimeMillis(), mTimeFormatPattern));\r\n            }\r\n            if (!comment.isScoreHidden() && !mHideTheNumberOfVotes) {\r\n                ((CommentFullyCollapsedViewHolder) holder).scoreTextView.setText(mActivity.getString(R.string.top_score, Utils.getNVotes(mShowAbsoluteNumberOfVotes, comment.getScore() + comment.getVoteType())));\r\n            } else if (mHideTheNumberOfVotes) {\r\n                ((CommentFullyCollapsedViewHolder) holder).scoreTextView.setText(mActivity.getString(R.string.vote));\r\n            } else {\r\n                ((CommentFullyCollapsedViewHolder) holder).scoreTextView.setText(mActivity.getString(R.string.hidden));\r\n            }\r\n            ((CommentFullyCollapsedViewHolder) holder).commentIndentationView.setShowOnlyOneDivider(mShowOnlyOneCommentLevelIndicator);\r\n            ((CommentFullyCollapsedViewHolder) holder).commentIndentationView.setLevelAndColors(comment.getDepth(), verticalBlockColors);\r\n            if (mShowCommentDivider) {\r\n                if (mDividerType == DIVIDER_PARENT && comment.getDepth() == 0) {\r\n                    RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) holder.itemView.getLayoutParams();\r\n                    params.setMargins(0, (int) Utils.convertDpToPixel(16, mActivity), 0, 0);\r\n                }\r\n            }\r\n        }\r\n    } else if (holder instanceof LoadMoreChildCommentsViewHolder) {\r\n        Comment placeholder;\r\n        placeholder = mIsSingleCommentThreadMode ? mVisibleComments.get(holder.getBindingAdapterPosition() - 1) : mVisibleComments.get(holder.getBindingAdapterPosition());\r\n        ((LoadMoreChildCommentsViewHolder) holder).commentIndentationView.setShowOnlyOneDivider(mShowOnlyOneCommentLevelIndicator);\r\n        ((LoadMoreChildCommentsViewHolder) holder).commentIndentationView.setLevelAndColors(placeholder.getDepth(), verticalBlockColors);\r\n        if (placeholder.getPlaceholderType() == Comment.PLACEHOLDER_LOAD_MORE_COMMENTS) {\r\n            if (placeholder.isLoadingMoreChildren()) {\r\n                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.loading);\r\n            } else if (placeholder.isLoadMoreChildrenFailed()) {\r\n                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments_failed);\r\n            } else {\r\n                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments);\r\n            }\r\n        } else {\r\n            ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_continue_thread);\r\n        }\r\n        if (placeholder.getPlaceholderType() == Comment.PLACEHOLDER_LOAD_MORE_COMMENTS) {\r\n            ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setOnClickListener(view -> {\r\n                int commentPosition = mIsSingleCommentThreadMode ? holder.getBindingAdapterPosition() - 1 : holder.getBindingAdapterPosition();\r\n                int parentPosition = getParentPosition(commentPosition);\r\n                if (parentPosition >= 0) {\r\n                    Comment parentComment = mVisibleComments.get(parentPosition);\r\n                    mVisibleComments.get(commentPosition).setLoadingMoreChildren(true);\r\n                    mVisibleComments.get(commentPosition).setLoadMoreChildrenFailed(false);\r\n                    ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.loading);\r\n                    Retrofit retrofit = mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? mRetrofit : mOauthRetrofit;\r\n                    SortType.Type sortType = mCommentRecyclerViewAdapterCallback.getSortType();\r\n                    FetchComment.fetchMoreComment(mExecutor, new Handler(), retrofit, mAccessToken, mAccountName, parentComment.getMoreChildrenIds(), mExpandChildren, mPost.getFullName(), sortType, new FetchComment.FetchMoreCommentListener() {\r\n\r\n                        @Override\r\n                        public void onFetchMoreCommentSuccess(ArrayList<Comment> topLevelComments, ArrayList<Comment> expandedComments, ArrayList<String> moreChildrenIds) {\r\n                            if (mVisibleComments.size() > parentPosition && parentComment.getFullName().equals(mVisibleComments.get(parentPosition).getFullName())) {\r\n                                if (mVisibleComments.get(parentPosition).isExpanded()) {\r\n                                    if (!moreChildrenIds.isEmpty()) {\r\n                                        mVisibleComments.get(parentPosition).setMoreChildrenIds(moreChildrenIds);\r\n                                        mVisibleComments.get(parentPosition).getChildren().get(mVisibleComments.get(parentPosition).getChildren().size() - 1).setLoadingMoreChildren(false);\r\n                                        mVisibleComments.get(parentPosition).getChildren().get(mVisibleComments.get(parentPosition).getChildren().size() - 1).setLoadMoreChildrenFailed(false);\r\n                                        int placeholderPosition = findLoadMoreCommentsPlaceholderPosition(parentComment.getFullName(), commentPosition);\r\n                                        if (placeholderPosition != -1) {\r\n                                            mVisibleComments.get(placeholderPosition).setLoadingMoreChildren(false);\r\n                                            mVisibleComments.get(placeholderPosition).setLoadMoreChildrenFailed(false);\r\n                                            ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments);\r\n                                            mVisibleComments.addAll(placeholderPosition, expandedComments);\r\n                                            if (mIsSingleCommentThreadMode) {\r\n                                                notifyItemRangeInserted(placeholderPosition + 1, expandedComments.size());\r\n                                            } else {\r\n                                                notifyItemRangeInserted(placeholderPosition, expandedComments.size());\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        mVisibleComments.get(parentPosition).getChildren().remove(mVisibleComments.get(parentPosition).getChildren().size() - 1);\r\n                                        mVisibleComments.get(parentPosition).removeMoreChildrenIds();\r\n                                        int placeholderPosition = findLoadMoreCommentsPlaceholderPosition(parentComment.getFullName(), commentPosition);\r\n                                        if (placeholderPosition != -1) {\r\n                                            mVisibleComments.remove(placeholderPosition);\r\n                                            if (mIsSingleCommentThreadMode) {\r\n                                                notifyItemRemoved(placeholderPosition + 1);\r\n                                            } else {\r\n                                                notifyItemRemoved(placeholderPosition);\r\n                                            }\r\n                                            mVisibleComments.addAll(placeholderPosition, expandedComments);\r\n                                            if (mIsSingleCommentThreadMode) {\r\n                                                notifyItemRangeInserted(placeholderPosition + 1, expandedComments.size());\r\n                                            } else {\r\n                                                notifyItemRangeInserted(placeholderPosition, expandedComments.size());\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (mVisibleComments.get(parentPosition).hasReply() && moreChildrenIds.isEmpty()) {\r\n                                        mVisibleComments.get(parentPosition).getChildren().remove(mVisibleComments.get(parentPosition).getChildren().size() - 1);\r\n                                        mVisibleComments.get(parentPosition).removeMoreChildrenIds();\r\n                                    }\r\n                                }\r\n                                mVisibleComments.get(parentPosition).addChildren(topLevelComments);\r\n                                if (mIsSingleCommentThreadMode) {\r\n                                    notifyItemChanged(parentPosition + 1);\r\n                                } else {\r\n                                    notifyItemChanged(parentPosition);\r\n                                }\r\n                            } else {\r\n                                for (int i = 0; i < mVisibleComments.size(); i++) {\r\n                                    if (mVisibleComments.get(i).getFullName().equals(parentComment.getFullName())) {\r\n                                        if (mVisibleComments.get(i).isExpanded()) {\r\n                                            int placeholderPositionHint = i + mVisibleComments.get(i).getChildren().size();\r\n                                            int placeholderPosition = findLoadMoreCommentsPlaceholderPosition(parentComment.getFullName(), placeholderPositionHint);\r\n                                            if (placeholderPosition != -1) {\r\n                                                mVisibleComments.get(placeholderPosition).setLoadingMoreChildren(false);\r\n                                                mVisibleComments.get(placeholderPosition).setLoadMoreChildrenFailed(false);\r\n                                                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments);\r\n                                                mVisibleComments.addAll(placeholderPosition, expandedComments);\r\n                                                if (mIsSingleCommentThreadMode) {\r\n                                                    notifyItemRangeInserted(placeholderPosition + 1, expandedComments.size());\r\n                                                } else {\r\n                                                    notifyItemRangeInserted(placeholderPosition, expandedComments.size());\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        mVisibleComments.get(i).getChildren().get(mVisibleComments.get(i).getChildren().size() - 1).setLoadingMoreChildren(false);\r\n                                        mVisibleComments.get(i).getChildren().get(mVisibleComments.get(i).getChildren().size() - 1).setLoadMoreChildrenFailed(false);\r\n                                        mVisibleComments.get(i).addChildren(topLevelComments);\r\n                                        if (mIsSingleCommentThreadMode) {\r\n                                            notifyItemChanged(i + 1);\r\n                                        } else {\r\n                                            notifyItemChanged(i);\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFetchMoreCommentFailed() {\r\n                            int currentParentPosition = findCommentPosition(parentComment.getFullName(), parentPosition);\r\n                            if (currentParentPosition == -1) {\r\n                                // note: returning here is probably a mistake, because\r\n                                // parent is just not visible, but it can still exist in the comments tree.\r\n                                return;\r\n                            }\r\n                            Comment currentParentComment = mVisibleComments.get(currentParentPosition);\r\n                            if (currentParentComment.isExpanded()) {\r\n                                int placeholderPositionHint = currentParentPosition + currentParentComment.getChildren().size();\r\n                                int placeholderPosition = findLoadMoreCommentsPlaceholderPosition(parentComment.getFullName(), placeholderPositionHint);\r\n                                if (placeholderPosition != -1) {\r\n                                    mVisibleComments.get(placeholderPosition).setLoadingMoreChildren(false);\r\n                                    mVisibleComments.get(placeholderPosition).setLoadMoreChildrenFailed(true);\r\n                                }\r\n                                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments_failed);\r\n                            }\r\n                            currentParentComment.getChildren().get(currentParentComment.getChildren().size() - 1).setLoadingMoreChildren(false);\r\n                            currentParentComment.getChildren().get(currentParentComment.getChildren().size() - 1).setLoadMoreChildrenFailed(true);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setOnClickListener(view -> {\r\n                Comment comment = getCurrentComment(holder);\r\n                if (comment != null) {\r\n                    Intent intent = new Intent(mActivity, ViewPostDetailActivity.class);\r\n                    intent.putExtra(ViewPostDetailActivity.EXTRA_POST_DATA, mPost);\r\n                    intent.putExtra(ViewPostDetailActivity.EXTRA_SINGLE_COMMENT_ID, comment.getParentId());\r\n                    intent.putExtra(ViewPostDetailActivity.EXTRA_CONTEXT_NUMBER, \"0\");\r\n                    mActivity.startActivity(intent);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import ml.docilealligator.infinityforreddit.comment.Comment\nprivate int getParentPosition(int position) {\r\n    if (position >= 0 && position < mVisibleComments.size()) {\r\n        int childDepth = mVisibleComments.get(position).getDepth();\r\n        for (int i = position; i >= 0; i--) {\r\n            if (mVisibleComments.get(i).getDepth() < childDepth) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}" ],
  "VinylMusicPlayer/365" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/364" : [ "        if (musicService != null) {\n            musicService!!.removeSongs(songs)\n            return true", "import code.name.monkey.retromusic.model.Song\nfun removeSongs(songs: List<Song>) {\n        for (song in songs) {\n            removeSongImpl(song)\n        }\n        notifyChange(QUEUE_CHANGED)\n    }\nimport code.name.monkey.retromusic.model.Song" ],
  "fcitx5-android/191" : [ "updateEmptyState()\n--------------------------------------------------\nupdateEmptyState(episodes.isEmpty(), !model.searchData.value?.searchTerm.isNullOrEmpty())\n--------------------------------------------------\nupdateEmptyState(shows.isNullOrEmpty(), !model.searchTerm.value.isNullOrEmpty())", "import android.view.View\nprotected fun updateEmptyState(hasNoResults: Boolean, hasQuery: Boolean) {\r\n        if (hasNoResults && hasQuery) {\r\n            emptyView.visibility = View.VISIBLE\r\n            gridView.visibility = View.GONE\r\n        } else {\r\n            emptyView.visibility = View.GONE\r\n            gridView.visibility = View.VISIBLE\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "fcitx5-android/190" : [ "private void addShortcut(Feed feed, Bitmap bitmap) {\r\n    Intent intent = new Intent(this, MainActivity.class);\r\n    intent.setAction(Intent.ACTION_MAIN);\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n    intent.putExtra(EXTRA_FEED_ID, feed.getId());\r\n    String id = \"subscription-\" + feed.getId();\r\n    IconCompat icon;\r\n    if (bitmap != null) {\r\n        icon = IconCompat.createWithAdaptiveBitmap(bitmap);\r\n    } else {\r\n        icon = IconCompat.createWithResource(this, R.drawable.ic_subscriptions_shortcut);\r\n    }\r\n    ShortcutInfoCompat shortcut = new ShortcutInfoCompat.Builder(this, id).setShortLabel(feed.getTitle()).setLongLabel(feed.getFeedTitle()).setIntent(intent).setIcon(icon).build();\r\n    setResult(RESULT_OK, ShortcutManagerCompat.createShortcutResultIntent(this, shortcut));\r\n    finish();\r\n}\n--------------------------------------------------\nprivate void toggleSelectAllIcon(MenuItem selectAllItem, boolean allSelected) {\r\n    if (allSelected) {\r\n        selectAllItem.setIcon(R.drawable.ic_select_none);\r\n        selectAllItem.setTitle(R.string.deselect_all_label);\r\n    } else {\r\n        selectAllItem.setIcon(R.drawable.ic_select_all);\r\n        selectAllItem.setTitle(R.string.select_all_label);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.DrawableRes;\r\nimport de.danoeh.antennapod.R\nimport android.view.View\nimport androidx.annotation.DrawableRes\npublic void setIcon(@DrawableRes int icon) {\r\n    ivIcon.setImageResource(icon);\r\n    ivIcon.setVisibility(View.VISIBLE);\r\n}" ],
  "Android-Password-Store/32" : [ "location = getLocalLyricOriginalFile(song.data)\n--------------------------------------------------\ngetLocalLyricOriginalFile(song.data)", "private fun getLocalLyricOriginalFile(path: String): File? {\n        val file = File(getLrcOriginalPath(path))\n        return if (file.exists()) {\n            file\n        } else {\n            null\n        }\n    }" ],
  "VinylMusicPlayer/350" : [ "@Override\r\npublic void onDismiss(DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    if (dismissListener != null)\r\n        dismissListener.onDismiss(dialog);\r\n}\n--------------------------------------------------\n@Override\r\npublic void onDismiss(DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    if (dismissListener != null)\r\n        dismissListener.onDismiss(dialog);\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport android.content.DialogInterface\nimport android.app.Dialog\n@Override\r\npublic void onDismiss(DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    if (dismissListener != null)\r\n        dismissListener.onDismiss(dialog);\r\n}" ],
  "Android-Password-Store/100" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport code.name.monkey.retromusic.App\nimport androidx.annotation.NonNull\nimport android.content.Context\n/**\r\n * @param context The {@link Context} to use\r\n * @return A new instance of this class.\r\n */\r\n@NonNull\r\npublic static synchronized MusicPlaybackQueueStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new MusicPlaybackQueueStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "Android-Password-Store/34" : [ "", "import java.io.File\nimport android.os.Environment\n @JvmStatic\r\n    fun getSDCardDir(relativePath: String): File? {\r\n        val parents = arrayOf(Environment.getExternalStorageDirectory())\r\n        return getDir(parents, relativePath)\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "Android-Password-Store/35" : [ "@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.bug_report_options, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    super.onCreateOptionsMenu(menu);\r\n    MenuInflater inflater = getMenuInflater();\r\n    inflater.inflate(R.menu.opml_selection_options, menu);\r\n    selectAll = menu.findItem(R.id.select_all_item);\r\n    deselectAll = menu.findItem(R.id.deselect_all_item);\r\n    deselectAll.setVisible(false);\r\n    return true;\r\n}\n--------------------------------------------------\n", "import android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport de.danoeh.antennapod.R\nimport android.view.MenuInflater\nimport android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    super.onCreateOptionsMenu(menu);\r\n    MenuInflater inflater = getMenuInflater();\r\n    inflater.inflate(R.menu.opml_selection_options, menu);\r\n    selectAll = menu.findItem(R.id.select_all_item);\r\n    deselectAll = menu.findItem(R.id.deselect_all_item);\r\n    deselectAll.setVisible(false);\r\n    return true;\r\n}" ],
  "Android-Password-Store/37" : [ "@Override\r\npublic void init(Bundle bundle) {\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\r\n    mLocalRepoPath = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    if (Build.VERSION.SDK_INT >= 23) {\r\n        if ((mLocalRepoPath.length() > 0) || (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED))\r\n            launchMainActivity();\r\n    } else {\r\n        if (mLocalRepoPath.length() > 0)\r\n            launchMainActivity();\r\n    }\r\n    // Intro screens\r\n    AppIntroFragment slide1 = AppIntroFragment.newInstance(getResources().getString(R.string.intro_getting_started), getResources().getString(R.string.intro_getting_started_desc), R.drawable.intro_notepad, Color.parseColor(\"#0277BD\"));\r\n    AppIntroFragment slide2 = AppIntroFragment.newInstance(getResources().getString(R.string.intro_local_repo), getResources().getString(R.string.intro_local_repo_desc), R.drawable.intro_brick, Color.parseColor(\"#0277BD\"));\r\n    addSlide(slide1);\r\n    addSlide(slide2);\r\n}\n--------------------------------------------------\n@Override\r\npublic void init(Bundle bundle) {\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\r\n    mLocalRepoPath = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    if (Build.VERSION.SDK_INT >= 23) {\r\n        if ((mLocalRepoPath.length() > 0) || (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED))\r\n            launchMainActivity();\r\n    } else {\r\n        if (mLocalRepoPath.length() > 0)\r\n            launchMainActivity();\r\n    }\r\n    // Intro screens\r\n    AppIntroFragment slide1 = AppIntroFragment.newInstance(getResources().getString(R.string.intro_getting_started), getResources().getString(R.string.intro_getting_started_desc), R.drawable.intro_notepad, Color.parseColor(\"#0277BD\"));\r\n    AppIntroFragment slide2 = AppIntroFragment.newInstance(getResources().getString(R.string.intro_local_repo), getResources().getString(R.string.intro_local_repo_desc), R.drawable.intro_brick, Color.parseColor(\"#0277BD\"));\r\n    addSlide(slide1);\r\n    addSlide(slide2);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\nprivate void launchMainActivity() {\r\n    Intent intent = new Intent(this, MainActivity.class);\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n    startActivity(intent);\r\n    finish();\r\n}" ],
  "VinylMusicPlayer/357" : [ "@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    if (holder instanceof CommentBaseViewHolder) {\r\n        Comment comment = getCurrentComment(position);\r\n        if (comment != null) {\r\n            if (mIsSingleCommentThreadMode && comment.getId().equals(mSingleCommentId)) {\r\n                holder.itemView.setBackgroundColor(mSingleCommentThreadBackgroundColor);\r\n            }\r\n            String authorPrefixed = \"u/\" + comment.getAuthor();\r\n            ((CommentBaseViewHolder) holder).authorTextView.setText(authorPrefixed);\r\n            if (comment.getAuthorFlairHTML() != null && !comment.getAuthorFlairHTML().equals(\"\")) {\r\n                ((CommentBaseViewHolder) holder).authorFlairTextView.setVisibility(View.VISIBLE);\r\n                Utils.setHTMLWithImageToTextView(((CommentBaseViewHolder) holder).authorFlairTextView, comment.getAuthorFlairHTML(), true);\r\n            } else if (comment.getAuthorFlair() != null && !comment.getAuthorFlair().equals(\"\")) {\r\n                ((CommentBaseViewHolder) holder).authorFlairTextView.setVisibility(View.VISIBLE);\r\n                ((CommentBaseViewHolder) holder).authorFlairTextView.setText(comment.getAuthorFlair());\r\n            }\r\n            if (comment.isSubmitter()) {\r\n                ((CommentBaseViewHolder) holder).authorTextView.setTextColor(mSubmitterColor);\r\n                Drawable submitterDrawable = Utils.getTintedDrawable(mActivity, R.drawable.ic_mic_14dp, mSubmitterColor);\r\n                ((CommentBaseViewHolder) holder).authorTextView.setCompoundDrawablesWithIntrinsicBounds(submitterDrawable, null, null, null);\r\n            } else if (comment.isModerator()) {\r\n                ((CommentBaseViewHolder) holder).authorTextView.setTextColor(mModeratorColor);\r\n                Drawable moderatorDrawable = Utils.getTintedDrawable(mActivity, R.drawable.ic_verified_user_14dp, mModeratorColor);\r\n                ((CommentBaseViewHolder) holder).authorTextView.setCompoundDrawablesWithIntrinsicBounds(moderatorDrawable, null, null, null);\r\n            } else if (comment.getAuthor().equals(mAccountName)) {\r\n                ((CommentBaseViewHolder) holder).authorTextView.setTextColor(mCurrentUserColor);\r\n                Drawable currentUserDrawable = Utils.getTintedDrawable(mActivity, R.drawable.ic_current_user_14dp, mCurrentUserColor);\r\n                ((CommentBaseViewHolder) holder).authorTextView.setCompoundDrawablesWithIntrinsicBounds(currentUserDrawable, null, null, null);\r\n            }\r\n            if (comment.getAuthorIconUrl() == null) {\r\n                mFragment.loadIcon(comment.getAuthor(), (authorName, iconUrl) -> {\r\n                    if (authorName.equals(comment.getAuthor())) {\r\n                        comment.setAuthorIconUrl(iconUrl);\r\n                    }\r\n                    Comment currentComment = getCurrentComment(holder);\r\n                    if (currentComment != null && authorName.equals(currentComment.getAuthor())) {\r\n                        mGlide.load(iconUrl).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0))).error(mGlide.load(R.drawable.subreddit_default_icon).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0)))).into(((CommentBaseViewHolder) holder).authorIconImageView);\r\n                    }\r\n                });\r\n            } else {\r\n                mGlide.load(comment.getAuthorIconUrl()).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0))).error(mGlide.load(R.drawable.subreddit_default_icon).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0)))).into(((CommentBaseViewHolder) holder).authorIconImageView);\r\n            }\r\n            if (mShowElapsedTime) {\r\n                ((CommentBaseViewHolder) holder).commentTimeTextView.setText(Utils.getElapsedTime(mActivity, comment.getCommentTimeMillis()));\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).commentTimeTextView.setText(Utils.getFormattedTime(mLocale, comment.getCommentTimeMillis(), mTimeFormatPattern));\r\n            }\r\n            if (mCommentToolbarHidden) {\r\n                ((CommentBaseViewHolder) holder).bottomConstraintLayout.getLayoutParams().height = 0;\r\n                if (!mHideTheNumberOfVotes) {\r\n                    ((CommentBaseViewHolder) holder).topScoreTextView.setVisibility(View.VISIBLE);\r\n                }\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).bottomConstraintLayout.getLayoutParams().height = LinearLayout.LayoutParams.WRAP_CONTENT;\r\n                ((CommentBaseViewHolder) holder).topScoreTextView.setVisibility(View.GONE);\r\n            }\r\n            mEmoteCloseBracketInlineProcessor.setMediaMetadataMap(comment.getMediaMetadataMap());\r\n            mImageAndGifPlugin.setMediaMetadataMap(comment.getMediaMetadataMap());\r\n            ((CommentBaseViewHolder) holder).mMarkwonAdapter.setMarkdown(mCommentMarkwon, comment.getCommentMarkdown());\r\n            // noinspection NotifyDataSetChanged\r\n            ((CommentBaseViewHolder) holder).mMarkwonAdapter.notifyDataSetChanged();\r\n            if (!mHideTheNumberOfVotes) {\r\n                String commentText = \"\";\r\n                String topScoreText = \"\";\r\n                if (comment.isScoreHidden()) {\r\n                    commentText = mActivity.getString(R.string.hidden);\r\n                } else {\r\n                    commentText = Utils.getNVotes(mShowAbsoluteNumberOfVotes, comment.getScore() + comment.getVoteType());\r\n                    topScoreText = mActivity.getString(R.string.top_score, Utils.getNVotes(mShowAbsoluteNumberOfVotes, comment.getScore() + comment.getVoteType()));\r\n                }\r\n                ((CommentBaseViewHolder) holder).scoreTextView.setText(commentText);\r\n                ((CommentBaseViewHolder) holder).topScoreTextView.setText(topScoreText);\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).scoreTextView.setText(mActivity.getString(R.string.vote));\r\n            }\r\n            if (comment.isEdited()) {\r\n                ((CommentBaseViewHolder) holder).editedTextView.setVisibility(View.VISIBLE);\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).editedTextView.setVisibility(View.GONE);\r\n            }\r\n            ((CommentBaseViewHolder) holder).commentIndentationView.setShowOnlyOneDivider(mShowOnlyOneCommentLevelIndicator);\r\n            ((CommentBaseViewHolder) holder).commentIndentationView.setLevelAndColors(comment.getDepth(), verticalBlockColors);\r\n            if (comment.getDepth() >= mDepthThreshold) {\r\n                ((CommentBaseViewHolder) holder).saveButton.setVisibility(View.GONE);\r\n                ((CommentBaseViewHolder) holder).replyButton.setVisibility(View.GONE);\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).saveButton.setVisibility(View.VISIBLE);\r\n                ((CommentBaseViewHolder) holder).replyButton.setVisibility(View.VISIBLE);\r\n            }\r\n            if (comment.hasReply()) {\r\n                if (comment.getChildCount() > 0 && (mAlwaysShowChildCommentCount || !comment.isExpanded())) {\r\n                    ((CommentBaseViewHolder) holder).expandButton.setText(\"+\" + comment.getChildCount());\r\n                }\r\n                if (comment.isExpanded()) {\r\n                    ((CommentBaseViewHolder) holder).expandButton.setCompoundDrawablesWithIntrinsicBounds(collapseDrawable, null, null, null);\r\n                } else {\r\n                    ((CommentBaseViewHolder) holder).expandButton.setCompoundDrawablesWithIntrinsicBounds(expandDrawable, null, null, null);\r\n                }\r\n                ((CommentBaseViewHolder) holder).expandButton.setVisibility(View.VISIBLE);\r\n            }\r\n            switch(comment.getVoteType()) {\r\n                case Comment.VOTE_TYPE_UPVOTE:\r\n                    ((CommentBaseViewHolder) holder).upvoteButton.setIconResource(R.drawable.ic_upvote_filled_24dp);\r\n                    ((CommentBaseViewHolder) holder).upvoteButton.setIconTint(ColorStateList.valueOf(mUpvotedColor));\r\n                    ((CommentBaseViewHolder) holder).scoreTextView.setTextColor(mUpvotedColor);\r\n                    ((CommentBaseViewHolder) holder).topScoreTextView.setTextColor(mUpvotedColor);\r\n                    break;\r\n                case Comment.VOTE_TYPE_DOWNVOTE:\r\n                    ((CommentBaseViewHolder) holder).downvoteButton.setIconResource(R.drawable.ic_downvote_filled_24dp);\r\n                    ((CommentBaseViewHolder) holder).downvoteButton.setIconTint(ColorStateList.valueOf(mDownvotedColor));\r\n                    ((CommentBaseViewHolder) holder).scoreTextView.setTextColor(mDownvotedColor);\r\n                    ((CommentBaseViewHolder) holder).topScoreTextView.setTextColor(mDownvotedColor);\r\n                    break;\r\n            }\r\n            if (mPost.isArchived()) {\r\n                ((CommentBaseViewHolder) holder).replyButton.setIconTint(ColorStateList.valueOf(mVoteAndReplyUnavailableVoteButtonColor));\r\n                ((CommentBaseViewHolder) holder).upvoteButton.setIconTint(ColorStateList.valueOf(mVoteAndReplyUnavailableVoteButtonColor));\r\n                ((CommentBaseViewHolder) holder).scoreTextView.setTextColor(mVoteAndReplyUnavailableVoteButtonColor);\r\n                ((CommentBaseViewHolder) holder).downvoteButton.setIconTint(ColorStateList.valueOf(mVoteAndReplyUnavailableVoteButtonColor));\r\n            }\r\n            if (mPost.isLocked()) {\r\n                ((CommentBaseViewHolder) holder).replyButton.setIconTint(ColorStateList.valueOf(mVoteAndReplyUnavailableVoteButtonColor));\r\n            }\r\n            if (comment.isSaved()) {\r\n                ((CommentBaseViewHolder) holder).saveButton.setIconResource(R.drawable.ic_bookmark_grey_24dp);\r\n            } else {\r\n                ((CommentBaseViewHolder) holder).saveButton.setIconResource(R.drawable.ic_bookmark_border_grey_24dp);\r\n            }\r\n            if (position == mSearchCommentIndex) {\r\n                holder.itemView.setBackgroundColor(Color.parseColor(\"#03A9F4\"));\r\n            }\r\n            if (mShowCommentDivider) {\r\n                if (mDividerType == DIVIDER_PARENT && comment.getDepth() == 0) {\r\n                    RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) holder.itemView.getLayoutParams();\r\n                    params.setMargins(0, (int) Utils.convertDpToPixel(16, mActivity), 0, 0);\r\n                }\r\n            }\r\n        }\r\n    } else if (holder instanceof CommentFullyCollapsedViewHolder) {\r\n        Comment comment = getCurrentComment(position);\r\n        if (comment != null) {\r\n            String authorWithPrefix = \"u/\" + comment.getAuthor();\r\n            ((CommentFullyCollapsedViewHolder) holder).usernameTextView.setText(authorWithPrefix);\r\n            if (comment.getAuthorIconUrl() == null) {\r\n                mFragment.loadIcon(comment.getAuthor(), (authorName, iconUrl) -> {\r\n                    if (authorName.equals(comment.getAuthor())) {\r\n                        comment.setAuthorIconUrl(iconUrl);\r\n                    }\r\n                    Comment currentComment = getCurrentComment(holder);\r\n                    if (currentComment != null && authorName.equals(currentComment.getAuthor())) {\r\n                        mGlide.load(iconUrl).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0))).error(mGlide.load(R.drawable.subreddit_default_icon).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0)))).into(((CommentFullyCollapsedViewHolder) holder).authorIconImageView);\r\n                    }\r\n                });\r\n            } else {\r\n                mGlide.load(comment.getAuthorIconUrl()).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0))).error(mGlide.load(R.drawable.subreddit_default_icon).apply(RequestOptions.bitmapTransform(new RoundedCornersTransformation(72, 0)))).into(((CommentFullyCollapsedViewHolder) holder).authorIconImageView);\r\n            }\r\n            if (comment.getChildCount() > 0) {\r\n                ((CommentFullyCollapsedViewHolder) holder).childCountTextView.setVisibility(View.VISIBLE);\r\n                ((CommentFullyCollapsedViewHolder) holder).childCountTextView.setText(\"+\" + comment.getChildCount());\r\n            } else {\r\n                ((CommentFullyCollapsedViewHolder) holder).childCountTextView.setVisibility(View.GONE);\r\n            }\r\n            if (mShowElapsedTime) {\r\n                ((CommentFullyCollapsedViewHolder) holder).commentTimeTextView.setText(Utils.getElapsedTime(mActivity, comment.getCommentTimeMillis()));\r\n            } else {\r\n                ((CommentFullyCollapsedViewHolder) holder).commentTimeTextView.setText(Utils.getFormattedTime(mLocale, comment.getCommentTimeMillis(), mTimeFormatPattern));\r\n            }\r\n            if (!comment.isScoreHidden() && !mHideTheNumberOfVotes) {\r\n                ((CommentFullyCollapsedViewHolder) holder).scoreTextView.setText(mActivity.getString(R.string.top_score, Utils.getNVotes(mShowAbsoluteNumberOfVotes, comment.getScore() + comment.getVoteType())));\r\n            } else if (mHideTheNumberOfVotes) {\r\n                ((CommentFullyCollapsedViewHolder) holder).scoreTextView.setText(mActivity.getString(R.string.vote));\r\n            } else {\r\n                ((CommentFullyCollapsedViewHolder) holder).scoreTextView.setText(mActivity.getString(R.string.hidden));\r\n            }\r\n            ((CommentFullyCollapsedViewHolder) holder).commentIndentationView.setShowOnlyOneDivider(mShowOnlyOneCommentLevelIndicator);\r\n            ((CommentFullyCollapsedViewHolder) holder).commentIndentationView.setLevelAndColors(comment.getDepth(), verticalBlockColors);\r\n            if (mShowCommentDivider) {\r\n                if (mDividerType == DIVIDER_PARENT && comment.getDepth() == 0) {\r\n                    RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) holder.itemView.getLayoutParams();\r\n                    params.setMargins(0, (int) Utils.convertDpToPixel(16, mActivity), 0, 0);\r\n                }\r\n            }\r\n        }\r\n    } else if (holder instanceof LoadMoreChildCommentsViewHolder) {\r\n        Comment placeholder;\r\n        placeholder = mIsSingleCommentThreadMode ? mVisibleComments.get(holder.getBindingAdapterPosition() - 1) : mVisibleComments.get(holder.getBindingAdapterPosition());\r\n        ((LoadMoreChildCommentsViewHolder) holder).commentIndentationView.setShowOnlyOneDivider(mShowOnlyOneCommentLevelIndicator);\r\n        ((LoadMoreChildCommentsViewHolder) holder).commentIndentationView.setLevelAndColors(placeholder.getDepth(), verticalBlockColors);\r\n        if (placeholder.getPlaceholderType() == Comment.PLACEHOLDER_LOAD_MORE_COMMENTS) {\r\n            if (placeholder.isLoadingMoreChildren()) {\r\n                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.loading);\r\n            } else if (placeholder.isLoadMoreChildrenFailed()) {\r\n                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments_failed);\r\n            } else {\r\n                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments);\r\n            }\r\n        } else {\r\n            ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_continue_thread);\r\n        }\r\n        if (placeholder.getPlaceholderType() == Comment.PLACEHOLDER_LOAD_MORE_COMMENTS) {\r\n            ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setOnClickListener(view -> {\r\n                int commentPosition = mIsSingleCommentThreadMode ? holder.getBindingAdapterPosition() - 1 : holder.getBindingAdapterPosition();\r\n                int parentPosition = getParentPosition(commentPosition);\r\n                if (parentPosition >= 0) {\r\n                    Comment parentComment = mVisibleComments.get(parentPosition);\r\n                    mVisibleComments.get(commentPosition).setLoadingMoreChildren(true);\r\n                    mVisibleComments.get(commentPosition).setLoadMoreChildrenFailed(false);\r\n                    ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.loading);\r\n                    Retrofit retrofit = mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? mRetrofit : mOauthRetrofit;\r\n                    SortType.Type sortType = mCommentRecyclerViewAdapterCallback.getSortType();\r\n                    FetchComment.fetchMoreComment(mExecutor, new Handler(), retrofit, mAccessToken, mAccountName, parentComment.getMoreChildrenIds(), mExpandChildren, mPost.getFullName(), sortType, new FetchComment.FetchMoreCommentListener() {\r\n\r\n                        @Override\r\n                        public void onFetchMoreCommentSuccess(ArrayList<Comment> topLevelComments, ArrayList<Comment> expandedComments, ArrayList<String> moreChildrenIds) {\r\n                            if (mVisibleComments.size() > parentPosition && parentComment.getFullName().equals(mVisibleComments.get(parentPosition).getFullName())) {\r\n                                if (mVisibleComments.get(parentPosition).isExpanded()) {\r\n                                    if (!moreChildrenIds.isEmpty()) {\r\n                                        mVisibleComments.get(parentPosition).setMoreChildrenIds(moreChildrenIds);\r\n                                        mVisibleComments.get(parentPosition).getChildren().get(mVisibleComments.get(parentPosition).getChildren().size() - 1).setLoadingMoreChildren(false);\r\n                                        mVisibleComments.get(parentPosition).getChildren().get(mVisibleComments.get(parentPosition).getChildren().size() - 1).setLoadMoreChildrenFailed(false);\r\n                                        int placeholderPosition = findLoadMoreCommentsPlaceholderPosition(parentComment.getFullName(), commentPosition);\r\n                                        if (placeholderPosition != -1) {\r\n                                            mVisibleComments.get(placeholderPosition).setLoadingMoreChildren(false);\r\n                                            mVisibleComments.get(placeholderPosition).setLoadMoreChildrenFailed(false);\r\n                                            ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments);\r\n                                            mVisibleComments.addAll(placeholderPosition, expandedComments);\r\n                                            if (mIsSingleCommentThreadMode) {\r\n                                                notifyItemRangeInserted(placeholderPosition + 1, expandedComments.size());\r\n                                            } else {\r\n                                                notifyItemRangeInserted(placeholderPosition, expandedComments.size());\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        mVisibleComments.get(parentPosition).getChildren().remove(mVisibleComments.get(parentPosition).getChildren().size() - 1);\r\n                                        mVisibleComments.get(parentPosition).removeMoreChildrenIds();\r\n                                        int placeholderPosition = findLoadMoreCommentsPlaceholderPosition(parentComment.getFullName(), commentPosition);\r\n                                        if (placeholderPosition != -1) {\r\n                                            mVisibleComments.remove(placeholderPosition);\r\n                                            if (mIsSingleCommentThreadMode) {\r\n                                                notifyItemRemoved(placeholderPosition + 1);\r\n                                            } else {\r\n                                                notifyItemRemoved(placeholderPosition);\r\n                                            }\r\n                                            mVisibleComments.addAll(placeholderPosition, expandedComments);\r\n                                            if (mIsSingleCommentThreadMode) {\r\n                                                notifyItemRangeInserted(placeholderPosition + 1, expandedComments.size());\r\n                                            } else {\r\n                                                notifyItemRangeInserted(placeholderPosition, expandedComments.size());\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (mVisibleComments.get(parentPosition).hasReply() && moreChildrenIds.isEmpty()) {\r\n                                        mVisibleComments.get(parentPosition).getChildren().remove(mVisibleComments.get(parentPosition).getChildren().size() - 1);\r\n                                        mVisibleComments.get(parentPosition).removeMoreChildrenIds();\r\n                                    }\r\n                                }\r\n                                mVisibleComments.get(parentPosition).addChildren(topLevelComments);\r\n                                if (mIsSingleCommentThreadMode) {\r\n                                    notifyItemChanged(parentPosition + 1);\r\n                                } else {\r\n                                    notifyItemChanged(parentPosition);\r\n                                }\r\n                            } else {\r\n                                for (int i = 0; i < mVisibleComments.size(); i++) {\r\n                                    if (mVisibleComments.get(i).getFullName().equals(parentComment.getFullName())) {\r\n                                        if (mVisibleComments.get(i).isExpanded()) {\r\n                                            int placeholderPositionHint = i + mVisibleComments.get(i).getChildren().size();\r\n                                            int placeholderPosition = findLoadMoreCommentsPlaceholderPosition(parentComment.getFullName(), placeholderPositionHint);\r\n                                            if (placeholderPosition != -1) {\r\n                                                mVisibleComments.get(placeholderPosition).setLoadingMoreChildren(false);\r\n                                                mVisibleComments.get(placeholderPosition).setLoadMoreChildrenFailed(false);\r\n                                                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments);\r\n                                                mVisibleComments.addAll(placeholderPosition, expandedComments);\r\n                                                if (mIsSingleCommentThreadMode) {\r\n                                                    notifyItemRangeInserted(placeholderPosition + 1, expandedComments.size());\r\n                                                } else {\r\n                                                    notifyItemRangeInserted(placeholderPosition, expandedComments.size());\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        mVisibleComments.get(i).getChildren().get(mVisibleComments.get(i).getChildren().size() - 1).setLoadingMoreChildren(false);\r\n                                        mVisibleComments.get(i).getChildren().get(mVisibleComments.get(i).getChildren().size() - 1).setLoadMoreChildrenFailed(false);\r\n                                        mVisibleComments.get(i).addChildren(topLevelComments);\r\n                                        if (mIsSingleCommentThreadMode) {\r\n                                            notifyItemChanged(i + 1);\r\n                                        } else {\r\n                                            notifyItemChanged(i);\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFetchMoreCommentFailed() {\r\n                            int currentParentPosition = findCommentPosition(parentComment.getFullName(), parentPosition);\r\n                            if (currentParentPosition == -1) {\r\n                                // note: returning here is probably a mistake, because\r\n                                // parent is just not visible, but it can still exist in the comments tree.\r\n                                return;\r\n                            }\r\n                            Comment currentParentComment = mVisibleComments.get(currentParentPosition);\r\n                            if (currentParentComment.isExpanded()) {\r\n                                int placeholderPositionHint = currentParentPosition + currentParentComment.getChildren().size();\r\n                                int placeholderPosition = findLoadMoreCommentsPlaceholderPosition(parentComment.getFullName(), placeholderPositionHint);\r\n                                if (placeholderPosition != -1) {\r\n                                    mVisibleComments.get(placeholderPosition).setLoadingMoreChildren(false);\r\n                                    mVisibleComments.get(placeholderPosition).setLoadMoreChildrenFailed(true);\r\n                                }\r\n                                ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setText(R.string.comment_load_more_comments_failed);\r\n                            }\r\n                            currentParentComment.getChildren().get(currentParentComment.getChildren().size() - 1).setLoadingMoreChildren(false);\r\n                            currentParentComment.getChildren().get(currentParentComment.getChildren().size() - 1).setLoadMoreChildrenFailed(true);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            ((LoadMoreChildCommentsViewHolder) holder).placeholderTextView.setOnClickListener(view -> {\r\n                Comment comment = getCurrentComment(holder);\r\n                if (comment != null) {\r\n                    Intent intent = new Intent(mActivity, ViewPostDetailActivity.class);\r\n                    intent.putExtra(ViewPostDetailActivity.EXTRA_POST_DATA, mPost);\r\n                    intent.putExtra(ViewPostDetailActivity.EXTRA_SINGLE_COMMENT_ID, comment.getParentId());\r\n                    intent.putExtra(ViewPostDetailActivity.EXTRA_CONTEXT_NUMBER, \"0\");\r\n                    mActivity.startActivity(intent);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import ml.docilealligator.infinityforreddit.comment.Comment\nprivate int getParentPosition(int position) {\r\n    if (position >= 0 && position < mVisibleComments.size()) {\r\n        int childDepth = mVisibleComments.get(position).getDepth();\r\n        for (int i = position; i >= 0; i--) {\r\n            if (mVisibleComments.get(i).getDepth() < childDepth) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}" ],
  "VinylMusicPlayer/352" : [ "/**\r\n * Main-Menu-Handler\r\n */\r\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    final int itemId = item.getItemId();\r\n    if (itemId == R.id.menu_cancel) {\r\n        executor.submit(() -> {\r\n            if (originalNote == null) {\r\n                repo.deleteNoteAndSync(localAccount, note.getId());\r\n            } else {\r\n                repo.updateNoteAndSync(localAccount, originalNote, null, null, null);\r\n            }\r\n        });\r\n        listener.close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_delete) {\r\n        repo.deleteNoteAndSync(localAccount, note.getId());\r\n        listener.close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_favorite) {\r\n        note.setFavorite(!note.getFavorite());\r\n        repo.toggleFavoriteAndSync(localAccount, note.getId());\r\n        listener.onNoteUpdated(note);\r\n        prepareFavoriteOption(item);\r\n        return true;\r\n    } else if (itemId == R.id.menu_category) {\r\n        showCategorySelector();\r\n        return true;\r\n    } else if (itemId == R.id.menu_title) {\r\n        showEditTitleDialog();\r\n        return true;\r\n    } else if (itemId == R.id.menu_move) {\r\n        executor.submit(() -> AccountPickerDialogFragment.newInstance(new ArrayList<>(repo.getAccounts()), note.getAccountId()).show(requireActivity().getSupportFragmentManager(), BaseNoteFragment.class.getSimpleName()));\r\n        return true;\r\n    } else if (itemId == R.id.menu_share) {\r\n        shareNote();\r\n        return false;\r\n    } else if (itemId == MENU_ID_PIN) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            final var context = requireContext();\r\n            if (ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {\r\n                final var pinShortcutInfo = new ShortcutInfoCompat.Builder(context, String.valueOf(note.getId())).setShortLabel(note.getTitle()).setIcon(IconCompat.createWithResource(context.getApplicationContext(), TRUE.equals(note.getFavorite()) ? R.drawable.ic_star_yellow_24dp : R.drawable.ic_star_grey_ccc_24dp)).setIntent(new Intent(getActivity(), EditNoteActivity.class).putExtra(EditNoteActivity.PARAM_NOTE_ID, note.getId()).setAction(ACTION_SHORTCUT)).build();\r\n                ShortcutManagerCompat.requestPinShortcut(context, pinShortcutInfo, PendingIntent.getBroadcast(context, 0, ShortcutManagerCompat.createShortcutResultIntent(context, pinShortcutInfo), pendingIntentFlagCompat(0)).getIntentSender());\r\n            } else {\r\n                Log.i(TAG, \"RequestPinShortcut is not supported\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n/**\r\n * Save the current state in the database and schedule synchronization if needed.\r\n *\r\n * @param callback Observer which is called after save/synchronization\r\n */\r\nprotected void saveNote(@Nullable ISyncCallback callback) {\r\n    Log.d(TAG, \"saveData()\");\r\n    if (note != null) {\r\n        final var newContent = getContent();\r\n        if (note.getContent().equals(newContent)) {\r\n            if (note.getScrollY() != originalScrollY) {\r\n                Log.v(TAG, \"... only saving new scroll state, since content did not change\");\r\n                repo.updateScrollY(note.getId(), note.getScrollY());\r\n            } else {\r\n                Log.v(TAG, \"... not saving, since nothing has changed\");\r\n            }\r\n        } else {\r\n            // FIXME requires database queries on main thread!\r\n            note = repo.updateNoteAndSync(localAccount, note, newContent, null, callback);\r\n            listener.onNoteUpdated(note);\r\n            requireActivity().invalidateOptionsMenu();\r\n        }\r\n    } else {\r\n        Log.e(TAG, \"note is null\");\r\n    }\r\n}\n--------------------------------------------------\n", "import java.util.Objects;\r\nimport it.niedermann.owncloud.notes.shared.model.Item;\r\n@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (!(o instanceof SectionItem that))\r\n        return false;\r\n    return Objects.equals(title, that.title);\r\n}" ],
  "VinylMusicPlayer/354" : [ "private void removeFromQueueChecked(List<FeedItem> items) {\r\n    long[] checkedIds = getSelectedIds(items);\r\n    DBWriter.removeQueueItem(activity, true, checkedIds);\r\n    showMessage(R.plurals.removed_from_queue_batch_label, checkedIds.length);\r\n}\n--------------------------------------------------\nprivate void markedCheckedPlayed(List<FeedItem> items) {\r\n    long[] checkedIds = getSelectedIds(items);\r\n    DBWriter.markItemPlayed(FeedItem.PLAYED, checkedIds);\r\n    showMessage(R.plurals.marked_read_batch_label, checkedIds.length);\r\n}\n--------------------------------------------------\n", "import de.danoeh.antennapod.model.feed.FeedItem\nimport java.util.List\nprivate long[] getSelectedIds(List<FeedItem> items) {\r\n    long[] checkedIds = new long[items.size()];\r\n    for (int i = 0; i < items.size(); ++i) {\r\n        checkedIds[i] = items.get(i).getId();\r\n    }\r\n    return checkedIds;\r\n}" ],
  "VinylMusicPlayer/349" : [ "@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    if (result == SUCCESS) {\r\n        EventBus.getDefault().post(new ShowChangedEvent());\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    // post event so movie UI reloads (it is not listening to database changes)\r\n    EventBus.getDefault().post(new MovieTools.MovieChangedEvent(movieTmdbId));\r\n}\n--------------------------------------------------\n", "import org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\n@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    if (result == SUCCESS) {\r\n        EventBus.getDefault().post(new ShowChangedEvent());\r\n    }\r\n}" ],
  "Android-Password-Store/109" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    Log.d(Const.TAG, \"nano - onCreate\");\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Setup theme\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    // Setup view\r\n    setupView(savedInstanceState);\r\n    // Self reference\r\n    display_dbentry = this;\r\n    // Setup database\r\n    setupDatabase();\r\n    // Set main activity\r\n    mActivity = MainActivity.main_activity;\r\n    // Setup toolbar\r\n    setupToolBar();\r\n    // Setup status\r\n    setupStatusBar();\r\n    // Setup animation\r\n    setupAnimation();\r\n    // Setup immersive mode\r\n    setupImmersiveMode();\r\n    // Setup custom fonts\r\n    setupCustomFonts();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    // Setup editor\r\n    setupEditor();\r\n    // Setup markdown view\r\n    setupMarkdownView();\r\n    // Setup snapshots\r\n    setupSnapshots();\r\n    // Setup shared content\r\n    setupSharedContent();\r\n    // Setup back pressed callback\r\n    setupBackPressedCallback();\r\n    // Apply hacks\r\n    applyHacks();\r\n}\n--------------------------------------------------\n", "import android.os.Handler;\r\nimport android.os.Handler\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    // Stop auto save\r\n    if (mAutoSaveHandler != null) {\r\n        mAutoSaveHandler.removeCallbacksAndMessages(null);\r\n        mAutoSaveHandler = null;\r\n    }\r\n    // Remove self reference\r\n    if (display_dbentry == this)\r\n        display_dbentry = null;\r\n}" ],
  "VinylMusicPlayer/348" : [ "@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    if (result == SUCCESS) {\r\n        EventBus.getDefault().post(new ShowChangedEvent());\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    // post event so movie UI reloads (it is not listening to database changes)\r\n    EventBus.getDefault().post(new MovieTools.MovieChangedEvent(movieTmdbId));\r\n}\n--------------------------------------------------\n", "import org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\n@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    if (result == SUCCESS) {\r\n        EventBus.getDefault().post(new ShowChangedEvent());\r\n    }\r\n}" ],
  "Android-Password-Store/106" : [ "appendPath(update()?.id().toString())\n--------------------------------------------------\nUrlUtils.appendPath(project(), \"creator_bio\")\n--------------------------------------------------\nUrlUtils.appendPath(project(), \"description\")\n--------------------------------------------------\nUrlUtils.appendPath(env?.webEndpoint() ?: \"\", COMMENT_KICKSTARTER_GUIDELINES)\n--------------------------------------------------\nUrlUtils.appendPath(it.webEndpoint(), path)\n--------------------------------------------------\nappendPath(environment?.webEndpoint() ?: \"\", CommentsActivity.COMMENT_KICKSTARTER_GUIDELINES)\n--------------------------------------------------\nUrlUtils.appendPath(baseUrl, HelpActivity.TERMS_OF_USE)\n--------------------------------------------------\nUrlUtils.appendPath(baseUrl, HelpActivity.COOKIES)\n--------------------------------------------------\nUrlUtils.appendPath(baseUrl, HelpActivity.PRIVACY)\n--------------------------------------------------\nUrlUtils.appendPath(baseUrl, \"trust\")\n--------------------------------------------------\nUrlUtils.appendPath(environment.webEndpoint(), ENVIROMENT)\n--------------------------------------------------\nUrlUtils.appendPath(environment.webEndpoint(), ACCOUNTABILITY)", "import android.net.Uri\nfun appendPath(baseUrl: String, path: String): String {\r\n        val uriBuilder = Uri.parse(baseUrl).buildUpon()\r\n        uriBuilder.appendEncodedPath(path)\r\n\r\n        return uriBuilder.build().toString()\r\n    }\nImport(names=[android, net, Uri], wildcard=false, alias=null)" ],
  "Android-Password-Store/101" : [ "", "import com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport de.danoeh.antennapod.R\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport android.content.Context\nprivate void showExportErrorDialog(final Throwable error) {\r\n    progressDialog.dismiss();\r\n    final MaterialAlertDialogBuilder alert = new MaterialAlertDialogBuilder(getContext());\r\n    alert.setPositiveButton(android.R.string.ok, (dialog, which) -> dialog.dismiss());\r\n    alert.setTitle(R.string.export_error_label);\r\n    alert.setMessage(error.getMessage());\r\n    alert.show();\r\n}" ],
  "Android-Password-Store/40" : [ "        val messageStore = messageStoreManager.getMessageStore(messageReference.accountUuid)\n        val headers = messageStore.getHeaders(messageReference.folderId, messageReference.uid, MESSAGE_DETAILS_HEADERS)\r\n\n--------------------------------------------------\n\n        val messageDate = headers.parseDate(\"date\")\r\n        val fromAddresses = headers.parseAddresses(\"from\")\n--------------------------------------------------\n        val messageDate = headers.parseDate(\"date\")\n        val fromAddresses = headers.parseAddresses(\"from\")\r\n        val senderAddresses = headers.parseAddresses(\"sender\")\n--------------------------------------------------\n        val fromAddresses = headers.parseAddresses(\"from\")\n        val senderAddresses = headers.parseAddresses(\"sender\")\r\n        val replyToAddresses = headers.parseAddresses(\"reply-to\")\n--------------------------------------------------\n        val senderAddresses = headers.parseAddresses(\"sender\")\n        val replyToAddresses = headers.parseAddresses(\"reply-to\")\r\n        val toAddresses = headers.parseAddresses(\"to\")\n--------------------------------------------------\n        val replyToAddresses = headers.parseAddresses(\"reply-to\")\n        val toAddresses = headers.parseAddresses(\"to\")\r\n        val ccAddresses = headers.parseAddresses(\"cc\")\n--------------------------------------------------\n        val toAddresses = headers.parseAddresses(\"to\")\n        val ccAddresses = headers.parseAddresses(\"cc\")\r\n        val bccAddresses = headers.parseAddresses(\"bcc\")\n--------------------------------------------------\n        val ccAddresses = headers.parseAddresses(\"cc\")\n        val bccAddresses = headers.parseAddresses(\"bcc\")\r\n\n--------------------------------------------------\n{\r\n        return Address.parse(MimeUtility.unfold(firstHeaderOrNull(headerName))).toList()\r\n    }\n--------------------------------------------------\n{\n        val dateHeader = firstHeaderOrNull(headerName) ?: return MessageDate.MissingDate\r\n\n--------------------------------------------------\nheader(\"From\", \"sender@domain.example\")\n--------------------------------------------------\nheader(\"To\", IDENTITY_EMAIL_ADDRESS)\n--------------------------------------------------\nheader(\"To\", \"$IDENTITY_EMAIL_ADDRESS, other@domain.example\")\n--------------------------------------------------\nheader(\"Cc\", \"$IDENTITY_EMAIL_ADDRESS, other@domain.example\")\n--------------------------------------------------\nheader(\"Cc\", \"other@domain.example\")\n--------------------------------------------------\nheader(\"To\", \"other@domain.example\")\n--------------------------------------------------\nheader(\"Cc\", IDENTITY_EMAIL_ADDRESS)\n--------------------------------------------------\nheader(\"To\", \"recipient@domain.example\")", "import java.io.ByteArrayOutputStream\nimport com.fsck.k9.mail.Message\nprivate fun Message.header(): String {\r\n        val outputStream = ByteArrayOutputStream()\r\n        writeHeaderTo(outputStream)\r\n        return outputStream.toString(\"UTF-8\")\r\n    }\nimport com.fsck.k9.mail.Message\nimport java.io.ByteArrayOutputStream" ],
  "Android-Password-Store/41" : [ "            )\n            if (entryChanged(\r\n                    state.entry,", "import com.mhss.app.mybrain.domain.model.DiaryEntry\nprivate fun entryChanged(\r\n    entry: DiaryEntry?,\r\n    newEntry: DiaryEntry\r\n): Boolean {\r\n    return entry?.title != newEntry.title ||\r\n            entry.content != newEntry.content ||\r\n            entry.mood != newEntry.mood ||\r\n            entry.createdDate != newEntry.createdDate\r\n}\nimport com.mhss.app.mybrain.domain.model.DiaryEntry" ],
  "Android-Password-Store/42" : [ "            )\n            if (entryChanged(\r\n                    state.entry,", "import com.mhss.app.mybrain.domain.model.DiaryEntry\nprivate fun entryChanged(\r\n    entry: DiaryEntry?,\r\n    newEntry: DiaryEntry\r\n): Boolean {\r\n    return entry?.title != newEntry.title ||\r\n            entry.content != newEntry.content ||\r\n            entry.mood != newEntry.mood ||\r\n            entry.createdDate != newEntry.createdDate\r\n}\nimport com.mhss.app.mybrain.domain.model.DiaryEntry" ],
  "Android-Password-Store/43" : [ "", "import org.junit.Test\nimport com.fsck.k9.mail.Address\nimport assertk.assertions.containsExactly\nimport assertk.assertThat\nimport androidx.core.net.toUri\nimport android.net.Uri\n @Test\r\n    fun `multiple Cc recipients`() {\r\n        val uri = \"mailto:test1@domain.example?cc=test3@domain.example,test4@domain.example\".toUri()\r\n\r\n        val result = MailTo.parse(uri)\r\n\r\n        assertThat(result.cc).containsExactly(\r\n            \"test3@domain.example\".toAddress(),\r\n            \"test4@domain.example\".toAddress(),\r\n        )\r\n    }\nimport android.net.Uri\nimport androidx.core.net.toUri\nimport assertk.assertThat\nimport assertk.assertions.containsExactly\nimport com.fsck.k9.mail.Address\nimport org.junit.Test" ],
  "Android-Password-Store/110" : [ "\n        val iv = EncryptDecryptManager.generateRandomBytes(16).toHexString()\r\n        val encrypted = encryptDecryptManager.encrypt(secretText, key, iv)", "import java.security.SecureRandom\nfun generateRandomBytes(number: Int): ByteArray {\r\n            val random = SecureRandom()\r\n            val bytes = ByteArray(number)\r\n            random.nextBytes(bytes)\r\n            return bytes\r\n        }\nImport(names=[java, security, SecureRandom], wildcard=false, alias=null)" ],
  "Android-Password-Store/45" : [ "/**\r\n * Main-Menu-Handler\r\n */\r\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    final int itemId = item.getItemId();\r\n    if (itemId == R.id.menu_cancel) {\r\n        executor.submit(() -> {\r\n            if (originalNote == null) {\r\n                repo.deleteNoteAndSync(localAccount, note.getId());\r\n            } else {\r\n                repo.updateNoteAndSync(localAccount, originalNote, null, null, null);\r\n            }\r\n        });\r\n        listener.close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_delete) {\r\n        repo.deleteNoteAndSync(localAccount, note.getId());\r\n        listener.close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_favorite) {\r\n        note.setFavorite(!note.getFavorite());\r\n        repo.toggleFavoriteAndSync(localAccount, note.getId());\r\n        listener.onNoteUpdated(note);\r\n        prepareFavoriteOption(item);\r\n        return true;\r\n    } else if (itemId == R.id.menu_category) {\r\n        showCategorySelector();\r\n        return true;\r\n    } else if (itemId == R.id.menu_title) {\r\n        showEditTitleDialog();\r\n        return true;\r\n    } else if (itemId == R.id.menu_move) {\r\n        executor.submit(() -> AccountPickerDialogFragment.newInstance(new ArrayList<>(repo.getAccounts()), note.getAccountId()).show(requireActivity().getSupportFragmentManager(), BaseNoteFragment.class.getSimpleName()));\r\n        return true;\r\n    } else if (itemId == R.id.menu_share) {\r\n        shareNote();\r\n        return false;\r\n    } else if (itemId == MENU_ID_PIN) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            final var context = requireContext();\r\n            if (ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {\r\n                final var pinShortcutInfo = new ShortcutInfoCompat.Builder(context, String.valueOf(note.getId())).setShortLabel(note.getTitle()).setIcon(IconCompat.createWithResource(context.getApplicationContext(), TRUE.equals(note.getFavorite()) ? R.drawable.ic_star_yellow_24dp : R.drawable.ic_star_grey_ccc_24dp)).setIntent(new Intent(getActivity(), EditNoteActivity.class).putExtra(EditNoteActivity.PARAM_NOTE_ID, note.getId()).setAction(ACTION_SHORTCUT)).build();\r\n                ShortcutManagerCompat.requestPinShortcut(context, pinShortcutInfo, PendingIntent.getBroadcast(context, 0, ShortcutManagerCompat.createShortcutResultIntent(context, pinShortcutInfo), pendingIntentFlagCompat(0)).getIntentSender());\r\n            } else {\r\n                Log.i(TAG, \"RequestPinShortcut is not supported\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    final int itemId = item.getItemId();\r\n    if (itemId == android.R.id.home) {\r\n        close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_preview) {\r\n        changeMode(Mode.PREVIEW, false);\r\n        return true;\r\n    } else if (itemId == R.id.menu_edit) {\r\n        changeMode(Mode.EDIT, false);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport it.niedermann.owncloud.notes.R;\r\nimport it.niedermann.owncloud.notes.R\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    final int itemId = item.getItemId();\r\n    if (itemId == android.R.id.home) {\r\n        close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_preview) {\r\n        changeMode(Mode.PREVIEW, false);\r\n        return true;\r\n    } else if (itemId == R.id.menu_edit) {\r\n        changeMode(Mode.EDIT, false);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "Android-Password-Store/111" : [ "createRemindersNotificationChannel()", "import com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.R\nimport android.app.NotificationManager\nimport android.app.NotificationChannel\nprivate fun createRemindersNotificationChannel() {\r\n        val channel = NotificationChannel(\r\n            Constants.REMINDERS_CHANNEL_ID,\r\n            getString(R.string.reminders_channel_name),\r\n            NotificationManager.IMPORTANCE_DEFAULT\r\n        )\r\n        channel.description = getString(R.string.reminders_channel_description)\r\n        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n        notificationManager.createNotificationChannel(channel)\r\n\r\n    }\nImport(names=[android, app, NotificationChannel], wildcard=false, alias=null)\nImport(names=[android, app, NotificationManager], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, util, Constants], wildcard=false, alias=null)" ],
  "Android-Password-Store/46" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport java.util.List\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    // Current directory chosen\r\n    if (mChosenDirectoryListener != null) {\r\n        // Call registered listener supplied with the chosen directory\r\n        mChosenDirectoryListener.onChosenDir(mDir);\r\n    }\r\n}" ],
  "Android-Password-Store/49" : [ "", "import com.mhss.app.mybrain.presentation.util.Screen\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpacesScreenPreview() {\r\n    SpacesScreen(\r\n        navController = rememberNavController()\r\n    )\r\n}\nImport(names=[androidx, navigation, compose, rememberNavController], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/345" : [ "@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    if (result == SUCCESS) {\r\n        EventBus.getDefault().post(new ShowChangedEvent());\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    // post event so movie UI reloads (it is not listening to database changes)\r\n    EventBus.getDefault().post(new MovieTools.MovieChangedEvent(movieTmdbId));\r\n}\n--------------------------------------------------\n", "import org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\n@Override\r\nprotected void onPostExecute(Integer result) {\r\n    super.onPostExecute(result);\r\n    if (result == SUCCESS) {\r\n        EventBus.getDefault().post(new ShowChangedEvent());\r\n    }\r\n}" ],
  "VinylMusicPlayer/344" : [ "@Override\r\npublic void restoreState(Parcelable state, ClassLoader loader) {\r\n    if (state != null) {\r\n        Bundle bundle = (Bundle) state;\r\n        bundle.setClassLoader(loader);\r\n        Parcelable[] fss = bundle.getParcelableArray(\"states\");\r\n        mSavedState.clear();\r\n        mFragments.clear();\r\n        if (fss != null) {\r\n            for (Parcelable parcelable : fss) {\r\n                mSavedState.add((Fragment.SavedState) parcelable);\r\n            }\r\n        }\r\n        Iterable<String> keys = bundle.keySet();\r\n        for (String key : keys) {\r\n            if (key.startsWith(\"f\")) {\r\n                int index = Integer.parseInt(key.substring(1));\r\n                Fragment f = mFragmentManager.getFragment(bundle, key);\r\n                if (f != null) {\r\n                    while (mFragments.size() <= index) {\r\n                        mFragments.add(null);\r\n                    }\r\n                    f.setMenuVisibility(false);\r\n                    mFragments.set(index, f);\r\n                } else {\r\n                    Log.w(TAG, \"Bad fragment at key \" + key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.Fragment\npublic Fragment getFragment(int position) {\r\n    if (position < mFragments.size() && position >= 0) {\r\n        return mFragments.get(position);\r\n    }\r\n    return null;\r\n}" ],
  "VinylMusicPlayer/347" : [ "        withContext(Dispatchers.Main) {\n            progressListener?.onProgressUpdate(total, completed)\r\n        }\n--------------------------------------------------\n\n        onProgressUpdate(numTotal, 0)\r\n\n--------------------------------------------------\n\n            onProgressUpdate(numTotal, ++numExported)\r\n        }", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.content.Context\nprivate suspend fun onProgressUpdate(total: Int, completed: Int) {\r\n        withContext(Dispatchers.Main) {\r\n            progressListener?.onProgressUpdate(total, completed)\r\n        }\r\n    }\nimport android.content.Context\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/403" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/337" : [ "/**\r\n * Formats a stack trace element into a simple call site.\r\n *\r\n * @param s the stack trace element to format.\r\n * @return the formatted stack trace element.\r\n * @throws NullPointerException if stack trace element is null.\r\n * @see #formatThrown(java.util.logging.LogRecord)\r\n */\r\nprivate String formatStackTraceElement(final StackTraceElement s) {\r\n    String v = simpleClassName(s.getClassName());\r\n    String result = s.toString().replace(s.getClassName(), v);\r\n    //If the class name contains the simple file name then remove file name.\r\n    v = simpleFileName(s.getFileName());\r\n    if (v != null && result.startsWith(v)) {\r\n        result = result.replace(s.getFileName(), \"\");\r\n    }\r\n    return result;\r\n}\n--------------------------------------------------\n", "/**\r\n * Converts a file name with an extension to a file name without an\r\n * extension.\r\n *\r\n * @param name the full file name or null.\r\n * @return the simple file name or null.\r\n */\r\nprivate static String simpleFileName(String name) {\r\n    if (name != null) {\r\n        final int index = name.lastIndexOf('.');\r\n        name = index > -1 ? name.substring(0, index) : name;\r\n    }\r\n    return name;\r\n}" ],
  "VinylMusicPlayer/339" : [ "", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.R\nimport java.util.List\npublic static boolean isSAFRequiredForSongs(List<Song> songs) {\r\n    for (Song song : songs) {\r\n        if (isSAFRequired(song))\r\n            return true;\r\n    }\r\n    return false;\r\n}" ],
  "Android-Password-Store/119" : [ "super.onOptionsItemSelected(item)", "import code.name.monkey.retromusic.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        if (item.itemId == android.R.id.home) {\n            onBackPressedDispatcher.onBackPressed()\n        }\n        return super.onOptionsItemSelected(item)\n    }\nImport(names=[android, view, MenuItem], wildcard=false, alias=null)" ],
  "Android-Password-Store/112" : [ "", "import com.mhss.app.mybrain.domain.model.SubTask\nimport com.google.gson.reflect.TypeToken\nimport com.google.gson.Gson\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun fromSubTasksList(value: List<SubTask>): String {\r\n        val gson = Gson()\r\n        val type = TypeToken.getParameterized(List::class.java, SubTask::class.java).type\r\n        return gson.toJson(value, type)\r\n    }\nImport(names=[com, google, gson, Gson], wildcard=false, alias=null)\nImport(names=[com, google, gson, reflect, TypeToken], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, domain, model, SubTask], wildcard=false, alias=null)" ],
  "Android-Password-Store/50" : [ "", "import org.junit.Test\nimport com.fsck.k9.mail.Address\nimport assertk.assertions.containsExactly\nimport assertk.assertThat\nimport androidx.core.net.toUri\nimport android.net.Uri\n @Test\r\n    fun `multiple Cc recipients`() {\r\n        val uri = \"mailto:test1@domain.example?cc=test3@domain.example,test4@domain.example\".toUri()\r\n\r\n        val result = MailTo.parse(uri)\r\n\r\n        assertThat(result.cc).containsExactly(\r\n            \"test3@domain.example\".toAddress(),\r\n            \"test4@domain.example\".toAddress(),\r\n        )\r\n    }\nimport android.net.Uri\nimport androidx.core.net.toUri\nimport assertk.assertThat\nimport assertk.assertions.containsExactly\nimport com.fsck.k9.mail.Address\nimport org.junit.Test" ],
  "Android-Password-Store/115" : [ "super.onOptionsItemSelected(item)", "import code.name.monkey.retromusic.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when (item.itemId) {\n            android.R.id.home -> {\n                onBackPressedDispatcher.onBackPressed()\n                return true\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }\nImport(names=[android, view, MenuItem], wildcard=false, alias=null)" ],
  "Android-Password-Store/52" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Android-Password-Store/120" : [ "super.onOptionsItemSelected(item)", "import code.name.monkey.retromusic.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when (item.itemId) {\n            android.R.id.home -> {\n                onBackPressedDispatcher.onBackPressed()\n                return true\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }\nImport(names=[android, view, MenuItem], wildcard=false, alias=null)" ],
  "Android-Password-Store/54" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Android-Password-Store/121" : [ "hideKeyboard(view)", "import androidx.core.view\nimport androidx.core.content.getSystemService\nimport android.view.inputmethod.InputMethodManager\nimport android.view\nprivate fun hideKeyboard(view: View?) {\n        if (view != null) {\n            val imm =\n                requireContext().getSystemService<InputMethodManager>()\n            imm?.hideSoftInputFromWindow(view.windowToken, 0)\n        }\n    }\nImport(names=[android, view], wildcard=true, alias=null)\nImport(names=[androidx, core, view], wildcard=true, alias=null)" ],
  "Android-Password-Store/56" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1162" : [ "taskDao.insertTask(task)\n--------------------------------------------------\n{\r\n        return tasksRepository.insertTask(task)\r\n    }", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Task\noverride suspend fun insertTask(task: Task): Long {\r\n        return withContext(ioDispatcher) {\r\n            taskDao.insertTask(task)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Task], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Android-Password-Store/59" : [ "                            .newDialog(R.string.clear_completed_tasks_confirmation)\n                            .setMessage(R.string.clear_completed_tasks_count, countString)\r\n                            .setPositiveButton(R.string.ok) { _, _ ->\n--------------------------------------------------\n        }\n        handler.post { progressDialog.setMessage(message) }\r\n    }\n--------------------------------------------------\ndialogBuilder.newDialog().setMessage(R.string.logout_warning)\n--------------------------------------------------\nsetMessage(r.getString(R.string.import_summary_message, \"\", r.getQuantityString(R.plurals.Ntasks, result.taskCount, result.taskCount), r.getQuantityString(R.plurals.Ntasks, result.importCount, result.importCount), r.getQuantityString(R.plurals.Ntasks, result.skipCount, result.skipCount), r.getQuantityString(R.plurals.Ntasks, 0, 0)))\n--------------------------------------------------\ndialogBuilder.newDialog().setMessage(R.string.restart_required)\n--------------------------------------------------\ndialogBuilder.newDialog().setMessage(R.string.EPr_manage_delete_completed_gcal_message)\n--------------------------------------------------\ndialogBuilder.newDialog().setMessage(R.string.EPr_manage_delete_all_gcal_message)\n--------------------------------------------------\ndialogBuilder.newDialog().setMessage(R.string.EPr_reset_preferences_warning)\n--------------------------------------------------\ndialogBuilder.newDialog().setMessage(R.string.EPr_delete_task_data_warning)\n--------------------------------------------------\nsetMessage(R.string.app_password_delete_confirmation)", "import androidx.appcompat.app.AlertDialog\nfun setMessage(message: String?): AlertDialogBuilder {\r\n        builder.setMessage(message)\r\n        return this\r\n    }\nimport androidx.appcompat.app.AlertDialog" ],
  "Trail-Sense/1163" : [ "getItemId(position).also {\n    selectedItemId = it\n}", "import androidx.recyclerview.widget.RecyclerView\noverride fun getItemId(position: Int): Long {\r\n        return if (position < items.size) {\r\n            items[position].id.toLong()\r\n        } else {\r\n            RecyclerView.NO_ID\r\n        }\r\n    }\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/334" : [ "/**\r\n * Formats a stack trace element into a simple call site.\r\n *\r\n * @param s the stack trace element to format.\r\n * @return the formatted stack trace element.\r\n * @throws NullPointerException if stack trace element is null.\r\n * @see #formatThrown(java.util.logging.LogRecord)\r\n */\r\nprivate String formatStackTraceElement(final StackTraceElement s) {\r\n    String v = simpleClassName(s.getClassName());\r\n    String result = s.toString().replace(s.getClassName(), v);\r\n    //If the class name contains the simple file name then remove file name.\r\n    v = simpleFileName(s.getFileName());\r\n    if (v != null && result.startsWith(v)) {\r\n        result = result.replace(s.getFileName(), \"\");\r\n    }\r\n    return result;\r\n}\n--------------------------------------------------\n", "/**\r\n * Converts a file name with an extension to a file name without an\r\n * extension.\r\n *\r\n * @param name the full file name or null.\r\n * @return the simple file name or null.\r\n */\r\nprivate static String simpleFileName(String name) {\r\n    if (name != null) {\r\n        final int index = name.lastIndexOf('.');\r\n        name = index > -1 ? name.substring(0, index) : name;\r\n    }\r\n    return name;\r\n}" ],
  "Trail-Sense/1168" : [ "@Override\r\npublic void onViewCreated(@NonNull View view, Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    butPlay.setOnClickListener(v -> {\r\n        if (controller == null) {\r\n            return;\r\n        }\r\n        if (controller.getMedia() != null && controller.getMedia().getMediaType() == MediaType.VIDEO && controller.getStatus() != PlayerStatus.PLAYING) {\r\n            controller.playPause();\r\n            getContext().startActivity(PlaybackService.getPlayerActivityIntent(getContext(), controller.getMedia()));\r\n        } else {\r\n            controller.playPause();\r\n        }\r\n    });\r\n    loadMediaInfo();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    EventBus.getDefault().register(this);\r\n}\n--------------------------------------------------\n", "import android.os.Bundle;\r\nimport android.view.View;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.os.Bundle\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    EventBus.getDefault().register(this);\r\n}" ],
  "VinylMusicPlayer/333" : [ "", "import com.uwetrottmann.tmdb2.entities.Genre;\r\nimport java.util.List\nimport com.uwetrottmann.tmdb2.entities.Genre\n/**\r\n * Builds a string listing all given genres by name, separated by comma.\r\n */\r\npublic static String buildGenresString(List<Genre> genres) {\r\n    if (genres == null || genres.isEmpty()) {\r\n        return null;\r\n    }\r\n    StringBuilder genresString = new StringBuilder();\r\n    for (int i = 0; i < genres.size(); i++) {\r\n        Genre genre = genres.get(i);\r\n        genresString.append(genre.name);\r\n        if (i + 1 < genres.size()) {\r\n            genresString.append(\", \");\r\n        }\r\n    }\r\n    return genresString.toString();\r\n}" ],
  "VinylMusicPlayer/336" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n/**\r\n * @param context The {@link Context} to use\r\n * @return A new instance of this class.\r\n */\r\n@NonNull\r\npublic static synchronized SongPlayCountStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new SongPlayCountStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "VinylMusicPlayer/335" : [ "realRepository.playlistSongs(playlistId)\n--------------------------------------------------\nRealPlaylistRepository(get()).playlistSongs(id)", "import code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.model.PlaylistSong\nimport code.name.monkey.retromusic.model.Playlist\nimport android.database.Cursor\noverride fun playlistSongs(playlistId: Long): List<Song> {\n        val songs = arrayListOf<Song>()\n        if (playlistId == -1L) return songs\n        val cursor = makePlaylistSongCursor(playlistId)\n\n        if (cursor != null && cursor.moveToFirst()) {\n            do {\n                songs.add(getPlaylistSongFromCursorImpl(cursor, playlistId))\n            } while (cursor.moveToNext())\n        }\n        cursor?.close()\n        return songs\n    }" ],
  "VinylMusicPlayer/332" : [ "", "import com.uwetrottmann.tmdb2.entities.Genre;\r\nimport java.util.List\nimport com.uwetrottmann.tmdb2.entities.Genre\n/**\r\n * Builds a string listing all given genres by name, separated by comma.\r\n */\r\npublic static String buildGenresString(List<Genre> genres) {\r\n    if (genres == null || genres.isEmpty()) {\r\n        return null;\r\n    }\r\n    StringBuilder genresString = new StringBuilder();\r\n    for (int i = 0; i < genres.size(); i++) {\r\n        Genre genre = genres.get(i);\r\n        genresString.append(genre.name);\r\n        if (i + 1 < genres.size()) {\r\n            genresString.append(\", \");\r\n        }\r\n    }\r\n    return genresString.toString();\r\n}" ],
  "VinylMusicPlayer/331" : [ "@Override\r\nprotected Integer doBackgroundAction(Void... params) {\r\n    String listId = getListId();\r\n    if (isSendingToHexagon()) {\r\n        HexagonTools hexagonTools = SgApp.getServicesComponent(getContext()).hexagonTools();\r\n        Lists listsService = hexagonTools.getListsService();\r\n        if (listsService == null) {\r\n            // no longer signed in\r\n            return ERROR_HEXAGON_API;\r\n        }\r\n        // send list to be added to hexagon\r\n        SgListList wrapper = new SgListList();\r\n        List<SgList> lists = buildList(listId, listName);\r\n        wrapper.setLists(lists);\r\n        try {\r\n            listsService.save(wrapper).execute();\r\n        } catch (IOException e) {\r\n            Errors.logAndReportHexagon(\"add list\", e);\r\n            return ERROR_HEXAGON_API;\r\n        }\r\n    }\r\n    // update local state\r\n    if (!doDatabaseUpdate(getContext().getContentResolver(), listId)) {\r\n        return ERROR_DATABASE;\r\n    }\r\n    return SUCCESS;\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport com.uwetrottmann.seriesguide.backend.lists.model.SgList;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\nimport com.uwetrottmann.seriesguide.backend.lists.model.SgList\nimport androidx.annotation.NonNull\n@NonNull\r\nprivate static List<SgList> buildList(@NonNull String listId, @NonNull String listName) {\r\n    List<SgList> lists = new ArrayList<>(1);\r\n    SgList list = new SgList();\r\n    list.setListId(listId);\r\n    list.setName(listName);\r\n    lists.add(list);\r\n    return lists;\r\n}" ],
  "VinylMusicPlayer/326" : [ "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    if (context instanceof AccountSwitcherListener) {\r\n        this.accountSwitcherListener = (AccountSwitcherListener) context;\r\n    } else {\r\n        throw new ClassCastException(\"Caller must implement \" + AccountSwitcherListener.class.getSimpleName());\r\n    }\r\n    final var args = getArguments();\r\n    if (args == null || !args.containsKey(KEY_CURRENT_ACCOUNT_ID)) {\r\n        throw new IllegalArgumentException(\"Please provide at least \" + KEY_CURRENT_ACCOUNT_ID);\r\n    } else {\r\n        this.currentAccountId = args.getLong(KEY_CURRENT_ACCOUNT_ID);\r\n    }\r\n    repo = NotesRepository.getInstance(requireContext());\r\n}\n--------------------------------------------------\n@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        listener = (NoteFragmentListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.getClass() + \" must implement \" + NoteFragmentListener.class);\r\n    }\r\n    repo = NotesRepository.getInstance(context);\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.room.Database;\r\nimport it.niedermann.owncloud.notes.persistence.entity.Note;\r\nimport it.niedermann.owncloud.notes.persistence.entity.Note\nimport androidx.room.Database\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static NotesDatabase getInstance(@NonNull Context context) {\r\n    if (instance == null) {\r\n        instance = create(context.getApplicationContext());\r\n    }\r\n    return instance;\r\n}" ],
  "VinylMusicPlayer/329" : [ "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    if (context instanceof AccountSwitcherListener) {\r\n        this.accountSwitcherListener = (AccountSwitcherListener) context;\r\n    } else {\r\n        throw new ClassCastException(\"Caller must implement \" + AccountSwitcherListener.class.getSimpleName());\r\n    }\r\n    final var args = getArguments();\r\n    if (args == null || !args.containsKey(KEY_CURRENT_ACCOUNT_ID)) {\r\n        throw new IllegalArgumentException(\"Please provide at least \" + KEY_CURRENT_ACCOUNT_ID);\r\n    } else {\r\n        this.currentAccountId = args.getLong(KEY_CURRENT_ACCOUNT_ID);\r\n    }\r\n    repo = NotesRepository.getInstance(requireContext());\r\n}\n--------------------------------------------------\n@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        listener = (NoteFragmentListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.getClass() + \" must implement \" + NoteFragmentListener.class);\r\n    }\r\n    repo = NotesRepository.getInstance(context);\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.room.Database;\r\nimport it.niedermann.owncloud.notes.persistence.entity.Note;\r\nimport it.niedermann.owncloud.notes.persistence.entity.Note\nimport androidx.room.Database\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static NotesDatabase getInstance(@NonNull Context context) {\r\n    if (instance == null) {\r\n        instance = create(context.getApplicationContext());\r\n    }\r\n    return instance;\r\n}" ],
  "VinylMusicPlayer/328" : [ "public static MailTo parse(Uri uri) throws NullPointerException, IllegalArgumentException {\r\n    if (uri == null || uri.toString() == null) {\r\n        throw new NullPointerException(\"Argument 'uri' must not be null\");\r\n    }\r\n    if (!isMailTo(uri)) {\r\n        throw new IllegalArgumentException(\"Not a mailto scheme\");\r\n    }\r\n    String schemaSpecific = uri.getSchemeSpecificPart();\r\n    int end = schemaSpecific.indexOf('?');\r\n    if (end == -1) {\r\n        end = schemaSpecific.length();\r\n    }\r\n    CaseInsensitiveParamWrapper params = new CaseInsensitiveParamWrapper(Uri.parse(\"foo://bar?\" + uri.getEncodedQuery()));\r\n    // Extract the recipient's email address from the mailto URI if there's one.\r\n    String recipient = Uri.decode(schemaSpecific.substring(0, end));\r\n    List<String> toList = params.getQueryParameters(TO);\r\n    if (recipient.length() != 0) {\r\n        toList.add(0, recipient);\r\n    }\r\n    List<String> ccList = params.getQueryParameters(CC);\r\n    List<String> bccList = params.getQueryParameters(BCC);\r\n    Address[] toAddresses = toAddressArray(toList);\r\n    Address[] ccAddresses = toAddressArray(ccList);\r\n    Address[] bccAddresses = toAddressArray(bccList);\r\n    String subject = getFirstParameterValue(params, SUBJECT);\r\n    String body = getFirstParameterValue(params, BODY);\r\n    String inReplyTo = getFirstParameterValue(params, IN_REPLY_TO);\r\n    String inReplyToMessageId = null;\r\n    if (inReplyTo != null) {\r\n        try {\r\n            List<String> inReplyToMessageIds = MessageIdParser.parseList(inReplyTo);\r\n            inReplyToMessageId = inReplyToMessageIds.get(0);\r\n        } catch (MimeHeaderParserException e) {\r\n            Timber.w(e, \"Ignoring invalid in-reply-to value within the mailto: link.\");\r\n        }\r\n    }\r\n    return new MailTo(toAddresses, ccAddresses, bccAddresses, inReplyToMessageId, subject, body);\r\n}\n--------------------------------------------------\npublic static MailTo parse(Uri uri) throws NullPointerException, IllegalArgumentException {\r\n    if (uri == null || uri.toString() == null) {\r\n        throw new NullPointerException(\"Argument 'uri' must not be null\");\r\n    }\r\n    if (!isMailTo(uri)) {\r\n        throw new IllegalArgumentException(\"Not a mailto scheme\");\r\n    }\r\n    String schemaSpecific = uri.getSchemeSpecificPart();\r\n    int end = schemaSpecific.indexOf('?');\r\n    if (end == -1) {\r\n        end = schemaSpecific.length();\r\n    }\r\n    CaseInsensitiveParamWrapper params = new CaseInsensitiveParamWrapper(Uri.parse(\"foo://bar?\" + uri.getEncodedQuery()));\r\n    // Extract the recipient's email address from the mailto URI if there's one.\r\n    String recipient = Uri.decode(schemaSpecific.substring(0, end));\r\n    List<String> toList = params.getQueryParameters(TO);\r\n    if (recipient.length() != 0) {\r\n        toList.add(0, recipient);\r\n    }\r\n    List<String> ccList = params.getQueryParameters(CC);\r\n    List<String> bccList = params.getQueryParameters(BCC);\r\n    Address[] toAddresses = toAddressArray(toList);\r\n    Address[] ccAddresses = toAddressArray(ccList);\r\n    Address[] bccAddresses = toAddressArray(bccList);\r\n    String subject = getFirstParameterValue(params, SUBJECT);\r\n    String body = getFirstParameterValue(params, BODY);\r\n    String inReplyTo = getFirstParameterValue(params, IN_REPLY_TO);\r\n    String inReplyToMessageId = null;\r\n    if (inReplyTo != null) {\r\n        try {\r\n            List<String> inReplyToMessageIds = MessageIdParser.parseList(inReplyTo);\r\n            inReplyToMessageId = inReplyToMessageIds.get(0);\r\n        } catch (MimeHeaderParserException e) {\r\n            Timber.w(e, \"Ignoring invalid in-reply-to value within the mailto: link.\");\r\n        }\r\n    }\r\n    return new MailTo(toAddresses, ccAddresses, bccAddresses, inReplyToMessageId, subject, body);\r\n}\n--------------------------------------------------\n", "import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\npublic List<String> getQueryParameters(String key) {\r\n    List<String> params = new ArrayList<>();\r\n    for (String paramName : uri.getQueryParameterNames()) {\r\n        if (paramName.equalsIgnoreCase(key)) {\r\n            params.addAll(uri.getQueryParameters(paramName));\r\n        }\r\n    }\r\n    return params;\r\n}" ],
  "Android-Password-Store/128" : [ "                when {\n                    hasPrevious -> addAction(generateAction(PlayerNotificationAction.PREVIOUS))\r\n                    else -> addAction(generateAction(PlayerNotificationAction.REWIND))\n--------------------------------------------------\n                    hasPrevious -> addAction(generateAction(PlayerNotificationAction.PREVIOUS))\n                    else -> addAction(generateAction(PlayerNotificationAction.REWIND))\r\n                }\n--------------------------------------------------\n                }\n                addAction(generateAction(playbackAction))\r\n                when {\n--------------------------------------------------\n                when {\n                    hasNext -> addAction(generateAction(PlayerNotificationAction.NEXT))\r\n                    else -> addAction(generateAction(PlayerNotificationAction.FAST_FORWARD))\n--------------------------------------------------\n                    hasNext -> addAction(generateAction(PlayerNotificationAction.NEXT))\n                    else -> addAction(generateAction(PlayerNotificationAction.FAST_FORWARD))\r\n                }", "import org.jellyfin.mobile.utils.Constants.MEDIA_PLAYER_NOTIFICATION_ID\nimport org.jellyfin.mobile.utils.Constants\nimport org.jellyfin.mobile.R\nimport androidx.annotation.StringRes\nimport android.content.Intent\nimport android.content.Context\nimport android.app.Service\nimport android.app.PendingIntent\nimport android.app.Notification\nprivate fun generateAction(icon: Int, @StringRes title: Int, intentAction: String): Notification.Action {\r\n        val intent = Intent(applicationContext, RemotePlayerService::class.java).apply {\r\n            action = intentAction\r\n        }\r\n        val pendingIntent = PendingIntent.getService(\r\n            applicationContext,\r\n            MEDIA_PLAYER_NOTIFICATION_ID,\r\n            intent,\r\n            Constants.PENDING_INTENT_FLAGS,\r\n        )\r\n        @Suppress(\"DEPRECATION\")\r\n        return Notification.Action.Builder(icon, getString(title), pendingIntent).build()\r\n    }\nimport android.app.Notification\nimport android.app.PendingIntent\nimport android.app.Service\nimport android.content.Context\nimport android.content.Intent\nimport androidx.annotation.StringRes\nimport org.jellyfin.mobile.R\nimport org.jellyfin.mobile.utils.Constants\nimport org.jellyfin.mobile.utils.Constants.MEDIA_PLAYER_NOTIFICATION_ID" ],
  "Android-Password-Store/124" : [ "", "import androidx.recyclerview.widget.RecyclerView.ViewHolder\nimport androidx.recyclerview.widget.RecyclerView\noverride fun clearView(recyclerView: RecyclerView, viewHolder: ViewHolder) {\r\n        viewHolder.itemView.translationX = 0f\r\n        viewHolder.itemView.translationY = 0f\r\n        viewHolder.itemView.elevation = 0f\r\n    }\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)\nImport(names=[androidx, recyclerview, widget, RecyclerView, ViewHolder], wildcard=false, alias=null)" ],
  "Android-Password-Store/61" : [ "            run(from, V12_6) {\n                setInstallDetails(from)\r\n            }\n--------------------------------------------------\n        } else {\n            setInstallDetails(to)\r\n        }", "import com.todoroo.andlib.utility.DateUtilities.now\nprivate fun setInstallDetails(version: Int) {\r\n        preferences.installVersion = version\r\n        preferences.installDate = now()\r\n    }\nimport com.todoroo.andlib.utility.DateUtilities.now" ],
  "Android-Password-Store/126" : [ "", "import androidx.recyclerview.widget.RecyclerView.ViewHolder\nimport androidx.recyclerview.widget.RecyclerView\noverride fun clearView(recyclerView: RecyclerView, viewHolder: ViewHolder) {\r\n        viewHolder.itemView.translationX = 0f\r\n        viewHolder.itemView.translationY = 0f\r\n        viewHolder.itemView.elevation = 0f\r\n    }\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)\nImport(names=[androidx, recyclerview, widget, RecyclerView, ViewHolder], wildcard=false, alias=null)" ],
  "Android-Password-Store/64" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1171" : [ "listener.onLongClick(adapterPosition)", "import com.omgodse.notally.room.BaseNote\noverride fun onLongClick(position: Int) {\r\n        if (position != -1) {\r\n            adapter?.currentList?.get(position)?.let { item ->\r\n                if (item is BaseNote) {\r\n                    handleNoteSelection(item.id, position, item)\r\n                }\r\n            }\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, room, BaseNote], wildcard=false, alias=null)" ],
  "Trail-Sense/1172" : [ "                itemTouchHelper.stopSwipe(viewHolder)\n                notifyItemChanged(messageListItem)\r\n            }\n--------------------------------------------------\n        val position = adapter.getPosition(item) ?: return\n        adapter.notifyItemChanged(position)\r\n    }", "private fun notifyItemChanged(item: MessageListItem) {\r\n        val position = adapter.getPosition(item) ?: return\r\n        adapter.notifyItemChanged(position)\r\n    }" ],
  "Android-Password-Store/68" : [ "public void show(Callback prefsChanged) {\r\n    SwipeActions.Actions actions = SwipeActions.getPrefsWithDefaults(context, tag);\r\n    leftAction = actions.left;\r\n    rightAction = actions.right;\r\n    final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(context);\r\n    keys = SwipeActions.swipeActions;\r\n    String forFragment = \"\";\r\n    switch(tag) {\r\n        case InboxFragment.TAG:\r\n            forFragment = context.getString(R.string.inbox_label);\r\n            keys = Stream.of(keys).filter(a -> !a.getId().equals(SwipeAction.TOGGLE_PLAYED) && !a.getId().equals(SwipeAction.DELETE) && !a.getId().equals(SwipeAction.REMOVE_FROM_HISTORY)).toList();\r\n            break;\r\n        case AllEpisodesFragment.TAG:\r\n            forFragment = context.getString(R.string.episodes_label);\r\n            keys = Stream.of(keys).filter(a -> !a.getId().equals(SwipeAction.REMOVE_FROM_HISTORY)).toList();\r\n            break;\r\n        case CompletedDownloadsFragment.TAG:\r\n            forFragment = context.getString(R.string.downloads_label);\r\n            keys = Stream.of(keys).filter(a -> !a.getId().equals(SwipeAction.REMOVE_FROM_INBOX) && !a.getId().equals(SwipeAction.REMOVE_FROM_HISTORY) && !a.getId().equals(SwipeAction.START_DOWNLOAD)).toList();\r\n            break;\r\n        case FeedItemlistFragment.TAG:\r\n            forFragment = context.getString(R.string.individual_subscription);\r\n            keys = Stream.of(keys).filter(a -> !a.getId().equals(SwipeAction.REMOVE_FROM_HISTORY)).toList();\r\n            break;\r\n        case QueueFragment.TAG:\r\n            forFragment = context.getString(R.string.queue_label);\r\n            keys = Stream.of(keys).filter(a -> !a.getId().equals(SwipeAction.ADD_TO_QUEUE) && !a.getId().equals(SwipeAction.REMOVE_FROM_INBOX) && !a.getId().equals(SwipeAction.REMOVE_FROM_HISTORY)).toList();\r\n            break;\r\n        case PlaybackHistoryFragment.TAG:\r\n            forFragment = context.getString(R.string.playback_history_label);\r\n            keys = Stream.of(keys).filter(a -> !a.getId().equals(SwipeAction.REMOVE_FROM_INBOX)).toList();\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (!tag.equals(QueueFragment.TAG)) {\r\n        keys = Stream.of(keys).filter(a -> !a.getId().equals(SwipeAction.REMOVE_FROM_QUEUE)).toList();\r\n    }\r\n    builder.setTitle(context.getString(R.string.swipeactions_label) + \" - \" + forFragment);\r\n    SwipeactionsDialogBinding viewBinding = SwipeactionsDialogBinding.inflate(LayoutInflater.from(context));\r\n    builder.setView(viewBinding.getRoot());\r\n    viewBinding.enableSwitch.setOnCheckedChangeListener((compoundButton, b) -> {\r\n        viewBinding.actionLeftContainer.getRoot().setAlpha(b ? 1.0f : 0.4f);\r\n        viewBinding.actionRightContainer.getRoot().setAlpha(b ? 1.0f : 0.4f);\r\n    });\r\n    viewBinding.enableSwitch.setChecked(SwipeActions.isSwipeActionEnabled(context, tag));\r\n    setupSwipeDirectionView(viewBinding.actionLeftContainer, LEFT);\r\n    setupSwipeDirectionView(viewBinding.actionRightContainer, RIGHT);\r\n    builder.setPositiveButton(R.string.confirm_label, (dialog, which) -> {\r\n        savePrefs(tag, rightAction.getId(), leftAction.getId());\r\n        saveActionsEnabledPrefs(viewBinding.enableSwitch.isChecked());\r\n        prefsChanged.onCall();\r\n    });\r\n    builder.setNegativeButton(R.string.cancel_label, null);\r\n    builder.create().show();\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport de.danoeh.antennapod.fragment.swipeactions.SwipeActions\nimport de.danoeh.antennapod.fragment.swipeactions.SwipeAction\nimport de.danoeh.antennapod.R\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate void saveActionsEnabledPrefs(Boolean enabled) {\r\n    SharedPreferences prefs = context.getSharedPreferences(SwipeActions.PREF_NAME, Context.MODE_PRIVATE);\r\n    prefs.edit().putBoolean(SwipeActions.KEY_PREFIX_NO_ACTION + tag, enabled).apply();\r\n}" ],
  "Trail-Sense/1175" : [ "                } else {\n                    inViewItems.add(getMaxAmount(maxAmountData, coinServiceIn.token))\r\n                }", "import io.horizontalsystems.marketkit.models.Token\nimport io.horizontalsystems.bankwallet.modules.send.SendModule\nimport io.horizontalsystems.bankwallet.core.providers.Translator\nimport io.horizontalsystems.bankwallet.R\nprivate fun getMaxAmount(amountData: SendModule.AmountData, token: Token) =\r\n        ViewItem.Amount(\r\n            amountData.secondary?.getFormatted(),\r\n            \"${amountData.primary.getFormatted()} ${Translator.getString(R.string.Swap_AmountMax)}\",\r\n            ValueType.Outgoing,\r\n            token\r\n        )\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.core.providers.Translator\nimport io.horizontalsystems.bankwallet.modules.send.SendModule\nimport io.horizontalsystems.marketkit.models.Token" ],
  "Android-Password-Store/69" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport java.util.List\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    // Current directory chosen\r\n    if (mChosenDirectoryListener != null) {\r\n        // Call registered listener supplied with the chosen directory\r\n        mChosenDirectoryListener.onChosenDir(mDir);\r\n    }\r\n}" ],
  "Trail-Sense/1176" : [ "                } else {\n                    inViewItems.add(getMaxAmount(maxAmountData, coinServiceIn.token))\r\n                }", "import io.horizontalsystems.marketkit.models.Token\nimport io.horizontalsystems.bankwallet.modules.send.SendModule\nimport io.horizontalsystems.bankwallet.core.providers.Translator\nimport io.horizontalsystems.bankwallet.R\nprivate fun getMaxAmount(amountData: SendModule.AmountData, token: Token) =\r\n        ViewItem.Amount(\r\n            amountData.secondary?.getFormatted(),\r\n            \"${amountData.primary.getFormatted()} ${Translator.getString(R.string.Swap_AmountMax)}\",\r\n            ValueType.Outgoing,\r\n            token\r\n        )\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.core.providers.Translator\nimport io.horizontalsystems.bankwallet.modules.send.SendModule\nimport io.horizontalsystems.marketkit.models.Token" ],
  "Trail-Sense/1179" : [ "setUpImageView()", "import code.name.monkey.retromusic.R\nimport android.widget.ImageView\nprivate fun setUpImageView() {\n        loadCurrentImage()\n        items = listOf(\n            getString(R.string.pick_from_local_storage),\n            getString(R.string.web_search),\n            getString(R.string.remove_cover)\n        )\n        editorImage.setOnClickListener { show }\n    }" ],
  "VinylMusicPlayer/325" : [ "public static MailTo parse(Uri uri) throws NullPointerException, IllegalArgumentException {\r\n    if (uri == null || uri.toString() == null) {\r\n        throw new NullPointerException(\"Argument 'uri' must not be null\");\r\n    }\r\n    if (!isMailTo(uri)) {\r\n        throw new IllegalArgumentException(\"Not a mailto scheme\");\r\n    }\r\n    String schemaSpecific = uri.getSchemeSpecificPart();\r\n    int end = schemaSpecific.indexOf('?');\r\n    if (end == -1) {\r\n        end = schemaSpecific.length();\r\n    }\r\n    CaseInsensitiveParamWrapper params = new CaseInsensitiveParamWrapper(Uri.parse(\"foo://bar?\" + uri.getEncodedQuery()));\r\n    // Extract the recipient's email address from the mailto URI if there's one.\r\n    String recipient = Uri.decode(schemaSpecific.substring(0, end));\r\n    List<String> toList = params.getQueryParameters(TO);\r\n    if (recipient.length() != 0) {\r\n        toList.add(0, recipient);\r\n    }\r\n    List<String> ccList = params.getQueryParameters(CC);\r\n    List<String> bccList = params.getQueryParameters(BCC);\r\n    Address[] toAddresses = toAddressArray(toList);\r\n    Address[] ccAddresses = toAddressArray(ccList);\r\n    Address[] bccAddresses = toAddressArray(bccList);\r\n    String subject = getFirstParameterValue(params, SUBJECT);\r\n    String body = getFirstParameterValue(params, BODY);\r\n    String inReplyTo = getFirstParameterValue(params, IN_REPLY_TO);\r\n    String inReplyToMessageId = null;\r\n    if (inReplyTo != null) {\r\n        try {\r\n            List<String> inReplyToMessageIds = MessageIdParser.parseList(inReplyTo);\r\n            inReplyToMessageId = inReplyToMessageIds.get(0);\r\n        } catch (MimeHeaderParserException e) {\r\n            Timber.w(e, \"Ignoring invalid in-reply-to value within the mailto: link.\");\r\n        }\r\n    }\r\n    return new MailTo(toAddresses, ccAddresses, bccAddresses, inReplyToMessageId, subject, body);\r\n}\n--------------------------------------------------\npublic static MailTo parse(Uri uri) throws NullPointerException, IllegalArgumentException {\r\n    if (uri == null || uri.toString() == null) {\r\n        throw new NullPointerException(\"Argument 'uri' must not be null\");\r\n    }\r\n    if (!isMailTo(uri)) {\r\n        throw new IllegalArgumentException(\"Not a mailto scheme\");\r\n    }\r\n    String schemaSpecific = uri.getSchemeSpecificPart();\r\n    int end = schemaSpecific.indexOf('?');\r\n    if (end == -1) {\r\n        end = schemaSpecific.length();\r\n    }\r\n    CaseInsensitiveParamWrapper params = new CaseInsensitiveParamWrapper(Uri.parse(\"foo://bar?\" + uri.getEncodedQuery()));\r\n    // Extract the recipient's email address from the mailto URI if there's one.\r\n    String recipient = Uri.decode(schemaSpecific.substring(0, end));\r\n    List<String> toList = params.getQueryParameters(TO);\r\n    if (recipient.length() != 0) {\r\n        toList.add(0, recipient);\r\n    }\r\n    List<String> ccList = params.getQueryParameters(CC);\r\n    List<String> bccList = params.getQueryParameters(BCC);\r\n    Address[] toAddresses = toAddressArray(toList);\r\n    Address[] ccAddresses = toAddressArray(ccList);\r\n    Address[] bccAddresses = toAddressArray(bccList);\r\n    String subject = getFirstParameterValue(params, SUBJECT);\r\n    String body = getFirstParameterValue(params, BODY);\r\n    String inReplyTo = getFirstParameterValue(params, IN_REPLY_TO);\r\n    String inReplyToMessageId = null;\r\n    if (inReplyTo != null) {\r\n        try {\r\n            List<String> inReplyToMessageIds = MessageIdParser.parseList(inReplyTo);\r\n            inReplyToMessageId = inReplyToMessageIds.get(0);\r\n        } catch (MimeHeaderParserException e) {\r\n            Timber.w(e, \"Ignoring invalid in-reply-to value within the mailto: link.\");\r\n        }\r\n    }\r\n    return new MailTo(toAddresses, ccAddresses, bccAddresses, inReplyToMessageId, subject, body);\r\n}\n--------------------------------------------------\n", "import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\npublic List<String> getQueryParameters(String key) {\r\n    List<String> params = new ArrayList<>();\r\n    for (String paramName : uri.getQueryParameterNames()) {\r\n        if (paramName.equalsIgnoreCase(key)) {\r\n            params.addAll(uri.getQueryParameters(paramName));\r\n        }\r\n    }\r\n    return params;\r\n}" ],
  "Trail-Sense/1177" : [ "        if (changes.isNotEmpty()) {\n            client.uploadChanges(collection, changes)\r\n            applyEntries(account, caldavCalendar, changes, isLocalChange = true)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.etebase.client.Collection\nimport android.content.Context\nsuspend fun uploadChanges(collection: Collection, items: List<Item>) {\r\n        val itemManager = etebase.collectionManager.getItemManager(collection)\r\n        withContext(Dispatchers.IO) {\r\n            itemManager.batch(items.toTypedArray())\r\n        }\r\n    }\nImport(names=[com, etebase, client, Collection], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/1178" : [ "        if (changes.isNotEmpty()) {\n            client.uploadChanges(collection, changes)\r\n            applyEntries(account, caldavCalendar, changes, isLocalChange = true)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.etebase.client.Collection\nimport android.content.Context\nsuspend fun uploadChanges(collection: Collection, items: List<Item>) {\r\n        val itemManager = etebase.collectionManager.getItemManager(collection)\r\n        withContext(Dispatchers.IO) {\r\n            itemManager.batch(items.toTypedArray())\r\n        }\r\n    }\nImport(names=[com, etebase, client, Collection], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/321" : [ "public void run() {\r\n    try {\r\n        r.run();\r\n    } finally {\r\n        scheduleNext();\r\n    }\r\n}\n--------------------------------------------------\n// Verify databas\r\nprotected void verifyDatabase() {\r\n    try {\r\n        Thread t = new Thread() {\r\n\r\n            public void run() {\r\n                mDatasource.removeDuplicateRecords();\r\n            }\r\n        };\r\n        t.run();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\n--------------------------------------------------\n", "public void run() {\r\n    try {\r\n        r.run();\r\n    } finally {\r\n        scheduleNext();\r\n    }\r\n}" ],
  "VinylMusicPlayer/319" : [ "@Action\r\nint check(final int codePoint) {\r\n    final int action;\r\n    MetadataRepo.Node node = mCurrentNode.get(codePoint);\r\n    switch(mState) {\r\n        case STATE_WALKING:\r\n            if (node != null) {\r\n                mCurrentNode = node;\r\n                mCurrentDepth += 1;\r\n                action = ACTION_ADVANCE_END;\r\n            } else {\r\n                if (isTextStyle(codePoint)) {\r\n                    action = reset();\r\n                } else if (isEmojiStyle(codePoint)) {\r\n                    action = ACTION_ADVANCE_END;\r\n                } else if (mCurrentNode.getData() != null) {\r\n                    if (mCurrentDepth == 1) {\r\n                        if (shouldUseEmojiPresentationStyleForSingleCodepoint()) {\r\n                            mFlushNode = mCurrentNode;\r\n                            action = ACTION_FLUSH;\r\n                            reset();\r\n                        } else {\r\n                            action = reset();\r\n                        }\r\n                    } else {\r\n                        mFlushNode = mCurrentNode;\r\n                        action = ACTION_FLUSH;\r\n                        reset();\r\n                    }\r\n                } else {\r\n                    action = reset();\r\n                }\r\n            }\r\n            break;\r\n        case STATE_DEFAULT:\r\n        default:\r\n            if (node == null) {\r\n                action = reset();\r\n            } else {\r\n                mState = STATE_WALKING;\r\n                mCurrentNode = node;\r\n                mCurrentDepth = 1;\r\n                action = ACTION_ADVANCE_END;\r\n            }\r\n            break;\r\n    }\r\n    mLastCodepoint = codePoint;\r\n    return action;\r\n}\n--------------------------------------------------\n@Action\r\nint check(final int codePoint) {\r\n    final int action;\r\n    MetadataRepo.Node node = mCurrentNode.get(codePoint);\r\n    switch(mState) {\r\n        case STATE_WALKING:\r\n            if (node != null) {\r\n                mCurrentNode = node;\r\n                mCurrentDepth += 1;\r\n                action = ACTION_ADVANCE_END;\r\n            } else {\r\n                if (isTextStyle(codePoint)) {\r\n                    action = reset();\r\n                } else if (isEmojiStyle(codePoint)) {\r\n                    action = ACTION_ADVANCE_END;\r\n                } else if (mCurrentNode.getData() != null) {\r\n                    if (mCurrentDepth == 1) {\r\n                        if (shouldUseEmojiPresentationStyleForSingleCodepoint()) {\r\n                            mFlushNode = mCurrentNode;\r\n                            action = ACTION_FLUSH;\r\n                            reset();\r\n                        } else {\r\n                            action = reset();\r\n                        }\r\n                    } else {\r\n                        mFlushNode = mCurrentNode;\r\n                        action = ACTION_FLUSH;\r\n                        reset();\r\n                    }\r\n                } else {\r\n                    action = reset();\r\n                }\r\n            }\r\n            break;\r\n        case STATE_DEFAULT:\r\n        default:\r\n            if (node == null) {\r\n                action = reset();\r\n            } else {\r\n                mState = STATE_WALKING;\r\n                mCurrentNode = node;\r\n                mCurrentDepth = 1;\r\n                action = ACTION_ADVANCE_END;\r\n            }\r\n            break;\r\n    }\r\n    mLastCodepoint = codePoint;\r\n    return action;\r\n}\n--------------------------------------------------\n", "import android.util.Log;\r\nimport android.util.Log\nimport androidx.recyclerview.selection.Shared.DEBUG\n/**\r\n * Immediately \"Stops\" active gesture selection, and resets all related state.\r\n */\r\n@Override\r\npublic void reset() {\r\n    if (DEBUG)\r\n        Log.d(TAG, \"Received reset request.\");\r\n    mStarted = false;\r\n    mScroller.reset();\r\n}" ],
  "VinylMusicPlayer/316" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "VinylMusicPlayer/799" : [ "", "import android.os.Bundle;\r\nimport android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    mFragment = this;\r\n}" ],
  "VinylMusicPlayer/315" : [ "                val allSongs = songRepository.songs().toMutableList()\n                makeShuffleList(allSongs, -1)\n                musicService.openQueue(allSongs, 0, true)\n--------------------------------------------------\n                this.shuffleMode = shuffleMode\n                makeShuffleList(playingQueue, getPosition())\n                position = 0\n--------------------------------------------------\n            if (shuffleMode == SHUFFLE_MODE_SHUFFLE) {\n                makeShuffleList(this.playingQueue, startPosition)\n                position = 0", "import code.name.monkey.retromusic.model.Song\nfun makeShuffleList(listToShuffle: MutableList<Song>, current: Int) {\n        if (listToShuffle.isEmpty()) return\n        if (current >= 0) {\n            val song = listToShuffle.removeAt(current)\n            listToShuffle.shuffle()\n            listToShuffle.add(0, song)\n        } else {\n            listToShuffle.shuffle()\n        }\n    }" ],
  "VinylMusicPlayer/317" : [ "@Override\r\npublic final int onStartCommand(Intent intent, int flags, int startId) {\r\n    boolean success = mRunning.compareAndSet(false, true);\r\n    if (success) {\r\n        // The service wasn't running yet.\r\n        Timber.i(\"DatabaseUpgradeService started\");\r\n        acquireWakelock();\r\n        startUpgradeInBackground();\r\n    } else {\r\n        // We're already running, so don't start the upgrade process again. But send the current\r\n        // progress via broadcast.\r\n        sendProgressBroadcast(mAccountUuid, mProgress, mProgressEnd);\r\n    }\r\n    return START_STICKY;\r\n}\n--------------------------------------------------\n", "import android.app.Service\n/**\r\n * Start a background thread for upgrading the databases.\r\n */\r\nprivate void startUpgradeInBackground() {\r\n    new Thread(\"DatabaseUpgradeService\") {\r\n\r\n        @Override\r\n        public void run() {\r\n            upgradeDatabases();\r\n            stopService();\r\n        }\r\n    }.start();\r\n}" ],
  "Android-Password-Store/134" : [ "    AppCompatDelegate.setDefaultNightMode(settingsRepository.getAppThemeAsNightMode())\n    super.onCreate(savedInstanceState)\r\n    val surface2Color = SurfaceColors.SURFACE_2.getColor(this)\n--------------------------------------------------\n{\n    super.onCreate(savedInstanceState)\r\n    val presetId = intent.getStringExtra(EXTRA_PRESET_ID)\n--------------------------------------------------\nsave(it)\n--------------------------------------------------\nsave(subscription.subscription)\n--------------------------------------------------\nappDb.subscriptions().save(it.toRoomDto())", "import com.github.ashutoshgngwr.noice.models.toRoomDto\nimport com.github.ashutoshgngwr.noice.models.Alarm\nsuspend fun save(alarm: Alarm): Int {\r\n    val alarmId = appDb.alarms().save(alarm.toRoomDto())\r\n    val saved = alarm.copy(id = alarmId.toInt())\r\n    alarmManager.cancel(saved)\r\n    if (saved.isEnabled) {\r\n      alarmManager.setAlarmClock(saved)\r\n    }\r\n\r\n    return saved.id\r\n  }\nimport com.github.ashutoshgngwr.noice.models.Alarm\nimport com.github.ashutoshgngwr.noice.models.toRoomDto" ],
  "Android-Password-Store/72" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == MenuHelper.save) {\r\n        return onActionDoneClick();\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    boolean result;\r\n    result = datePeriodItemSelected(item);\r\n    if (result)\r\n        return true;\r\n    result = isStatusSelectionHandled(item);\r\n    if (result)\r\n        return true;\r\n    result = isFilterSelected(item);\r\n    if (result)\r\n        return true;\r\n    switch(item.getItemId()) {\r\n        case R.id.menu_add_transaction_account:\r\n            startCheckingAccountActivity();\r\n            result = true;\r\n            break;\r\n        case R.id.menu_export_to_csv:\r\n            if (mAllDataListFragment != null && mAccount != null)\r\n                mAllDataListFragment.exportDataToCSVFile(mAccount.getName());\r\n            result = true;\r\n            break;\r\n        default:\r\n            result = false;\r\n            break;\r\n    }\r\n    // If not consumed here (true), send for further processing to the parent.\r\n    if (result) {\r\n        return result;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport com.money.manager.ex.core.MenuHelper;\r\nimport com.money.manager.ex.core.MenuHelper\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == MenuHelper.save) {\r\n        return onActionDoneClick();\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "Android-Password-Store/137" : [ "{\n      commandSoundPlaybackService(true) {\r\n        action = ACTION_PLAY_SOUND\n--------------------------------------------------\n{\n      commandSoundPlaybackService(false) {\r\n        action = ACTION_STOP_SOUND\n--------------------------------------------------\n      require(volume in 0F..1F) { \"volume must be in range [0, 1], got: $volume\" }\n      commandSoundPlaybackService(false) {\r\n        action = ACTION_SET_VOLUME\n--------------------------------------------------\n      require(volume in 0F..1F) { \"volume must be in range [0, 1], got: $volume\" }\n      commandSoundPlaybackService(false) {\r\n        action = ACTION_SET_SOUND_VOLUME\n--------------------------------------------------\n{\n      commandSoundPlaybackService(false) {\r\n        action = ACTION_PAUSE\n--------------------------------------------------\n{\r\n      commandSoundPlaybackService(true) { action = ACTION_RESUME }\r\n    }\n--------------------------------------------------\n{\r\n      commandSoundPlaybackService(false) { action = ACTION_STOP }\r\n    }\n--------------------------------------------------\n{\n      commandSoundPlaybackService(true) {\r\n        action = ACTION_PLAY_PRESET\n--------------------------------------------------\n      prefs.edit(commit = true) { putLong(PREF_SCHEDULED_STOP_MILLIS, atMillis) }\n      commandSoundPlaybackService(false) {\r\n        action = ACTION_SCHEDULE_STOP\n--------------------------------------------------\n      prefs.edit { remove(PREF_SCHEDULED_STOP_MILLIS) }\n      commandSoundPlaybackService(false) { action = ACTION_CLEAR_STOP_SCHEDULE }\r\n    }\n--------------------------------------------------\n{\n      commandSoundPlaybackService(false) {\r\n        action = ACTION_SET_AUDIO_USAGE\n--------------------------------------------------\n{\n      commandSoundPlaybackService(false) {\r\n        action = ACTION_SAVE_CURRENT_PRESET", "import androidx.core.content.ContextCompat\nimport android.os.Build\nimport android.content.Intent\nimport android.content.Context\nprivate inline fun commandSoundPlaybackService(\r\n      foreground: Boolean,\r\n      intentBuilder: Intent.() -> Unit\r\n    ) {\r\n      val intent = Intent(context, SoundPlaybackService::class.java)\r\n      intentBuilder.invoke(intent)\r\n      if (foreground) {\r\n        ContextCompat.startForegroundService(context, intent)\r\n      } else {\r\n        context.startService(intent)\r\n      }\r\n    }\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Build\nimport androidx.core.content.ContextCompat" ],
  "Android-Password-Store/74" : [ "                                Box {\n                                    var failed by remember { mutableStateOf(false) }\r\n                                    AsyncImage(\n--------------------------------------------------\n                                            .clickable { openAttachment(it) },\n                                        onError = { failed = true }\r\n                                    )\n--------------------------------------------------\n                                    )\n                                    if (failed) {\r\n                                        NoThumbnail(\n--------------------------------------------------\nfail(e)\n--------------------------------------------------\n401, 403 -> fail(e)\n--------------------------------------------------\nfail(e, report = true)", "import timber.log.Timber\nimport org.tasks.R\nprivate fun fail(e: Throwable, report: Boolean = false): Result {\r\n        if (report) {\r\n            firebase.reportException(e)\r\n        } else {\r\n            Timber.e(e)\r\n        }\r\n        return Result.failure()\r\n    }\nImport(names=[org, tasks, R], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Android-Password-Store/141" : [ "\n        val viewAction = viewActionTemplatePendingIntent(context)\r\n        views.setPendingIntentTemplate(R.id.listView, viewAction)", "import com.fsck.k9.helper.PendingIntentCompat.FLAG_MUTABLE\nimport com.fsck.k9.activity.MessageList\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\nprivate fun viewActionTemplatePendingIntent(context: Context): PendingIntent {\r\n        val intent = MessageList.actionDisplayMessageTemplateIntent(\r\n            context,\r\n            openInUnifiedInbox = true,\r\n            messageViewOnly = true,\r\n        )\r\n\r\n        return PendingIntent.getActivity(context, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT or FLAG_MUTABLE)\r\n    }\nimport android.app.PendingIntent\nimport android.content.Context\nimport android.content.Intent\nimport com.fsck.k9.activity.MessageList\nimport com.fsck.k9.helper.PendingIntentCompat.FLAG_MUTABLE" ],
  "Android-Password-Store/75" : [ "super.onOptionsItemSelected(item)", "import code.name.monkey.retromusic.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when (item.itemId) {\n            android.R.id.home -> {\n                onBackPressedDispatcher.onBackPressed()\n                return true\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }\nImport(names=[android, view, MenuItem], wildcard=false, alias=null)" ],
  "Android-Password-Store/76" : [ "super.onOptionsItemSelected(item)", "import code.name.monkey.retromusic.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when (item.itemId) {\n            android.R.id.home -> {\n                onBackPressedDispatcher.onBackPressed()\n                return true\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }\nImport(names=[android, view, MenuItem], wildcard=false, alias=null)" ],
  "Android-Password-Store/143" : [ "    AppCompatDelegate.setDefaultNightMode(settingsRepository.getAppThemeAsNightMode())\n    super.onCreate(savedInstanceState)\r\n    val surface2Color = SurfaceColors.SURFACE_2.getColor(this)\n--------------------------------------------------\n{\n    super.onCreate(savedInstanceState)\r\n    val presetId = intent.getStringExtra(EXTRA_PRESET_ID)\n--------------------------------------------------\nsave(it)\n--------------------------------------------------\nsave(subscription.subscription)\n--------------------------------------------------\nappDb.subscriptions().save(it.toRoomDto())", "import com.github.ashutoshgngwr.noice.models.toRoomDto\nimport com.github.ashutoshgngwr.noice.models.Alarm\nsuspend fun save(alarm: Alarm): Int {\r\n    val alarmId = appDb.alarms().save(alarm.toRoomDto())\r\n    val saved = alarm.copy(id = alarmId.toInt())\r\n    alarmManager.cancel(saved)\r\n    if (saved.isEnabled) {\r\n      alarmManager.setAlarmClock(saved)\r\n    }\r\n\r\n    return saved.id\r\n  }\nimport com.github.ashutoshgngwr.noice.models.Alarm\nimport com.github.ashutoshgngwr.noice.models.toRoomDto" ],
  "MaterialFiles/625" : [ "", "import android.graphics.Bitmap\noverride fun toImage(): Image {\r\n        val bmp = innerBitmap ?: throw UnsupportedOperationException()\r\n        return AndroidImage(bmp)\r\n    }\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)" ],
  "MaterialFiles/627" : [ "{\n        val accounts = accountManager.getAccounts()\r\n        val usedAccountColors = accounts.map { it.chipColor }.toSet()\n--------------------------------------------------\n        val search = searchAccount.relatedSearch\n        val accounts = search.getAccounts(accountManager)\r\n\n--------------------------------------------------\naccountManager.getAccounts()\n--------------------------------------------------\ngetAccounts(accountManager).map {\n    it.uuid\n}", "override fun getAccounts(): List<Account> {\r\n        synchronized(accountLock) {\r\n            if (accountsMap == null) {\r\n                loadAccounts()\r\n            }\r\n\r\n            return accountsInOrder.toList()\r\n        }\r\n    }" ],
  "Trail-Sense/1187" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1184" : [ "viewModel.rename(item as MediaWrapper, name)\n--------------------------------------------------\nbookmarkModel.rename(media as Bookmark, name)\n--------------------------------------------------\nviewModel.rename(media as MediaWrapper, name)\n--------------------------------------------------\ninternalMedia.rename(currentMedia.title)\n--------------------------------------------------\n(media as? MediaWrapper)?.rename(name)\n--------------------------------------------------\nvideoGroup.rename(newName)\n--------------------------------------------------\nnewGroup.rename(medias[0].title)\n--------------------------------------------------\nmedia.rename(name)", "import org.videolan.medialibrary.interfaces.media.MediaWrapper\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nimport android.content.Context\nfun rename(media: MediaWrapper, name: String) {\r\n        viewModelScope.launch {\r\n            withContext(Dispatchers.IO) { media.rename(name) }\r\n            refresh()\r\n        }\r\n    }\nImport(names=[androidx, lifecycle, viewModelScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)\nImport(names=[org, videolan, medialibrary, interfaces, media, MediaWrapper], wildcard=false, alias=null)" ],
  "Trail-Sense/1185" : [ "restorePositions.delete(index)\n--------------------------------------------------\nplaylist.delete()\n--------------------------------------------------\ndelete(tmpUri, MediaStore.MediaColumns.DATA + \"=\\\"\" + newRingtone.absolutePath + \"\\\"\", null)\n--------------------------------------------------\nbookmarkModel.delete(bookmark)\n--------------------------------------------------\nviewModel.delete()\n--------------------------------------------------\nbrowserFavDao.delete(uri)\n--------------------------------------------------\ncustomDirectoryDao.delete(org.videolan.vlc.mediadb.models.CustomDirectory(path))\n--------------------------------------------------\nexternalSubDao.delete(mediaPath, idSubtitle)\n--------------------------------------------------\nwidgetDao.delete(id)\n--------------------------------------------------\ndocFile.delete()\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\ndelete(MediaStore.Files.getContentUri(\"external\"), MediaStore.Files.FileColumns.DATA + \"=?\", arrayOf(file.path))\n--------------------------------------------------\nfileOrDirectory.delete()\n--------------------------------------------------\ndelete(TvContractCompat.buildPreviewProgramUri(program.programId), null, null)", "import org.videolan.medialibrary.interfaces.media.Bookmark\nimport android.content.Context\nfun delete(bookmark: Bookmark) {\r\n        service?.currentMediaWrapper?.let { media ->\r\n            viewModelScope.launch {\r\n\r\n                withContext(Dispatchers.IO) {\r\n                    media.removeBookmark(bookmark.time)\r\n                }\r\n                refresh()\r\n            }\r\n        }\r\n    }\nImport(names=[org, videolan, medialibrary, interfaces, media, Bookmark], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/795" : [ "val currentSortOrder: String? = getSortOrder()\n--------------------------------------------------\nval order: String? = getSortOrder()", "fun getSortOrder(): String? {\n        if (sortOrder == null) {\n            sortOrder = loadSortOrder()\n        }\n        return sortOrder\n    }" ],
  "VinylMusicPlayer/798" : [ "@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == android.R.id.home) {\r\n        finish();\r\n        return true;\r\n    } else if (itemId == R.id.menu_force_light) {\r\n        onMenuForceLight();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == android.R.id.home) {\r\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    if (itemId == R.id.menu_enabled) {\r\n        boolean enabled = !item.isChecked();\r\n        item.setChecked(enabled);\r\n        onMenuEnable(enabled);\r\n        return true;\r\n    } else if (itemId == R.id.menu_show) {\r\n        onMenuShow();\r\n    } else if (itemId == R.id.menu_clear) {\r\n        onMenuClear();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "Trail-Sense/1188" : [ "super.createConfigurationContext(overrideConfiguration)", "import java.util.Locale\nimport com.fsck.k9.ui.base.extensions.currentLocale\nimport android.content.res.Configuration\nimport android.content.Context\noverride fun createConfigurationContext(overrideConfiguration: Configuration): Context {\r\n        overrideConfiguration.currentLocale = locale\r\n        return super.createConfigurationContext(overrideConfiguration)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, res, Configuration], wildcard=false, alias=null)\nImport(names=[com, fsck, k9, ui, base, extensions, currentLocale], wildcard=false, alias=null)\nImport(names=[java, util, Locale], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/314" : [ "super.onClick(v)", "import android.view.View\noverride fun onClick(v: View) {\n        if (MusicPlayerRemote.isPlaying) {\n            MusicPlayerRemote.pauseSong()\n        } else {\n            MusicPlayerRemote.resumePlaying()\n        }\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/305" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/788" : [ "                override fun handleOnBackPressed() {\n                    if (!handleBackPress()) {\n                        remove()", "import code.name.monkey.retromusic.views.BreadCrumbLayout.Crumb\noverride fun handleBackPress(): Boolean {\n        if (binding.breadCrumbs.popHistory()) {\n            setCrumb(binding.breadCrumbs.lastHistory(), false)\n            return true\n        }\n        return false\n    }\nimport code.name.monkey.retromusic.views.BreadCrumbLayout\nimport code.name.monkey.retromusic.views.BreadCrumbLayout.Crumb" ],
  "VinylMusicPlayer/307" : [ "@Override\r\nprotected void onHandleIntent(Intent intent) {\r\n    mNotificationsHelper = new NotificationsHelper(this).start(NotificationChannelNames.BACKUPS, R.drawable.ic_content_save_white_24dp, getString(R.string.working));\r\n    // If an alarm has been fired a notification must be generated\r\n    if (ACTION_DATA_EXPORT.equals(intent.getAction())) {\r\n        exportData(intent);\r\n    } else if (ACTION_DATA_IMPORT.equals(intent.getAction())) {\r\n        importData(intent);\r\n    } else if (SpringImportHelper.ACTION_DATA_IMPORT_SPRINGPAD.equals(intent.getAction())) {\r\n        importDataFromSpringpad(intent, mNotificationsHelper);\r\n    } else if (ACTION_DATA_DELETE.equals(intent.getAction())) {\r\n        deleteData(intent);\r\n    }\r\n}\n--------------------------------------------------\nprivate void importDataFromSpringpad(Intent intent, NotificationsHelper mNotificationsHelper) {\r\n    new SpringImportHelper(OmniNotes.getAppContext()).importDataFromSpringpad(intent, mNotificationsHelper);\r\n    String title = getString(R.string.data_import_completed);\r\n    String text = getString(R.string.click_to_refresh_application);\r\n    createNotification(intent, this, title, text);\r\n}\n--------------------------------------------------\n", "import java.util.Date;\r\nimport java.util.Date\npublic static String getString(long date, String format) {\r\n    Date d = new Date(date);\r\n    return getString(d, format);\r\n}" ],
  "VinylMusicPlayer/306" : [ "// private\r\nprivate int getPrecision() {\r\n    // if using a currency and currency precision is required, use that.\r\n    if (!this.roundToCurrencyDecimals || this.mCurrencyId == null)\r\n        return Constants.DEFAULT_PRECISION;\r\n    Currency currency = this.mCurrencyService.getCurrency(mCurrencyId);\r\n    if (currency == null)\r\n        return Constants.DEFAULT_PRECISION;\r\n    // get precision from the currency\r\n    NumericHelper helper = new NumericHelper(getActivity());\r\n    return helper.getNumberOfDecimals(currency.getScale());\r\n}\n--------------------------------------------------\nprivate Money getAmount() {\r\n    Money result;\r\n    // to round or not? Handle case when no base currency set.\r\n    if (this.roundToCurrencyDecimals && isCurrencySet()) {\r\n        NumericHelper numericHelper = new NumericHelper(getContext());\r\n        Currency currency = mCurrencyService.getCurrency(mCurrencyId);\r\n        result = numericHelper.truncateToCurrency(mAmount, currency);\r\n    } else {\r\n        result = mAmount;\r\n    }\r\n    return result;\r\n}\n--------------------------------------------------\n", "import com.money.manager.ex.domainmodel.Currency;\r\nimport com.money.manager.ex.domainmodel.Currency\npublic Currency getCurrency(String currencyCode) {\r\n    int id = getIdForCode(currencyCode);\r\n    return getCurrency(id);\r\n}" ],
  "Android-Password-Store/80" : [ "super.onOptionsItemSelected(item)", "import code.name.monkey.retromusic.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when (item.itemId) {\n            android.R.id.home -> {\n                onBackPressedDispatcher.onBackPressed()\n                return true\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }\nImport(names=[android, view, MenuItem], wildcard=false, alias=null)" ],
  "Android-Password-Store/145" : [ "saveAllPreferences()", "import androidx.preference.Preference\nimport androidx.core.content.edit\nprivate fun saveAllPreferences() {\r\n        preferenceManager.sharedPreferences!!.edit {\r\n            savePreferences(preferenceScreen, this)\r\n        }\r\n    }\nImport(names=[androidx, core, content, edit], wildcard=false, alias=null)" ],
  "Android-Password-Store/86" : [ "", "import org.tasks.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        if (permissionRequestor.requestAccountPermissions()) {\r\n            chooseAccount()\r\n        }\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Trail-Sense/1194" : [ "", "import io.reactivex.Flowable\nimport com.google.gson.JsonObject\noverride fun getTransactionWithPost(host: String, path: String, body: Map<String, Any>): Flowable<JsonObject> {\r\n        return ServiceFullTransaction.service(host)\r\n            .getFullTransactionWithPost(path, body.mapValues { it.value.toString() })\r\n    }\nImport(names=[io, reactivex, Flowable], wildcard=false, alias=null)" ],
  "Trail-Sense/1192" : [ "songRepository.songsByFilePath(line)\n--------------------------------------------------\n                if (songFile != null) {\n                    songs = songRepository.songsByFilePath(songFile.absolutePath, true)\n                }", "import code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.Constants\nimport android.database.Cursor\noverride fun songsByFilePath(filePath: String, ignoreBlacklist: Boolean): List<Song> {\n        return songs(\n            makeSongCursor(\n                Constants.DATA + \"=?\",\n                arrayOf(filePath),\n                ignoreBlacklist = ignoreBlacklist\n            )\n        )\n    }\nImport(names=[code, name, monkey, retromusic, Constants], wildcard=false, alias=null)" ],
  "Android-Password-Store/150" : [ "    binding.networkIndicator.apply {\n      setText(R.string.offline)\r\n      isVisible = true\n--------------------------------------------------\n      isVisible = true\n      TextViewCompat.setTextAppearance(\r\n        this,\n--------------------------------------------------\n    binding.networkIndicator.apply {\n      setText(R.string.back_online)\r\n      TextViewCompat.setTextAppearance(\n--------------------------------------------------\n      setText(R.string.back_online)\n      TextViewCompat.setTextAppearance(\r\n        this,\n--------------------------------------------------\nsetText(resId)\n--------------------------------------------------\nsetText(\"$text\\n\\n$playStoreURL\\n$fdroidURL\")", "import androidx.databinding.BindingAdapter\nimport androidx.core.content.res.ResourcesCompat\nimport androidx.annotation.StringRes\nimport android.widget.TextView\nimport android.view.View\n\r\n@BindingAdapter(\"android:text\")\r\nfun TextView.setText(@StringRes resId: Int?) {\r\n  if (resId == null || resId == ResourcesCompat.ID_NULL) {\r\n    text = null\r\n  } else {\r\n    setText(resId)\r\n  }\r\n}\nImport(names=[android, widget, TextView], wildcard=false, alias=null)\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)\nImport(names=[androidx, core, content, res, ResourcesCompat], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/785" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "VinylMusicPlayer/784" : [ "        if (savedInstanceState == null) {\n            switchToFileAdapter()\n            setCrumb(\n--------------------------------------------------\n{\n        switchToFileAdapter()\n    }\n--------------------------------------------------\n{\n        switchToFileAdapter()\n        setCrumb(", "import java.io.File\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.adapter.SongFileAdapter\nimport code.name.monkey.retromusic.R\nimport androidx.recyclerview.widget.RecyclerView\nprivate fun switchToFileAdapter() {\n        adapter = SongFileAdapter(mainActivity, LinkedList(), R.layout.item_list, this)\n        adapter!!.registerAdapterDataObserver(\n            object : RecyclerView.AdapterDataObserver() {\n                override fun onChanged() {\n                    super.onChanged()\n                    checkIsEmpty()\n                }\n            })\n        binding.recyclerView.adapter = adapter\n        checkIsEmpty()\n    }\nimport androidx.recyclerview.widget.RecyclerView\nimport code.name.monkey.retromusic.R\nimport code.name.monkey.retromusic.adapter.SongFileAdapter\nimport code.name.monkey.retromusic.model.Song\nimport java.io.File" ],
  "VinylMusicPlayer/787" : [ "", "override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }" ],
  "VinylMusicPlayer/786" : [ "", "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    savePreference();\r\n}" ],
  "VinylMusicPlayer/781" : [ "@Override\r\npublic void onViewCreated(@NonNull View view, Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    butPlay.setOnClickListener(v -> {\r\n        if (controller == null) {\r\n            return;\r\n        }\r\n        if (controller.getMedia() != null && controller.getMedia().getMediaType() == MediaType.VIDEO && controller.getStatus() != PlayerStatus.PLAYING) {\r\n            controller.playPause();\r\n            getContext().startActivity(PlaybackService.getPlayerActivityIntent(getContext(), controller.getMedia()));\r\n        } else {\r\n            controller.playPause();\r\n        }\r\n    });\r\n    loadMediaInfo();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    EventBus.getDefault().register(this);\r\n}\n--------------------------------------------------\n", "import android.os.Bundle;\r\nimport android.view.View;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.os.Bundle\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    EventBus.getDefault().register(this);\r\n}" ],
  "MaterialFiles/630" : [ "{\r\n        transactionsService.loadNext()\r\n    }\n--------------------------------------------------\n        if (newRecords.isNotEmpty() && newRecords.all { it.spam }) {\n            loadNext()\r\n        } else {\n--------------------------------------------------\n        executorService.submit {\n            transactionRecordRepository.loadNext()\r\n        }\n--------------------------------------------------\nservice.loadNext()", "override fun loadNext() {\r\n        if (!allLoaded.get()) {\r\n            loadItems(loadedPageNumber + 1)\r\n        }\r\n    }" ],
  "Android-Password-Store/94" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Android-Password-Store/96" : [ "override fun onPause() {\n    super.onPause()\n    localBroadcastManager.unregisterReceiver(refreshReceiver)\n}", "import org.tasks.R\nimport com.todoroo.astrid.api.Filter\noverride fun onResume() {\r\n        super.onResume()\r\n        localBroadcastManager.registerRefreshListReceiver(refreshReceiver)\r\n        updateFilters()\r\n    }" ],
  "Feeder/444" : [ "envelopeToMoreUrl { env: ActivityEnvelope ->\n    env.urls().api().moreActivities()\n}\n--------------------------------------------------\nenvelopeToMoreUrl {\n    it.urls().api().moreMessageThreads()\n}\n--------------------------------------------------\nenvelopeToMoreUrl { env ->\n    env.urls()?.api()?.moreProjects()\n}\n--------------------------------------------------\nenvelopeToMoreUrl { env: DiscoverEnvelope ->\n    env.urls()?.api()?.moreProjects()\n}", "import io.reactivex.functions.Function\nfun envelopeToMoreUrl(envelopeToMoreUrl: Function<Envelope, String>): Builder<Data, Envelope, Params> {\r\n            this.envelopeToMoreUrl = envelopeToMoreUrl\r\n            return this\r\n        }\nImport(names=[io, reactivex, functions, Function], wildcard=false, alias=null)" ],
  "Feeder/446" : [ "uri.getQueryParameter(\"backed\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"page\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"per_page\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"pledged\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"social\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"starred\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"tag_id\").toInteger()", "import java.text.NumberFormat\nfun String?.toInteger(): Int? {\r\n    return if (this != null) {\r\n        try {\r\n            this.toInt()\r\n        } catch (e: NumberFormatException) {\r\n            null\r\n        }\r\n    } else null\r\n}\nImport(names=[java, text, NumberFormat], wildcard=false, alias=null)" ],
  "Trail-Sense/1120" : [ "fragment?.handleUnlocking {\n    openSearch()\n}\n--------------------------------------------------\nfragment?.handleUnlocking {\n    saveNote()\n}\n--------------------------------------------------\nfragment?.handleUnlocking {\n    displayRenameDialog()\n}\n--------------------------------------------------\nfragment?.handleUnlocking {\n    shareText()\n}\n--------------------------------------------------\nfragment?.handleUnlocking {\n    tryExportAsFile()\n}\n--------------------------------------------------\nfragment?.handleUnlocking {\n    printText()\n}\n--------------------------------------------------\nfragment?.handleUnlocking {\n    displayDeleteNotePrompt()\n}\n--------------------------------------------------\nfragment?.handleUnlocking {\n    removeDoneItems()\n}\n--------------------------------------------------\nfragment?.handleUnlocking {\n    displaySortChecklistDialog()\n}\n--------------------------------------------------\nhandleUnlocking()", "import com.simplemobiletools.commons.helpers.PROTECTION_NONE\nfun handleUnlocking(callback: (() -> Unit)? = null) {\r\n        if (callback != null && (note!!.protectionType == PROTECTION_NONE || shouldShowLockedContent)) {\r\n            callback()\r\n            return\r\n        }\r\n\r\n        activity?.performSecurityCheck(\r\n            protectionType = note!!.protectionType,\r\n            requiredHash = note!!.protectionHash,\r\n            successCallback = { _, _ ->\r\n                shouldShowLockedContent = true\r\n                checkLockState()\r\n                callback?.invoke()\r\n            }\r\n        )\r\n    }\nImport(names=[com, simplemobiletools, commons, helpers, PROTECTION_NONE], wildcard=false, alias=null)" ],
  "Feeder/448" : [ "                                    }\n                                    .map(TagFilters::toTagFilter)\r\n                                    .sort())", "import com.todoroo.astrid.api.TagFilter\nfun toTagFilter(): TagFilter = TagFilter(\r\n        tagData = tagData,\r\n        count = count,\r\n    )\nimport com.todoroo.astrid.api.TagFilter" ],
  "Feeder/449" : [ "SQLiteDatabase.openDatabase(file.absolutePath, null, SQLiteDatabase.OPEN_READWRITE)\n--------------------------------------------------\nDatabaseUtils.openDatabase()", "import android.database.sqlite.SQLiteDatabase\nfun openDatabase(): SQLiteDatabase {\r\n        checkNotNull(opener)\r\n        return opener!!.writableDatabase\r\n    }\nImport(names=[android, database, sqlite, SQLiteDatabase], wildcard=false, alias=null)" ],
  "Iconify/272" : [ "context.getColorFromAttr(R.attr.colorPrimary)\n--------------------------------------------------\ncontext.getColorFromAttr(android.R.attr.colorBackground)\n--------------------------------------------------\ncontext.getColorFromAttr(android.R.attr.textColorPrimary)\n--------------------------------------------------\ncontext.getColorFromAttr(android.R.attr.textColorSecondary)", "import de.grobox.transportr.R\nimport androidx.core.content.ContextCompat\nimport androidx.annotation.AttrRes\nimport android.util.TypedValue\nimport android.content.Context\nfun Context.getColorFromAttr(@AttrRes attrColor: Int, typedValue: TypedValue = TypedValue(), resolveRefs: Boolean = true): Int {\r\n        theme.resolveAttribute(attrColor, typedValue, resolveRefs)\r\n        return ContextCompat.getColor(this, typedValue.run { if (resourceId != 0) resourceId else data })\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, util, TypedValue], wildcard=false, alias=null)\nImport(names=[androidx, annotation, AttrRes], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/774" : [ "", "import android.os.Bundle;\r\nimport android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    mFragment = this;\r\n}" ],
  "Trail-Sense/1124" : [ "", "import org.videolan.medialibrary.interfaces.media.MediaWrapper\noverride fun getAndRemoveDestination(): MediaWrapper? {\r\n        val destination = privateDestination\r\n        privateDestination = null\r\n        return destination\r\n    }\nImport(names=[org, videolan, medialibrary, interfaces, media, MediaWrapper], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/773" : [ "", "override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }" ],
  "Trail-Sense/1122" : [ "", "import org.tasks.R\nprivate fun updateBackground() {\r\n        if (selected || moving) {\r\n            rowBody.setBackgroundColor(selectedColor)\r\n        } else {\r\n            rowBody.setBackgroundResource(background)\r\n            rowBody.background.jumpToCurrentState()\r\n        }\r\n    }\nimport org.tasks.R" ],
  "Trail-Sense/1128" : [ "updatePlayPauseDrawableState()", "import code.name.monkey.retromusic.helper.MusicPlayerRemote\nimport code.name.monkey.retromusic.R\nprivate fun updatePlayPauseDrawableState() {\n        if (MusicPlayerRemote.isPlaying) {\n            binding.playPauseButton.setImageResource(R.drawable.ic_pause)\n        } else {\n            binding.playPauseButton.setImageResource(R.drawable.ic_play_arrow)\n        }\n    }" ],
  "Trail-Sense/1129" : [ "{\n    var expanded by remember { mutableStateOf(false) }\r\n    Scaffold(\n--------------------------------------------------\n                        modifier = Modifier.testTag(LoginToutTestTag.OPTIONS_ICON.name),\n                        onClick = { expanded = !expanded },\r\n                        enabled = true\n--------------------------------------------------\n                            KSLoginDropdownMenu(\n                                expanded = expanded,\r\n                                onDismissed = { expanded = !expanded },\n--------------------------------------------------\n                                expanded = expanded,\n                                onDismissed = { expanded = !expanded },\r\n                                onTermsOfUseClicked = onTermsOfUseClicked,\n--------------------------------------------------\nif (isExpanded) collapse() else expand()", "private fun expand() {\r\n        expandAnimation()\r\n        isExpanded = true\r\n    }" ],
  "Trail-Sense/1126" : [ "return getWritableOrReadableDatabase(writable)", "import android.database.sqlite.SQLiteDatabase\nprivate fun getWritableOrReadableDatabase(writable: Boolean): SQLiteDatabase {\r\n            return if (writable) {\r\n                super.getWritableDatabase()\r\n            } else {\r\n                super.getReadableDatabase()\r\n            }\r\n        }\nImport(names=[android, database, sqlite, SQLiteDatabase], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/771" : [ "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        listener = (NoteFragmentListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.getClass() + \" must implement \" + NoteFragmentListener.class);\r\n    }\r\n    repo = NotesRepository.getInstance(context);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onDetach() {\r\n    super.onDetach();\r\n    listener = null;\r\n}" ],
  "Trail-Sense/601" : [ "        onDispose {\n            lifecycleOwner.lifecycle.removeObserver(observer)\r\n        }\n--------------------------------------------------\naddAccountViewModel.removeObserver(this)\n--------------------------------------------------\nupdateAccountViewModel.removeObserver(this)", "fun removeObserver(owner: LifecycleOwner) {\r\n        data.removeObservers(owner)\r\n        error.removeObservers(owner)\r\n    }" ],
  "Trail-Sense/1127" : [ "updateRemoteListSummary()", "import org.tasks.R\nimport kotlinx.coroutines.launch\nimport androidx.preference.Preference\nimport androidx.lifecycle.lifecycleScope\nprivate fun updateRemoteListSummary() = lifecycleScope.launch {\r\n        val defaultFilter = defaultFilterProvider.getDefaultList()\r\n        findPreference(R.string.p_default_list).summary = defaultFilter.title\r\n    }\nImport(names=[androidx, lifecycle, lifecycleScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)" ],
  "Trail-Sense/602" : [ "", "import org.videolan.vlc.R\nimport androidx.databinding.BindingAdapter\nimport android.view.ViewGroup\nimport android.view.View\n\r\n@BindingAdapter(\"time\", \"resolution\")\r\nfun setLayoutHeight(view: View, time: String, resolution: String) {\r\n    val layoutParams = view.layoutParams\r\n    layoutParams.height = if (time.isEmpty() && resolution.isEmpty())\r\n        ViewGroup.LayoutParams.MATCH_PARENT\r\n    else\r\n        ViewGroup.LayoutParams.WRAP_CONTENT\r\n    view.layoutParams = layoutParams\r\n}\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)" ],
  "Trail-Sense/603" : [ "super.onSizeChanged(w, h, oldw, oldh)", "import io.horizontalsystems.bankwallet.R\noverride fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\r\n        super.onSizeChanged(w, h, oldw, oldh)\r\n        mSize = if (w < h) w else h\r\n        updateRectAngleBounds()\r\n    }" ],
  "fcitx5-android/121" : [ "", "@Override\r\npublic void onCreate() {\r\n    // Create a new authenticator object\r\n    mAuthenticator = new Authenticator(this);\r\n}" ],
  "Iconify/281" : [ "public int getMightyColor() {\r\n    boolean isDarkBg = ColorUtil.INSTANCE.isColorLight(ATHUtil.INSTANCE.resolveColor(context, com.google.android.material.R.attr.colorSurface));\r\n    if (isDarkBg) {\r\n        if (isColorLight(backgroundColor)) {\r\n            return primaryTextColor;\r\n        } else {\r\n            return backgroundColor;\r\n        }\r\n    } else {\r\n        if (isColorLight(backgroundColor)) {\r\n            return backgroundColor;\r\n        } else {\r\n            return primaryTextColor;\r\n        }\r\n    }\r\n}\n--------------------------------------------------\npublic static int resolveAmbientColor(Context context, int notificationColor) {\r\n    final int resolvedColor = resolveColor(context, notificationColor);\r\n    int color = resolvedColor;\r\n    color = NotificationColorUtil.ensureTextContrastOnBlack(color);\r\n    if (color != resolvedColor) {\r\n        if (DEBUG) {\r\n            Log.w(TAG, String.format(\"Ambient contrast of notification for %s is %s (over black)\" + \" by changing #%s to #%s\", context.getPackageName(), NotificationColorUtil.contrastChange(resolvedColor, color, Color.BLACK), Integer.toHexString(resolvedColor), Integer.toHexString(color)));\r\n        }\r\n    }\r\n    return color;\r\n}\n--------------------------------------------------\n", "import android.app.Notification;\r\nimport android.content.Context;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.content.ContextCompat\nimport android.graphics.Color\nimport android.content.Context\nimport android.app.Notification\n/**\r\n * Resolves {@param color} to an actual color if it is {@link Notification#COLOR_DEFAULT}\r\n */\r\npublic static int resolveColor(Context context, int color) {\r\n    if (color == Notification.COLOR_DEFAULT) {\r\n        return ContextCompat.getColor(context, android.R.color.background_dark);\r\n    }\r\n    return color;\r\n}" ],
  "fcitx5-android/125" : [ "setText(\"\")\n--------------------------------------------------\nnextButton.setText(R.string.next_step)\n--------------------------------------------------\nnextButton.setText(R.string.close)\n--------------------------------------------------\nhelpTitle.setText(currentTip!!.titleText)\n--------------------------------------------------\nsetText(if (activity.isTablet()) currentTip!!.descriptionTextTablet else currentTip!!.descriptionText)\n--------------------------------------------------\ninput.setText(oldName)\n--------------------------------------------------\neditAddress.setText(networkUri.host)\n--------------------------------------------------\neditUsername.editText!!.setText(networkUri.userInfo)\n--------------------------------------------------\neditFolder.setText(networkUri.path)\n--------------------------------------------------\neditServername.setText(networkName)\n--------------------------------------------------\neditPort.setText(if (port != -1) port.toString() else getPortForProtocol(position))\n--------------------------------------------------\neditPort.setText(port)\n--------------------------------------------------\neditFolder.setText(\"/home/\" + editUsername.editText!!.text.toString())\n--------------------------------------------------\n(view.findViewById<View>(R.id.tim_pic_title) as TextView).setText(getTitle())\n--------------------------------------------------\nnewNameInputtext.setText(name)\n--------------------------------------------------\nbinding.dialogPlaylistSave.setText(R.string.save)\n--------------------------------------------------\nsetText(res.getString(if (enabled) R.string.audio_digital_output_enabled else R.string.audio_digital_output_disabled))\n--------------------------------------------------\ntoast.setText(R.string.audio_digital_failed)\n--------------------------------------------------\npermDescription.setText(R.string.permission_onboarding_no_perm)\n--------------------------------------------------\npermDescription.setText(R.string.permission_onboarding_perm_media)\n--------------------------------------------------\npermDescription.setText(R.string.permission_onboarding_perm_all)\n--------------------------------------------------\nsetText(if (AndroidDevices.canUseSystemNightMode()) R.string.daynight_system_explanation else R.string.daynight_legacy_explanation)\n--------------------------------------------------\nthemeDescription.setText(R.string.light_theme)\n--------------------------------------------------\nthemeDescription.setText(R.string.enable_black_theme)\n--------------------------------------------------\ngetCurrentInput()?.setText(keyboardButton.tag as String)\n--------------------------------------------------\ngetCurrentInput()?.setText(\"0\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"1\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"2\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"3\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"4\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"5\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"6\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"7\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"8\")\n--------------------------------------------------\ngetCurrentInput()?.setText(\"9\")\n--------------------------------------------------\nbinding.searchEditText.setText(query)\n--------------------------------------------------\nplaylistSearchText.editText?.setText(\"\")\n--------------------------------------------------\nhelpDescription.setText(currentTip!!.descriptionText)\n--------------------------------------------------\nhelpTitle.setText(R.string.tips_player_controls)\n--------------------------------------------------\nhelpDescription.setText(R.string.tips_player_controls_description)\n--------------------------------------------------\nhelpTitle.setText(R.string.tips_audio_sub)\n--------------------------------------------------\nhelpDescription.setText(R.string.tap)\n--------------------------------------------------\nhelpTitle.setText(R.string.lock_orientation)\n--------------------------------------------------\nhelpDescription.setText(R.string.lock_orientation_description)\n--------------------------------------------------\nhelpTitle.setText(R.string.play)\n--------------------------------------------------\nhelpDescription.setText(R.string.tips_play_description)\n--------------------------------------------------\nhelpTitle.setText(R.string.aspect_ratio)\n--------------------------------------------------\nhelpDescription.setText(R.string.aspect_ratio_description)\n--------------------------------------------------\nhelpTitle.setText(R.string.advanced_options)\n--------------------------------------------------\nhelpDescription.setText(R.string.advanced_options_description)\n--------------------------------------------------\nsuper.setText(text, type)", "override fun setText(text: CharSequence?, type: BufferType?) {\r\n        if (width != 0) computeTextSize()\r\n\r\n        super.setText(text, type)\r\n    }" ],
  "Feeder/441" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/442" : [ "view.notes.setText(requireArguments().getString(\"notes\")!!)\n--------------------------------------------------\nbinding.xTimesPerMonthTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.everyXDaysTextView.setText(freqDenominator.toString())\n--------------------------------------------------\nbinding.xTimesPerWeekTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.xTimesPerYDaysXTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.xTimesPerYDaysYTextView.setText(freqDenominator.toString())\n--------------------------------------------------\nview.notes.setText(originalNotes)\n--------------------------------------------------\nsetText(when {\n    originalValue < 0.01 -> \"0\"\n    else -> DecimalFormat(\"#.##\").format(originalValue)\n})\n--------------------------------------------------\nview.value.setText((Entry.SKIP.toDouble() / 1000).toString())\n--------------------------------------------------\nbinding.nameInput.setText(habit.name)\n--------------------------------------------------\nbinding.questionInput.setText(habit.question)\n--------------------------------------------------\nbinding.notesInput.setText(habit.description)\n--------------------------------------------------\nbinding.unitInput.setText(habit.unit)\n--------------------------------------------------\nbinding.targetInput.setText(habit.targetValue.toString())\n--------------------------------------------------\nfindViewById<TextView>(R.id.message).setText(getEmptyMessage())\n--------------------------------------------------\nring.setText(text)", "fun setText(text: String?) {\r\n        this.text = text\r\n        invalidate()\r\n    }" ],
  "Feeder/443" : [ "cookiePersistor(caldavAccount?.username).clearSession(caldavAccount?.url)", "import okhttp3.HttpUrl.Companion.toHttpUrlOrNull\nimport com.franmontiel.persistentcookiejar.persistence.CookiePersistor\nfun CookiePersistor.clearSession(url: String?) {\r\n            val httpUrl = url?.toHttpUrlOrNull() ?: return\r\n            removeAll(loadAll().filter { it.matches(httpUrl) })\r\n        }\nImport(names=[com, franmontiel, persistentcookiejar, persistence, CookiePersistor], wildcard=false, alias=null)" ],
  "fcitx5-android/119" : [ "        if (list == null) {\n            var defaultOrder = preferences.getStringValue(prefId)\r\n            if (isNullOrEmpty(defaultOrder)) {\n--------------------------------------------------\n        )\n        preferences.getStringValue(R.string.p_default_recurrence)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n                }\n        preferences.getStringValue(R.string.p_default_location)\r\n                ?.takeIf { it.isNotBlank() }\n--------------------------------------------------\n        if (tags.isEmpty()) {\n            preferences.getStringValue(R.string.p_default_tags)\r\n                    ?.split(\",\")\n--------------------------------------------------\npreferences.getStringValue(R.string.p_dashclock_filter)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_account)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_google_drive_backup_folder)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_list)\n--------------------------------------------------\npreferences.getStringValue(resId)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_start_of_week)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_recurrence)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_location)\n--------------------------------------------------\npreferences.getStringValue(R.string.p_default_tags)", "import timber.log.Timber\nfun getStringValue(key: String?): String? = try {\r\n        prefs.getString(key, null)\r\n    } catch (e: Exception) {\r\n        Timber.e(e)\r\n        null\r\n    }\nimport timber.log.Timber" ],
  "Iconify/284" : [ "", "import android.os.Build;\r\nimport androidx.annotation.NonNull;\r\nimport java.io.File;\r\nimport java.io.File\nimport androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.annotation.NonNull\nimport android.os.Build\n/**\r\n * Configures Room to create and open the database using a pre-packaged database file.\r\n * <p>\r\n * Room does not open the pre-packaged database, instead it copies it into the internal\r\n * app database folder and then opens it. The given file must be accessible and the right\r\n * permissions must be granted for Room to copy the file.\r\n * <p>\r\n * The pre-packaged database schema will be validated. It might be best to create your\r\n * pre-packaged database schema utilizing the exported schema files generated when\r\n * {@link Database#exportSchema()} is enabled.\r\n * <p>\r\n * The {@link Callback#onOpen(SupportSQLiteDatabase)} method can be used as an indicator\r\n * that the pre-packaged database was successfully opened by Room and can be cleaned up.\r\n * <p>\r\n * This method is not supported for an in memory database {@link Builder}.\r\n *\r\n * @param databaseFile The database file.\r\n *\r\n * @return This {@link Builder} instance.\r\n */\r\n@NonNull\r\npublic Builder<T> createFromFile(@NonNull File databaseFile) {\r\n    mCopyFromFile = databaseFile;\r\n    return this;\r\n}" ],
  "Trail-Sense/1131" : [ "innerCanvas.drawText(text, x.toDp(), y.toDp() + 0.6f * mHeight, textPaint)\n--------------------------------------------------\ncanvas.drawText(dfMonth!!.format(time), rect!!.centerX(), rect.centerY() - 0.1f * em, pText!!)\n--------------------------------------------------\ncanvas.drawText(dfYear!!.format(time), rect.centerX(), rect.centerY() + 0.9f * em, pText!!)\n--------------------------------------------------\ncanvas.drawText(day, rGrid.right - columnWidth, rGrid.top + rowHeight / 2 + 0.25f * em, pText!!)\n--------------------------------------------------\nactiveCanvas.drawText(text!!, rect!!.centerX(), rect!!.centerY() + 0.4f * em, pRing!!)\n--------------------------------------------------\ncanvas!!.drawText(yearText, rect!!.centerX(), rect.bottom + em * 2.2f, pText!!)\n--------------------------------------------------\ncanvas!!.drawText(text, rect!!.centerX(), rect.bottom + em * 1.2f, pText!!)\n--------------------------------------------------\ndrawText(String.format(\"%d%%\", 100 - i * 100 / nRows), rGrid.left + 0.5f * em, rGrid.top + 1f * em, pText!!)\n--------------------------------------------------\ncanvas.drawText(streak.length.toLong().toString(), rect.centerX(), yOffset, paint!!)\n--------------------------------------------------\ncanvas.drawText(startLabel, gap - textMargin, yOffset, paint!!)\n--------------------------------------------------\ncanvas.drawText(endLabel, internalWidth - gap + textMargin, yOffset, paint!!)\n--------------------------------------------------\ncanvas.drawText(labels[row], rect.left + stop - padding, rect.centerY() - yTextAdjust, paint!!)\n--------------------------------------------------\ncanvas.drawText(completedText, barRect.centerX(), barRect.centerY() - yTextAdjust, paint!!)\n--------------------------------------------------\ncanvas.drawText(remainingText, barRect.centerX(), barRect.centerY() - yTextAdjust, paint!!)\n--------------------------------------------------\ncanvas.drawText(label, rect.centerX(), rect.centerY(), paint)\n--------------------------------------------------\ncanvas.drawText(lines[0], rect.centerX(), y1.toFloat(), paint)\n--------------------------------------------------\ncanvas.drawText(lines[1], rect.centerX(), y2.toFloat(), paint)\n--------------------------------------------------\ncanvas.drawText(label, rect.centerX(), rect.centerY(), pNumber)\n--------------------------------------------------\ncanvas.drawText(units, rect.centerX(), rect.centerY(), pUnit)", "import android.graphics.Paint\noverride fun drawText(text: String, x: Double, y: Double) {\r\n        innerCanvas.drawText(\r\n            text,\r\n            x.toDp(),\r\n            y.toDp() + 0.6f * mHeight,\r\n            textPaint\r\n        )\r\n    }" ],
  "Trail-Sense/1132" : [ "service.stop()\n--------------------------------------------------\nlogcat!!.stop()\n--------------------------------------------------\nmIDebugLogService!!.stop()\n--------------------------------------------------\ncurrentPlayingVisu?.stop()\n--------------------------------------------------\nminiVisualizer.stop()\n--------------------------------------------------\nplaylistModel.stop()\n--------------------------------------------------\nbinding.playing.stop()\n--------------------------------------------------\nholder.binding.playing.stop()\n--------------------------------------------------\nviewModel.stop()\n--------------------------------------------------\nclient.stop()\n--------------------------------------------------\nkeycodeListener.stop()\n--------------------------------------------------\nstop(video = true)\n--------------------------------------------------\nservice?.stop()\n--------------------------------------------------\nplayer.statsDelegate.stop()\n--------------------------------------------------\nmediaplayer.stop()\n--------------------------------------------------\nstop()\n--------------------------------------------------\nplayer.stop()\n--------------------------------------------------\nif (currentIndex != nextIndex) next() else stop()\n--------------------------------------------------\nelse -> stop()\n--------------------------------------------------\nplaybackService.stop()\n--------------------------------------------------\nACTION_REMOTE_STOP -> stop()\n--------------------------------------------------\nif (settings.getBoolean(\"audio_task_removed\", false)) stop()\n--------------------------------------------------\nstop(systemExit = true)\n--------------------------------------------------\nplaylistManager.stop(systemExit, video)\n--------------------------------------------------\nif (isPlaying) stop() else setSleepTimer(null)\n--------------------------------------------------\nsuper.stop()\n--------------------------------------------------\nif (it.connected) start() else stop()\n--------------------------------------------------\ndiscoverer.stop()\n--------------------------------------------------\nprovider.stop()", "override fun stop() {\r\n        if (url == null) clearListener()\r\n        return super.stop()\r\n    }" ],
  "Iconify/283" : [ "private static RoomDatabase.Builder<DB> getBuilder(Context context) {\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n    boolean wal = prefs.getBoolean(\"wal\", true);\r\n    Log.i(\"DB wal=\" + wal);\r\n    RoomDatabase.Builder<DB> builder = Room.databaseBuilder(context, DB.class, DB_NAME).//.openHelperFactory(new RequerySQLiteOpenHelperFactory())\r\n    //.setQueryExecutor()\r\n    setTransactionExecutor(executor).setJournalMode(// using the latest sqlite\r\n    wal ? JournalMode.WRITE_AHEAD_LOGGING : JournalMode.TRUNCATE).addCallback(new Callback() {\r\n\r\n        @Override\r\n        public void onCreate(@NonNull SupportSQLiteDatabase db) {\r\n            defaultSearches(db, context);\r\n        }\r\n\r\n        @Override\r\n        public void onOpen(@NonNull SupportSQLiteDatabase db) {\r\n            try {\r\n                Map<String, String> crumb = new HashMap<>();\r\n                crumb.put(\"version\", Integer.toString(db.getVersion()));\r\n                crumb.put(\"WAL\", Boolean.toString(db.isWriteAheadLoggingEnabled()));\r\n                Log.breadcrumb(\"Database\", crumb);\r\n                // https://www.sqlite.org/pragma.html#pragma_auto_vacuum\r\n                // https://android.googlesource.com/platform/external/sqlite.git/+/6ab557bdc070f11db30ede0696888efd19800475%5E!/\r\n                boolean sqlite_auto_vacuum = prefs.getBoolean(\"sqlite_auto_vacuum\", false);\r\n                String mode = (sqlite_auto_vacuum ? \"FULL\" : \"INCREMENTAL\");\r\n                Log.i(\"Set PRAGMA auto_vacuum=\" + mode);\r\n                try (Cursor cursor = db.query(\"PRAGMA auto_vacuum=\" + mode + \";\")) {\r\n                    // required\r\n                    cursor.moveToNext();\r\n                }\r\n                // https://sqlite.org/pragma.html#pragma_synchronous\r\n                boolean sqlite_sync_extra = prefs.getBoolean(\"sqlite_sync_extra\", true);\r\n                String sync = (sqlite_sync_extra ? \"EXTRA\" : \"NORMAL\");\r\n                Log.i(\"Set PRAGMA synchronous=\" + sync);\r\n                try (Cursor cursor = db.query(\"PRAGMA synchronous=\" + sync + \";\")) {\r\n                    // required\r\n                    cursor.moveToNext();\r\n                }\r\n                // https://www.sqlite.org/pragma.html#pragma_journal_size_limit\r\n                Log.i(\"Set PRAGMA journal_size_limit=\" + DB_JOURNAL_SIZE_LIMIT);\r\n                try (Cursor cursor = db.query(\"PRAGMA journal_size_limit=\" + DB_JOURNAL_SIZE_LIMIT + \";\")) {\r\n                    // required\r\n                    cursor.moveToNext();\r\n                }\r\n                // https://www.sqlite.org/pragma.html#pragma_cache_size\r\n                Integer cache_size = getCacheSizeKb(context);\r\n                if (cache_size != null) {\r\n                    // kibibytes\r\n                    cache_size = -cache_size;\r\n                    Log.i(\"Set PRAGMA cache_size=\" + cache_size);\r\n                    // TODO CASA PRAGMA does not support placeholders\r\n                    try (Cursor cursor = db.query(\"PRAGMA cache_size=\" + cache_size + \";\")) {\r\n                        // required\r\n                        cursor.moveToNext();\r\n                    }\r\n                }\r\n                // Prevent long running operations from getting an exclusive lock\r\n                // https://www.sqlite.org/pragma.html#pragma_cache_spill\r\n                Log.i(\"Set PRAGMA cache_spill=0\");\r\n                try (Cursor cursor = db.query(\"PRAGMA cache_spill=0;\")) {\r\n                    // required\r\n                    cursor.moveToNext();\r\n                }\r\n                Log.i(\"Set PRAGMA recursive_triggers=off\");\r\n                try (Cursor cursor = db.query(\"PRAGMA recursive_triggers=off;\")) {\r\n                    // required\r\n                    cursor.moveToNext();\r\n                }\r\n                // https://www.sqlite.org/pragma.html\r\n                for (String pragma : DB_PRAGMAS) if (!\"compile_options\".equals(pragma) || BuildConfig.DEBUG) {\r\n                    // TODO CASA PRAGMA does not support placeholders\r\n                    try (Cursor cursor = db.query(\"PRAGMA \" + pragma + \";\")) {\r\n                        boolean has = false;\r\n                        while (cursor.moveToNext()) {\r\n                            has = true;\r\n                            Log.i(\"Get PRAGMA \" + pragma + \"=\" + (cursor.isNull(0) ? \"<null>\" : cursor.getString(0)));\r\n                        }\r\n                        if (!has)\r\n                            Log.i(\"Get PRAGMA \" + pragma + \"=<?>\");\r\n                    } catch (Throwable ex) {\r\n                        Log.e(ex);\r\n                    }\r\n                }\r\n                if (BuildConfig.DEBUG && false)\r\n                    dropTriggers(db);\r\n                createTriggers(db);\r\n            } catch (Throwable ex) {\r\n                /*\r\n                                at eu.faircode.email.DB$6.onOpen(DB.java:522)\r\n                                at eu.faircode.email.DB_Impl$1.onOpen(DB_Impl.java:171)\r\n                                at androidx.room.RoomOpenHelper.onOpen(RoomOpenHelper.java:136)\r\n                                at androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper.onOpen(FrameworkSQLiteOpenHelper.kt:287)\r\n                                at android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(SQLiteOpenHelper.java:427)\r\n                                at android.database.sqlite.SQLiteOpenHelper.getWritableDatabase(SQLiteOpenHelper.java:316)\r\n                                at androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper.getWritableOrReadableDatabase(FrameworkSQLiteOpenHelper.kt:232)\r\n                                at androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper.innerGetDatabase(FrameworkSQLiteOpenHelper.kt:190)\r\n                                at androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper$OpenHelper.getSupportDatabase(FrameworkSQLiteOpenHelper.kt:151)\r\n                                at androidx.sqlite.db.framework.FrameworkSQLiteOpenHelper.getWritableDatabase(FrameworkSQLiteOpenHelper.kt:104)\r\n                                at androidx.room.RoomDatabase.inTransaction(RoomDatabase.java:706)\r\n                             */\r\n                Log.forceCrashReporting();\r\n                Log.e(ex);\r\n                // FrameworkSQLiteOpenHelper.innerGetDatabase will delete the database\r\n                throw ex;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onDestructiveMigration(@NonNull SupportSQLiteDatabase db) {\r\n            Log.e(\"WTF destructive migration\");\r\n        }\r\n    });\r\n    if (BuildConfig.DEBUG && false)\r\n        builder.setQueryCallback(new QueryCallback() {\r\n\r\n            @Override\r\n            public void onQuery(@NonNull String sqlQuery, @NonNull List<Object> bindArgs) {\r\n                Log.i(\"query=\" + sqlQuery);\r\n            }\r\n        }, Helper.getParallelExecutor());\r\n    return builder;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n/**\r\n * Creates a RoomDatabase.Builder for a persistent database. Once a database is built, you\r\n * should keep a reference to it and re-use it.\r\n *\r\n * @param context The context for the database. This is usually the Application context.\r\n * @param klass   The abstract class which is annotated with {@link Database} and extends\r\n *                {@link RoomDatabase}.\r\n * @param name    The name of the database file.\r\n * @param <T>     The type of the database class.\r\n * @return A {@code RoomDatabaseBuilder<T>} which you can use to create the database.\r\n */\r\n@SuppressWarnings(\"WeakerAccess\")\r\n@NonNull\r\npublic static <T extends RoomDatabase> RoomDatabase.Builder<T> databaseBuilder(@NonNull Context context, @NonNull Class<T> klass, @NonNull String name) {\r\n    //noinspection ConstantConditions\r\n    if (name == null || name.trim().length() == 0) {\r\n        throw new IllegalArgumentException(\"Cannot build a database with null or empty name.\" + \" If you are trying to create an in memory database, use Room\" + \".inMemoryDatabaseBuilder\");\r\n    }\r\n    return new RoomDatabase.Builder<>(context, klass, name);\r\n}" ],
  "Trail-Sense/1136" : [ "                        ).toBitmap()\n                    val playPause = getPlayPauseBitmap(true)\n\n--------------------------------------------------\n{\n        getPlayPauseBitmap(isPlaying).also {\n            contentView?.setImageViewBitmap(R.id.action_play_pause, it)", "import code.name.monkey.retromusic.extensions.toBitmap\nimport code.name.monkey.retromusic.extensions.getTintedDrawable\nimport code.name.monkey.retromusic.R\nimport androidx.core.graphics.drawable.toBitmap\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nimport android.graphics.Bitmap\nprivate fun getPlayPauseBitmap(isPlaying: Boolean): Bitmap {\n        return context.getTintedDrawable(\n            if (isPlaying)\n                R.drawable.ic_pause_white_48dp\n            else\n                R.drawable.ic_play_arrow_white_48dp, primaryColor\n        ).toBitmap()\n    }\nimport android.graphics.Bitmap\nimport android.graphics.Color\nimport android.graphics.drawable.Drawable\nimport androidx.core.graphics.drawable.toBitmap\nimport code.name.monkey.retromusic.R\nimport code.name.monkey.retromusic.extensions.getTintedDrawable\nimport code.name.monkey.retromusic.extensions.toBitmap" ],
  "VinylMusicPlayer/764" : [ "", "import android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport it.feio.android.omninotes.databinding.FragmentDetailBinding;\r\nimport it.feio.android.omninotes.databinding.FragmentDetailBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    binding = FragmentDetailBinding.inflate(inflater, container, false);\r\n    return binding.getRoot();\r\n}" ],
  "Trail-Sense/1134" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/761" : [ "loadCurrentImage()", "import java.util\nimport code.name.monkey.retromusic.util.RetroColorUtil\nimport code.name.monkey.retromusic.R\nimport android.graphics.Color\nimport android.graphics.Bitmap\noverride fun loadCurrentImage() {\n        val bitmap = albumArt\n        setImageBitmap(\n            bitmap,\n            RetroColorUtil.getColor(\n                RetroColorUtil.generatePalette(bitmap),\n                defaultFooterColor()\n            )\n        )\n        deleteAlbumArt = false\n    }\nImport(names=[code, name, monkey, retromusic, R], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, util, RetroColorUtil], wildcard=false, alias=null)" ],
  "Trail-Sense/1137" : [ "service.stop()\n--------------------------------------------------\nlogcat!!.stop()\n--------------------------------------------------\nmIDebugLogService!!.stop()\n--------------------------------------------------\ncurrentPlayingVisu?.stop()\n--------------------------------------------------\nminiVisualizer.stop()\n--------------------------------------------------\nplaylistModel.stop()\n--------------------------------------------------\nbinding.playing.stop()\n--------------------------------------------------\nholder.binding.playing.stop()\n--------------------------------------------------\nviewModel.stop()\n--------------------------------------------------\nclient.stop()\n--------------------------------------------------\nkeycodeListener.stop()\n--------------------------------------------------\nstop(video = true)\n--------------------------------------------------\nservice?.stop()\n--------------------------------------------------\nplayer.statsDelegate.stop()\n--------------------------------------------------\nmediaplayer.stop()\n--------------------------------------------------\nstop()\n--------------------------------------------------\nplayer.stop()\n--------------------------------------------------\nif (currentIndex != nextIndex) next() else stop()\n--------------------------------------------------\nelse -> stop()\n--------------------------------------------------\nplaybackService.stop()\n--------------------------------------------------\nACTION_REMOTE_STOP -> stop()\n--------------------------------------------------\nif (settings.getBoolean(\"audio_task_removed\", false)) stop()\n--------------------------------------------------\nstop(systemExit = true)\n--------------------------------------------------\nplaylistManager.stop(systemExit, video)\n--------------------------------------------------\nif (isPlaying) stop() else setSleepTimer(null)\n--------------------------------------------------\nsuper.stop()\n--------------------------------------------------\nif (it.connected) start() else stop()\n--------------------------------------------------\ndiscoverer.stop()\n--------------------------------------------------\nprovider.stop()", "override fun stop() {\r\n        if (url == null) clearListener()\r\n        return super.stop()\r\n    }" ],
  "Trail-Sense/1138" : [ "", "import android.graphics.Paint\noverride fun fillArc(\r\n        centerX: Double,\r\n        centerY: Double,\r\n        radius: Double,\r\n        startAngle: Double,\r\n        swipeAngle: Double\r\n    ) {\r\n        paint.style = Paint.Style.FILL\r\n        innerCanvas.drawArc(\r\n            (centerX - radius).toDp(),\r\n            (centerY - radius).toDp(),\r\n            (centerX + radius).toDp(),\r\n            (centerY + radius).toDp(),\r\n            -startAngle.toFloat(),\r\n            -swipeAngle.toFloat(),\r\n            true,\r\n            paint\r\n        )\r\n    }\nImport(names=[android, graphics, Paint], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/760" : [ "fillViewsWithFileTags()", "import java.util\nimport code.name.monkey.retromusic.util.logD\nprivate fun fillViewsWithFileTags() {\n        binding.albumText.setText(albumTitle)\n        binding.albumArtistText.setText(albumArtistName)\n        binding.genreTitle.setText(genreName)\n        binding.yearTitle.setText(songYear)\n        logD(albumTitle + albumArtistName)\n    }\nImport(names=[code, name, monkey, retromusic, util, logD], wildcard=false, alias=null)" ],
  "Trail-Sense/615" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/616" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/617" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "Trail-Sense/618" : [ "relativeTop(pledgeAmountLabel, pledgeRoot)\n--------------------------------------------------\nrelativeTop(it, pledgeRoot)\n--------------------------------------------------\nrelativeTop(shippingRulesLabel, pledgeRoot)", "import com.kickstarter.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.graphics.Rect\nprivate fun relativeTop(view: View, parent: ViewGroup): Int {\r\n        val offsetViewBounds = Rect()\r\n        view.getDrawingRect(offsetViewBounds)\r\n        parent.offsetDescendantRectToMyCoords(view, offsetViewBounds)\r\n\r\n        return offsetViewBounds.top - parent.paddingTop\r\n    }\nImport(names=[android, graphics, Rect], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[com, kickstarter, R], wildcard=false, alias=null)" ],
  "fcitx5-android/110" : [ "                lifecycleScope.launch {\n                    val account = caldavDao.getAccountByUuid(calendar.account!!)\r\n                    listSettingsRequest.launch(\n--------------------------------------------------\ncaldavDao.getAccount(TYPE_GOOGLE_TASKS, accountName)\n--------------------------------------------------\ncaldavDao.getAccount(TYPE_MICROSOFT, email)\n--------------------------------------------------\ncaldavDao.getAccount(CaldavAccount.TYPE_TASKS, username)\n--------------------------------------------------\ngetAccount(name) != null\n--------------------------------------------------\ngetAccount(it)\n--------------------------------------------------\ngetAccount(accountName)", "import org.tasks.Strings.isNullOrEmpty\nimport android.accounts.Account\nfun getAccount(name: String?): Account? = if (isNullOrEmpty(name)) {\r\n        null\r\n    } else {\r\n        accountList.find { name.equals(it.name, ignoreCase = true) }\r\n    }\nImport(names=[android, accounts, Account], wildcard=false, alias=null)" ],
  "fcitx5-android/115" : [ "@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    if (getAutoStartGps()) {\r\n        // If autoStartGps, then stop it during pause\r\n        stopGps();\r\n    } else {\r\n        if (mTracker != null && ((mTracker.getState() == TrackerState.INITIALIZED) || (mTracker.getState() == TrackerState.INITIALIZING))) {\r\n            Log.e(getClass().getName(), \"mTracker.reset()\");\r\n            mTracker.reset();\r\n        }\r\n    }\r\n}\n--------------------------------------------------\npublic void onBackPressed() {\r\n    if (!getAutoStartGps() && mGpsStatus.isLogging()) {\r\n        stopGps();\r\n        updateView();\r\n    } else if (exit) {\r\n        // finish activity\r\n        super.onBackPressed();\r\n    } else {\r\n        final Resources res = this.getResources();\r\n        Toast.makeText(getApplicationContext(), res.getString(org.runnerup.common.R.string.Catch_backbuttonpress), Toast.LENGTH_SHORT).show();\r\n        exit = true;\r\n        new Handler().postDelayed(() -> exit = false, 3 * 1000);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.preference.PreferenceManager;\r\nimport org.runnerup.R\nimport android.preference.PreferenceManager\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate boolean getAutoStartGps() {\r\n    Context ctx = getApplicationContext();\r\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(ctx);\r\n    return pref.getBoolean(getString(R.string.pref_startgps), false);\r\n}" ],
  "fcitx5-android/114" : [ "      p.setVolume(volume * (soundPlayerVolumes[soundId] ?: 1F))\n      p.setStateChangeListener { onSoundPlayerStateChange(soundId, it) }\r\n    }\n--------------------------------------------------\n{\n    Log.d(LOG_TAG, \"onSoundPlayerStateChange: $soundId=$state\")\r\n    if (state == SoundPlayer.State.STOPPED) {", "import androidx.media3.common.C\nimport android.util.Log\nprivate fun onSoundPlayerStateChange(soundId: String, state: SoundPlayer.State) {\r\n    Log.d(LOG_TAG, \"onSoundPlayerStateChange: $soundId=$state\")\r\n    if (state == SoundPlayer.State.STOPPED) {\r\n      soundPlayers.remove(soundId)\r\n    }\r\n\r\n    if (soundPlayers.isEmpty()) {\r\n      audioFocusManager.abandonFocus()\r\n    }\r\n\r\n    reconcileState()\r\n    listener.onSoundStateChange(soundId, state)\r\n  }\nimport android.util.Log\nimport androidx.media3.common.C" ],
  "Feeder/452" : [ "", "import java.util.concurrent.TimeUnit\nimport okhttp3.OkHttpClient\nimport okhttp3.Interceptor\nimport okhttp3.Cache\nimport android.content.Context\nfun provideOkHttp(context: Context, cache: Cache): OkHttpClient {\n    return OkHttpClient.Builder()\n        .addNetworkInterceptor(logInterceptor())\n        .addInterceptor(headerInterceptor(context))\n        .connectTimeout(1, TimeUnit.SECONDS)\n        .readTimeout(1, TimeUnit.SECONDS)\n        .cache(cache)\n        .build()\n}\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[okhttp3, Cache], wildcard=false, alias=null)\nImport(names=[okhttp3, OkHttpClient], wildcard=false, alias=null)\nImport(names=[java, util, concurrent, TimeUnit], wildcard=false, alias=null)" ],
  "Iconify/255" : [ "@Override\r\npublic void onClick(View view) {\r\n    if (isPackageInstalled(\"com.irccloud.android\", LoginActivity.this)) {\r\n        startActivity(getPackageManager().getLaunchIntentForPackage(\"com.irccloud.android\"));\r\n    } else {\r\n        try {\r\n            IRCCloudLinkMovementMethod.launchBrowser(Uri.parse(\"market://details?id=com.irccloud.android\"), LoginActivity.this);\r\n        } catch (Exception e) {\r\n            IRCCloudLinkMovementMethod.launchBrowser(Uri.parse(\"https://play.google.com/store/apps/details?id=com.irccloud.android\"), LoginActivity.this);\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.pm.PackageManager.NameNotFoundException;\r\nimport android.content.pm.PackageManager.NameNotFoundException\nimport android.content.pm.PackageManager\nimport android.content.Context\nprivate boolean isPackageInstalled(String packagename, Context context) {\r\n    PackageManager pm = context.getPackageManager();\r\n    try {\r\n        pm.getPackageInfo(packagename, PackageManager.GET_ACTIVITIES);\r\n        return true;\r\n    } catch (NameNotFoundException e) {\r\n        return false;\r\n    }\r\n}" ],
  "MaterialFiles/1221" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1140" : [ "noteDao.updateNote(note)\n--------------------------------------------------\nnotesRepository.updateNote(note)", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Note\noverride suspend fun updateNote(note: Note) {\r\n        withContext(ioDispatcher) {\r\n            noteDao.updateNote(note)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Note], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/752" : [ "detailsViewModel.getAlbumArtist(album.albumArtist.toString())", "import kotlinx.coroutines.Dispatchers.IO\nimport code.name.monkey.retromusic.model.Artist\nimport code.name.monkey.retromusic.model.Album\nfun getAlbumArtist(artistName: String): LiveData<Artist> = liveData(IO) {\n        val artist = repository.albumArtistByName(artistName)\n        emit(artist)\n    }" ],
  "VinylMusicPlayer/751" : [ "@NonNull\r\npublic List<Song> getSavedOriginalPlayingQueue() {\r\n    return getQueue(ORIGINAL_PLAYING_QUEUE_TABLE_NAME);\r\n}\n--------------------------------------------------\n@NonNull\r\npublic List<Song> getSavedPlayingQueue() {\r\n    return getQueue(PLAYING_QUEUE_TABLE_NAME);\r\n}\n--------------------------------------------------\n", "import android.database.Cursor;\r\nimport androidx.annotation.NonNull;\r\nimport java.util.List;\r\nimport code.name.monkey.retromusic.repository.RealSongRepository;\r\nimport code.name.monkey.retromusic.repository.RealSongRepository\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.App\nimport java.util.List\nimport androidx.annotation.NonNull\nimport android.database.Cursor\nimport android.content.Context\n@NonNull\r\nprivate List<Song> getQueue(@NonNull final String tableName) {\r\n    Cursor cursor = getReadableDatabase().query(tableName, null, null, null, null, null, null);\r\n    return new RealSongRepository(App.Companion.getContext()).songs(cursor);\r\n}" ],
  "VinylMusicPlayer/753" : [ "LyricUtil.getEmbeddedSyncedLyrics(song.data)", "import java.io\nimport org.jaudiotagger.tag.FieldKey\nimport org.jaudiotagger.audio.AudioFileIO\nimport code.name.monkey.retromusic.model.lyrics.AbsSynchronizedLyrics\nfun getEmbeddedSyncedLyrics(data: String): String? {\n        val embeddedLyrics = try {\n            AudioFileIO.read(File(data)).tagOrCreateDefault.getFirst(FieldKey.LYRICS)\n        } catch (e: Exception) {\n            return null\n        }\n        return if (AbsSynchronizedLyrics.isSynchronized(embeddedLyrics)) {\n            embeddedLyrics\n        } else {\n            null\n        }\n    }\nImport(names=[org, jaudiotagger, audio, AudioFileIO], wildcard=false, alias=null)" ],
  "Trail-Sense/620" : [ "", "import de.schildbach.pte.dto.Line\nfun swapLines(linesToSwap: List<Line>) {\r\n        lines = linesToSwap\r\n        notifyDataSetChanged()\r\n    }" ],
  "Trail-Sense/621" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/257" : [ "@Override\r\npublic void onClick(View view) {\r\n    if (isPackageInstalled(\"com.irccloud.android\", LoginActivity.this)) {\r\n        startActivity(getPackageManager().getLaunchIntentForPackage(\"com.irccloud.android\"));\r\n    } else {\r\n        try {\r\n            IRCCloudLinkMovementMethod.launchBrowser(Uri.parse(\"market://details?id=com.irccloud.android\"), LoginActivity.this);\r\n        } catch (Exception e) {\r\n            IRCCloudLinkMovementMethod.launchBrowser(Uri.parse(\"https://play.google.com/store/apps/details?id=com.irccloud.android\"), LoginActivity.this);\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.pm.PackageManager.NameNotFoundException;\r\nimport android.content.pm.PackageManager.NameNotFoundException\nimport android.content.pm.PackageManager\nimport android.content.Context\nprivate boolean isPackageInstalled(String packagename, Context context) {\r\n    PackageManager pm = context.getPackageManager();\r\n    try {\r\n        pm.getPackageInfo(packagename, PackageManager.GET_ACTIVITIES);\r\n        return true;\r\n    } catch (NameNotFoundException e) {\r\n        return false;\r\n    }\r\n}" ],
  "Iconify/258" : [ "getPackageDrawable(WHATSAPP_PACKAGE)\n--------------------------------------------------\ngetPackageDrawable(SIGNAL_PACKAGE)\n--------------------------------------------------\ngetPackageDrawable(VIBER_PACKAGE)\n--------------------------------------------------\ngetPackageDrawable(TELEGRAM_PACKAGE)\n--------------------------------------------------\ngetPackageDrawable(THREEMA_PACKAGE)\n--------------------------------------------------\nactivity.getPackageDrawable(action.packageName)", "import com.simplemobiletools.contacts.pro.R\nimport android.graphics.drawable.Drawable\nimport android.content.Context\nimport android.annotation.SuppressLint\n\r\n@SuppressLint(\"UseCompatLoadingForDrawables\")\r\nfun Context.getPackageDrawable(packageName: String): Drawable {\r\n    return resources.getDrawable(\r\n        when (packageName) {\r\n            TELEGRAM_PACKAGE -> R.drawable.ic_telegram_rect_vector\r\n            SIGNAL_PACKAGE -> R.drawable.ic_signal_rect_vector\r\n            WHATSAPP_PACKAGE -> R.drawable.ic_whatsapp_rect_vector\r\n            VIBER_PACKAGE -> R.drawable.ic_viber_rect_vector\r\n            else -> R.drawable.ic_threema_rect_vector\r\n        }, theme\r\n    )\r\n}\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, graphics, drawable, Drawable], wildcard=false, alias=null)\nImport(names=[com, simplemobiletools, contacts, pro, R], wildcard=false, alias=null)" ],
  "Trail-Sense/623" : [ "checksum.update(buffer.array())\n--------------------------------------------------\nplaylistAdapter.update(it)\n--------------------------------------------------\nstate.update(pos, VLCOptions.getEqualizerSavedState(activity))\n--------------------------------------------------\nstate.update(presetCount + customCount, false)\n--------------------------------------------------\nstate.update(pos, false)\n--------------------------------------------------\nstate.update(allSets.indexOf(newName), true)\n--------------------------------------------------\nstate.update(0, true)\n--------------------------------------------------\nstate.update(revertPos, true)\n--------------------------------------------------\nstate.update(pos, true)\n--------------------------------------------------\nif (!isEmpty()) update(ArrayList(0))\n--------------------------------------------------\nadapter.update(mediaLibraryItems!!)\n--------------------------------------------------\nstorageBrowserAdapter.update(it)\n--------------------------------------------------\nfavoritesAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(filtered)\n--------------------------------------------------\nadapter.update(it)\n--------------------------------------------------\nadapter.update(renderers)\n--------------------------------------------------\nupdate(dataset, finalList)\n--------------------------------------------------\nadapter.update(bookmarkList)\n--------------------------------------------------\nadapter.update(bookmarks)\n--------------------------------------------------\n(recyclerview.adapter as OptionsAdapter).update(options)\n--------------------------------------------------\nhistoryAdapter.update(it)\n--------------------------------------------------\nstreamsAdapter.update(it)\n--------------------------------------------------\nmd.update(input.toByteArray())\n--------------------------------------------------\noverlayDelegate.playlistAdapter.update(mediaWrappers)\n--------------------------------------------------\nplaylistModel?.update()\n--------------------------------------------------\nplayer.update()\n--------------------------------------------------\ncallback.update()\n--------------------------------------------------\nwidgetDao.update(widget)\n--------------------------------------------------\nmd.update(certificate)\n--------------------------------------------------\nupdate()", "fun update(oldList: List<D>, newList: List<D>) {\r\n            this.oldList = oldList\r\n            this.newList = newList\r\n        }" ],
  "Trail-Sense/624" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/625" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/626" : [ "callback.onMapReady(this)", "import org.tasks.R\noverride fun onMapReady(mapFragment: MapFragment) {\r\n        map = mapFragment\r\n        updateMarkers()\r\n        if (permissionChecker.canAccessForegroundLocation()) {\r\n            mapFragment.showMyLocation()\r\n        }\r\n\r\n        mapPosition\r\n                ?.let { map.movePosition(it, false) }\r\n                ?: moveToCurrentLocation(false)\r\n    }\nimport org.tasks.R" ],
  "Trail-Sense/627" : [ "super.onDraw(canvas)", "import com.simplemobiletools.calendar.pro.extensions.getWeeklyViewItemHeight\nimport android.view.View\nimport android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        val rowHeight = context.getWeeklyViewItemHeight()\r\n        for (i in 0 until ROWS_CNT) {\r\n            val y = rowHeight * i.toFloat() - i / 2\r\n            canvas.drawLine(0f, y, width.toFloat(), y, paint)\r\n        }\r\n\r\n        val rowWidth = width / daysCount.toFloat()\r\n        for (i in 0 until daysCount) {\r\n            val x = rowWidth * i.toFloat()\r\n            canvas.drawLine(x, 0f, x, height.toFloat(), paint)\r\n        }\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/745" : [ "", "@Override\r\nprotected void onPostExecute(Integer resultCode) {\r\n    setResult(resultCode, res);\r\n    finish();\r\n}" ],
  "fcitx5-android/140" : [ "        backgroundExecutor.execute {\n            addGeneralChannels()\r\n", "import androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.app.NotificationChannel\nimport android.app.Notification\n @RequiresApi(api = Build.VERSION_CODES.O)\r\n    private fun addGeneralChannels() {\r\n        notificationManager.createNotificationChannel(getChannelPush())\r\n        notificationManager.createNotificationChannel(getChannelMiscellaneous())\r\n    }\nimport android.app.Notification\nimport android.app.NotificationChannel\nimport android.os.Build\nimport androidx.annotation.RequiresApi" ],
  "VinylMusicPlayer/746" : [ "@Override\r\nprotected void onCancelled() {\r\n    super.onCancelled();\r\n    finish();\r\n}\n--------------------------------------------------\n", "@Override\r\nprotected void onCancelled() {\r\n    super.onCancelled();\r\n    finish();\r\n}" ],
  "fcitx5-android/141" : [ "        backgroundExecutor.execute {\n            addGeneralChannels()\r\n", "import androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.app.NotificationChannel\nimport android.app.Notification\n @RequiresApi(api = Build.VERSION_CODES.O)\r\n    private fun addGeneralChannels() {\r\n        notificationManager.createNotificationChannel(getChannelPush())\r\n        notificationManager.createNotificationChannel(getChannelMiscellaneous())\r\n    }\nimport android.app.Notification\nimport android.app.NotificationChannel\nimport android.os.Build\nimport androidx.annotation.RequiresApi" ],
  "MaterialFiles/1211" : [ "        val workerClass = Class.forName(workerClassName).kotlin\n        return getKoin().getOrNull(workerClass) { parametersOf(workerParameters) }\r\n    }\n--------------------------------------------------\n            .submit(pictureSizeInPx, pictureSizeInPx)\n            .getOrNull()\r\n    }", "import com.bumptech.glide.request.FutureTarget\nprivate fun <T> FutureTarget<T>.getOrNull(): T? {\r\n        return try {\r\n            get()\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }\nimport com.bumptech.glide.request.FutureTarget" ],
  "fcitx5-android/145" : [ "                Icon(\n                    modifier = Modifier.rotate(rotation),\r\n                    imageVector = Icons.Outlined.ExpandMore,\n--------------------------------------------------\n            tint = MaterialTheme.colors.onSurface.copy(alpha = ContentAlpha.medium),\n            modifier = Modifier.rotate(rotationAngle)\r\n        )\n--------------------------------------------------\nrotate()", "private fun rotate() {\r\n        rotation = if (rotation == 0f) -180f else 0f\r\n        chevron.animate().rotation(rotation).setDuration(250).start()\r\n    }" ],
  "MaterialFiles/1213" : [ "                    clearUi()\n                    TaskListFragment.newTaskListFragment(newFilter)\r\n                }", "import org.tasks.R\nimport com.todoroo.astrid.data.Task\nimport com.todoroo.astrid.api.Filter\nimport androidx.fragment.app.Fragment\nimport android.os.Parcelable\nimport android.os.Bundle\nfun newTaskListFragment(filter: Filter): TaskListFragment {\r\n            val fragment = TaskListFragment()\r\n            val bundle = Bundle()\r\n            bundle.putParcelable(EXTRA_FILTER, filter)\r\n            fragment.arguments = bundle\r\n            return fragment\r\n        }\nimport android.os.Bundle\nimport android.os.Parcelable\nimport androidx.fragment.app.Fragment\nimport com.todoroo.astrid.api.Filter\nimport com.todoroo.astrid.data.Task\nimport org.tasks.R" ],
  "MaterialFiles/1216" : [ "rewardCardAdapter?.setSelectedPosition(position)", "import com.kickstarter.ui.viewholders.State\nimport com.kickstarter.ui.data.CardState\nimport android.util.Pair\nfun setSelectedPosition(position: Int) {\r\n        this.selectedPosition = Pair(position, CardState.SELECTED)\r\n        notifyDataSetChanged()\r\n    }\nImport(names=[android, util, Pair], wildcard=false, alias=null)\nImport(names=[com, kickstarter, ui, data, CardState], wildcard=false, alias=null)" ],
  "fcitx5-android/148" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1215" : [ "localizationItems.mapToArray {\n    it.code\n}\n--------------------------------------------------\nlocalizationItems.mapToArray {\n    it.displayText\n}", "import com.battlelancer.seriesguide.R\nprivate inline fun <T, reified R> List<T>.mapToArray(transform: (T) -> R): Array<R> {\r\n        return Array(size) { index ->\r\n            transform(get(index))\r\n        }\r\n    }\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)" ],
  "fcitx5-android/147" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/266" : [ "inactiveColor = setAlpha(inactiveColor!!, 0.1f)", "import android.graphics.Color\n @JvmStatic\r\n    fun setAlpha(color: Int, newAlpha: Float): Int {\r\n        val intAlpha = (newAlpha * 255).toInt()\r\n        return Color.argb(intAlpha, Color.red(color), Color.green(color), Color.blue(color))\r\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)" ],
  "Trail-Sense/1150" : [ "            val account = loadAccount(accountUuid)\n            val folderDetails = folderRepository.loadFolderDetails(account, folderId)\r\n            if (folderDetails == null) {", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.fsck.k9.mailstore.FolderRepository\nimport com.fsck.k9.mailstore.FolderDetails\nimport com.fsck.k9.mailstore.Folder\nimport com.fsck.k9.Account\nprivate suspend fun FolderRepository.loadFolderDetails(account: Account, folderId: Long): FolderDetails? {\r\n        return withContext(Dispatchers.IO) {\r\n            getFolderDetails(account, folderId)\r\n        }\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.mailstore.Folder\nimport com.fsck.k9.mailstore.FolderDetails\nimport com.fsck.k9.mailstore.FolderRepository\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/267" : [ "getDisplayColorFromColor(color)", "import kotlin.math.min\nimport com.simplemobiletools.calendar.pro.R\nimport android.graphics.Color\nprivate fun getDisplayColorFromColor(color: Int): Int {\r\n        val hsv = FloatArray(3)\r\n        Color.colorToHSV(color, hsv)\r\n        hsv[1] = min(hsv[1] * SATURATION_ADJUST, 1.0f)\r\n        hsv[2] = hsv[2] * INTENSITY_ADJUST\r\n        return Color.HSVToColor(hsv)\r\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)\nImport(names=[kotlin, math, min], wildcard=false, alias=null)" ],
  "Iconify/264" : [ "inactiveColor = setAlpha(inactiveColor!!, 0.1f)", "import android.graphics.Color\n @JvmStatic\r\n    fun setAlpha(color: Int, newAlpha: Float): Int {\r\n        val intAlpha = (newAlpha * 255).toInt()\r\n        return Color.argb(intAlpha, Color.red(color), Color.green(color), Color.blue(color))\r\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)" ],
  "Iconify/265" : [ "getDisplayColorFromColor(color)", "import kotlin.math.min\nimport com.simplemobiletools.calendar.pro.R\nimport android.graphics.Color\nprivate fun getDisplayColorFromColor(color: Int): Int {\r\n        val hsv = FloatArray(3)\r\n        Color.colorToHSV(color, hsv)\r\n        hsv[1] = min(hsv[1] * SATURATION_ADJUST, 1.0f)\r\n        hsv[2] = hsv[2] * INTENSITY_ADJUST\r\n        return Color.HSVToColor(hsv)\r\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)\nImport(names=[kotlin, math, min], wildcard=false, alias=null)" ],
  "Trail-Sense/1153" : [ "                        walletId = account.id,\n                        syncMode = syncMode,\r\n                        networkType = NetworkType.MainNet,\n--------------------------------------------------\nmarketKit.sync()\n--------------------------------------------------\nit.sync()\n--------------------------------------------------\nsync(adaptersMap)\n--------------------------------------------------\nsync(nftAdapterManager.adaptersUpdatedFlow.value, true)\n--------------------------------------------------\nsync(nftKey, adapter, true)\n--------------------------------------------------\nsync(nftKey, adapter, force)\n--------------------------------------------------\nsync(it)\n--------------------------------------------------\nsync(service.blockchainItems)\n--------------------------------------------------\nsync(state.data)\n--------------------------------------------------\nsync(gasPriceService.state)\n--------------------------------------------------\nsync(gasPriceService.currentBaseFee)\n--------------------------------------------------\nsync(gasPriceServiceState.data)\n--------------------------------------------------\nsync(transaction)\n--------------------------------------------------\nsync(walletManager.activeWallets)\n--------------------------------------------------\nsync(wallets)\n--------------------------------------------------\nsync()\n--------------------------------------------------\nsync(result, rate)\n--------------------------------------------------\nsync(it, rate)\n--------------------------------------------------\nsync(fixedNonce)\n--------------------------------------------------\nsync(nonce)\n--------------------------------------------------\nsync(currentState.nonce + 1)\n--------------------------------------------------\nsync(currentState.nonce - 1)\n--------------------------------------------------\nsync(nonce, default = true)", "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun sync(items: List<SolanaNetworkService.Item>) {\r\n        viewModelScope.launch {\r\n            viewItems = items.map { viewItem(it) }.sortedBy { it.name }\r\n        }\r\n    }\nImport(names=[androidx, lifecycle, viewModelScope], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)" ],
  "Iconify/262" : [ "getFile(artist)\n--------------------------------------------------\n                if (songFile == null) {\n                    val path = getFilePathFromUri(context, uri)\n                    if (path != null)\n--------------------------------------------------\nval file = getFile(artist)", "import java.io.File\nimport code.name.monkey.retromusic.model.Artist\nimport code.name.monkey.retromusic.R\nimport code.name.monkey.retromusic.App\nimport android.content.Context\n @JvmStatic\n        fun getFile(artist: Artist): File {\n            val dir = File(App.getContext().filesDir, FOLDER_NAME)\n            return File(dir, getFileName(artist))\n        }\nImport(names=[code, name, monkey, retromusic, model, Artist], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "MaterialFiles/1230" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1154" : [ "{\r\n        return transactions.sortedDescending()\r\n    }\n--------------------------------------------------\n\n    return sortedWith(comparator)\r\n}\n--------------------------------------------------\nmarketItems.sort(sortingField)\n--------------------------------------------------\nsort(itemsWithCurrencyValues)", "import io.horizontalsystems.bankwallet.modules.balance.BalanceSortType\nfun sort(items: Iterable<BalanceCexViewItem>, sortType: BalanceSortType): List<BalanceCexViewItem> {\r\n        return when (sortType) {\r\n            BalanceSortType.Value -> sortByBalance(items)\r\n            BalanceSortType.Name -> items.sortedBy { it.coinCode }\r\n            BalanceSortType.PercentGrowth -> items.sortedByDescending { it.diff }\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, modules, balance, BalanceSortType], wildcard=false, alias=null)" ],
  "Iconify/263" : [ "val root = createDirectory(context, directoryName)", "import java.io.File\nimport android.content.Context\nprivate fun createDirectory(context: Context, directoryName: String): File {\n        val file = File(\n            context.getExternalFilesDir(directoryName)\n                .toString()\n        )\n        if (!file.exists()) {\n            file.mkdir()\n        }\n        return file\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "MaterialFiles/1231" : [ "@Override\r\npublic void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    if (BuildConfig.DEBUG)\r\n        enableStrictMode();\r\n    getComponent().inject(this);\r\n    setContentView(R.layout.activity_map);\r\n    setupDrawer(savedInstanceState);\r\n    View menu = findViewById(R.id.menu);\r\n    menu.setOnClickListener(view -> openDrawer());\r\n    search = findViewById(R.id.search);\r\n    search.setLocationViewListener(this);\r\n    View bottomSheet = findViewById(R.id.bottomSheet);\r\n    bottomSheetBehavior = BottomSheetBehavior.from(bottomSheet);\r\n    bottomSheetBehavior.setBottomSheetCallback(new BottomSheetCallback() {\r\n\r\n        @Override\r\n        public void onStateChanged(@NonNull View bottomSheet, int newState) {\r\n            if (newState == STATE_HIDDEN) {\r\n                search.clearLocation();\r\n                search.reset();\r\n                viewModel.setPeekHeight(0);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onSlide(@NonNull View bottomSheet, float slideOffset) {\r\n        }\r\n    });\r\n    // get view model and observe data\r\n    viewModel = new ViewModelProvider(this, viewModelFactory).get(MapViewModel.class);\r\n    viewModel.getTransportNetwork().observe(this, this::onTransportNetworkChanged);\r\n    viewModel.getHome().observe(this, homeLocation -> search.setHomeLocation(homeLocation));\r\n    viewModel.getWork().observe(this, workLocation -> search.setWorkLocation(workLocation));\r\n    viewModel.getLocations().observe(this, favoriteLocations -> search.setFavoriteLocations(favoriteLocations));\r\n    viewModel.getMapClicked().observe(this, no -> onMapClicked());\r\n    viewModel.getMarkerClicked().observe(this, no -> onMarkerClicked());\r\n    viewModel.getSelectedLocation().observe(this, this::onLocationSelected);\r\n    viewModel.getSelectedLocationClicked().observe(this, this::onSelectedLocationClicked);\r\n    viewModel.getPeekHeight().observe(this, height -> {\r\n        if (height != null)\r\n            bottomSheetBehavior.setPeekHeight(height);\r\n    });\r\n    FloatingActionButton directionsFab = findViewById(R.id.directionsFab);\r\n    directionsFab.setOnClickListener(view -> {\r\n        WrapLocation from = new WrapLocation(GPS);\r\n        WrapLocation to = null;\r\n        if (locationFragment != null && locationFragmentVisible()) {\r\n            to = locationFragment.getLocation();\r\n        }\r\n        findDirections(MapActivity.this, from, null, to);\r\n    });\r\n    Intent intent = getIntent();\r\n    if (intent != null)\r\n        onNewIntent(intent);\r\n    if (savedInstanceState == null) {\r\n        showSavedSearches();\r\n        checkAndShowChangelog();\r\n    } else {\r\n        locationFragment = (LocationFragment) getSupportFragmentManager().findFragmentByTag(LocationFragment.TAG);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.os.StrictMode;\r\nimport android.os.StrictMode.ThreadPolicy;\r\nimport android.os.StrictMode.VmPolicy;\r\nimport android.os.StrictMode.VmPolicy\nimport android.os.StrictMode.ThreadPolicy\nimport android.os.StrictMode\nprivate void enableStrictMode() {\r\n    ThreadPolicy.Builder threadPolicy = new ThreadPolicy.Builder();\r\n    threadPolicy.detectAll();\r\n    threadPolicy.penaltyLog();\r\n    StrictMode.setThreadPolicy(threadPolicy.build());\r\n    VmPolicy.Builder vmPolicy = new VmPolicy.Builder();\r\n    vmPolicy.detectAll();\r\n    vmPolicy.penaltyLog();\r\n    StrictMode.setVmPolicy(vmPolicy.build());\r\n}" ],
  "Trail-Sense/1155" : [ "listsAdapter.getItemListId(selectedListIndex)", "fun getItemListId(position: Int): String? {\r\n        return if (position < items.size) {\r\n            items[position].listId\r\n        } else {\r\n            null\r\n        }\r\n    }" ],
  "Trail-Sense/1156" : [ "        VSpacer(height = 24.dp)\n        ButtonsRow(viewItem = balanceViewItem, navController = navController)\r\n        LockedBalanceCell(balanceViewItem)\n--------------------------------------------------\n            title = stringResource(R.string.Balance_Withdraw),\n            enabled = viewItem.withdrawEnabled,\r\n            onClick = {},\n--------------------------------------------------\n            title = stringResource(R.string.Balance_Deposit),\n            enabled = viewItem.depositEnabled,\r\n            onClick = {\n--------------------------------------------------\n            onClick = {\n                navController.slideFromRight(R.id.depositCexFragment, DepositCexFragment.args(viewItem.cexAsset))\r\n            },\n--------------------------------------------------\n            contentDescription = stringResource(R.string.Coin_Info),\n            enabled = viewItem.coinUid != null,\r\n            onClick = {\n--------------------------------------------------\n            onClick = {\n                viewItem.coinUid?.let { coinUid ->\r\n                    navController.slideFromRight(\n--------------------------------------------------\nviewItem(it)\n--------------------------------------------------\ntopNftCollectionsViewItemFactory.viewItem(collection, service.timeDuration, index + 1)\n--------------------------------------------------\nviewItem(it, expandedStates[it.uid] ?: false)", "private fun viewItem(item: SolanaNetworkService.Item): ViewItem {\r\n        val url = item.rpcSource.url.toString()\r\n\r\n        return ViewItem(\r\n            item.rpcSource.name,\r\n            url,\r\n            item.selected\r\n        )\r\n    }" ],
  "VinylMusicPlayer/742" : [ "editorImage.setImageBitmap(bitmap)\n--------------------------------------------------\nsetImageBitmap(bitmap, getColor(generatePalette(bitmap), defaultFooterColor()))\n--------------------------------------------------\nsetImageBitmap(BitmapFactory.decodeResource(resources, R.drawable.default_audio_art), defaultFooterColor())\n--------------------------------------------------\nsetImageBitmap(albumArtBitmap, getColor(resource.palette, defaultFooterColor()))\n--------------------------------------------------\nsetImageBitmap(bitmap, RetroColorUtil.getColor(RetroColorUtil.generatePalette(bitmap), defaultFooterColor()))\n--------------------------------------------------\nsetImageBitmap(albumArtBitmap, RetroColorUtil.getColor(resource.palette, defaultFooterColor()))", "import code.name.monkey.retromusic.R.drawable\nimport code.name.monkey.retromusic.R\nimport android.graphics.Bitmap\nprotected fun setImageBitmap(bitmap: Bitmap?, bgColor: Int) {\n        if (bitmap == null) {\n            editorImage.setImageResource(drawable.default_audio_art)\n        } else {\n            editorImage.setImageBitmap(bitmap)\n        }\n        setColors(bgColor)\n    }\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)" ],
  "Trail-Sense/630" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/268" : [ "inactiveColor = setAlpha(inactiveColor!!, 0.1f)", "import android.graphics.Color\n @JvmStatic\r\n    fun setAlpha(color: Int, newAlpha: Float): Int {\r\n        val intAlpha = (newAlpha * 255).toInt()\r\n        return Color.argb(intAlpha, Color.red(color), Color.green(color), Color.blue(color))\r\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)" ],
  "Iconify/269" : [ "inactiveColor = setAlpha(inactiveColor!!, 0.1f)", "import android.graphics.Color\n @JvmStatic\r\n    fun setAlpha(color: Int, newAlpha: Float): Int {\r\n        val intAlpha = (newAlpha * 255).toInt()\r\n        return Color.argb(intAlpha, Color.red(color), Color.green(color), Color.blue(color))\r\n    }\nImport(names=[android, graphics, Color], wildcard=false, alias=null)" ],
  "Trail-Sense/634" : [ "        val task = getTask(from)\n        val newParent = findParent(indent, to)\r\n        if ((newParent?.id ?: 0) == task.parent || (indent > 0 && dataSource.subtaskSortMode == SORT_MANUAL)) {\n--------------------------------------------------\n{\n        val newParent = findParent(indent, to)?.id ?: 0\r\n        if (task.parent != newParent) {", "import org.tasks.data.TaskContainer\nimport com.todoroo.astrid.data.Task\nprivate fun findParent(indent: Int, to: Int): TaskContainer? {\r\n        if (indent == 0 || to == 0) {\r\n            return null\r\n        }\r\n        for (i in to - 1 downTo 0) {\r\n            val previous = getTask(i)\r\n            if (indent > previous.indent) {\r\n                return previous\r\n            }\r\n        }\r\n        return null\r\n    }\nimport com.todoroo.astrid.data.Task\nimport org.tasks.data.TaskContainer" ],
  "VinylMusicPlayer/738" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    // Update currenlty selected item\r\n    mToolBarSelectedItemId = itemId;\r\n    if (itemId == R.id.menu_style) {\r\n        showStylePopup(findViewById(R.id.menu_style));\r\n        return true;\r\n    } else if (itemId == R.id.menu_markdown_view) {\r\n        toggleMarkdownView();\r\n        return true;\r\n    } else if (itemId == R.id.menu_toggle_title) {\r\n        showHideTitle(!mTitleBarVisible);\r\n        return true;\r\n    } else if (itemId == R.id.menu_save) {\r\n        handleSave();\r\n        return true;\r\n    } else if (itemId == R.id.menu_revert) {\r\n        handleRevert();\r\n        return true;\r\n    } else if (itemId == R.id.menu_metadata) {\r\n        handleMetadata();\r\n        return true;\r\n    } else if (itemId == R.id.menu_edit_tools) {\r\n        showEditToolFragment();\r\n        return true;\r\n    } else if (itemId == R.id.menu_encrypt_decrypt) {\r\n        handleEncryptDecrypt();\r\n        return true;\r\n    } else if (itemId == R.id.menu_paste_calendar) {\r\n        doPasteCalendar();\r\n        return true;\r\n    } else if (itemId == R.id.menu_full_screen) {\r\n        enterImmersiveMode();\r\n        return true;\r\n    } else if (itemId == R.id.menu_clear_cache) {\r\n        doClearCache();\r\n        return true;\r\n    } else if (itemId == R.id.menu_export) {\r\n        handleExport();\r\n        return true;\r\n    } else if (itemId == R.id.menu_print) {\r\n        if (mMarkdownMode)\r\n            createWebPrintJob(mMarkdownView);\r\n        else\r\n            doExportHTML(true);\r\n        return true;\r\n    } else if (itemId == R.id.menu_share) {\r\n        doShare();\r\n        return true;\r\n    } else if (itemId == android.R.id.home) {\r\n        handleHome();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "Neo-Backup/7" : [ "                if (folderServerId != null) {\n                    val folderId = folderRepository.getFolderId(account, folderServerId)\r\n                    putString(\"unread_widget.$widgetId.folder_id\", folderId?.toString())\n--------------------------------------------------\n            } else {\n                val folderId = folderRepository.getFolderId(account, folderName)\r\n                account.autoExpandFolderId = folderId\n--------------------------------------------------\naccount.inboxFolderId = getFolderId(account.legacyInboxFolder)\n--------------------------------------------------\naccount.outboxFolderId = getFolderId(\"K9MAIL_INTERNAL_OUTBOX\")\n--------------------------------------------------\naccount.draftsFolderId = getFolderId(account.importedDraftsFolder)\n--------------------------------------------------\naccount.sentFolderId = getFolderId(account.importedSentFolder)\n--------------------------------------------------\naccount.trashFolderId = getFolderId(account.importedTrashFolder)\n--------------------------------------------------\naccount.archiveFolderId = getFolderId(account.importedArchiveFolder)\n--------------------------------------------------\naccount.spamFolderId = getFolderId(account.importedSpamFolder)\n--------------------------------------------------\naccount.autoExpandFolderId = getFolderId(account.importedAutoExpandFolder)", "private fun getFolderId(serverId: String?): Long? {\r\n        if (serverId == null) return null\r\n\r\n        return db.query(\"folders\", arrayOf(\"id\"), \"server_id = ?\", arrayOf(serverId), null, null, null).use { cursor ->\r\n            if (cursor.moveToFirst() && !cursor.isNull(0)) cursor.getLong(0) else null\r\n        }\r\n    }" ],
  "Trail-Sense/637" : [ "StringBuilder().select(fields).from(table)\n--------------------------------------------------\n{\n        val source = getTask(from)\r\n        val targetTaskId = source.uuid\n--------------------------------------------------\nfrom(Task.TABLE)\n--------------------------------------------------\nBottomSheetBehavior.from(bottomSheet)\n--------------------------------------------------\nLayoutInflater.from(context)\n--------------------------------------------------\nNotificationManagerCompat.from(context)\n--------------------------------------------------\nLayoutInflater.from(requireActivity())\n--------------------------------------------------\nDateTime.from(rrule.until)", "import com.todoroo.andlib.sql.StringBuilderExtensions.from\nimport com.todoroo.andlib.data.Table\nfun from(fromTable: Table?): Query {\r\n        table = fromTable\r\n        return this\r\n    }\nImport(names=[com, todoroo, andlib, data, Table], wildcard=false, alias=null)\nImport(names=[com, todoroo, andlib, sql, StringBuilderExtensions, from], wildcard=false, alias=null)" ],
  "Trail-Sense/638" : [ "textHistory.getPrevious()", "fun getPrevious(): TextHistoryItem? {\r\n        if (position == 0) {\r\n            return null\r\n        }\r\n        position--\r\n        return history[position]\r\n    }" ],
  "Trail-Sense/639" : [ "            value = trait.value,\n            percent = totalSupply?.let { getAttributePercentage(trait, it) },\r\n            searchUrl = trait.searchUrl", "import kotlin.math.roundToInt\nimport io.horizontalsystems.bankwallet.entities.nft.NftAssetMetadata.Trait\nprivate fun getAttributePercentage(trait: Trait, totalSupply: Int): String? =\r\n        if (trait.count > 0 && totalSupply > 0) {\r\n            val percent = (trait.count * 100f / totalSupply)\r\n            val number = when {\r\n                percent >= 10 -> percent.roundToInt()\r\n                percent >= 1 -> (percent * 10).roundToInt() / 10f\r\n                else -> (percent * 100).roundToInt() / 100f\r\n            }\r\n            \"$number%\"\r\n        } else {\r\n            null\r\n        }\nimport io.horizontalsystems.bankwallet.entities.nft.NftAssetMetadata\nimport io.horizontalsystems.bankwallet.entities.nft.NftAssetMetadata.Trait\nimport kotlin.math.roundToInt" ],
  "Neo-Backup/3" : [ "{\n        val snippet = getPreview(message)\r\n        if (message.subject.isNullOrEmpty() && snippet != null) {\n--------------------------------------------------\n            if (appearance.previewLines > 0) {\n                val preview = getPreview(isMessageEncrypted, previewText)\r\n                if (preview.isNotEmpty()) {", "import com.fsck.k9.ui.R\nprivate fun getPreview(isMessageEncrypted: Boolean, previewText: String): String {\r\n        return if (isMessageEncrypted) {\r\n            res.getString(R.string.preview_encrypted)\r\n        } else {\r\n            previewText\r\n        }\r\n    }\nimport com.fsck.k9.ui.R" ],
  "fcitx5-android/130" : [ "blockRunner?.maybeRun()", "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nimport androidx.annotation.MainThread\n @MainThread\r\n    fun maybeRun() {\r\n        cancellationJob?.cancel()\r\n        cancellationJob = null\r\n        if (runningJob != null) {\r\n            return\r\n        }\r\n        runningJob = scope.launch {\r\n            val liveDataScope = LiveDataScopeImpl(liveData, coroutineContext)\r\n            block(liveDataScope)\r\n            onDone()\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, Job], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)" ],
  "Neo-Backup/1" : [ "\n            when (val accountType = account.type) {\r\n                is AccountType.HdExtendedKey -> {\n--------------------------------------------------\n                        context = App.instance,\n                        extendedKey = accountType.hdExtendedKey,\r\n                        purpose = derivation.purpose,\n--------------------------------------------------\n                        context = App.instance,\n                        words = accountType.words,\r\n                        passphrase = accountType.passphrase,\n--------------------------------------------------\n                        words = accountType.words,\n                        passphrase = accountType.passphrase,\r\n                        walletId = account.id,\n--------------------------------------------------\n                        context = App.instance,\n                        watchAddress =  accountType.address,\r\n                        walletId = account.id,", "import io.horizontalsystems.bankwallet.modules.backuplocal.BackupLocalModule\nimport io.horizontalsystems.bankwallet.entities.AccountType\nimport io.horizontalsystems.bankwallet.entities.Account\n @Throws\r\n    fun accountType(backup: BackupLocalModule.WalletBackup, passphrase: String): AccountType {\r\n        val decrypted = decrypted(backup.crypto, passphrase)\r\n        return BackupLocalModule.getAccountTypeFromData(backup.type, decrypted)\r\n    }\nimport io.horizontalsystems.bankwallet.entities.Account\nimport io.horizontalsystems.bankwallet.entities.AccountType\nimport io.horizontalsystems.bankwallet.modules.backuplocal.BackupLocalModule" ],
  "VinylMusicPlayer/735" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1223" : [ "this.currentUser.observable().distinctUntilChanged().subscribe {\n    this.loggedInUser = it\n}\n--------------------------------------------------\nObservable.concat(prefConfig, diskConfig).take(1).subscribe { v: Config ->\n    config.onNext(v)\n}\n--------------------------------------------------\nsubscribe { c: Config? ->\n    configPreference.set(gson.toJson(c, Config::class.java))\n}\n--------------------------------------------------\nsubscribe { u: User? ->\n    userPreference.set(gson.toJson(u, User::class.java))\n}\n--------------------------------------------------\nloadNextPage.subscribe {\n    if (isScrollEnabled) {\n        nextPage.run()\n    }\n}\n--------------------------------------------------\nretryLoadingNextPageSubject.subscribe {\n    nextPage.run()\n}\n--------------------------------------------------\nsubscribe {\n    this.config = it\n    if (calledFromOnCreate) {\n        privateInitializer()\n        if (build.isDebug) {\n            Timber.d(\"${type().tag} isCalledFromOnCreate:$calledFromOnCreate withConfig:$config\")\n            Timber.d(\"${type().tag} currentThread: ${Thread.currentThread()}\")\n        }\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.loggedInUser = it\n    identify(it)\n}\n--------------------------------------------------\nsubscribe {\n    if (currentUser.accessToken != null) {\n        builder.setQueryParameter(\"oauth_token\", currentUser.accessToken)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    builder.addHeader(\"Authorization\", \"token \" + this.currentUser.accessToken)\n}\n--------------------------------------------------\ncurrentUser.observable().subscribe {\n    loggedInUser = it\n}\n--------------------------------------------------\nsubscribe {\n    ps.onNext(it)\n    ps.onCompleted()\n}\n--------------------------------------------------\nsubscribe { shippingList ->\n    val shippingEnvelope = shippingRulesListTransformer(shippingList ?: emptyList())\n    ps.onNext(shippingEnvelope)\n    ps.onCompleted()\n}\n--------------------------------------------------\nsubscribe { shippingList ->\n    val shippingEnvelope = shippingRulesListTransformer(shippingList ?: emptyList())\n    ps.onNext(shippingEnvelope)\n}\n--------------------------------------------------\nsubscribe {\n    ps.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    ps.onNext(it)\n    ps.onComplete()\n}\n--------------------------------------------------\nsubscribe {\n    setSpinnerSelection(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.createPasswordTextView.text = this.ksString.format(getString(R.string.Youre_connected_via_Facebook_email_Create_a_password_for_this_account), \"email\", it)\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.accountToolbar.accountToolbar, it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.progressBar, !it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.createPasswordContainer, it)\n    ViewUtils.setGone(binding.passwordRequiredContainer, !it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.emailErrorIcon, !it)\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.accountContainer, R.string.Got_it_your_changes_have_been_saved)\n}\n--------------------------------------------------\nsubscribe {\n    binding.activityFeedSwipeRefreshLayout.isRefreshing = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.activityFeedSwipeRefreshLayout.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    showActivities(it)\n}\n--------------------------------------------------\nsubscribe {\n    showErroredBackings(it)\n}\n--------------------------------------------------\nsubscribe {\n    resumeDiscoveryActivity()\n}\n--------------------------------------------------\nsubscribe {\n    startActivityFeedLogin()\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    startFixPledge(it)\n}\n--------------------------------------------------\nsubscribe {\n    startUpdateActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    adapter?.showLoggedOutEmptyState(it)\n}\n--------------------------------------------------\nsubscribe {\n    adapter?.showLoggedInEmptyState(it)\n}\n--------------------------------------------------\nsubscribe {\n    showSurveys(it)\n}\n--------------------------------------------------\nsubscribe {\n    startBackingFragment(it)\n}\n--------------------------------------------------\nsubscribe {\n    backingFragment()?.isRefreshing(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.currentEmail.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.newEmailContainer.error = getString(R.string.Email_must_be_a_valid_email_address)\n}\n--------------------------------------------------\nsubscribe {\n    binding.newEmailContainer.error = null\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.changeEmailLayout, it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.sendVerificationEmail.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    updateMenu(it)\n}\n--------------------------------------------------\nsubscribe {\n    updateMenu(!it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.progressBar.isGone = !it\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.changeEmailLayout, R.string.Verification_email_sent)\n}\n--------------------------------------------------\nsubscribe {\n    clearForm()\n}\n--------------------------------------------------\nsubscribe {\n    if (it != 0) {\n        binding.emailWarningTextView.text = getString(it)\n        binding.emailWarningTextView.visibility = View.VISIBLE\n    } else {\n        binding.emailWarningTextView.isGone = true\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.emailWarningTextView.setTextColor(ContextCompat.getColor(this@ChangeEmailActivity, it))\n}\n--------------------------------------------------\nsubscribe {\n    binding.sendVerificationEmail.text = getString(it)\n}\n--------------------------------------------------\nsubscribe { comments ->\n    commentsAdapter.takeData(comments)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentComposer.setAvatarUrl(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentComposer.setCommentComposerStatus(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentComposer.isVisible = it\n}\n--------------------------------------------------\nsubscribe {\n    setEmptyState(it)\n}\n--------------------------------------------------\nsubscribe {\n    setEmptyState(false)\n    commentInitialErrorAdapter.insertPageError(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsRecyclerView.smoothScrollToPosition(0)\n}\n--------------------------------------------------\nsubscribe {\n    onBackPressedDispatcher.onBackPressed()\n}\n--------------------------------------------------\nsubscribe {\n    commentPaginationErrorAdapter.addErrorPaginationCell(it)\n}\n--------------------------------------------------\nsubscribe {\n    ApplicationUtils.openUrlExternally(this, UrlUtils.appendPath(env?.webEndpoint() ?: \"\", COMMENT_KICKSTARTER_GUIDELINES))\n}\n--------------------------------------------------\nsubscribe {\n    if (it.first) {\n        handleBackAction(it.second)\n    } else {\n        executeActions(it.second)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsSwipeRefreshLayout.isRefreshing = it\n}\n--------------------------------------------------\nsubscribe {\n    startThreadActivity(it.first.first, it.first.second, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    startThreadActivityFromDeepLink(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    logout(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageButton.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.webView.loadUrl(it)\n}\n--------------------------------------------------\nsubscribe {\n    startComposeMessageActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    startMessagesActivity(it)\n}\n--------------------------------------------------\nsubscribe { url: String ->\n    startBrowser(url)\n}\n--------------------------------------------------\nsubscribe {\n    startDiscoveryActivity()\n}\n--------------------------------------------------\nsubscribe { uri: Uri ->\n    startProjectActivity(uri)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivityForSave(it)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivityForComment(it)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivityForUpdate(it)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivityForCommentToUpdate(it)\n}\n--------------------------------------------------\nsubscribe { uri: Uri ->\n    startProjectActivityForCheckout(uri)\n}\n--------------------------------------------------\nsubscribe {\n    finish()\n}\n--------------------------------------------------\nsubscribe {\n    startPreLaunchProjectActivity(it, \"DEEPLINK\")\n}\n--------------------------------------------------\nsubscribe {\n    binding.editorialDescription.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.editorialGraphic.setImageResource(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.editorialTitle.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    discoveryFragment().updateParams(it)\n}\n--------------------------------------------------\nsubscribe {\n    discoveryFragment().takeCategories(it)\n}\n--------------------------------------------------\nsubscribe {\n    discoveryFragment().refresh()\n}\n--------------------------------------------------\nsubscribe {\n    binding.editorialRetryContainer.root.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.viewModel.inputs.retryContainerClicked()\n}\n--------------------------------------------------\nsubscribe { url ->\n    Picasso.get().load(url).transform(CircleTransformation()).into(binding.avatarImageView)\n}\n--------------------------------------------------\nsubscribe {\n    this.displayPreferences(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.nameEditText.setText(it, TextView.BufferType.EDITABLE)\n}\n--------------------------------------------------\nsubscribe {\n    binding.privateProfileRow.isGone = it\n    binding.privateProfileTextView.isGone = it\n    binding.publicProfileTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.newSettingsLayout, it)\n}\n--------------------------------------------------\nsubscribe {\n    prefillEmail(it)\n}\n--------------------------------------------------\nsubscribe {\n    onSuccess()\n}\n--------------------------------------------------\nsubscribe {\n    SwitchCompatUtils.setCheckedWithoutAnimation(binding.newsletterSwitch, it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.showDialog(this, getString(R.string.signup_error_title), it)\n}\n--------------------------------------------------\nsubscribe {\n    viewModel.inputs.sendNewslettersClick(binding.newsletterSwitch.isChecked)\n}\n--------------------------------------------------\nsubscribe(this::composeContactEmail)\n--------------------------------------------------\nerrorMessages().subscribe {\n    error = it\n}\n--------------------------------------------------\nsubscribe {\n    changedPasswordMessage = getString(R.string.Got_it_your_changes_have_been_saved)\n}\n--------------------------------------------------\nsubscribe {\n    createPasswordMessage = getString(R.string.Got_it_your_changes_have_been_saved)\n}\n--------------------------------------------------\nsubscribe {\n    startTwoFactorActivity()\n}\n--------------------------------------------------\nsubscribe {\n    finishWithSuccessfulResult()\n}\n--------------------------------------------------\nsubscribe {\n    startLogin()\n}\n--------------------------------------------------\nsubscribe {\n    startSignup()\n}\n--------------------------------------------------\nsubscribe {\n    startFacebookConfirmationActivity(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.showDialog(this, getString(R.string.general_error_oops), getString(R.string.login_tout_errors_facebook_authorization_exception_message), getString(R.string.login_tout_errors_facebook_authorization_exception_button))\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.showToast(this)\n}\n--------------------------------------------------\nsubscribe {\n    startTwoFactorFacebookChallenge()\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.showDialog(this, getString(R.string.login_tout_navbar_title), it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showAlertDialog(message = getString(R.string.We_can_no_longer_log_you_in_through_Facebook), positiveActionTitle = getString(R.string.Set_new_password), negativeActionTitle = getString(R.string.accessibility_discovery_buttons_log_in), isCancelable = false, positiveAction = {\n        viewModel.inputs.onResetPasswordFacebookErrorDialogClicked()\n    }, negativeAction = {\n        viewModel.inputs.onLoginFacebookErrorDialogClicked()\n    })\n}\n--------------------------------------------------\nsubscribe {\n    startDisclaimerChromeTab(it, environment)\n}\n--------------------------------------------------\nsubscribe {\n    startResetActivity()\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.messageBody, it)\n}\n--------------------------------------------------\nsubscribe {\n    finishAndShowSuccessToast(it)\n}\n--------------------------------------------------\nsubscribe {\n    setHint(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.sendMessageButton.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    finishAndStartMessagesActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.messagesToolbar.messagesToolbarBackButton, it)\n}\n--------------------------------------------------\nsubscribe {\n    setBackingInfoView(it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.messagesBackingInfoView.backingInfoView, it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.messagesToolbar.messagesToolbarCloseButton, it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messagesCreatorNameTextView.text = ksString.format(getString(R.string.project_creator_by_creator), \"creator_name\", it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.messagesLoadingIndicator, it)\n}\n--------------------------------------------------\nsubscribe {\n    setMessageEditTextHint(it)\n}\n--------------------------------------------------\nsubscribe {\n    requestFocusAndOpenKeyboard()\n}\n--------------------------------------------------\nsubscribe {\n    adapter.messages(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messagesProjectNameTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.messagesToolbar.messagesProjectNameCollapsedTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setDefaultRecyclerViewBottomPadding()\n}\n--------------------------------------------------\nsubscribe {\n    setInitialRecyclerViewBottomPadding(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messagesRecyclerView.scrollToPosition(adapter.itemCount - 1)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageReplyLayout.messageEditText.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageReplyLayout.sendMessageButton.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.showToast(this, it)\n}\n--------------------------------------------------\nsubscribe {\n    startBackingActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messagesAppBarLayout.setExpanded(it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.messagesBackingInfoView.messagesViewPledgeButton, it)\n}\n--------------------------------------------------\nsubscribe {\n    setMailboxStrings(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.unreadCountTextView.text = getString(R.string.No_messages)\n}\n--------------------------------------------------\nsubscribe {\n    binding.unreadCountTextView.text = getString(R.string.No_unread_messages)\n}\n--------------------------------------------------\nsubscribe {\n    adapter.messageThreads(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.unreadCountTextView.setTextColor(ContextCompat.getColor(this, it))\n}\n--------------------------------------------------\nsubscribe {\n    binding.unreadCountTextView.typeface = Typeface.create(getString(R.string.font_family_sans_serif), it)\n}\n--------------------------------------------------\nsubscribe(ViewUtils.setGone(binding.messageThreadsToolbar.messageThreadsToolbarUnreadCountTextView))\n--------------------------------------------------\nsubscribe {\n    setUnreadTextViewText(it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.unreadCountTextView, it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageThreadsSwipeRefreshLayout.isRefreshing = it\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.showToast(this, getString(R.string.profile_settings_error))\n}\n--------------------------------------------------\nsubscribe(this::showOptInPrompt)\n--------------------------------------------------\nsubscribe {\n    SwitchCompatUtils.setCheckedWithoutAnimation(binding.subscribeAllSwitch, it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.emailFrequencyRow.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.creatorNotificationsSection.isGone = it\n}\n--------------------------------------------------\nsubscribe { _ ->\n    ViewUtils.showToast(this, getString(this.unableToSaveString))\n}\n--------------------------------------------------\nsubscribe {\n    setCards(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.paymentsDivider.isGone = !it\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.settingPaymentMethodsActivityToolbar.paymentMethodsToolbar, it)\n}\n--------------------------------------------------\nsubscribe {\n    lazyDeleteCardConfirmationDialog().show()\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.settingPaymentMethodsActivityToolbar.paymentMethodsToolbar, R.string.Got_it_your_changes_have_been_saved)\n}\n--------------------------------------------------\nsubscribe {\n    flowControllerPresentPaymentOption(it)\n}\n--------------------------------------------------\nsubscribe {\n    showErrorSnackBar(binding.settingPaymentMethodsActivityToolbar.paymentMethodsToolbar, getString(R.string.general_error_something_wrong))\n}\n--------------------------------------------------\nsubscribe {\n    startShareIntent(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.startLoginToutActivity()\n}\n--------------------------------------------------\nsubscribe {\n    this.showStarToast()\n}\n--------------------------------------------------\nsubscribe {\n    startCreatorBioWebViewActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    SwitchCompatUtils.setCheckedWithoutAnimation(binding.followingSwitch, true)\n}\n--------------------------------------------------\nsubscribe {\n    lazyFollowingOptOutConfirmationDialog().show()\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.showToast(this, getString(this.unableToSaveString))\n}\n--------------------------------------------------\nsubscribe {\n    binding.backedCountTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.backedCountTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.backedTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.createdCountTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.createdCountTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.createdTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.dividerView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.loadProjects(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.startMessageThreadsActivity()\n}\n--------------------------------------------------\nsubscribe {\n    this.startProjectActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.userNameTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    adapter.projectNotifications(it)\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(binding.projectNotificationSettingsRecyclerView, getString(R.string.general_error_something_wrong))\n}\n--------------------------------------------------\nsubscribe {\n    adapter.takeProject(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.updatesSwipeRefreshLayout.isRefreshing = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.updatesProgressBar.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    startUpdateActivity(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    adapter.takeData(it)\n}\n--------------------------------------------------\nsubscribe {\n    onResetSuccess()\n}\n--------------------------------------------------\nsubscribe {\n    navigateToLoginActivity()\n}\n--------------------------------------------------\nsubscribe {\n    startPreLaunchProjectActivity(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    headline = getEnvironment()?.ksString()?.format(getString(R.string.We_will_be_discontinuing_the_ability_to_log_in_via_FB), \"email\", it)\n}\n--------------------------------------------------\nsubscribe { url ->\n    Picasso.get().load(url).transform(CircleTransformation()).into(binding.profilePictureImageView)\n}\n--------------------------------------------------\nthis.viewModel.outputs.logout().observeOn(AndroidSchedulers.mainThread()).subscribe {\n    logout()\n}\n--------------------------------------------------\nsubscribe { show ->\n    if (show) {\n        lazyLogoutConfirmationDialog().show()\n    } else {\n        lazyLogoutConfirmationDialog().dismiss()\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.nameTextView.text = it\n}\n--------------------------------------------------\nsubscribe { isPresent ->\n    binding.editProfileRow.isGone = !BuildConfig.DEBUG || !isPresent\n    binding.accountRow.isGone = !isPresent\n    binding.notificationAndNewsletterContainer.isGone = !isPresent\n    binding.logOutRow.isGone = !isPresent\n}\n--------------------------------------------------\nsubscribe {\n    back()\n}\n--------------------------------------------------\nsubscribe {\n    confirmationDialog.show()\n}\n--------------------------------------------------\nsubscribe {\n    binding.surveyResponseWebView.loadUrl(it)\n}\n--------------------------------------------------\nsubscribe {\n    showConfirmGamesNewsletterDialog()\n}\n--------------------------------------------------\nviewModel.outputs.finish().observeOn(AndroidSchedulers.mainThread()).subscribe {\n    finish()\n}\n--------------------------------------------------\nsubscribe {\n    if (!isFinishing) {\n        showGamesNewsletterDialog()\n    }\n}\n--------------------------------------------------\nsubscribe {\n    if (!isFinishing) {\n        showRatingDialog()\n    }\n}\n--------------------------------------------------\nsubscribe {\n    startDiscoveryActivity(it)\n}\n--------------------------------------------------\nsubscribe { comment ->\n    rootCommentAdapter.updateRootCommentCell(comment)\n}\n--------------------------------------------------\nsubscribe {\n    this.repliesStatusAdapter.addViewMoreCell(it.second)\n    if (it.first.isNotEmpty()) {\n        this.repliesAdapter.takeData(it.first)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    repliesStatusAdapter.addErrorPaginationCell(it)\n}\n--------------------------------------------------\nsubscribe {\n    repliesStatusAdapter.addInitiallyLoadingErrorCell(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.repliesLoadingIndicator.isVisible = it\n}\n--------------------------------------------------\nsubscribe { shouldOpenKeyboard ->\n    binding.replyComposer.requestCommentComposerKeyBoard(shouldOpenKeyboard)\n}\n--------------------------------------------------\nsubscribe {\n    binding.replyComposer.setAvatarUrl(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.replyComposer.setCommentComposerStatus(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentRepliesRecyclerView.smoothScrollToPosition(0)\n}\n--------------------------------------------------\nsubscribe {\n    binding.replyComposer.isVisible = it\n}\n--------------------------------------------------\nsubscribe {\n    recyclerViewPaginator.reload()\n}\n--------------------------------------------------\nsubscribe {\n    ApplicationUtils.openUrlExternally(this, UrlUtils.appendPath(environment?.webEndpoint() ?: \"\", CommentsActivity.COMMENT_KICKSTARTER_GUIDELINES))\n}\n--------------------------------------------------\nsubscribe {\n    if (it) handleBackAction() else viewModel.inputs.backPressed()\n}\n--------------------------------------------------\nsubscribe {\n    closeCommentsActivity()\n}\n--------------------------------------------------\nsubscribe {\n    resendMessage = getString(R.string.messages_navigation_sent)\n}\n--------------------------------------------------\nsubscribe { projectUrl ->\n    openProjectExternally(projectUrl)\n}\n--------------------------------------------------\nsubscribe {\n    viewModel.inputs.goToCommentsActivity()\n}\n--------------------------------------------------\nsubscribe {\n    viewModel.inputs.goToCommentsActivityToDeepLinkThreadActivity(it)\n}\n--------------------------------------------------\nsubscribe { update ->\n    startRootCommentsActivity(update)\n}\n--------------------------------------------------\nsubscribe {\n    startRootCommentsActivityToDeepLinkThreadActivity(it)\n}\n--------------------------------------------------\nsubscribe { uriAndRefTag ->\n    startProjectActivity(uriAndRefTag.first, uriAndRefTag.second)\n}\n--------------------------------------------------\nsubscribe { updateAndShareUrl ->\n    startShareIntent(updateAndShareUrl)\n}\n--------------------------------------------------\nsubscribe { updateSequence ->\n    binding.updateActivityToolbar.updateToolbar.setTitle(ksString.format(resources.getString(R.string.social_update_number), \"update_number\", updateSequence))\n}\n--------------------------------------------------\nsubscribe { url ->\n    url?.let {\n        binding.updateWebView.post {\n            binding.updateWebView.loadUrl(it)\n        }\n    }\n}\n--------------------------------------------------\nsubscribe {\n    preparePlayer(it)\n}\n--------------------------------------------------\nsubscribe {\n    playerPosition = it.second\n    preparePlayer(it.first)\n}\n--------------------------------------------------\nsubscribe { frag: DiscoveryFragment ->\n    frag.takeCategories(categories)\n}\n--------------------------------------------------\nsubscribe { frag: DiscoveryFragment ->\n    frag.updateParams(params)\n}\n--------------------------------------------------\nsubscribe { obj: DiscoveryFragment ->\n    obj.clearPage()\n}\n--------------------------------------------------\nsubscribe { obj: DiscoveryFragment ->\n    obj.scrollToTop()\n}\n--------------------------------------------------\nsubscribe {\n    showPledgeFragment(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    populateAddOns(it)\n}\n--------------------------------------------------\nsubscribe {\n    showEmptyState(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentBackingAddonsShippingRules?.setText(it.toString())\n}\n--------------------------------------------------\nsubscribe {\n    showErrorDialog()\n}\n--------------------------------------------------\nsubscribe {\n    displayShippingRules(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe { total ->\n    binding?.fragmentBackingAddonsSectionFooterLayout?.backingAddonsFooterButton?.text = selectProperString(total, requireNotNull(env?.ksString()))\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentBackingAddonsShippingRules?.isGone = it\n    binding?.fragmentBackingAddonsCallOut?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentBackingAddonsSectionFooterLayout?.backingAddonsFooterButton?.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    setBackerImageView(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.backerName?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setBackerNumberText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.rewardCardDetails?.rewardCardLogo?.setImageResource(it)\n}\n--------------------------------------------------\nsubscribe {\n    setCardExpirationText(it)\n}\n--------------------------------------------------\nsubscribe {\n    setCardIssuerContentDescription(it)\n}\n--------------------------------------------------\nsubscribe {\n    setCardLastFourText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fixPaymentMethodButton?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fixPaymentMethodMessage?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    (activity as BackingDelegate?)?.refreshProject()\n}\n--------------------------------------------------\nsubscribe {\n    (activity as BackingDelegate?)?.showFixPaymentMethod()\n}\n--------------------------------------------------\nsubscribe {\n    binding?.paymentMethod?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentPledgeSectionSummaryPledge?.pledgeSummaryAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setPledgeDateText(it)\n}\n--------------------------------------------------\nsubscribe {\n    setPledgeStatusText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentPledgeSectionSummaryPledge?.pledgeSummary?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    bindDataToRewardViewHolder(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.receivedSectionLayout?.estimatedDeliveryCheckbox?.isChecked = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.receivedSectionLayout?.receivedSectionLayoutContainer?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.estimatedDeliveryLabel2?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentPledgeSectionSummaryShipping?.shippingSummaryAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentPledgeSectionSummaryShipping?.shippingLabel?.text = String.format(\"%s: %s\", getString(R.string.Shipping), it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentPledgeSectionSummaryShipping?.shippingSummary?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    showSnackbar(view, getString(R.string.Got_it_your_changes_have_been_saved))\n}\n--------------------------------------------------\nsubscribe {\n    binding?.fragmentBackingSectionSummaryTotal?.totalSummaryAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.sectionBonusSupport?.bonusSummaryAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    stylizedTextViews(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeDetailsLabel?.text = getString(R.string.Pledge_details)\n    binding?.deliveryDisclaimerSection?.root?.isGone = it\n    binding?.estimatedDeliveryLabel2?.isGone = true\n}\n--------------------------------------------------\nsubscribe {\n    binding?.backingSwipeRefreshLayout?.isRefreshing = it\n}\n--------------------------------------------------\nsubscribe {\n    setPromptText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.cancelPledgeRoot?.let { view ->\n        snackbar(view, getString(R.string.Something_went_wrong_please_try_again)).show()\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding?.cancelPledgeRoot?.let { view ->\n        snackbar(view, it).show()\n    }\n}\n--------------------------------------------------\nthis.viewModel.outputs.dismiss().compose(observeForUIV2()).subscribe {\n    dismiss()\n}\n--------------------------------------------------\nsubscribe {\n    (context as CancelPledgeDelegate?)?.pledgeSuccessfullyCancelled()\n}\n--------------------------------------------------\nsubscribe {\n    binding?.progressBar?.let { view ->\n        ViewUtils.setGone(view, !it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding?.yesCancelPledgeButton?.let { view ->\n        ViewUtils.setGone(view, !it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.viewModel.inputs.fragmentLifeCycle(it)\n}\n--------------------------------------------------\nsubscribe {\n    discoveryActivitySampleAdapter.takeActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    lazyHeartCrossFadeAnimation()?.start()\n}\n--------------------------------------------------\nsubscribe {\n    discoveryProjectCardAdapter.takeProjects(it)\n}\n--------------------------------------------------\nsubscribe {\n    discoveryEditorialAdapter.setShouldShowEditorial(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.discoveryEmptyView?.isGone = !it\n}\n--------------------------------------------------\nsubscribe {\n    discoveryOnboardingAdapter.setShouldShowOnboardingView(it)\n}\n--------------------------------------------------\nsubscribe {\n    startActivityFeedActivity()\n}\n--------------------------------------------------\nsubscribe {\n    startSetPasswordActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    startEditorialActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivity(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    startLoginToutActivity()\n}\n--------------------------------------------------\nsubscribe {\n    this.viewModel.inputs.heartContainerClicked()\n}\n--------------------------------------------------\nsubscribe {\n    binding?.discoveryRecyclerView?.smoothScrollToPosition(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.additionalPledgeAmountContainer?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.pledgeContainer?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.decreasePledge?.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.increasePledge?.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionHeaderRewardSummary?.pledgeHeaderContainer?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionBonusSupport?.decreaseBonus?.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionBonusSupport?.increaseBonus?.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionHeaderRewardSummary?.pledgeHeaderEstimatedDeliveryLabel?.text = String.format(\"%1$2s / %2$2s\", binding?.pledgeSectionHeaderRewardSummary?.pledgeHeaderEstimatedDeliveryLabel?.text, it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionHeaderRewardSummary?.pledgeHeaderEstimatedDeliveryLabel?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionFooter?.pledgeFooterContinueButton?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionTotal?.totalAmountConversion?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setConversionTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPayment?.paymentContainer?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    updatePledgeCardState(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionHeaderRewardSummary?.pledgeHeaderSummaryAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.pledgeAmount?.setTextAndSelection(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionBonusSupport?.bonusAmount?.setTextAndSelection(it)\n    binding?.pledgeSectionSummaryBonus?.bonusSummaryAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.pledgeAmount?.hint = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionBonusSupport?.bonusAmount?.hint = it\n}\n--------------------------------------------------\nsubscribe {\n    setPledgeMaximumText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.pledgeMaximum?.isInvisible = it\n    binding?.pledgeSectionBonusSupport?.bonusMaximum?.isInvisible = it\n}\n--------------------------------------------------\nsubscribe {\n    setPledgeMinimumText(it)\n}\n--------------------------------------------------\nsubscribe {\n    setCurrencySymbols(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.pledgeAmount?.let { pledgeAmount ->\n        setTextColor(it, pledgeAmount)\n    }\n    binding?.pledgeSectionPledgeAmount?.pledgeSymbolStart?.let { pledgeAmount ->\n        setTextColor(it, pledgeAmount)\n    }\n    binding?.pledgeSectionPledgeAmount?.pledgeSymbolEnd?.let { pledgeAmount ->\n        setTextColor(it, pledgeAmount)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    (binding?.pledgeSectionPayment?.cardsRecycler?.adapter as? RewardCardAdapter)?.takeCards(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    val position = (binding?.pledgeSectionPayment?.cardsRecycler?.adapter as? RewardCardAdapter)?.insertCard(it)\n    position?.let { position ->\n        this.viewModel.inputs.addedCardPosition(position)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    startActivity(Intent(this.context, LoginToutActivity::class.java))\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionEditableShipping?.shippingRules?.setText(it.toString())\n    binding?.pledgeSectionShipping?.shippingRulesStatic?.text = it.toString()\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionEditableShipping?.shippingAmountLoadingView?.isGone = true\n    binding?.pledgeSectionEditableShipping?.shippingAmount?.let { shippingAmount ->\n        setPlusTextView(shippingAmount, it)\n    }\n    binding?.pledgeSectionShipping?.shippingAmountStatic?.let { shippingAmountStatic ->\n        setPlusTextView(shippingAmountStatic, it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionSummaryShipping?.shippingSummaryAmount?.let { shippingSummaryAmount ->\n        setPlusTextView(shippingSummaryAmount, it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionSummaryShipping?.shippingLabel?.text = String.format(\"%s: %s\", getString(R.string.Shipping), it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionEditableShipping?.editableShippingCl?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionShipping?.staticShippingCl?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionSummaryShipping?.shippingSummary?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionSummaryPledge?.pledgeSummaryAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionSummaryBonus?.bonusSummary?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionSummaryBonus?.bonusSummaryAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionSummaryPledge?.pledgeSummary?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.dividerTotal?.root?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionTotal?.totalAmountLoadingView?.isGone = true\n    binding?.pledgeSectionTotal?.totalAmount?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setDeadlineWarning(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.deadlineWarning?.isInvisible = false\n}\n--------------------------------------------------\nsubscribe {\n    (activity as PledgeDelegate?)?.pledgeSuccessfullyCreated(it)\n}\n--------------------------------------------------\nsubscribe {\n    stripeNextAction(it)\n}\n--------------------------------------------------\nsubscribe {\n    activity?.applicationContext?.let {\n        binding?.pledgeContent?.let { pledgeContent ->\n            showErrorToast(it, pledgeContent, getString(R.string.general_error_something_wrong))\n        }\n    }\n}\n--------------------------------------------------\nsubscribe {\n    activity?.let { activity ->\n        ChromeTabsHelperActivity.openCustomTab(activity, UrlUtils.baseCustomTabsIntent(activity), Uri.parse(it), null)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    setHtmlStrings(it)\n}\n--------------------------------------------------\nsubscribe {\n    (activity as PledgeDelegate?)?.pledgeSuccessfullyUpdated()\n}\n--------------------------------------------------\nsubscribe {\n    (activity as PledgeDelegate?)?.pledgePaymentSuccessfullyUpdated()\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionFooter?.pledgeFooterPledgeButton?.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionFooter?.pledgeFooterPledgeButton?.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionFooter?.pledgeFooterPledgeButton?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionFooter?.pledgeFooterPledgeButtonProgress?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionFooter?.pledgeFooterContinueButton?.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    populateHeaderItems(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionPledgeAmount?.pledgeMinimum?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionBonusSupport?.bonusContainer?.isGone = it\n    binding?.pledgeSectionPledgeAmount?.pledgeContainer?.setPadding(0, resources.getDimension(R.dimen.grid_4).toInt(), 0, 0)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionHeaderRewardSummary?.pledgeHeaderContainer?.isGone = it\n    binding?.pledgeSectionRewardSummary?.pledgeHeaderContainerNoReward?.visibility = View.VISIBLE\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeSectionRewardSummary?.pledgeHeaderTitleNoReward?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding?.pledgeSectionPickupLocation?.localPickupContainer?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding?.pledgeSectionPickupLocation?.localPickupLocationName?.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setupClientId = it\n    flowControllerPresentPaymentOption(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.pledgeContent?.let { pledgeContent ->\n        context?.let {\n            showErrorToast(it, pledgeContent, getString(R.string.general_error_something_wrong))\n        }\n    }\n}\n--------------------------------------------------\nsubscribe {\n    (binding?.pledgeSectionPayment?.cardsRecycler?.adapter as? RewardCardAdapter)?.updateState(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.answerEmptyStateTv?.isVisible = it.isEmpty()\n    binding?.fqaRecyclerView?.isGone = it.isEmpty()\n    fqaAdapter.takeData(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.answerEmptyStateTv?.isVisible = true\n    binding?.fqaRecyclerView?.isGone = true\n}\n--------------------------------------------------\nsubscribe {\n    if (it) {\n        getString(R.string.Log_in_to_ask_the_project_creator_directly)\n    } else {\n        getString(R.string.Ask_the_project_creator_directly)\n    }.apply {\n        binding?.answerEmptyStateTv?.text = getString(R.string.Looks_like_there_arent_any_frequently_asked_questions) + \" \" + this\n    }\n    binding?.answerEmptyStateSepartor?.isGone = it\n    binding?.askQuestionButton?.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    viewElementAdapter?.submitList(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding?.projectCampaignViewListItems?.smoothScrollToPosition(it + 1)\n}\n--------------------------------------------------\nsubscribe {\n    requireActivity().startVideoActivity(startForResult, it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    viewElementAdapter?.setPlayerSeekPosition(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    environmentalCommitmentsAdapter.takeData(it)\n}\n--------------------------------------------------\nsubscribe {\n    context?.let { context ->\n        ApplicationUtils.openUrlExternally(context, it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    setAvatar(it)\n}\n--------------------------------------------------\nsubscribe(binding.statsView.backersCount::setText)\n--------------------------------------------------\nsubscribe {\n    setBlurbTextViews(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.category.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCreatorInfoLayout.commentsCount.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.loadingPlaceholderCreatorInfoLayout.creatorInfoLoadingContainer.isGone = !it\n}\n--------------------------------------------------\nsubscribe {\n    binding.creatorInfo.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.creatorName.text = it\n}\n--------------------------------------------------\nsubscribe(binding.statsView.deadlineCountdownTextView::setText)\n--------------------------------------------------\nsubscribe {\n    setGoalTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.location.text = it\n}\n--------------------------------------------------\nsubscribe {\n    context?.let { currentContext ->\n        binding.statsView.deadlineCountdownUnitTextView.text = it.deadlineCountdownDetail(currentContext, ksString)\n    }\n}\n--------------------------------------------------\nsubscribe(binding.percentageFunded::setProgress)\n--------------------------------------------------\nsubscribe {\n    binding.percentageFunded.isGone = it\n}\n--------------------------------------------------\nsubscribe(binding.statsView.pledged::setText)\n--------------------------------------------------\nsubscribe {\n    setProjectDisclaimerGoalNotReachedString(it)\n}\n--------------------------------------------------\nsubscribe {\n    setProjectDisclaimerGoalReachedString(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCreatorInfoLayout.projectDisclaimerTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setProjectLaunchDateString(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCreatorDashboardHeader.projectLaunchDate.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectName.text = it\n}\n--------------------------------------------------\nsubscribe {\n    context?.let { currentContext ->\n        binding.projectSocialText.text = SocialUtils.projectCardFriendNamepile(currentContext, it, ksString)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectSocialImage.isGone = it\n}\n--------------------------------------------------\nsubscribe { url: String? ->\n    url?.let {\n        Picasso.get().load(it).transform(CircleTransformation()).into(binding.projectSocialImage)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectSocialView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    context?.let { currentContext ->\n        binding.projectStateViewGroup.setBackgroundColor(ContextCompat.getColor(currentContext, it))\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectStateViewGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setCanceledProjectStateView()\n}\n--------------------------------------------------\nsubscribe {\n    setProjectSocialClickListener()\n}\n--------------------------------------------------\nsubscribe {\n    setSuccessfulProjectStateView(it)\n}\n--------------------------------------------------\nsubscribe {\n    setSuspendedProjectStateView()\n}\n--------------------------------------------------\nsubscribe {\n    setUnsuccessfulProjectStateView(it)\n}\n--------------------------------------------------\nsubscribe {\n    setStatsMargins(it)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectSocialActivity(it)\n}\n--------------------------------------------------\nsubscribe(binding.projectCreatorInfoLayout.updatesCount::setText)\n--------------------------------------------------\nsubscribe { pledgedAndGoal: Pair<String, String> ->\n    setConvertedCurrencyView(pledgedAndGoal)\n}\n--------------------------------------------------\nsubscribe {\n    binding.usdConversionTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    activity?.startRootCommentsActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    activity?.startProjectUpdatesActivity(it)\n}\n--------------------------------------------------\nsubscribe {\n    activity?.startCreatorBioWebViewActivity(it.project())\n}\n--------------------------------------------------\nsubscribe {\n    activity?.startReportProjectActivity(it.project(), startForResult)\n}\n--------------------------------------------------\nsubscribe {\n    activity?.startLoginActivity()\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCreatorInfoLayout.reportProject.isGone = !it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCreatorInfoLayout.projectFlagged.isGone = !it\n}\n--------------------------------------------------\nsubscribe {\n    context?.let { it1 ->\n        ApplicationUtils.openUrlExternally(it1, it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    rewardsAdapter.populateRewards(it)\n}\n--------------------------------------------------\nsubscribe {\n    scrollToReward(it)\n}\n--------------------------------------------------\nsubscribe {\n    dialog.dismiss()\n    showPledgeFragment(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    dialog.dismiss()\n    showAddonsFragment(it)\n}\n--------------------------------------------------\nsubscribe {\n    setRewardsCount(it)\n}\n--------------------------------------------------\nsubscribe {\n    showAlert()\n}\n--------------------------------------------------\nsubscribe { activity ->\n    val user = activity?.user()\n    val project = activity?.project()\n    if (user != null && project != null) {\n        binding.activityTitle.visibility = View.GONE\n        user.avatar().small()?.let { url ->\n            binding.activityImage.loadCircleImage(url)\n        }\n        binding.activitySubtitle.text = Html.fromHtml(ksString.format(context().getString(R.string.activity_friend_backed_project_name_by_creator_name), \"friend_name\", user.name(), \"project_name\", project.name(), \"creator_name\", project.creator().name()))\n    }\n    binding.seeActivityButton.setOnClickListener {\n        seeActivityOnClick()\n    }\n    binding.activityClickArea.setOnClickListener {\n        activityProjectOnClick(activity)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    it.user()?.let { user ->\n        user.avatar().small().let { url ->\n            Picasso.get().load(url).transform(CircleTransformation()).into(binding.activityImage)\n        }\n        binding.activityTitle.text = ksString.format(context().getString(R.string.activity_user_name_is_now_following_you), \"user_name\", user.name())\n        binding.activitySubtitle.setText(R.string.activity_follow_back)\n        binding.activitySubtitle.visibility = View.GONE\n        binding.seeActivityButton.setOnClickListener {\n            seeActivityOnClick()\n        }\n    }\n}\n--------------------------------------------------\nsubscribe { activity ->\n    activity.project()?.let { project ->\n        val photo = project.photo()\n        photo?.let {\n            Picasso.get().load(photo.little()).into(binding.activityImage)\n        }\n        binding.activityTitle.text = project.name()\n        val activitySubtitleText = when(activity.category()) {\n            Activity.CATEGORY_FAILURE -> context.getString(R.string.activity_project_was_not_successfully_funded)\n            Activity.CATEGORY_CANCELLATION -> context.getString(R.string.activity_funding_canceled)\n            Activity.CATEGORY_LAUNCH -> activity.user()?.let {\n                ksString.format(context.getString(R.string.activity_user_name_launched_project), \"user_name\", it.name())\n            }\n            Activity.CATEGORY_SUCCESS -> context.getString(R.string.activity_successfully_funded)\n            Activity.CATEGORY_UPDATE -> activity.update()?.let { update ->\n                ksString.format(context.getString(R.string.activity_posted_update_number_title), \"update_number\", update.sequence().toString(), \"update_title\", update.title())\n            }\n            else -> \"\"\n        }\n        if (activitySubtitleText?.isNotBlank() == true) {\n            binding.activitySubtitle.text = activitySubtitleText\n        }\n    }\n    binding.seeActivityButton.setOnClickListener {\n        seeActivityOnClick()\n    }\n    binding.activityClickArea.setOnClickListener {\n        activityProjectOnClick(activity)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.default.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.loading.onNext(it)\n}\n--------------------------------------------------\nsubscribe(ViewUtils.setGone(binding.addOnConversionTextView))\n--------------------------------------------------\nsubscribe {\n    binding.addOnConversionTextView.text = this.ksString.format(this.currencyConversionString, \"reward_amount\", it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnDescriptionTextView.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.titleContainer.addOnTitleNoSpannable.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnDescriptionTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnMinimumTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    rewardItemAdapter.rewardsItems(it)\n}\n--------------------------------------------------\nsubscribe(ViewUtils.setGone(binding.addOnItemsContainer.addOnItemLayout))\n--------------------------------------------------\nsubscribe { shouldHideAddonAmount ->\n    if (shouldHideAddonAmount) {\n        binding.titleContainer.addOnTitleTextView.visibility = View.GONE\n        binding.titleContainer.addOnTitleNoSpannable.visibility = View.VISIBLE\n    } else {\n        binding.titleContainer.addOnTitleNoSpannable.visibility = View.GONE\n        binding.titleContainer.addOnTitleTextView.visibility = View.VISIBLE\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.titleContainer.addOnTitleNoSpannable.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.titleContainer.addOnTitleTextView.text = RewardViewUtils.styleTitleForAddOns(context(), it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    binding.rewardItemLocalPickupContainer.localPickupGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.rewardItemLocalPickupContainer.localPickupLocation.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setAddOnItemLayoutVisibility(!it)\n    binding.addOnCard.setDividerVisibility(!it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setAddOnTitleText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setAddOnDescription(it)\n    binding.addOnCard.setAddonDescriptionVisibility(!it.isNullOrEmpty())\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setAddOnMinimumText(it.toString())\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setAddonConversionVisibility(!it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setAddonConversionText(this.ksString.format(context().getString(R.string.About_reward_amount), \"reward_amount\", it.toString()))\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setBackerLimitPillVisibility(!it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setAddonQuantityRemainingPillVisibility(!it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setBackerLimitText(this.ksString.format(context().getString(R.string.limit_limit_per_backer), \"limit_per_backer\", it))\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setAddonQuantityRemainingText(this.ksString.format(context().getString(R.string.rewards_info_time_left), \"time\", it))\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setTimeLeftVisibility(!it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setTimeLeftText(formattedExpirationString(it))\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setShippingAmountVisibility(!it)\n}\n--------------------------------------------------\nsubscribe {\n    if (it.isNotEmpty()) {\n        val rewardAndShippingString = context().getString(R.string.reward_amount_plus_shipping_cost_each)\n        val stringSections = rewardAndShippingString.split(\"+\")\n        val shippingString = \"+\" + stringSections[1]\n        binding.addOnCard.setShippingAmountText(this.ksString.format(shippingString, \"shipping_cost\", it))\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.addOnCard.setStepperMax(it)\n}\n--------------------------------------------------\nsubscribe { quantityPerId ->\n    quantityPerId?.let {\n        viewListener.quantityPerId(it)\n    }\n    val quantity = quantityPerId.first\n    binding.addOnCard.setStepperInitialValue(quantity)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.addOnCard.setLocalPickUpIsGone(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.addOnCard.setLocalPickUpName(it)\n}\n--------------------------------------------------\nsubscribe {\n    viewModel.inputs.currentQuantity(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setSeparatorVisibility(false)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setCommentUserName(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setCommentReplies(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setAvatarUrl(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setCommentBody(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setCommentCardStatus(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setReplyButtonVisibility(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setCommentPostTime(DateTimeUtils.relative(context(), ksString, it))\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setCommentEnabledThreads(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.onCommentGuideLinesClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.onReplyButtonClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.onRetryViewClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.onCommentRepliesClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.onFlagButtonClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.onShowCommentClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.onCommentPostedSuccessFully(it, absoluteAdapterPosition)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.onCommentPostedFailed(it, absoluteAdapterPosition)\n}\n--------------------------------------------------\nsubscribe {\n    binding.commentsCardView.setCommentBadge(it)\n}\n--------------------------------------------------\nsubscribe {\n    Picasso.get().load(it).transform(CircleTransformation()).into(binding.userImageView)\n}\n--------------------------------------------------\nsubscribe {\n    binding.unreadMessagesCount.text = when {\n        it.isNullOrZero() -> null\n        else -> NumberUtils.format(it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.unseenActivityCount.text = when {\n        it.isNullOrZero() -> null\n        else -> NumberUtils.format(it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.unseenActivityCount.setTextColor(ContextCompat.getColor(context(), it))\n}\n--------------------------------------------------\nsubscribe { user ->\n    binding.drawerSettings.setOnClickListener {\n        this.delegate.loggedInViewHolderSettingsClick(this, user)\n    }\n    binding.drawerProfile.setOnClickListener {\n        this.delegate.loggedInViewHolderProfileClick(this, user)\n    }\n    binding.userContainer.setOnClickListener {\n        this.delegate.loggedInViewHolderProfileClick(this, user)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    binding.title.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.description.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.editorialViewHolderClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    delegate?.managePledgeClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    setProjectFinaCollectionDateText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.erroredBackingProjectTitle.text = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.pledgeHeaderItemTitle.text = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.pledgeHeaderItemAmount.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.questionAnswerLayout.setQuestion(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.questionAnswerLayout.setAnswer(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.questionAnswerLayout.setLastedUpdateDate(it)\n}\n--------------------------------------------------\nsubscribe {\n    viewModel.inputs.messageThreadCardViewClicked()\n}\n--------------------------------------------------\nsubscribe {\n    setDateTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    setTypeface(binding.messageThreadDateTextView, it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageThreadBodyTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setTypeface(binding.messageThreadBodyTextView, it)\n}\n--------------------------------------------------\nsubscribe {\n    setParticipantAvatarImageView(it)\n}\n--------------------------------------------------\nsubscribe {\n    setTypeface(binding.participantNameTextView, it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.participantNameTextView.text = it\n}\n--------------------------------------------------\nsubscribe(ViewUtils.setGone(binding.messageThreadUnreadCountTextView))\n--------------------------------------------------\nsubscribe {\n    setUnreadCountTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageDeliveryStatusTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageBodyRecipientCardView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageBodySenderCardView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageBodySenderTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.messageSenderAvatarImageView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.errorPaginationRetryButtonGroup.visibility = it.toVisibility()\n}\n--------------------------------------------------\nsubscribe {\n    binding.creditCardLogo.setImageResource(it)\n}\n--------------------------------------------------\nsubscribe {\n    setExpirationDateTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.deleteCardButtonClicked(this, it)\n}\n--------------------------------------------------\nthis.vm.outputs.lastFour().compose(observeForUIV2()).subscribe {\n    setLastFourTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.creditCardLogo.contentDescription = it\n}\n--------------------------------------------------\nthis.viewModel.outputs.preparePlayerWithUrl().subscribe {\n    initializePlayer(it)\n}\n--------------------------------------------------\nsubscribe {\n    stopPlayer()\n}\n--------------------------------------------------\nsubscribe {\n    pausePlayer()\n}\n--------------------------------------------------\nsubscribe {\n    updateProgressUI()\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardStats.backersCount.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectMetadataView.backingGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardStats.deadlineCountdown.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectMetadataView.featuredGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.friendRowBackingGroup.friendBackingAvatar2.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.friendRowBackingGroup.friendBackingAvatar3.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setFriendAvatarUrl(it, binding.friendRowBackingGroup.friendBackingAvatar1)\n}\n--------------------------------------------------\nsubscribe {\n    setFriendAvatarUrl(it, binding.friendRowBackingGroup.friendBackingAvatar2)\n}\n--------------------------------------------------\nsubscribe {\n    setFriendAvatarUrl(it, binding.friendRowBackingGroup.friendBackingAvatar3)\n}\n--------------------------------------------------\nsubscribe {\n    binding.friendRowBackingGroup.friendBackingGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.friendRowBackingGroup.friendBackingMessage.text = SocialUtils.projectCardFriendNamepile(context(), it, ksString)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectStateViewGroup.fundingUnsuccessfulViewGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardPhoto.photo.isInvisible = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardTags.locationTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardTags.locationContainer.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setStyledNameAndBlurb(it)\n}\n--------------------------------------------------\nsubscribe {\n    delegate.projectCardViewHolderClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardStats.percent.text = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.percentageFunded.progress = it\n}\n--------------------------------------------------\nsubscribe {\n    resizeProjectImage(it)\n}\n--------------------------------------------------\nsubscribe {\n    setCanceledTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardStats.projectCardStatsViewGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setFailedAtTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    setDeadlineCountdownText(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectStateViewGroup.projectStateViewGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setSubcategoryTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardTags.subcategoryContainer.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setSuccessfullyFundedDateTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    setSuspendedAtTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardTags.projectTags.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectCardTags.projectWeLoveContainer.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectMetadataView.featured.text = ksString.format(context().getString(R.string.discovery_baseball_card_metadata_featured_project), \"category_name\", it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectMetadataView.projectMetadataViewGroup.background = ContextCompat.getDrawable(context(), it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectMetadataView.projectMetadataViewGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectMetadataView.savedViewGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectMetadataView.comingSoonGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.projectStateViewGroup.fundingSuccessfulViewGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    setDefaultTopPadding(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.heartButton?.setImageDrawable(ContextCompat.getDrawable(context(), it))\n}\n--------------------------------------------------\nsubscribe {\n    delegate.onHeartButtonClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    val photo = it?.photo()\n    if (photo != null) {\n        binding.projectContextImageView.visibility = View.VISIBLE\n        binding.projectContextImageView.loadImage(photo.full())\n    } else {\n        binding.projectContextImageView.visibility = View.INVISIBLE\n    }\n    binding.projectContextProjectName.text = it?.name()\n    binding.projectContextCreatorName.text = ksString.format(context().getString(R.string.project_creator_by_creator), \"creator_name\", it?.creator()?.name())\n}\n--------------------------------------------------\nsubscribe {\n    viewModel.inputs.enabledSwitchClick(it)\n}\n--------------------------------------------------\nsubscribe(SwitchCompatUtils.setCheckedWithoutAnimation(binding.enabledSwitch))\n--------------------------------------------------\nsubscribe(ViewUtils.showToast(context()))\n--------------------------------------------------\nsubscribe {\n    binding.friendImage.loadCircleImage(it.avatar().medium())\n    binding.friendName.text = it?.name()\n}\n--------------------------------------------------\nsubscribe {\n    binding.viewMorePaginationButton.visibility = it.toVisibility()\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.newPaymentPlusIcon.isGone = false\n    this.binding.newPaymentProgress.isGone = true\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.newPaymentProgress.isGone = false\n    this.binding.newPaymentPlusIcon.isGone = true\n}\n--------------------------------------------------\nsubscribe {\n    binding.rewardCardDetails.rewardCardExpirationDate.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    binding.rewardCardDetails.rewardCardLogo.setImageResource(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.rewardCardDetails.rewardCardLogo.contentDescription = it\n}\n--------------------------------------------------\nsubscribe {\n    setLastFourTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(binding.retryCardWarning.retryCardWarning, !it)\n}\n--------------------------------------------------\nsubscribe {\n    setExpirationDateText(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardCardDetailsLayout.rewardCardExpirationDate.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.cardContainer.isClickable = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardCardDetailsLayout.rewardCardLogo.setImageResource(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardCardDetailsLayout.rewardCardLogo.contentDescription = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardCardDetailsLayout.rewardCardLogo.alpha = it\n}\n--------------------------------------------------\nthis.viewModel.outputs.lastFour().compose(observeForUIV2()).subscribe {\n    setLastFourText(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardCardDetailsLayout.rewardCardLastFour.setTextColor(ContextCompat.getColor(context(), it))\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(this.binding.cardNotAllowedWarning, !it)\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate.cardSelected(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(this.binding.retryCardWarningLayout.retryCardWarning, !it)\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setInvisible(this.binding.selectImageView, !it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardConversionTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardDescriptionTextView.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardDescriptionTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardDescriptionContainer.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardPledgeButton.isEnabled = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardRemainingTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    ViewUtils.setGone(this.binding.rewardLimitContainer, it)\n}\n--------------------------------------------------\nsubscribe {\n    setRemainingRewardsTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardPledgeButton.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    setShippingSummaryText(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardShippingSummary.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardMinimumTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardEndingTextView.text = formattedExpirationString(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardEndingTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardsItemSection.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardTitleTextView.setText(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardTitleTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardTitleTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.delegate?.rewardClicked(it.second)\n}\n--------------------------------------------------\nsubscribe {\n    setPledgeButtonVisibility(it)\n}\n--------------------------------------------------\nsubscribe {\n    setBackersCountTextView(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardBackersCount.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardEstimatedDelivery.text = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardEstimatedDeliverySection.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardConversionTextView.isGone = it\n    this.binding.rewardMinimumTextView.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.viewModel.inputs.rewardClicked(this.adapterPosition)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.rewardAddOnsAvailable.isGone = !it\n}\n--------------------------------------------------\nsubscribe { isGone ->\n    if (!isGone) this.binding.rewardSelectedRewardTag.visibility = View.VISIBLE else this.binding.rewardSelectedRewardTag.isGone = true\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.localPickupContainer.localPickupGroup.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.localPickupContainer.localPickupLocation.text = it\n}\n--------------------------------------------------\nsubscribe { commentCardData ->\n    CommentCardStatus.values().firstOrNull {\n        commentCardData.commentCardState == it.commentCardStatus\n    }?.let {\n        if (it == CommentCardStatus.CANCELED_PLEDGE_MESSAGE || it == CommentCardStatus.FLAGGED_COMMENT) {\n            binding.commentsCardView.setCommentCardStatus(it)\n            context().getString(R.string.This_person_canceled_their_pledge).also { message ->\n                binding.commentsCardView.setCancelPledgeMessage(message)\n            }\n            binding.commentsCardView.setCommentCardClickedListener(object : OnCommentCardClickedListener {\n                override fun onRetryViewClicked(view: View) {}\n\n                override fun onReplyButtonClicked(view: View) {}\n\n                override fun onFlagButtonClicked(view: View) {}\n\n                override fun onViewRepliesButtonClicked(view: View) {}\n\n                override fun onCommentGuideLinesClicked(view: View) {}\n\n                override fun onShowCommentClicked(view: View) {\n                    vm.inputs.onShowCanceledPledgeRootCommentClicked()\n                }\n            })\n        }\n    }\n    commentCardData?.comment?.let { comment ->\n        binding.commentsCardView.setCommentUserName(comment.author().name())\n        binding.commentsCardView.setCommentBody(comment.body())\n        binding.commentsCardView.hideReplyButton()\n        comment.createdAt()?.let { createdAt ->\n            binding.commentsCardView.setCommentPostTime(DateTimeUtils.relative(context(), ksString, createdAt))\n        }\n        binding.commentsCardView.setCommentUserName(comment.author().name())\n        binding.commentsCardView.setAvatarUrl(comment.author().avatar().medium())\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.shippingRulesItemTextView.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setCreatorAvatarImage(it)\n}\n--------------------------------------------------\nsubscribe {\n    binding.surveyTitle.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setSurveyDescription(it)\n}\n--------------------------------------------------\nsubscribe {\n    startSurveyResponseActivity(it)\n}\n--------------------------------------------------\nsubscribe { categoryName: String ->\n    setCategoryButtonText(categoryName)\n}\n--------------------------------------------------\nsubscribe { category: Category ->\n    this.delegate.categoryViewHolderClicked(category)\n}\n--------------------------------------------------\nsubscribe {\n    showBackedProject(it)\n}\n--------------------------------------------------\nsubscribe {\n    startShare(it)\n}\n--------------------------------------------------\nsubscribe {\n    startShareOnFacebook(it)\n}\n--------------------------------------------------\nsubscribe {\n    startShareOnTwitter(it)\n}\n--------------------------------------------------\nsubscribe {\n    setBackersOnlyVisibility(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.updateBlurb.text = it\n}\n--------------------------------------------------\nsubscribe {\n    setCommentsCount(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.updateCommentsContainer.isGone = it\n}\n--------------------------------------------------\nthis.viewModel.outputs.likesCount().compose(observeForUIV2()).subscribe {\n    setLikesCount(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.updateLikesContainer.isGone = it\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.updateDate.text = DateTimeUtils.longDate(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.updateSequence.text = this.ksString.format(updateSequenceTemplate, \"update_count\", it.toString())\n}\n--------------------------------------------------\nsubscribe {\n    delegate?.updateCardClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.binding.updateTitle.text = it\n}\n--------------------------------------------------\nsubscribe {\n    this.viewModel.inputs.updateClicked()\n}\n--------------------------------------------------\nsubscribe {\n    showStepper()\n    addButtonIsVisible.onNext(false)\n}\n--------------------------------------------------\nsubscribe {\n    hideStepper()\n    addButtonIsVisible.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    this.chosenCurrency.onNext(it.toString())\n}\n--------------------------------------------------\nuserPrivacy.map {\n    it.email\n}.subscribe {\n    this.email.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.passwordRequiredContainerIsVisible.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showEmailErrorIcon.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.chosenCurrency.onNext(it)\n    this.success.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.error.onNext(it?.localizedMessage ?: \"\")\n}\n--------------------------------------------------\nsubscribe { p: Project ->\n    analyticEvents.trackProjectCardClicked(p, EventContextValues.ContextPageName.ACTIVITY_FEED.contextName)\n}\n--------------------------------------------------\nsubscribe {\n    surveys.onNext(it)\n}\n--------------------------------------------------\nsubscribe { v: List<ErroredBacking> ->\n    erroredBackings.onNext(v)\n}\n--------------------------------------------------\nsubscribe {\n    currentUser.refresh(it)\n}\n--------------------------------------------------\npaginator.paginatedData().subscribe {\n    activityList.onNext(it)\n}\n--------------------------------------------------\npaginator.isFetching.subscribe {\n    isFetchingActivities.onNext(it)\n}\n--------------------------------------------------\ncurrentUser.loggedInUser().take(1).subscribe {\n    refresh()\n}\n--------------------------------------------------\nsubscribe {\n    loggedOutEmptyStateIsVisible.onNext(it)\n}\n--------------------------------------------------\nmanagePledgeClicked.subscribe { v: String ->\n    startFixPledge.onNext(v)\n}\n--------------------------------------------------\nsubscribe {\n    loggedInEmptyStateIsVisible.onNext(it)\n}\n--------------------------------------------------\nfeedViewed.take(1).subscribe {\n    analyticEvents.trackActivityFeedPageViewed()\n}\n--------------------------------------------------\ndiscoverProjectsClick.subscribe {\n    analyticEvents.trackDiscoverProjectCTAClicked()\n}\n--------------------------------------------------\nsubscribe {\n    bindActivity.onNext(it)\n}\n--------------------------------------------------\nsubscribe(this.minimumAmountTitle)\n--------------------------------------------------\nsubscribe(this.conversionIsGone)\n--------------------------------------------------\nprojectAndReward.map {\n    getCurrency(it)\n}.compose(bindToLifecycle()).subscribe(this.conversion)\n--------------------------------------------------\nsubscribe(this.descriptionForReward)\n--------------------------------------------------\nsubscribe {\n    this.descriptionForNoReward.onNext(R.string.Thanks_for_bringing_this_project_one_step_closer_to_becoming_a_reality)\n    this.titleForNoReward.onNext(R.string.You_pledged_without_a_reward)\n}\n--------------------------------------------------\nsubscribe(this.rewardItems)\n--------------------------------------------------\nsubscribe(this.rewardItemsAreGone)\n--------------------------------------------------\nsubscribe(this.titleForReward)\n--------------------------------------------------\nreward.map {\n    !it.isAddOn()\n}.compose(bindToLifecycle()).subscribe(this.titleIsGone)\n--------------------------------------------------\nsubscribe(this.titleForAddOn)\n--------------------------------------------------\nsubscribe {\n    this.localPickUpIsGone.onNext(!it)\n}\n--------------------------------------------------\nsubscribe(this.localPickUpName)\n--------------------------------------------------\npledgeData.take(1).subscribe(this.analyticEvents::trackAddOnsScreenViewed)\n--------------------------------------------------\nisSameReward.filter {\n    !it\n}.subscribe {\n    this.currentSelection.value?.clear()\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingSelectorIsGone.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingRulesAndProject.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingRuleSelected.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    shippingRules.onNext(it.filterNotNull())\n}\n--------------------------------------------------\nsubscribe {\n    addOnsFromGraph.onNext(it)\n}\n--------------------------------------------------\nfilteredAddOns.distinctUntilChanged().subscribe {\n    this.addOnsListFiltered.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.isEmptyState.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    updateQuantityById(it.first)\n    calculateTotal(it.second.second)\n}\n--------------------------------------------------\nisButtonEnabled.subscribe {\n    this.isEnabledCTAButton.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackAddOnsContinueCTA(it.first)\n    this.pledgeFragmentData.onNext(it)\n}\n--------------------------------------------------\nthis.pledgeFragmentData.distinctUntilChanged().subscribe {\n    this.showPledgeFragment.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.totalSelectedAddOns.onNext(it)\n}\n--------------------------------------------------\nsubscribe { selection ->\n    selection[updated.second] = updated.first\n}\n--------------------------------------------------\naddOn.map {\n    it.title()\n}.subscribe(this.title)\n--------------------------------------------------\nsubscribe {\n    this.description.onNext(it)\n}\n--------------------------------------------------\naddOn.map {\n    !RewardUtils.isItemized(it)\n}.subscribe {\n    this.rewardItemsAreGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.rewardItems.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.minimum.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.convertedMinimum.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.conversionIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.conversion.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.backerLimitPillIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.remainingQuantityPillIsGone.onNext(it)\n}\n--------------------------------------------------\naddOn.map {\n    it.limit().toString()\n}.subscribe {\n    this.backerLimit.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.remainingQuantity.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.deadlineCountdownIsGone.onNext(it)\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.second\n}.subscribe {\n    this.deadlineCountdown.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingAmountIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingAmount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.quantity.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.maxQuantity.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.localPickUpName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.quantityPerId.onNext(it)\n}\n--------------------------------------------------\nthis.pledgeSuccessfullyCancelled.subscribe {\n    this.showUpdatePledgeSuccess.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.projectDataAndReward.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.backerName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.backerAvatar.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.backerNumber.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeDate.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeAmount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingSummaryIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeSummaryIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeStatusData.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingLocation.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.totalAmount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.paymentMethodIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.cardExpiration.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.cardIssuer.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.cardLastFour.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.cardLogo.onNext(it)\n}\n--------------------------------------------------\nbackingIsNotErrored.subscribe {\n    this.fixPaymentMethodButtonIsGone.onNext(it)\n}\n--------------------------------------------------\nbackingIsNotErrored.subscribe {\n    this.fixPaymentMethodMessageIsGone.onNext(it)\n}\n--------------------------------------------------\nthis.fixPaymentMethodButtonClicked.subscribe {\n    this.notifyDelegateToShowFixPledge.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.receivedCheckboxChecked.onNext(it)\n}\n--------------------------------------------------\nsubscribe()\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackManagePledgePageViewed(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    val isUserCreator = it.second\n    val shouldBeGone = it.first\n    if (isUserCreator) {\n        this.receivedSectionIsGone.onNext(true)\n        this.receivedSectionCreatorIsGone.onNext(shouldBeGone)\n    } else {\n        this.receivedSectionIsGone.onNext(shouldBeGone)\n        this.receivedSectionCreatorIsGone.onNext(true)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.notifyDelegateToRefreshProject.onNext(Unit)\n    this.swipeRefresherProgressIsVisible.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    this.swipeRefresherProgressIsVisible.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.addOnsList.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.bonusSupport.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.estimatedDelivery.onNext(it)\n}\n--------------------------------------------------\nisCreator.subscribe {\n    this.deliveryDisclaimerSectionIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    isRefreshing.onNext(false)\n}\n--------------------------------------------------\nsubscribe { v: BackingWrapper ->\n    backingWrapper.onNext(v)\n}\n--------------------------------------------------\nsubscribe {\n    this.expirationDate.onNext(it)\n}\n--------------------------------------------------\ncard.map {\n    it.expiration().isNull()\n}.subscribe {\n    this.expirationIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.lastFour.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.issuerImage.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.issuer.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.retryCopyIsVisible.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeAmountAndProjectName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showServerError.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.success.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showCancelError.onNext(it)\n}\n--------------------------------------------------\nthis.goBackButtonClicked.subscribe {\n    this.dismiss.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    it.email?.let { email ->\n        this.currentEmail.onNext(email)\n    }\n    it.isEmailVerified?.let { verified ->\n        this.sendVerificationIsHidden.onNext(verified)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    it?.let { stringRes ->\n        this.warningText.onNext(stringRes)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    it?.let { colorRes ->\n        this.warningTextColor.onNext(colorRes)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    it?.let { stringRes ->\n        this.verificationEmailButtonText.onNext(stringRes)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.emailErrorIsVisible.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.saveButtonIsEnabled.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    it?.localizedMessage?.let { message ->\n        this.error.onNext(message)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    it.updateUserAccount()?.user()?.email()?.let { email ->\n        this.currentEmail.onNext(email)\n    }\n    this.success.onNext(Unit)\n}\n--------------------------------------------------\nsendEmailNotification.compose(valuesV2()).subscribe {\n    this.success.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.commentCardStatus.onNext(CommentCardStatus.FAILED_TO_SEND_COMMENT)\n    it.second.first.comment?.let { it1 ->\n        this.failedToPosted.onNext(it1)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.authorBadge.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    cardStatus(it.first, it.second.getValue())?.let { status ->\n        this.commentCardStatus.onNext(status)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.isReplyButtonVisible.onNext(shouldReplyButtonBeVisible(it.first, it.second.getValue()))\n}\n--------------------------------------------------\ncomment.filter {\n    it.parentId() > 0\n}.subscribe {\n    this.isCommentReply.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.commentRepliesCount.onNext(it.first)\n}\n--------------------------------------------------\nsubscribe {\n    this.commentAuthorName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.commentAuthorAvatarUrl.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.commentMessageBody.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    it?.let { date ->\n        this.commentPostTime.onNext(date)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.viewCommentReplies.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.openCommentGuideLines.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.replyToComment.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.retrySendComment.onNext(it)\n}\n--------------------------------------------------\ncomment.compose(takeWhenV2(this.onFlagButtonClicked)).subscribe {\n    this.flagComment.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showCanceledComment.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.commentCardStatus.onNext(CommentCardStatus.COMMENT_FOR_LOGIN_BACKED_USERS)\n    this.postedSuccessfully.onNext(it)\n    if (it.isReply()) this.isReplyButtonVisible.onNext(false)\n}\n--------------------------------------------------\nloggedInUser.subscribe {\n    currentUserAvatar.onNext(it.avatar().small())\n}\n--------------------------------------------------\nsubscribe {\n    val composerStatus = getCommentComposerStatus(Pair(it.first, it.second))\n    showCommentComposer.onNext(composerStatus != CommentComposerStatus.GONE)\n    commentComposerStatus.onNext(composerStatus)\n}\n--------------------------------------------------\nsubscribe {\n    trackRootCommentPageViewEvent(it)\n}\n--------------------------------------------------\nsubscribe {\n    if (openedThreadActivityFromDeepLink) {\n        trackRootCommentPageViewEvent(it)\n        openedThreadActivityFromDeepLink = false\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.startThreadActivityFromDeepLink.onNext(Pair(it.first, it.second.second?.id()?.toString()))\n    openedThreadActivityFromDeepLink = true\n}\n--------------------------------------------------\nsubscribe {\n    commentsList.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackCommentCTA(it.second.first, it.first.id().toString(), it.first.body(), it.second.second?.id()?.toString())\n}\n--------------------------------------------------\nthis.onShowGuideLinesLinkClicked.subscribe {\n    showGuideLinesLink.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.setEmptyState.onNext(it == 0)\n}\n--------------------------------------------------\nthis.initialError.subscribe {\n    this.displayInitialError.onNext(true)\n}\n--------------------------------------------------\nthis.paginationError.subscribe {\n    this.displayPaginationError.onNext(true)\n}\n--------------------------------------------------\nsubscribe { pair ->\n    this.hasPendingComments.onNext(Pair(pair.first.any {\n        it.commentCardState == CommentCardStatus.TRYING_TO_POST.commentCardStatus || it.commentCardState == CommentCardStatus.FAILED_TO_SEND_COMMENT.commentCardStatus\n    }, pair.second))\n}\n--------------------------------------------------\nthis.backPressed.subscribe {\n    this.closeCommentsPage.onNext(it)\n}\n--------------------------------------------------\nsubscribe { pair ->\n    val cardData = pair.first.first.first {\n        it.comment?.id() == pair.second.first.id()\n    }\n    val threadData = Pair(cardData, pair.second.second)\n    this.startThreadActivity.onNext(Pair(threadData, pair.first.second.second?.id()?.toString()))\n}\n--------------------------------------------------\nsubscribe {\n    this.commentsList.onNext(it)\n}\n--------------------------------------------------\nthis.commentsList.filter {\n    it.isNotEmpty()\n}.subscribe {\n    this.outputCommentList.onNext(it)\n}\n--------------------------------------------------\napolloPaginate.isFetching.share().subscribe {\n    this.isFetchingComments.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.initialError.onNext(it.first)\n}\n--------------------------------------------------\nsubscribe {\n    this.paginationError.onNext(it.second)\n}\n--------------------------------------------------\nsubscribe {\n    this.newlyPostedCommentsList.clear()\n}\n--------------------------------------------------\nsubscribe {\n    this.isRefreshing.onNext(false)\n}\n--------------------------------------------------\nsubscribe {\n    sharedPreferences.edit().putBoolean(SharedPreferenceKey.CONSENT_MANAGEMENT_PREFERENCE, it).apply()\n}\n--------------------------------------------------\nsubscribe {\n    this.error.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.success.onNext(it)\n    this.analytics?.reset()\n}\n--------------------------------------------------\nsubscribe {\n    this.url.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.messageIconIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.startComposeMessageActivity.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.startMessageActivity.onNext(it)\n}\n--------------------------------------------------\nmainPageUri.subscribe {\n    startDiscoveryActivity.onNext(Unit)\n}\n--------------------------------------------------\nprojectFromEmail.subscribe {\n    startProjectActivity.onNext(it)\n}\n--------------------------------------------------\nisKSDomainUriFromEmail.subscribe {\n    startDiscoveryActivity.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    startDiscoveryActivity.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    onDeepLinkToProjectPage(it, startProjectActivity)\n}\n--------------------------------------------------\nsubscribe {\n    onDeepLinkToProjectPage(it, startProjectActivityToSave)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivityForComment.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivityForUpdate.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivityForCommentToUpdate.onNext(it)\n}\n--------------------------------------------------\nuriFromIntent.filter {\n    it.isSettingsUrl()\n}.subscribe {\n    updateUserPreferences.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    refreshUserAndFinishActivity(it, currentUser)\n}\n--------------------------------------------------\nsubscribe {\n    finishDeeplinkActivity.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    startProjectActivityWithCheckout.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    startBrowser.onNext(it)\n}\n--------------------------------------------------\npaginator.isFetching().compose(bindToLifecycle()).subscribe(isFetchingProjects)\n--------------------------------------------------\nsubscribe {\n    isFetchingProjects.onNext(false)\n}\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackProjectCardClicked(it, DISCOVER.contextName)\n}\n--------------------------------------------------\nsubscribe {\n    val refTag = RefTagUtils.projectAndRefTagFromParamsAndProject(it.first, it.second)\n    val cookieRefTag = RefTagUtils.storedCookieRefTagForProject(it.second, cookieManager, sharedPreferences)\n    val projectData = builder().refTagFromIntent(refTag.second).refTagFromCookie(cookieRefTag).project(it.second).build()\n    analyticEvents.trackDiscoverProjectCtaClicked(it.first, projectData)\n}\n--------------------------------------------------\nsubscribe(projectList)\n--------------------------------------------------\nsubscribe {\n    if (it.first.displayPrelaunch() == true && ffClient.getBoolean(FlagKey.ANDROID_PRE_LAUNCH_SCREEN)) {\n        startPreLaunchProjectActivity.onNext(it)\n    } else {\n        startProjectActivity.onNext(it)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    shouldShowOnboardingView.onNext(false)\n    activity.onNext(null)\n    projectList.onNext(emptyList())\n}\n--------------------------------------------------\nsubscribe(shouldShowEditorial)\n--------------------------------------------------\neditorialClicked.compose(bindToLifecycle()).subscribe(startEditorialActivity)\n--------------------------------------------------\nsubscribe(shouldShowOnboardingView)\n--------------------------------------------------\nsubscribe {\n    startSetPasswordActivity.onNext(it)\n}\n--------------------------------------------------\nsubscribe(shouldShowEmptySavedView)\n--------------------------------------------------\nsubscribe {\n    startHeartAnimation.onNext(null)\n}\n--------------------------------------------------\nsubscribe(activity)\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackDiscoveryPageViewed(it.first)\n}\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackLoginOrSignUpCtaClicked(null, DISCOVER.contextName)\n}\n--------------------------------------------------\nsubscribe {\n    this.startLoginToutActivityToSaveProject.onNext(it.second)\n}\n--------------------------------------------------\nsubscribe {\n    this.projectList.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    scrollToSavedProjectPosition.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackWatchProjectCTA(it, DISCOVER)\n}\n--------------------------------------------------\nsubscribe(this.showSavedPrompt)\n--------------------------------------------------\nsubscribe {\n    apiClient.config().compose(Transformers.neverError()).subscribe {\n        currentConfigType.config(it)\n    }\n}\n--------------------------------------------------\napiClient.config().compose(Transformers.neverError()).subscribe {\n    currentConfigType.config(it)\n}\n--------------------------------------------------\nsubscribe(successMessage)\n--------------------------------------------------\nsubscribe(messageError)\n--------------------------------------------------\nsubscribe {\n    showNotifPermissionRequest.onNext(null)\n}\n--------------------------------------------------\nsubscribe {\n    sharedPreferences.edit().putBoolean(HAS_SEEN_NOTIF_PERMISSIONS, it).apply()\n}\n--------------------------------------------------\nsubscribe {\n    showConsentManagementDialog.onNext(null)\n}\n--------------------------------------------------\nparamsWithSort.compose(bindToLifecycle()).subscribe(updateParamsForPage)\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackDiscoverSortCTA(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackDiscoverFilterCTA(it)\n}\n--------------------------------------------------\nsubscribe(rootCategoriesAndPosition)\n--------------------------------------------------\nsubscribe(clearPages)\n--------------------------------------------------\nparams.distinctUntilChanged().compose(bindToLifecycle()).subscribe(updateToolbarWithParams)\n--------------------------------------------------\nupdateParamsForPage.map {\n    true\n}.compose(bindToLifecycle()).subscribe(expandSortTabLayout)\n--------------------------------------------------\nsubscribe(navigationDrawerData)\n--------------------------------------------------\nsubscribe(drawerIsOpen)\n--------------------------------------------------\nsubscribe {\n    if (isDarkThemeInitialized) drawerMenuIcon.onNext(it)\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.backgroundColor\n}.subscribe {\n    this.backgroundColor.onNext(it)\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.ctaTitle\n}.subscribe {\n    this.ctaTitle.onNext(it)\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.ctaDescription\n}.subscribe {\n    this.ctaDescription.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.graphic.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.editorial.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.rootCategories.onNext(it)\n}\n--------------------------------------------------\ncategoriesNotification.compose(errorsV2()).subscribe {\n    this.retryContainerIsGone.onNext(false)\n}\n--------------------------------------------------\nsubscribe {\n    this.discoveryParams.onNext(it)\n}\n--------------------------------------------------\neditorial.map {\n    it.graphic\n}.subscribe {\n    this.graphic.onNext(it)\n}\n--------------------------------------------------\neditorial.map {\n    it.title\n}.subscribe {\n    this.title.onNext(it)\n}\n--------------------------------------------------\neditorial.map {\n    it.description\n}.subscribe {\n    this.description.onNext(it)\n}\n--------------------------------------------------\nthis.retryContainerClicked.subscribe(this.refreshDiscoveryFragment)\n--------------------------------------------------\nsubscribe {\n    this.currentUser.refresh(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.user.onNext(it)\n}\n--------------------------------------------------\nupdateUserNotification.compose(valuesV2()).subscribe {\n    this.success(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.unableToSavePreferenceError.onNext(it?.localizedMessage ?: \"\")\n}\n--------------------------------------------------\nthis.userInput.subscribe {\n    this.user.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.hidePrivateProfileRow.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.userAvatarUrl.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.userName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.userInput.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.category.onNext(it)\n}\n--------------------------------------------------\nproject.map {\n    it.name()\n}.subscribe {\n    this.projectName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.projectFinalCollectionDate.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.notifyDelegateToStartFixPaymentMethod.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.titleForSummary.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.amountForSummary.onNext(it)\n}\n--------------------------------------------------\nprojectFaqInput.map {\n    it.question\n}.subscribe {\n    this.question.onNext(it)\n}\n--------------------------------------------------\nprojectFaqInput.map {\n    it.answer\n}.subscribe {\n    this.answer.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.updatedDate.onNext(it)\n}\n--------------------------------------------------\nthis.user.map {\n    it.name()\n}.compose(bindToLifecycle()).subscribe(this.name)\n--------------------------------------------------\nthis.user.compose(bindToLifecycle()).subscribe(this.userOutput)\n--------------------------------------------------\nthis.user.map {\n    it.avatar().medium()\n}.compose(bindToLifecycle()).subscribe(this.avatarUrl)\n--------------------------------------------------\nsubscribe(this.unreadMessagesCount)\n--------------------------------------------------\nsubscribe(this.activityCount)\n--------------------------------------------------\nsubscribe(this.activityCountTextColor)\n--------------------------------------------------\nsubscribe(this.dashboardRowIsGone)\n--------------------------------------------------\nfacebookAuthorizationError.subscribe {\n    clearFacebookSession(it)\n}\n--------------------------------------------------\nsubscribe {\n    refreshUserUseCase.refresh(it)\n    finishWithSuccessfulResult.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    loginError.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    showFacebookErrorDialog.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    analyticEvents?.trackLoginOrSignUpCtaClicked(ContextTypeName.FACEBOOK.contextName, ContextPageName.LOGIN_SIGN_UP.contextName)\n}\n--------------------------------------------------\nloginClick.subscribe {\n    analyticEvents?.trackLogInInitiateCtaClicked()\n}\n--------------------------------------------------\nsignupClick.subscribe {\n    analyticEvents?.trackSignUpInitiateCtaClicked()\n}\n--------------------------------------------------\nonResetPasswordFacebookErrorDialogClicked.subscribe {\n    startResetPasswordActivity.onNext(Unit)\n}\n--------------------------------------------------\nonLoginFacebookErrorDialogClicked.subscribe {\n    startLoginActivity.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    emailAndReason.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.isLoading.onNext(false)\n    if (it.isOnError) {\n        it.error?.let { e ->\n            errors.onNext(e)\n        }\n    } else {\n        it.value?.let { v ->\n            successResponseData.onNext(v)\n        }\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.isLoading.onNext(true)\n    this.analyticEvents.trackLogInButtonCtaClicked()\n}\n--------------------------------------------------\nsubscribe(this.prefillEmail)\n--------------------------------------------------\nsubscribe(this.showResetPasswordSuccessDialog)\n--------------------------------------------------\nsubscribe {\n    this.showChangedPasswordSnackbar.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    this.showCreatedPasswordSnackbar.onNext(true)\n}\n--------------------------------------------------\nsubscribe { user ->\n    this.success(user)\n}\n--------------------------------------------------\nsubscribe(this.loginError)\n--------------------------------------------------\nsubscribe {\n    it.intent?.let { intent ->\n        this.emailAndReason.onNext(extractFromIntent(intent))\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.creatorName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.sendButtonIsEnabled.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showSentError.onNext(it)\n    this.progressBarIsVisible.onNext(false)\n    this.sendButtonIsEnabled.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    this.showMessageThread.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showSentSuccess.onNext(it)\n}\n--------------------------------------------------\nparticipant.map {\n    it.name()\n}.subscribe {\n    messageEditTextHint.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    successfullyMarkedAsRead.onNext(it)\n}\n--------------------------------------------------\ninitialMessages.filter {\n    it.isNotNull()\n}.take(1).subscribe {\n    messageList.onNext(it)\n}\n--------------------------------------------------\nupdatedMessages.subscribe { v: List<Message> ->\n    messageList.onNext(v)\n}\n--------------------------------------------------\nsubscribe { v: String ->\n    creatorNameTextViewText.onNext(v)\n}\n--------------------------------------------------\nsubscribe {\n    messageEditTextShouldRequestFocus.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe { backingAndProject ->\n    if (backingAndProject.first.isNotNull() && backingAndProject.second.isNotNull()) {\n        this.backingAndProject.onNext(Pair<Backing, Project>(backingAndProject.first, backingAndProject.second))\n        backingInfoViewIsGone.onNext(false)\n    }\n    if (backingAndProject.first == null) {\n        backingInfoViewIsGone.onNext(true)\n    }\n}\n--------------------------------------------------\nsubscribe { v: Boolean ->\n    viewPledgeButtonIsGone.onNext(v)\n}\n--------------------------------------------------\nsubscribe {\n    showMessageErrorToast.onNext(it)\n}\n--------------------------------------------------\nproject.map {\n    it.name()\n}.subscribe {\n    projectNameTextViewText.onNext(it)\n}\n--------------------------------------------------\nsubscribe { v: BackingWrapper ->\n    startBackingActivity.onNext(v)\n}\n--------------------------------------------------\nsubscribe { thread: MessageThread ->\n    setHasUnreadMessagesPreference(thread, sharedPreferences)\n}\n--------------------------------------------------\nsubscribe {\n    markedAsRead(it, sharedPreferences)\n}\n--------------------------------------------------\nfreshUser.subscribe {\n    currentUser.refresh(it)\n}\n--------------------------------------------------\nmailbox.map {\n    getStringResForMailbox(it)\n}.compose(bindToLifecycle()).subscribe(mailboxTitle)\n--------------------------------------------------\npaginator.isFetching.compose(bindToLifecycle()).subscribe(isFetchingMessageThreads)\n--------------------------------------------------\nsubscribe {\n    messageThreadList.onNext(it)\n}\n--------------------------------------------------\nunreadMessagesCount.map {\n    it.isZero()\n}.subscribe(hasNoMessages)\n--------------------------------------------------\nunreadMessagesCount.map {\n    it.isZero()\n}.subscribe(hasNoUnreadMessages)\n--------------------------------------------------\nsubscribe(unreadCountTextViewColorInt)\n--------------------------------------------------\nsubscribe(unreadCountTextViewTypefaceInt)\n--------------------------------------------------\ncurrentUser.take(1).subscribe {\n    this.userOutput.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showOptInPrompt.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.subscribeAll.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.unableToSavePreferenceError.onNext(it)\n}\n--------------------------------------------------\nthis.userInput.subscribe {\n    this.userOutput.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.userOutput.onNext(it)\n}\n--------------------------------------------------\nupdateSettingsNotification.compose(valuesV2()).subscribe {\n    this.success(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.unableToSavePreferenceError.onNext(it ?: Throwable(\"update notifications settings error\"))\n}\n--------------------------------------------------\nthis.initCellConfig.subscribe {\n    this.isErrorPaginationVisible.onNext(it)\n}\n--------------------------------------------------\nsubscribe(this.expirationDate)\n--------------------------------------------------\nthis.card.map {\n    it.id()\n}.compose<String>(takeWhenV2(this.deleteCardClick)).subscribe(this.id)\n--------------------------------------------------\nthis.card.map {\n    it.lastFourDigits()\n}.subscribe(this.lastFour)\n--------------------------------------------------\nthis.card.map {\n    it.getCardTypeDrawable()\n}.subscribe(this.issuerImage)\n--------------------------------------------------\nsubscribe(this.issuer)\n--------------------------------------------------\ngetListOfStoredCards().subscribe {\n    this.cards.onNext(it)\n}\n--------------------------------------------------\nthis.cards.map {\n    it.isNotEmpty()\n}.subscribe {\n    this.dividerIsVisible.onNext(it)\n}\n--------------------------------------------------\nthis.deleteCardClicked.subscribe {\n    this.showDeleteCardDialog.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.refreshCards.onNext(Unit)\n    this.successDeleting.onNext(it)\n}\n--------------------------------------------------\nthis.refreshCards.switchMap {\n    getListOfStoredCards()\n}.subscribe {\n    this.cards.onNext(it)\n}\n--------------------------------------------------\nshouldPresentPaymentSheet.compose(valuesV2()).subscribe {\n    this.presentPaymentSheet.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showError.onNext(it?.localizedMessage ?: \"\")\n}\n--------------------------------------------------\nsubscribe {\n    this.refreshCards.onNext(Unit)\n    this.successSaving.onNext(it.toString())\n}\n--------------------------------------------------\nthis.loadingConfirmed.subscribe {\n    this.progressBarIsVisible.onNext(it)\n}\n--------------------------------------------------\npledgeData.map {\n    it.reward()\n}.subscribe {\n    this.selectedReward.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    shippingRules.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shouldLoadDefaultLocation.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingRule.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    val updatedList = it.first.toMutableList()\n    updatedList.add(0, it.second)\n    this.rewardAndAddOns.onNext(updatedList.toList())\n}\n--------------------------------------------------\nsubscribe {\n    this.bonusInput.onNext(it.toString())\n}\n--------------------------------------------------\nsubscribe {\n    this.rewardAndAddOns.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeAmountHeader.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    minPledgeByCountry.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.rewardTitle.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.estimatedDeliveryInfoIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeHint.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeMinimum.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.headerSelectedItems.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.projectCurrencySymbol.onNext(it)\n}\n--------------------------------------------------\nproject.map {\n    it.name()\n}.subscribe {\n    this.projectTitle.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.additionalPledgeAmount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.additionalPledgeAmountIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeInput.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    additionalPledgeAmount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.decreasePledgeButtonIsEnabled.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.bonusHint.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.bonusInput.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.decreaseBonusButtonIsEnabled.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.bonusAmount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.bonusAmountHasChanged.onNext(true)\n}\n--------------------------------------------------\nrulesAndProject.subscribe {\n    this.shippingRulesAndProject.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingRule.onNext(it.first)\n}\n--------------------------------------------------\nsubscribe {\n    shippingAmountSelectedRw.onNext(it.first)\n    this.shippingAmount.onNext(ProjectViewUtils.styleCurrency(it.first, it.second, this.ksCurrency))\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingRulesSectionIsGone.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    this.totalAndDeadline.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.totalAndDeadlineIsVisible.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.conversionText.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.conversionTextViewIsGone.onNext(it)\n}\n--------------------------------------------------\npledgeMaximumIsGone.distinctUntilChanged().subscribe {\n    this.pledgeMaximumIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeMaximum.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeTextColor.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.increasePledgeButtonIsEnabled.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeSummaryAmount.onNext(it)\n}\n--------------------------------------------------\nupdatingPayment.subscribe {\n    this.totalDividerIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingSummaryAmount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.bonusSummaryAmount.onNext(it)\n}\n--------------------------------------------------\nsummary.subscribe {\n    this.shippingSummaryLocation.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingRuleUpdated.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.paymentContainerIsGone.onNext(it)\n}\n--------------------------------------------------\nuserIsLoggedIn.subscribe {\n    this.continueButtonIsGone.onNext(it)\n}\n--------------------------------------------------\nuserIsLoggedIn.map {\n    it.negate()\n}.subscribe {\n    this.pledgeButtonIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    storedCards.onNext(it)\n}\n--------------------------------------------------\ncardsAndProject.subscribe {\n    this.cardsAndProject.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.cardsAndProject.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.addedCard.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showSelectedCard.onNext(Pair(it, CardState.SELECTED))\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeButtonIsEnabled.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    shouldPresentPaymentSheet.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showError.onNext(it?.message ?: \"\")\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeButtonIsEnabled.onNext(true)\n    this.loadingState.onNext(State.DEFAULT)\n}\n--------------------------------------------------\nthis.continueButtonClicked.subscribe {\n    this.startLoginToutActivity.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.continueButtonIsEnabled.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showPledgeSuccess.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showUpdatePledgeSuccess.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showUpdatePaymentSuccess.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showSCAFlow.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeProgressIsGone.onNext(true)\n    this.pledgeButtonIsEnabled.onNext(true)\n    this.showPledgeError.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeProgressIsGone.onNext(true)\n    this.pledgeButtonIsEnabled.onNext(true)\n    this.showUpdatePledgeError.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeProgressIsGone.onNext(true)\n    this.pledgeButtonIsEnabled.onNext(true)\n    this.showUpdatePaymentError.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.startChromeTab.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.pledgeButtonCTA.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackCheckoutScreenViewed(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackUpdatePledgePageViewed(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackPledgeSubmitCTA(it.first, it.second)\n}\n--------------------------------------------------\nsubscribe {\n    when(it.second) {\n        PledgeReason.PLEDGE, PledgeReason.UPDATE_REWARD -> {\n            this.pledgeSummaryIsGone.onNext(true)\n            if (!RewardUtils.isNoReward(it.first)) {\n                this.headerSectionIsGone.onNext(false)\n                this.isBonusSupportSectionGone.onNext(false)\n                this.pledgeSectionIsGone.onNext(true)\n            } else {\n                this.pledgeSectionIsGone.onNext(false)\n                this.isPledgeMinimumSubtitleGone.onNext(true)\n                this.headerSectionIsGone.onNext(true)\n                this.isNoReward.onNext(true)\n                this.isBonusSupportSectionGone.onNext(true)\n            }\n        }\n        PledgeReason.UPDATE_PAYMENT, PledgeReason.FIX_PLEDGE -> {\n            this.headerSectionIsGone.onNext(true)\n            if (RewardUtils.isNoReward(it.first)) {\n                this.pledgeSummaryIsGone.onNext(true)\n                this.shippingSummaryIsGone.onNext(true)\n                this.bonusSummaryIsGone.onNext(true)\n            } else {\n                this.shippingSummaryIsGone.onNext(!RewardUtils.isShippable(it.first))\n                this.pledgeSummaryIsGone.onNext(false)\n            }\n        }\n        else -> {}\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingRulesSectionIsGone.onNext(it.first)\n    this.shippingRuleStaticIsGone.onNext(it.second)\n}\n--------------------------------------------------\nsubscribe {\n    val hasBonus = it.second.bonusAmount() > 0\n    val isNoReward = it.second.reward() == null && hasBonus\n    when(it.first) {\n        PledgeReason.UPDATE_PLEDGE -> {\n            this.isBonusSupportSectionGone.onNext(isNoReward)\n            this.pledgeSectionIsGone.onNext(!isNoReward)\n            this.headerSectionIsGone.onNext(true)\n            this.pledgeSummaryIsGone.onNext(isNoReward)\n        }\n        PledgeReason.UPDATE_PAYMENT, PledgeReason.FIX_PLEDGE -> {\n            if (!isNoReward) {\n                this.bonusSummaryIsGone.onNext(!hasBonus)\n            }\n        }\n        else -> {}\n    }\n}\n--------------------------------------------------\nsubscribe {\n    thirdpartyEventIsSuccessful.onNext(it.first)\n}\n--------------------------------------------------\nsubscribe(this.hidePrivateProfileRow)\n--------------------------------------------------\nsubscribe {\n    this.success(it)\n}\n--------------------------------------------------\nsubscribe(this.unableToSavePreferenceError)\n--------------------------------------------------\nthis.userInput.compose(bindToLifecycle()).subscribe(this.userOutput)\n--------------------------------------------------\nsubscribe(this.userOutput)\n--------------------------------------------------\nsubscribe { _ ->\n    this.userInput.onNext(this.userOutput.value.toBuilder().social(true).build())\n}\n--------------------------------------------------\nsubscribe { _ ->\n    this.showConfirmFollowingOptOutPrompt.onNext(null)\n}\n--------------------------------------------------\nsubscribe { _ ->\n    this.userInput.onNext(this.userOutput.value.toBuilder().social(false).build())\n}\n--------------------------------------------------\nsubscribe { _ ->\n    this.hideConfirmFollowingOptOutPrompt.onNext(null)\n}\n--------------------------------------------------\nfreshUser.subscribe {\n    this.currentUser.refresh(it)\n}\n--------------------------------------------------\npaginator.isFetching.compose(bindToLifecycle()).subscribe(this.isFetchingProjects)\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackProjectCardClicked(it, EventContextValues.ContextPageName.PROFILE.contextName)\n}\n--------------------------------------------------\nsubscribe {\n    projectNotifications.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    unableToFetchProjectNotificationsError.onNext(null)\n}\n--------------------------------------------------\nsubscribe {\n    projectNotification.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    showUnableToSaveProjectNotificationError.onNext(null)\n}\n--------------------------------------------------\nsubscribe {\n    projectName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    enabledSwitch.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    when(it) {\n        KSLifecycleEvent.PAUSE -> this.pausePlayer.onNext(Unit)\n        KSLifecycleEvent.STOP -> this.stopPlayer.onNext(Unit)\n        else -> {}\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.sourceUrl.onNext(it.sourceUrl)\n}\n--------------------------------------------------\nthis.playButtonPressed.subscribe {\n    this.stopPlayer.onNext(Unit)\n}\n--------------------------------------------------\nprojectFaqList.filter {\n    it.isNotEmpty()\n}.subscribe {\n    this.projectFaqList.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.bindEmptyState.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.askQuestionButtonIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    storyViewElementsList.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    val itemIndex = it.first.first\n    if (it.second[itemIndex] is VideoViewElement) {\n        (it.second[itemIndex] as? VideoViewElement?)?.let { videoViewElement ->\n            val updatedList = it.second.toMutableList()\n            updatedList[itemIndex] = VideoViewElement(videoViewElement.sourceUrl, videoViewElement.thumbnailUrl, it.first.second)\n            updateVideoCloseSeekPosition.onNext(it.first)\n            storyViewElementsList.onNext(updatedList)\n        }\n    }\n}\n--------------------------------------------------\nsubscribe {\n    onScrollToVideoPosition.onNext(it.first)\n}\n--------------------------------------------------\nsubscribe {\n    onOpenVideoInFullScreen.onNext(it.second)\n}\n--------------------------------------------------\nsubscribe {\n    this.projectEnvironmentalCommitment.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.openVisitOurEnvironmentalResourcesCenter.onNext(UrlUtils.appendPath(environment.webEndpoint(), ENVIROMENT))\n}\n--------------------------------------------------\nsubscribe {\n    creatorDetailsIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.startLogin.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    openExternally.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackCampaignDetailsCTAClicked(it)\n}\n--------------------------------------------------\nsubscribe {\n    projectRisks.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.openLearnAboutAccountabilityOnKickstarter.onNext(UrlUtils.appendPath(environment.webEndpoint(), ACCOUNTABILITY))\n}\n--------------------------------------------------\nsubscribe {\n    project.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackProjectScreenViewed(it, EventContextValues.ContextSectionName.UPDATES.contextName)\n}\n--------------------------------------------------\nsubscribe {\n    horizontalProgressBarIsGone.onNext(!it)\n    isFetchingUpdates.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    projectAndUpdates.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    startUpdateActivity.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    when(it) {\n        RepliesStatusCellType.VIEW_MORE -> {\n            this.isErrorPaginationVisible.onNext(false)\n            this.isViewMoreRepliesPaginationVisible.onNext(true)\n        }\n        RepliesStatusCellType.PAGINATION_ERROR, RepliesStatusCellType.INITIAL_ERROR -> {\n            this.isErrorPaginationVisible.onNext(true)\n            this.isViewMoreRepliesPaginationVisible.onNext(false)\n        }\n        RepliesStatusCellType.EMTPY -> {\n            this.isErrorPaginationVisible.onNext(false)\n            this.isViewMoreRepliesPaginationVisible.onNext(false)\n        }\n    }\n}\n--------------------------------------------------\nproject.map {\n    it.webProjectUrl()\n}.subscribe {\n    projectUrl.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    userEmail.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    finish.onNext(NavigationResult(true, it))\n}\n--------------------------------------------------\nsubscribe {\n    openExternal.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.prefillEmail.onNext(it)\n    resetPasswordScreenState = ResetPasswordScreenState.ForgetPassword\n    resetPasswordScreenStatus.onNext(ResetPasswordScreenState.ForgetPassword)\n}\n--------------------------------------------------\nsubscribe {\n    if (it) {\n        resetPasswordScreenState = ResetPasswordScreenState.ResetPassword\n        resetPasswordScreenStatus.onNext(ResetPasswordScreenState.ResetPassword)\n    } else {\n        resetPasswordScreenState = ResetPasswordScreenState.ForgetPassword\n        resetPasswordScreenStatus.onNext(ResetPasswordScreenState.ForgetPassword)\n    }\n}\n--------------------------------------------------\nthis.email.map {\n    it.isEmail()\n}.subscribe {\n    this.isFormValid.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    when(resetPasswordScreenState) {\n        ResetPasswordScreenState.ResetPassword -> resetFacebookLoginPasswordSuccess.onNext(Unit)\n        else -> success()\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.resetError.onNext(it)\n}\n--------------------------------------------------\ncard.subscribe(this.isClickable)\n--------------------------------------------------\ncard.map {\n    if (it) 1.0f else .5f\n}.subscribe(this.issuerImageAlpha)\n--------------------------------------------------\nsubscribe(this.lastFourTextColor)\n--------------------------------------------------\ncard.map {\n    it.negate()\n}.subscribe(this.notAvailableCopyIsVisible)\n--------------------------------------------------\ncard.subscribe(this.selectImageIsVisible)\n--------------------------------------------------\nsubscribe {\n    this.notifyDelegateCardSelected.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.minimumAmountTitle.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.buttonIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.buttonCTA.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.descriptionForNoReward.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.descriptionForReward.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.descriptionIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.buttonIsEnabled.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.remainingIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.remaining.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.rewardItemsAreGone.onNext(it)\n}\n--------------------------------------------------\nreward.subscribe {\n    this.reward.onNext(it)\n}\n--------------------------------------------------\nreward.map {\n    it.hasAddons()\n}.subscribe {\n    this.addOnsAvailable.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.endDateSectionIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showFragment.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    environment.analytics()?.trackSelectRewardCTA(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.titleForNoReward.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.selectedRewardTagIsGone.onNext(!it)\n}\n--------------------------------------------------\nsubscribe {\n    this.titleForReward.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.titleIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingSummary.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.limitContainerIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.backersCountIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.backersCount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.estimatedDeliveryIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.isMinimumPledgeAmountGone.onNext(it)\n}\n--------------------------------------------------\ncommentCardData.subscribe {\n    this.bindRootComment.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.showCanceledPledgeRootComment.onNext(CommentCardStatus.CANCELED_PLEDGE_COMMENT)\n}\n--------------------------------------------------\npaginator.isFetching.subscribe(isFetchingProjects)\n--------------------------------------------------\nsubscribe {\n    searchProjects.onNext(ListUtils.empty())\n}\n--------------------------------------------------\nsubscribe { paramsAndProjects: Pair<DiscoveryParams, List<Project>> ->\n    if (paramsAndProjects.first.sort() == defaultSort) {\n        popularProjects.onNext(paramsAndProjects.second)\n    } else {\n        searchProjects.onNext(paramsAndProjects.second)\n    }\n}\n--------------------------------------------------\nsubscribe { projectDiscoveryParamsPair: Pair<Pair<DiscoveryParams, Project>, Int> ->\n    val refTag = RefTagUtils.projectAndRefTagFromParamsAndProject(projectDiscoveryParamsPair.first.first, projectDiscoveryParamsPair.first.second)\n    val cookieRefTag = RefTagUtils.storedCookieRefTagForProject(projectDiscoveryParamsPair.first.second, cookieManager, sharedPreferences)\n    val projectData = builder().refTagFromIntent(refTag.second).refTagFromCookie(cookieRefTag).project(projectDiscoveryParamsPair.first.second).build()\n    analyticEvents.trackDiscoverSearchResultProjectCATClicked(projectDiscoveryParamsPair.first.first, projectData, projectDiscoveryParamsPair.second, defaultSort)\n}\n--------------------------------------------------\nsubscribe {\n    if (it.first.launchedAt() == DateTimeAdapter().decode(CustomTypeValue.fromRawValue(0)) && ffClient.getBoolean(FlagKey.ANDROID_PRE_LAUNCH_SCREEN)) {\n        startPreLaunchProjectActivity.onNext(it)\n    } else {\n        startProjectActivity.onNext(it)\n    }\n}\n--------------------------------------------------\nsubscribe { it: Pair<Pair<DiscoveryParams, DiscoverEnvelope>, Int> ->\n    analyticEvents.trackSearchResultPageViewed(it.first.first, it.first.second.stats()?.count() ?: 0, defaultSort)\n}\n--------------------------------------------------\nsubscribe {\n    this.setUserEmail.onNext(it)\n}\n--------------------------------------------------\nObservable.merge(apiError, error).distinctUntilChanged().subscribe {\n    this.error.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    currentUserV2.accessToken?.let { accessToken ->\n        loginUserCase.login(it.first.toBuilder().needsPassword(false).build(), accessToken)\n    }\n    this.success.onNext(it.second.updateUserAccount()?.user()?.email() ?: \"\")\n}\n--------------------------------------------------\nsubscribe {\n    it.getValue()?.let { user ->\n        this.userOutput.onNext(user)\n    }\n}\n--------------------------------------------------\nthis.currentUser.observable().subscribe {\n    isUserPresent.onNext(it.isPresent())\n}\n--------------------------------------------------\nthis.confirmLogoutClicked.subscribe {\n    this.analytics?.reset()\n    this.logout.onNext(Unit)\n}\n--------------------------------------------------\nsubscribe {\n    this.shippingRuleText.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    success(it)\n}\n--------------------------------------------------\nsignupClick.subscribe {\n    analyticEvents.trackSignUpSubmitCtaClicked()\n}\n--------------------------------------------------\nsurveyWebUrl.compose(bindToLifecycle()).subscribe(webViewUrl)\n--------------------------------------------------\nsubscribe(showConfirmationDialog)\n--------------------------------------------------\nproject.map {\n    it.name()\n}.subscribe {\n    projectName.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    startShare.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    startShareOnFacebook.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    startShareOnTwitter.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.focusOnCompose.onNext(it)\n}\n--------------------------------------------------\nproject.take(1).subscribe {\n    this.project = it\n}\n--------------------------------------------------\ncurrentUserStream.observable().take(1).subscribe {\n    this.currentUser = it.getValue()\n}\n--------------------------------------------------\nsubscribe {\n    onCommentReplies.onNext(it)\n    scrollToBottom.onNext(Unit)\n}\n--------------------------------------------------\ncommentData.subscribe {\n    this.rootComment.onNext(it)\n}\n--------------------------------------------------\nloggedInUser.subscribe {\n    showReplyComposer.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    val composerStatus = getCommentComposerStatus(Pair(it.first, it.second.getValue()))\n    showReplyComposer.onNext(composerStatus != CommentComposerStatus.GONE)\n    replyComposerStatus.onNext(composerStatus)\n}\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackThreadCommentPageViewed(it.first.first, it.second.id().toString(), it.first.second)\n}\n--------------------------------------------------\nsubscribe {\n    if (it?.first?.isNotEmpty() == true) {\n        this.loadMoreReplies.onNext(Unit)\n    } else {\n        this.refresh.onNext(Unit)\n    }\n}\n--------------------------------------------------\nthis.initialError.subscribe {\n    this.initialLoadCommentsError.onNext(true)\n}\n--------------------------------------------------\nsubscribe {\n    this.onCommentReplies.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    analyticEvents.trackRootCommentReplyCTA(it.first.second, it.first.first.first.id().toString(), it.first.first.first.body(), it.second.id().toString(), it.first.first.second)\n}\n--------------------------------------------------\nsubscribe { pair ->\n    this.hasPendingComments.onNext(pair.first.any {\n        it.commentCardState == CommentCardStatus.TRYING_TO_POST.commentCardStatus || it.commentCardState == CommentCardStatus.FAILED_TO_SEND_COMMENT.commentCardStatus\n    })\n}\n--------------------------------------------------\nthis.backPressed.subscribe {\n    this.closeThreadActivity.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    scrollToBottom.onNext(Unit)\n}\n--------------------------------------------------\napolloPaginate.isFetching.share().subscribe {\n    this.isFetchingReplies.onNext(it)\n}\n--------------------------------------------------\nthis.internalError.subscribe {\n    this.initialError.onNext(it)\n}\n--------------------------------------------------\nthis.code.map { code: String? ->\n    isCodeValid(code)\n}.subscribe {\n    formIsValid.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.backersOnlyContainerIsVisible.onNext(it)\n}\n--------------------------------------------------\nupdate.map {\n    it.truncatedBody()\n}.subscribe {\n    this.blurb.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.commentsCount.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.commentsCountIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.likesCount.onNext(it)\n}\n--------------------------------------------------\nupdate.map {\n    it.likesCount().isNullOrZero()\n}.subscribe {\n    this.likesCountIsGone.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    this.publishDate.onNext(it)\n}\n--------------------------------------------------\nupdate.map {\n    it.sequence()\n}.subscribe {\n    this.sequence.onNext(it)\n}\n--------------------------------------------------\nupdate.map {\n    it.title()\n}.subscribe {\n    this.title.onNext(it)\n}\n--------------------------------------------------\nupdate.compose(takeWhenV2(this.updateClicked)).subscribe {\n    this.showUpdateDetails.onNext(it)\n}\n--------------------------------------------------\nsubscribe {\n    if (it.first.isNotEmpty() && it.second >= 0) {\n        preparePlayerWithUrlAndPosition.onNext(it)\n    } else {\n        preparePlayerWithUrl.onNext(it.first)\n    }\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackVideoStarted(it.first, TimeUnit.MILLISECONDS.toSeconds(it.second.first), TimeUnit.MILLISECONDS.toSeconds(it.second.second))\n}\n--------------------------------------------------\nsubscribe {\n    this.analyticEvents.trackVideoCompleted(it.first, TimeUnit.MILLISECONDS.toSeconds(it.second.first), TimeUnit.MILLISECONDS.toSeconds(it.second.second))\n}", "import io.reactivex.android.MainThreadDisposable\nimport io.reactivex.ObservableEmitter\nimport androidx.recyclerview.widget.RecyclerView\noverride fun subscribe(emitter: ObservableEmitter<RecyclerViewScrollEvent>) {\r\n        MainThreadDisposable.verifyMainThread()\r\n        val listener: RecyclerView.OnScrollListener = object : RecyclerView.OnScrollListener() {\r\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n                if (!emitter.isDisposed) {\r\n                    emitter.onNext(RecyclerViewScrollEvent.create(recyclerView, dx, dy))\r\n                }\r\n            }\r\n        }\r\n        recyclerView.addOnScrollListener(listener)\r\n    }\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)\nImport(names=[io, reactivex, ObservableEmitter], wildcard=false, alias=null)\nImport(names=[io, reactivex, android, MainThreadDisposable], wildcard=false, alias=null)" ],
  "fcitx5-android/133" : [ "if (child is ViewGroup) setupEditorAction(child, listener)", "import android.widget.TextView.OnEditorActionListener\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nfun setupEditorAction(\r\n        parent: ViewGroup,\r\n        listener: OnEditorActionListener\r\n    ) {\r\n        for (i in 0 until parent.childCount) {\r\n            val child = parent.getChildAt(i)\r\n            if (child is ViewGroup) setupEditorAction(child, listener)\r\n            if (child is TextView) child.setOnEditorActionListener(listener)\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[android, widget, TextView], wildcard=false, alias=null)\nImport(names=[android, widget, TextView, OnEditorActionListener], wildcard=false, alias=null)" ],
  "MaterialFiles/1222" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1224" : [ "", "import org.json.JSONObject;\r\nimport org.json.JSONObject\n@Override\r\npublic void run() {\r\n    if (config != null) {\r\n        task.execute((Void) null);\r\n    } else {\r\n        try {\r\n            JSONObject result = new JSONObject();\r\n            result.put(\"message\", \"config\");\r\n            task.onPostExecute(result);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}" ],
  "fcitx5-android/134" : [ "    } else {\n        slideFromRightForResult<SetPinFragment.Result>(R.id.setPinFragment, SetPinFragment.Input(descriptionResId)) {\r\n            action.invoke()\n--------------------------------------------------\n                        } else {\n                            pinComponent.setPin(submittedPin)\r\n                        }", "import io.horizontalsystems.bankwallet.modules.pin.core.LockManager\noverride fun setPin(pin: String) {\r\n        if (appLockManager.isLocked) {\r\n            appLockManager.onUnlock()\r\n        }\r\n\r\n        pinManager.store(pin, userManager.getUserLevel())\r\n    }" ],
  "fcitx5-android/136" : [ "obtainStyledAttributes(context, attrs, defStyleAttr)", "import com.kickstarter.R\nimport androidx.core.content.withStyledAttributes\nimport android.util.AttributeSet\nimport android.content.Context\nprivate fun obtainStyledAttributes(context: Context, attrs: AttributeSet?, defStyleAttr: Int) {\r\n        context.withStyledAttributes(\r\n            set = attrs,\r\n            attrs = R.styleable.AddOnTagComponent,\r\n            defStyleAttr = defStyleAttr\r\n        ) {\r\n            getString(R.styleable.AddOnTagComponent_add_on_tag_text)?.also {\r\n                setAddOnTagText(it)\r\n            }\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, util, AttributeSet], wildcard=false, alias=null)\nImport(names=[com, kickstarter, R], wildcard=false, alias=null)" ],
  "MaterialFiles/1226" : [ "        }\n        val share = FileProvider.getUriForFile(context, Constants.FILE_PROVIDER_AUTHORITY, File(uri.path))\r\n        intent.setDataAndType(share, mimeType)\n--------------------------------------------------\n{\n            getUris(observer.authority).forEach {\r\n                context.contentResolver.registerContentObserver(it, false, observer)", "import org.tasks.Strings.isNullOrEmpty\nimport android.net.Uri\nprivate fun getUri(key: Int): Uri? {\r\n        val uri = getStringValue(key)\r\n        return if (isNullOrEmpty(uri)) null else Uri.parse(uri)\r\n    }\nimport android.net.Uri\nimport org.tasks.Strings.isNullOrEmpty" ],
  "Feeder/401" : [ "textWithSource(context, text, context.getString(R.string.format_source, context.getString(R.string.tmdb)))", "import com.battlelancer.seriesguide.R\nimport androidx.core.text.set\nimport android.text.style.TextAppearanceSpan\nimport android.text.SpannableStringBuilder\nimport android.text.Spannable\nimport android.content.Context\nprivate fun textWithSource(\r\n        context: Context, text: String?,\r\n        source: String\r\n    ): SpannableStringBuilder {\r\n        val builder = SpannableStringBuilder()\r\n        if (text != null) {\r\n            builder.append(text)\r\n            builder.append(\"\\n\\n\")\r\n        }\r\n        val sourceStartIndex = builder.length\r\n        builder.append(source)\r\n        builder.setSpan(\r\n            TextAppearanceSpan(context, R.style.TextAppearance_SeriesGuide_Body2_Italic),\r\n            sourceStartIndex, builder.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE\r\n        )\r\n        return builder\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[android, text, SpannableStringBuilder], wildcard=false, alias=null)\nImport(names=[android, text, style, TextAppearanceSpan], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)" ],
  "Feeder/402" : [ "appendColumns(columns!!)", "private fun StringBuilder.appendColumns(columns: Array<out String>) {\r\n        val n = columns.size\r\n        for (i in 0 until n) {\r\n            val column = columns[i]\r\n            if (i > 0) {\r\n                append(\", \")\r\n            }\r\n            append(column)\r\n        }\r\n        append(' ')\r\n    }" ],
  "Feeder/404" : [ "textWithSource(context, text, context.getString(R.string.format_source, context.getString(R.string.tmdb)))", "import com.battlelancer.seriesguide.R\nimport androidx.core.text.set\nimport android.text.style.TextAppearanceSpan\nimport android.text.SpannableStringBuilder\nimport android.text.Spannable\nimport android.content.Context\nprivate fun textWithSource(\r\n        context: Context, text: String?,\r\n        source: String\r\n    ): SpannableStringBuilder {\r\n        val builder = SpannableStringBuilder()\r\n        if (text != null) {\r\n            builder.append(text)\r\n            builder.append(\"\\n\\n\")\r\n        }\r\n        val sourceStartIndex = builder.length\r\n        builder.append(source)\r\n        builder.setSpan(\r\n            TextAppearanceSpan(context, R.style.TextAppearance_SeriesGuide_Body2_Italic),\r\n            sourceStartIndex, builder.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE\r\n        )\r\n        return builder\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[android, text, SpannableStringBuilder], wildcard=false, alias=null)\nImport(names=[android, text, style, TextAppearanceSpan], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)" ],
  "Feeder/405" : [ "val thisChunk = getChunk(string1, string1.length, thisMarker)\n--------------------------------------------------\nval thatChunk = getChunk(string2, string2.length, thatMarker)", "private fun getChunk(string: String, length: Int, marker: Int): String {\r\n        var current = marker\r\n        var c = string[current]\r\n        val chunk = StringBuilder(c.toString())\r\n        current++\r\n        val chunkOfDigits = isDigit(c)\r\n        while (current < length) {\r\n            c = string[current]\r\n            if (isDigit(c) != chunkOfDigits) {\r\n                break\r\n            }\r\n            chunk.append(c)\r\n            current++\r\n        }\r\n\r\n        return chunk.toString()\r\n    }" ],
  "MaterialFiles/1243" : [ "                    webViewBinding.loadingContainer.isVisible = false\n                    webView.fadeIn()\r\n                }", "import androidx.interpolator.view.animation.LinearOutSlowInInterpolator\nimport androidx.core.view.isVisible\nimport android.view.View\nfun View.fadeIn() {\r\n    alpha = 0f\r\n    isVisible = true\r\n    animate().apply {\r\n        alpha(1f)\r\n        @Suppress(\"MagicNumber\")\r\n        duration = 300L\r\n        interpolator = LinearOutSlowInInterpolator()\r\n        withLayer()\r\n    }\r\n}\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, core, view, isVisible], wildcard=false, alias=null)\nImport(names=[androidx, interpolator, view, animation, LinearOutSlowInInterpolator], wildcard=false, alias=null)" ],
  "Feeder/406" : [ "cal.timeInMillis.toString()\n--------------------------------------------------\nSettings.audioJumpDelay.toString()\n--------------------------------------------------\ninput.text.toString()\n--------------------------------------------------\n(getItem(layoutPosition) as Storage).uri.toString()\n--------------------------------------------------\n(getItem(layoutPosition) as MediaWrapper).uri.toString()\n--------------------------------------------------\ncurrentMedia?.uri.toString()\n--------------------------------------------------\nit.uri.toString()\n--------------------------------------------------\nmw.uri.toString()\n--------------------------------------------------\nitem.uri.toString()\n--------------------------------------------------\ncurrentMedia!!.uri.toString()\n--------------------------------------------------\ncurrentPathUri.toString()\n--------------------------------------------------\nuri.toString()\n--------------------------------------------------\n(getItem(position) as Storage).uri.toString()\n--------------------------------------------------\n(mediaLibraryItem as Storage).uri.toString()\n--------------------------------------------------\nsearchView.query.toString()\n--------------------------------------------------\nport.toString()\n--------------------------------------------------\neditServername.text.toString()\n--------------------------------------------------\neditAddress.text.toString()\n--------------------------------------------------\nurl.text.toString()\n--------------------------------------------------\nspinnerProtocol.selectedItem.toString()\n--------------------------------------------------\neditFolder.text.toString()\n--------------------------------------------------\nsb.toString()\n--------------------------------------------------\neditPort.text.toString()\n--------------------------------------------------\neditUsername.editText!!.text.toString()\n--------------------------------------------------\nrate.toString()\n--------------------------------------------------\nnewNameInputtext.text.toString()\n--------------------------------------------------\nbinding.dialogPlaylistName.editText?.text?.toString()\n--------------------------------------------------\nbinding.login.text.toString()\n--------------------------------------------------\nbinding.password.text.toString()\n--------------------------------------------------\nreleaseYear.toString()\n--------------------------------------------------\ntreeUri.toString()\n--------------------------------------------------\ncacheWidth.toString()\n--------------------------------------------------\nimageUri.toString()\n--------------------------------------------------\nscrubbedTitle[0].toString()\n--------------------------------------------------\nit.toUri().toString()\n--------------------------------------------------\nitem.trackNumber.toString()\n--------------------------------------------------\n48.dp.toString()\n--------------------------------------------------\nmediaLibraryItem.id.toString()\n--------------------------------------------------\nitem.text.toString()\n--------------------------------------------------\nmedia.uri.toString()\n--------------------------------------------------\nnbAlbums.toString()\n--------------------------------------------------\nnbTracks.toString()\n--------------------------------------------------\nclipBoardManager?.primaryClip?.getItemAt(0)?.text?.toString()\n--------------------------------------------------\nviewModel.theme.toString()\n--------------------------------------------------\nit.text.toString()\n--------------------------------------------------\nentries[i].toString()\n--------------------------------------------------\npreference.entryValues[which].toString()\n--------------------------------------------------\nrequireContext().getDir(\"db\", Context.MODE_PRIVATE).toString()\n--------------------------------------------------\nnewValue.toString()\n--------------------------------------------------\ntheme.toString()\n--------------------------------------------------\nSettings.videoHudDelay.toString()\n--------------------------------------------------\nsettingValue.toString()\n--------------------------------------------------\nbinding.searchText.text.toString()\n--------------------------------------------------\ns?.toString()\n--------------------------------------------------\ns.toString()\n--------------------------------------------------\ngetDir(\"db\", Context.MODE_PRIVATE).toString()\n--------------------------------------------------\nstacktraceContent.toString()\n--------------------------------------------------\nex.toString()\n--------------------------------------------------\ntextBuilder.toString()\n--------------------------------------------------\nit.id.toString()\n--------------------------------------------------\naudioTrack.toString()\n--------------------------------------------------\nmedia.audioTrack.toString()\n--------------------------------------------------\nmedia.spuTrack.toString()\n--------------------------------------------------\n'\\u00A0'.toString()\n--------------------------------------------------\nSettings.videoJumpDelay.toString()\n--------------------------------------------------\ntrack.channels.toString()\n--------------------------------------------------\n(band + 0.5f).toInt().toString()\n--------------------------------------------------\n(band / 1000.0f + 0.5f).toInt().toString()\n--------------------------------------------------\ntext.toString()\n--------------------------------------------------\nselection.filter {\n    it\n}.size.toString()\n--------------------------------------------------\nselectedIndices.size.toString()\n--------------------------------------------------\ngetPersistedInt().toString()\n--------------------------------------------------\nparentIdUri.removeQuery().toString()\n--------------------------------------------------\nparentIdUri.retrieveParent().toString()\n--------------------------------------------------\nID_SEARCH.toUri().buildUpon().appendQueryParameter(\"query\", query).toString()\n--------------------------------------------------\nparentIdUri.buildUpon().appendQueryParameter(\"i\", \"$index\").toString()\n--------------------------------------------------\nparentIdUri.buildUpon().appendQueryParameter(\"p\", \"$page\").toString()\n--------------------------------------------------\ni.toString()\n--------------------------------------------------\ngetCurrentMedia()?.uri.toString()\n--------------------------------------------------\nmedia.getMetaLong(MediaWrapper.META_SUBTITLE_TRACK).toString()\n--------------------------------------------------\nlocations.toString()\n--------------------------------------------------\nmediaIdUri.removeQuery().toString()\n--------------------------------------------------\nmediaIdUri.retrieveParent().toString()\n--------------------------------------------------\nalbumArtUri.toString()\n--------------------------------------------------\nuri!!.toString()\n--------------------------------------------------\ncurrent.uri.toString()\n--------------------------------------------------\nUri.fromFile(File(cursor.getString(columnIndex))).toString()\n--------------------------------------------------\ncharSequence.trim().toString()\n--------------------------------------------------\nvideoFrameRate.toString()\n--------------------------------------------------\nmode.refreshRate.toString()\n--------------------------------------------------\n(item as? MediaWrapper)?.uri.toString()\n--------------------------------------------------\n(aboveItem as? MediaWrapper)?.uri.toString()\n--------------------------------------------------\nchapterNum.toString()\n--------------------------------------------------\nStringBuilder(cacheDir!!).append('/').append(item.id).append(\".jpg\").toString()\n--------------------------------------------------\nwidth.toString()\n--------------------------------------------------\nmw.id.toString()\n--------------------------------------------------\nmode.toString()\n--------------------------------------------------\nbuilder.toString()\n--------------------------------------------------\nwidgetCacheEntry.widget.rewindDelay.toString()\n--------------------------------------------------\nwidgetCacheEntry.widget.forwardDelay.toString()\n--------------------------------------------------\nwidget.theme.toString()", "override fun toString(): String {\r\n        val sb = StringBuilder()\r\n        sb.append(\"LibVLC Media List: {\")\r\n        for (i in 0 until size()) {\r\n            sb.append(i.toString())\r\n            sb.append(\": \")\r\n            sb.append(getMRL(i))\r\n            sb.append(\", \")\r\n        }\r\n        sb.append(\"}\")\r\n        return sb.toString()\r\n    }" ],
  "Feeder/407" : [ "videoTransformer(projectFragment.video()?.fragments()?.video())", "import com.kickstarter.models.Video\nfun videoTransformer(video: fragment.Video?): Video {\r\n    val frame = video?.previewImageUrl()\r\n    val base = video?.videoSources()?.base()?.src()\r\n    val high = video?.videoSources()?.high()?.src()\r\n    val hls = video?.videoSources()?.hls()?.src()\r\n\r\n    return Video.builder()\r\n        .base(base)\r\n        .frame(frame)\r\n        .high(high)\r\n        .hls(hls)\r\n        .build()\r\n}\nImport(names=[com, kickstarter, models, Video], wildcard=false, alias=null)" ],
  "MaterialFiles/1242" : [ "ParkedOnlyOnClickListener.create(::openPreferencesOnPhone)\n--------------------------------------------------\ncreate(controlItems, AppContextProvider.appContext.getString(R.string.controls_prefs_category))\n--------------------------------------------------\nSectionedItemList.create(helpItems, AppContextProvider.appContext.getString(R.string.help))\n--------------------------------------------------\ncreate(moreItems, AppContextProvider.appContext.getString(R.string.more_preferences))\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_play_pause_video)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_pause_play_video)\n--------------------------------------------------\nMediaPlayer.Equalizer.create()\n--------------------------------------------------\ncreate()\n--------------------------------------------------\ncreate(VideosViewModel::class.java)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(requireActivity(), R.drawable.anim_delete)\n--------------------------------------------------\nVectorDrawableCompat.create(this.resources, drawableId, this.theme)\n--------------------------------------------------\nconstraintSet.create(guidelineId, ConstraintSet.VERTICAL_GUIDELINE)\n--------------------------------------------------\nRenderScript.create(AppContextProvider.appContext)\n--------------------------------------------------\nScriptIntrinsicBlur.create(rs, Element.U8_4(rs))\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(this, R.drawable.anim_play_pause_video)\n--------------------------------------------------\nAnimatedVectorDrawableCompat.create(this, R.drawable.anim_pause_play_video)\n--------------------------------------------------\nPrecomputedTextCompat.create(text, params)\n--------------------------------------------------\nmodel.create(this@MiniPlayerConfigureActivity, appWidgetId)", "import androidx.lifecycle.ViewModel\nimport android.content.Context\noverride fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n            @Suppress(\"UNCHECKED_CAST\")\r\n            return VideosViewModel(context.applicationContext, groupingType, folder, group) as T\r\n        }\nImport(names=[androidx, lifecycle, ViewModel], wildcard=false, alias=null)" ],
  "Feeder/408" : [ "getIntentTemplateFlags()", "import android.os.Build\nimport android.content.Intent\nimport android.app.PendingIntent.FLAG_MUTABLE\nprivate fun getIntentTemplateFlags(): Int {\r\n        var flags = 0\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\r\n            flags = flags or FLAG_MUTABLE\r\n        }\r\n        return flags\r\n    }\nImport(names=[android, app, PendingIntent, FLAG_MUTABLE], wildcard=false, alias=null)\nImport(names=[android, os, Build], wildcard=false, alias=null)" ],
  "Trail-Sense/1565" : [ "{\n        val valid = pinComponent.validateCurrentLevel(pin)\r\n        if (valid) {", "override fun validateCurrentLevel(pin: String): Boolean {\r\n        val pinLevel = pinManager.getPinLevel(pin) ?: return false\r\n        return pinLevel == userManager.getUserLevel()\r\n    }" ],
  "Trail-Sense/1562" : [ "val selectedAddOns = getSelectedAddOns(updatedList)", "import com.kickstarter.models.Reward\nprivate fun getSelectedAddOns(updatedList: List<Reward>): List<Reward> {\r\n            return updatedList.filter { addOn ->\r\n                addOn.quantity()?.let { it > 0 } ?: false\r\n            }\r\n        }" ],
  "VinylMusicPlayer/731" : [ "@Override\r\npublic void init(Bundle bundle) {\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\r\n    mLocalRepoPath = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    if (Build.VERSION.SDK_INT >= 23) {\r\n        if ((mLocalRepoPath.length() > 0) || (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED))\r\n            launchMainActivity();\r\n    } else {\r\n        if (mLocalRepoPath.length() > 0)\r\n            launchMainActivity();\r\n    }\r\n    // Intro screens\r\n    AppIntroFragment slide1 = AppIntroFragment.newInstance(getResources().getString(R.string.intro_getting_started), getResources().getString(R.string.intro_getting_started_desc), R.drawable.intro_notepad, Color.parseColor(\"#0277BD\"));\r\n    AppIntroFragment slide2 = AppIntroFragment.newInstance(getResources().getString(R.string.intro_local_repo), getResources().getString(R.string.intro_local_repo_desc), R.drawable.intro_brick, Color.parseColor(\"#0277BD\"));\r\n    addSlide(slide1);\r\n    addSlide(slide2);\r\n}\n--------------------------------------------------\n@Override\r\npublic void init(Bundle bundle) {\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\r\n    mLocalRepoPath = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    if (Build.VERSION.SDK_INT >= 23) {\r\n        if ((mLocalRepoPath.length() > 0) || (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED))\r\n            launchMainActivity();\r\n    } else {\r\n        if (mLocalRepoPath.length() > 0)\r\n            launchMainActivity();\r\n    }\r\n    // Intro screens\r\n    AppIntroFragment slide1 = AppIntroFragment.newInstance(getResources().getString(R.string.intro_getting_started), getResources().getString(R.string.intro_getting_started_desc), R.drawable.intro_notepad, Color.parseColor(\"#0277BD\"));\r\n    AppIntroFragment slide2 = AppIntroFragment.newInstance(getResources().getString(R.string.intro_local_repo), getResources().getString(R.string.intro_local_repo_desc), R.drawable.intro_brick, Color.parseColor(\"#0277BD\"));\r\n    addSlide(slide1);\r\n    addSlide(slide2);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\nprivate void launchMainActivity() {\r\n    Intent intent = new Intent(this, MainActivity.class);\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n    startActivity(intent);\r\n    finish();\r\n}" ],
  "Trail-Sense/1569" : [ "", "import androidx.room.Dao\nfun isLastLevelPinSet(): Boolean {\r\n        val lastLevelPin = pinDao.getLastLevelPin()\r\n        return lastLevelPin?.passcode != null\r\n    }" ],
  "Trail-Sense/1567" : [ "realRepository.playlistSongs(playlistId)\n--------------------------------------------------\nRealPlaylistRepository(get()).playlistSongs(id)", "import androidx.lifecycle.map\noverride suspend fun playlistSongs(playlistWithSongs: PlaylistWithSongs): List<Song> =\n        playlistWithSongs.songs.map {\n            it.toSong()\n        }\nimport androidx.lifecycle.map" ],
  "VinylMusicPlayer/727" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int itemId = item.getItemId();\r\n    // Update currenlty selected item\r\n    mToolBarSelectedItemId = itemId;\r\n    if (itemId == R.id.menu_style) {\r\n        showStylePopup(findViewById(R.id.menu_style));\r\n        return true;\r\n    } else if (itemId == R.id.menu_markdown_view) {\r\n        toggleMarkdownView();\r\n        return true;\r\n    } else if (itemId == R.id.menu_toggle_title) {\r\n        showHideTitle(!mTitleBarVisible);\r\n        return true;\r\n    } else if (itemId == R.id.menu_save) {\r\n        handleSave();\r\n        return true;\r\n    } else if (itemId == R.id.menu_revert) {\r\n        handleRevert();\r\n        return true;\r\n    } else if (itemId == R.id.menu_metadata) {\r\n        handleMetadata();\r\n        return true;\r\n    } else if (itemId == R.id.menu_edit_tools) {\r\n        showEditToolFragment();\r\n        return true;\r\n    } else if (itemId == R.id.menu_encrypt_decrypt) {\r\n        handleEncryptDecrypt();\r\n        return true;\r\n    } else if (itemId == R.id.menu_paste_calendar) {\r\n        doPasteCalendar();\r\n        return true;\r\n    } else if (itemId == R.id.menu_full_screen) {\r\n        enterImmersiveMode();\r\n        return true;\r\n    } else if (itemId == R.id.menu_clear_cache) {\r\n        doClearCache();\r\n        return true;\r\n    } else if (itemId == R.id.menu_export) {\r\n        handleExport();\r\n        return true;\r\n    } else if (itemId == R.id.menu_print) {\r\n        if (mMarkdownMode)\r\n            createWebPrintJob(mMarkdownView);\r\n        else\r\n            doExportHTML(true);\r\n        return true;\r\n    } else if (itemId == R.id.menu_share) {\r\n        doShare();\r\n        return true;\r\n    } else if (itemId == android.R.id.home) {\r\n        handleHome();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "Neo-Backup/404" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/723" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}" ],
  "fcitx5-android/162" : [ "super.getItemOffsets(outRect, view, parent, state)", "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {\r\n        super.getItemOffsets(outRect, view, parent, state)\r\n        outRect.apply {\r\n            bottom = margin\r\n        }\r\n    }\nImport(names=[android, graphics, Rect], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)" ],
  "fcitx5-android/164" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/725" : [ "                        }\n                        hideKeyboard()\r\n                        transaction\n--------------------------------------------------\n{\n        activity?.hideKeyboard()\r\n        if (item.itemId == R.id.menu_delete) {\n--------------------------------------------------\nhideKeyboard(name)\n--------------------------------------------------\nhideKeyboard(binding.name)\n--------------------------------------------------\nhideKeyboard(it)\n--------------------------------------------------\nactivity.hideKeyboard(commentField)", "import org.tasks.extensions.Context.hideKeyboard\nimport android.app.Activity\nfun Activity.hideKeyboard() {\r\n    currentFocus?.let {\r\n        hideKeyboard(it)\r\n    }\r\n}\nImport(names=[android, app, Activity], wildcard=false, alias=null)\nImport(names=[org, tasks, extensions, Context, hideKeyboard], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/724" : [ "", "import java.util.List\n@Override\r\npublic boolean onQueryTextChange(String newText) {\r\n    // Unsafe to refresh list\r\n    mRefreshListSafe = false;\r\n    return false;\r\n}" ],
  "fcitx5-android/166" : [ "", "import android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val item = items[position]\r\n        holder.bindView(item, true, true) { itemView, layoutPosition ->\r\n            setupView(itemView, item, holder)\r\n        }\r\n        bindViewHolder(holder)\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "fcitx5-android/165" : [ "", "import org.videolan.vlc.databinding.DialogAboutVersionBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        binding = DialogAboutVersionBinding.inflate(layoutInflater, container, false)\r\n        return binding.root\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)\nImport(names=[android, view, LayoutInflater], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[android, view, ViewGroup], wildcard=false, alias=null)\nImport(names=[org, videolan, vlc, databinding, DialogAboutVersionBinding], wildcard=false, alias=null)" ],
  "MaterialFiles/1236" : [ "\n            folderNotifyNewMailMode = getEnumStringPref<FolderMode>(\r\n                storage,\n--------------------------------------------------\n            val draftsFolderId = storage.getString(\"$accountUuid.draftsFolderId\", null)?.toLongOrNull()\n            val draftsFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val sentFolderId = storage.getString(\"$accountUuid.sentFolderId\", null)?.toLongOrNull()\n            val sentFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val trashFolderId = storage.getString(\"$accountUuid.trashFolderId\", null)?.toLongOrNull()\n            val trashFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val archiveFolderId = storage.getString(\"$accountUuid.archiveFolderId\", null)?.toLongOrNull()\n            val archiveFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n            val spamFolderId = storage.getString(\"$accountUuid.spamFolderId\", null)?.toLongOrNull()\n            val spamFolderSelection = getEnumStringPref<SpecialFolderSelection>(\r\n                storage,\n--------------------------------------------------\n\n            expungePolicy = getEnumStringPref(storage, \"$accountUuid.expungePolicy\", Expunge.EXPUNGE_IMMEDIATELY)\r\n            isSyncRemoteDeletions = storage.getBoolean(\"$accountUuid.syncRemoteDeletions\", true)\n--------------------------------------------------\n            maximumAutoDownloadMessageSize = storage.getInt(\"$accountUuid.maximumAutoDownloadMessageSize\", 32768)\n            messageFormat = getEnumStringPref(storage, \"$accountUuid.messageFormat\", DEFAULT_MESSAGE_FORMAT)\r\n            val messageFormatAuto = storage.getBoolean(\"$accountUuid.messageFormatAuto\", DEFAULT_MESSAGE_FORMAT_AUTO)\n--------------------------------------------------\n            isMessageReadReceipt = storage.getBoolean(\"$accountUuid.messageReadReceipt\", DEFAULT_MESSAGE_READ_RECEIPT)\n            quoteStyle = getEnumStringPref<QuoteStyle>(storage, \"$accountUuid.quoteStyle\", DEFAULT_QUOTE_STYLE)\r\n            quotePrefix = storage.getString(\"$accountUuid.quotePrefix\", DEFAULT_QUOTE_PREFIX)\n--------------------------------------------------\n\n            sortType = getEnumStringPref<SortType>(storage, \"$accountUuid.sortTypeEnum\", SortType.SORT_DATE)\r\n\n--------------------------------------------------\n\n            showPictures = getEnumStringPref<ShowPictures>(storage, \"$accountUuid.showPicturesEnum\", ShowPictures.NEVER)\r\n\n--------------------------------------------------\n                    ringtone = storage.getString(\"$accountUuid.ringtone\", DEFAULT_RINGTONE_URI),\n                    light = getEnumStringPref(storage, \"$accountUuid.notificationLight\", NotificationLight.Disabled),\r\n                    vibration = NotificationVibration(\n--------------------------------------------------\n            folderDisplayMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderDisplayMode\", FolderMode.NOT_SECOND_CLASS)\r\n\n--------------------------------------------------\n            folderSyncMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderSyncMode\", FolderMode.FIRST_CLASS)\r\n\n--------------------------------------------------\n\n            folderPushMode = getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderPushMode\", FolderMode.NONE)\r\n\n--------------------------------------------------\n            folderTargetMode =\n                getEnumStringPref<FolderMode>(storage, \"$accountUuid.folderTargetMode\", FolderMode.NOT_SECOND_CLASS)\r\n\n--------------------------------------------------\n\n            searchableFolders = getEnumStringPref<Searchable>(storage, \"$accountUuid.searchableFolders\", Searchable.ALL)\r\n", "import android.os.Bundle\ninline fun <reified T : Enum<T>> Bundle.getEnum(key: String, defaultValue: T): T {\r\n    val value = getString(key) ?: return defaultValue\r\n    return enumValueOf(value)\r\n}\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "MaterialFiles/1235" : [ "    val activity = remember {\n        context.findActivity()\r\n    }", "import android.content.ContextWrapper\nimport android.content.Context\nimport android.app.Activity\nfun Context.findActivity(): Activity? {\r\n    var context = this\r\n    while (context is ContextWrapper) {\r\n        if (context is Activity) return context\r\n        context = context.baseContext\r\n    }\r\n    return null\r\n}\nimport android.app.Activity\nimport android.content.Context\nimport android.content.ContextWrapper" ],
  "MaterialFiles/1238" : [ "clearPersistedUriPermissions()", "import com.omgodse.notally.miscellaneous.IO\nimport com.omgodse.notally.R\nimport android.net.Uri\nimport android.content.Intent\nprivate fun clearPersistedUriPermissions() {\r\n        val flags = Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\r\n        app.contentResolver.persistedUriPermissions.forEach { permission ->\r\n            app.contentResolver.releasePersistableUriPermission(permission.uri, flags)\r\n        }\r\n    }\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "MaterialFiles/1237" : [ "DataLiberationTools.tryToPersistUri(requireContext(), uri)", "import timber.log.Timber\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nfun tryToPersistUri(context: Context, uri: Uri) {\r\n        try {\r\n            context.contentResolver\r\n                .takePersistableUriPermission(\r\n                    uri, Intent.FLAG_GRANT_READ_URI_PERMISSION\r\n                            or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\r\n                )\r\n        } catch (e: SecurityException) {\r\n            Timber.e(e, \"Could not persist r/w permission for backup file URI.\")\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, net, Uri], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "MaterialFiles/1239" : [ "binding.EnterBody.text?.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n--------------------------------------------------\neditable.setSpan(StyleSpan(Typeface.BOLD), start, end)\n--------------------------------------------------\neditable.setSpan(StyleSpan(Typeface.ITALIC), start, end)\n--------------------------------------------------\neditable.setSpan(URLSpan(url), start, end)\n--------------------------------------------------\neditable.setSpan(TypefaceSpan(\"monospace\"), start, end)\n--------------------------------------------------\neditable.setSpan(StrikethroughSpan(), start, end)\n--------------------------------------------------\nsetSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n--------------------------------------------------\nsetSpan(span, start, length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)", "import android.text.Spanned\nimport android.text.Spannable\nprivate fun Spannable.setSpan(span: Any, start: Int, end: Int) {\r\n    if (end <= length) {\r\n        setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n    } else setSpan(span, start, length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n}\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[android, text, Spanned], wildcard=false, alias=null)" ],
  "Feeder/413" : [ "        } else {\n            resetApiClientUser()\r\n        }", "import org.jellyfin.sdk.model.DeviceInfo\nimport org.jellyfin.sdk.api.client.ApiClient\nprivate fun resetApiClientUser() {\r\n        apiClient.userId = null\r\n        apiClient.accessToken = null\r\n        apiClient.deviceInfo = baseDeviceInfo\r\n    }\nimport org.jellyfin.sdk.api.client.ApiClient\nimport org.jellyfin.sdk.model.DeviceInfo" ],
  "Feeder/415" : [ "val data = hexStringToUtf8String(dataString)", "import io.horizontalsystems.ethereumkit.core.hexStringToByteArray\nprivate fun hexStringToUtf8String(hexString: String) = try {\r\n        String(hexString.hexStringToByteArray())\r\n    } catch (_: Throwable) {\r\n        hexString\r\n    }" ],
  "MaterialFiles/1252" : [ "super.onViewRecycled(h)\n--------------------------------------------------\nsuper.onViewRecycled(holder)", "import org.videolan.vlc.R\nimport android.view.View\noverride fun onViewRecycled(holder: ViewHolder) {\r\n        scheduler?.cancelAction(MARQUEE_ACTION)\r\n        super.onViewRecycled(holder)\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Feeder/418" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/419" : [ "@Override\r\npublic boolean hasGlyph(@NonNull CharSequence charSequence, int start, int end, int sdkAdded) {\r\n    // For pre M devices, heuristic in PaintCompat can result in false positives. we are\r\n    // adding another heuristic using the sdkAdded field. if the emoji was added to OS\r\n    // at a later version we assume that the system probably cannot render it.\r\n    if (Build.VERSION.SDK_INT < 23 && sdkAdded > Build.VERSION.SDK_INT) {\r\n        return false;\r\n    }\r\n    final StringBuilder builder = getStringBuilder();\r\n    builder.setLength(0);\r\n    while (start < end) {\r\n        builder.append(charSequence.charAt(start));\r\n        start++;\r\n    }\r\n    return PaintCompat.hasGlyph(mTextPaint, builder.toString());\r\n}\n--------------------------------------------------\n", "import android.os.Build\nprivate static StringBuilder getStringBuilder() {\r\n    if (sStringBuilder.get() == null) {\r\n        sStringBuilder.set(new StringBuilder());\r\n    }\r\n    return sStringBuilder.get();\r\n}" ],
  "Trail-Sense/1575" : [ "            isUpcomingElseRecent,\n            isInfiniteCalendar = WidgetSettings.isInfinite(context, appWidgetId),\r\n            isOnlyFavorites = WidgetSettings.isOnlyFavoriteShows(context, appWidgetId),\n--------------------------------------------------\n                // UPCOMING\n                val timeThreshold = if (isInfiniteCalendar) {\r\n                    // Include all future episodes.\n--------------------------------------------------\n                // RECENT\n                val timeThreshold = if (isInfiniteCalendar) {\r\n                    // Include all past episodes.", "import com.battlelancer.seriesguide.R\nimport android.content.Context\nfun isInfinite(context: Context, appWidgetId: Int): Boolean {\r\n        val prefs = context.getSharedPreferences(SETTINGS_FILE, 0)\r\n        return prefs.getBoolean(KEY_PREFIX_WIDGET_IS_INFINITE + appWidgetId, false)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1577" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/717" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}" ],
  "VinylMusicPlayer/711" : [ "@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    lastTheme = ThemeSwitcher.getNoTitleTheme(this);\r\n    setTheme(lastTheme);\r\n    if (savedInstanceState != null) {\r\n        ensureGeneratedViewIdGreaterThan(savedInstanceState.getInt(KEY_GENERATED_VIEW_ID, 0));\r\n    }\r\n    WindowCompat.setDecorFitsSystemWindows(getWindow(), false);\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.main);\r\n    recycledViewPool.setMaxRecycledViews(R.id.view_type_episode_item, 25);\r\n    drawerLayout = findViewById(R.id.drawer_layout);\r\n    navDrawer = findViewById(R.id.navDrawerFragment);\r\n    setNavDrawerSize();\r\n    // Consume navigation bar insets - we apply them in setPlayerVisible()\r\n    ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main_view), (v, insets) -> {\r\n        navigationBarInsets = insets.getInsets(WindowInsetsCompat.Type.navigationBars());\r\n        updateInsets();\r\n        return new WindowInsetsCompat.Builder(insets).setInsets(WindowInsetsCompat.Type.navigationBars(), Insets.NONE).build();\r\n    });\r\n    final FragmentManager fm = getSupportFragmentManager();\r\n    if (fm.findFragmentByTag(MAIN_FRAGMENT_TAG) == null) {\r\n        if (!UserPreferences.DEFAULT_PAGE_REMEMBER.equals(UserPreferences.getDefaultPage())) {\r\n            loadFragment(UserPreferences.getDefaultPage(), null);\r\n        } else {\r\n            String lastFragment = NavDrawerFragment.getLastNavFragment(this);\r\n            if (ArrayUtils.contains(NavDrawerFragment.NAV_DRAWER_TAGS, lastFragment)) {\r\n                loadFragment(lastFragment, null);\r\n            } else {\r\n                try {\r\n                    loadFeedFragmentById(Integer.parseInt(lastFragment), null);\r\n                } catch (NumberFormatException e) {\r\n                    // it's not a number, this happens if we removed\r\n                    // a label from the NAV_DRAWER_TAGS\r\n                    // give them a nice default...\r\n                    loadFragment(HomeFragment.TAG, null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    FragmentTransaction transaction = fm.beginTransaction();\r\n    NavDrawerFragment navDrawerFragment = new NavDrawerFragment();\r\n    transaction.replace(R.id.navDrawerFragment, navDrawerFragment, NavDrawerFragment.TAG);\r\n    AudioPlayerFragment audioPlayerFragment = new AudioPlayerFragment();\r\n    transaction.replace(R.id.audioplayerFragment, audioPlayerFragment, AudioPlayerFragment.TAG);\r\n    transaction.commit();\r\n    checkFirstLaunch();\r\n    View bottomSheet = findViewById(R.id.audioplayerFragment);\r\n    sheetBehavior = (LockableBottomSheetBehavior) BottomSheetBehavior.from(bottomSheet);\r\n    sheetBehavior.setHideable(false);\r\n    sheetBehavior.setBottomSheetCallback(bottomSheetCallback);\r\n    FeedUpdateManager.restartUpdateAlarm(this, false);\r\n    SynchronizationQueueSink.syncNowIfNotSyncedRecently();\r\n    WorkManager.getInstance(this).getWorkInfosByTagLiveData(FeedUpdateManager.WORK_TAG_FEED_UPDATE).observe(this, workInfos -> {\r\n        boolean isRefreshingFeeds = false;\r\n        for (WorkInfo workInfo : workInfos) {\r\n            if (workInfo.getState() == WorkInfo.State.RUNNING) {\r\n                isRefreshingFeeds = true;\r\n            } else if (workInfo.getState() == WorkInfo.State.ENQUEUED) {\r\n                isRefreshingFeeds = true;\r\n            }\r\n        }\r\n        EventBus.getDefault().postSticky(new FeedUpdateRunningEvent(isRefreshingFeeds));\r\n    });\r\n    WorkManager.getInstance(this).getWorkInfosByTagLiveData(DownloadServiceInterface.WORK_TAG).observe(this, workInfos -> {\r\n        Map<String, DownloadStatus> updatedEpisodes = new HashMap<>();\r\n        for (WorkInfo workInfo : workInfos) {\r\n            String downloadUrl = null;\r\n            for (String tag : workInfo.getTags()) {\r\n                if (tag.startsWith(DownloadServiceInterface.WORK_TAG_EPISODE_URL)) {\r\n                    downloadUrl = tag.substring(DownloadServiceInterface.WORK_TAG_EPISODE_URL.length());\r\n                }\r\n            }\r\n            if (downloadUrl == null) {\r\n                continue;\r\n            }\r\n            int status;\r\n            if (workInfo.getState() == WorkInfo.State.RUNNING) {\r\n                status = DownloadStatus.STATE_RUNNING;\r\n            } else if (workInfo.getState() == WorkInfo.State.ENQUEUED || workInfo.getState() == WorkInfo.State.BLOCKED) {\r\n                status = DownloadStatus.STATE_QUEUED;\r\n            } else {\r\n                status = DownloadStatus.STATE_COMPLETED;\r\n            }\r\n            int progress = workInfo.getProgress().getInt(DownloadServiceInterface.WORK_DATA_PROGRESS, -1);\r\n            if (progress == -1 && status != DownloadStatus.STATE_COMPLETED) {\r\n                status = DownloadStatus.STATE_QUEUED;\r\n                progress = 0;\r\n            }\r\n            updatedEpisodes.put(downloadUrl, new DownloadStatus(status, progress));\r\n        }\r\n        DownloadServiceInterface.get().setCurrentDownloads(updatedEpisodes);\r\n        EventBus.getDefault().postSticky(new EpisodeDownloadEvent(updatedEpisodes));\r\n    });\r\n}\n--------------------------------------------------\n", "@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    if (drawerLayout != null) {\r\n        drawerLayout.removeDrawerListener(drawerToggle);\r\n    }\r\n}" ],
  "fcitx5-android/150" : [ "selectedNotes.remove(id)\n--------------------------------------------------\nmodel.actionMode.remove(id)\n--------------------------------------------------\neditor.remove(\"widget:$id\")\n--------------------------------------------------\nlabels.remove(value)\n--------------------------------------------------\nlabels.remove(oldValue)\n--------------------------------------------------\ncopy.remove(match)", "fun remove(id: Long) {\r\n        selectedNotes.remove(id)\r\n        refresh()\r\n    }" ],
  "MaterialFiles/1245" : [ "setVisibilityIfNecessary(binding.webViewProgress.root, View.GONE)\n--------------------------------------------------\nsetVisibilityIfNecessary(binding.webViewProgress.root, View.VISIBLE)", "import android.view.View\nprivate fun setVisibilityIfNecessary(view: View, visibility: Int) {\r\n        if (view.visibility != visibility) {\r\n            view.visibility = visibility\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "MaterialFiles/1244" : [ "                    webViewBinding.loadingContainer.isVisible = false\n                    webView.fadeIn()\r\n                }", "import androidx.interpolator.view.animation.LinearOutSlowInInterpolator\nimport androidx.core.view.isVisible\nimport android.view.View\nfun View.fadeIn() {\r\n    alpha = 0f\r\n    isVisible = true\r\n    animate().apply {\r\n        alpha(1f)\r\n        @Suppress(\"MagicNumber\")\r\n        duration = 300L\r\n        interpolator = LinearOutSlowInInterpolator()\r\n        withLayer()\r\n    }\r\n}\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, core, view, isVisible], wildcard=false, alias=null)\nImport(names=[androidx, interpolator, view, animation, LinearOutSlowInInterpolator], wildcard=false, alias=null)" ],
  "MaterialFiles/1247" : [ "setVisibilityIfNecessary(binding.webViewProgress.root, View.GONE)\n--------------------------------------------------\nsetVisibilityIfNecessary(binding.webViewProgress.root, View.VISIBLE)", "import android.view.View\nprivate fun setVisibilityIfNecessary(view: View, visibility: Int) {\r\n        if (view.visibility != visibility) {\r\n            view.visibility = visibility\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "MaterialFiles/1246" : [ "setVisibilityIfNecessary(binding.webViewProgress.root, View.GONE)\n--------------------------------------------------\nsetVisibilityIfNecessary(binding.webViewProgress.root, View.VISIBLE)", "import android.view.View\nprivate fun setVisibilityIfNecessary(view: View, visibility: Int) {\r\n        if (view.visibility != visibility) {\r\n            view.visibility = visibility\r\n        }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "fcitx5-android/159" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/299" : [ "@ColorInt\r\npublic static int getBackgroundColor(@Nullable Palette palette) {\r\n    return getProperBackgroundSwatch(palette).getRgb();\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport android.graphics.Color\nprivate static Palette.Swatch getProperBackgroundSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n    if (palette.getDarkMutedSwatch() != null) {\r\n        return palette.getDarkMutedSwatch();\r\n    } else if (palette.getMutedSwatch() != null) {\r\n        return palette.getMutedSwatch();\r\n    } else if (palette.getLightMutedSwatch() != null) {\r\n        return palette.getLightMutedSwatch();\r\n    } else {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n}" ],
  "Feeder/423" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/297" : [ "@ColorInt\r\npublic static int getBackgroundColor(@Nullable Palette palette) {\r\n    return getProperBackgroundSwatch(palette).getRgb();\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport android.graphics.Color\nprivate static Palette.Swatch getProperBackgroundSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n    if (palette.getDarkMutedSwatch() != null) {\r\n        return palette.getDarkMutedSwatch();\r\n    } else if (palette.getMutedSwatch() != null) {\r\n        return palette.getMutedSwatch();\r\n    } else if (palette.getLightMutedSwatch() != null) {\r\n        return palette.getLightMutedSwatch();\r\n    } else {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n}" ],
  "Iconify/298" : [ "@ColorInt\r\npublic static int getBackgroundColor(@Nullable Palette palette) {\r\n    return getProperBackgroundSwatch(palette).getRgb();\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport android.graphics.Color\nprivate static Palette.Swatch getProperBackgroundSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n    if (palette.getDarkMutedSwatch() != null) {\r\n        return palette.getDarkMutedSwatch();\r\n    } else if (palette.getMutedSwatch() != null) {\r\n        return palette.getMutedSwatch();\r\n    } else if (palette.getLightMutedSwatch() != null) {\r\n        return palette.getLightMutedSwatch();\r\n    } else {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n}" ],
  "MaterialFiles/1260" : [ "currentNotesView()\n--------------------------------------------------\ncurrentNotesView()?.let { noteView ->\n    noteView.text!!.clearBackgroundSpans()\n}\n--------------------------------------------------\ncurrentNotesView()?.let { noteView ->\n    noteView.requestFocus()\n    noteView.setSelection(0)\n}", "import com.simplemobiletools.notes.pro.models.Note\nprivate fun currentNotesView() = if (binding.viewPager == null) {\r\n        null\r\n    } else {\r\n        mAdapter?.getCurrentNotesView(binding.viewPager.currentItem)\r\n    }" ],
  "Iconify/295" : [ "public static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\npublic static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.graphics.Color\n@NonNull\r\npublic static Palette.Swatch getSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.WHITE, 1);\r\n    }\r\n    return getBestPaletteSwatchFrom(palette.getSwatches());\r\n}" ],
  "Iconify/296" : [ "public static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\npublic static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.graphics.Color\n@NonNull\r\npublic static Palette.Swatch getSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.WHITE, 1);\r\n    }\r\n    return getBestPaletteSwatchFrom(palette.getSwatches());\r\n}" ],
  "Trail-Sense/1583" : [ "{\n            var equals = super.equals(obj)\r\n            if (obj is LaunchedCountry) {\n--------------------------------------------------\n            if (obj is LaunchedCountry) {\n                equals = name() == obj.name() &&\r\n                    currencyCode() == obj.currencyCode() &&\n--------------------------------------------------\n            }\n            return equals\r\n        }\n--------------------------------------------------\n{\n        var equals = super.equals(obj)\r\n        if (obj is Config) {\n--------------------------------------------------\n        if (obj is Config) {\n            equals = abExperiments() == obj.abExperiments() &&\r\n                countryCode() == obj.countryCode() &&\n--------------------------------------------------\n        }\n        return equals\r\n    }\n--------------------------------------------------\nsuper.equals(other)\n--------------------------------------------------\nsuper.equals(obj)\n--------------------------------------------------\nreward.shippingType().equals(Reward.SHIPPING_TYPE_NO_SHIPPING, ignoreCase = true)\n--------------------------------------------------\nUri.parse(url).getQueryParameter(KEY_SAVE)?.equals(\"true\")\n--------------------------------------------------\nobj.comment?.equals(this.comment)\n--------------------------------------------------\nobj.project?.equals(this.project)\n--------------------------------------------------\nprev.first.first.second.equals(curr.first.first.second)", "override fun equals(other: Any?): Boolean {\r\n        var equals = super.equals(other)\r\n        if (other is GCM) {\r\n            equals = alert() == other.alert() &&\r\n                title() == other.title()\r\n        }\r\n        return equals\r\n    }" ],
  "Iconify/293" : [ "@ColorInt\r\npublic static int getBackgroundColor(@Nullable Palette palette) {\r\n    return getProperBackgroundSwatch(palette).getRgb();\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport android.graphics.Color\nprivate static Palette.Swatch getProperBackgroundSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n    if (palette.getDarkMutedSwatch() != null) {\r\n        return palette.getDarkMutedSwatch();\r\n    } else if (palette.getMutedSwatch() != null) {\r\n        return palette.getMutedSwatch();\r\n    } else if (palette.getLightMutedSwatch() != null) {\r\n        return palette.getLightMutedSwatch();\r\n    } else {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n}" ],
  "Feeder/428" : [ "{\n        stringResOrTitle?.let { either ->\r\n            @StringRes val stringRes = either.right()\n--------------------------------------------------\n        stringResOrTitle?.let { either ->\n            @StringRes val stringRes = either.right()\r\n            val title = either.left()\n--------------------------------------------------\n            @StringRes val stringRes = either.right()\n            val title = either.left()\r\n            binding.pledgeContainerLayout.backingDetailsSubtitle.text = stringRes?.let { getString(it) } ?: title\n--------------------------------------------------\neither<Observable<Project?>>({ value: Project? ->\n    Observable.just(value)\n}, { u: Update? ->\n    apolloClient.getProject(u?.projectId().toString()).compose(Transformers.neverErrorV2())\n})\n--------------------------------------------------\neither(ifLeft = {\n    return@either Observable.just(Pair.create<Backing, Project>(it, data.project))\n}, ifRight = {\n    val backingNotification = if (data.project.isBacking()) client.fetchProjectBacking(data.project, data.currentUser).materialize().share() else client.fetchProjectBacking(data.project, data.participant).materialize().share()\n    return@either backingNotification.filter {\n        data.project.isNotNull()\n    }.map {\n        Pair.create(it.value, data.project)\n    }.take(1)\n})\n--------------------------------------------------\neither({ obj: MessageThread ->\n    obj.project()\n}) { projectAndBacking: Pair<Project?, Backing?> ->\n    projectAndBacking.first\n}\n--------------------------------------------------\neither(ifLeft = { backing ->\n    client.fetchMessagesForBacking(backing)\n}, ifRight = { messageThread ->\n    client.fetchMessagesForThread(messageThread)\n})\n--------------------------------------------------\neither({ backing: Backing ->\n    if (backing.backerId() == currentUser1.id()) MessageSubject.Project(project1) else MessageSubject.Backing(backing)\n}) { messageThread: MessageThread ->\n    MessageSubject.MessageThread(messageThread)\n}\n--------------------------------------------------\neither({ backing: Backing ->\n    client.fetchMessagesForBacking(backing)\n}) { messageThread: MessageThread ->\n    client.fetchMessagesForThread(messageThread)\n}", "fun <C> either(ifLeft: (A) -> C, ifRight: (B) -> C): C = when (this) {\r\n        is Left -> ifLeft(this.left)\r\n        is Right -> ifRight(this.right)\r\n    }" ],
  "Trail-Sense/1103" : [ "/**\r\n * Finalize by removing the receiver\r\n *\r\n * @throws Throwable if something goes wrong\r\n */\r\n@SuppressWarnings(\"checkstyle:NoFinalizer\")\r\nprotected void finalize() throws Throwable {\r\n    if (systemBroadcastReceiver != null) {\r\n        try {\r\n            ContextExtensionsKt.unregisterReceiverSafe(appContext, systemBroadcastReceiver, logger);\r\n        } catch (IllegalArgumentException exception) {\r\n            logger.w(\"Receiver not registered\");\r\n        }\r\n    }\r\n    super.finalize();\r\n}\n--------------------------------------------------\n/**\r\n * Finalizer.\r\n */\r\n@Override\r\nprotected void finalize() throws Throwable {\r\n    try {\r\n        disconnect();\r\n    } finally {\r\n        super.finalize();\r\n    }\r\n}\n--------------------------------------------------\n", "@Override\r\nprotected void finalize() throws Throwable {\r\n    try {\r\n        close();\r\n    } finally {\r\n        super.finalize();\r\n    }\r\n}" ],
  "Trail-Sense/1587" : [ "repository.favoritePlaylist()\n--------------------------------------------------\n        lifecycleScope.launch(IO) {\n            val playlist: PlaylistEntity = libraryViewModel.favoritePlaylist()\n            val songEntity = song.toSongEntity(playlist.playListId)\n--------------------------------------------------\nlibraryViewModel.favoritePlaylist()", "override suspend fun favoritePlaylist(favorite: String): PlaylistEntity {\n        val playlist: PlaylistEntity? = playlistDao.playlist(favorite).firstOrNull()\n        return if (playlist != null) {\n            playlist\n        } else {\n            createPlaylist(PlaylistEntity(playlistName = favorite))\n            playlistDao.playlist(favorite).first()\n        }\n    }" ],
  "Trail-Sense/1100" : [ "joinProject(it)", "import com.kickstarter.models.Reward\nimport com.kickstarter.models.Project\nimport com.kickstarter.R\nimport android.util.Pair\nprivate fun joinProject(items: Pair<List<Reward>, Project>?): List<Pair<Project, Reward>> {\r\n            return items?.first?.map {\r\n                Pair(items.second, it)\r\n            } ?: emptyList()\r\n        }\nImport(names=[android, util, Pair], wildcard=false, alias=null)\nImport(names=[com, kickstarter, R], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, Project], wildcard=false, alias=null)\nImport(names=[com, kickstarter, models, Reward], wildcard=false, alias=null)" ],
  "Trail-Sense/1585" : [ "payload.toBuilder()\n--------------------------------------------------\nthis.toBuilder()\n--------------------------------------------------\nactivity().toBuilder()\n--------------------------------------------------\nbacking().toBuilder()\n--------------------------------------------------\ncheckoutData(shippingAmount, totalAmount).toBuilder()\n--------------------------------------------------\nconfig().toBuilder()\n--------------------------------------------------\nmessageThreadEnvelope().toBuilder()\n--------------------------------------------------\nproject.toBuilder()\n--------------------------------------------------\nproject().toBuilder()\n--------------------------------------------------\nRewardFactory.reward().toBuilder()\n--------------------------------------------------\nRewardFactory.addOn().toBuilder()\n--------------------------------------------------\nRewardFactory.limitReached().toBuilder()\n--------------------------------------------------\nenabled().toBuilder()\n--------------------------------------------------\nreward().toBuilder()\n--------------------------------------------------\nrewardsItem().toBuilder()\n--------------------------------------------------\nItemFactory.item().toBuilder()\n--------------------------------------------------\ncreator().toBuilder()\n--------------------------------------------------\nupdate().toBuilder()\n--------------------------------------------------\nuser().toBuilder()\n--------------------------------------------------\nSurveyResponseFactory.surveyResponse().toBuilder()\n--------------------------------------------------\nprojectNotification.toBuilder()\n--------------------------------------------------\nProjectFactory.project().toBuilder()\n--------------------------------------------------\nlistOfComments[position].toBuilder()\n--------------------------------------------------\ntoBuilder().page(page + 1)\n--------------------------------------------------\nupdateTransformer(edge?.node()?.fragments()?.post()).toBuilder()\n--------------------------------------------------\ncommentTransformer(edge?.node()?.fragments()?.comment()).toBuilder()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder()\n--------------------------------------------------\nit.toBuilder()\n--------------------------------------------------\npledgeDataAndReason.first.projectData().toBuilder()\n--------------------------------------------------\npledgeDataAndReason.first.toBuilder()\n--------------------------------------------------\nparams.toBuilder()\n--------------------------------------------------\npledgeData.toBuilder()\n--------------------------------------------------\naddOn.toBuilder()\n--------------------------------------------------\nit.first.toBuilder()\n--------------------------------------------------\nit.second.toBuilder()\n--------------------------------------------------\nuser.toBuilder()\n--------------------------------------------------\ndrawerClickParams.params().toBuilder()\n--------------------------------------------------\np.toBuilder()\n--------------------------------------------------\nthis.userOutput.value.toBuilder()\n--------------------------------------------------\nnewUser.toBuilder()", "fun toBuilder() = Builder(\r\n            id = id,\r\n            projectId = projectId\r\n        )" ],
  "Trail-Sense/1106" : [ "systemUiHider.toggle()", "fun toggle() {\r\n        if (isVisible) {\r\n            hide()\r\n        } else {\r\n            show()\r\n        }\r\n    }" ],
  "Trail-Sense/1104" : [ "                        ).toBitmap()\n                    val playPause = getPlayPauseBitmap(true)\n\n--------------------------------------------------\n{\n        getPlayPauseBitmap(isPlaying).also {\n            contentView?.setImageViewBitmap(R.id.action_play_pause, it)", "import code.name.monkey.retromusic.extensions.toBitmap\nimport code.name.monkey.retromusic.extensions.getTintedDrawable\nimport code.name.monkey.retromusic.R\nimport androidx.core.graphics.drawable.toBitmap\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nimport android.graphics.Bitmap\nprivate fun getPlayPauseBitmap(isPlaying: Boolean): Bitmap {\n        return context.getTintedDrawable(\n            if (isPlaying)\n                R.drawable.ic_pause_white_48dp\n            else\n                R.drawable.ic_play_arrow_white_48dp, primaryColor\n        ).toBitmap()\n    }\nimport android.graphics.Bitmap\nimport android.graphics.Color\nimport android.graphics.drawable.Drawable\nimport androidx.core.graphics.drawable.toBitmap\nimport code.name.monkey.retromusic.R\nimport code.name.monkey.retromusic.extensions.getTintedDrawable\nimport code.name.monkey.retromusic.extensions.toBitmap" ],
  "fcitx5-android/180" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/707" : [ "@Override\r\npublic boolean onNavigateUp() {\r\n    onBackPressed();\r\n    return true;\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\n            break;\r\n        case R.id.menu_gallery_share:\r\n            shareMedia();\r\n            break;\r\n        case R.id.menu_gallery:\r\n            viewMedia();\r\n            break;\r\n        default:\r\n            LogDelegate.e(\"Wrong element choosen: \" + item.getItemId());\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment\n@Override\r\npublic void onBackPressed() {\r\n    if (!backStack.isEmpty()) {\r\n        replaceFragment(backStack.remove(backStack.size() - 1));\r\n    } else {\r\n        super.onBackPressed();\r\n    }\r\n}" ],
  "fcitx5-android/182" : [ "                // Parse segment\n                val possibleSegmentEnd = parse16BitHexSegment(text, currentPos, min(currentPos + 4, compressionPos))\r\n                if (possibleSegmentEnd == currentPos) return startPos\n--------------------------------------------------\n            // Parse segment\n            val possibleSegmentEnd = parse16BitHexSegment(text, currentPos, min(currentPos + 4, addressEnd))\r\n            if (possibleSegmentEnd == currentPos) return startPos", "private fun parse16BitHexSegment(text: CharSequence, startPos: Int, endPos: Int): Int {\r\n        var currentPos = startPos\r\n        while (isHexDigit(text[currentPos]) && currentPos < endPos) {\r\n            currentPos++\r\n        }\r\n\r\n        return currentPos\r\n    }" ],
  "Trail-Sense/1108" : [ "        return ImageLoader.Builder(this)\n            .crossfade(true)\r\n            .components {\n--------------------------------------------------\n                    val last = getLastData(\"${type}_${period}\", chartData)\n                    val advice = last?.let { cross(lastRate, it) } ?: Advice.NODATA\r\n                    maItems.add(Item(name = \"${type.uppercase()} $period\", advice = advice))\n--------------------------------------------------\n\n            // Calculate cross advices\r\n            val ema25 = getLastData(\"ema_25\", chartData)\n--------------------------------------------------\n            val ema50 = getLastData(\"ema_50\", chartData)\n            val crossAdvice = if (ema25 != null && ema50 != null) {\r\n                cross(ema25, ema50)\n--------------------------------------------------\n            val crossAdvice = if (ema25 != null && ema50 != null) {\n                cross(ema25, ema50)\r\n            } else {\n--------------------------------------------------\n\n            maItems.add(Item(name = \"EMA Cross 25,50\", advice = crossAdvice))\r\n            sectionItems.add(SectionItem(name = \"Moving Averages\", items = maItems))\n--------------------------------------------------\n            val macdAdvice: Advice = if (macdData != null && macdSignalData != null) {\n                cross(macdSignalData, macdData)\r\n            } else Advice.NODATA", "private fun cross(value1: Float, value2: Float): Advice {\r\n        return when {\r\n            value1 > value2 -> Advice.BUY\r\n            value1 < value2 -> Advice.SELL\r\n            else -> Advice.NEUTRAL\r\n        }\r\n    }" ],
  "Trail-Sense/1109" : [ "setupPanel()\n--------------------------------------------------\n        setUpMusicControllers()\n        setupPanel()\n        setupRecyclerView()", "import code.name.monkey.retromusic.R\nprivate fun setupPanel() {\n        if (!binding.colorBackground.isLaidOut || binding.colorBackground.isLayoutRequested) {\n            binding.colorBackground.addOnLayoutChangeListener(this)\n            return\n        }\n    }\nimport code.name.monkey.retromusic.R" ],
  "VinylMusicPlayer/700" : [ "val tv = showTvUi()", "import org.videolan.tools.Settings\nimport org.videolan.tools.KEY_CURRENT_SETTINGS_VERSION\nimport org.videolan.resources.AndroidDevices\nprivate fun showTvUi(): Boolean {\r\n        val settings = Settings.getInstance(this)\r\n        //because the [VersionMigration] is done after the first call to this method, we have to keep the old implementation for people coming from an older version of the app\r\n        if (settings.getInt(KEY_CURRENT_SETTINGS_VERSION, 0) < 5) return AndroidDevices.isAndroidTv || !AndroidDevices.isChromeBook && !AndroidDevices.hasTsp ||\r\n                settings.getBoolean(\"tv_ui\", false)\r\n        return  settings.getBoolean(\"tv_ui\", false)\r\n    }\nImport(names=[org, videolan, resources, AndroidDevices], wildcard=false, alias=null)\nImport(names=[org, videolan, tools, Settings], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/703" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}" ],
  "fcitx5-android/186" : [ "super.getItemOffsets(outRect, view, parent, state)", "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {\r\n        super.getItemOffsets(outRect, view, parent, state)\r\n        outRect.apply {\r\n            bottom = margin\r\n        }\r\n    }\nImport(names=[android, graphics, Rect], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)" ],
  "MaterialFiles/1256" : [ "{\n        super.onViewStateRestored(savedInstanceState)\r\n        if (savedInstanceState != null) {", "import org.tasks.R\nimport androidx.appcompat.view.ActionMode\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n        if (savedInstanceState != null) {\r\n            val longArray = savedInstanceState.getLongArray(EXTRA_SELECTED_TASK_IDS)\r\n            if (longArray?.isNotEmpty() == true) {\r\n                taskAdapter.setSelected(longArray.toList())\r\n                startActionMode()\r\n            }\r\n        }\r\n    }\nimport android.os.Bundle\nimport android.view.View\nimport androidx.appcompat.view.ActionMode\nimport org.tasks.R" ],
  "MaterialFiles/1259" : [ "@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == MenuHelper.save) {\r\n        return onActionDoneClick();\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    boolean result;\r\n    result = datePeriodItemSelected(item);\r\n    if (result)\r\n        return true;\r\n    result = isStatusSelectionHandled(item);\r\n    if (result)\r\n        return true;\r\n    result = isFilterSelected(item);\r\n    if (result)\r\n        return true;\r\n    switch(item.getItemId()) {\r\n        case R.id.menu_add_transaction_account:\r\n            startCheckingAccountActivity();\r\n            result = true;\r\n            break;\r\n        case R.id.menu_export_to_csv:\r\n            if (mAllDataListFragment != null && mAccount != null)\r\n                mAllDataListFragment.exportDataToCSVFile(mAccount.getName());\r\n            result = true;\r\n            break;\r\n        default:\r\n            result = false;\r\n            break;\r\n    }\r\n    // If not consumed here (true), send for further processing to the parent.\r\n    if (result) {\r\n        return result;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}\n--------------------------------------------------\n", "import android.view.MenuItem;\r\nimport com.money.manager.ex.R;\r\nimport com.money.manager.ex.R\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    if (item.getItemId() == R.id.menu_chart) {\r\n        showChart();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}" ],
  "Feeder/434" : [ "this.left()\n--------------------------------------------------\nthat.left()\n--------------------------------------------------\ncardIssuerOrStringRes.left()\n--------------------------------------------------\nit.left()", "fun left(): A? = when (this) {\r\n        is Left -> this.left\r\n        is Right -> null\r\n    }" ],
  "Trail-Sense/1590" : [ "                val location = async { locationDao.getLocation(task, preferences) }\n                val tags = async { tagDataDao.getTags(task) }\r\n                val alarms = async { alarmDao.getAlarms(task) }\n--------------------------------------------------\n                vtodoCache.getVtodo(container.caldavTask)?.let { fromVtodo(it) } ?: continue\n            tagDao.insert(container.task, iCal.getTags(remoteTask.categories))\r\n        }", "import org.tasks.data.TagData\nsuspend fun getTags(categories: List<String>): List<TagData> {\r\n        if (categories.isEmpty()) {\r\n            return emptyList()\r\n        }\r\n        val tags = tagDataDao.getTags(categories).toMutableList()\r\n        val existing = tags.map(TagData::name)\r\n        val toCreate = categories subtract existing\r\n        for (name in toCreate) {\r\n            val tag = TagData(name)\r\n            tagDataDao.createNew(tag)\r\n            tags.add(tag)\r\n        }\r\n        return tags\r\n    }\nimport org.tasks.data.TagData" ],
  "MaterialFiles/1271" : [ "listener.onLongClick(adapterPosition)", "import com.omgodse.notally.room.BaseNote\noverride fun onLongClick(position: Int) {\r\n        if (position != -1) {\r\n            adapter?.currentList?.get(position)?.let { item ->\r\n                if (item is BaseNote) {\r\n                    handleNoteSelection(item.id, position, item)\r\n                }\r\n            }\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, room, BaseNote], wildcard=false, alias=null)" ],
  "Feeder/437" : [ "_morePath.map<Pair<Params, String>>(Function { path: String ->\n    Pair(null, path)\n})\n--------------------------------------------------\nmap(envelopeToListOfData)\n--------------------------------------------------\nmap(pageTransformation)\n--------------------------------------------------\nObservable.just(ASSET_PATH).map { path: String ->\n    configJSONString(path, assetManager)\n}\n--------------------------------------------------\nmap { json: String? ->\n    gson.fromJson(json, Config::class.java)\n}\n--------------------------------------------------\nObservable.just(configPreference).map { obj: StringPreferenceType ->\n    obj.get()\n}\n--------------------------------------------------\nobservable().map {\n    it.isPresent()\n}\n--------------------------------------------------\nobservable().filter {\n    it.getValue().isNotNull()\n}.map {\n    it.getValue()\n}\n--------------------------------------------------\nuser.filter {\n    it.isPresent()\n}.map {\n    it.getValue()\n}\n--------------------------------------------------\nTextComponent.TextBlockType.values().map {\n    it.tag\n}\n--------------------------------------------------\ntagsOther.map { tag ->\n    TextComponent.TextStyleType.initialize(tag)\n}\n--------------------------------------------------\n_morePath.map { path: String? ->\n    Pair<Params, String?>(firstPageParams, path)\n}\n--------------------------------------------------\nmap(this.pageTransformation)\n--------------------------------------------------\n_morePath.map { path: String ->\n    Pair<Params, String>(firstPageParams, path)\n}\n--------------------------------------------------\nmap {\n    recyclerView.layoutManager\n}\n--------------------------------------------------\nmap {\n    displayedItemFromLinearLayout(it)\n}\n--------------------------------------------------\nmap { p: Pair<Pair<Int, Int>, Boolean> ->\n    p.first\n}\n--------------------------------------------------\nmap { obj: Notification<T> ->\n    obj.error\n}\n--------------------------------------------------\nupstream.map {\n    Unit\n}\n--------------------------------------------------\nmap { obj: Notification<T> ->\n    obj.value\n}\n--------------------------------------------------\nthis.currentUser.observable().filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap { entry ->\n    if (entry.key == NAME) this.putName(user.name()) else {\n        this[entry.key] = entry.value\n    }\n}\n--------------------------------------------------\nmap { comment: Comment ->\n    CommentCardData.builder().comment(comment).commentCardState(comment.cardStatus(user)).project(project).build()\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().category(it).build()\n}\n--------------------------------------------------\nmap {\n    paramsGroupedByRootCategory(it)\n}\n--------------------------------------------------\nmap {\n    sectionsFromAllParams(it, expandedCategory)\n}\n--------------------------------------------------\nObservable.from(sections).map {\n    rowsFromParams(it)\n}\n--------------------------------------------------\nmap {\n    Pair.create(it, rowsAreExpanded(it, expandedCategory))\n}\n--------------------------------------------------\nmap {\n    NavigationDrawerData.Section.builder().rows(it.first).expanded(it.second).build()\n}\n--------------------------------------------------\nObservable.from(params).map {\n    NavigationDrawerData.Section.Row.builder().params(it).build()\n}\n--------------------------------------------------\nObservable.from(filters).map {\n    NavigationDrawerData.Section.Row.builder().params(it).build()\n}\n--------------------------------------------------\nmap {\n    listOf(it)\n}\n--------------------------------------------------\nmap {\n    NavigationDrawerData.Section.builder().rows(it).build()\n}\n--------------------------------------------------\nthis.addOns()?.map { addOn ->\n    addOn.minimum() * (addOn.quantity() ?: 0)\n}\n--------------------------------------------------\nmatchResults?.groups?.map {\n    it?.value ?: \"\"\n}\n--------------------------------------------------\naddOns?.map { addOn ->\n    addOn.minimum() * (addOn.quantity() ?: 0)\n}\n--------------------------------------------------\nlist.map {\n    encodeRelayId(it)\n}\n--------------------------------------------------\nmap { backingObj ->\n    backingTransformer(backingObj?.fragments()?.backing())\n}\n--------------------------------------------------\nmap { project ->\n    val updates = project?.posts()?.edges()?.map { edge ->\n        updateTransformer(edge?.node()?.fragments()?.post()).toBuilder().build()\n    }\n    UpdatesGraphQlEnvelope.builder().updates(updates).totalCount(project?.posts()?.totalCount() ?: 0).pageInfoEnvelope(createPageInfoObject(project?.posts()?.pageInfo()?.fragments()?.pageInfo())).build()\n}\n--------------------------------------------------\nmap { edge ->\n    updateTransformer(edge?.node()?.fragments()?.post()).toBuilder().build()\n}\n--------------------------------------------------\nmap { project ->\n    val comments = project?.comments()?.edges()?.map { edge ->\n        commentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n    }\n    CommentEnvelope.builder().commentableId(project?.id()).comments(comments).totalCount(project?.comments()?.totalCount() ?: 0).pageInfoEnvelope(createPageInfoObject(project?.comments()?.pageInfo()?.fragments()?.pageInfo())).build()\n}\n--------------------------------------------------\nmap { edge ->\n    commentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n}\n--------------------------------------------------\nmap { post ->\n    val comments = post?.fragments()?.freeformPost()?.comments()?.edges()?.map { edge ->\n        commentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n    }\n    CommentEnvelope.builder().comments(comments).commentableId(post?.id()).totalCount(post?.fragments()?.freeformPost()?.comments()?.totalCount() ?: 0).pageInfoEnvelope(createPageInfoObject(post?.fragments()?.freeformPost()?.comments()?.pageInfo()?.fragments()?.pageInfo())).build()\n}\n--------------------------------------------------\nmap {\n    categoryTransformer(it.fragments().category())\n}\n--------------------------------------------------\nresponseData.rootCategories().map {\n    categoryTransformer(it.fragments().category())\n}\n--------------------------------------------------\nmap {\n    projectTransformer(it.node()?.fragments()?.projectCard())\n}\n--------------------------------------------------\nObservable.just(response.data).map { cards ->\n    cards?.me()?.backings()?.nodes()\n}\n--------------------------------------------------\nmap { list ->\n    val erroredBackings = list?.asSequence()?.map {\n        val project = ErroredBacking.Project.builder().finalCollectionDate(it.project()?.finalCollectionDate()).name(it.project()?.name()).slug(it.project()?.slug()).build()\n        ErroredBacking.builder().project(project).build()\n    }\n    erroredBackings?.toList() ?: listOf()\n}\n--------------------------------------------------\nmap {\n    val project = ErroredBacking.Project.builder().finalCollectionDate(it.project()?.finalCollectionDate()).name(it.project()?.name()).slug(it.project()?.slug()).build()\n    ErroredBacking.builder().project(project).build()\n}\n--------------------------------------------------\nmap {\n    it?.shippingRulesExpanded()?.nodes()?.mapNotNull { node ->\n        node.fragments().shippingRule()\n    }\n}\n--------------------------------------------------\nmap<List<Reward>> { addOnsList ->\n    addOnsList?.let {\n        getAddOnsFromProject(it)\n    } ?: emptyList()\n}\n--------------------------------------------------\nmap { node ->\n    val shippingRulesGr = node.shippingRulesExpanded()?.nodes()?.map {\n        it.fragments().shippingRule()\n    } ?: emptyList()\n    rewardTransformer(node.fragments().reward(), shippingRulesGr, addOnItems = complexRewardItemsTransformer(node.items()?.fragments()?.rewardItems()))\n}\n--------------------------------------------------\nnode.shippingRulesExpanded()?.nodes()?.map {\n    it.fragments().shippingRule()\n}\n--------------------------------------------------\nObservable.just(response.data).map { cards ->\n    cards?.me()?.storedCards()?.nodes()\n}\n--------------------------------------------------\nmap { list ->\n    val storedCards = list?.asSequence()?.map {\n        StoredCard.builder().expiration(it.expirationDate()).id(it.id()).lastFourDigits(it.lastFour()).type(it.type()).build()\n    }\n    storedCards?.toList() ?: listOf()\n}\n--------------------------------------------------\nmap {\n    StoredCard.builder().expiration(it.expirationDate()).id(it.id()).lastFourDigits(it.lastFour()).type(it.type()).build()\n}\n--------------------------------------------------\nmap { commentFragment ->\n    commentTransformer(commentFragment.fragments().comment())\n}\n--------------------------------------------------\nmap {\n    it?.let { cardData ->\n        val card = StoredCard.builder().expiration(cardData.expirationDate()).id(cardData.id()).lastFourDigits(cardData.lastFour()).type(it.type()).build()\n        cardsList.add(card)\n    }\n}\n--------------------------------------------------\nshippingRulesExpanded.map {\n    shippingRuleTransformer(it)\n}\n--------------------------------------------------\nmap { edge ->\n    val quantity = edge.quantity()\n    val description = edge.node()?.name()\n    val id = decodeRelayId(edge.node()?.id()) ?: -1\n    val name = edge.node()?.name() ?: \"\"\n    val item = Item.builder().name(name).description(description).id(id).build()\n    return@map RewardsItem.builder().id(id).itemId(item.id()).item(item).rewardId(0).quantity(quantity).build()\n}\n--------------------------------------------------\nprojectFragment?.friends()?.nodes()?.map {\n    userTransformer(it.fragments().user())\n}\n--------------------------------------------------\nmap {\n    when(it) {\n        CollaboratorPermission.COMMENT -> Permission.COMMENT\n        CollaboratorPermission.EDIT_FAQ -> Permission.EDIT_FAQ\n        CollaboratorPermission.EDIT_PROJECT -> Permission.EDIT_PROJECT\n        CollaboratorPermission.FULFILLMENT -> Permission.FULFILLMENT\n        CollaboratorPermission.POST -> Permission.POST\n        CollaboratorPermission.VIEW_PLEDGES -> Permission.VIEW_PLEDGES\n        else -> Permission.UNKNOWN\n    }\n}\n--------------------------------------------------\nprojectFragment?.fragments()?.tagsCreative()?.tags()?.map {\n    tags.add(it.id())\n}\n--------------------------------------------------\nprojectFragment?.fragments()?.tagsDiscovery()?.tags()?.map {\n    tags.add(it.id())\n}\n--------------------------------------------------\nmap {\n    rewardTransformer(it.fragments().reward(), allowedAddons = it.allowedAddons().pageInfo().startCursor()?.isNotEmpty() ?: false, rewardItems = complexRewardItemsTransformer(it.items()?.fragments()?.rewardItems()))\n}\n--------------------------------------------------\nprojectFragment?.faqs()?.nodes()?.map { node ->\n    projectFaqTransformer(node.fragments().faq())\n}\n--------------------------------------------------\nmap {\n    environmentalCommitmentTransformer(it.fragments().environmentalCommitment())\n}\n--------------------------------------------------\navailableCards.map {\n    it.name\n}\n--------------------------------------------------\ncommentFr?.authorBadges()?.map { badge ->\n    badge?.rawValue() ?: \"\"\n}\n--------------------------------------------------\naddOns.nodes()?.map { node ->\n    rewardTransformer(node.fragments().reward())\n}\n--------------------------------------------------\nmap {\n    ThirdPartyEventItemInput.builder().itemId(it.itemId).itemName(it.itemName).price(it.price).build()\n}\n--------------------------------------------------\ncurrentUser?.observable()?.map {\n    it.isPresent()\n}\n--------------------------------------------------\nmap(coalesceWithV2(getString(this.loginDoesNotMatchString)))\n--------------------------------------------------\nthis.viewModel.outputs.genericLoginError().map(coalesceWithV2(getString(this.unableToLoginString)))\n--------------------------------------------------\nmap(coalesceWithV2(getString(R.string.login_errors_unable_to_log_in)))\n--------------------------------------------------\nviewModel.outputs.tfaCodeMismatchError().map {\n    getString(R.string.two_factor_error_message)\n}\n--------------------------------------------------\nviewModel.outputs.genericTfaError().map {\n    getString(R.string.login_errors_unable_to_log_in)\n}\n--------------------------------------------------\nviewModel.outputs.deepLinkToThreadActivity().filter {\n    it.second == true\n}.map {\n    it.first\n}\n--------------------------------------------------\nObservable.from(cards).map {\n    Pair(it, project)\n}\n--------------------------------------------------\nObservable.from(rewards).map { reward ->\n    Pair.create(projectData, reward)\n}\n--------------------------------------------------\nObservable.from(rules).map { rule ->\n    Pair.create(rule, project)\n}\n--------------------------------------------------\nObservable.from(updates).map { update ->\n    Pair.create(project, update)\n}\n--------------------------------------------------\nprojectDataAndAddOnList.second.map {\n    Triple(projectData, it, selectedShippingRule)\n}\n--------------------------------------------------\naddOns.map {\n    Pair(project, it)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.fromUri(it)\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().category(it)\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().location(it)\n}\n--------------------------------------------------\nRxView.clicks(binding.enabledSwitch).map {\n    binding.enabledSwitch.isChecked\n}\n--------------------------------------------------\nmap {\n    context().getString(R.string.profile_settings_error)\n}\n--------------------------------------------------\nthis.category.map {\n    it.name()\n}\n--------------------------------------------------\nuserPrivacy.map {\n    it.chosenCurrency\n}\n--------------------------------------------------\nuserPrivacy.map {\n    it.email\n}\n--------------------------------------------------\nuserPrivacy.map {\n    it.hasPassword\n}\n--------------------------------------------------\nuserPrivacy.map {\n    showEmailErrorImage(it) ?: false\n}\n--------------------------------------------------\nmap<CurrencyCode> {\n    it.first\n}\n--------------------------------------------------\nmap {\n    it.updateUserProfile()?.user()?.chosenCurrency() ?: \"\"\n}\n--------------------------------------------------\nmap { obj: Activity ->\n    obj.project()\n}\n--------------------------------------------------\nmap { user: User ->\n    user.unseenActivityCount().intValueOrZero() + user.erroredBackingsCount().intValueOrZero()\n}\n--------------------------------------------------\ncurrentUser.isLoggedIn.map { loggedIn: Boolean ->\n    !loggedIn\n}\n--------------------------------------------------\nmap { ua: Pair<KsOptional<User>, List<Activity>> ->\n    ua.first != null && ua.second.isEmpty()\n}\n--------------------------------------------------\nthis.projectDataAndReward.map {\n    it.second\n}\n--------------------------------------------------\nthis.projectDataAndReward.map {\n    Pair(it.first.project(), it.second)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    buildCurrency(it.first, it.second)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first\n}.map {\n    it.currency() == it.currentCurrency()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    getCurrency(it)\n}\n--------------------------------------------------\nreward.filter {\n    RewardUtils.isReward(it)\n}.map {\n    it.description()\n}\n--------------------------------------------------\nmap {\n    if (it.isAddOn()) it.addOnsItems() else it.rewardsItems()\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isItemized(it)\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isItemized(it)\n}.map {\n    it.negate()\n}\n--------------------------------------------------\nreward.filter {\n    !it.isAddOn() && RewardUtils.isReward(it)\n}.map {\n    it.title()\n}\n--------------------------------------------------\nreward.map {\n    !it.isAddOn()\n}\n--------------------------------------------------\nmap { reward ->\n    parametersForTitle(reward)\n}\n--------------------------------------------------\nreward.filter {\n    !RewardUtils.isShippable(it)\n}.map {\n    RewardUtils.isLocalPickup(it)\n}\n--------------------------------------------------\nmap {\n    it.localReceiptLocation()?.displayableName()\n}\n--------------------------------------------------\narguments().map {\n    it.getParcelable(ArgumentsKey.PLEDGE_PLEDGE_DATA) as PledgeData?\n}\n--------------------------------------------------\narguments().map {\n    it.getSerializable(ArgumentsKey.PLEDGE_PLEDGE_REASON) as PledgeReason\n}\n--------------------------------------------------\npledgeData.map {\n    it.projectData()\n}\n--------------------------------------------------\nprojectData.map {\n    it.project()\n}\n--------------------------------------------------\npledgeData.map {\n    it.reward()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(getBackingFromProjectData(it))\n}\n--------------------------------------------------\nbacking.filter {\n    it.reward() != null\n}.map {\n    requireNotNull(it.reward())\n}\n--------------------------------------------------\nmap {\n    it.first.id() == it.second.id()\n}\n--------------------------------------------------\nmap {\n    it.first\n}\n--------------------------------------------------\nmap {\n    it.second.first { rule ->\n        rule.location()?.id() == it.first.locationId()\n    }\n}\n--------------------------------------------------\nmap {\n    it.addOns()?.toList()\n}\n--------------------------------------------------\nmap {\n    joinSelectedWithAvailableAddOns(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    filterOutUnAvailableOrEndedExceptIfBacked(it)\n}\n--------------------------------------------------\nmap {\n    it.shippingRules()\n}\n--------------------------------------------------\nthis.shippingRuleSelected.map {\n    it.location()\n}\n--------------------------------------------------\nfilteredAddOns.map {\n    it.second.isEmpty()\n}\n--------------------------------------------------\nmap { addOn ->\n    if (currentSelection.containsKey(addOn.id())) {\n        return@map addOn.toBuilder().quantity(currentSelection[addOn.id()]).build()\n    } else return@map addOn\n}\n--------------------------------------------------\nbackedList.map {\n    backedSelection.put(it.id(), it.quantity() ?: 0)\n}\n--------------------------------------------------\nmap { item ->\n    if (backedSelection.containsKey(item.key)) backedSelection[item.key] == item.value else false\n}\n--------------------------------------------------\nmap { item ->\n    if (!backedSelection.containsKey(item.key)) item.value > 0 else false\n}\n--------------------------------------------------\nmap { map: MutableMap<Long, Int> ->\n    var total = 0\n    list.map {\n        total += map[it.id()] ?: 0\n    }\n    return@map total\n}\n--------------------------------------------------\nlist.map {\n    total += map[it.id()] ?: 0\n}\n--------------------------------------------------\ngraphList.map { graphAddOn ->\n    modifyIfBacked(backingList, graphAddOn)\n}\n--------------------------------------------------\nthis.currentConfig.observable().map {\n    it.countryCode()\n}\n--------------------------------------------------\nmap { countryCode ->\n    shippingRules.firstOrNull {\n        it.location()?.country() == countryCode\n    } ?: shippingRules.first()\n}\n--------------------------------------------------\nreward.shippingRules()?.map {\n    it.location()?.id()\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.second\n}\n--------------------------------------------------\naddOn.map {\n    it.title()\n}\n--------------------------------------------------\naddOn.map {\n    it.description()\n}\n--------------------------------------------------\naddOn.map {\n    it.description()\n}.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\naddOn.map {\n    !RewardUtils.isItemized(it)\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    this.ksCurrency.format(it.second.minimum(), it.first.project())\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.format(it.second.convertedMinimum(), it.first.project())\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.first.project()\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.first.project()\n}.map {\n    it.currency() == it.currentCurrency()\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.format(it.second.convertedMinimum(), it.first.project(), true, RoundingMode.HALF_UP, true)\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    !it.second.limit().isNotNull()\n}\n--------------------------------------------------\naddOn.map {\n    !it.remaining().isNotNull()\n}\n--------------------------------------------------\naddOn.map {\n    it.limit().toString()\n}\n--------------------------------------------------\naddOn.filter {\n    it.remaining().isNotNull()\n}.map {\n    it.remaining().toString()\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.second.endsAt().isNotNull()\n}\n--------------------------------------------------\nprojectDataAndAddOn.map {\n    it.second.endsAt().isNotNull()\n}.map {\n    !it\n}\n--------------------------------------------------\naddOn.map {\n    it.shippingRules()?.isEmpty()\n}\n--------------------------------------------------\nmap {\n    getShippingCost(it.second.shippingRules(), it.first.project(), it.third)\n}\n--------------------------------------------------\naddOn.map {\n    it?.quantity() ?: 0\n}\n--------------------------------------------------\naddOn.map {\n    maximumLimit(it)\n}\n--------------------------------------------------\naddOn.map {\n    maximumLimit(it)\n}.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\naddOn.filter {\n    !RewardUtils.isShippable(it)\n}.map {\n    RewardUtils.isLocalPickup(it)\n}\n--------------------------------------------------\nmap { data ->\n    Pair(data.first, data.second.id())\n}\n--------------------------------------------------\nmap {\n    cost += it.cost()\n}\n--------------------------------------------------\nmap { projectData ->\n    joinProjectDataAndReward(projectData)\n}\n--------------------------------------------------\nthis.projectDataInput.map {\n    it.project()\n}\n--------------------------------------------------\nbacking.filter {\n    it.reward().isNotNull()\n}.map {\n    requireNotNull(it.reward())\n}\n--------------------------------------------------\nprojectDataAndReward.filter {\n    it.second.isNotNull()\n}.map {\n    requireNotNull(it.second)\n}\n--------------------------------------------------\nmap {\n    it.second.userIsCreator(it.first.getValue())\n}\n--------------------------------------------------\nbacking.filter {\n    it.backerName().isNotNull()\n}.map {\n    requireNotNull(it.backerName())\n}\n--------------------------------------------------\nbacking.filter {\n    it.backerUrl().isNotNull()\n}.map {\n    requireNotNull(it.backerUrl())\n}\n--------------------------------------------------\nbacking.map {\n    NumberUtils.format(it.sequence().toFloat())\n}\n--------------------------------------------------\nmap {\n    DateTimeUtils.longDate(requireNotNull(it.pledgedAt()))\n}\n--------------------------------------------------\nbacking.map {\n    it.amount() - it.shippingAmount() - it.bonusAmount()\n}\n--------------------------------------------------\nmap {\n    ProjectViewUtils.styleCurrency(it.first, it.second, this.ksCurrency)\n}\n--------------------------------------------------\nbacking.map {\n    shouldHideShipping(it)\n}\n--------------------------------------------------\nbacking.map {\n    it.reward().isNull()\n}\n--------------------------------------------------\nmap {\n    pledgeStatusData(it.first, it.second, it.third)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.shippingAmount())\n}\n--------------------------------------------------\nmap {\n    ProjectViewUtils.styleCurrency(it.first.toDouble(), it.second, this.ksCurrency)\n}\n--------------------------------------------------\nbacking.filter {\n    it.locationName().isNotNull()\n}.map {\n    requireNotNull(it.locationName())\n}\n--------------------------------------------------\nbacking.filter {\n    it.amount().isNotNull()\n}.map {\n    it.amount()\n}\n--------------------------------------------------\nbacking.map {\n    CreditCardPaymentType.safeValueOf(it.paymentSource()?.paymentType())\n}\n--------------------------------------------------\nmap {\n    it == CreditCardPaymentType.ANDROID_PAY || it == CreditCardPaymentType.APPLE_PAY || it == CreditCardPaymentType.CREDIT_CARD\n}\n--------------------------------------------------\nmap {\n    it.negate()\n}\n--------------------------------------------------\nbacking.filter {\n    it.paymentSource().isNotNull()\n}.map {\n    requireNotNull(it.paymentSource())\n}\n--------------------------------------------------\nmap { source ->\n    source.expirationDate()?.let {\n        simpleDateFormat.format(it)\n    } ?: \"\"\n}\n--------------------------------------------------\npaymentSource.map {\n    cardIssuer(it)\n}\n--------------------------------------------------\npaymentSource.map {\n    it.lastFour() ?: \"\"\n}\n--------------------------------------------------\npaymentSource.map {\n    cardLogo(it)\n}\n--------------------------------------------------\nbacking.map {\n    it.isErrored()\n}\n--------------------------------------------------\nbacking.map {\n    it.isErrored()\n}.distinctUntilChanged().map {\n    it.negate()\n}\n--------------------------------------------------\nbacking.map {\n    it.completedByBacker()\n}\n--------------------------------------------------\nthis.isExpanded.filter {\n    it\n}.compose(combineLatestPair(backing)).map {\n    it.second\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isReward(it) && it.estimatedDeliveryOn().isNotNull()\n}\n--------------------------------------------------\nbacking.map {\n    it.status()\n}\n--------------------------------------------------\nbacking.map {\n    it.status()\n}.map {\n    it == Backing.STATUS_COLLECTED\n}\n--------------------------------------------------\nmap {\n    it.first && it.second\n}\n--------------------------------------------------\nObservable.merge(refreshTimeout, backedProject.skip(1)).map {\n    false\n}\n--------------------------------------------------\nbacking.map {\n    it.addOns()?.toList() ?: emptyList()\n}\n--------------------------------------------------\nbacking.filter {\n    it.bonusAmount().isNotNull()\n}.map {\n    requireNotNull(it.bonusAmount())\n}\n--------------------------------------------------\nmap<DateTime> {\n    it.estimatedDeliveryOn()\n}\n--------------------------------------------------\nmap {\n    DateTimeUtils.estimatedDeliveryOn(it)\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra<Project>(IntentKey.PROJECT)\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra<Backing>(IntentKey.BACKING)\n}\n--------------------------------------------------\ncardAndProject.filter {\n    it.first.isNotNull()\n}.map {\n    it.first\n}\n--------------------------------------------------\ncard.filter {\n    it.expiration().isNotNull()\n}.map {\n    it.expiration()\n}\n--------------------------------------------------\nmap {\n    sdf.format(it).toString()\n}\n--------------------------------------------------\ncard.map {\n    it.expiration().isNull()\n}\n--------------------------------------------------\ncard.filter {\n    it.lastFourDigits().isNotNull()\n}.map {\n    requireNotNull(it.lastFourDigits())\n}\n--------------------------------------------------\ncard.filter {\n    it.isNotNull()\n}.map {\n    it.getCardTypeDrawable()\n}\n--------------------------------------------------\ncard.filter {\n    it.type().isNotNull()\n}.map {\n    it.type()\n}\n--------------------------------------------------\ncard.filter {\n    it.type().isNotNull()\n}.map {\n    it.type()\n}.map {\n    StoredCard.issuer(it)\n}\n--------------------------------------------------\nthis.cardAndProject.filter {\n    it.second.isNotNull()\n}.map {\n    it.second\n}\n--------------------------------------------------\nproject.filter {\n    it.backing().isNotNull()\n}.map {\n    it.backing()\n}\n--------------------------------------------------\nmap { backingAndCard ->\n    backingAndCard.first?.let { b ->\n        b.paymentSource()?.let {\n            it.id() == backingAndCard.second.id()\n        }\n    } ?: false\n}\n--------------------------------------------------\nmap {\n    it.first && it.second?.isErrored() ?: false\n}\n--------------------------------------------------\nmap {\n    it.getParcelable(ArgumentsKey.CANCEL_PLEDGE_PROJECT) as Project?\n}\n--------------------------------------------------\nmap {\n    Pair(this.ksCurrency.format(it.second.amount(), it.first, RoundingMode.HALF_UP), it.first.name())\n}\n--------------------------------------------------\nuserPrivacy.map {\n    getWarningText(it.isDeliverable, it.isEmailVerified)\n}\n--------------------------------------------------\nuserPrivacy.map {\n    getWarningTextColor(it.isDeliverable)\n}\n--------------------------------------------------\nuserPrivacy.map {\n    getVerificationText(it.isCreator)\n}\n--------------------------------------------------\nmap {\n    !it.first && it.second.isNotEmpty() && !it.second.isEmail()\n}\n--------------------------------------------------\nchangeEmail.map { ce ->\n    ce.isValid()\n}\n--------------------------------------------------\nmap {\n    analytics.reset()\n    mutableUIState.emit(UpdatePasswordUIState(isLoading = false, email = it.updateUserAccount()?.user()?.email() ?: \"\"))\n}\n--------------------------------------------------\nthis.commentInput.distinctUntilChanged().map {\n    it.comment\n}\n--------------------------------------------------\nmap {\n    val commentCardState = cardStatus(it.first, it.second.getValue())\n    it.first.toBuilder().commentCardState(commentCardState?.commentCardStatus ?: 0).build()\n}\n--------------------------------------------------\nmap {\n    Pair(requireNotNull(it.first), requireNotNull(it.first.project))\n}\n--------------------------------------------------\nmap {\n    it.first.assignAuthorBadge(it.second.getValue())\n}\n--------------------------------------------------\ncomment.map {\n    it.repliesCount()\n}\n--------------------------------------------------\ncomment.filter {\n    it.author()?.name().isNotNull()\n}.map {\n    it.author()?.name() ?: \"\"\n}\n--------------------------------------------------\nmap {\n    it.author()?.avatar()?.medium() ?: \"\"\n}\n--------------------------------------------------\ncomment.map {\n    it.body()\n}\n--------------------------------------------------\ncomment.map {\n    it.createdAt()\n}\n--------------------------------------------------\nmap {\n    Pair(requireNotNull(it.first.commentableId), requireNotNull(it.first?.comment))\n}\n--------------------------------------------------\nmap {\n    PostCommentData(commentableId = it.first, body = it.second.body(), clientMutationId = null, parent = it.second?.parentId()?.let { id ->\n        it.second.toBuilder().id(id).build()\n    })\n}\n--------------------------------------------------\npostCommentData.map {\n    executePostCommentMutation(it, errorObservable)\n}\n--------------------------------------------------\nthis.currentUserStream.loggedInUser().map {\n    currentUser = it\n    it\n}\n--------------------------------------------------\nmap<Any?> {\n    val projectData = it.getParcelableExtra(IntentKey.PROJECT_DATA) as? ProjectData\n    val update = it.getParcelableExtra(IntentKey.UPDATE) as? Update\n    projectData?.project()?.let {\n        Either.Left<Project?, Update?>(it)\n    } ?: Either.Right<Project?, Update?>(update)\n}\n--------------------------------------------------\nprojectOrUpdate.map {\n    it as? Either<Project?, Update?>\n}\n--------------------------------------------------\nmap {\n    Pair(it.second, it.first?.right())\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.getStringExtra(IntentKey.COMMENT))\n}\n--------------------------------------------------\nintent().map {\n    it.hasExtra(IntentKey.COMMENT)\n}\n--------------------------------------------------\nmap {\n    CommentCardData.builder().comment(it.first.first.first).project(this.project).commentCardState(it.first.first.first.cardStatus(it.second.getValue())).commentableId(it.first.second).build()\n}\n--------------------------------------------------\nmap {\n    Pair(it.first, buildCommentBody(Pair(it.second, it.first)))\n}\n--------------------------------------------------\nmap {\n    Pair(it.first.first, CommentCardData.builder().comment(it.first.first.second).project(it.first.second).commentableId(it.second).commentCardState(CommentCardStatus.TRYING_TO_POST.commentCardStatus).build())\n}\n--------------------------------------------------\nthis.commentToRefresh.map {\n    it.first\n}\n--------------------------------------------------\nthis.commentsList.map {\n    it.size\n}\n--------------------------------------------------\nmap {\n    val mappedList = it.second.first.updateCommentAfterSuccessfulPost(it.first, it.second.second)\n    updateNewlyPostedCommentWithNewStatus(mappedList[it.second.second])\n    mappedList\n}\n--------------------------------------------------\nmap {\n    val mappedList = it.second.first.updateCommentFailedToPost(it.first, it.second.second)\n    updateNewlyPostedCommentWithNewStatus(mappedList[it.second.second])\n    mappedList\n}\n--------------------------------------------------\nmap {\n    it.second.updateCanceledPledgeComment(it.first)\n}\n--------------------------------------------------\nmap {\n    if (this.newlyPostedCommentsList.isNotEmpty()) {\n        this.newlyPostedCommentsList + it\n    } else {\n        it\n    }\n}\n--------------------------------------------------\nthis.internalError.map {\n    Pair(it, commentsList.value)\n}\n--------------------------------------------------\nmap { comment: Comment ->\n    CommentCardData.builder().comment(comment).project(it.second).commentCardState(comment.cardStatus(currentUser)).commentableId(it.first.commentableId).build()\n}\n--------------------------------------------------\ncreateNewPasswordNotification.compose(errorsV2()).map {\n    it.localizedMessage\n}\n--------------------------------------------------\nmap {\n    it\n}\n--------------------------------------------------\nmap {\n    it.updateUserAccount()?.user()?.email()\n}\n--------------------------------------------------\nintent().map {\n    it.getStringExtra(IntentKey.URL)\n}\n--------------------------------------------------\nintent().map {\n    it.getParcelableExtra(IntentKey.PROJECT) as Project?\n}\n--------------------------------------------------\nmap {\n    Pair(requireNotNull(it.first.getValue()), it.second)\n}\n--------------------------------------------------\nmap {\n    userIsLoggedOutOrProjectCreator(it)\n}\n--------------------------------------------------\nintent().map { obj: Intent ->\n    obj.data\n}\n--------------------------------------------------\nuriFromEmailDomain.map {\n    Uri.parse(it.request.url.toString())\n}\n--------------------------------------------------\nmap {\n    Uri.parse(it.request.url.toString())\n}\n--------------------------------------------------\nmap {\n    ProjectIntentMapper.paramFromUri(it)\n}\n--------------------------------------------------\nmap {\n    it.value\n}\n--------------------------------------------------\nmap {\n    appendRefTagIfNone(it)\n}\n--------------------------------------------------\nuriFromIntent.filter {\n    it.isProjectSaveUri(webEndpoint)\n}.map {\n    appendRefTagIfNone(it)\n}\n--------------------------------------------------\nuriFromIntent.filter {\n    it.isProjectCommentUri(webEndpoint)\n}.map {\n    appendRefTagIfNone(it)\n}\n--------------------------------------------------\ncurrentUser.observable().filter {\n    it.isPresent()\n}.map {\n    it.getValue()\n}\n--------------------------------------------------\nuriFromIntent.filter {\n    it.isCheckoutUri(webEndpoint)\n}.map {\n    appendRefTagIfNone(it)\n}\n--------------------------------------------------\nObservable.merge(projectPreview, unsupportedDeepLink).map { obj: Uri ->\n    obj.toString()\n}\n--------------------------------------------------\nmap<Pair<Project, RefTag>> {\n    Pair.create(it, RefTag.activitySample())\n}\n--------------------------------------------------\nmap {\n    RefTagUtils.projectAndRefTagFromParamsAndProject(it.first, it.second)\n}\n--------------------------------------------------\nmap { defaultParamsAndEnabled: Pair<User, DiscoveryParams> ->\n    isDefaultParams(defaultParamsAndEnabled) && defaultParamsAndEnabled.second.tagId() == Editorial.LIGHTS_ON.tagId\n}\n--------------------------------------------------\nmap { shouldShow: Boolean ->\n    if (shouldShow) Editorial.LIGHTS_ON else null\n}\n--------------------------------------------------\nmap { pu: Pair<DiscoveryParams, Boolean> ->\n    isOnboardingVisible(pu.first, pu.second)\n}\n--------------------------------------------------\nparamsFromActivity.map { params: DiscoveryParams ->\n    isSavedVisible(params)\n}\n--------------------------------------------------\nmap {\n    it.first && it.second.isEmpty()\n}\n--------------------------------------------------\nshouldShowEmptySavedView.filter {\n    it.isTrue()\n}.map<Any?> {\n    null\n}\n--------------------------------------------------\nloggedInUserAndParams.filter {\n    !isDefaultParams(it)\n}.map {\n    null\n}\n--------------------------------------------------\nloggedOutUserOnHeartClick.map {\n    it\n}\n--------------------------------------------------\nmap {\n    it.second.updateStartedProjectAndDiscoveryParamsList(it.first)\n}\n--------------------------------------------------\nmap {\n    it.first.indexOfFirst { item ->\n        item.first.id() == it.second.id() && item.first.slug() == it.second.slug()\n    }\n}\n--------------------------------------------------\nmap {\n    it.activities()\n}\n--------------------------------------------------\nmap {\n    it.firstOrNull()\n}\n--------------------------------------------------\nmap {\n    it.me()?.email()\n}\n--------------------------------------------------\nintent().take(1).map {\n    it.action\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.getDefaultParams(it.second)\n}\n--------------------------------------------------\nintent().map {\n    it.data\n}\n--------------------------------------------------\nuriFromVerification.map {\n    it.getTokenFromQueryParams()\n}\n--------------------------------------------------\nverification.compose(Transformers.values()).map {\n    it.message()\n}\n--------------------------------------------------\nverification.compose(Transformers.errors()).map {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nmap {\n    it?.errorMessage()\n}\n--------------------------------------------------\npagerSelectedPage.map {\n    DiscoveryUtils.sortFromPosition(it)\n}\n--------------------------------------------------\nparams.map {\n    it.sort()\n}\n--------------------------------------------------\nsortClicked.map {\n    DiscoveryUtils.sortFromPosition(it)\n}\n--------------------------------------------------\nmap<Pair<DiscoveryParams.Sort, DiscoveryParams>> {\n    Pair.create(it.first.sort(), it.first.toBuilder().sort(it.second).build())\n}\n--------------------------------------------------\nparentFilterRowClick.map {\n    it.params().category()\n}\n--------------------------------------------------\ntopFilterRowClick.map {\n    null\n}\n--------------------------------------------------\nmap { sort: DiscoveryParams.Sort? ->\n    sort.positionFromSort()\n}\n--------------------------------------------------\nupdateParamsForPage.map {\n    true\n}\n--------------------------------------------------\nchildFilterRowClick.map {\n    false\n}\n--------------------------------------------------\ntopFilterRowClick.map {\n    false\n}\n--------------------------------------------------\ninternalToolsClick.map {\n    false\n}\n--------------------------------------------------\nloggedOutLoginToutClick.map {\n    false\n}\n--------------------------------------------------\nloggedOutHelpClick.map {\n    false\n}\n--------------------------------------------------\nactivityFeedClick.map {\n    false\n}\n--------------------------------------------------\nmessagesClick.map {\n    false\n}\n--------------------------------------------------\nprofileClick.map {\n    false\n}\n--------------------------------------------------\nsettingsClick.map {\n    false\n}\n--------------------------------------------------\ncurrentUser.map {\n    currentDrawerMenuIcon(it)\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.backgroundColor\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.ctaTitle\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.ctaDescription\n}\n--------------------------------------------------\nthis.editorialInput.map {\n    it.graphic\n}\n--------------------------------------------------\nintent().map {\n    it.getSerializableExtra(IntentKey.EDITORIAL)\n}\n--------------------------------------------------\nmap {\n    it.filter { category ->\n        category.isRoot\n    }\n}\n--------------------------------------------------\nmap {\n    it.sorted()\n}\n--------------------------------------------------\neditorial.map {\n    it.tagId\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().sort(DiscoveryParams.Sort.MAGIC).tagId(it).build()\n}\n--------------------------------------------------\neditorial.map {\n    it.graphic\n}\n--------------------------------------------------\neditorial.map {\n    it.title\n}\n--------------------------------------------------\neditorial.map {\n    it.description\n}\n--------------------------------------------------\ncurrentUser.filter {\n    it.isPresent()\n}.map {\n    requireNotNull(it.getValue())\n}\n--------------------------------------------------\nmap<User> {\n    ListUtils.first(it)\n}\n--------------------------------------------------\nmap { user ->\n    user.createdProjectsCount().isNonZero()\n}\n--------------------------------------------------\nmap {\n    it.avatar().medium()\n}\n--------------------------------------------------\nmap {\n    it.name()\n}\n--------------------------------------------------\nthis.projectEnvironmentalCommitmentInput.map {\n    it.description\n}\n--------------------------------------------------\nmap {\n    EnvironmentalCommitmentCategories.values().firstOrNull { environmentalCommitmentCategory ->\n        environmentalCommitmentCategory.name == it.category\n    }?.title\n}\n--------------------------------------------------\nthis.erroredBacking.map {\n    it.project()\n}\n--------------------------------------------------\nproject.map {\n    it.name()\n}\n--------------------------------------------------\nproject.map {\n    it.finalCollectionDate()\n}\n--------------------------------------------------\nproject.map {\n    it.slug()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.second\n}\n--------------------------------------------------\nmap {\n    it.quantity().toString() + \" X \" + it.title()\n}\n--------------------------------------------------\nreward.filter {\n    !it.isAddOn()\n}.map {\n    it.title() ?: \"\"\n}\n--------------------------------------------------\nprojectAndReward.map {\n    this.ksCurrency.format(it.second.minimum(), it.first)\n}\n--------------------------------------------------\nprojectFaqInput.map {\n    it.question\n}\n--------------------------------------------------\nprojectFaqInput.map {\n    it.answer\n}\n--------------------------------------------------\nmap {\n    it.createdAt?.let { createdAt ->\n        DateTimeUtils.longDate(createdAt)\n    }\n}\n--------------------------------------------------\nthis.user.map {\n    it.name()\n}\n--------------------------------------------------\nthis.user.map {\n    it.avatar().medium()\n}\n--------------------------------------------------\nthis.user.map {\n    it.unreadMessagesCount()\n}\n--------------------------------------------------\nmap {\n    it.unseenActivityCount().intValueOrZero() + it.erroredBackingsCount().intValueOrZero()\n}\n--------------------------------------------------\nthis.user.map {\n    it.erroredBackingsCount().intValueOrZero().isZero()\n}\n--------------------------------------------------\nmap {\n    if (it.isTrue()) R.color.text_primary else R.color.kds_alert\n}\n--------------------------------------------------\nthis.user.map {\n    it.memberProjectsCount().intValueOrZero().isZero()\n}\n--------------------------------------------------\nmap {\n    it.localizedMessage\n}\n--------------------------------------------------\nloginError.filter(ErrorEnvelope::isFacebookInvalidAccessTokenError).map {\n    it.errorMessage()\n}\n--------------------------------------------------\nloginError.filter(ErrorEnvelope::isMissingFacebookEmailError).map {\n    it.errorMessage()\n}\n--------------------------------------------------\nloginError.filter(ErrorEnvelope::isUnauthorizedError).map {\n    it.errorMessage()\n}\n--------------------------------------------------\nloginError.filter(ErrorEnvelope::isTfaRequiredError).map {}\n--------------------------------------------------\nmap {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nmap {\n    it.facebookUser()\n}\n--------------------------------------------------\ninternalIntent.filter {\n    it.hasExtra(IntentKey.EMAIL)\n}.map {\n    extractFromIntent(it)\n}\n--------------------------------------------------\nemailAndReason.map {\n    it.first\n}\n--------------------------------------------------\nmap { e ->\n    Pair.create(true, e)\n}\n--------------------------------------------------\nemailAndReason.map {\n    it.second\n}\n--------------------------------------------------\nthis.resetPasswordConfirmationDialogDismissed.map<Boolean> {\n    it.negate()\n}\n--------------------------------------------------\nmap {\n    Pair.create(it.first, it.second)\n}\n--------------------------------------------------\nerrors.map {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nthis.loginError.filter {\n    it.isGenericLoginError\n}.map {\n    it.errorMessage()\n}\n--------------------------------------------------\nthis.loginError.filter {\n    it.isInvalidLoginError\n}.map {\n    it.errorMessage()\n}\n--------------------------------------------------\nthis.loginError.filter {\n    it.isTfaRequiredError\n}.map {}\n--------------------------------------------------\nmap {\n    requireNotNull(getProjectFromIntent(it))\n}\n--------------------------------------------------\nproject.filter {\n    it.creator().name().isNotNull()\n}.map {\n    it.creator().name()\n}\n--------------------------------------------------\nthis.messageBodyChanged.map {\n    it.isPresent()\n}\n--------------------------------------------------\nmap {\n    R.string.social_error_could_not_send_message_backer\n}\n--------------------------------------------------\nfetchThreadNotification.compose(errorsV2()).map {\n    R.string.Your_message_has_been_sent\n}\n--------------------------------------------------\nmap {\n    it.messageThread()\n}\n--------------------------------------------------\nmap { mu: Pair<Message, User> ->\n    Pair.create(mu.first, mu.first.sender().id() == mu.second.id())\n}\n--------------------------------------------------\nmessageAndCurrentUserIsSender.map {\n    PairUtils.second(it)\n}\n--------------------------------------------------\nmessageAndCurrentUserIsSender.filter {\n    !it.second\n}.map {\n    it.first.body()\n}\n--------------------------------------------------\nmessageBodyRecipientCardViewIsGone.map {\n    it.negate()\n}\n--------------------------------------------------\nmessageAndCurrentUserIsSender.filter {\n    it.second\n}.map {\n    it.first.body()\n}\n--------------------------------------------------\nmap {\n    !it.first || it.second\n}\n--------------------------------------------------\nmap {\n    it.first.sender().avatar().medium()\n}\n--------------------------------------------------\nmap {\n    Pair.create(it.value, data.project)\n}\n--------------------------------------------------\nmap { i: Intent ->\n    val messageThread = i.getParcelableExtra<MessageThread>(IntentKey.MESSAGE_THREAD)\n    messageThread?.let {\n        Left(it)\n    } ?: Right<MessageThread, Pair<Project?, Backing?>>(Pair.create(i.getParcelableExtra(IntentKey.PROJECT), i.getParcelableExtra(IntentKey.BACKING)))\n}\n--------------------------------------------------\nintent().map {\n    it.getSerializableExtra(IntentKey.MESSAGE_SCREEN_SOURCE_CONTEXT)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.right())\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.second)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.left())\n}\n--------------------------------------------------\nconfigBacking.filter {\n    it.isNotNull()\n}.map {\n    Left(it)\n}\n--------------------------------------------------\nconfigThread.filter {\n    it.isNotNull()\n}.map {\n    Right(it)\n}\n--------------------------------------------------\nmap { data: Either<MessageThread, Pair<Project?, Backing?>> ->\n    data.either({ obj: MessageThread ->\n        obj.project()\n    }) { projectAndBacking: Pair<Project?, Backing?> ->\n        projectAndBacking.first\n    }\n}\n--------------------------------------------------\nmessagesAreLoading.map {\n    it.negate()\n}\n--------------------------------------------------\ninitialMessageThreadEnvelope.map {\n    it.messageThread() ?: MessageThread.builder().build()\n}\n--------------------------------------------------\nmap {\n    if (it.first != null && it.first.participant() != null) it.first?.participant() else it.second?.creator()\n}\n--------------------------------------------------\nparticipant.map {\n    it.name()\n}\n--------------------------------------------------\nmap { (backingOrThread1, project1, _, currentUser1): MessagesData ->\n    backingOrThread1.either({ backing: Backing ->\n        if (backing.backerId() == currentUser1.id()) MessageSubject.Project(project1) else MessageSubject.Backing(backing)\n    }) { messageThread: MessageThread ->\n        MessageSubject.MessageThread(messageThread)\n    }\n}\n--------------------------------------------------\nmessageEditTextChanged.map {\n    it.isNotNull() && it.isPresent()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.messageThread())\n}\n--------------------------------------------------\nmap {\n    it.messages()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.messages())\n}\n--------------------------------------------------\nmap {\n    val messagesList = it.first\n    val message = it.second?.toList()\n    messagesList?.let { initialMessages ->\n        message?.let { m ->\n            ListUtils.concatDistinct(initialMessages, m)\n        }\n    } ?: it.second\n}\n--------------------------------------------------\ninitialMessageThreadEnvelope.filter {\n    it.messages().isNotNull()\n}.map {\n    it.messages()\n}\n--------------------------------------------------\nmap { c: MessagePreviousScreenType ->\n    c == MessagePreviousScreenType.BACKER_MODAL\n}\n--------------------------------------------------\nviewPledgeButtonIsGone.map {\n    it.negate()\n}\n--------------------------------------------------\nbackButtonIsGone.map {\n    it.negate()\n}\n--------------------------------------------------\nmessageIsSending.map {\n    it.negate()\n}\n--------------------------------------------------\nmessageSent.map {\n    \"\"\n}\n--------------------------------------------------\nmessageList.map {\n    it\n}\n--------------------------------------------------\nmap {\n    it.second\n}\n--------------------------------------------------\nmessageNotification.compose(Transformers.errorsV2()).map {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nmap {\n    projectAndBacker(it)\n}\n--------------------------------------------------\nthis.backingAndProject.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap {\n    BackingWrapper(requireNotNull(it.second.first), it.first.second, it.first.first)\n}\n--------------------------------------------------\nmessageThread.map { thread: MessageThread ->\n    hasUnreadMessages(thread, sharedPreferences)\n}\n--------------------------------------------------\nmessageThreadCardViewClicked.map {\n    false\n}\n--------------------------------------------------\nmessageThread.map {\n    it.lastMessage()\n}\n--------------------------------------------------\nmessageThread.map {\n    it.participant()\n}\n--------------------------------------------------\nlastMessage.map {\n    it.createdAt()\n}\n--------------------------------------------------\nlastMessage.map {\n    it.body()\n}\n--------------------------------------------------\nparticipant.map {\n    it.avatar().medium()\n}\n--------------------------------------------------\nhasUnreadMessages.map {\n    it.negate()\n}\n--------------------------------------------------\nmessageThread.map {\n    it.unreadMessagesCount()\n}\n--------------------------------------------------\nmessageThread.map {\n    it.unreadMessagesCount()\n}.map {\n    NumberUtils.format(it)\n}\n--------------------------------------------------\nintent().map { i: Intent ->\n    i.getParcelableExtra<Project>(IntentKey.PROJECT)\n}\n--------------------------------------------------\ninitialProject.compose(Transformers.takeWhen(refreshUserOrProject)).map {\n    it?.param()\n}\n--------------------------------------------------\nmap {\n    if (it.first != null) it.first?.unreadMessagesCount() else it.second.unreadMessagesCount()\n}\n--------------------------------------------------\nmailbox.map {\n    getStringResForMailbox(it)\n}\n--------------------------------------------------\nmap {\n    PairUtils.first(it)\n}\n--------------------------------------------------\nunreadMessagesCount.map {\n    it.isZero()\n}\n--------------------------------------------------\nunreadMessagesCount.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap {\n    if (it.intValueOrZero() > 0) R.color.accent else R.color.kds_support_400\n}\n--------------------------------------------------\nmap {\n    if (it.intValueOrZero() > 0) Typeface.BOLD else Typeface.NORMAL\n}\n--------------------------------------------------\nmap { noMessagesAndNoUnread: Pair<Boolean, Boolean> ->\n    noMessagesAndNoUnread.first || noMessagesAndNoUnread.second\n}\n--------------------------------------------------\nmap { noMessagesAndMailbox: Pair<Boolean, Mailbox> ->\n    noMessagesAndMailbox.first || noMessagesAndMailbox.second == Mailbox.SENT\n}\n--------------------------------------------------\nmailbox.map { m: Mailbox ->\n    m == Mailbox.SENT\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.getValue())\n}\n--------------------------------------------------\nmap { us ->\n    us.second.second\n}\n--------------------------------------------------\ncurrentUser.map {\n    isSubscribedToAllNewsletters(it)\n}\n--------------------------------------------------\nthis.unableToSavePreferenceError.takeUntil(this.updateSuccess).map { _ ->\n    null\n}\n--------------------------------------------------\nthis.currentUser.observable().filter {\n    it.getValue().isNotNull()\n}.map {\n    it.getValue()!!\n}\n--------------------------------------------------\nObservable.merge(currentUser, this.userInput).map {\n    !it.notifyOfBackings()\n}\n--------------------------------------------------\ncurrentUser.map {\n    (it.createdProjectsCount()).isZero()\n}\n--------------------------------------------------\nmap {\n    it.first()\n}\n--------------------------------------------------\nmap {\n    it.message ?: \"Unable to save preference\"\n}\n--------------------------------------------------\nthis.card.map {\n    it.expiration()\n}\n--------------------------------------------------\nthis.card.map {\n    it.id()\n}\n--------------------------------------------------\nthis.card.map {\n    it.lastFourDigits()\n}\n--------------------------------------------------\nthis.card.map {\n    it.getCardTypeDrawable()\n}\n--------------------------------------------------\nthis.card.map {\n    it.type()\n}\n--------------------------------------------------\nthis.card.map {\n    it.type()\n}.filter {\n    it.isNotNull()\n}.map {\n    StoredCard.issuer(it)\n}\n--------------------------------------------------\nthis.cards.map {\n    it.isNotEmpty()\n}\n--------------------------------------------------\nmap {\n    it.paymentSourceDelete()?.clientMutationId() ?: \"\"\n}\n--------------------------------------------------\nmap {\n    SavePaymentMethodData(reusable = true, intentClientSecret = it)\n}\n--------------------------------------------------\npledgeReason.map {\n    it == PledgeReason.UPDATE_PAYMENT || it == PledgeReason.FIX_PLEDGE\n}\n--------------------------------------------------\nmap {\n    it == PledgeReason.UPDATE_PAYMENT || it == PledgeReason.UPDATE_PLEDGE || it == PledgeReason.FIX_PLEDGE\n}\n--------------------------------------------------\npledgeData.map {\n    if (it.addOns().isNullOrEmpty()) emptyList() else it.addOns() as List<Reward>\n}\n--------------------------------------------------\nmap {\n    it.first.backing() ?: it.first.project().backing()\n}\n--------------------------------------------------\nbacking.map {\n    it.locationId() == null\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.first.locationId())\n}\n--------------------------------------------------\nmap { shippingInfo ->\n    selectedShippingRule(shippingInfo)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.shippingRule())\n}\n--------------------------------------------------\npledgeData.map {\n    it.shippingRule() == null && RewardUtils.isShippable(it.reward())\n}\n--------------------------------------------------\npreSelectedShippingRule.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nbacking.map {\n    if (it.addOns().isNullOrEmpty()) emptyList() else requireNotNull(it.addOns())\n}\n--------------------------------------------------\nbacking.filter {\n    it.bonusAmount().isNotNull()\n}.map {\n    it.bonusAmount()\n}\n--------------------------------------------------\nmap {\n    joinRewardAndAddOns(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    getPledgeAmount(it)\n}\n--------------------------------------------------\nproject.map {\n    Country.findByCurrencyCode(it.currency())\n}\n--------------------------------------------------\ncountry.map {\n    it.minPledge.toDouble()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    rewardTitle(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    RewardUtils.isLocalPickup(it)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.estimatedDeliveryOn())\n}\n--------------------------------------------------\nmap { dateTime ->\n    dateTime.let {\n        DateTimeUtils.estimatedDeliveryOn(it)\n    }\n}\n--------------------------------------------------\nthis.selectedReward.map {\n    it.estimatedDeliveryOn().isNull() || RewardUtils.isNoReward(it)\n}\n--------------------------------------------------\nthis.selectedReward.filter {\n    !RewardUtils.isNoReward(it)\n}.map {\n    it.minimum()\n}\n--------------------------------------------------\nrewardMinimum.map {\n    NumberUtils.format(it.toInt())\n}\n--------------------------------------------------\nmap {\n    joinProject(it)\n}\n--------------------------------------------------\nproject.map {\n    ProjectViewUtils.currencySymbolAndPosition(it, this.ksCurrency)\n}\n--------------------------------------------------\nadditionalPledgeAmount.map {\n    max(0.0, it)\n}\n--------------------------------------------------\ncountry.map {\n    it.minPledge\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.format(it.first, it.second, RoundingMode.HALF_UP)\n}\n--------------------------------------------------\nadditionalAmountOrZero.map {\n    it <= 0.0\n}\n--------------------------------------------------\nbacking.filter {\n    it.reward() == null\n}.map {\n    it.bonusAmount()\n}\n--------------------------------------------------\nmap {\n    it.amount() - it.shippingAmount() - it.bonusAmount()\n}\n--------------------------------------------------\nthis.pledgeInput.map {\n    it.parseToDouble()\n}\n--------------------------------------------------\nmap {\n    it + this.stepperAmount\n}\n--------------------------------------------------\nmap {\n    it.toString()\n}\n--------------------------------------------------\nmap {\n    it - this.stepperAmount\n}\n--------------------------------------------------\nmap {\n    it.first - it.second\n}\n--------------------------------------------------\nmap {\n    max(it.first, it.second) > it.second\n}\n--------------------------------------------------\nmap {\n    val formatter = NumberFormat.getNumberInstance()\n    formatter.maximumFractionDigits = 2\n    formatter.format(it)\n}\n--------------------------------------------------\nthis.bonusInput.map {\n    it.parseToDouble()\n}\n--------------------------------------------------\nbonusMinimum.map {\n    NumberUtils.format(it.toInt())\n}\n--------------------------------------------------\nmap {\n    it.first + it.second\n}\n--------------------------------------------------\nbacking.map {\n    it.shippingAmount()\n}\n--------------------------------------------------\nmap {\n    if (it.second.isNotEmpty()) it.second.parseToDouble() else it.first.minimum()\n}\n--------------------------------------------------\nmap {\n    Pair(this.ksCurrency.format(it.first, it.second, RoundingMode.HALF_UP), it.second)\n}\n--------------------------------------------------\nmap { totalAndProject ->\n    totalAndProject.second.deadline()?.let {\n        Pair(totalAndProject.first, DateTimeUtils.longDate(it))\n    }\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.formatWithUserPreference(it.first, it.second, RoundingMode.UP, 2)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first.currency() != it.first.currentCurrency()\n}\n--------------------------------------------------\ncountry.map {\n    it.maxPledge.toDouble()\n}\n--------------------------------------------------\nmap {\n    if (RewardUtils.isNoReward(it.second)) it.first.first else it.first.first - it.first.second\n}\n--------------------------------------------------\nmap {\n    it.first >= it.second\n}\n--------------------------------------------------\nmap {\n    it.first in it.second.first..it.second.second\n}\n--------------------------------------------------\nmap {\n    if (it) R.color.kds_create_700 else R.color.kds_alert\n}\n--------------------------------------------------\nstepAmount.map {\n    it.toDouble()\n}\n--------------------------------------------------\nmap {\n    it.second.second - it.first >= it.second.first\n}\n--------------------------------------------------\nbacking.map {\n    it.shippingAmount().toDouble()\n}\n--------------------------------------------------\nbacking.map {\n    it.bonusAmount()\n}\n--------------------------------------------------\nthis.shippingRule.map {\n    it.location()?.displayableName()\n}\n--------------------------------------------------\npledgeReason.map {\n    it == PledgeReason.UPDATE_PLEDGE\n}\n--------------------------------------------------\nmap {\n    it.first != it.second.amount()\n}\n--------------------------------------------------\nmap {\n    it.first != it.second\n}\n--------------------------------------------------\npledgeReason.map {\n    it == PledgeReason.UPDATE_PLEDGE || it == PledgeReason.UPDATE_REWARD\n}\n--------------------------------------------------\nmap {\n    it.first || !it.second\n}\n--------------------------------------------------\nuserIsLoggedIn.map {\n    it.negate()\n}\n--------------------------------------------------\ncardsAndProject.take(1).map {\n    initialCardSelection(it.first, it.second)\n}\n--------------------------------------------------\nselectedCardAndPosition.map {\n    it.second\n}\n--------------------------------------------------\nselectedCardAndPosition.map {\n    it.second >= 0\n}\n--------------------------------------------------\nmap {\n    it.second >= 0\n}\n--------------------------------------------------\nmap { p ->\n    RefTagUtils.storedCookieRefTagForProject(p, cookieManager, sharedPreferences) ?: RefTag.Builder().build()\n}\n--------------------------------------------------\nshippingRule.filter {\n    it.location() != null\n}.map {\n    it.location()\n}\n--------------------------------------------------\nmap {\n    it.id() ?: -1L\n}\n--------------------------------------------------\nproject.filter {\n    it.isBacking()\n}.map {\n    it.backing()\n}\n--------------------------------------------------\nselectedCardAndPosition.map {\n    it.first\n}\n--------------------------------------------------\nrewardAndAddOns.map {\n    extendAddOns(it)\n}\n--------------------------------------------------\ntotal.map {\n    it.toString()\n}\n--------------------------------------------------\nsuccessfulCheckout.filter {\n    it.backing().isNotNull()\n}.map {\n    it.backing()\n}\n--------------------------------------------------\nmap {\n    it.backing()\n}\n--------------------------------------------------\nmap {\n    it.clientSecret()\n}\n--------------------------------------------------\npledgeReason.map {\n    if (it == PledgeReason.PLEDGE) R.string.Pledge else R.string.Confirm\n}\n--------------------------------------------------\nmap { rw ->\n    rw.shippingRules()?.filter { rule ->\n        rule.location()?.id() == selectedRule.location()?.id()\n    }?.map { rule ->\n        shippingCost += rule.cost() * (rw.quantity() ?: 1)\n    }\n}\n--------------------------------------------------\nmap { rule ->\n    shippingCost += rule.cost() * (rw.quantity() ?: 1)\n}\n--------------------------------------------------\nmap {\n    if (!it.isAddOn()) mutableList.add(it) else {\n        val q = it.quantity() ?: 1\n        for (i in 1..q) {\n            mutableList.add(it)\n        }\n    }\n}\n--------------------------------------------------\nitems?.first?.map {\n    Pair(items.second, it)\n}\n--------------------------------------------------\nloggedInUser.map { u ->\n    u.avatar().medium()\n}\n--------------------------------------------------\nloggedInUser.map { u ->\n    u.backedProjectsCount().isZero()\n}\n--------------------------------------------------\nloggedInUser.map<Int> {\n    it.backedProjectsCount()\n}\n--------------------------------------------------\nmap {\n    NumberUtils.format(it)\n}\n--------------------------------------------------\nloggedInUser.map { u ->\n    u.createdProjectsCount().isZero()\n}\n--------------------------------------------------\nloggedInUser.map<Int> {\n    it.createdProjectsCount()\n}\n--------------------------------------------------\nmap { p ->\n    p.first || p.second\n}\n--------------------------------------------------\nloggedInUser.map {\n    it.name()\n}\n--------------------------------------------------\nprojectNotification.map {\n    it.project().name()\n}\n--------------------------------------------------\nprojectNotification.map {\n    it.email() && it.mobile()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.project().projectFaqs())\n}\n--------------------------------------------------\nprojectDataInput.map {\n    it.project()\n}\n--------------------------------------------------\nmap {\n    userIsLoggedOutOrProjectCreator(Pair(it.first.getValue(), it.second))\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.story())\n}\n--------------------------------------------------\nmap {\n    htmlParser.parse(it)\n}\n--------------------------------------------------\nproject.map { pj ->\n    pj.envCommitments()?.sortedBy {\n        it.id\n    }\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.project())\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.creator().avatar().medium())\n}\n--------------------------------------------------\nproject.map {\n    NumberUtils.format(it.backersCount())\n}\n--------------------------------------------------\nproject.map {\n    it.blurb()\n}\n--------------------------------------------------\nproject.filter {\n    it.category().isNotNull()\n}.map {\n    it.category()\n}\n--------------------------------------------------\nmap {\n    it?.name() ?: \"\"\n}\n--------------------------------------------------\nproject.filter {\n    it.commentsCount().isNotNull()\n}.map {\n    requireNotNull(it.commentsCount())\n}\n--------------------------------------------------\nproject.map {\n    it.currency() != it.currentCurrency()\n}\n--------------------------------------------------\nproject.map {\n    it.currency() != it.currentCurrency()\n}.map {\n    it.negate()\n}\n--------------------------------------------------\nmap { proj ->\n    val pledged = ksCurrency.format(proj.pledged(), proj)\n    val goal = ksCurrency.format(proj.goal(), proj)\n    Pair.create(pledged, goal)\n}\n--------------------------------------------------\nproject.map {\n    it.creator().name()\n}\n--------------------------------------------------\nproject.take(1).distinctUntilChanged().map {\n    it.slug()\n}\n--------------------------------------------------\ncreatorDetailsNotification.compose(Transformers.errorsV2()).map { _ ->\n    true\n}\n--------------------------------------------------\nproject.map { proj ->\n    proj.deadlineCountdownValue()\n}\n--------------------------------------------------\nproject.map { proj ->\n    proj.deadlineCountdownValue()\n}.map {\n    NumberUtils.format(it)\n}\n--------------------------------------------------\nproject.map { p: Project ->\n    ksCurrency.formatWithUserPreference(p.goal(), p)\n}\n--------------------------------------------------\nproject.filter {\n    it.location().isNotNull()\n}.map {\n    it.location()\n}\n--------------------------------------------------\nmap {\n    it?.displayableName() ?: \"\"\n}\n--------------------------------------------------\nproject.map {\n    it.percentageFunded()\n}\n--------------------------------------------------\nproject.map {\n    it.percentageFunded()\n}.map {\n    ProgressBarUtils.progress(it)\n}\n--------------------------------------------------\nproject.map { p: Project ->\n    p.isSuccessful || p.isCanceled || p.isFailed || p.isSuspended\n}\n--------------------------------------------------\nproject.map { p: Project ->\n    ksCurrency.formatWithUserPreference(p.pledged(), p)\n}\n--------------------------------------------------\nproject.map {\n    it.creator()\n}\n--------------------------------------------------\nmap { creatorAndCurrentUser: Pair<User, KsOptional<User>> ->\n    creatorAndCurrentUser.second.isNotNull() && creatorAndCurrentUser.first.id() == creatorAndCurrentUser.second?.getValue()?.id()\n}\n--------------------------------------------------\nproject.filter { obj: Project ->\n    obj.isFunded\n}.map { obj: Project ->\n    obj.deadline()\n}\n--------------------------------------------------\nmap { p: Project ->\n    Pair.create(ksCurrency.format(p.goal(), p), p.deadline())\n}\n--------------------------------------------------\nproject.map { p: Project ->\n    p.deadline() == null || !p.isLive\n}\n--------------------------------------------------\nproject.filter {\n    it.launchedAt().isNotNull()\n}.map {\n    requireNotNull(it.launchedAt())\n}\n--------------------------------------------------\nmap {\n    DateTimeUtils.longDate(it)\n}\n--------------------------------------------------\nmap { launchDateAndIsCreator: Pair<Project, Boolean> ->\n    launchDateAndIsCreator.first.launchedAt().isNotNull() && launchDateAndIsCreator.second.isTrue()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.friends())\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.first())\n}\n--------------------------------------------------\nproject.map {\n    it.isFriendBacking\n}\n--------------------------------------------------\nproject.map {\n    it.isFriendBacking\n}.map {\n    it.negate()\n}\n--------------------------------------------------\nmap { p: Project ->\n    if (p.state() == Project.STATE_SUCCESSFUL) R.color.green_alpha_50 else R.color.kds_support_300\n}\n--------------------------------------------------\nproject.map {\n    it.isLive\n}\n--------------------------------------------------\nproject.filter {\n    it.isFriendBacking\n}.map {\n    it.friends()\n}\n--------------------------------------------------\nproject.filter {\n    it.isSuccessful\n}.map {\n    it.stateChangedAt() ?: DateTime()\n}\n--------------------------------------------------\nproject.filter {\n    it.isFailed\n}.map {\n    it.stateChangedAt() ?: DateTime()\n}\n--------------------------------------------------\nproject.filter {\n    it.updatesCount().isNotNull()\n}.map {\n    requireNotNull(it.updatesCount())\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(creatorInfoClicked)).map {\n    it.first\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(commentsClicked)).map {\n    it.first\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(updatesClicked)).map {\n    it.first\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(reportProjectButtonClicked)).map {\n    it.first\n}\n--------------------------------------------------\nproject.map {\n    it.isFlagged() ?: false\n}\n--------------------------------------------------\nmap { pair ->\n    val isFlagged = pair.first\n    val shouldRefresh = pair.second\n    if (shouldRefresh.isNotEmpty()) {\n        true\n    } else isFlagged\n}\n--------------------------------------------------\nshouldShowProjectFlagged.map {\n    !it\n}\n--------------------------------------------------\nmap {\n    if (it.contains(OUR_RULES_TAG)) \"${environment.webEndpoint()}$OUR_RULES\" else if (it.contains(COMMUNITY_GUIDELINES_TAG)) \"${environment.webEndpoint()}$COMMUNITY_GUIDELINES\" else \"\"\n}\n--------------------------------------------------\nprojectData.compose(Transformers.takePairWhenV2(campaignClicked)).map {\n    it.first\n}\n--------------------------------------------------\nprojectDataInput.filter {\n    it.project().isNotNull()\n}.map {\n    requireNotNull(it.project())\n}\n--------------------------------------------------\nproject.filter {\n    it.risks().isNotNull()\n}.map {\n    requireNotNull(it.risks())\n}\n--------------------------------------------------\nintent().map<Any> {\n    it.getParcelableExtra(IntentKey.PROJECT)\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra(IntentKey.PROJECT_DATA) as? ProjectData?\n}\n--------------------------------------------------\nprojectData.filter {\n    it.project().isNotNull()\n}.map {\n    it.project()\n}\n--------------------------------------------------\nprojectData.map {\n    it.storeCurrentCookieRefTag(cookieManager, sharedPreferences)\n}\n--------------------------------------------------\npagination.paginatedData()?.share()?.filter {\n    it.isNotNull()\n}?.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nObservable.just(this.arguments).filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\narguments().map {\n    it.getParcelable(IntentKey.PROJECT) as Project?\n}\n--------------------------------------------------\nproject.map {\n    it.webProjectUrl()\n}\n--------------------------------------------------\napolloClient.userPrivacy().filter {\n    it.isNotNull()\n}.map {\n    it.email ?: \"email@email.com\"\n}\n--------------------------------------------------\nmap {\n    when(it) {\n        PROHIBITED_ITEMS_TAG -> \"${environment.webEndpoint()}$PROHIBITED_ITEMS\"\n        COMMUNITY_GUIDELINES_TAG -> \"${environment.webEndpoint()}$COMMUNITY_GUIDELINES\"\n        else -> \"\"\n    }\n}\n--------------------------------------------------\nintent.filter {\n    it.hasExtra(IntentKey.EMAIL)\n}.map {\n    it.getStringExtra(IntentKey.EMAIL)\n}\n--------------------------------------------------\nmap {\n    it.getBooleanExtra(IntentKey.RESET_PASSWORD_FACEBOOK_LOGIN, false)\n}\n--------------------------------------------------\nthis.email.map {\n    it.isEmail()\n}\n--------------------------------------------------\nresetPasswordNotification.compose(errorsV2()).map {\n    ErrorEnvelope.fromThrowable(it)\n}\n--------------------------------------------------\nthis.resetError.takeUntil(this.resetLoginPasswordSuccess).map {\n    it.errorMessage()\n}\n--------------------------------------------------\nmap {\n    it.second.acceptedCardType(it.first.type()) || it.first.isFromPaymentSheet()\n}\n--------------------------------------------------\ncard.map {\n    if (it) 1.0f else .5f\n}\n--------------------------------------------------\ncard.map {\n    if (it) R.color.text_primary else R.color.text_secondary\n}\n--------------------------------------------------\ncard.map {\n    it.negate()\n}\n--------------------------------------------------\nthis.cardAndProject.map {\n    it.first\n}\n--------------------------------------------------\nthis.projectDataAndReward.map {\n    it.first.project()\n}\n--------------------------------------------------\nmap {\n    Pair(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    RewardViewUtils.styleCurrency(it.second.minimum(), it.first, this.ksCurrency)\n}\n--------------------------------------------------\nmap {\n    it.first?.getValue()?.id() == it.second.creator().id()\n}\n--------------------------------------------------\nmap {\n    buttonIsGone(it.first.first, it.first.second, it.second)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    RewardViewUtils.pledgeButtonText(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    this.ksCurrency.format(it.second.convertedMinimum(), it.first, true, RoundingMode.HALF_UP, true)\n}\n--------------------------------------------------\nmap {\n    it.first.backing()?.isBacked(it.second) ?: false\n}\n--------------------------------------------------\nmap {\n    when {\n        it -> R.string.Thanks_for_bringing_this_project_one_step_closer_to_becoming_a_reality\n        else -> R.string.Back_it_because_you_believe_in_it\n    }\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.description())\n}\n--------------------------------------------------\nmap {\n    RewardUtils.isReward(it.second) && it.second.description().isNullOrEmpty()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    shouldContinueFlow(it.first, it.second)\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first.isLive && RewardUtils.isLimited(it.second)\n}\n--------------------------------------------------\nreward.filter {\n    RewardUtils.isLimited(it)\n}.map {\n    it.remaining() ?: -1\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.rewardsItems())\n}\n--------------------------------------------------\nreward.map {\n    it.hasAddons()\n}\n--------------------------------------------------\nprojectAndReward.map {\n    expirationDateIsGone(it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    PledgeData.with(PledgeFlowContext.NEW_PLEDGE, it.first, it.second)\n}\n--------------------------------------------------\nmap {\n    when {\n        it -> R.string.You_pledged_without_a_reward\n        else -> R.string.Pledge_without_a_reward\n    }\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first.backing()?.isBacked(it.second) ?: false\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.title())\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isReward(it) && it.title().isNullOrEmpty()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(RewardUtils.shippingSummary(it))\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.localReceiptLocation()?.displayableName())\n}\n--------------------------------------------------\nprojectAndReward.map {\n    it.first.isLive && RewardUtils.isShippable(it.second)\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isNoReward(it) || !RewardUtils.hasBackers(it)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.backersCount())\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isNoReward(it) || it.estimatedDeliveryOn().isNull()\n}\n--------------------------------------------------\nreward.map {\n    RewardUtils.isNoReward(it)\n}\n--------------------------------------------------\ncommentCardData.map {\n    requireNotNull(it.comment)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.first.comment?.assignAuthorBadge(it.second.getValue()))\n}\n--------------------------------------------------\nmap {\n    DiscoveryParams.builder().term(it).build()\n}\n--------------------------------------------------\nsearch.filter {\n    it.isNotNull()\n}.filter {\n    it.isTrimmedEmpty()\n}.map {\n    defaultParams\n}\n--------------------------------------------------\nmap { searchTermAndProjectsAndProjectClicked: Pair<Pair<String, List<Project>>, Project> ->\n    val searchTerm = searchTermAndProjectsAndProjectClicked.first.first\n    val currentProjects = searchTermAndProjectsAndProjectClicked.first.second\n    val projectClicked = searchTermAndProjectsAndProjectClicked.second\n    projectAndRefTag(searchTerm, currentProjects, projectClicked)\n}\n--------------------------------------------------\nmap {\n    it.maskEmail()\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.localizedMessage)\n}\n--------------------------------------------------\nmap {\n    requireNotNull(it.errorMessage())\n    requireNotNull(it.errorMessage())\n}\n--------------------------------------------------\nthis.currentUser.loggedInUser().map { u ->\n    u.avatar().medium()\n}\n--------------------------------------------------\nthis.currentUser.loggedInUser().map {\n    it.name()\n}\n--------------------------------------------------\nmap {\n    it.first.location()?.displayableName() ?: \"\"\n}\n--------------------------------------------------\nsignupError.takeUntil(signupSuccess).filter {\n    it.isNotNull()\n}.map {\n    it.errorMessage()\n}\n--------------------------------------------------\nsurveyResponse.map {\n    it.project()\n}\n--------------------------------------------------\nsurveyResponse.map {\n    it.project()\n}.filter {\n    it.isNotNull()\n}.map {\n    requireNotNull(it)\n}\n--------------------------------------------------\nmap {\n    it.creator().avatar().small()\n}\n--------------------------------------------------\nmap {\n    it.creator().name()\n}\n--------------------------------------------------\nintent().map<Any?> {\n    it.getParcelableExtra(IntentKey.SURVEY_RESPONSE)\n}\n--------------------------------------------------\nsurveyResponse.map {\n    it.urls()?.web()?.survey()\n}\n--------------------------------------------------\nproject.map {\n    Pair.create(it.name(), appendRefTag(it.webProjectUrl(), thanksShare().tag()))\n}\n--------------------------------------------------\nproject.map {\n    Pair.create(it, appendRefTag(it.webProjectUrl(), thanksFacebookShare().tag()))\n}\n--------------------------------------------------\nmap {\n    Pair.create(it.name(), appendRefTag(it.webProjectUrl(), thanksTwitterShare().tag()))\n}\n--------------------------------------------------\ngetCommentCardDataFromIntent().distinctUntilChanged().filter {\n    it.isNotNull()\n}.map {\n    it\n}\n--------------------------------------------------\nintent.map {\n    it.getBooleanExtra(IntentKey.REPLY_EXPAND, false)\n}\n--------------------------------------------------\ngetCommentCardDataFromIntent().map {\n    it.comment\n}\n--------------------------------------------------\ngetCommentCardDataFromIntent().map {\n    it.comment\n}.map {\n    it\n}\n--------------------------------------------------\ncommentData.filter {\n    it.project.isNotNull()\n}.map {\n    requireNotNull(it.project)\n}\n--------------------------------------------------\nmap {\n    Pair(it.second, buildReplyBody(Pair(Pair(it.second, it.first.second), it.first.first)))\n}\n--------------------------------------------------\nmap {\n    CommentCardData.builder().comment(it.second).project(it.first.project).commentableId(it.first.commentableId).commentCardState(CommentCardStatus.TRYING_TO_POST.commentCardStatus).build()\n}\n--------------------------------------------------\nthis.currentUserStream.loggedInUser().map {\n    it\n}\n--------------------------------------------------\nthis.onLoadingReplies.map {\n    this.onCommentReplies.value ?: Pair(listOf(), false)\n}\n--------------------------------------------------\nmap {\n    val mappedList = it.second.first.updateCommentFailedToPost(it.first.first, it.second.second)\n    updateNewlyPostedCommentWithNewStatus(mappedList[it.second.second])\n    Pair(mappedList, it.first.second)\n}\n--------------------------------------------------\nthis.successfullyPostedCommentCardToRefresh.map {\n    it.first\n}\n--------------------------------------------------\nmap {\n    val mappedList = it.second.first.updateCommentAfterSuccessfulPost(it.first.first, it.second.second)\n    updateNewlyPostedCommentWithNewStatus(mappedList[it.second.second])\n    Pair(mappedList, it.first.second)\n}\n--------------------------------------------------\nmap {\n    Pair(it.second.updateCanceledPledgeComment(it.first.first), it.first.second)\n}\n--------------------------------------------------\nintent.map {\n    it.getBooleanExtra(IntentKey.REPLY_SCROLL_BOTTOM, false)\n}\n--------------------------------------------------\napolloPaginate.paginatedData()?.map {\n    it.reversed()\n}\n--------------------------------------------------\nmap {\n    if (this.newlyPostedRepliesList.isNotEmpty()) {\n        Pair(this.newlyPostedRepliesList + it.first, it.second)\n    } else {\n        it\n    }\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra<CommentCardData>(IntentKey.COMMENT_CARD_DATA) as CommentCardData\n}\n--------------------------------------------------\nintent.map {\n    it.getStringExtra(IntentKey.UPDATE_POST_ID) ?: \"\"\n}\n--------------------------------------------------\ntfaError.filter { env: ErrorEnvelope ->\n    !env.isTfaFailedError\n}.map {\n    Unit\n}\n--------------------------------------------------\ntfaError.filter(ErrorEnvelope::isTfaFailedError).map {\n    Unit\n}\n--------------------------------------------------\ninternalIntent.map {\n    it.getStringExtra(IntentKey.EMAIL)\n}\n--------------------------------------------------\ninternalIntent.map {\n    it.getStringExtra(IntentKey.FACEBOOK_TOKEN) ?: \"\"\n}\n--------------------------------------------------\ninternalIntent.map {\n    it.getBooleanExtra(IntentKey.FACEBOOK_LOGIN, false)\n}\n--------------------------------------------------\ninternalIntent.map {\n    it.getStringExtra(IntentKey.PASSWORD)\n}\n--------------------------------------------------\nthis.code.map { code: String? ->\n    isCodeValid(code)\n}\n--------------------------------------------------\nthis.projectAndUpdate.map {\n    it.second\n}\n--------------------------------------------------\nthis.projectAndUpdate.map {\n    it.first\n}\n--------------------------------------------------\nmap {\n    it.first.getValue()?.let { user ->\n        it.second.userIsCreator(user)\n    } ?: false\n}\n--------------------------------------------------\nmap {\n    when {\n        it.first.first.isBacking() || it.second -> false\n        else -> (it.first.second.isPublic() ?: false).negate()\n    }\n}\n--------------------------------------------------\nupdate.map {\n    it.truncatedBody()\n}\n--------------------------------------------------\nupdate.filter {\n    it.commentsCount().isNotNull()\n}.map {\n    requireNotNull(it.commentsCount())\n}\n--------------------------------------------------\nupdate.map {\n    it.commentsCount().isNullOrZero()\n}\n--------------------------------------------------\nupdate.filter {\n    it.likesCount().isNotNull()\n}.map {\n    requireNotNull(it.likesCount())\n}\n--------------------------------------------------\nupdate.map {\n    it.likesCount().isNullOrZero()\n}\n--------------------------------------------------\nupdate.filter {\n    it.publishedAt().isNotNull()\n}.map {\n    requireNotNull(it.publishedAt())\n}\n--------------------------------------------------\nupdate.map {\n    it.sequence()\n}\n--------------------------------------------------\nupdate.map {\n    it.title()\n}\n--------------------------------------------------\nmap {\n    newUser.toBuilder().email(it.me()?.email()).isCreator(it.me()?.isCreator).isDeliverable(it.me()?.isDeliverable).isEmailVerified(it.me()?.isEmailVerified).hasPassword(it.me()?.hasPassword()).build()\n}\n--------------------------------------------------\nmap {\n    newUser.toBuilder().email(it.email).isCreator(it.isCreator).isDeliverable(it.isDeliverable).isEmailVerified(it.isEmailVerified).hasPassword(it.hasPassword).build()\n}\n--------------------------------------------------\nmap {\n    it.getParcelableExtra(IntentKey.PROJECT) as? Project\n}\n--------------------------------------------------\nmap {\n    Pair(it?.getStringExtra(IntentKey.VIDEO_URL_SOURCE) ?: \"\", it?.getLongExtra(IntentKey.VIDEO_SEEK_POSITION, -1) ?: -1)\n}\n--------------------------------------------------\nmap {\n    Pair(requireNotNull(it.first), it.second)\n}", "fun <C> map(transform: (B) -> C): Either<A, C> = when (this) {\r\n        is Left -> Left(this.left)\r\n        is Right -> Right(transform(this.right))\r\n    }" ],
  "MaterialFiles/1274" : [ "updateActionBarTitle()", "import com.simplemobiletools.calendar.pro.R\nprivate fun updateActionBarTitle() {\r\n        binding.eventToolbar.title = if (mIsNewEvent) {\r\n            getString(R.string.new_event)\r\n        } else {\r\n            getString(R.string.edit_event)\r\n        }\r\n    }" ],
  "Trail-Sense/1594" : [ "super.onDestroyView()", "import android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n    }" ],
  "MaterialFiles/1276" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1275" : [ "listener.onLongClick(adapterPosition)", "import com.omgodse.notally.room.BaseNote\noverride fun onLongClick(position: Int) {\r\n        if (position != -1) {\r\n            adapter?.currentList?.get(position)?.let { item ->\r\n                if (item is BaseNote) {\r\n                    handleNoteSelection(item.id, position, item)\r\n                }\r\n            }\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, room, BaseNote], wildcard=false, alias=null)" ],
  "Trail-Sense/1113" : [ "", "import org.videolan.vlc.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        itemPosition = arguments?.getInt(CTX_POSITION_KEY) ?: -1\r\n        if (!this::receiver.isInitialized) restoreReceiver(savedInstanceState)\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Trail-Sense/1114" : [ "", "import org.videolan.vlc.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        itemPosition = arguments?.getInt(CTX_POSITION_KEY) ?: -1\r\n        if (!this::receiver.isInitialized) restoreReceiver(savedInstanceState)\r\n    }\nImport(names=[android, os, Bundle], wildcard=false, alias=null)" ],
  "Trail-Sense/1117" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnLocalFindSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnLocalFindSelectedListener\");\r\n    }\r\n}" ],
  "Trail-Sense/1118" : [ "", "import com.omgodse.notally.preferences.View\nimport android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n        adapter = null\r\n    }" ],
  "fcitx5-android/171" : [ "onBindViewHolder(holder, position)", "import java.io.File\nimport com.omgodse.notally.room.Image\nimport com.omgodse.notally.recyclerview.viewholder.PreviewImageVH\noverride fun onBindViewHolder(holder: PreviewImageVH, position: Int) {\r\n        val image = getItem(position)\r\n        val file = if (mediaRoot != null) File(mediaRoot, image.name) else null\r\n        holder.bind(file)\r\n    }\nImport(names=[com, omgodse, notally, recyclerview, viewholder, PreviewImageVH], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "fcitx5-android/175" : [ "super.getItemOffsets(outRect, view, parent, state)", "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {\r\n        super.getItemOffsets(outRect, view, parent, state)\r\n        outRect.apply {\r\n            bottom = margin\r\n        }\r\n    }\nImport(names=[android, graphics, Rect], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)" ],
  "fcitx5-android/177" : [ "ifBothNotNullAndInvalid(spanStart, spanEnd) { start, end ->\n    val text = binding.EnterBody.text?.substring(start, end)\n    if (text != null) {\n        val link = getURLFrom(text)\n        val uri = Uri.parse(link)\n        val intent = Intent(Intent.ACTION_VIEW, uri)\n        try {\n            startActivity(intent)\n        } catch (exception: Exception) {\n            Toast.makeText(this, R.string.cant_open_link, Toast.LENGTH_LONG).show()\n        }\n    }\n}\n--------------------------------------------------\nifBothNotNullAndInvalid(selectionStart, selectionEnd) { start, end ->\n    binding.EnterBody.text?.getSpans<CharacterStyle>(start, end)?.forEach { span ->\n        binding.EnterBody.text?.removeSpan(span)\n    }\n}\n--------------------------------------------------\nifBothNotNullAndInvalid(selectionStart, selectionEnd) { start, end ->\n    binding.EnterBody.text?.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n}", "private fun ifBothNotNullAndInvalid(start: Int?, end: Int?, function: (start: Int, end: Int) -> Unit) {\r\n        if (start != null && start != -1 && end != null && end != -1) {\r\n            function.invoke(start, end)\r\n        }\r\n    }" ],
  "fcitx5-android/176" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/1269" : [ "", "import android.view.Menu\noverride fun onPrepareOptionsMenu(menu: Menu) {\r\n        if (isActive && error == null) {\r\n            prepareMenu(menu)\r\n        } else {\r\n            hideMenu(menu)\r\n        }\r\n    }\nimport android.view.Menu" ],
  "fcitx5-android/179" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/178" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/310" : [ "public static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\npublic static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.graphics.Color\n@NonNull\r\npublic static Palette.Swatch getSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.WHITE, 1);\r\n    }\r\n    return getBestPaletteSwatchFrom(palette.getSwatches());\r\n}" ],
  "Neo-Backup/291" : [ "alarmRepository.getAlarms()", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Alarm\noverride suspend fun getAlarms(): List<Alarm> {\r\n        return withContext(ioDispatcher) {\r\n            alarmDao.getAll()\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/311" : [ "public static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\npublic static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.graphics.Color\n@NonNull\r\npublic static Palette.Swatch getSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.WHITE, 1);\r\n    }\r\n    return getBestPaletteSwatchFrom(palette.getSwatches());\r\n}" ],
  "Iconify/794" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/793" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/290" : [ "alarmRepository.getAlarms()", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Alarm\noverride suspend fun getAlarms(): List<Alarm> {\r\n        return withContext(ioDispatcher) {\r\n            alarmDao.getAll()\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/791" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Neo-Backup/295" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/790" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Neo-Backup/293" : [ "!canChildScroll(orientation, -1f)\n--------------------------------------------------\n!canChildScroll(orientation, 1f)\n--------------------------------------------------\ncanChildScroll(orientation, if (isVpHorizontal) dx else dy)", "import kotlin.math.sign\nprivate fun canChildScroll(orientation: Int, delta: Float): Boolean {\r\n        val direction = -delta.sign.toInt()\r\n        return when (orientation) {\r\n            0 -> child?.canScrollHorizontally(direction) ?: false\r\n            1 -> child?.canScrollVertically(direction) ?: false\r\n            else -> throw IllegalArgumentException()\r\n        }\r\n    }" ],
  "Neo-Backup/294" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/241" : [ "onMove(src.adapterPosition, toPosition)\n--------------------------------------------------\n        ItemTouchHelper(\n                CustomFilterItemTouchHelper(this, this::onMove, this::onDelete, this::updateList))\r\n                .attachToRecyclerView(recyclerView)", "import org.tasks.R\nimport androidx.recyclerview.widget.RecyclerView\noverride fun onMove(\r\n            recyclerView: RecyclerView, src: RecyclerView.ViewHolder, target: RecyclerView.ViewHolder): Boolean {\r\n        val toPosition = target.adapterPosition\r\n        if (toPosition == 0) {\r\n            return false\r\n        }\r\n        onMove(src.adapterPosition, toPosition)\r\n        return true\r\n    }\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)\nImport(names=[org, tasks, R], wildcard=false, alias=null)" ],
  "MaterialFiles/244" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "Neo-Backup/297" : [ "NavigationGraph(navController = navController, mainNavController = mainNavController, startUpScreen = startUpScreen)", "import com.mhss.app.mybrain.presentation.util.Screen\nimport com.mhss.app.mybrain.presentation.main.SpacesScreen\nimport com.mhss.app.mybrain.presentation.main.SettingsScreen\nimport com.mhss.app.mybrain.presentation.main.DashboardScreen\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.NavHostController\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun NavigationGraph(\r\n    navController: NavHostController,\r\n    mainNavController: NavHostController,\r\n    startUpScreen: String\r\n) {\r\n    NavHost(navController = navController, startDestination = startUpScreen){\r\n\r\n        composable(Screen.DashboardScreen.route){\r\n            DashboardScreen(mainNavController)\r\n        }\r\n        composable(Screen.SpacesScreen.route){\r\n            SpacesScreen(mainNavController)\r\n        }\r\n        composable(Screen.SettingsScreen.route){\r\n            SettingsScreen(mainNavController)\r\n        }\r\n    }\r\n}\nImport(names=[androidx, navigation, NavHostController], wildcard=false, alias=null)\nImport(names=[androidx, navigation, compose, NavHost], wildcard=false, alias=null)\nImport(names=[androidx, navigation, compose, composable], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, presentation, main, DashboardScreen], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, presentation, main, SettingsScreen], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, presentation, main, SpacesScreen], wildcard=false, alias=null)" ],
  "MaterialFiles/243" : [ "FileUtils.copyFile(db, dst)\n--------------------------------------------------\nFileUtils.copyFile(db, dbFile)\n--------------------------------------------------\nFileUtils.copyFile(File(uri.path), VLCOptions.getSoundFontFile(context))\n--------------------------------------------------\ncopyFile(`in`, out)\n--------------------------------------------------\nret and copyFile(file, File(dst, file.name))", "import java.io\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    @Throws(IOException::class)\r\n    private fun copyFile(inputStream: InputStream, out: OutputStream) {\r\n        val buffer = ByteArray(1024)\r\n        var read = inputStream.read(buffer)\r\n        while (read != -1) {\r\n            out.write(buffer, 0, read)\r\n            read = inputStream.read(buffer)\r\n        }\r\n    }" ],
  "Neo-Backup/298" : [ "        _currentPageOffset.animateTo(currentPageOffset.roundToInt().toFloat())\n        selectPage()\r\n    }", "import kotlin.math.roundToInt\nprivate suspend fun selectPage() {\r\n        currentPage -= currentPageOffset.roundToInt()\r\n        snapToOffset(0f)\r\n        selectionState = SelectionState.Selected\r\n    }\nimport kotlin.math.roundToInt" ],
  "Trail-Sense/444" : [ "setRepeatLimit(it)", "import com.simplemobiletools.calendar.pro.R\nprivate fun setRepeatLimit(limit: Long) {\r\n        mRepeatLimit = limit\r\n        checkRepetitionLimitText()\r\n    }" ],
  "Iconify/798" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/445" : [ "super.onMeasure(widthMeasureSpec, heightMeasureSpec)", "override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\r\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\r\n        val height = (measuredWidth * 0.75).toInt()\r\n        if (height != measuredHeight) {\r\n            setMeasuredDimension(measuredWidth, height)\r\n        }\r\n    }" ],
  "Iconify/312" : [ "public static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\npublic static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.graphics.Color\n@NonNull\r\npublic static Palette.Swatch getSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.WHITE, 1);\r\n    }\r\n    return getBestPaletteSwatchFrom(palette.getSwatches());\r\n}" ],
  "Trail-Sense/446" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/447" : [ "", "import android.view.View\noverride fun transformPage(page: View, position: Float) {\n        val parallaxView = page.findViewById<View>(id)\n        page.apply {\n            if (parallaxView != null) {\n                if (position > -1 && position < 1) {\n                    val width = parallaxView.width.toFloat()\n                    parallaxView.translationX = -(position * width * speed)\n                    scaleX = 1f\n                    scaleY = 1f\n                }\n            }\n        }\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/804" : [ "/**\r\n * <p>Runs on the UI thread after {@link #cancel(boolean)} is invoked and\r\n * {@link #doInBackground(Object[])} has finished.</p>\r\n *\r\n * <p>The default implementation simply invokes {@link #onCancelled()} and\r\n * ignores the result. If you write your own implementation, do not call\r\n * <code>super.onCancelled(result)</code>.</p>\r\n *\r\n * @param result The result, if any, computed in\r\n *               {@link #doInBackground(Object[])}, can be null\r\n *\r\n * @see #cancel(boolean)\r\n * @see #isCancelled()\r\n */\r\n@SuppressWarnings({ \"UnusedParameters\" })\r\n@MainThread\r\nprotected void onCancelled(Result result) {\r\n    onCancelled();\r\n}\n--------------------------------------------------\nprivate void finish(Result result) {\r\n    if (isCancelled()) {\r\n        onCancelled(result);\r\n    } else {\r\n        onPostExecute(result);\r\n    }\r\n    mStatus = Status.FINISHED;\r\n}\n--------------------------------------------------\n", "@Override\r\nprotected void onCancelled() {\r\n    // Set mirror status\r\n    mMirrorSafe = true;\r\n}" ],
  "Trail-Sense/448" : [ "    dragRect.set(0f, 0f, dragSize, dragSize)\n    dragRect.offset(bounds.centerX() - dragSize / 2f, bounds.centerY() - dragSize / 2f)\r\n  }\n--------------------------------------------------\n      val bottom = dragRect.bottom\n      val centerX = left + dragRect.width() / 2f\r\n      val centerY = top + dragRect.height() / 2f\n--------------------------------------------------\n      val centerX = left + dragRect.width() / 2f\n      val centerY = top + dragRect.height() / 2f\r\n\n--------------------------------------------------\n\n      topCircle.center(centerX, top)\r\n      leftCircle.center(left, centerY)\n--------------------------------------------------\n      topCircle.center(centerX, top)\n      leftCircle.center(left, centerY)\r\n      rightCircle.center(right, centerY)\n--------------------------------------------------\n      leftCircle.center(left, centerY)\n      rightCircle.center(right, centerY)\r\n      bottomCircle.center(centerX, bottom)\n--------------------------------------------------\n      rightCircle.center(right, centerY)\n      bottomCircle.center(centerX, bottom)\r\n    }", "import android.view.View\nprivate fun View.center(\r\n    x: Float,\r\n    y: Float,\r\n  ) {\r\n    translationX = x - width / 2f\r\n    translationY = y - height / 2f\r\n  }\nimport android.view.View" ],
  "VinylMusicPlayer/803" : [ "/**\r\n * Executes the task with the specified parameters. The task returns\r\n * itself (this) so that the caller can keep a reference to it.\r\n *\r\n * <p>This method is typically used with {@link #THREAD_POOL_EXECUTOR} to\r\n * allow multiple tasks to run in parallel on a pool of threads managed by\r\n * AsyncTask, however you can also use your own {@link Executor} for custom\r\n * behavior.\r\n *\r\n * <p><em>Warning:</em> Allowing multiple tasks to run in parallel from\r\n * a thread pool is generally <em>not</em> what one wants, because the order\r\n * of their operation is not defined.  For example, if these tasks are used\r\n * to modify any state in common (such as writing a file due to a button click),\r\n * there are no guarantees on the order of the modifications.\r\n * Without careful work it is possible in rare cases for the newer version\r\n * of the data to be over-written by an older one, leading to obscure data\r\n * loss and stability issues.  Such changes are best\r\n * executed in serial; to guarantee such work is serialized regardless of\r\n * platform version you can use this function with {@link #SERIAL_EXECUTOR}.\r\n *\r\n * <p>This method must be invoked on the UI thread.\r\n *\r\n * @param exec The executor to use.  {@link #THREAD_POOL_EXECUTOR} is available as a\r\n *              convenient process-wide thread pool for tasks that are loosely coupled.\r\n * @param params The parameters of the task.\r\n *\r\n * @return This instance of CustomAsyncTask.\r\n *\r\n * @throws IllegalStateException If {@link #getStatus()} returns either\r\n *         {@link CustomAsyncTask.Status#RUNNING} or {@link CustomAsyncTask.Status#FINISHED}.\r\n *\r\n * @see #execute(Object[])\r\n */\r\n@MainThread\r\npublic final CustomAsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec, Params... params) {\r\n    if (mStatus != Status.PENDING) {\r\n        switch(mStatus) {\r\n            case RUNNING:\r\n                throw new IllegalStateException(\"Cannot execute task:\" + \" the task is already running.\");\r\n            case FINISHED:\r\n                throw new IllegalStateException(\"Cannot execute task:\" + \" the task has already been executed \" + \"(a task can be executed only once)\");\r\n        }\r\n    }\r\n    mStatus = Status.RUNNING;\r\n    onPreExecute();\r\n    mWorker.mParams = params;\r\n    exec.execute(mFuture);\r\n    return this;\r\n}\n--------------------------------------------------\n", "import java.util.List\n@Override\r\nprotected void onPreExecute() {\r\n    // Unsafe to refresh list\r\n    mRefreshListSafe = false;\r\n    // Make sure the database is open\r\n    resumeDatabase();\r\n    // Show progress\r\n    showSwipeRefresh();\r\n}" ],
  "VinylMusicPlayer/806" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    Bundle extras = getIntent().getExtras();\r\n    if (extras == null) {\r\n        finish();\r\n        return;\r\n    }\r\n    appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n    long account = prefs.getLong(\"widget.\" + appWidgetId + \".account\", -1L);\r\n    long folder = prefs.getLong(\"widget.\" + appWidgetId + \".folder\", -1L);\r\n    boolean unseen = prefs.getBoolean(\"widget.\" + appWidgetId + \".unseen\", false);\r\n    boolean flagged = prefs.getBoolean(\"widget.\" + appWidgetId + \".flagged\", false);\r\n    boolean daynight = prefs.getBoolean(\"widget.\" + appWidgetId + \".daynight\", false);\r\n    boolean highlight = prefs.getBoolean(\"widget.\" + appWidgetId + \".highlight\", false);\r\n    int highlight_color = prefs.getInt(\"widget.\" + appWidgetId + \".highlight_color\", Color.TRANSPARENT);\r\n    boolean semi = prefs.getBoolean(\"widget.\" + appWidgetId + \".semi\", true);\r\n    int background = prefs.getInt(\"widget.\" + appWidgetId + \".background\", Color.TRANSPARENT);\r\n    boolean separators = prefs.getBoolean(\"widget.\" + appWidgetId + \".separators\", true);\r\n    int font = prefs.getInt(\"widget.\" + appWidgetId + \".font\", 0);\r\n    int padding = prefs.getInt(\"widget.\" + appWidgetId + \".padding\", 0);\r\n    int subject_lines = prefs.getInt(\"widget.\" + appWidgetId + \".subject_lines\", 1);\r\n    boolean avatars = prefs.getBoolean(\"widget.\" + appWidgetId + \".avatars\", false);\r\n    boolean account_name = prefs.getBoolean(\"widget.\" + appWidgetId + \".account_name\", true);\r\n    boolean caption = prefs.getBoolean(\"widget.\" + appWidgetId + \".caption\", true);\r\n    boolean refresh = prefs.getBoolean(\"widget.\" + appWidgetId + \".refresh\", false);\r\n    boolean compose = prefs.getBoolean(\"widget.\" + appWidgetId + \".compose\", false);\r\n    daynight = daynight && (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S);\r\n    getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n    getSupportActionBar().setSubtitle(R.string.title_widget_title_list);\r\n    setContentView(R.layout.activity_widget_unified);\r\n    spAccount = findViewById(R.id.spAccount);\r\n    spFolder = findViewById(R.id.spFolder);\r\n    cbUnseen = findViewById(R.id.cbUnseen);\r\n    cbFlagged = findViewById(R.id.cbFlagged);\r\n    cbDayNight = findViewById(R.id.cbDayNight);\r\n    cbHighlight = findViewById(R.id.cbHighlight);\r\n    btnHighlight = findViewById(R.id.btnHighlight);\r\n    cbSemiTransparent = findViewById(R.id.cbSemiTransparent);\r\n    btnColor = findViewById(R.id.btnColor);\r\n    cbSeparatorLines = findViewById(R.id.cbSeparatorLines);\r\n    spFontSize = findViewById(R.id.spFontSize);\r\n    spPadding = findViewById(R.id.spPadding);\r\n    spSubjectLines = findViewById(R.id.spSubjectLines);\r\n    tvSubjectLinesHint = findViewById(R.id.tvSubjectLinesHint);\r\n    cbAvatars = findViewById(R.id.cbAvatars);\r\n    cbAccountName = findViewById(R.id.cbAccountName);\r\n    cbCaption = findViewById(R.id.cbCaption);\r\n    cbRefresh = findViewById(R.id.cbRefresh);\r\n    cbCompose = findViewById(R.id.cbCompose);\r\n    btnSave = findViewById(R.id.btnSave);\r\n    pbWait = findViewById(R.id.pbWait);\r\n    grpReady = findViewById(R.id.grpReady);\r\n    final Intent resultValue = new Intent();\r\n    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);\r\n    cbDayNight.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton compoundButton, boolean checked) {\r\n            cbHighlight.setEnabled(!checked);\r\n            btnHighlight.setEnabled(cbHighlight.isChecked() && !checked);\r\n            cbSemiTransparent.setEnabled(!checked);\r\n            btnColor.setEnabled(!checked);\r\n        }\r\n    });\r\n    cbSemiTransparent.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n            if (isChecked && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\r\n                btnColor.setColor(Color.TRANSPARENT);\r\n        }\r\n    });\r\n    cbHighlight.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton compoundButton, boolean checked) {\r\n            btnHighlight.setVisibility(checked && cbHighlight.isEnabled() ? View.VISIBLE : View.GONE);\r\n            btnHighlight.setEnabled(checked && cbHighlight.isEnabled());\r\n        }\r\n    });\r\n    btnHighlight.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            int editTextColor = Helper.resolveColor(ActivityWidgetUnified.this, android.R.attr.editTextColor);\r\n            ColorPickerDialogBuilder.with(ActivityWidgetUnified.this).setTitle(R.string.title_advanced_highlight_color).showColorEdit(true).setColorEditTextColor(editTextColor).wheelType(ColorPickerView.WHEEL_TYPE.FLOWER).density(6).lightnessSliderOnly().setPositiveButton(android.R.string.ok, new ColorPickerClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int selectedColor, Integer[] allColors) {\r\n                    btnHighlight.setColor(selectedColor);\r\n                }\r\n            }).setNegativeButton(R.string.title_reset, new DialogInterface.OnClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    btnHighlight.setColor(Color.TRANSPARENT);\r\n                }\r\n            }).build().show();\r\n        }\r\n    });\r\n    btnColor.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            int color = btnColor.getColor();\r\n            int editTextColor = Helper.resolveColor(ActivityWidgetUnified.this, android.R.attr.editTextColor);\r\n            if (color == Color.TRANSPARENT) {\r\n                color = Color.WHITE;\r\n                if (cbSemiTransparent.isChecked() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\r\n                    color = ColorUtils.setAlphaComponent(color, 127);\r\n            }\r\n            ColorPickerDialogBuilder.with(ActivityWidgetUnified.this).setTitle(R.string.title_widget_background).showColorEdit(true).setColorEditTextColor(editTextColor).wheelType(ColorPickerView.WHEEL_TYPE.FLOWER).density(6).initialColor(color).showLightnessSlider(true).showAlphaSlider(Build.VERSION.SDK_INT >= Build.VERSION_CODES.S).setPositiveButton(android.R.string.ok, new ColorPickerClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int selectedColor, Integer[] allColors) {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\r\n                        cbSemiTransparent.setChecked(false);\r\n                    btnColor.setColor(selectedColor);\r\n                }\r\n            }).setNegativeButton(R.string.title_transparent, new DialogInterface.OnClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    cbSemiTransparent.setChecked(false);\r\n                    btnColor.setColor(Color.TRANSPARENT);\r\n                }\r\n            }).build().show();\r\n        }\r\n    });\r\n    btnSave.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            EntityAccount account = (EntityAccount) spAccount.getSelectedItem();\r\n            TupleFolderEx folder = (TupleFolderEx) spFolder.getSelectedItem();\r\n            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ActivityWidgetUnified.this);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            if (account != null && account.id > 0)\r\n                if (folder != null && folder.id > 0)\r\n                    editor.putString(\"widget.\" + appWidgetId + \".name\", folder.getDisplayName(ActivityWidgetUnified.this));\r\n                else\r\n                    editor.putString(\"widget.\" + appWidgetId + \".name\", account.name);\r\n            else\r\n                editor.remove(\"widget.\" + appWidgetId + \".name\");\r\n            int font = spFontSize.getSelectedItemPosition();\r\n            int padding = spPadding.getSelectedItemPosition();\r\n            editor.putLong(\"widget.\" + appWidgetId + \".account\", account == null ? -1L : account.id);\r\n            editor.putLong(\"widget.\" + appWidgetId + \".folder\", folder == null ? -1L : folder.id);\r\n            editor.putString(\"widget.\" + appWidgetId + \".type\", folder == null ? null : folder.type);\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".unseen\", cbUnseen.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".daynight\", cbDayNight.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".flagged\", cbFlagged.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".highlight\", cbHighlight.isChecked());\r\n            editor.putInt(\"widget.\" + appWidgetId + \".highlight_color\", btnHighlight.getColor());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".semi\", cbSemiTransparent.isChecked());\r\n            editor.putInt(\"widget.\" + appWidgetId + \".background\", btnColor.getColor());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".separators\", cbSeparatorLines.isChecked());\r\n            editor.putInt(\"widget.\" + appWidgetId + \".font\", tinyOut(font));\r\n            editor.putInt(\"widget.\" + appWidgetId + \".padding\", tinyOut(padding));\r\n            editor.putInt(\"widget.\" + appWidgetId + \".subject_lines\", spSubjectLines.getSelectedItemPosition() + 1);\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".avatars\", cbAvatars.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".account_name\", cbAccountName.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".caption\", cbCaption.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".refresh\", cbRefresh.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".compose\", cbCompose.isChecked());\r\n            editor.putInt(\"widget.\" + appWidgetId + \".version\", BuildConfig.VERSION_CODE);\r\n            editor.apply();\r\n            WidgetUnified.init(ActivityWidgetUnified.this, appWidgetId);\r\n            setResult(RESULT_OK, resultValue);\r\n            finish();\r\n        }\r\n    });\r\n    adapterAccount = new ArrayAdapter<>(this, R.layout.spinner_item1, android.R.id.text1, new ArrayList<EntityAccount>());\r\n    adapterAccount.setDropDownViewResource(R.layout.spinner_item1_dropdown);\r\n    spAccount.setAdapter(adapterAccount);\r\n    adapterFolder = new ArrayAdapter<TupleFolderEx>(this, R.layout.spinner_item1, android.R.id.text1, new ArrayList<TupleFolderEx>()) {\r\n\r\n        @NonNull\r\n        @Override\r\n        public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\r\n            return localize(position, super.getView(position, convertView, parent));\r\n        }\r\n\r\n        @Override\r\n        public View getDropDownView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\r\n            return localize(position, super.getDropDownView(position, convertView, parent));\r\n        }\r\n\r\n        private View localize(int position, View view) {\r\n            TupleFolderEx folder = getItem(position);\r\n            if (folder != null) {\r\n                TextView tv = view.findViewById(android.R.id.text1);\r\n                tv.setText(EntityFolder.localizeName(view.getContext(), folder.name));\r\n            }\r\n            return view;\r\n        }\r\n    };\r\n    adapterFolder.setDropDownViewResource(R.layout.spinner_item1_dropdown);\r\n    spFolder.setAdapter(adapterFolder);\r\n    spAccount.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            EntityAccount account = (EntityAccount) spAccount.getAdapter().getItem(position);\r\n            setFolders(account.id);\r\n            cbAccountName.setEnabled(account.id < 0);\r\n        }\r\n\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n            setFolders(-1);\r\n        }\r\n\r\n        private void setFolders(long account) {\r\n            Bundle args = new Bundle();\r\n            args.putLong(\"account\", account);\r\n            new SimpleTask<List<TupleFolderEx>>() {\r\n\r\n                @Override\r\n                protected List<TupleFolderEx> onExecute(Context context, Bundle args) {\r\n                    long account = args.getLong(\"account\");\r\n                    DB db = DB.getInstance(context);\r\n                    List<TupleFolderEx> folders = db.folder().getFoldersEx(account);\r\n                    if (folders != null && folders.size() > 0)\r\n                        Collections.sort(folders, folders.get(0).getComparator(context));\r\n                    return folders;\r\n                }\r\n\r\n                @Override\r\n                protected void onExecuted(Bundle args, List<TupleFolderEx> folders) {\r\n                    if (folders == null)\r\n                        folders = new ArrayList<>();\r\n                    TupleFolderEx unified = new TupleFolderEx();\r\n                    unified.id = -1L;\r\n                    unified.name = getString(R.string.title_widget_folder_unified);\r\n                    folders.add(0, unified);\r\n                    adapterFolder.clear();\r\n                    adapterFolder.addAll(folders);\r\n                    int select = 0;\r\n                    for (int i = 0; i < folders.size(); i++) if (folders.get(i).id.equals(folder)) {\r\n                        select = i;\r\n                        break;\r\n                    }\r\n                    spFolder.setSelection(select);\r\n                }\r\n\r\n                @Override\r\n                protected void onException(Bundle args, Throwable ex) {\r\n                    Log.unexpectedError(getSupportFragmentManager(), ex);\r\n                }\r\n            }.execute(ActivityWidgetUnified.this, args, \"widget:folders\");\r\n        }\r\n    });\r\n    List<String> sizes = new ArrayList<>();\r\n    sizes.addAll(Arrays.asList(getResources().getStringArray(R.array.fontSizeNames)));\r\n    sizes.add(1, getString(R.string.title_size_tiny));\r\n    adapterFontSize = new ArrayAdapter<>(this, R.layout.spinner_item1, android.R.id.text1, sizes);\r\n    adapterFontSize.setDropDownViewResource(R.layout.spinner_item1_dropdown);\r\n    spFontSize.setAdapter(adapterFontSize);\r\n    adapterPadding = new ArrayAdapter<>(this, R.layout.spinner_item1, android.R.id.text1, sizes);\r\n    adapterPadding.setDropDownViewResource(R.layout.spinner_item1_dropdown);\r\n    spPadding.setAdapter(adapterPadding);\r\n    // Initialize\r\n    cbUnseen.setChecked(unseen);\r\n    cbFlagged.setChecked(flagged);\r\n    cbDayNight.setChecked(daynight);\r\n    cbDayNight.setVisibility(Build.VERSION.SDK_INT < Build.VERSION_CODES.S ? View.GONE : View.VISIBLE);\r\n    cbHighlight.setChecked(highlight);\r\n    cbHighlight.setEnabled(!daynight);\r\n    btnHighlight.setVisibility(highlight ? View.VISIBLE : View.GONE);\r\n    btnHighlight.setColor(highlight_color);\r\n    btnHighlight.setEnabled(highlight && !daynight);\r\n    cbSemiTransparent.setChecked(semi);\r\n    cbSemiTransparent.setEnabled(!daynight);\r\n    btnColor.setColor(background);\r\n    btnColor.setEnabled(!daynight);\r\n    cbSeparatorLines.setChecked(separators);\r\n    spFontSize.setSelection(tinyIn(font));\r\n    spPadding.setSelection(tinyIn(padding));\r\n    cbAvatars.setChecked(avatars);\r\n    cbAccountName.setChecked(account_name);\r\n    spSubjectLines.setSelection(subject_lines - 1);\r\n    tvSubjectLinesHint.setText(getString(R.string.title_advanced_preview_lines_hint, NF.format(HtmlHelper.PREVIEW_SIZE)));\r\n    cbCaption.setChecked(caption);\r\n    cbRefresh.setChecked(refresh);\r\n    cbCompose.setChecked(compose);\r\n    grpReady.setVisibility(View.GONE);\r\n    pbWait.setVisibility(View.VISIBLE);\r\n    setResult(RESULT_CANCELED, resultValue);\r\n    Bundle args = new Bundle();\r\n    new SimpleTask<List<EntityAccount>>() {\r\n\r\n        @Override\r\n        protected List<EntityAccount> onExecute(Context context, Bundle args) {\r\n            DB db = DB.getInstance(context);\r\n            return db.account().getSynchronizingAccounts(null);\r\n        }\r\n\r\n        @Override\r\n        protected void onExecuted(Bundle args, List<EntityAccount> accounts) {\r\n            if (accounts == null)\r\n                accounts = new ArrayList<>();\r\n            EntityAccount all = new EntityAccount();\r\n            all.id = -1L;\r\n            all.name = getString(R.string.title_widget_account_all);\r\n            all.primary = false;\r\n            accounts.add(0, all);\r\n            adapterAccount.addAll(accounts);\r\n            for (int i = 0; i < accounts.size(); i++) if (accounts.get(i).id.equals(account)) {\r\n                spAccount.setSelection(i);\r\n                break;\r\n            }\r\n            grpReady.setVisibility(View.VISIBLE);\r\n            pbWait.setVisibility(View.GONE);\r\n        }\r\n\r\n        @Override\r\n        protected void onException(Bundle args, Throwable ex) {\r\n            Log.unexpectedError(getSupportFragmentManager(), ex);\r\n        }\r\n    }.execute(this, args, \"widget:accounts\");\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    Bundle extras = getIntent().getExtras();\r\n    if (extras == null) {\r\n        finish();\r\n        return;\r\n    }\r\n    appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n    long account = prefs.getLong(\"widget.\" + appWidgetId + \".account\", -1L);\r\n    long folder = prefs.getLong(\"widget.\" + appWidgetId + \".folder\", -1L);\r\n    boolean unseen = prefs.getBoolean(\"widget.\" + appWidgetId + \".unseen\", false);\r\n    boolean flagged = prefs.getBoolean(\"widget.\" + appWidgetId + \".flagged\", false);\r\n    boolean daynight = prefs.getBoolean(\"widget.\" + appWidgetId + \".daynight\", false);\r\n    boolean highlight = prefs.getBoolean(\"widget.\" + appWidgetId + \".highlight\", false);\r\n    int highlight_color = prefs.getInt(\"widget.\" + appWidgetId + \".highlight_color\", Color.TRANSPARENT);\r\n    boolean semi = prefs.getBoolean(\"widget.\" + appWidgetId + \".semi\", true);\r\n    int background = prefs.getInt(\"widget.\" + appWidgetId + \".background\", Color.TRANSPARENT);\r\n    boolean separators = prefs.getBoolean(\"widget.\" + appWidgetId + \".separators\", true);\r\n    int font = prefs.getInt(\"widget.\" + appWidgetId + \".font\", 0);\r\n    int padding = prefs.getInt(\"widget.\" + appWidgetId + \".padding\", 0);\r\n    int subject_lines = prefs.getInt(\"widget.\" + appWidgetId + \".subject_lines\", 1);\r\n    boolean avatars = prefs.getBoolean(\"widget.\" + appWidgetId + \".avatars\", false);\r\n    boolean account_name = prefs.getBoolean(\"widget.\" + appWidgetId + \".account_name\", true);\r\n    boolean caption = prefs.getBoolean(\"widget.\" + appWidgetId + \".caption\", true);\r\n    boolean refresh = prefs.getBoolean(\"widget.\" + appWidgetId + \".refresh\", false);\r\n    boolean compose = prefs.getBoolean(\"widget.\" + appWidgetId + \".compose\", false);\r\n    daynight = daynight && (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S);\r\n    getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n    getSupportActionBar().setSubtitle(R.string.title_widget_title_list);\r\n    setContentView(R.layout.activity_widget_unified);\r\n    spAccount = findViewById(R.id.spAccount);\r\n    spFolder = findViewById(R.id.spFolder);\r\n    cbUnseen = findViewById(R.id.cbUnseen);\r\n    cbFlagged = findViewById(R.id.cbFlagged);\r\n    cbDayNight = findViewById(R.id.cbDayNight);\r\n    cbHighlight = findViewById(R.id.cbHighlight);\r\n    btnHighlight = findViewById(R.id.btnHighlight);\r\n    cbSemiTransparent = findViewById(R.id.cbSemiTransparent);\r\n    btnColor = findViewById(R.id.btnColor);\r\n    cbSeparatorLines = findViewById(R.id.cbSeparatorLines);\r\n    spFontSize = findViewById(R.id.spFontSize);\r\n    spPadding = findViewById(R.id.spPadding);\r\n    spSubjectLines = findViewById(R.id.spSubjectLines);\r\n    tvSubjectLinesHint = findViewById(R.id.tvSubjectLinesHint);\r\n    cbAvatars = findViewById(R.id.cbAvatars);\r\n    cbAccountName = findViewById(R.id.cbAccountName);\r\n    cbCaption = findViewById(R.id.cbCaption);\r\n    cbRefresh = findViewById(R.id.cbRefresh);\r\n    cbCompose = findViewById(R.id.cbCompose);\r\n    btnSave = findViewById(R.id.btnSave);\r\n    pbWait = findViewById(R.id.pbWait);\r\n    grpReady = findViewById(R.id.grpReady);\r\n    final Intent resultValue = new Intent();\r\n    resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);\r\n    cbDayNight.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton compoundButton, boolean checked) {\r\n            cbHighlight.setEnabled(!checked);\r\n            btnHighlight.setEnabled(cbHighlight.isChecked() && !checked);\r\n            cbSemiTransparent.setEnabled(!checked);\r\n            btnColor.setEnabled(!checked);\r\n        }\r\n    });\r\n    cbSemiTransparent.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n            if (isChecked && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\r\n                btnColor.setColor(Color.TRANSPARENT);\r\n        }\r\n    });\r\n    cbHighlight.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\r\n        @Override\r\n        public void onCheckedChanged(CompoundButton compoundButton, boolean checked) {\r\n            btnHighlight.setVisibility(checked && cbHighlight.isEnabled() ? View.VISIBLE : View.GONE);\r\n            btnHighlight.setEnabled(checked && cbHighlight.isEnabled());\r\n        }\r\n    });\r\n    btnHighlight.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            int editTextColor = Helper.resolveColor(ActivityWidgetUnified.this, android.R.attr.editTextColor);\r\n            ColorPickerDialogBuilder.with(ActivityWidgetUnified.this).setTitle(R.string.title_advanced_highlight_color).showColorEdit(true).setColorEditTextColor(editTextColor).wheelType(ColorPickerView.WHEEL_TYPE.FLOWER).density(6).lightnessSliderOnly().setPositiveButton(android.R.string.ok, new ColorPickerClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int selectedColor, Integer[] allColors) {\r\n                    btnHighlight.setColor(selectedColor);\r\n                }\r\n            }).setNegativeButton(R.string.title_reset, new DialogInterface.OnClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    btnHighlight.setColor(Color.TRANSPARENT);\r\n                }\r\n            }).build().show();\r\n        }\r\n    });\r\n    btnColor.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            int color = btnColor.getColor();\r\n            int editTextColor = Helper.resolveColor(ActivityWidgetUnified.this, android.R.attr.editTextColor);\r\n            if (color == Color.TRANSPARENT) {\r\n                color = Color.WHITE;\r\n                if (cbSemiTransparent.isChecked() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\r\n                    color = ColorUtils.setAlphaComponent(color, 127);\r\n            }\r\n            ColorPickerDialogBuilder.with(ActivityWidgetUnified.this).setTitle(R.string.title_widget_background).showColorEdit(true).setColorEditTextColor(editTextColor).wheelType(ColorPickerView.WHEEL_TYPE.FLOWER).density(6).initialColor(color).showLightnessSlider(true).showAlphaSlider(Build.VERSION.SDK_INT >= Build.VERSION_CODES.S).setPositiveButton(android.R.string.ok, new ColorPickerClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int selectedColor, Integer[] allColors) {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\r\n                        cbSemiTransparent.setChecked(false);\r\n                    btnColor.setColor(selectedColor);\r\n                }\r\n            }).setNegativeButton(R.string.title_transparent, new DialogInterface.OnClickListener() {\r\n\r\n                @Override\r\n                public void onClick(DialogInterface dialog, int which) {\r\n                    cbSemiTransparent.setChecked(false);\r\n                    btnColor.setColor(Color.TRANSPARENT);\r\n                }\r\n            }).build().show();\r\n        }\r\n    });\r\n    btnSave.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            EntityAccount account = (EntityAccount) spAccount.getSelectedItem();\r\n            TupleFolderEx folder = (TupleFolderEx) spFolder.getSelectedItem();\r\n            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ActivityWidgetUnified.this);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            if (account != null && account.id > 0)\r\n                if (folder != null && folder.id > 0)\r\n                    editor.putString(\"widget.\" + appWidgetId + \".name\", folder.getDisplayName(ActivityWidgetUnified.this));\r\n                else\r\n                    editor.putString(\"widget.\" + appWidgetId + \".name\", account.name);\r\n            else\r\n                editor.remove(\"widget.\" + appWidgetId + \".name\");\r\n            int font = spFontSize.getSelectedItemPosition();\r\n            int padding = spPadding.getSelectedItemPosition();\r\n            editor.putLong(\"widget.\" + appWidgetId + \".account\", account == null ? -1L : account.id);\r\n            editor.putLong(\"widget.\" + appWidgetId + \".folder\", folder == null ? -1L : folder.id);\r\n            editor.putString(\"widget.\" + appWidgetId + \".type\", folder == null ? null : folder.type);\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".unseen\", cbUnseen.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".daynight\", cbDayNight.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".flagged\", cbFlagged.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".highlight\", cbHighlight.isChecked());\r\n            editor.putInt(\"widget.\" + appWidgetId + \".highlight_color\", btnHighlight.getColor());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".semi\", cbSemiTransparent.isChecked());\r\n            editor.putInt(\"widget.\" + appWidgetId + \".background\", btnColor.getColor());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".separators\", cbSeparatorLines.isChecked());\r\n            editor.putInt(\"widget.\" + appWidgetId + \".font\", tinyOut(font));\r\n            editor.putInt(\"widget.\" + appWidgetId + \".padding\", tinyOut(padding));\r\n            editor.putInt(\"widget.\" + appWidgetId + \".subject_lines\", spSubjectLines.getSelectedItemPosition() + 1);\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".avatars\", cbAvatars.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".account_name\", cbAccountName.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".caption\", cbCaption.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".refresh\", cbRefresh.isChecked());\r\n            editor.putBoolean(\"widget.\" + appWidgetId + \".compose\", cbCompose.isChecked());\r\n            editor.putInt(\"widget.\" + appWidgetId + \".version\", BuildConfig.VERSION_CODE);\r\n            editor.apply();\r\n            WidgetUnified.init(ActivityWidgetUnified.this, appWidgetId);\r\n            setResult(RESULT_OK, resultValue);\r\n            finish();\r\n        }\r\n    });\r\n    adapterAccount = new ArrayAdapter<>(this, R.layout.spinner_item1, android.R.id.text1, new ArrayList<EntityAccount>());\r\n    adapterAccount.setDropDownViewResource(R.layout.spinner_item1_dropdown);\r\n    spAccount.setAdapter(adapterAccount);\r\n    adapterFolder = new ArrayAdapter<TupleFolderEx>(this, R.layout.spinner_item1, android.R.id.text1, new ArrayList<TupleFolderEx>()) {\r\n\r\n        @NonNull\r\n        @Override\r\n        public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\r\n            return localize(position, super.getView(position, convertView, parent));\r\n        }\r\n\r\n        @Override\r\n        public View getDropDownView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\r\n            return localize(position, super.getDropDownView(position, convertView, parent));\r\n        }\r\n\r\n        private View localize(int position, View view) {\r\n            TupleFolderEx folder = getItem(position);\r\n            if (folder != null) {\r\n                TextView tv = view.findViewById(android.R.id.text1);\r\n                tv.setText(EntityFolder.localizeName(view.getContext(), folder.name));\r\n            }\r\n            return view;\r\n        }\r\n    };\r\n    adapterFolder.setDropDownViewResource(R.layout.spinner_item1_dropdown);\r\n    spFolder.setAdapter(adapterFolder);\r\n    spAccount.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            EntityAccount account = (EntityAccount) spAccount.getAdapter().getItem(position);\r\n            setFolders(account.id);\r\n            cbAccountName.setEnabled(account.id < 0);\r\n        }\r\n\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n            setFolders(-1);\r\n        }\r\n\r\n        private void setFolders(long account) {\r\n            Bundle args = new Bundle();\r\n            args.putLong(\"account\", account);\r\n            new SimpleTask<List<TupleFolderEx>>() {\r\n\r\n                @Override\r\n                protected List<TupleFolderEx> onExecute(Context context, Bundle args) {\r\n                    long account = args.getLong(\"account\");\r\n                    DB db = DB.getInstance(context);\r\n                    List<TupleFolderEx> folders = db.folder().getFoldersEx(account);\r\n                    if (folders != null && folders.size() > 0)\r\n                        Collections.sort(folders, folders.get(0).getComparator(context));\r\n                    return folders;\r\n                }\r\n\r\n                @Override\r\n                protected void onExecuted(Bundle args, List<TupleFolderEx> folders) {\r\n                    if (folders == null)\r\n                        folders = new ArrayList<>();\r\n                    TupleFolderEx unified = new TupleFolderEx();\r\n                    unified.id = -1L;\r\n                    unified.name = getString(R.string.title_widget_folder_unified);\r\n                    folders.add(0, unified);\r\n                    adapterFolder.clear();\r\n                    adapterFolder.addAll(folders);\r\n                    int select = 0;\r\n                    for (int i = 0; i < folders.size(); i++) if (folders.get(i).id.equals(folder)) {\r\n                        select = i;\r\n                        break;\r\n                    }\r\n                    spFolder.setSelection(select);\r\n                }\r\n\r\n                @Override\r\n                protected void onException(Bundle args, Throwable ex) {\r\n                    Log.unexpectedError(getSupportFragmentManager(), ex);\r\n                }\r\n            }.execute(ActivityWidgetUnified.this, args, \"widget:folders\");\r\n        }\r\n    });\r\n    List<String> sizes = new ArrayList<>();\r\n    sizes.addAll(Arrays.asList(getResources().getStringArray(R.array.fontSizeNames)));\r\n    sizes.add(1, getString(R.string.title_size_tiny));\r\n    adapterFontSize = new ArrayAdapter<>(this, R.layout.spinner_item1, android.R.id.text1, sizes);\r\n    adapterFontSize.setDropDownViewResource(R.layout.spinner_item1_dropdown);\r\n    spFontSize.setAdapter(adapterFontSize);\r\n    adapterPadding = new ArrayAdapter<>(this, R.layout.spinner_item1, android.R.id.text1, sizes);\r\n    adapterPadding.setDropDownViewResource(R.layout.spinner_item1_dropdown);\r\n    spPadding.setAdapter(adapterPadding);\r\n    // Initialize\r\n    cbUnseen.setChecked(unseen);\r\n    cbFlagged.setChecked(flagged);\r\n    cbDayNight.setChecked(daynight);\r\n    cbDayNight.setVisibility(Build.VERSION.SDK_INT < Build.VERSION_CODES.S ? View.GONE : View.VISIBLE);\r\n    cbHighlight.setChecked(highlight);\r\n    cbHighlight.setEnabled(!daynight);\r\n    btnHighlight.setVisibility(highlight ? View.VISIBLE : View.GONE);\r\n    btnHighlight.setColor(highlight_color);\r\n    btnHighlight.setEnabled(highlight && !daynight);\r\n    cbSemiTransparent.setChecked(semi);\r\n    cbSemiTransparent.setEnabled(!daynight);\r\n    btnColor.setColor(background);\r\n    btnColor.setEnabled(!daynight);\r\n    cbSeparatorLines.setChecked(separators);\r\n    spFontSize.setSelection(tinyIn(font));\r\n    spPadding.setSelection(tinyIn(padding));\r\n    cbAvatars.setChecked(avatars);\r\n    cbAccountName.setChecked(account_name);\r\n    spSubjectLines.setSelection(subject_lines - 1);\r\n    tvSubjectLinesHint.setText(getString(R.string.title_advanced_preview_lines_hint, NF.format(HtmlHelper.PREVIEW_SIZE)));\r\n    cbCaption.setChecked(caption);\r\n    cbRefresh.setChecked(refresh);\r\n    cbCompose.setChecked(compose);\r\n    grpReady.setVisibility(View.GONE);\r\n    pbWait.setVisibility(View.VISIBLE);\r\n    setResult(RESULT_CANCELED, resultValue);\r\n    Bundle args = new Bundle();\r\n    new SimpleTask<List<EntityAccount>>() {\r\n\r\n        @Override\r\n        protected List<EntityAccount> onExecute(Context context, Bundle args) {\r\n            DB db = DB.getInstance(context);\r\n            return db.account().getSynchronizingAccounts(null);\r\n        }\r\n\r\n        @Override\r\n        protected void onExecuted(Bundle args, List<EntityAccount> accounts) {\r\n            if (accounts == null)\r\n                accounts = new ArrayList<>();\r\n            EntityAccount all = new EntityAccount();\r\n            all.id = -1L;\r\n            all.name = getString(R.string.title_widget_account_all);\r\n            all.primary = false;\r\n            accounts.add(0, all);\r\n            adapterAccount.addAll(accounts);\r\n            for (int i = 0; i < accounts.size(); i++) if (accounts.get(i).id.equals(account)) {\r\n                spAccount.setSelection(i);\r\n                break;\r\n            }\r\n            grpReady.setVisibility(View.VISIBLE);\r\n            pbWait.setVisibility(View.GONE);\r\n        }\r\n\r\n        @Override\r\n        protected void onException(Bundle args, Throwable ex) {\r\n            Log.unexpectedError(getSupportFragmentManager(), ex);\r\n        }\r\n    }.execute(this, args, \"widget:accounts\");\r\n}\n--------------------------------------------------\n", "private int tinyIn(int value) {\r\n    if (value == 4)\r\n        return 1;\r\n    else if (value >= 1)\r\n        return value + 1;\r\n    else\r\n        return value;\r\n}" ],
  "VinylMusicPlayer/1079" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import java.util.Comparator;\r\nimport java.util.Comparator\nstatic SwatchComparator getInstance() {\r\n    if (sInstance == null) {\r\n        sInstance = new SwatchComparator();\r\n    }\r\n    return sInstance;\r\n}" ],
  "VinylMusicPlayer/802" : [ "dialogConfirmed(binding)\n--------------------------------------------------\ndialogConfirmed()", "private fun dialogConfirmed() {\r\n        dialog?.dismiss()\r\n        callback()\r\n    }" ],
  "MaterialFiles/240" : [ "        } else {\n            super.onMenuItemClick(item)\r\n        }", "import org.tasks.data.Place\nimport org.tasks.R\nimport android.view.MenuItem\noverride fun onMenuItemClick(item: MenuItem): Boolean =\r\n            if (item.itemId == R.id.menu_search) {\r\n                searchPlace()\r\n                true\r\n            } else false\nimport android.view.MenuItem\nimport org.tasks.R\nimport org.tasks.data.Place" ],
  "VinylMusicPlayer/801" : [ "/**\r\n * Updates default language with forced one\r\n */\r\n@SuppressLint(\"ApplySharedPref\")\r\npublic static Context updateLanguage(Context ctx, String lang) {\r\n    String language = Prefs.getString(PREF_LANG, \"\");\r\n    Locale locale = null;\r\n    if (TextUtils.isEmpty(language) && lang == null) {\r\n        locale = Locale.getDefault();\r\n    } else if (lang != null) {\r\n        locale = getLocale(lang);\r\n        Prefs.edit().putString(PREF_LANG, lang).commit();\r\n    } else if (!TextUtils.isEmpty(language)) {\r\n        locale = getLocale(language);\r\n    }\r\n    return setLocale(ctx, locale);\r\n}\n--------------------------------------------------\npublic static Context resetSystemLanguage(Context ctx) {\r\n    Prefs.edit().remove(PREF_LANG).apply();\r\n    return setLocale(ctx, Locale.getDefault());\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.res.Configuration;\r\nimport java.util.Locale;\r\nimport java.util.Locale\nimport android.content.res.Configuration\nimport android.content.Context\nprivate static Context setLocale(Context context, Locale locale) {\r\n    Configuration configuration = context.getResources().getConfiguration();\r\n    configuration.locale = locale;\r\n    context.getResources().updateConfiguration(configuration, null);\r\n    return context;\r\n}" ],
  "VinylMusicPlayer/807" : [ "static Boolean isIgnoringOptimizations(Context context) {\r\n    try {\r\n        if (isArc() || isWatch(context))\r\n            return true;\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M)\r\n            return null;\r\n        PowerManager pm = Helper.getSystemService(context, PowerManager.class);\r\n        if (pm == null)\r\n            return null;\r\n        return pm.isIgnoringBatteryOptimizations(BuildConfig.APPLICATION_ID);\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n        return null;\r\n    }\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.Context\nstatic boolean isWatch(Context context) {\r\n    if (isSmartwatch == null)\r\n        isSmartwatch = _isWatch(context);\r\n    return isSmartwatch;\r\n}" ],
  "Trail-Sense/450" : [ "this.viewModel.outputs.showErrorDialog()\n--------------------------------------------------\nshowErrorDialog()", "private fun showErrorDialog() {\r\n        if (!errorDialog.isShowing) {\r\n            errorDialog.show()\r\n        }\r\n    }" ],
  "MaterialFiles/253" : [ "", "import android.app.Activity;\r\nimport android.content.Context;\r\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic void onAttach(Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        if (context instanceof Activity)\r\n            mCallback = (OnEditToolFragmentSelectedListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.toString() + \" must implement OnEditToolSelectedListener\");\r\n    }\r\n}" ],
  "Trail-Sense/452" : [ "{\r\n        storage.deleteAll()\r\n    }\n--------------------------------------------------\ndao.deleteAll()\n--------------------------------------------------\nappDatabase.walletsDao().deleteAll()", "fun deleteAll() {\r\n        wc2Service.deleteAllPairings()\r\n\r\n        updatePairings()\r\n    }" ],
  "Trail-Sense/453" : [ "filter.isFilterUpcoming.isNullOrFalse()\n--------------------------------------------------\nfilter.isFilterUnwatched.isNullOrFalse()", "private fun Boolean?.isNullOrFalse(): Boolean {\r\n        if (this == null) return true\r\n        return !this\r\n    }" ],
  "MaterialFiles/255" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/454" : [ "onError(error)", "import de.grobox.transportr.ui.LceAnimator\nimport android.view.View\nprivate fun onError(error: String?) {\r\n        if (error == null) return\r\n        errorText.text = error\r\n        LceAnimator.showErrorView(progressBar, list, errorLayout)\r\n    }\nImport(names=[de, grobox, transportr, ui, LceAnimator], wildcard=false, alias=null)" ],
  "Trail-Sense/455" : [ "", "import android.view.View;\r\nimport android.view.View\npublic void setOverlay(View overlay) {\r\n    this.overlay = overlay;\r\n    this.overlay.setOnClickListener(v -> performToggle());\r\n}" ],
  "MaterialFiles/256" : [ "super.onCancel(dialog)", "import com.battlelancer.seriesguide.backend.RemoveCloudAccountDialogFragment.CanceledEvent\nimport android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCancel(dialog: DialogInterface) {\r\n        super.onCancel(dialog)\r\n        sendCanceledEvent()\r\n    }\nImport(names=[android, app, Dialog], wildcard=false, alias=null)\nImport(names=[android, content, DialogInterface], wildcard=false, alias=null)" ],
  "MaterialFiles/258" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport java.util.List\nimport android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    // Current directory chosen\r\n    if (mChosenDirectoryListener != null) {\r\n        // Call registered listener supplied with the chosen directory\r\n        mChosenDirectoryListener.onChosenDir(mDir);\r\n    }\r\n}" ],
  "Trail-Sense/458" : [ "systemUiHider.toggle()", "fun toggle() {\r\n        if (isVisible) {\r\n            hide()\r\n        } else {\r\n            show()\r\n        }\r\n    }" ],
  "Trail-Sense/459" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1063" : [ "", "import android.content.Context;\r\nimport android.content.UriPermission;\r\nimport android.net.Uri;\r\nimport java.util.List;\r\nimport code.name.monkey.retromusic.R\nimport java.util.List\nimport android.net.Uri\nimport android.content.UriPermission\nimport android.content.Context\npublic static boolean isSDCardAccessGranted(Context context) {\r\n    if (!isTreeUriSaved(context))\r\n        return false;\r\n    String sdcardUri = PreferenceUtil.INSTANCE.getSafSdCardUri();\r\n    List<UriPermission> perms = context.getContentResolver().getPersistedUriPermissions();\r\n    for (UriPermission perm : perms) {\r\n        if (perm.getUri().toString().equals(sdcardUri) && perm.isWritePermission())\r\n            return true;\r\n    }\r\n    return false;\r\n}" ],
  "VinylMusicPlayer/1061" : [ "", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.R\nimport java.util.List\npublic static boolean isSAFRequiredForSongs(List<Song> songs) {\r\n    for (Song song : songs) {\r\n        if (isSAFRequired(song))\r\n            return true;\r\n    }\r\n    return false;\r\n}" ],
  "VinylMusicPlayer/1066" : [ "", "import androidx.annotation.Nullable;\r\nimport de.schildbach.pte.NetworkId;\r\nimport de.schildbach.pte.NetworkId\nimport androidx.annotation.Nullable\nimport androidx.room.TypeConverter\n@TypeConverter\r\npublic static String fromNetworkId(@Nullable NetworkId networkId) {\r\n    if (networkId == null)\r\n        return null;\r\n    return networkId.name();\r\n}" ],
  "VinylMusicPlayer/1064" : [ "public void removePath(File file) {\r\n    final SQLiteDatabase database = getWritableDatabase();\r\n    String path = FileUtil.safeGetCanonicalPath(file);\r\n    database.delete(BlacklistStoreColumns.NAME, BlacklistStoreColumns.PATH + \"=?\", new String[] { path });\r\n    notifyMediaStoreChanged();\r\n}\n--------------------------------------------------\npublic void clear() {\r\n    final SQLiteDatabase database = getWritableDatabase();\r\n    database.delete(BlacklistStoreColumns.NAME, null, null);\r\n    notifyMediaStoreChanged();\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.net.Uri;\r\nimport android.util.Log;\r\nimport code.name.monkey.retromusic.R\nimport java.io.File\nimport org.jaudiotagger.audio.generic.Utils\nimport android.util.Log\nimport android.net.Uri\nimport android.content.Context\npublic static void delete(Context context, String path, Uri safUri) {\r\n    if (isSAFRequired(path)) {\r\n        deleteSAF(context, path, safUri);\r\n    } else {\r\n        try {\r\n            deleteFile(path);\r\n        } catch (NullPointerException e) {\r\n            Log.e(\"MusicUtils\", \"Failed to find file \" + path);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}" ],
  "Iconify/772" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/771" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1092" : [ "public void setActiveOrAdd(@NonNull Crumb crumb, boolean forceRecreate) {\r\n    if (forceRecreate || !setActive(crumb)) {\r\n        clearCrumbs();\r\n        final List<File> newPathSet = new ArrayList<>();\r\n        newPathSet.add(0, crumb.getFile());\r\n        File p = crumb.getFile();\r\n        while ((p = p.getParentFile()) != null) {\r\n            newPathSet.add(0, p);\r\n        }\r\n        for (int index = 0; index < newPathSet.size(); index++) {\r\n            final File fi = newPathSet.get(index);\r\n            crumb = new Crumb(fi);\r\n            // Restore scroll positions saved before clearing\r\n            if (mOldCrumbs != null) {\r\n                for (Iterator<Crumb> iterator = mOldCrumbs.iterator(); iterator.hasNext(); ) {\r\n                    Crumb old = iterator.next();\r\n                    if (old.equals(crumb)) {\r\n                        crumb.setScrollPosition(old.getScrollPosition());\r\n                        // minimize number of linear passes by removing un-used crumbs from\r\n                        iterator.remove();\r\n                        // history\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            addCrumb(crumb, true);\r\n        }\r\n        // History no longer needed\r\n        mOldCrumbs = null;\r\n    }\r\n}\n--------------------------------------------------\n", "import java.util.ArrayList;\r\nimport java.util.List\nimport java.util.ArrayList\nimport android.view.View\npublic void clearCrumbs() {\r\n    try {\r\n        mOldCrumbs = new ArrayList<>(mCrumbs);\r\n        mCrumbs.clear();\r\n        mChildFrame.removeAllViews();\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}" ],
  "Trail-Sense/461" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/462" : [ "bm.getMaximalSquareBounds()", "import org.videolan.vlc.R\nprivate fun Bitmap.getMaximalSquareBounds() = when {\r\n        width > height -> Rect((width - height) / 2, 0, height + ((width - height) / 2), height)\r\n        width < height -> Rect(0, (height - width) / 2, width, width + ((height - width) / 2))\r\n        else -> Rect(0, 0, width, height)\r\n    }\nImport(names=[org, videolan, vlc, R], wildcard=false, alias=null)" ],
  "Trail-Sense/1300" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        computeTextSize()\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "Trail-Sense/464" : [ "binding.addOnCard.setUpItemsAdapter(rewardItemAdapter, LinearLayoutManager(context()))", "import com.kickstarter.ui.adapters.RewardItemsAdapter\nimport com.kickstarter.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nfun setUpItemsAdapter(rewardItemsAdapter: RewardItemsAdapter, layoutManager: RecyclerView.LayoutManager) {\r\n        binding.itemsContainer.addOnItemRecyclerView.apply {\r\n            adapter = rewardItemsAdapter\r\n            this.layoutManager = layoutManager\r\n        }\r\n    }\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)\nImport(names=[com, kickstarter, R], wildcard=false, alias=null)\nImport(names=[com, kickstarter, ui, adapters, RewardItemsAdapter], wildcard=false, alias=null)" ],
  "Iconify/779" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/465" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1304" : [ "drawNotesIndicator(canvas, color, em, notes)", "import android.view.View\nimport android.graphics.Paint\nimport android.graphics.Canvas\nfun View.drawNotesIndicator(canvas: Canvas, color: Int, size: Float, notes: String) {\r\n    val pNotesIndicator = Paint()\r\n    pNotesIndicator.color = color\r\n    if (notes.isNotBlank()) {\r\n        val cy = 0.8f * size\r\n        canvas.drawCircle(width.toFloat() - cy, cy, 8f, pNotesIndicator)\r\n    }\r\n}\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)\nImport(names=[android, graphics, Paint], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Trail-Sense/467" : [ "\n            addFolderName(details.folder)\r\n        }", "import com.mikepenz.fastadapter.GenericItem\nimport com.fsck.k9.ui.R\nprivate fun MutableList<GenericItem>.addFolderName(folder: FolderInfoUi?) {\r\n        if (folder != null) {\r\n            val folderNameItem = FolderNameItem(\r\n                displayName = folder.displayName,\r\n                iconResourceId = folderIconProvider.getFolderIcon(folder.type),\r\n            )\r\n            add(folderNameItem)\r\n        } else {\r\n            add(EmptyItem())\r\n        }\r\n    }\nimport com.fsck.k9.ui.R\nimport com.mikepenz.fastadapter.GenericItem" ],
  "MaterialFiles/267" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "Trail-Sense/1305" : [ "HorizontalAdapterHelper.getItemViewType(position, itemCount)\n--------------------------------------------------\ngetItemViewType(position)", "import code.name.monkey.retromusic.R\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\n        return if (position == 0) {\n            HEADER\n        } else {\n            ITEM\n        }\n    }\nimport android.view.View\nimport code.name.monkey.retromusic.R" ],
  "Iconify/776" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Trail-Sense/1302" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "Trail-Sense/1308" : [ "        return ImageLoader.Builder(this)\n            .crossfade(true)\r\n            .components {\n--------------------------------------------------\n                    val last = getLastData(\"${type}_${period}\", chartData)\n                    val advice = last?.let { cross(lastRate, it) } ?: Advice.NODATA\r\n                    maItems.add(Item(name = \"${type.uppercase()} $period\", advice = advice))\n--------------------------------------------------\n\n            // Calculate cross advices\r\n            val ema25 = getLastData(\"ema_25\", chartData)\n--------------------------------------------------\n            val ema50 = getLastData(\"ema_50\", chartData)\n            val crossAdvice = if (ema25 != null && ema50 != null) {\r\n                cross(ema25, ema50)\n--------------------------------------------------\n            val crossAdvice = if (ema25 != null && ema50 != null) {\n                cross(ema25, ema50)\r\n            } else {\n--------------------------------------------------\n\n            maItems.add(Item(name = \"EMA Cross 25,50\", advice = crossAdvice))\r\n            sectionItems.add(SectionItem(name = \"Moving Averages\", items = maItems))\n--------------------------------------------------\n            val macdAdvice: Advice = if (macdData != null && macdSignalData != null) {\n                cross(macdSignalData, macdData)\r\n            } else Advice.NODATA", "private fun cross(value1: Float, value2: Float): Advice {\r\n        return when {\r\n            value1 > value2 -> Advice.BUY\r\n            value1 < value2 -> Advice.SELL\r\n            else -> Advice.NEUTRAL\r\n        }\r\n    }" ],
  "Trail-Sense/1306" : [ "FileUtils.getParent(mrl)\n--------------------------------------------------\nFileUtils.getParent(path)\n--------------------------------------------------\nFileUtils.getParent(uri.toString())", "fun getParent(path: String?): String? {\r\n        if (path == null || path == \"/\")\r\n            return path\r\n        var parentPath: String = path\r\n        if (parentPath.endsWith(\"/\"))\r\n            parentPath = parentPath.substring(0, parentPath.length - 1)\r\n        val index = parentPath.lastIndexOf('/')\r\n        if (index > 0) {\r\n            parentPath = parentPath.substring(0, index)\r\n        } else if (index == 0)\r\n            parentPath = \"/\"\r\n        return parentPath\r\n    }" ],
  "Trail-Sense/1307" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1096" : [ "@Override\r\nprotected void applyCustomTheme() {\r\n    applyAppBarLayoutAndCollapsingToolbarLayoutAndToolbarTheme(appBarLayout, collapsingToolbarLayout, toolbar);\r\n    coordinatorLayout.setBackgroundColor(mCustomThemeWrapper.getBackgroundColor());\r\n    changeColorTextView(content, mCustomThemeWrapper.getPrimaryTextColor());\r\n    if (typeface != null) {\r\n        Utils.setFontToAllTextViews(coordinatorLayout, typeface);\r\n    }\r\n}\n--------------------------------------------------\nprivate void changeColorTextView(ViewGroup viewGroup, int color) {\r\n    final int childCount = viewGroup.getChildCount();\r\n    for (int i = 0; i < childCount; i++) {\r\n        View child = viewGroup.getChildAt(i);\r\n        if (child instanceof ViewGroup) {\r\n            changeColorTextView((ViewGroup) child, color);\r\n        } else if (child instanceof TextView) {\r\n            ((TextView) child).setTextColor(color);\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nprivate void changeColorTextView(ViewGroup viewGroup, int color) {\r\n    final int childCount = viewGroup.getChildCount();\r\n    for (int i = 0; i < childCount; i++) {\r\n        View child = viewGroup.getChildAt(i);\r\n        if (child instanceof ViewGroup) {\r\n            changeColorTextView((ViewGroup) child, color);\r\n        } else if (child instanceof TextView) {\r\n            ((TextView) child).setTextColor(color);\r\n        }\r\n    }\r\n}" ],
  "VinylMusicPlayer/1095" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1093" : [ "public void setActiveOrAdd(@NonNull Crumb crumb, boolean forceRecreate) {\r\n    if (forceRecreate || !setActive(crumb)) {\r\n        clearCrumbs();\r\n        final List<File> newPathSet = new ArrayList<>();\r\n        newPathSet.add(0, crumb.getFile());\r\n        File p = crumb.getFile();\r\n        while ((p = p.getParentFile()) != null) {\r\n            newPathSet.add(0, p);\r\n        }\r\n        for (int index = 0; index < newPathSet.size(); index++) {\r\n            final File fi = newPathSet.get(index);\r\n            crumb = new Crumb(fi);\r\n            // Restore scroll positions saved before clearing\r\n            if (mOldCrumbs != null) {\r\n                for (Iterator<Crumb> iterator = mOldCrumbs.iterator(); iterator.hasNext(); ) {\r\n                    Crumb old = iterator.next();\r\n                    if (old.equals(crumb)) {\r\n                        crumb.setScrollPosition(old.getScrollPosition());\r\n                        // minimize number of linear passes by removing un-used crumbs from\r\n                        iterator.remove();\r\n                        // history\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            addCrumb(crumb, true);\r\n        }\r\n        // History no longer needed\r\n        mOldCrumbs = null;\r\n    }\r\n}\n--------------------------------------------------\n", "private boolean setActive(Crumb newActive) {\r\n    mActive = mCrumbs.indexOf(newActive);\r\n    invalidateActivatedAll();\r\n    boolean success = mActive > -1;\r\n    if (success) {\r\n        requestLayout();\r\n    }\r\n    return success;\r\n}" ],
  "VinylMusicPlayer/1099" : [ "", "public void restoreFromStateWrapper(SavedStateWrapper mSavedState) {\r\n    if (mSavedState != null) {\r\n        mActive = mSavedState.mActive;\r\n        for (Crumb c : mSavedState.mCrumbs) {\r\n            addCrumb(c, false);\r\n        }\r\n        requestLayout();\r\n        setVisibility(mSavedState.mVisibility);\r\n    }\r\n}" ],
  "Iconify/300" : [ "public static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\npublic static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.graphics.Color\n@NonNull\r\npublic static Palette.Swatch getSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.WHITE, 1);\r\n    }\r\n    return getBestPaletteSwatchFrom(palette.getSwatches());\r\n}" ],
  "Iconify/783" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/782" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1081" : [ "private void bindTo(EntityAttachment attachment) {\r\n    view.setAlpha(!attachment.isAttachment() ? Helper.LOW_LIGHT : 1.0f);\r\n    ViewGroup.MarginLayoutParams lparam = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\r\n    lparam.setMarginStart(attachment.subsequence == null ? 0 : dp12);\r\n    view.setLayoutParams(lparam);\r\n    ibDelete.setVisibility(readonly ? View.GONE : View.VISIBLE);\r\n    if (!readonly && attachment.isImage()) {\r\n        if (attachment.available) {\r\n            Bitmap bm = ImageHelper.decodeImage(attachment.getFile(context), attachment.getMimeType(), dp36);\r\n            if (bm == null)\r\n                ivType.setImageResource(R.drawable.twotone_broken_image_24);\r\n            else\r\n                ivType.setImageBitmap(bm);\r\n        } else\r\n            ivType.setImageResource(R.drawable.twotone_hourglass_top_24);\r\n        ivDisposition.setVisibility(View.GONE);\r\n    } else {\r\n        int resid = 0;\r\n        String extension = Helper.guessExtension(attachment.getMimeType());\r\n        if (extension != null)\r\n            resid = context.getResources().getIdentifier(\"file_\" + extension, \"drawable\", context.getPackageName());\r\n        if (resid == 0)\r\n            ivType.setImageDrawable(null);\r\n        else\r\n            ivType.setImageResource(resid);\r\n        ivDisposition.setImageLevel(Part.INLINE.equals(attachment.disposition) ? 1 : 0);\r\n        ivDisposition.setVisibility(Part.ATTACHMENT.equals(attachment.disposition) || Part.INLINE.equals(attachment.disposition) ? View.VISIBLE : View.INVISIBLE);\r\n    }\r\n    boolean dangerous = Helper.DANGEROUS_EXTENSIONS.contains(Helper.getExtension(attachment.name));\r\n    tvName.setText(attachment.name);\r\n    tvName.setTextColor(dangerous ? colorWarning : textColorTertiary);\r\n    tvName.setTypeface(null, dangerous ? Typeface.BOLD : Typeface.NORMAL);\r\n    if (attachment.size != null)\r\n        tvSize.setText(Helper.humanReadableByteCount(attachment.size));\r\n    tvSize.setVisibility(attachment.size == null ? View.GONE : View.VISIBLE);\r\n    if (attachment.available) {\r\n        ivStatus.setImageResource(R.drawable.twotone_visibility_24);\r\n        ivStatus.setVisibility(View.VISIBLE);\r\n    } else {\r\n        if (attachment.progress == null) {\r\n            ivStatus.setImageResource(R.drawable.twotone_cloud_download_24);\r\n            ivStatus.setVisibility(View.VISIBLE);\r\n        } else\r\n            ivStatus.setVisibility(View.GONE);\r\n    }\r\n    ibSave.setVisibility(attachment.available ? View.VISIBLE : View.GONE);\r\n    ibScan.setVisibility(attachment.available && vt_enabled && !TextUtils.isEmpty(vt_apikey) && !BuildConfig.PLAY_STORE_RELEASE ? View.VISIBLE : View.GONE);\r\n    if (attachment.progress != null)\r\n        progressbar.setProgress(attachment.progress);\r\n    progressbar.setVisibility(attachment.progress == null || attachment.available ? View.GONE : View.VISIBLE);\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(attachment.type);\r\n    if (debug || BuildConfig.DEBUG) {\r\n        if (attachment.cid != null) {\r\n            sb.append(' ').append(attachment.cid);\r\n            if (attachment.related != null)\r\n                sb.append(' ').append(attachment.related);\r\n            sb.append(' ').append(attachment.section).append('/').append(attachment.sequence);\r\n        }\r\n        if (attachment.isEncryption())\r\n            sb.append(' ').append(attachment.encryption);\r\n    }\r\n    tvType.setText(sb.toString());\r\n    tvError.setText(attachment.error);\r\n    tvError.setTextColor(Helper.resolveColor(context, attachment.available ? R.attr.colorWarning : androidx.appcompat.R.attr.colorError));\r\n    tvError.setVisibility(attachment.error == null ? View.GONE : View.VISIBLE);\r\n    if (properties != null) {\r\n        String aid = properties.getValue(\"attachment\");\r\n        if (aid != null) {\r\n            if (attachment.id.equals(Long.parseLong(aid)) && attachment.available && attachment.size != null && attachment.size > 0) {\r\n                properties.setValue(\"attachment\", null);\r\n                onView(attachment);\r\n            }\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onChanged(@Nullable List<EntityAttachment> attachments) {\r\n    int inlineImages = 0;\r\n    int embeddedMessages = 0;\r\n    if (attachments != null)\r\n        for (EntityAttachment attachment : attachments) if (attachment.available)\r\n            if (attachment.isInline() && attachment.isImage())\r\n                inlineImages++;\r\n            else {\r\n                String mimeType = attachment.getMimeType();\r\n                if (\"text/x-amp-html\".equals(mimeType) || \"message/rfc822\".equals(mimeType))\r\n                    embeddedMessages++;\r\n            }\r\n    int lastInlineImages = 0;\r\n    int lastEmbeddedMessages = 0;\r\n    List<EntityAttachment> lastAttachments = properties.getAttachments(message.id);\r\n    if (lastAttachments != null)\r\n        for (EntityAttachment attachment : lastAttachments) if (attachment.available)\r\n            if (attachment.isInline() && attachment.isImage())\r\n                lastInlineImages++;\r\n            else {\r\n                String mimeType = attachment.getMimeType();\r\n                if (\"text/x-amp-html\".equals(mimeType) || \"message/rfc822\".equals(mimeType))\r\n                    lastEmbeddedMessages++;\r\n            }\r\n    boolean show_images = properties.getValue(\"images\", message.id);\r\n    boolean inline = prefs.getBoolean(\"inline_images\", false);\r\n    if (embeddedMessages > lastEmbeddedMessages || (inlineImages > lastInlineImages && (show_images || inline)))\r\n        bindBody(message, false);\r\n    bindAttachments(message, attachments, true);\r\n    if (!scroll)\r\n        properties.ready(message.id);\r\n}\n--------------------------------------------------\n", "import android.os.Build;\r\nimport android.os.Build\nstatic boolean isImage(String mimeType) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)\r\n        if (IMAGE_TYPES8.contains(mimeType))\r\n            return true;\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)\r\n        if (IMAGE_TYPES12.contains(mimeType))\r\n            return true;\r\n    return IMAGE_TYPES.contains(mimeType);\r\n}" ],
  "Iconify/780" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/471" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        computeTextSize()\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "Trail-Sense/473" : [ "{\n        val layout = layout ?: return super.getBaseline()\r\n        val baselineOffset = super.getBaseline() - layout.getLineBaseline(0)\n--------------------------------------------------\n        val layout = layout ?: return super.getBaseline()\n        val baselineOffset = super.getBaseline() - layout.getLineBaseline(0)\r\n        return baselineOffset + layout.getLineBaseline(layout.lineCount - 1)", "override fun getBaseline(): Int {\r\n        val layout = layout ?: return super.getBaseline()\r\n        val baselineOffset = super.getBaseline() - layout.getLineBaseline(0)\r\n        return baselineOffset + layout.getLineBaseline(layout.lineCount - 1)\r\n    }" ],
  "Trail-Sense/1311" : [ "ContextCompat.getDrawable(context, R.drawable.drawer_account_fallback)\n--------------------------------------------------\naccountFallbackImageProvider.getDrawable(color)\n--------------------------------------------------\nreturn getDrawable(typedValue.resourceId)", "import com.fsck.k9.ui.R\nimport androidx.core.graphics.BlendModeCompat\nimport androidx.core.graphics.BlendModeColorFilterCompat\nimport androidx.core.content.ContextCompat\nimport android.graphics.drawable.Drawable\nimport android.content.Context\nfun getDrawable(color: Int): Drawable {\r\n        val drawable = ContextCompat.getDrawable(context, R.drawable.drawer_account_fallback)\r\n            ?: error(\"Error loading drawable\")\r\n\r\n        return drawable.mutate().apply {\r\n            colorFilter = BlendModeColorFilterCompat.createBlendModeColorFilterCompat(color, BlendModeCompat.DST_OVER)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, graphics, drawable, Drawable], wildcard=false, alias=null)\nImport(names=[androidx, core, content, ContextCompat], wildcard=false, alias=null)\nImport(names=[androidx, core, graphics, BlendModeColorFilterCompat], wildcard=false, alias=null)\nImport(names=[androidx, core, graphics, BlendModeCompat], wildcard=false, alias=null)\nImport(names=[com, fsck, k9, ui, R], wildcard=false, alias=null)" ],
  "Trail-Sense/474" : [ "val p = calculatePadding(width, height, imageWidth, imageHeight)", "private fun calculatePadding(\r\n        entireWidth: Int,\r\n        entireHeight: Int,\r\n        imageWidth: Int,\r\n        imageHeight: Int\r\n    ): IntArray {\r\n        val w = ((entireWidth.toFloat() - imageWidth) / 2).toInt()\r\n        val h = ((entireHeight.toFloat() - imageHeight) / 2).toInt()\r\n        return intArrayOf(w, h, w, h)\r\n    }" ],
  "Trail-Sense/475" : [ "return convertToBitmap(wrapped)", "import org.tasks.R\nimport android.graphics.drawable.Drawable\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nprivate fun convertToBitmap(d: Drawable): Bitmap {\r\n        val bitmap =\r\n            Bitmap.createBitmap(d.intrinsicWidth, d.intrinsicHeight, Bitmap.Config.ARGB_8888)\r\n        val canvas = Canvas(bitmap)\r\n        d.setBounds(0, 0, canvas.width, canvas.height)\r\n        d.draw(canvas)\r\n        return bitmap\r\n    }\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)\nImport(names=[android, graphics, drawable, Drawable], wildcard=false, alias=null)" ],
  "Iconify/306" : [ "public static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\npublic static int getTextColor(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return -1;\r\n    }\r\n    int inverse = -1;\r\n    if (palette.getVibrantSwatch() != null) {\r\n        inverse = palette.getVibrantSwatch().getRgb();\r\n    } else if (palette.getLightVibrantSwatch() != null) {\r\n        inverse = palette.getLightVibrantSwatch().getRgb();\r\n    } else if (palette.getDarkVibrantSwatch() != null) {\r\n        inverse = palette.getDarkVibrantSwatch().getRgb();\r\n    }\r\n    int background = getSwatch(palette).getRgb();\r\n    if (inverse != -1) {\r\n        return ColorUtil.INSTANCE.getReadableText(inverse, background, 150);\r\n    }\r\n    return ColorUtil.INSTANCE.stripAlpha(getSwatch(palette).getTitleTextColor());\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.graphics.Color\n@NonNull\r\npublic static Palette.Swatch getSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.WHITE, 1);\r\n    }\r\n    return getBestPaletteSwatchFrom(palette.getSwatches());\r\n}" ],
  "Trail-Sense/1310" : [ "val roundedValue = getRoundedValue(initialValue, roundingMode)\n--------------------------------------------------\ngetRoundedValue(initialValue, roundingMode) * project.fxRate()", "import java.math.RoundingMode\nprivate fun getRoundedValue(initialValue: Double, roundingMode: RoundingMode): Float {\r\n        return if (roundingMode == RoundingMode.DOWN) {\r\n            Math.floor(initialValue).toFloat()\r\n        } else {\r\n            initialValue.toFloat()\r\n        }\r\n    }\nImport(names=[java, math, RoundingMode], wildcard=false, alias=null)" ],
  "Trail-Sense/1315" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Iconify/304" : [ "@ColorInt\r\npublic static int getBackgroundColor(@Nullable Palette palette) {\r\n    return getProperBackgroundSwatch(palette).getRgb();\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport android.graphics.Color\nprivate static Palette.Swatch getProperBackgroundSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n    if (palette.getDarkMutedSwatch() != null) {\r\n        return palette.getDarkMutedSwatch();\r\n    } else if (palette.getMutedSwatch() != null) {\r\n        return palette.getMutedSwatch();\r\n    } else if (palette.getLightMutedSwatch() != null) {\r\n        return palette.getLightMutedSwatch();\r\n    } else {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n}" ],
  "Trail-Sense/478" : [ "setDevice(intent.getStringExtra(EXTRA_PATH)!!, intent.getStringExtra(EXTRA_UUID)!!, intent.getBooleanExtra(EXTRA_SCAN, false))", "fun setDevice(path: String, uuid: String, scan: Boolean) {\r\n        this.path = path\r\n        this.uuid = uuid\r\n        this.scan = scan\r\n    }" ],
  "Iconify/787" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Iconify/301" : [ "@ColorInt\r\npublic static int getBackgroundColor(@Nullable Palette palette) {\r\n    return getProperBackgroundSwatch(palette).getRgb();\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport android.graphics.Color\nprivate static Palette.Swatch getProperBackgroundSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n    if (palette.getDarkMutedSwatch() != null) {\r\n        return palette.getDarkMutedSwatch();\r\n    } else if (palette.getMutedSwatch() != null) {\r\n        return palette.getMutedSwatch();\r\n    } else if (palette.getLightMutedSwatch() != null) {\r\n        return palette.getLightMutedSwatch();\r\n    } else {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n}" ],
  "Trail-Sense/479" : [ "                } else {\n                    clearUi()\r\n                    TaskListFragment.newTaskListFragment(newFilter)\n--------------------------------------------------\n        AndroidUtilities.assertMainThread()\n        clearUi()\r\n        return coroutineScope {\n--------------------------------------------------\nidToNode.clear()\n--------------------------------------------------\npurchases.clear()\n--------------------------------------------------\nEtebaseLocalCache.clear(context, username)\n--------------------------------------------------\nclear(context, it)\n--------------------------------------------------\njobs.clear()\n--------------------------------------------------\ntoolbar.menu.clear()\n--------------------------------------------------\nvtodoCache.clear()\n--------------------------------------------------\nEtebaseLocalCache.clear(context)\n--------------------------------------------------\nnotificationQueue.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ncaldavCalendars.clear()\n--------------------------------------------------\ntagDatas.clear()", "import timber.log.Timber\nfun clear() {\r\n        Timber.d(\"clear()\")\r\n        purchases.clear()\r\n        subscription.value = null\r\n    }\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Iconify/302" : [ "@ColorInt\r\npublic static int getBackgroundColor(@Nullable Palette palette) {\r\n    return getProperBackgroundSwatch(palette).getRgb();\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.Nullable\nimport android.graphics.Color\nprivate static Palette.Swatch getProperBackgroundSwatch(@Nullable Palette palette) {\r\n    if (palette == null) {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n    if (palette.getDarkMutedSwatch() != null) {\r\n        return palette.getDarkMutedSwatch();\r\n    } else if (palette.getMutedSwatch() != null) {\r\n        return palette.getMutedSwatch();\r\n    } else if (palette.getLightMutedSwatch() != null) {\r\n        return palette.getLightMutedSwatch();\r\n    } else {\r\n        return new Palette.Swatch(Color.BLACK, 1);\r\n    }\r\n}" ],
  "VinylMusicPlayer/1085" : [ "public View getView(int position, View convertView, ViewGroup parent) {\r\n    // User super class to create the View\r\n    View v = super.getView(position, convertView, parent);\r\n    Drawable icon = openPgpProviderList.get(position).icon;\r\n    ImageView iconView = v.findViewById(android.R.id.icon1);\r\n    iconView.setImageDrawable(icon);\r\n    if (position == 0) {\r\n        ((CheckedTextView) v.findViewById(android.R.id.text1)).setChecked(true);\r\n    }\r\n    return v;\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nimport android.view.ViewGroup;\r\nimport com.fsck.k9.ui.R;\r\nimport com.fsck.k9.view.RecipientSelectView.Recipient;\r\nimport com.fsck.k9.view.RecipientSelectView.Recipient\nimport com.fsck.k9.ui.R\nimport android.view.ViewGroup\nimport android.view.View\n@Override\r\npublic View getView(int position, View view, ViewGroup parent) {\r\n    if (view == null) {\r\n        view = newView(parent);\r\n    }\r\n    Recipient recipient = getItem(position);\r\n    bindView(view, recipient);\r\n    return view;\r\n}" ],
  "VinylMusicPlayer/1087" : [ "super.onAttachedToWindow()", "import android.os.Handler\noverride fun onAttachedToWindow() {\r\n    super.onAttachedToWindow()\r\n    countdownHandler.post(updateCallback)\r\n  }" ],
  "VinylMusicPlayer/1086" : [ "@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    decodeExtras();\r\n    // If the databases have already been upgraded there's no point in displaying this activity.\r\n    if (K9.areDatabasesUpToDate()) {\r\n        launchOriginalActivity();\r\n        return;\r\n    }\r\n    mPreferences = Preferences.getPreferences();\r\n    initializeLayout();\r\n    setupBroadcastReceiver();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    // Check if the upgrade was completed while the activity was paused.\r\n    if (K9.areDatabasesUpToDate()) {\r\n        launchOriginalActivity();\r\n        return;\r\n    }\r\n    // Register the broadcast receiver to listen for progress reports from\r\n    // DatabaseUpgradeService.\r\n    mLocalBroadcastManager.registerReceiver(mBroadcastReceiver, mIntentFilter);\r\n    // Now that the broadcast receiver was registered start DatabaseUpgradeService.\r\n    DatabaseUpgradeService.startService(this);\r\n}\n--------------------------------------------------\n", "import android.content.Intent\nimport android.app.Activity\n/**\r\n * Finish this activity and launch the original activity using the supplied intent.\r\n */\r\nprivate void launchOriginalActivity() {\r\n    finish();\r\n    startActivity(mStartIntent);\r\n}" ],
  "Iconify/354" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/327" : [ "TextTools.buildTitleAndSummary(context, R.string.pref_onlyfuture, R.string.pref_onlyfuturesummary)\n--------------------------------------------------\nTextTools.buildTitleAndSummary(context, R.string.pref_nospoilers, R.string.pref_nospoilers_summary)\n--------------------------------------------------\nbuildTitleAndSummary(context, R.string.pref_updatewifionly, R.string.pref_updatewifionlysummary)\n--------------------------------------------------\nTextTools.buildTitleAndSummary(context, filterDescription, stateDescription)\n--------------------------------------------------\nreturn buildTitleAndSummary(context, title, summary)", "import com.battlelancer.seriesguide.R\nimport androidx.annotation.StringRes\nimport android.text.Spannable\nimport android.content.Context\nfun buildTitleAndSummary(\r\n        context: Context,\r\n        @StringRes titleRes: Int,\r\n        @StringRes summaryRes: Int\r\n    ): Spannable {\r\n        val title = context.getString(titleRes)\r\n        val summary = context.getString(summaryRes)\r\n        return buildTitleAndSummary(context, title, summary)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, Spannable], wildcard=false, alias=null)\nImport(names=[androidx, annotation, StringRes], wildcard=false, alias=null)" ],
  "Iconify/352" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/329" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/353" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/251" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Iconify/351" : [ "@Override\r\npublic void onTransactionStatusClicked(String status) {\r\n    ArrayList<Integer> transIds = getTransactionIds();\r\n    if (setStatusCheckingAccount(convertArrayListToArray(transIds), status)) {\r\n        ((AllDataAdapter) getListAdapter()).clearPositionChecked();\r\n        loadData();\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n    DrawerMenuItem item = adapter.getItem(position);\r\n    switch(item.getId()) {\r\n        case R.id.menu_none:\r\n        case R.id.menu_reconciled:\r\n        case R.id.menu_follow_up:\r\n        case R.id.menu_duplicate:\r\n        case R.id.menu_void:\r\n            String status = item.getShortcut();\r\n            if (setStatusCheckingAccount(convertArrayListToArray(transIds), status)) {\r\n                ((AllDataAdapter) getListAdapter()).clearPositionChecked();\r\n                loadData();\r\n            }\r\n    }\r\n    dialog.dismiss();\r\n}\n--------------------------------------------------\n", "import java.util.ArrayList\nprivate int[] convertArrayListToArray(ArrayList<Integer> list) {\r\n    int[] result = new int[list.size()];\r\n    for (int i = 0; i < list.size(); i++) {\r\n        result[i] = list.get(i);\r\n    }\r\n    return result;\r\n}" ],
  "Neo-Backup/252" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/250" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/255" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/256" : [ "            TopToolBar(\n                title = stringResource(id = R.string.login_tout_navbar_title),\r\n                titleColor = colors.kds_support_700,\n--------------------------------------------------\n                onClickAction = onFacebookButtonClicked,\n                text = stringResource(id = R.string.login_tout_buttons_log_in_with_facebook),\r\n                isEnabled = true\n--------------------------------------------------\n                modifier = Modifier.testTag(LoginToutTestTag.FACEBOOK_DISCLAIMER.name),\n                text = stringResource(id = R.string.Facebook_login_disclaimer_update),\r\n                style = typography.caption1,\n--------------------------------------------------\n                onClickAction = onEmailLoginClicked,\n                text = stringResource(id = R.string.login_buttons_log_in_email),\r\n                isEnabled = true\n--------------------------------------------------\nthis.client.login(ep.first, ep.second)\n--------------------------------------------------\nloginUserCase.login(it.first.toBuilder().needsPassword(false).build(), accessToken)\n--------------------------------------------------\nclient.login(email, password, code)\n--------------------------------------------------\nclient.login(email, password)\n--------------------------------------------------\nlogin(it.first, it.second.email, it.second.password)\n--------------------------------------------------\ncurrentUser.login(newUser, accessToken)\n--------------------------------------------------\ncurrentUserV2.login(newUser, accessToken)\n--------------------------------------------------\nlogin(newUser, accessToken)", "import timber.log.Timber\nimport com.kickstarter.models.User\nimport com.kickstarter.libs.utils.KsOptional\noverride fun login(newUser: User, accessToken: String) {\r\n        Timber.d(\"Login user %s\", newUser.name())\r\n        accessTokenPreference.set(accessToken)\r\n        user.onNext(KsOptional.of(newUser))\r\n        deviceRegistrar.registerDevice()\r\n    }\nImport(names=[com, kickstarter, models, User], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "MaterialFiles/285" : [ "            if (folderTotal > 0) {\n                level = (MAX_PROGRESS * activityListener.getFolderCompleted() / folderTotal).coerceAtMost(MAX_PROGRESS)\r\n            }", "fun getFolderCompleted(): Int {\r\n            synchronized(lock) {\r\n                return folderCompleted\r\n            }\r\n        }" ],
  "Trail-Sense/882" : [ "ViewTools.setVectorDrawableLeft(textViewGridHeader, R.drawable.ic_trakt_icon_primary_20dp)\n--------------------------------------------------\nViewTools.setVectorDrawableLeft(binding.textViewGridLink, R.drawable.ic_trakt_icon_primary_24dp)", "import com.battlelancer.seriesguide.R\nimport androidx.appcompat.content.res.AppCompatResources\nimport androidx.annotation.DrawableRes\nimport android.widget.TextView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nimport android.content.res.Resources\nfun setVectorDrawableLeft(textView: TextView, @DrawableRes vectorRes: Int) {\r\n        val drawable = AppCompatResources.getDrawable(textView.context, vectorRes)\r\n        setCompoundDrawablesWithIntrinsicBounds(textView, drawable, null)\r\n    }\nImport(names=[android, widget, TextView], wildcard=false, alias=null)\nImport(names=[androidx, annotation, DrawableRes], wildcard=false, alias=null)\nImport(names=[androidx, appcompat, content, res, AppCompatResources], wildcard=false, alias=null)" ],
  "MaterialFiles/288" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/253" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/254" : [ "@Override\r\npublic void run() {\r\n    // Run in background thread\r\n    long start = new Date().getTime();\r\n    try {\r\n        if (keepawake)\r\n            wl.acquire();\r\n        else\r\n            wl.acquire(Helper.WAKELOCK_MAX);\r\n        if (log)\r\n            Log.i(\"Executing task=\" + name);\r\n        data = onExecute(tcontext, args);\r\n        elapsed = new Date().getTime() - start;\r\n        if (log)\r\n            Log.i(\"Executed task=\" + name + \" elapsed=\" + elapsed + \" ms\");\r\n    } catch (Throwable ex) {\r\n        if (ex instanceof IllegalArgumentException)\r\n            Log.i(ex);\r\n        else\r\n            Log.e(ex);\r\n        error = ex;\r\n    } finally {\r\n        if (wl.isHeld())\r\n            wl.release();\r\n        else if (!keepawake && !BuildConfig.PLAY_STORE_RELEASE && !Boolean.FALSE.equals(Helper.isIgnoringOptimizations(tcontext)))\r\n            Log.e(name + \" released elapse=\" + (new Date().getTime() - start));\r\n    }\r\n    // Run on UI thread\r\n    ApplicationEx.getMainHandler().post(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            state = owner.getLifecycle().getCurrentState();\r\n            if (state.equals(Lifecycle.State.DESTROYED)) {\r\n                // No delivery\r\n                cleanup(context);\r\n            } else {\r\n                owner.getLifecycle().removeObserver(watcher);\r\n                if (state.isAtLeast(Lifecycle.State.RESUMED)) {\r\n                    // Inline delivery\r\n                    Log.i(\"Deliver task \" + name + \" state=\" + state + \" elapse=\" + elapsed + \" ms\");\r\n                    deliver();\r\n                    cleanup(context);\r\n                } else {\r\n                    Log.i(\"Deferring task \" + name + \" state=\" + state);\r\n                    owner.getLifecycle().addObserver(new LifecycleObserver() {\r\n\r\n                        @OnLifecycleEvent(Lifecycle.Event.ON_ANY)\r\n                        public void onAny() {\r\n                            state = owner.getLifecycle().getCurrentState();\r\n                            if (state.equals(Lifecycle.State.DESTROYED)) {\r\n                                Log.i(\"Destroyed task \" + name);\r\n                                onDestroyed(args);\r\n                                owner.getLifecycle().removeObserver(this);\r\n                                cleanup(context);\r\n                            } else if (state.isAtLeast(Lifecycle.State.RESUMED)) {\r\n                                Log.i(\"Deferred delivery task \" + name);\r\n                                owner.getLifecycle().removeObserver(this);\r\n                                deliver();\r\n                                cleanup(context);\r\n                            } else\r\n                                Log.i(\"Deferring task \" + name + \" state=\" + state);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        private void deliver() {\r\n            if (\"androidx.fragment.app.FragmentViewLifecycleOwner\".equals(owner.getClass().getName()))\r\n                try {\r\n                    Field mFragment = owner.getClass().getDeclaredField(\"mFragment\");\r\n                    mFragment.setAccessible(true);\r\n                    Fragment fragment = (Fragment) mFragment.get(owner);\r\n                    if (fragment != null && (fragment.getContext() == null || fragment.getActivity() == null)) {\r\n                        // Since deliver is executed for resumed fragments only, this should never happen\r\n                        Log.e(\"Fragment without activity\" + \" task=\" + name + \" context=\" + (fragment.getContext() != null) + \" activity=\" + (fragment.getActivity() != null) + \" fragment=\" + fragment.getClass().getName() + \" lifecycle=\" + owner.getLifecycle().getCurrentState());\r\n                        return;\r\n                    }\r\n                } catch (Throwable ex) {\r\n                    Log.w(ex);\r\n                }\r\n            try {\r\n                onPostExecute(args);\r\n            } catch (Throwable ex) {\r\n                Log.e(ex);\r\n                try {\r\n                    onException(args, ex);\r\n                } catch (Throwable exex) {\r\n                    Log.e(exex);\r\n                }\r\n            } finally {\r\n                try {\r\n                    if (error == null) {\r\n                        if (log && BuildConfig.BETA_RELEASE) {\r\n                            Log.i(\"Crumb \" + name);\r\n                            Map<String, String> crumb = new HashMap<>();\r\n                            crumb.put(\"name\", name);\r\n                            Log.breadcrumb(\"task\", crumb);\r\n                        }\r\n                        onExecuted(args, (T) data);\r\n                    } else\r\n                        try {\r\n                            onException(args, error);\r\n                        } catch (Throwable exex) {\r\n                            Log.e(exex);\r\n                        }\r\n                } catch (Throwable ex) {\r\n                    Log.e(ex);\r\n                    try {\r\n                        onException(args, ex);\r\n                    } catch (Throwable exex) {\r\n                        Log.e(exex);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.os.Bundle\nimport android.content.Context\n@Override\r\nprotected DeepL.Translation onExecute(Context context, Bundle args) throws Throwable {\r\n    String text = args.getString(\"text\");\r\n    String target = args.getString(\"target\");\r\n    return DeepL.translate(text, false, target, context);\r\n}" ],
  "MaterialFiles/287" : [ "delegate.close()\n--------------------------------------------------\nclose()\n--------------------------------------------------\nsuper.close()\n--------------------------------------------------\nlockChannel?.close()", "override fun close() {\r\n            try {\r\n                lock.lock()\r\n                super.close()\r\n                dbRef.db = null\r\n                opened = false\r\n            } finally {\r\n                lock.unlock()\r\n            }\r\n        }" ],
  "Trail-Sense/883" : [ "val result = upload(context, showTraktId!!)\n--------------------------------------------------\nupload(context)\n--------------------------------------------------\nhexagonShowSync.get().upload(shows)\n--------------------------------------------------\nhexagonShowSync.get().upload(show)\n--------------------------------------------------\nreturn upload(shows)\n--------------------------------------------------\nupload(listOf(show))\n--------------------------------------------------\nupload(traktSync!!, showTraktId, syncSeasons, flag)\n--------------------------------------------------\nif (syncSeasons.isEmpty()) {\n    true\n} else upload(traktSync, showTraktId, syncSeasons, flag)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.uwetrottmann.seriesguide.backend.shows.model.Show\nimport com.uwetrottmann.seriesguide.backend.shows.model.SgCloudShow\nimport android.content.Context\nsuspend fun upload(show: SgCloudShow): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            upload(listOf(show))\r\n        }\r\n    }\nImport(names=[com, uwetrottmann, seriesguide, backend, shows, model, SgCloudShow], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/400" : [ "        actionModeCallback.showMarkAsRead(notAllRead)\n        actionModeCallback.showFlag(notAllStarred)\r\n    }", "import com.fsck.k9.mail.Flag\nimport androidx.core.view.isVisible\nfun showFlag(show: Boolean) {\r\n            if (!disableFlag) {\r\n                flag?.isVisible = show\r\n                unflag?.isVisible = !show\r\n            }\r\n        }\nimport androidx.core.view.isVisible\nimport com.fsck.k9.mail.Flag" ],
  "Neo-Backup/259" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Iconify/356" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/257" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Iconify/357" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/258" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Trail-Sense/403" : [ "updateIcon()", "import android.view.View\nimport android.graphics.drawable.Drawable\nprivate fun updateIcon() {\r\n        imageView?.visibility = if (iconVisible) View.VISIBLE else View.GONE\r\n        drawable?.let { imageView?.setImageDrawable(drawable) }\r\n        iconClickListener?.let { imageView?.setOnClickListener(it) }\r\n        tint?.let { imageView?.setColorFilter(it) }\r\n    }\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Trail-Sense/888" : [ "listener?.onAudioFocusLost(false)\n--------------------------------------------------\nlistener?.onAudioFocusLost(true)", "override fun onAudioFocusLost(transient: Boolean) {\r\n    if (state == State.PAUSED || state == State.STOPPED) {\r\n      return\r\n    }\r\n\r\n    pause(true)\r\n    shouldResumeOnFocusGain = transient\r\n  }" ],
  "Trail-Sense/406" : [ "CloseableUtils.close(bw)\n--------------------------------------------------\nCloseableUtils.close(output)\n--------------------------------------------------\nCloseableUtils.close(fos)\n--------------------------------------------------\nclose()\n--------------------------------------------------\ntipsDelegate.close()\n--------------------------------------------------\nplaylistTipsDelegate.close()\n--------------------------------------------------\nchannel.close()\n--------------------------------------------------\nbuf.close()\n--------------------------------------------------\nos.close()\n--------------------------------------------------\ncursor.close()\n--------------------------------------------------\nCloseableUtils.close(out)\n--------------------------------------------------\nfileOutputStream.close()\n--------------------------------------------------\nbufferedReader.close()\n--------------------------------------------------\ninputStreamReader.close()\n--------------------------------------------------\nview.close()\n--------------------------------------------------\nactor.close()\n--------------------------------------------------\nclippingPath.close()\n--------------------------------------------------\npath.close()\n--------------------------------------------------\nrefreshActor.close()\n--------------------------------------------------\nhistoryActor.close()\n--------------------------------------------------\nif (!isClosedForSend) close()\n--------------------------------------------------\nCloseableUtils.close(`in`)\n--------------------------------------------------\nCloseableUtils.close(inputStream)\n--------------------------------------------------\nCloseableUtils.close(os)\n--------------------------------------------------\nCloseableUtils.close(cursor)\n--------------------------------------------------\nfout.close()\n--------------------------------------------------\nzis.close()\n--------------------------------------------------\nreader.close()\n--------------------------------------------------\nfin.close()\n--------------------------------------------------\ncursor?.close()\n--------------------------------------------------\nCloseableUtils.close(r)\n--------------------------------------------------\nupdateActor.close()", "fun close() {\r\n        keepScreenOn = false\r\n        windowManager!!.removeView(this)\r\n        windowManager = null\r\n        vlcVout = null\r\n    }" ],
  "Trail-Sense/407" : [ "newName.equals(tagData.name, ignoreCase = true)\n--------------------------------------------------\n\"https\".equals(scheme, ignoreCase = true)\n--------------------------------------------------\n\"http\".equals(scheme, ignoreCase = true)\n--------------------------------------------------\nit.scheme.equals(HTTPS, true)\n--------------------------------------------------\nit.scheme.equals(HTTP, true)\n--------------------------------------------------\nname.equals(it.name, ignoreCase = true)\n--------------------------------------------------\ncalendar.ctag?.equals(ctag)\n--------------------------------------------------\n\"json\".equals(extension, ignoreCase = true)\n--------------------------------------------------\n\"xml\".equals(extension, ignoreCase = true)\n--------------------------------------------------\nnewText.equals(text, ignoreCase = true)\n--------------------------------------------------\ntext.equals(it.name, ignoreCase = true)", "override fun equals(other: Any?): Boolean {\r\n        if (this === other) return true\r\n        if (other !is PlaceUsage) return false\r\n\r\n        if (place != other.place) return false\r\n        if (count != other.count) return false\r\n\r\n        return true\r\n    }" ],
  "MaterialFiles/284" : [ "model.setLabels(new)\n--------------------------------------------------\nsetLabels(baseNote.labels)", "import com.omgodse.notally.room.Label\nfun setLabels(list: List<String>) {\r\n        labels.clear()\r\n        labels.addAll(list)\r\n    }" ],
  "MaterialFiles/283" : [ "viewModel.updatePasswordData(new)", "fun updatePasswordData(newPassword: String) {\r\n            this.newPassword.onNext(newPassword)\r\n            this.confirmPassword.onNext(newPassword)\r\n        }" ],
  "fcitx5-android/324" : [ "                ) {\n                    TabButtonSecondaryTransparent(\r\n                        title = tabItem.title,", "import androidx.compose.ui.graphics.Color\n\r\n@Composable\r\nfun TabButtonSecondaryTransparent(\r\n    title: String,\r\n    onSelect: () -> Unit,\r\n    selected: Boolean = false,\r\n    enabled: Boolean = true\r\n) {\r\n    TabBox(\r\n        colors = TabDefaults.textButtonColors(),\r\n        content = { Text(title) },\r\n        selected = selected,\r\n        enabled = enabled,\r\n        onSelect = onSelect\r\n    )\r\n}\nimport androidx.compose.ui.graphics.Color" ],
  "fcitx5-android/326" : [ "TaskList().setTitle(title)\n--------------------------------------------------\nAlertDialog.Builder(fragmentActivity).setTitle(R.string.change_priority)\n--------------------------------------------------\ndialogBuilder.newDialog().setTitle(R.string.theme)\n--------------------------------------------------\nsetTitle(R.string.name_your_price)\n--------------------------------------------------\nsetTitle(R.string.sign_in_with_google)\n--------------------------------------------------\naddAccount.setTitle(R.string.not_signed_in)\n--------------------------------------------------\naddAccount.setTitle(R.string.add_account)\n--------------------------------------------------\npref.setTitle(account.prefTitle)\n--------------------------------------------------\nsetTitle(if (subscription == null) {\n    R.string.upgrade_to_pro\n} else {\n    R.string.subscription\n})\n--------------------------------------------------\nsetTitle(R.string.sign_in)\n--------------------------------------------------\nsetTitle(R.string.button_subscribe)\n--------------------------------------------------\nsetTitle(R.string.manage_subscription)\n--------------------------------------------------\nsetTitle(if (isGithub) {\n    R.string.sign_in_with_github\n} else {\n    R.string.sign_in_with_google\n})\n--------------------------------------------------\ndialogBuilder.newDialog().setTitle(R.string.delete_tag_confirmation, description)\n--------------------------------------------------\nfragment.setTitle(intent.getStringExtra(EXTRA_TITLE))\n--------------------------------------------------\ndialogBuilder.newDialog().setTitle(R.string.choose_synchronization_service)", "import androidx.appcompat.app.AlertDialog\nfun setTitle(title: Int): AlertDialogBuilder {\r\n        builder.setTitle(title)\r\n        return this\r\n    }\nimport androidx.appcompat.app.AlertDialog" ],
  "VinylMusicPlayer/1031" : [ "@Override\r\npublic void uncaughtException(Thread thread, Throwable ex) {\r\n    write(ex);\r\n    defaultHandler.uncaughtException(thread, ex);\r\n}\n--------------------------------------------------\npublic static void setupRxJavaErrorHandler() {\r\n    RxJavaPlugins.setErrorHandler(exception -> {\r\n        if (exception instanceof UndeliverableException) {\r\n            // Probably just disposed because the fragment was left\r\n            Log.d(TAG, \"Ignored exception: \" + Log.getStackTraceString(exception));\r\n            return;\r\n        }\r\n        // Usually, undeliverable exceptions are wrapped in an UndeliverableException.\r\n        // If an undeliverable exception is a NPE (or some others), wrapping does not happen.\r\n        // AntennaPod threads might throw NPEs after disposing because we set controllers to null.\r\n        // Just swallow all exceptions here.\r\n        Log.e(TAG, Log.getStackTraceString(exception));\r\n        CrashReportWriter.write(exception);\r\n        if (BuildConfig.DEBUG) {\r\n            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), exception);\r\n        }\r\n    });\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void uncaughtException(Thread thread, Throwable ex) {\r\n    write(ex);\r\n    defaultHandler.uncaughtException(thread, ex);\r\n}" ],
  "fcitx5-android/325" : [ "", "import com.simplemobiletools.notes.pro.models.Note\nimport com.simplemobiletools.notes.pro.dialogs.UnlockNotesDialog\nimport com.simplemobiletools.commons.activities.BaseSimpleActivity\nfun BaseSimpleActivity.requestUnlockNotes(notes: List<Note>, callback: (unlockedNotes: List<Note>) -> Unit) {\r\n    val lockedNotes = notes.filter { it.isLocked() }\r\n    if (lockedNotes.isNotEmpty()) {\r\n        runOnUiThread {\r\n            UnlockNotesDialog(this, lockedNotes, callback)\r\n        }\r\n    } else {\r\n        callback(emptyList())\r\n    }\r\n}\nImport(names=[com, simplemobiletools, commons, activities, BaseSimpleActivity], wildcard=false, alias=null)\nImport(names=[com, simplemobiletools, notes, pro, dialogs, UnlockNotesDialog], wildcard=false, alias=null)" ],
  "Iconify/365" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/366" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/364" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/361" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/262" : [ "                if (text != null) {\n                    ChipIcon(iconRes = icon)\r\n                }\n--------------------------------------------------\n            if (text == null) {\n                ChipIcon(iconRes = icon)\r\n            }", "import org.tasks.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Icon\nimport androidx.compose.foundation.layout.size\n\r\n@Composable\r\nprivate fun ChipIcon(iconRes: Int?) {\r\n    iconRes?.let {\r\n        Icon(\r\n            painter = painterResource(id = iconRes),\r\n            contentDescription = null,\r\n            modifier = Modifier.size(18.dp)\r\n        )\r\n    }\r\n}\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.Icon\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport org.tasks.R" ],
  "Neo-Backup/263" : [ "{\n    Chip(\r\n        color = remember(theme) { Color(colorProvider(theme)) },\n--------------------------------------------------\n    ) {\n        FilterChip(\r\n            selected = false,\n--------------------------------------------------\n                if (text != null) {\n                    ChipIcon(iconRes = icon)\r\n                }\n--------------------------------------------------\n            modifier = Modifier.defaultMinSize(minHeight = 26.dp),\n            colors = ChipDefaults.outlinedFilterChipColors(\r\n                backgroundColor = color.copy(alpha = .1f),\n--------------------------------------------------\n            if (text == null) {\n                ChipIcon(iconRes = icon)\r\n            }\n--------------------------------------------------\n    MdcTheme {\n        Chip(\r\n            text = \"Home\",\n--------------------------------------------------\n    MdcTheme {\n        Chip(\r\n            text = null,", "import org.tasks.R\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Text\nimport androidx.compose.material.Icon\nimport androidx.annotation.DrawableRes\n\r\n@Composable\r\nfun Chip(\r\n    @DrawableRes icon: Int?,\r\n    name: String?,\r\n    theme: Int,\r\n    showText: Boolean,\r\n    showIcon: Boolean,\r\n    onClick: () -> Unit,\r\n    colorProvider: (Int) -> Int,\r\n    clear: (() -> Unit)? = null,\r\n) {\r\n    Chip(\r\n        color = remember(theme) { Color(colorProvider(theme)) },\r\n        text = if (showText) name else null,\r\n        icon = if (showIcon && icon != null) icon else null,\r\n        onClick = onClick,\r\n        clear = clear,\r\n    )\r\n}\nimport androidx.annotation.DrawableRes\nimport androidx.compose.material.Icon\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.graphics.Color\nimport org.tasks.R" ],
  "Neo-Backup/260" : [ "", "import androidx.work.Configuration\noverride fun getWorkManagerConfiguration() =\r\n        Configuration.Builder()\r\n            .setWorkerFactory(workerFactory)\r\n            .build()\nImport(names=[androidx, work, Configuration], wildcard=false, alias=null)" ],
  "Neo-Backup/261" : [ "                if (textState.text.isNotEmpty()) {\n                    ButtonSecondaryCircle(\r\n                        modifier = Modifier.padding(start = 8.dp, end = 16.dp),\n--------------------------------------------------\n\n                    ButtonSecondaryCircle(\r\n                        icon = R.drawable.ic_manage_2,\n--------------------------------------------------\nButtonSecondaryCircle(modifier = Modifier.padding(horizontal = 16.dp), icon = icon, tint = iconTint) {\n    navController.slideFromRight(R.id.manageAccountFragment, ManageAccountModule.prepareParams(accountViewItem.accountId))\n}", "import io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme\nimport io.horizontalsystems.bankwallet.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.Icon\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.background\nimport androidx.annotation.DrawableRes\n\r\n@Composable\r\nfun ButtonSecondaryCircle(\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    @DrawableRes icon: Int = R.drawable.ic_arrow_down_20,\r\n    contentDescription: String? = null,\r\n    tint: Color = ComposeAppTheme.colors.leah,\r\n    onClick: () -> Unit,\r\n) {\r\n    HsIconButton(\r\n        onClick = onClick,\r\n        modifier = modifier\r\n            .size(28.dp)\r\n            .clip(CircleShape)\r\n            .background(ComposeAppTheme.colors.steel20),\r\n        enabled = enabled,\r\n        rippleColor = tint\r\n    ) {\r\n        Icon(\r\n            painter = painterResource(id = icon),\r\n            contentDescription = contentDescription,\r\n            tint = tint\r\n        )\r\n    }\r\n}\nimport androidx.annotation.DrawableRes\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.Icon\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme" ],
  "Iconify/360" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/266" : [ "                is ViewState.Error -> {\n                    ListErrorView(stringResource(R.string.SyncError), viewModel::refresh)\r\n                }\n--------------------------------------------------\nListErrorView(stringResource(R.string.SyncError), viewModel::onErrorClick)", "import io.horizontalsystems.bankwallet.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.annotation.DrawableRes\n\r\n@Composable\r\nfun ListErrorView(\r\n    errorText: String,\r\n    @DrawableRes icon: Int = R.drawable.ic_sync_error,\r\n    onClick: () -> Unit\r\n) {\r\n    ScreenMessageWithAction(\r\n        text = errorText,\r\n        icon = icon,\r\n    ) {\r\n        ButtonPrimaryYellow(\r\n            modifier = Modifier\r\n                .padding(horizontal = 48.dp)\r\n                .fillMaxWidth(),\r\n            title = stringResource(R.string.Button_Retry),\r\n            onClick = onClick\r\n        )\r\n    }\r\n}\nimport androidx.annotation.DrawableRes\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport io.horizontalsystems.bankwallet.R" ],
  "Neo-Backup/267" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/894" : [ "kit.start()\n--------------------------------------------------\n{\r\n        // started via EthereumKitManager\r\n    }\n--------------------------------------------------\nstart()\n--------------------------------------------------\nit.start()\n--------------------------------------------------\nadapter.start()\n--------------------------------------------------\nLockScreenActivity.start(activity)\n--------------------------------------------------\nevmKit.start()\n--------------------------------------------------\ntorOperator.start()\n--------------------------------------------------\ntronKitWrapper?.tronKit?.start()\n--------------------------------------------------\nThread(Runnable {\n    torControl.onBootstrapped(torControl.torInfo)\n}).start()\n--------------------------------------------------\nservice.start()\n--------------------------------------------------\nIntroActivity.start(this)\n--------------------------------------------------\nMainModule.start(this, intent.data)\n--------------------------------------------------\ntotalBalance.start(viewModelScope)\n--------------------------------------------------\nnonceService.start()\n--------------------------------------------------\nsettingsService.start()\n--------------------------------------------------\nrepository.start()\n--------------------------------------------------\ntorManager.start()", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\noverride suspend fun start() = withContext(Dispatchers.IO) {\r\n        launch {\r\n            settingsService.stateFlow\r\n                .collect {\r\n                    sync(it)\r\n                }\r\n        }\r\n\r\n        settingsService.start()\r\n    }\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/369" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/412" : [ "input.take(4).toByteArray().toHexString()\n--------------------------------------------------\n        val digest = md.digest(value)\n        return digest.toHexString()\r\n    }\n--------------------------------------------------\n\n        val iv = EncryptDecryptManager.generateRandomBytes(16).toHexString()\r\n        val encrypted = encryptDecryptManager.encrypt(secretText, key, iv)\n--------------------------------------------------\n            kdfparams = kdfParams,\n            mac = mac.toHexString()\r\n        )", "import java.math.BigInteger\nimport io.horizontalsystems.bankwallet.core.toRawHexString\nprivate fun toHexString(key: BigInteger): String {\r\n        return key.toByteArray().let {\r\n            if (it.size > 32) {\r\n                it.copyOfRange(1, it.size)\r\n            } else {\r\n                it\r\n            }.toRawHexString()\r\n        }\r\n    }\nimport io.horizontalsystems.bankwallet.core.toRawHexString\nimport java.math.BigInteger" ],
  "Trail-Sense/896" : [ "kit.start()\n--------------------------------------------------\n{\r\n        // started via EthereumKitManager\r\n    }\n--------------------------------------------------\nstart()\n--------------------------------------------------\nit.start()\n--------------------------------------------------\nadapter.start()\n--------------------------------------------------\nLockScreenActivity.start(activity)\n--------------------------------------------------\nevmKit.start()\n--------------------------------------------------\ntorOperator.start()\n--------------------------------------------------\ntronKitWrapper?.tronKit?.start()\n--------------------------------------------------\nThread(Runnable {\n    torControl.onBootstrapped(torControl.torInfo)\n}).start()\n--------------------------------------------------\nservice.start()\n--------------------------------------------------\nIntroActivity.start(this)\n--------------------------------------------------\nMainModule.start(this, intent.data)\n--------------------------------------------------\ntotalBalance.start(viewModelScope)\n--------------------------------------------------\nnonceService.start()\n--------------------------------------------------\nsettingsService.start()\n--------------------------------------------------\nrepository.start()\n--------------------------------------------------\ntorManager.start()", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\noverride suspend fun start() = withContext(Dispatchers.IO) {\r\n        launch {\r\n            settingsService.stateFlow\r\n                .collect {\r\n                    sync(it)\r\n                }\r\n        }\r\n\r\n        settingsService.start()\r\n    }\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Iconify/367" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/897" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/898" : [ "listener?.onAudioFocusGained()", "override fun onAudioFocusGained() {\r\n    if (shouldResumeOnFocusGain) {\r\n      shouldResumeOnFocusGain = false\r\n      resume()\r\n    }\r\n  }" ],
  "Iconify/368" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/415" : [ "super.onAttachedToWindow()", "import android.os.Handler\noverride fun onAttachedToWindow() {\r\n    super.onAttachedToWindow()\r\n    countdownHandler.post(updateCallback)\r\n  }" ],
  "Trail-Sense/899" : [ "listener?.onAudioFocusGained()", "override fun onAudioFocusGained() {\r\n    if (shouldResumeOnFocusGain) {\r\n      shouldResumeOnFocusGain = false\r\n      resume()\r\n    }\r\n  }" ],
  "MaterialFiles/291" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/1024" : [ "private int load_device(State state) {\r\n    DB db = DB.getInstance(context);\r\n    Log.i(\"Boundary device\" + \" index=\" + state.index + \" matches=\" + (state.matches == null ? null : state.matches.size()));\r\n    long[] exclude = new long[0];\r\n    if (folder == null) {\r\n        List<Long> folders = new ArrayList<>();\r\n        if (!criteria.in_trash) {\r\n            List<EntityFolder> trash = db.folder().getFoldersByType(EntityFolder.TRASH);\r\n            if (trash != null)\r\n                for (EntityFolder folder : trash) folders.add(folder.id);\r\n        }\r\n        if (!criteria.in_junk) {\r\n            List<EntityFolder> junk = db.folder().getFoldersByType(EntityFolder.JUNK);\r\n            if (junk != null)\r\n                for (EntityFolder folder : junk) folders.add(folder.id);\r\n        }\r\n        exclude = Helper.toLongArray(folders);\r\n    }\r\n    int found = 0;\r\n    List<String> word = new ArrayList<>();\r\n    List<String> plus = new ArrayList<>();\r\n    List<String> minus = new ArrayList<>();\r\n    if (criteria.query != null) {\r\n        for (String w : criteria.query.trim().split(\"\\\\s+\")) if (w.length() > 1 && w.startsWith(\"+\"))\r\n            plus.add(w.substring(1));\r\n        else if (w.length() > 1 && w.startsWith(\"-\"))\r\n            minus.add(w.substring(1));\r\n        else\r\n            word.add(w);\r\n        if (word.size() == 0 && plus.size() > 0)\r\n            word.add(plus.get(0));\r\n    }\r\n    if (criteria.fts && word.size() > 0 && !criteria.in_headers && !criteria.in_html) {\r\n        if (state.ids == null) {\r\n            SQLiteDatabase sdb = Fts4DbHelper.getInstance(context);\r\n            state.ids = Fts4DbHelper.match(sdb, account, folder, exclude, criteria, TextUtils.join(\" \", word));\r\n            EntityLog.log(context, \"Boundary FTS\" + \" account=\" + account + \" folder=\" + folder + \" criteria=\" + criteria + \" ids=\" + state.ids.size());\r\n        }\r\n        List<Long> excluded = Helper.fromLongArray(exclude);\r\n        try {\r\n            db.beginTransaction();\r\n            for (; state.index < state.ids.size() && found < pageSize && !state.destroyed; state.index++) {\r\n                long id = state.ids.get(state.index);\r\n                EntityMessage message = db.message().getMessage(id);\r\n                if (message == null || message.ui_hide)\r\n                    continue;\r\n                if (excluded.contains(message.folder))\r\n                    continue;\r\n                if (!matchMessage(context, message, criteria, false))\r\n                    continue;\r\n                found += db.message().setMessageFound(message.id, true);\r\n                Log.i(\"Boundary matched=\" + message.id + \" found=\" + found);\r\n            }\r\n            db.setTransactionSuccessful();\r\n        } finally {\r\n            db.endTransaction();\r\n        }\r\n        return found;\r\n    }\r\n    while (found < pageSize && !state.destroyed) {\r\n        if (state.matches == null || (state.matches.size() > 0 && state.index >= state.matches.size())) {\r\n            String query = (word.size() == 0 ? null : '%' + TextUtils.join(\"%\", word) + '%');\r\n            state.matches = db.message().matchMessages(account, folder, exclude, query, //criteria.in_senders,\r\n            //criteria.in_recipients,\r\n            //criteria.in_subject,\r\n            //criteria.in_keywords,\r\n            //criteria.in_message,\r\n            //criteria.in_notes,\r\n            //criteria.in_headers,\r\n            criteria.with_unseen, criteria.with_flagged, criteria.with_hidden, criteria.with_encrypted, criteria.with_attachments, criteria.with_notes, criteria.with_types == null ? 0 : criteria.with_types.length, criteria.with_types == null ? new String[] {} : criteria.with_types, criteria.with_size, criteria.after, criteria.before, SEARCH_LIMIT_DEVICE, state.offset);\r\n            EntityLog.log(context, \"Boundary device\" + \" account=\" + account + \" folder=\" + folder + \" criteria=\" + criteria + \" query=\" + query + \" offset=\" + state.offset + \" size=\" + state.matches.size());\r\n            state.offset += Math.min(state.matches.size(), SEARCH_LIMIT_DEVICE);\r\n            state.index = 0;\r\n        }\r\n        if (state.matches.size() == 0)\r\n            break;\r\n        for (int i = state.index; i < state.matches.size() && found < pageSize && !state.destroyed; i++) {\r\n            state.index = i + 1;\r\n            TupleMatch match = state.matches.get(i);\r\n            boolean matched = (criteria.query == null || Boolean.TRUE.equals(match.matched));\r\n            if (!matched) {\r\n                EntityMessage message = db.message().getMessage(match.id);\r\n                if (message != null && !message.ui_hide)\r\n                    matched = matchMessage(context, message, criteria, true);\r\n            }\r\n            if (matched) {\r\n                found += db.message().setMessageFound(match.id, true);\r\n                Log.i(\"Boundary matched=\" + match.id + \" found=\" + found);\r\n            }\r\n        }\r\n    }\r\n    Log.i(\"Boundary device done\" + \" found=\" + found + \"/\" + pageSize + \" destroyed=\" + state.destroyed + \" memory=\" + Log.getFreeMemMb());\r\n    return found;\r\n}\n--------------------------------------------------\nprivate static void onSetFlag(Context context, JSONArray jargs, EntityFolder folder, List<EntityMessage> messages, IMAPFolder ifolder, Flags.Flag flag) throws MessagingException, JSONException {\r\n    // Mark message (un)seen\r\n    DB db = DB.getInstance(context);\r\n    if (flag != Flags.Flag.SEEN && flag != Flags.Flag.ANSWERED && flag != Flags.Flag.FLAGGED && flag != Flags.Flag.DELETED)\r\n        throw new IllegalArgumentException(\"Invalid flag=\" + flag);\r\n    if (folder.read_only)\r\n        return;\r\n    if (!ifolder.getPermanentFlags().contains(flag)) {\r\n        for (EntityMessage message : messages) if (flag == Flags.Flag.SEEN) {\r\n            db.message().setMessageSeen(message.id, false);\r\n            db.message().setMessageUiSeen(message.id, false);\r\n        } else if (flag == Flags.Flag.ANSWERED) {\r\n            db.message().setMessageAnswered(message.id, false);\r\n            db.message().setMessageUiAnswered(message.id, false);\r\n        } else if (flag == Flags.Flag.FLAGGED) {\r\n            db.message().setMessageFlagged(message.id, false);\r\n            db.message().setMessageUiFlagged(message.id, false, null);\r\n        } else if (flag == Flags.Flag.DELETED) {\r\n            db.message().setMessageDeleted(message.id, false);\r\n            db.message().setMessageUiDeleted(message.id, false);\r\n        }\r\n        return;\r\n    }\r\n    List<Long> uids = new ArrayList<>();\r\n    boolean set = jargs.getBoolean(0);\r\n    for (EntityMessage message : messages) {\r\n        if (message.uid == null)\r\n            if (messages.size() == 1)\r\n                throw new IllegalArgumentException(\"Set flag: uid missing\");\r\n            else\r\n                throw new MessagingException(\"Set flag: uid missing\");\r\n        if (flag == Flags.Flag.SEEN && !message.seen.equals(set))\r\n            uids.add(message.uid);\r\n        else if (flag == Flags.Flag.ANSWERED && !message.answered.equals(set))\r\n            uids.add(message.uid);\r\n        else if (flag == Flags.Flag.FLAGGED && !message.flagged.equals(set))\r\n            uids.add(message.uid);\r\n        else if (flag == Flags.Flag.DELETED && !message.deleted.equals(set))\r\n            uids.add(message.uid);\r\n    }\r\n    if (uids.size() == 0)\r\n        return;\r\n    Message[] imessages = ifolder.getMessagesByUID(Helper.toLongArray(uids));\r\n    for (Message imessage : imessages) if (imessage == null)\r\n        if (messages.size() == 1)\r\n            throw new MessageRemovedException();\r\n        else\r\n            throw new MessagingException(\"Set flag: message missing\");\r\n    ifolder.setFlags(imessages, new Flags(flag), set);\r\n    for (EntityMessage message : messages) if (flag == Flags.Flag.SEEN && !message.seen.equals(set))\r\n        db.message().setMessageSeen(message.id, set);\r\n    else if (flag == Flags.Flag.ANSWERED && !message.answered.equals(set))\r\n        db.message().setMessageAnswered(message.id, set);\r\n    else if (flag == Flags.Flag.FLAGGED && !message.flagged.equals(set))\r\n        db.message().setMessageFlagged(message.id, set);\r\n    else if (flag == Flags.Flag.DELETED && !message.deleted.equals(set))\r\n        db.message().setMessageDeleted(message.id, set);\r\n}\n--------------------------------------------------\n", "import java.util.List\nstatic long[] toLongArray(List<Long> list) {\r\n    long[] result = new long[list.size()];\r\n    for (int i = 0; i < list.size(); i++) result[i] = list.get(i);\r\n    return result;\r\n}" ],
  "Trail-Sense/418" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/419" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/292" : [ "currentSortOrder.equals(AlbumSortOrder.ALBUM_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_Z_A)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_ARTIST)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_YEAR)\n--------------------------------------------------\ncurrentSortOrder.equals(AlbumSortOrder.ALBUM_NUMBER_OF_SONGS)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_A_Z)\n--------------------------------------------------\ncurrentSortOrder.equals(ArtistSortOrder.ARTIST_Z_A)\n--------------------------------------------------\nsuper.equals(other)", "override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Playlist\n\n        if (id != other.id) return false\n        if (name != other.name) return false\n\n        return true\n    }" ],
  "fcitx5-android/311" : [ "            val networkType = BinanceChainKit.NetworkType.MainNet\n            BinanceChainKit.clear(App.instance, networkType, walletId)\r\n        }\n--------------------------------------------------\n{\r\n            BitcoinKit.clear(App.instance, NetworkType.MainNet, walletId)\r\n        }\n--------------------------------------------------\nSolanaKit.clear(App.instance, walletId)\n--------------------------------------------------\nTronKit.clear(App.instance, network, walletId)\n--------------------------------------------------\nBinanceAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinAdapter.clear(accountId)\n--------------------------------------------------\nBitcoinCashAdapter.clear(accountId)\n--------------------------------------------------\nECashAdapter.clear(accountId)\n--------------------------------------------------\nDashAdapter.clear(accountId)\n--------------------------------------------------\nEvmAdapter.clear(accountId)\n--------------------------------------------------\nEip20Adapter.clear(accountId)\n--------------------------------------------------\nZcashAdapter.clear(accountId)\n--------------------------------------------------\nSolanaAdapter.clear(accountId)\n--------------------------------------------------\nTronAdapter.clear(accountId)\n--------------------------------------------------\nstorage.clear()\n--------------------------------------------------\naccountsCache.clear()\n--------------------------------------------------\nadaptersMap.clear()\n--------------------------------------------------\naccountManager.clear()\n--------------------------------------------------\nwalletManager.clear()\n--------------------------------------------------\nlocalStorage.clear()\n--------------------------------------------------\npreferences.edit().clear()\n--------------------------------------------------\nthis.adaptersMap.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ndisposables.clear()\n--------------------------------------------------\nupdatesDisposables.clear()\n--------------------------------------------------\nbalanceAdapterRepository.clear()\n--------------------------------------------------\ndisposable.clear()\n--------------------------------------------------\nrecordMap.clear()\n--------------------------------------------------\nmetadataMap.clear()\n--------------------------------------------------\nnftItemMap.clear()\n--------------------------------------------------\ndao.clear()\n--------------------------------------------------\nfeeService.clear()\n--------------------------------------------------\nsettingsService.clear()\n--------------------------------------------------\nrepository.clear()\n--------------------------------------------------\nservice.clear()\n--------------------------------------------------\ntransactionRecords.clear()\n--------------------------------------------------\nadapters.clear()", "override fun clear() {\r\n        disposable.clear()\r\n        settingsService.clear()\r\n    }" ],
  "fcitx5-android/310" : [ "", "override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressedDispatcher.onBackPressed()\r\n        return true\r\n    }" ],
  "VinylMusicPlayer/1020" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n@NonNull\r\npublic static synchronized HistoryStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new HistoryStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "Iconify/333" : [ "public static int resolveActionBarColor(Context context, int backgroundColor) {\r\n    if (backgroundColor == Notification.COLOR_DEFAULT) {\r\n        return Color.BLACK;\r\n    }\r\n    return getShiftedColor(backgroundColor, 7);\r\n}\n--------------------------------------------------\n", "import android.app.Notification;\r\nimport android.content.Context;\r\nimport android.graphics.Color;\r\nimport android.util.Log;\r\nimport android.util.Log\nimport android.graphics.Color\nimport android.content.Context\nimport android.app.Notification\n//\r\n//    public static int resolveContrastColor(Context context, int notificationColor,\r\n//                                           int backgroundColor) {\r\n//        return NotificationColorUtil.resolveContrastColor(context, notificationColor,\r\n//                backgroundColor, false /* isDark */);\r\n//    }\r\n//    /**\r\n//     * Resolves a Notification's color such that it has enough contrast to be used as the\r\n//     * color for the Notification's action and header text.\r\n//     *\r\n//     * @param notificationColor the color of the notification or {@link\r\n// Notification#COLOR_DEFAULT}\r\n//     * @param backgroundColor the background color to ensure the contrast against.\r\n//     * @param isDark whether or not the {@code notificationColor} will be placed on a background\r\n//     *               that is darker than the color itself\r\n//     * @return a color of the same hue with enough contrast against the backgrounds.\r\n//     */\r\n//    public static int resolveContrastColor(Context context, int notificationColor,\r\n//                                           int backgroundColor, boolean isDark) {\r\n//        final int resolvedColor = resolveColor(context, notificationColor);\r\n//\r\n//        final int actionBg = context.getColor(\r\n//                com.android.internal.R.color.notification_action_list);\r\n//\r\n//        int color = resolvedColor;\r\n//        color = NotificationColorUtil.ensureLargeTextContrast(color, actionBg, isDark);\r\n//        color = NotificationColorUtil.ensureTextContrast(color, backgroundColor, isDark);\r\n//\r\n//        if (color != resolvedColor) {\r\n//            if (DEBUG){\r\n//                Log.w(TAG, String.format(\r\n//                        \"Enhanced contrast of notification for %s %s (over action)\"\r\n//                                + \" and %s (over background) by changing #%s to %s\",\r\n//                        context.getPackageName(),\r\n//                        NotificationColorUtil.contrastChange(resolvedColor, color, actionBg),\r\n//                        NotificationColorUtil.contrastChange(resolvedColor, color,\r\n// backgroundColor),\r\n//                        Integer.toHexString(resolvedColor), Integer.toHexString(color)));\r\n//            }\r\n//        }\r\n//        return color;\r\n//    }\r\n/**\r\n * Get a color that stays in the same tint, but darkens or lightens it by a certain amount. This\r\n * also looks at the lightness of the provided color and shifts it appropriately.\r\n *\r\n * @param color the base color to use\r\n * @param amount the amount from 1 to 100 how much to modify the color\r\n * @return the now color that was modified\r\n */\r\npublic static int getShiftedColor(int color, int amount) {\r\n    final double[] result = ColorUtilsFromCompat.getTempDouble3Array();\r\n    ColorUtilsFromCompat.colorToLAB(color, result);\r\n    if (result[0] >= 4) {\r\n        result[0] = Math.max(0, result[0] - amount);\r\n    } else {\r\n        result[0] = Math.min(100, result[0] + amount);\r\n    }\r\n    return ColorUtilsFromCompat.LABToColor(result[0], result[1], result[2]);\r\n}" ],
  "Neo-Backup/270" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/273" : [ "                is ViewState.Error -> {\n                    ListErrorView(stringResource(R.string.SyncError), viewModel::refresh)\r\n                }\n--------------------------------------------------\nListErrorView(stringResource(R.string.SyncError), viewModel::onErrorClick)", "import io.horizontalsystems.bankwallet.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.annotation.DrawableRes\n\r\n@Composable\r\nfun ListErrorView(\r\n    errorText: String,\r\n    @DrawableRes icon: Int = R.drawable.ic_sync_error,\r\n    onClick: () -> Unit\r\n) {\r\n    ScreenMessageWithAction(\r\n        text = errorText,\r\n        icon = icon,\r\n    ) {\r\n        ButtonPrimaryYellow(\r\n            modifier = Modifier\r\n                .padding(horizontal = 48.dp)\r\n                .fillMaxWidth(),\r\n            title = stringResource(R.string.Button_Retry),\r\n            onClick = onClick\r\n        )\r\n    }\r\n}\nimport androidx.annotation.DrawableRes\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport io.horizontalsystems.bankwallet.R" ],
  "Neo-Backup/274" : [ "                is ViewState.Error -> {\n                    ListErrorView(stringResource(R.string.SyncError), viewModel::refresh)\r\n                }\n--------------------------------------------------\nListErrorView(stringResource(R.string.SyncError), viewModel::onErrorClick)", "import io.horizontalsystems.bankwallet.R\n\r\n@Composable\r\nfun ListErrorView(\r\n    errorText: String,\r\n    onClick: () -> Unit\r\n) {\r\n    ListErrorView(\r\n        errorText = errorText,\r\n        icon = R.drawable.ic_sync_error,\r\n        onClick = onClick,\r\n    )\r\n}\nimport io.horizontalsystems.bankwallet.R" ],
  "Neo-Backup/271" : [ "                } else {\n                    clearUi()\r\n                    TaskListFragment.newTaskListFragment(newFilter)\n--------------------------------------------------\n        AndroidUtilities.assertMainThread()\n        clearUi()\r\n        return coroutineScope {\n--------------------------------------------------\nidToNode.clear()\n--------------------------------------------------\npurchases.clear()\n--------------------------------------------------\nEtebaseLocalCache.clear(context, username)\n--------------------------------------------------\nclear(context, it)\n--------------------------------------------------\njobs.clear()\n--------------------------------------------------\ntoolbar.menu.clear()\n--------------------------------------------------\nvtodoCache.clear()\n--------------------------------------------------\nEtebaseLocalCache.clear(context)\n--------------------------------------------------\nnotificationQueue.clear()\n--------------------------------------------------\nclear()\n--------------------------------------------------\ncaldavCalendars.clear()\n--------------------------------------------------\ntagDatas.clear()", "import kotlinx.coroutines.runBlocking\nimport android.content.Context\nfun clear(context: Context) = runBlocking {\r\n            val users = synchronized(localCacheCache) {\r\n                localCacheCache.keys.toList()\r\n            }\r\n            users.forEach { clear(context, it) }\r\n        }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, runBlocking], wildcard=false, alias=null)" ],
  "Neo-Backup/279" : [ "/**\r\n * Main-Menu-Handler\r\n */\r\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    final int itemId = item.getItemId();\r\n    if (itemId == R.id.menu_cancel) {\r\n        executor.submit(() -> {\r\n            if (originalNote == null) {\r\n                repo.deleteNoteAndSync(localAccount, note.getId());\r\n            } else {\r\n                repo.updateNoteAndSync(localAccount, originalNote, null, null, null);\r\n            }\r\n        });\r\n        listener.close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_delete) {\r\n        repo.deleteNoteAndSync(localAccount, note.getId());\r\n        listener.close();\r\n        return true;\r\n    } else if (itemId == R.id.menu_favorite) {\r\n        note.setFavorite(!note.getFavorite());\r\n        repo.toggleFavoriteAndSync(localAccount, note.getId());\r\n        listener.onNoteUpdated(note);\r\n        prepareFavoriteOption(item);\r\n        return true;\r\n    } else if (itemId == R.id.menu_category) {\r\n        showCategorySelector();\r\n        return true;\r\n    } else if (itemId == R.id.menu_title) {\r\n        showEditTitleDialog();\r\n        return true;\r\n    } else if (itemId == R.id.menu_move) {\r\n        executor.submit(() -> AccountPickerDialogFragment.newInstance(new ArrayList<>(repo.getAccounts()), note.getAccountId()).show(requireActivity().getSupportFragmentManager(), BaseNoteFragment.class.getSimpleName()));\r\n        return true;\r\n    } else if (itemId == R.id.menu_share) {\r\n        shareNote();\r\n        return false;\r\n    } else if (itemId == MENU_ID_PIN) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            final var context = requireContext();\r\n            if (ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {\r\n                final var pinShortcutInfo = new ShortcutInfoCompat.Builder(context, String.valueOf(note.getId())).setShortLabel(note.getTitle()).setIcon(IconCompat.createWithResource(context.getApplicationContext(), TRUE.equals(note.getFavorite()) ? R.drawable.ic_star_yellow_24dp : R.drawable.ic_star_grey_ccc_24dp)).setIntent(new Intent(getActivity(), EditNoteActivity.class).putExtra(EditNoteActivity.PARAM_NOTE_ID, note.getId()).setAction(ACTION_SHORTCUT)).build();\r\n                ShortcutManagerCompat.requestPinShortcut(context, pinShortcutInfo, PendingIntent.getBroadcast(context, 0, ShortcutManagerCompat.createShortcutResultIntent(context, pinShortcutInfo), pendingIntentFlagCompat(0)).getIntentSender());\r\n            } else {\r\n                Log.i(TAG, \"RequestPinShortcut is not supported\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\n--------------------------------------------------\n/**\r\n * Save the current state in the database and schedule synchronization if needed.\r\n *\r\n * @param callback Observer which is called after save/synchronization\r\n */\r\nprotected void saveNote(@Nullable ISyncCallback callback) {\r\n    Log.d(TAG, \"saveData()\");\r\n    if (note != null) {\r\n        final var newContent = getContent();\r\n        if (note.getContent().equals(newContent)) {\r\n            if (note.getScrollY() != originalScrollY) {\r\n                Log.v(TAG, \"... only saving new scroll state, since content did not change\");\r\n                repo.updateScrollY(note.getId(), note.getScrollY());\r\n            } else {\r\n                Log.v(TAG, \"... not saving, since nothing has changed\");\r\n            }\r\n        } else {\r\n            // FIXME requires database queries on main thread!\r\n            note = repo.updateNoteAndSync(localAccount, note, newContent, null, callback);\r\n            listener.onNoteUpdated(note);\r\n            requireActivity().invalidateOptionsMenu();\r\n        }\r\n    } else {\r\n        Log.e(TAG, \"note is null\");\r\n    }\r\n}\n--------------------------------------------------\n", "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (!(o instanceof NavigationItem that))\r\n        return false;\r\n    if (icon != that.icon)\r\n        return false;\r\n    if (!id.equals(that.id))\r\n        return false;\r\n    if (!label.equals(that.label))\r\n        return false;\r\n    if (!Objects.equals(count, that.count))\r\n        return false;\r\n    return type == that.type;\r\n}" ],
  "Trail-Sense/427" : [ "@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {\r\n        isTouching = false;\r\n        if (hasLrc() && !isFling) {\r\n            adjustCenter();\r\n            postDelayed(hideTimelineRunnable, TIMELINE_KEEP_TIME);\r\n        }\r\n    }\r\n    return mGestureDetector.onTouchEvent(event);\r\n}\n--------------------------------------------------\n", "import android.view.MotionEvent;\r\nimport code.name.monkey.retromusic.R\nimport android.view.MotionEvent\nimport android.view.GestureDetector\n@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {\r\n        isTouching = false;\r\n        if (hasLrc() && !isFling) {\r\n            adjustCenter();\r\n            postDelayed(hideTimelineRunnable, TIMELINE_KEEP_TIME);\r\n        }\r\n    }\r\n    return mGestureDetector.onTouchEvent(event);\r\n}" ],
  "fcitx5-android/340" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "fcitx5-android/342" : [ "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    registerStartEventListener();\r\n}\n--------------------------------------------------\n", "import java.util.List\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    unregisterStartEventListener();\r\n}" ],
  "fcitx5-android/344" : [ "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    controller = setupPlaybackController();\r\n    controller.init();\r\n    loadMediaInfo();\r\n    EventBus.getDefault().register(this);\r\n}\n--------------------------------------------------\n", "import org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.EventBus\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    if (controller != null) {\r\n        controller.release();\r\n        controller = null;\r\n    }\r\n    EventBus.getDefault().unregister(this);\r\n}" ],
  "fcitx5-android/343" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    EventBus.getDefault().unregister(this);\r\n}\n--------------------------------------------------\n", "import de.greenrobot.event.EventBus;\r\nimport de.greenrobot.event.EventBus\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    EventBus.getDefault().register(this);\r\n}" ],
  "fcitx5-android/346" : [ "public void onBackPressedFragment() {\r\n    performBack();\r\n}\n--------------------------------------------------\npublic void onExit() {\r\n    if (drawerLayout.isDrawerOpen(drawerContainer))\r\n        drawerLayout.closeDrawer(drawerContainer);\r\n    else {\r\n        if (getSupportFragmentManager().getBackStackEntryCount() > 1) {\r\n            performBack();\r\n            return;\r\n        }\r\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n        boolean setup_reminder = prefs.getBoolean(\"setup_reminder\", true);\r\n        boolean hasContactPermissions = hasPermission(android.Manifest.permission.READ_CONTACTS);\r\n        boolean hasNotificationPermissions = (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU || hasPermission(Manifest.permission.POST_NOTIFICATIONS));\r\n        boolean isIgnoring = !Boolean.FALSE.equals(Helper.isIgnoringOptimizations(this));\r\n        if (!setup_reminder || (hasContactPermissions && hasNotificationPermissions && isIgnoring))\r\n            performBack();\r\n        else {\r\n            FragmentDialogPermissions fragment = new FragmentDialogPermissions();\r\n            fragment.setTargetActivity(this, REQUEST_STILL);\r\n            fragment.show(getSupportFragmentManager(), \"setup:still\");\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.appcompat.app.ActionBar;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.lifecycle.Lifecycle\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\nimport androidx.appcompat.app.ActionBar\nimport android.view.View\npublic void performBack() {\r\n    if (getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.STARTED)) {\r\n        // https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/Activity.java#3896\r\n        ActionBar ab = getSupportActionBar();\r\n        if (ab != null && ab.collapseActionView())\r\n            return;\r\n        FragmentManager fm = getSupportFragmentManager();\r\n        if (!fm.isStateSaved() && fm.popBackStackImmediate())\r\n            return;\r\n    }\r\n    finish();\r\n}" ],
  "VinylMusicPlayer/1056" : [ "public String get(String key, String defaultValue) {\r\n    try {\r\n        return getPreferences().getString(key, defaultValue);\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"reading string preference: %s\", key);\r\n        return defaultValue;\r\n    }\r\n}\n--------------------------------------------------\n/**\r\n * Save string value to preferences.\r\n */\r\npublic void set(String key, String value) {\r\n    getPreferences().edit().putString(key, value).apply();\r\n}\n--------------------------------------------------\n", "import com.money.manager.ex.settings.SyncPreferences;\r\nimport com.money.manager.ex.settings.SyncPreferences\nimport android.content.Context\nprivate SyncPreferences getPreferences() {\r\n    if (mPreferences == null) {\r\n        mPreferences = new SyncPreferences(getContext());\r\n    }\r\n    return mPreferences;\r\n}" ],
  "VinylMusicPlayer/1055" : [ "public static void restoreSettings(Context context, Executor executor, Handler handler, ContentResolver contentResolver, Uri zipFileUri, RedditDataRoomDatabase redditDataRoomDatabase, SharedPreferences defaultSharedPreferences, SharedPreferences lightThemeSharedPreferences, SharedPreferences darkThemeSharedPreferences, SharedPreferences amoledThemeSharedPreferences, SharedPreferences sortTypeSharedPreferences, SharedPreferences postLayoutSharedPreferences, SharedPreferences postFeedScrolledPositionSharedPreferences, SharedPreferences mainActivityTabsSharedPreferences, SharedPreferences nsfwAndSpoilerSharedPreferencs, SharedPreferences bottomAppBarSharedPreferences, SharedPreferences postHistorySharedPreferences, RestoreSettingsListener restoreSettingsListener) {\r\n    executor.execute(() -> {\r\n        try {\r\n            InputStream zipFileInputStream = contentResolver.openInputStream(zipFileUri);\r\n            if (zipFileInputStream == null) {\r\n                handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_failed_cannot_get_file)));\r\n                return;\r\n            }\r\n            String cachePath = context.getExternalCacheDir() + \"/Restore/\";\r\n            if (new File(cachePath).exists()) {\r\n                FileUtils.deleteDirectory(new File(cachePath));\r\n            }\r\n            new File(cachePath).mkdir();\r\n            FileOutputStream zipCacheOutputStream = new FileOutputStream(new File(cachePath + \"restore.zip\"));\r\n            byte[] fileReader = new byte[1024];\r\n            while (true) {\r\n                int read = zipFileInputStream.read(fileReader);\r\n                if (read == -1) {\r\n                    break;\r\n                }\r\n                zipCacheOutputStream.write(fileReader, 0, read);\r\n            }\r\n            new ZipFile(cachePath + \"restore.zip\", \"123321\".toCharArray()).extractAll(cachePath);\r\n            new File(cachePath + \"restore.zip\").delete();\r\n            File[] files = new File(cachePath).listFiles();\r\n            if (files == null || files.length <= 0) {\r\n                handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_failed_file_corrupted)));\r\n            } else {\r\n                File restoreFilesDir = files[0];\r\n                File[] restoreFiles = restoreFilesDir.listFiles();\r\n                boolean result = true;\r\n                if (restoreFiles != null) {\r\n                    for (File f : restoreFiles) {\r\n                        if (f.isFile()) {\r\n                            if (f.getName().startsWith(SharedPreferencesUtils.DEFAULT_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(defaultSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(CustomThemeSharedPreferencesUtils.LIGHT_THEME_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(lightThemeSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(CustomThemeSharedPreferencesUtils.DARK_THEME_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(darkThemeSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(CustomThemeSharedPreferencesUtils.AMOLED_THEME_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(amoledThemeSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.SORT_TYPE_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(sortTypeSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.POST_LAYOUT_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(postLayoutSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.FRONT_PAGE_SCROLLED_POSITION_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(postFeedScrolledPositionSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.MAIN_PAGE_TABS_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(mainActivityTabsSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.NSFW_AND_SPOILER_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(nsfwAndSpoilerSharedPreferencs, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.BOTTOM_APP_BAR_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(bottomAppBarSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.POST_HISTORY_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(postHistorySharedPreferences, f.toString());\r\n                            }\r\n                        } else if (f.isDirectory() && f.getName().equals(\"database\")) {\r\n                            if (!redditDataRoomDatabase.accountDao().isAnonymousAccountInserted()) {\r\n                                redditDataRoomDatabase.accountDao().insert(Account.getAnonymousAccount());\r\n                            }\r\n                            File anonymousSubscribedSubredditsFile = new File(f.getAbsolutePath() + \"/anonymous_subscribed_subreddits.json\");\r\n                            File anonymousSubscribedUsersFile = new File(f.getAbsolutePath() + \"/anonymous_subscribed_users.json\");\r\n                            File anonymousMultiredditsFile = new File(f.getAbsolutePath() + \"/anonymous_multireddits.json\");\r\n                            File anonymousMultiredditSubredditsFile = new File(f.getAbsolutePath() + \"/anonymous_multireddit_subreddits.json\");\r\n                            File customThemesFile = new File(f.getAbsolutePath() + \"/custom_themes.json\");\r\n                            File postFiltersFile = new File(f.getAbsolutePath() + \"/post_filters.json\");\r\n                            File postFilterUsageFile = new File(f.getAbsolutePath() + \"/post_filter_usage.json\");\r\n                            if (anonymousSubscribedSubredditsFile.exists()) {\r\n                                List<SubscribedSubredditData> anonymousSubscribedSubreddits = getListFromFile(anonymousSubscribedSubredditsFile, new TypeToken<List<SubscribedSubredditData>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.subscribedSubredditDao().insertAll(anonymousSubscribedSubreddits);\r\n                            }\r\n                            if (anonymousSubscribedUsersFile.exists()) {\r\n                                List<SubscribedUserData> anonymousSubscribedUsers = getListFromFile(anonymousSubscribedUsersFile, new TypeToken<List<SubscribedUserData>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.subscribedUserDao().insertAll(anonymousSubscribedUsers);\r\n                            }\r\n                            if (anonymousMultiredditsFile.exists()) {\r\n                                List<MultiReddit> anonymousMultireddits = getListFromFile(anonymousMultiredditsFile, new TypeToken<List<MultiReddit>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.multiRedditDao().insertAll(anonymousMultireddits);\r\n                                if (anonymousMultiredditSubredditsFile.exists()) {\r\n                                    List<AnonymousMultiredditSubreddit> anonymousMultiredditSubreddits = getListFromFile(anonymousMultiredditSubredditsFile, new TypeToken<List<AnonymousMultiredditSubreddit>>() {\r\n                                    }.getType());\r\n                                    redditDataRoomDatabase.anonymousMultiredditSubredditDao().insertAll(anonymousMultiredditSubreddits);\r\n                                }\r\n                            }\r\n                            if (customThemesFile.exists()) {\r\n                                List<CustomTheme> customThemes = getListFromFile(customThemesFile, new TypeToken<List<CustomTheme>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.customThemeDao().insertAll(customThemes);\r\n                            }\r\n                            if (postFiltersFile.exists()) {\r\n                                List<PostFilter> postFilters = getListFromFile(postFiltersFile, new TypeToken<List<PostFilter>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.postFilterDao().insertAll(postFilters);\r\n                                if (postFilterUsageFile.exists()) {\r\n                                    List<PostFilterUsage> postFilterUsage = getListFromFile(postFilterUsageFile, new TypeToken<List<PostFilterUsage>>() {\r\n                                    }.getType());\r\n                                    redditDataRoomDatabase.postFilterUsageDao().insertAll(postFilterUsage);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_failed_file_corrupted)));\r\n                }\r\n                FileUtils.deleteDirectory(new File(cachePath));\r\n                if (result) {\r\n                    handler.post(restoreSettingsListener::success);\r\n                } else {\r\n                    handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_partially_failed)));\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_partially_failed)));\r\n        }\r\n    });\r\n}\n--------------------------------------------------\npublic static void restoreSettings(Context context, Executor executor, Handler handler, ContentResolver contentResolver, Uri zipFileUri, RedditDataRoomDatabase redditDataRoomDatabase, SharedPreferences defaultSharedPreferences, SharedPreferences lightThemeSharedPreferences, SharedPreferences darkThemeSharedPreferences, SharedPreferences amoledThemeSharedPreferences, SharedPreferences sortTypeSharedPreferences, SharedPreferences postLayoutSharedPreferences, SharedPreferences postFeedScrolledPositionSharedPreferences, SharedPreferences mainActivityTabsSharedPreferences, SharedPreferences nsfwAndSpoilerSharedPreferencs, SharedPreferences bottomAppBarSharedPreferences, SharedPreferences postHistorySharedPreferences, RestoreSettingsListener restoreSettingsListener) {\r\n    executor.execute(() -> {\r\n        try {\r\n            InputStream zipFileInputStream = contentResolver.openInputStream(zipFileUri);\r\n            if (zipFileInputStream == null) {\r\n                handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_failed_cannot_get_file)));\r\n                return;\r\n            }\r\n            String cachePath = context.getExternalCacheDir() + \"/Restore/\";\r\n            if (new File(cachePath).exists()) {\r\n                FileUtils.deleteDirectory(new File(cachePath));\r\n            }\r\n            new File(cachePath).mkdir();\r\n            FileOutputStream zipCacheOutputStream = new FileOutputStream(new File(cachePath + \"restore.zip\"));\r\n            byte[] fileReader = new byte[1024];\r\n            while (true) {\r\n                int read = zipFileInputStream.read(fileReader);\r\n                if (read == -1) {\r\n                    break;\r\n                }\r\n                zipCacheOutputStream.write(fileReader, 0, read);\r\n            }\r\n            new ZipFile(cachePath + \"restore.zip\", \"123321\".toCharArray()).extractAll(cachePath);\r\n            new File(cachePath + \"restore.zip\").delete();\r\n            File[] files = new File(cachePath).listFiles();\r\n            if (files == null || files.length <= 0) {\r\n                handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_failed_file_corrupted)));\r\n            } else {\r\n                File restoreFilesDir = files[0];\r\n                File[] restoreFiles = restoreFilesDir.listFiles();\r\n                boolean result = true;\r\n                if (restoreFiles != null) {\r\n                    for (File f : restoreFiles) {\r\n                        if (f.isFile()) {\r\n                            if (f.getName().startsWith(SharedPreferencesUtils.DEFAULT_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(defaultSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(CustomThemeSharedPreferencesUtils.LIGHT_THEME_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(lightThemeSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(CustomThemeSharedPreferencesUtils.DARK_THEME_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(darkThemeSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(CustomThemeSharedPreferencesUtils.AMOLED_THEME_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(amoledThemeSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.SORT_TYPE_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(sortTypeSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.POST_LAYOUT_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(postLayoutSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.FRONT_PAGE_SCROLLED_POSITION_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(postFeedScrolledPositionSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.MAIN_PAGE_TABS_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(mainActivityTabsSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.NSFW_AND_SPOILER_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(nsfwAndSpoilerSharedPreferencs, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.BOTTOM_APP_BAR_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(bottomAppBarSharedPreferences, f.toString());\r\n                            } else if (f.getName().startsWith(SharedPreferencesUtils.POST_HISTORY_SHARED_PREFERENCES_FILE)) {\r\n                                result = result & importSharedPreferencsFromFile(postHistorySharedPreferences, f.toString());\r\n                            }\r\n                        } else if (f.isDirectory() && f.getName().equals(\"database\")) {\r\n                            if (!redditDataRoomDatabase.accountDao().isAnonymousAccountInserted()) {\r\n                                redditDataRoomDatabase.accountDao().insert(Account.getAnonymousAccount());\r\n                            }\r\n                            File anonymousSubscribedSubredditsFile = new File(f.getAbsolutePath() + \"/anonymous_subscribed_subreddits.json\");\r\n                            File anonymousSubscribedUsersFile = new File(f.getAbsolutePath() + \"/anonymous_subscribed_users.json\");\r\n                            File anonymousMultiredditsFile = new File(f.getAbsolutePath() + \"/anonymous_multireddits.json\");\r\n                            File anonymousMultiredditSubredditsFile = new File(f.getAbsolutePath() + \"/anonymous_multireddit_subreddits.json\");\r\n                            File customThemesFile = new File(f.getAbsolutePath() + \"/custom_themes.json\");\r\n                            File postFiltersFile = new File(f.getAbsolutePath() + \"/post_filters.json\");\r\n                            File postFilterUsageFile = new File(f.getAbsolutePath() + \"/post_filter_usage.json\");\r\n                            if (anonymousSubscribedSubredditsFile.exists()) {\r\n                                List<SubscribedSubredditData> anonymousSubscribedSubreddits = getListFromFile(anonymousSubscribedSubredditsFile, new TypeToken<List<SubscribedSubredditData>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.subscribedSubredditDao().insertAll(anonymousSubscribedSubreddits);\r\n                            }\r\n                            if (anonymousSubscribedUsersFile.exists()) {\r\n                                List<SubscribedUserData> anonymousSubscribedUsers = getListFromFile(anonymousSubscribedUsersFile, new TypeToken<List<SubscribedUserData>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.subscribedUserDao().insertAll(anonymousSubscribedUsers);\r\n                            }\r\n                            if (anonymousMultiredditsFile.exists()) {\r\n                                List<MultiReddit> anonymousMultireddits = getListFromFile(anonymousMultiredditsFile, new TypeToken<List<MultiReddit>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.multiRedditDao().insertAll(anonymousMultireddits);\r\n                                if (anonymousMultiredditSubredditsFile.exists()) {\r\n                                    List<AnonymousMultiredditSubreddit> anonymousMultiredditSubreddits = getListFromFile(anonymousMultiredditSubredditsFile, new TypeToken<List<AnonymousMultiredditSubreddit>>() {\r\n                                    }.getType());\r\n                                    redditDataRoomDatabase.anonymousMultiredditSubredditDao().insertAll(anonymousMultiredditSubreddits);\r\n                                }\r\n                            }\r\n                            if (customThemesFile.exists()) {\r\n                                List<CustomTheme> customThemes = getListFromFile(customThemesFile, new TypeToken<List<CustomTheme>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.customThemeDao().insertAll(customThemes);\r\n                            }\r\n                            if (postFiltersFile.exists()) {\r\n                                List<PostFilter> postFilters = getListFromFile(postFiltersFile, new TypeToken<List<PostFilter>>() {\r\n                                }.getType());\r\n                                redditDataRoomDatabase.postFilterDao().insertAll(postFilters);\r\n                                if (postFilterUsageFile.exists()) {\r\n                                    List<PostFilterUsage> postFilterUsage = getListFromFile(postFilterUsageFile, new TypeToken<List<PostFilterUsage>>() {\r\n                                    }.getType());\r\n                                    redditDataRoomDatabase.postFilterUsageDao().insertAll(postFilterUsage);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_failed_file_corrupted)));\r\n                }\r\n                FileUtils.deleteDirectory(new File(cachePath));\r\n                if (result) {\r\n                    handler.post(restoreSettingsListener::success);\r\n                } else {\r\n                    handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_partially_failed)));\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            handler.post(() -> restoreSettingsListener.failed(context.getString(R.string.restore_settings_partially_failed)));\r\n        }\r\n    });\r\n}\n--------------------------------------------------\n", "import com.google.gson.Gson;\r\nimport com.google.gson.stream.JsonReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.util.List;\r\nimport ml.docilealligator.infinityforreddit.R\nimport java.util.List\nimport java.lang.reflect.Type\nimport java.io.IOException\nimport java.io.FileReader\nimport java.io.File\nimport com.google.gson.stream.JsonReader\nimport com.google.gson.Gson\nimport androidx.annotation.Nullable\n@Nullable\r\nprivate static <T> List<T> getListFromFile(File file, Type dataType) {\r\n    try (JsonReader reader = new JsonReader(new FileReader(file))) {\r\n        Gson gson = new Gson();\r\n        return gson.fromJson(reader, dataType);\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}" ],
  "fcitx5-android/345" : [ "                    } else if (existingTef != null) {\n                        if (intent.removeTask && intent.broughtToFront) {\r\n                            moveTaskToBack(true)\n--------------------------------------------------\n                } else if (task != existingTef?.task) {\n                    existingTef?.save(remove = false)\r\n                    transaction\n--------------------------------------------------\n            firebase.addTask(source ?: \"unknown\")\n            intent.removeExtra(CREATE_TASK)\r\n            intent.removeExtra(CREATE_SOURCE)\n--------------------------------------------------\n            intent.removeExtra(CREATE_TASK)\n            intent.removeExtra(CREATE_SOURCE)\r\n            taskCreator.createWithValues(filter, \"\")\n--------------------------------------------------\n            val task = getParcelableExtra(intent, OPEN_TASK, Task::class.java)\n            intent.removeExtra(OPEN_TASK)\r\n            task\n--------------------------------------------------\nparent!!.children.remove(node)\n--------------------------------------------------\noldParent!!.children.remove(toMove)\n--------------------------------------------------\noldSiblings.remove(moveThis)\n--------------------------------------------------\nparent!!.children.remove(moveThis)\n--------------------------------------------------\nidToNode.remove(taskId)\n--------------------------------------------------\nbuilder.remove(TaskContract.Tasks._UID)\n--------------------------------------------------\nbuilder.remove(TaskContract.Tasks.CREATED)\n--------------------------------------------------\nbuilder.remove(TaskContract.Tasks.CREATED).remove(TaskContract.Tasks.LAST_MODIFIED)\n--------------------------------------------------\nremove(TaskContract.Tasks._DIRTY)\n--------------------------------------------------\nremove(TaskContract.Tasks.SYNC_VERSION)\n--------------------------------------------------\nlocalCacheCache.remove(username)\n--------------------------------------------------\nremove(preferenceScreen as PreferenceGroup, resIds)\n--------------------------------------------------\nremove(preferenceScreen, resIds)\n--------------------------------------------------\nremove(listOf(it))\n--------------------------------------------------\njobs.remove(entry.time, entry)\n--------------------------------------------------\nnotificationQueue.remove(overdueJobs)\n--------------------------------------------------\nmap.overlays.remove(it)\n--------------------------------------------------\npreferences.remove(R.string.p_backups_drive_last)\n--------------------------------------------------\npreferences.remove(R.string.p_google_drive_backup_account)\n--------------------------------------------------\nremove(R.string.upgrade_to_pro)\n--------------------------------------------------\npartiallySelected.remove(tagData)\n--------------------------------------------------\nselected.remove(tagData)\n--------------------------------------------------\nremove(it)\n--------------------------------------------------\ncollapsed.remove(group)", "import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nprivate fun remove(preferenceGroup: PreferenceGroup, resIds: IntArray) {\r\n        for (resId in resIds) {\r\n            val preference: Preference? = preferenceGroup.findPreference(getString(resId))\r\n            preference?.parent?.removePreference(preference)\r\n        }\r\n    }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceGroup], wildcard=false, alias=null)" ],
  "fcitx5-android/348" : [ "findPreference<Preference>(key)?.isSelectable\n--------------------------------------------------\nfindPreference<Preference>(\"optional_features\")?.isVisible\n--------------------------------------------------\nfindPreference<EditTextPreference>(\"network_caching\")\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = newValue.toString()\n}\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = \"0\"\n}\n--------------------------------------------------\nfindPreference<Preference>(AUDIO_DUCKING)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(RESUME_PLAYBACK)?.isVisible\n--------------------------------------------------\nval aoutPref = findPreference<ListPreference>(\"aout\")\n--------------------------------------------------\nfindPreference<Preference>(\"audio_digital_output\")?.isVisible\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)\n--------------------------------------------------\nfindPreference(\"audio_preferred_language\")!!\n--------------------------------------------------\nfindPreference<Preference>(\"audio_digital_output\")\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(\"audio_digital_output\")?.isChecked\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = fmtValue\n}\n--------------------------------------------------\nfindPreference<Preference>(\"remote_access_category\")?.isVisible\n--------------------------------------------------\nval audioResumePref = findPreference<CheckBoxPreference>(AUDIO_RESUME_PLAYBACK)\n--------------------------------------------------\nfindPreference<ListPreference>(key)?.value\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(AUDIO_RESUME_PLAYBACK)?.isChecked\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(VIDEO_RESUME_PLAYBACK)?.isChecked\n--------------------------------------------------\nval parent = findPreference<PreferenceScreen>(\"optional_features\")\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(key)!!\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(preference.key)!!\n--------------------------------------------------\nfindPreference(KEY_REMOTE_ACCESS_ML_CONTENT)!!\n--------------------------------------------------\nfindPreference(\"subtitle_preferred_language\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_size\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_bold\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_size\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_color_opacity\")!!\n--------------------------------------------------\nfindPreference<ListPreference>(\"subtitles_presets\")!!\n--------------------------------------------------\npreferenceManager.findPreference<EditTextPreference>(\"video_group_size\")\n--------------------------------------------------\nval lp = findPreference<ListPreference>(\"set_locale\")\n--------------------------------------------------\nfindPreference<Preference>(POPUP_FORCE_LEGACY)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(POPUP_KEEPSCREEN)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(AUDIO_BOOST)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_DOUBLE_TAP_SEEK)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_DOUBLE_TAP_PLAY)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_SCALE_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_SWIPE_SEEK)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(SCREENSHOT_MODE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_VOLUME_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_BRIGHTNESS_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(KEY_VIDEO_DOUBLE_TAP_JUMP_DELAY)?.title\n--------------------------------------------------\nfindPreference<Preference>(VIDEO_HUD_TIMEOUT)?.summary", "import androidx.preference.Preference\noverride fun <T : Preference?> findPreference(key: CharSequence): T? {\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return preference as? T\r\n    }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/1053" : [ "updateNowPlayingScreenSummary()\n--------------------------------------------------\nNOW_PLAYING_SCREEN_ID -> updateNowPlayingScreenSummary()", "import code.name.monkey.retromusic.util.PreferenceUtil\nimport androidx.preference.Preference\nprivate fun updateNowPlayingScreenSummary() {\n        val preference: Preference? = findPreference(NOW_PLAYING_SCREEN_ID)\n        preference?.setSummary(PreferenceUtil.nowPlayingScreen.titleRes)\n    }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)" ],
  "fcitx5-android/347" : [ "findPreference<Preference>(key)?.isSelectable\n--------------------------------------------------\nfindPreference<Preference>(\"optional_features\")?.isVisible\n--------------------------------------------------\nfindPreference<EditTextPreference>(\"network_caching\")\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = newValue.toString()\n}\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = \"0\"\n}\n--------------------------------------------------\nfindPreference<Preference>(AUDIO_DUCKING)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(RESUME_PLAYBACK)?.isVisible\n--------------------------------------------------\nval aoutPref = findPreference<ListPreference>(\"aout\")\n--------------------------------------------------\nfindPreference<Preference>(\"audio_digital_output\")?.isVisible\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)\n--------------------------------------------------\nfindPreference(\"audio_preferred_language\")!!\n--------------------------------------------------\nfindPreference<Preference>(\"audio_digital_output\")\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(\"audio_digital_output\")?.isChecked\n--------------------------------------------------\nfindPreference<EditTextPreference>(key)?.let {\n    it.text = fmtValue\n}\n--------------------------------------------------\nfindPreference<Preference>(\"remote_access_category\")?.isVisible\n--------------------------------------------------\nval audioResumePref = findPreference<CheckBoxPreference>(AUDIO_RESUME_PLAYBACK)\n--------------------------------------------------\nfindPreference<ListPreference>(key)?.value\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(AUDIO_RESUME_PLAYBACK)?.isChecked\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(VIDEO_RESUME_PLAYBACK)?.isChecked\n--------------------------------------------------\nval parent = findPreference<PreferenceScreen>(\"optional_features\")\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(key)!!\n--------------------------------------------------\nfindPreference<CheckBoxPreference>(preference.key)!!\n--------------------------------------------------\nfindPreference(KEY_REMOTE_ACCESS_ML_CONTENT)!!\n--------------------------------------------------\nfindPreference(\"subtitle_preferred_language\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_size\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_bold\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_background_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_shadow_color_opacity\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_size\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_color\")!!\n--------------------------------------------------\nfindPreference(\"subtitles_outline_color_opacity\")!!\n--------------------------------------------------\nfindPreference<ListPreference>(\"subtitles_presets\")!!\n--------------------------------------------------\npreferenceManager.findPreference<EditTextPreference>(\"video_group_size\")\n--------------------------------------------------\nval lp = findPreference<ListPreference>(\"set_locale\")\n--------------------------------------------------\nfindPreference<Preference>(POPUP_FORCE_LEGACY)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(POPUP_KEEPSCREEN)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(AUDIO_BOOST)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_DOUBLE_TAP_SEEK)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_DOUBLE_TAP_PLAY)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_SCALE_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_SWIPE_SEEK)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(SCREENSHOT_MODE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_VOLUME_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(ENABLE_BRIGHTNESS_GESTURE)?.isVisible\n--------------------------------------------------\nfindPreference<Preference>(KEY_VIDEO_DOUBLE_TAP_JUMP_DELAY)?.title\n--------------------------------------------------\nfindPreference<Preference>(VIDEO_HUD_TIMEOUT)?.summary", "import androidx.preference.Preference\noverride fun <T : Preference?> findPreference(key: CharSequence): T? {\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return preference as? T\r\n    }\nImport(names=[androidx, preference, Preference], wildcard=false, alias=null)" ],
  "Neo-Backup/281" : [ "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    @Nullable\r\n    final var context = requireContext();\r\n    @ColorInt\r\n    final int color = BrandingUtil.readBrandMainColor(context);\r\n    applyBrand(color);\r\n}\n--------------------------------------------------\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    final var context = requireContext();\r\n    final var typedValue = new TypedValue();\r\n    context.getTheme().resolveAttribute(com.google.android.material.R.attr.colorAccent, typedValue, true);\r\n    colorAccent = typedValue.data;\r\n    context.getTheme().resolveAttribute(com.google.android.material.R.attr.colorPrimary, typedValue, true);\r\n    colorPrimary = typedValue.data;\r\n    @ColorInt\r\n    final int color = BrandingUtil.readBrandMainColor(context);\r\n    applyBrand(color);\r\n}\n--------------------------------------------------\n", "import android.view.View;\r\nprivate void applyBrand() {\r\n    if (switchView != null) {\r\n        final var util = BrandingUtil.of(mainColor, getContext());\r\n        util.platform.colorSwitch(switchView);\r\n    }\r\n}" ],
  "fcitx5-android/338" : [ "super.onDetachedFromWindow()", "import android.os.Handler\noverride fun onDetachedFromWindow() {\r\n    countdownHandler.removeCallbacks(updateCallback)\r\n    super.onDetachedFromWindow()\r\n  }" ],
  "Neo-Backup/285" : [ "binding.timeline.setOnSeekBarChangeListener(timelineListener)\n--------------------------------------------------\nseekSpeed.setOnSeekBarChangeListener(seekBarListener)\n--------------------------------------------------\nsetOnSeekBarChangeListener(if (enabled) player.seekListener else null)\n--------------------------------------------------\nverticalSeekBar.setOnSeekBarChangeListener(seekListener)\n--------------------------------------------------\nsuper.setOnSeekBarChangeListener(l)", "override fun setOnSeekBarChangeListener(l: OnSeekBarChangeListener?) {\r\n        listener = l\r\n        super.setOnSeekBarChangeListener(l)\r\n    }" ],
  "Neo-Backup/282" : [ "getSelected(categories) == 0\n--------------------------------------------------\ngetSelected(categories) > 5", "import code.name.monkey.retromusic.model.CategoryInfo\nprivate fun getSelected(categories: List<CategoryInfo>): Int {\n        var selected = 0\n        for (categoryInfo in categories) {\n            if (categoryInfo.visible)\n                selected++\n        }\n        return selected\n    }" ],
  "Neo-Backup/283" : [ "                derivedStateOf {\n                    entries.toPercentages()\r\n                }", "import com.mhss.app.mybrain.util.diary.Mood\nimport com.mhss.app.mybrain.domain.model.DiaryEntry\nfun List<DiaryEntry>.toPercentages(): Map<Mood, Float> {\r\n    return this\r\n        .sortedBy { it.mood.value }\r\n        .groupingBy { it.mood }\r\n        .eachCount()\r\n        .mapValues { it.value / this.size.toFloat() }\r\n}\nimport com.mhss.app.mybrain.domain.model.DiaryEntry\nimport com.mhss.app.mybrain.util.diary.Mood" ],
  "Neo-Backup/288" : [ "alarmRepository.getAlarms()", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Alarm\noverride suspend fun getAlarms(): List<Alarm> {\r\n        return withContext(ioDispatcher) {\r\n            alarmDao.getAll()\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/430" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Neo-Backup/289" : [ "alarmRepository.getAlarms()", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Alarm\noverride suspend fun getAlarms(): List<Alarm> {\r\n        return withContext(ioDispatcher) {\r\n            alarmDao.getAll()\r\n        }\r\n    }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Neo-Backup/286" : [ "\n                ActionButtons(\r\n                    onAddAddress = { onNavigateToAddress(null) },\n--------------------------------------------------\nActionButton(R.string.Alert_Copy) {\n    TextHelper.copyText(evmAddress)\n    HudHelper.showSuccessMessage(view, R.string.Hud_Text_Copied)\n}", "import io.horizontalsystems.bankwallet.ui.compose.components.ButtonPrimaryYellow\nimport io.horizontalsystems.bankwallet.modules.evmfee.ButtonsGroupWithShade\nimport io.horizontalsystems.bankwallet.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.fillMaxWidth\n\r\n@Composable\r\nfun ActionButton(title: Int, onClick: () -> Unit) {\r\n    ButtonsGroupWithShade {\r\n        ButtonPrimaryYellow(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(start = 16.dp, end = 16.dp),\r\n            title = stringResource(title),\r\n            onClick = onClick,\r\n        )\r\n    }\r\n}\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.modules.evmfee.ButtonsGroupWithShade\nimport io.horizontalsystems.bankwallet.ui.compose.components.ButtonPrimaryYellow" ],
  "Neo-Backup/287" : [ "\n                ActionButtons(\r\n                    onAddAddress = { onNavigateToAddress(null) },\n--------------------------------------------------\nActionButton(R.string.Alert_Copy) {\n    TextHelper.copyText(evmAddress)\n    HudHelper.showSuccessMessage(view, R.string.Hud_Text_Copied)\n}", "import io.horizontalsystems.bankwallet.ui.compose.components.ButtonPrimaryYellow\nimport io.horizontalsystems.bankwallet.modules.evmfee.ButtonsGroupWithShade\nimport io.horizontalsystems.bankwallet.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.fillMaxWidth\n\r\n@Composable\r\nfun ActionButton(title: Int, onClick: () -> Unit) {\r\n    ButtonsGroupWithShade {\r\n        ButtonPrimaryYellow(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(start = 16.dp, end = 16.dp),\r\n            title = stringResource(title),\r\n            onClick = onClick,\r\n        )\r\n    }\r\n}\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.modules.evmfee.ButtonsGroupWithShade\nimport io.horizontalsystems.bankwallet.ui.compose.components.ButtonPrimaryYellow" ],
  "Trail-Sense/432" : [ "activity.resources.getString(R.string.you_are_now_a_developer)\n--------------------------------------------------\nresources.getString(R.string.about)\n--------------------------------------------------\nresources.getString(R.string.version_n)\n--------------------------------------------------\nrequireArguments().getString(\"notes\")\n--------------------------------------------------\nres.getString(R.string.yes)\n--------------------------------------------------\nres.getString(R.string.no)\n--------------------------------------------------\nthis.getString(R.string.every_x_days)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_week)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_month)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_y_days)\n--------------------------------------------------\nresources.getString(R.string.every_month)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_month, freqNum)\n--------------------------------------------------\nresources.getString(R.string.every_day)\n--------------------------------------------------\nresources.getString(R.string.every_week)\n--------------------------------------------------\nresources.getString(R.string.every_x_days, freqDen)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_week, freqNum)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_y_days, freqNum, freqDen)\n--------------------------------------------------\nbinding.toolbar.title = getString(R.string.edit_habit)\n--------------------------------------------------\nbinding.nameInput.hint = getString(R.string.measurable_short_example)\n--------------------------------------------------\nbinding.questionInput.hint = getString(R.string.measurable_question_example)\n--------------------------------------------------\ngetString(R.string.target_type_at_least)\n--------------------------------------------------\ngetString(R.string.target_type_at_most)\n--------------------------------------------------\ngetString(R.string.every_day)\n--------------------------------------------------\ngetString(R.string.every_week)\n--------------------------------------------------\ngetString(R.string.every_month)\n--------------------------------------------------\nbinding.targetInput.error = getString(R.string.validation_cannot_be_blank)\n--------------------------------------------------\nbinding.reminderTimePicker.text = getString(R.string.reminder_off)\n--------------------------------------------------\n1 -> getString(R.string.every_day)\n--------------------------------------------------\n7 -> getString(R.string.every_week)\n--------------------------------------------------\n30 -> getString(R.string.every_month)\n--------------------------------------------------\nNumericalHabitType.AT_MOST -> getString(R.string.target_type_at_most)\n--------------------------------------------------\nelse -> getString(R.string.target_type_at_least)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_entered)\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_completed)\n--------------------------------------------------\nresources.getString(R.string.main_activity_title)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_import)\n--------------------------------------------------\ngetString(when(m) {\n    COULD_NOT_EXPORT -> R.string.could_not_export\n    IMPORT_SUCCESSFUL -> R.string.habits_imported\n    IMPORT_FAILED -> R.string.could_not_import\n    DATABASE_REPAIRED -> R.string.database_repaired\n    COULD_NOT_GENERATE_BUG_REPORT -> R.string.bug_report_failed\n    FILE_NOT_RECOGNIZED -> R.string.file_not_recognized\n})\n--------------------------------------------------\nactivity.resources.getString(R.string.toast_habit_created)\n--------------------------------------------------\nactivity.resources.getString(R.string.habits_imported)\n--------------------------------------------------\nactivity.resources.getString(R.string.file_not_recognized)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(id)\n--------------------------------------------------\nresources.getString(R.string.hint_title)\n--------------------------------------------------\nresources.getString(R.string.fa_skipped)\n--------------------------------------------------\nresources.getString(R.string.fa_question)\n--------------------------------------------------\nresources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(R.string.reminder_off)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_up)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_down)\n--------------------------------------------------\nresources.getString(R.string.today)\n--------------------------------------------------\nresources.getString(R.string.week)\n--------------------------------------------------\nresources.getString(R.string.month)\n--------------------------------------------------\nresources.getString(R.string.quarter)\n--------------------------------------------------\nresources.getString(R.string.year)\n--------------------------------------------------\ngetString(R.string.intro_title_1)\n--------------------------------------------------\ngetString(R.string.intro_description_1)\n--------------------------------------------------\ngetString(R.string.intro_title_2)\n--------------------------------------------------\ngetString(R.string.intro_description_2)\n--------------------------------------------------\ngetString(R.string.intro_title_4)\n--------------------------------------------------\ngetString(R.string.intro_description_4)\n--------------------------------------------------\nresources.getString(R.string.settings)\n--------------------------------------------------\ngetString(R.string.playStoreURL)\n--------------------------------------------------\nactivity.getString(R.string.check)\n--------------------------------------------------\nactivity.getString(R.string.uncheck)\n--------------------------------------------------\nactivity.getString(R.string.toggle)\n--------------------------------------------------\nactivity.getString(R.string.increment)\n--------------------------------------------------\nactivity.getString(R.string.decrement)\n--------------------------------------------------\nresources.getString(R.string.app_name)\n--------------------------------------------------\ncursor.getString(index)\n--------------------------------------------------\ncontext.getString(R.string.translateURL)\n--------------------------------------------------\ncontext.getString(R.string.playStoreURL)\n--------------------------------------------------\ncontext.getString(R.string.feedbackURL)\n--------------------------------------------------\ncontext.getString(R.string.privacyPolicyURL)\n--------------------------------------------------\ncontext.getString(R.string.helpURL)\n--------------------------------------------------\ncontext.getString(R.string.sourceCodeURL)\n--------------------------------------------------\ncontext.getString(R.string.codeContributorsURL)\n--------------------------------------------------\ncontext.getString(R.string.yes)\n--------------------------------------------------\ncontext.getString(R.string.no)\n--------------------------------------------------\ncontext.getString(R.string.enter)\n--------------------------------------------------\ncontext.getString(R.string.default_reminder_question)\n--------------------------------------------------\ncontext.getString(R.string.snooze)\n--------------------------------------------------\ncontext.resources.getString(R.string.reminder)\n--------------------------------------------------\ncontext.resources.getString(R.string.none)\n--------------------------------------------------\nprefs.getString(\"pref_ringtone_uri\", defaultRingtoneUri.toString())\n--------------------------------------------------\nsharedPrefs.getString(key, defValue)\n--------------------------------------------------\ncontext.resources.getString(resId)\n--------------------------------------------------\ncontext.getString(R.string.weekends)\n--------------------------------------------------\ncontext.getString(R.string.any_weekday)\n--------------------------------------------------\ncontext.getString(R.string.any_day)\n--------------------------------------------------\nresources.getString(R.string.activity_not_found)\n--------------------------------------------------\nthis.getString(toId)\n--------------------------------------------------\nthis.getString(subjectId)\n--------------------------------------------------\ncontext.getString(R.string.habit_not_found)\n--------------------------------------------------\nresources.getString(R.string.fa_check)\n--------------------------------------------------\nresources.getString(R.string.fa_times)", "override fun getString(index: Int): String? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getString(index)\r\n        }\r\n    }" ],
  "Trail-Sense/435" : [ "{\n        super.onLayout(changed, left, top, right, bottom)\n        if (changed) {\n--------------------------------------------------\n        if (song == Song.emptySong) return\n        val notificationLayout = getCombinedRemoteViews(true, song)\n        val notificationLayoutBig = getCombinedRemoteViews(false, song)\n--------------------------------------------------\n        val notificationLayout = getCombinedRemoteViews(true, song)\n        val notificationLayoutBig = getCombinedRemoteViews(false, song)\n\n--------------------------------------------------\n        setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n        setCustomContentView(notificationLayout)\n        setCustomBigContentView(notificationLayoutBig)\n--------------------------------------------------\n        setCustomContentView(notificationLayout)\n        setCustomBigContentView(notificationLayoutBig)\n        setOngoing(true)\n--------------------------------------------------\n        pendingIntent = buildPendingIntent(context, ACTION_REWIND, serviceName)\n        notificationLayout.setOnClickPendingIntent(R.id.action_prev, pendingIntent)\n\n--------------------------------------------------\n        pendingIntent = buildPendingIntent(context, ACTION_TOGGLE_PAUSE, serviceName)\n        notificationLayout.setOnClickPendingIntent(R.id.action_play_pause, pendingIntent)\n\n--------------------------------------------------\n        pendingIntent = buildPendingIntent(context, ACTION_SKIP, serviceName)\n        notificationLayout.setOnClickPendingIntent(R.id.action_next, pendingIntent)\n\n--------------------------------------------------\n        pendingIntent = buildPendingIntent(context, ACTION_QUIT, serviceName)\n        notificationLayout.setOnClickPendingIntent(R.id.action_quit, pendingIntent)\n    }", "import android.text.Layout\nimport android.graphics.drawable.Drawable\noverride fun onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int) {\n        super.onLayout(changed, left, top, right, bottom)\n        if (changed) {\n            initPlayDrawable()\n            initEntryList()\n            if (hasLrc()) {\n                smoothScrollTo(mCurrentLine, 0L)\n            }\n        }\n    }\nimport android.graphics.drawable.Drawable\nimport android.text.Layout" ],
  "Iconify/346" : [ "@SuppressWarnings(\"WeakerAccess\")\r\n/* synthetic access */\r\nvoid dispatchingValue(@Nullable ObserverWrapper initiator) {\r\n    if (mDispatchingValue) {\r\n        mDispatchInvalidated = true;\r\n        return;\r\n    }\r\n    mDispatchingValue = true;\r\n    do {\r\n        mDispatchInvalidated = false;\r\n        if (initiator != null) {\r\n            considerNotify(initiator);\r\n            initiator = null;\r\n        } else {\r\n            for (Iterator<Map.Entry<Observer<? super T>, ObserverWrapper>> iterator = mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\r\n                considerNotify(iterator.next().getValue());\r\n                if (mDispatchInvalidated) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } while (mDispatchInvalidated);\r\n    mDispatchingValue = false;\r\n}\n--------------------------------------------------\nprivate static void prunePoolLocked() {\r\n    if (sQueryPool.size() > POOL_LIMIT) {\r\n        int toBeRemoved = sQueryPool.size() - DESIRED_POOL_SIZE;\r\n        final Iterator<Integer> iterator = sQueryPool.descendingKeySet().iterator();\r\n        while (toBeRemoved-- > 0) {\r\n            iterator.next();\r\n            iterator.remove();\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import java.io.IOException;\r\nimport java.io.IOException\nimport androidx.annotation.Nullable\n/**\r\n * Will advance to next token and bind the JSON to provided instance\r\n *\r\n * @param binder binder to use\r\n * @param instance instance to bind\r\n * @param <T> type\r\n * @return bound instance\r\n * @throws IOException unable to process JSON\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\npublic final <T> T next(final BindObject<T> binder, final T instance) throws IOException {\r\n    if (binder == null)\r\n        throw new IllegalArgumentException(\"binder can't be null\");\r\n    if (instance == null)\r\n        throw new IllegalArgumentException(\"instance can't be null\");\r\n    if (this.getNextToken() == 'n') {\r\n        if (!wasNull())\r\n            throw newParseErrorAt(\"Expecting 'null' as null constant\", 0);\r\n        return null;\r\n    }\r\n    return binder.bind(this, instance);\r\n}" ],
  "VinylMusicPlayer/1049" : [ "@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n@Override\r\npublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {\r\n    InputConnection ic = super.onCreateInputConnection(outAttrs);\r\n    if (ic == null)\r\n        return null;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;\r\n    outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NAVIGATE_NEXT;\r\n    if (IRCCloudApplication.getInstance().getApplicationContext().getResources().getBoolean(R.bool.isTablet) || PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_send\", false)) {\r\n        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;\r\n    } else {\r\n        outAttrs.inputType = EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT | EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE;\r\n        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;\r\n    }\r\n    if (PreferenceManager.getDefaultSharedPreferences(IRCCloudApplication.getInstance().getApplicationContext()).getBoolean(\"kb_caps\", true)) {\r\n        outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    } else {\r\n        outAttrs.inputType &= ~EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES;\r\n    }\r\n    EditorInfoCompat.setContentMimeTypes(outAttrs, new String[] { \"image/*\" });\r\n    final InputConnectionCompat.OnCommitContentListener callback = new InputConnectionCompat.OnCommitContentListener() {\r\n\r\n        @Override\r\n        public boolean onCommitContent(InputContentInfoCompat inputContentInfo, int flags, Bundle opts) {\r\n            // read and display inputContentInfo asynchronously\r\n            if ((flags & InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != 0) {\r\n                try {\r\n                    inputContentInfo.requestPermission();\r\n                } catch (Exception e) {\r\n                    // return false if failed\r\n                    return false;\r\n                }\r\n            }\r\n            if (imageListener != null) {\r\n                boolean result = imageListener.onIMEImageReceived(inputContentInfo);\r\n                inputContentInfo.releasePermission();\r\n                return result;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    return InputConnectionCompat.createWrapper(ic, outAttrs, callback);\r\n}\n--------------------------------------------------\n", "import com.irccloud.android.data.model.Notification;\r\nimport java.util.List;\r\nimport java.util.List\nimport com.irccloud.android.data.model.Notification\npublic static NotificationsList getInstance() {\r\n    if (instance == null)\r\n        instance = new NotificationsList();\r\n    return instance;\r\n}" ],
  "Trail-Sense/438" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1046" : [ "public Integer loadCurrencyIdFor(int id) {\r\n    Account account = (Account) first(Account.class, new String[] { Account.CURRENCYID }, Account.ACCOUNTID + \"=?\", MmxDatabaseUtils.getArgsForId(id), null);\r\n    if (account == null) {\r\n        return null;\r\n        //            String message = this.getContext().getString(R.string.account_not_found) + \" \" + id;\r\n        //            throw new IllegalArgumentException(message);\r\n    }\r\n    return account.getCurrencyId();\r\n}\n--------------------------------------------------\npublic boolean anyAccountsUsingCurrency(int currencyId) {\r\n    int links = count(Account.CURRENCYID + \"=?\", MmxDatabaseUtils.getArgsForId(currencyId));\r\n    return links > 0;\r\n}\n--------------------------------------------------\n", "public static String[] getArgsForId(int id) {\r\n    String[] result = new String[] { Integer.toString(id) };\r\n    return result;\r\n}" ],
  "VinylMusicPlayer/1041" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n@NonNull\r\npublic static synchronized HistoryStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new HistoryStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "fcitx5-android/330" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}" ],
  "fcitx5-android/333" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    /////////////////////\r\n    // Setup preferences\r\n    /////////////////////\r\n    loadPref();\r\n    // Verify storage permission\r\n    verifyStoragePermission();\r\n    // Verify notification permission\r\n    verifyNotificationPermission();\r\n    ////////////////\r\n    // Setup theme\r\n    ////////////////\r\n    setupTheme();\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    ///////////////////////////\r\n    // Setup main application\r\n    ///////////////////////////\r\n    setupApplication();\r\n    //////////////////\r\n    // Setup database\r\n    //////////////////\r\n    setupDatabase();\r\n    //////////////////\r\n    // Setup backup\r\n    //////////////////\r\n    setupBackup();\r\n    /////////////////\r\n    // Setup toolbar\r\n    ////////////////\r\n    setupToolBar();\r\n    ////////////////////\r\n    // Setup status bar\r\n    ///////////////////\r\n    setupStatusBar();\r\n    ////////////////////\r\n    // Setup animation\r\n    ///////////////////\r\n    setupAnimation();\r\n    ///////////////////////////\r\n    // Setup navigation drawer\r\n    //////////////////////////\r\n    setupNavigationDrawer(savedInstanceState);\r\n    ///////////////////////\r\n    // Setup recycler view\r\n    ///////////////////////\r\n    setupRecyclerView();\r\n    /////////////\r\n    // Setup FAB\r\n    /////////////\r\n    setupFAB();\r\n    ///////////////////////\r\n    // Setup file observer\r\n    ///////////////////////\r\n    setupFileObserver();\r\n    ////////////////\r\n    // Setup mirror\r\n    ////////////////\r\n    setupMirror();\r\n    ///////////////////////\r\n    // Setup light sensor\r\n    ///////////////////////\r\n    if (mLux)\r\n        setupLightSensor();\r\n    ///////////////////////\r\n    // Apply theme\r\n    ///////////////////////\r\n    applyTheme();\r\n    /////////////////////\r\n    // Setup animation\r\n    /////////////////////\r\n    setupAnimation();\r\n    //////////////////////////\r\n    // Setup the startup list\r\n    //////////////////////////\r\n    setupStartupList();\r\n    ////////////////////////////\r\n    // Setup local find history\r\n    ////////////////////////////\r\n    setupLocalFindHistory();\r\n    /////////////////////////\r\n    // Setup process text\r\n    /////////////////////////\r\n    setupProcessText();\r\n    ///////////////////\r\n    // Handle intent\r\n    ///////////////////\r\n    handleIntent(getIntent());\r\n}\n--------------------------------------------------\n", "import android.util.Log;\r\nimport android.util.Log\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    Log.d(Const.TAG, \"nano - onDestroy\");\r\n    // Stop observer\r\n    if (mObserver != null)\r\n        mObserver.stopWatching();\r\n    main_activity = null;\r\n    mDatasource.close();\r\n}" ],
  "fcitx5-android/332" : [ "", "import android.util.Log;\r\nimport java.util.List;\r\nimport java.util.List\nimport android.util.Log\n@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    Log.d(Const.TAG, \"nano - onStop\");\r\n    // Mirror if applicable\r\n    if (hasMirror()) {\r\n        // Any change since last mirroring?\r\n        List<Long> results = mDatasource.getAllActiveRecordsIDsByLastModified(Const.SORT_BY_TITLE, Const.SORT_ASC, mLastMirrored, \">\");\r\n        if (results.size() > 0)\r\n            doSAFMirrorSync(Const.MIRROR_INSTANT_WORK_TAG);\r\n    }\r\n}" ],
  "VinylMusicPlayer/1045" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n@NonNull\r\npublic static synchronized HistoryStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new HistoryStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "VinylMusicPlayer/1044" : [ "private void fillData() {\r\n    // Fields from the database (projection)\r\n    // Must include the _id column for the adapter to work\r\n    String[] from = new String[] { \"_id\", DB.ACCOUNT.NAME, DB.ACCOUNT.FLAGS, DB.ACCOUNT.FORMAT, DB.ACCOUNT.AUTH_CONFIG };\r\n    String[] args = { mSynchronizerName };\r\n    Cursor c = mDB.query(DB.ACCOUNT.TABLE, from, DB.ACCOUNT.NAME + \" = ?\", args, null, null, null);\r\n    if (c.moveToFirst()) {\r\n        Synchronizer synchronizer;\r\n        {\r\n            ContentValues tmp = DBHelper.get(c);\r\n            synchronizer = syncManager.add(tmp);\r\n            flags = tmp.getAsLong(DB.ACCOUNT.FLAGS);\r\n            format = new FileFormats(tmp.getAsString(DB.ACCOUNT.FORMAT));\r\n            if (synchronizer == null) {\r\n                return;\r\n            }\r\n        }\r\n        {\r\n            ImageView im = findViewById(R.id.account_icon);\r\n            TextView tv = findViewById(R.id.account_name);\r\n            if (synchronizer.getIconId() == 0 || mSynchronizerName.equals(FileSynchronizer.NAME)) {\r\n                if (!TextUtils.isEmpty(synchronizer.getPublicUrl())) {\r\n                    tv.setText(synchronizer.getPublicUrl());\r\n                    tv.setTag(synchronizer.getPublicUrl());\r\n                    // FileSynchronizer: SDK 24 requires the file URI to be handled as FileProvider\r\n                    // Something like OI File Manager is needed too\r\n                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N || !synchronizer.getName().equals(FileSynchronizer.NAME)) {\r\n                        tv.setOnClickListener(urlButtonClick);\r\n                    }\r\n                } else {\r\n                    tv.setText(synchronizer.getName());\r\n                }\r\n                im.setVisibility(View.GONE);\r\n                tv.setVisibility(View.VISIBLE);\r\n            } else {\r\n                im.setImageDrawable(AppCompatResources.getDrawable(this, synchronizer.getIconId()));\r\n                if (!TextUtils.isEmpty(synchronizer.getPublicUrl())) {\r\n                    im.setTag(synchronizer.getPublicUrl());\r\n                    im.setOnClickListener(urlButtonClick);\r\n                }\r\n                im.setVisibility(View.VISIBLE);\r\n                tv.setVisibility(View.GONE);\r\n            }\r\n        }\r\n        if (synchronizer.getName().equals(RunnerUpLiveSynchronizer.NAME)) {\r\n            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());\r\n            final Resources res = this.getResources();\r\n            final String POST_URL = \"http://weide.devsparkles.se/api/Resource/\";\r\n            String postUrl = prefs.getString(res.getString(R.string.pref_runneruplive_serveradress), POST_URL);\r\n            mRunnerUpLiveApiAddress = new EditText(this.getApplicationContext());\r\n            mRunnerUpLiveApiAddress.setSingleLine();\r\n            mRunnerUpLiveApiAddress.setText(postUrl, TextView.BufferType.EDITABLE);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.RunnerUp_live_address) + \":\", mRunnerUpLiveApiAddress);\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.UPLOAD)) {\r\n            CheckBox cb = new CheckBox(this);\r\n            cb.setTag(DB.ACCOUNT.FLAG_UPLOAD);\r\n            cb.setChecked(Bitfield.test(flags, DB.ACCOUNT.FLAG_UPLOAD));\r\n            cb.setOnCheckedChangeListener(sendCBChecked);\r\n            cb.setMinimumHeight(48);\r\n            cb.setMinimumWidth(48);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.Automatic_upload), cb);\r\n        } else {\r\n            Button btn = findViewById(R.id.account_upload_button);\r\n            btn.setVisibility(View.GONE);\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.FILE_FORMAT)) {\r\n            // Add file format checkboxes\r\n            addRow(getResources().getString(org.runnerup.common.R.string.File_format), null);\r\n            for (FileFormats.Format f : FileFormats.ALL_FORMATS) {\r\n                CheckBox cb = new CheckBox(this);\r\n                cb.setChecked(format.contains(f));\r\n                cb.setTag(f);\r\n                cb.setOnCheckedChangeListener(sendCBChecked);\r\n                cb.setMinimumHeight(48);\r\n                cb.setMinimumWidth(48);\r\n                addRow(f.getName(), cb);\r\n            }\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.LIVE)) {\r\n            CheckBox cb = new CheckBox(this);\r\n            cb.setTag(DB.ACCOUNT.FLAG_LIVE);\r\n            cb.setChecked(Bitfield.test(flags, DB.ACCOUNT.FLAG_LIVE));\r\n            cb.setOnCheckedChangeListener(sendCBChecked);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.Live), cb);\r\n        }\r\n    }\r\n    mCursors.add(c);\r\n}\n--------------------------------------------------\nprivate void fillData() {\r\n    // Fields from the database (projection)\r\n    // Must include the _id column for the adapter to work\r\n    String[] from = new String[] { \"_id\", DB.ACCOUNT.NAME, DB.ACCOUNT.FLAGS, DB.ACCOUNT.FORMAT, DB.ACCOUNT.AUTH_CONFIG };\r\n    String[] args = { mSynchronizerName };\r\n    Cursor c = mDB.query(DB.ACCOUNT.TABLE, from, DB.ACCOUNT.NAME + \" = ?\", args, null, null, null);\r\n    if (c.moveToFirst()) {\r\n        Synchronizer synchronizer;\r\n        {\r\n            ContentValues tmp = DBHelper.get(c);\r\n            synchronizer = syncManager.add(tmp);\r\n            flags = tmp.getAsLong(DB.ACCOUNT.FLAGS);\r\n            format = new FileFormats(tmp.getAsString(DB.ACCOUNT.FORMAT));\r\n            if (synchronizer == null) {\r\n                return;\r\n            }\r\n        }\r\n        {\r\n            ImageView im = findViewById(R.id.account_icon);\r\n            TextView tv = findViewById(R.id.account_name);\r\n            if (synchronizer.getIconId() == 0 || mSynchronizerName.equals(FileSynchronizer.NAME)) {\r\n                if (!TextUtils.isEmpty(synchronizer.getPublicUrl())) {\r\n                    tv.setText(synchronizer.getPublicUrl());\r\n                    tv.setTag(synchronizer.getPublicUrl());\r\n                    // FileSynchronizer: SDK 24 requires the file URI to be handled as FileProvider\r\n                    // Something like OI File Manager is needed too\r\n                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N || !synchronizer.getName().equals(FileSynchronizer.NAME)) {\r\n                        tv.setOnClickListener(urlButtonClick);\r\n                    }\r\n                } else {\r\n                    tv.setText(synchronizer.getName());\r\n                }\r\n                im.setVisibility(View.GONE);\r\n                tv.setVisibility(View.VISIBLE);\r\n            } else {\r\n                im.setImageDrawable(AppCompatResources.getDrawable(this, synchronizer.getIconId()));\r\n                if (!TextUtils.isEmpty(synchronizer.getPublicUrl())) {\r\n                    im.setTag(synchronizer.getPublicUrl());\r\n                    im.setOnClickListener(urlButtonClick);\r\n                }\r\n                im.setVisibility(View.VISIBLE);\r\n                tv.setVisibility(View.GONE);\r\n            }\r\n        }\r\n        if (synchronizer.getName().equals(RunnerUpLiveSynchronizer.NAME)) {\r\n            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());\r\n            final Resources res = this.getResources();\r\n            final String POST_URL = \"http://weide.devsparkles.se/api/Resource/\";\r\n            String postUrl = prefs.getString(res.getString(R.string.pref_runneruplive_serveradress), POST_URL);\r\n            mRunnerUpLiveApiAddress = new EditText(this.getApplicationContext());\r\n            mRunnerUpLiveApiAddress.setSingleLine();\r\n            mRunnerUpLiveApiAddress.setText(postUrl, TextView.BufferType.EDITABLE);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.RunnerUp_live_address) + \":\", mRunnerUpLiveApiAddress);\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.UPLOAD)) {\r\n            CheckBox cb = new CheckBox(this);\r\n            cb.setTag(DB.ACCOUNT.FLAG_UPLOAD);\r\n            cb.setChecked(Bitfield.test(flags, DB.ACCOUNT.FLAG_UPLOAD));\r\n            cb.setOnCheckedChangeListener(sendCBChecked);\r\n            cb.setMinimumHeight(48);\r\n            cb.setMinimumWidth(48);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.Automatic_upload), cb);\r\n        } else {\r\n            Button btn = findViewById(R.id.account_upload_button);\r\n            btn.setVisibility(View.GONE);\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.FILE_FORMAT)) {\r\n            // Add file format checkboxes\r\n            addRow(getResources().getString(org.runnerup.common.R.string.File_format), null);\r\n            for (FileFormats.Format f : FileFormats.ALL_FORMATS) {\r\n                CheckBox cb = new CheckBox(this);\r\n                cb.setChecked(format.contains(f));\r\n                cb.setTag(f);\r\n                cb.setOnCheckedChangeListener(sendCBChecked);\r\n                cb.setMinimumHeight(48);\r\n                cb.setMinimumWidth(48);\r\n                addRow(f.getName(), cb);\r\n            }\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.LIVE)) {\r\n            CheckBox cb = new CheckBox(this);\r\n            cb.setTag(DB.ACCOUNT.FLAG_LIVE);\r\n            cb.setChecked(Bitfield.test(flags, DB.ACCOUNT.FLAG_LIVE));\r\n            cb.setOnCheckedChangeListener(sendCBChecked);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.Live), cb);\r\n        }\r\n    }\r\n    mCursors.add(c);\r\n}\n--------------------------------------------------\n", "public static boolean test(long flags, int bit) {\r\n    long val = (1L << bit);\r\n    return (flags & val) == val;\r\n}" ],
  "VinylMusicPlayer/1043" : [ "private void fillData() {\r\n    // Fields from the database (projection)\r\n    // Must include the _id column for the adapter to work\r\n    String[] from = new String[] { \"_id\", DB.ACCOUNT.NAME, DB.ACCOUNT.FLAGS, DB.ACCOUNT.FORMAT, DB.ACCOUNT.AUTH_CONFIG };\r\n    String[] args = { mSynchronizerName };\r\n    Cursor c = mDB.query(DB.ACCOUNT.TABLE, from, DB.ACCOUNT.NAME + \" = ?\", args, null, null, null);\r\n    if (c.moveToFirst()) {\r\n        Synchronizer synchronizer;\r\n        {\r\n            ContentValues tmp = DBHelper.get(c);\r\n            synchronizer = syncManager.add(tmp);\r\n            flags = tmp.getAsLong(DB.ACCOUNT.FLAGS);\r\n            format = new FileFormats(tmp.getAsString(DB.ACCOUNT.FORMAT));\r\n            if (synchronizer == null) {\r\n                return;\r\n            }\r\n        }\r\n        {\r\n            ImageView im = findViewById(R.id.account_icon);\r\n            TextView tv = findViewById(R.id.account_name);\r\n            if (synchronizer.getIconId() == 0 || mSynchronizerName.equals(FileSynchronizer.NAME)) {\r\n                if (!TextUtils.isEmpty(synchronizer.getPublicUrl())) {\r\n                    tv.setText(synchronizer.getPublicUrl());\r\n                    tv.setTag(synchronizer.getPublicUrl());\r\n                    // FileSynchronizer: SDK 24 requires the file URI to be handled as FileProvider\r\n                    // Something like OI File Manager is needed too\r\n                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N || !synchronizer.getName().equals(FileSynchronizer.NAME)) {\r\n                        tv.setOnClickListener(urlButtonClick);\r\n                    }\r\n                } else {\r\n                    tv.setText(synchronizer.getName());\r\n                }\r\n                im.setVisibility(View.GONE);\r\n                tv.setVisibility(View.VISIBLE);\r\n            } else {\r\n                im.setImageDrawable(AppCompatResources.getDrawable(this, synchronizer.getIconId()));\r\n                if (!TextUtils.isEmpty(synchronizer.getPublicUrl())) {\r\n                    im.setTag(synchronizer.getPublicUrl());\r\n                    im.setOnClickListener(urlButtonClick);\r\n                }\r\n                im.setVisibility(View.VISIBLE);\r\n                tv.setVisibility(View.GONE);\r\n            }\r\n        }\r\n        if (synchronizer.getName().equals(RunnerUpLiveSynchronizer.NAME)) {\r\n            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());\r\n            final Resources res = this.getResources();\r\n            final String POST_URL = \"http://weide.devsparkles.se/api/Resource/\";\r\n            String postUrl = prefs.getString(res.getString(R.string.pref_runneruplive_serveradress), POST_URL);\r\n            mRunnerUpLiveApiAddress = new EditText(this.getApplicationContext());\r\n            mRunnerUpLiveApiAddress.setSingleLine();\r\n            mRunnerUpLiveApiAddress.setText(postUrl, TextView.BufferType.EDITABLE);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.RunnerUp_live_address) + \":\", mRunnerUpLiveApiAddress);\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.UPLOAD)) {\r\n            CheckBox cb = new CheckBox(this);\r\n            cb.setTag(DB.ACCOUNT.FLAG_UPLOAD);\r\n            cb.setChecked(Bitfield.test(flags, DB.ACCOUNT.FLAG_UPLOAD));\r\n            cb.setOnCheckedChangeListener(sendCBChecked);\r\n            cb.setMinimumHeight(48);\r\n            cb.setMinimumWidth(48);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.Automatic_upload), cb);\r\n        } else {\r\n            Button btn = findViewById(R.id.account_upload_button);\r\n            btn.setVisibility(View.GONE);\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.FILE_FORMAT)) {\r\n            // Add file format checkboxes\r\n            addRow(getResources().getString(org.runnerup.common.R.string.File_format), null);\r\n            for (FileFormats.Format f : FileFormats.ALL_FORMATS) {\r\n                CheckBox cb = new CheckBox(this);\r\n                cb.setChecked(format.contains(f));\r\n                cb.setTag(f);\r\n                cb.setOnCheckedChangeListener(sendCBChecked);\r\n                cb.setMinimumHeight(48);\r\n                cb.setMinimumWidth(48);\r\n                addRow(f.getName(), cb);\r\n            }\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.LIVE)) {\r\n            CheckBox cb = new CheckBox(this);\r\n            cb.setTag(DB.ACCOUNT.FLAG_LIVE);\r\n            cb.setChecked(Bitfield.test(flags, DB.ACCOUNT.FLAG_LIVE));\r\n            cb.setOnCheckedChangeListener(sendCBChecked);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.Live), cb);\r\n        }\r\n    }\r\n    mCursors.add(c);\r\n}\n--------------------------------------------------\nprivate void fillData() {\r\n    // Fields from the database (projection)\r\n    // Must include the _id column for the adapter to work\r\n    String[] from = new String[] { \"_id\", DB.ACCOUNT.NAME, DB.ACCOUNT.FLAGS, DB.ACCOUNT.FORMAT, DB.ACCOUNT.AUTH_CONFIG };\r\n    String[] args = { mSynchronizerName };\r\n    Cursor c = mDB.query(DB.ACCOUNT.TABLE, from, DB.ACCOUNT.NAME + \" = ?\", args, null, null, null);\r\n    if (c.moveToFirst()) {\r\n        Synchronizer synchronizer;\r\n        {\r\n            ContentValues tmp = DBHelper.get(c);\r\n            synchronizer = syncManager.add(tmp);\r\n            flags = tmp.getAsLong(DB.ACCOUNT.FLAGS);\r\n            format = new FileFormats(tmp.getAsString(DB.ACCOUNT.FORMAT));\r\n            if (synchronizer == null) {\r\n                return;\r\n            }\r\n        }\r\n        {\r\n            ImageView im = findViewById(R.id.account_icon);\r\n            TextView tv = findViewById(R.id.account_name);\r\n            if (synchronizer.getIconId() == 0 || mSynchronizerName.equals(FileSynchronizer.NAME)) {\r\n                if (!TextUtils.isEmpty(synchronizer.getPublicUrl())) {\r\n                    tv.setText(synchronizer.getPublicUrl());\r\n                    tv.setTag(synchronizer.getPublicUrl());\r\n                    // FileSynchronizer: SDK 24 requires the file URI to be handled as FileProvider\r\n                    // Something like OI File Manager is needed too\r\n                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N || !synchronizer.getName().equals(FileSynchronizer.NAME)) {\r\n                        tv.setOnClickListener(urlButtonClick);\r\n                    }\r\n                } else {\r\n                    tv.setText(synchronizer.getName());\r\n                }\r\n                im.setVisibility(View.GONE);\r\n                tv.setVisibility(View.VISIBLE);\r\n            } else {\r\n                im.setImageDrawable(AppCompatResources.getDrawable(this, synchronizer.getIconId()));\r\n                if (!TextUtils.isEmpty(synchronizer.getPublicUrl())) {\r\n                    im.setTag(synchronizer.getPublicUrl());\r\n                    im.setOnClickListener(urlButtonClick);\r\n                }\r\n                im.setVisibility(View.VISIBLE);\r\n                tv.setVisibility(View.GONE);\r\n            }\r\n        }\r\n        if (synchronizer.getName().equals(RunnerUpLiveSynchronizer.NAME)) {\r\n            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());\r\n            final Resources res = this.getResources();\r\n            final String POST_URL = \"http://weide.devsparkles.se/api/Resource/\";\r\n            String postUrl = prefs.getString(res.getString(R.string.pref_runneruplive_serveradress), POST_URL);\r\n            mRunnerUpLiveApiAddress = new EditText(this.getApplicationContext());\r\n            mRunnerUpLiveApiAddress.setSingleLine();\r\n            mRunnerUpLiveApiAddress.setText(postUrl, TextView.BufferType.EDITABLE);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.RunnerUp_live_address) + \":\", mRunnerUpLiveApiAddress);\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.UPLOAD)) {\r\n            CheckBox cb = new CheckBox(this);\r\n            cb.setTag(DB.ACCOUNT.FLAG_UPLOAD);\r\n            cb.setChecked(Bitfield.test(flags, DB.ACCOUNT.FLAG_UPLOAD));\r\n            cb.setOnCheckedChangeListener(sendCBChecked);\r\n            cb.setMinimumHeight(48);\r\n            cb.setMinimumWidth(48);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.Automatic_upload), cb);\r\n        } else {\r\n            Button btn = findViewById(R.id.account_upload_button);\r\n            btn.setVisibility(View.GONE);\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.FILE_FORMAT)) {\r\n            // Add file format checkboxes\r\n            addRow(getResources().getString(org.runnerup.common.R.string.File_format), null);\r\n            for (FileFormats.Format f : FileFormats.ALL_FORMATS) {\r\n                CheckBox cb = new CheckBox(this);\r\n                cb.setChecked(format.contains(f));\r\n                cb.setTag(f);\r\n                cb.setOnCheckedChangeListener(sendCBChecked);\r\n                cb.setMinimumHeight(48);\r\n                cb.setMinimumWidth(48);\r\n                addRow(f.getName(), cb);\r\n            }\r\n        }\r\n        if (synchronizer.checkSupport(Synchronizer.Feature.LIVE)) {\r\n            CheckBox cb = new CheckBox(this);\r\n            cb.setTag(DB.ACCOUNT.FLAG_LIVE);\r\n            cb.setChecked(Bitfield.test(flags, DB.ACCOUNT.FLAG_LIVE));\r\n            cb.setOnCheckedChangeListener(sendCBChecked);\r\n            addRow(getResources().getString(org.runnerup.common.R.string.Live), cb);\r\n        }\r\n    }\r\n    mCursors.add(c);\r\n}\n--------------------------------------------------\n", "public static boolean test(long flags, int bit) {\r\n    long val = (1L << bit);\r\n    return (flags & val) == val;\r\n}" ],
  "fcitx5-android/337" : [ "", "import android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\n// Create new views (invoked by the layout manager)\r\n@Override\r\npublic CustomAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n    // Create a new view\r\n    View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.main_list_item, parent, false);\r\n    // Set the view's size, margins, paddings and layout parameters\r\n    ViewHolder viewHolder = new ViewHolder(v);\r\n    return viewHolder;\r\n}" ],
  "VinylMusicPlayer/1042" : [ "@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n@ColorInt\r\npublic static int getColor(@Nullable Palette palette, int fallback) {\r\n    if (palette != null) {\r\n        if (palette.getVibrantSwatch() != null) {\r\n            return palette.getVibrantSwatch().getRgb();\r\n        } else if (palette.getDarkVibrantSwatch() != null) {\r\n            return palette.getDarkVibrantSwatch().getRgb();\r\n        } else if (palette.getLightVibrantSwatch() != null) {\r\n            return palette.getLightVibrantSwatch().getRgb();\r\n        } else if (palette.getMutedSwatch() != null) {\r\n            return palette.getMutedSwatch().getRgb();\r\n        } else if (palette.getLightMutedSwatch() != null) {\r\n            return palette.getLightMutedSwatch().getRgb();\r\n        } else if (palette.getDarkMutedSwatch() != null) {\r\n            return palette.getDarkMutedSwatch().getRgb();\r\n        } else if (!palette.getSwatches().isEmpty()) {\r\n            return Collections.max(palette.getSwatches(), SwatchComparator.getInstance()).getRgb();\r\n        }\r\n    }\r\n    return fallback;\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport android.content.Context\n@NonNull\r\npublic static synchronized HistoryStore getInstance(@NonNull final Context context) {\r\n    if (sInstance == null) {\r\n        sInstance = new HistoryStore(context.getApplicationContext());\r\n    }\r\n    return sInstance;\r\n}" ],
  "fcitx5-android/336" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/648" : [ "TextTools.splitPipeSeparatedStrings(episode.guestStars)\n--------------------------------------------------\nTextTools.splitPipeSeparatedStrings(episode.directors)\n--------------------------------------------------\nTextTools.splitPipeSeparatedStrings(episode.writers)\n--------------------------------------------------\nTextTools.splitPipeSeparatedStrings(show.genres)", "fun splitPipeSeparatedStrings(pipeSeparatedStrings: String?): String {\r\n        if (pipeSeparatedStrings == null) {\r\n            return \"\"\r\n        }\r\n        val split = pipeSeparatedStrings.split(\"|\")\r\n        val builder = StringBuilder()\r\n        for (item in split) {\r\n            if (builder.isNotEmpty()) {\r\n                builder.append(\", \")\r\n            }\r\n            builder.append(item.trim())\r\n        }\r\n        return builder.toString()\r\n    }" ],
  "Iconify/715" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/712" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Iconify/719" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/718" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/716" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Neo-Backup/91" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/659" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/726" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/723" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "MaterialFiles/655" : [ "getFolder() ?: return Result.failure()", "import java.io.IOException\nimport org.tasks.Strings.isNullOrEmpty\nimport org.tasks.R\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    private suspend fun getFolder(): File? {\r\n        val folderId = preferences.getStringValue(R.string.p_google_drive_backup_folder)\r\n        var file: File? = null\r\n        if (!isNullOrEmpty(folderId)) {\r\n            file = drive.getFile(folderId)\r\n        }\r\n        return if (file == null || file.trashed) drive.createFolder(FOLDER_NAME) else file\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)" ],
  "Iconify/729" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/728" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/727" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Neo-Backup/77" : [ "private void eventuallyRemoveDeselectedTags(List<Tag> tagsToRemove) {\r\n    if (CollectionUtils.isEmpty(tagsToRemove)) {\r\n        return;\r\n    }\r\n    boolean currentlyChecklist = Boolean.TRUE.equals(noteTmp.isChecklist());\r\n    if (currentlyChecklist) {\r\n        toggleChecklist2(true, true);\r\n    }\r\n    String titleWithoutTags = TagsHelper.removeTags(getNoteTitle(), tagsToRemove);\r\n    binding.detailTitle.setText(titleWithoutTags);\r\n    String contentWithoutTags = TagsHelper.removeTags(getNoteContent(), tagsToRemove);\r\n    binding.fragmentDetailContent.detailContent.setText(contentWithoutTags);\r\n    if (currentlyChecklist) {\r\n        toggleChecklist2();\r\n    }\r\n}\n--------------------------------------------------\nprivate void eventuallyRemoveDeselectedTags(List<Tag> tagsToRemove) {\r\n    if (CollectionUtils.isEmpty(tagsToRemove)) {\r\n        return;\r\n    }\r\n    boolean currentlyChecklist = Boolean.TRUE.equals(noteTmp.isChecklist());\r\n    if (currentlyChecklist) {\r\n        toggleChecklist2(true, true);\r\n    }\r\n    String titleWithoutTags = TagsHelper.removeTags(getNoteTitle(), tagsToRemove);\r\n    binding.detailTitle.setText(titleWithoutTags);\r\n    String contentWithoutTags = TagsHelper.removeTags(getNoteContent(), tagsToRemove);\r\n    binding.fragmentDetailContent.detailContent.setText(contentWithoutTags);\r\n    if (currentlyChecklist) {\r\n        toggleChecklist2();\r\n    }\r\n}\n--------------------------------------------------\n", "import static rx.Observable.from;\r\nimport java.util.List;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\nimport org.apache.commons.lang3.StringUtils\nimport java.util.concurrent.atomic.AtomicReference\nimport java.util.List\nimport it.feio.android.omninotes.models.Tag\nimport rx.Observable.from\npublic static String removeTags(String text, List<Tag> tagsToRemove) {\r\n    if (StringUtils.isEmpty(text)) {\r\n        return text;\r\n    }\r\n    var textCopy = new AtomicReference<>(text);\r\n    from(tagsToRemove).forEach(tagToRemove -> textCopy.set(removeTag(textCopy.get(), tagToRemove)));\r\n    return textCopy.get();\r\n}" ],
  "Neo-Backup/76" : [ "this.getProperties(newProperties)", "import com.segment.analytics.Properties\nprivate fun getProperties(newProperties: Map<String, Any?>) = Properties().apply {\r\n        newProperties.forEach { (key, value) ->\r\n            this[key] = value\r\n        }\r\n    }\nImport(names=[com, segment, analytics, Properties], wildcard=false, alias=null)" ],
  "Neo-Backup/75" : [ "val parameters = parseQueryParameters(query)", "private fun parseQueryParameters(query: String?): Map<String, String> {\r\n        val parameters = mutableMapOf<String, String>()\r\n\r\n        if (!query.isNullOrBlank()) {\r\n            val keyValuePairs = query.split(\"&\")\r\n            for (pair in keyValuePairs) {\r\n                val (key, value) = pair.split(\"=\")\r\n                parameters[key] = value\r\n            }\r\n        }\r\n\r\n        return parameters\r\n    }" ],
  "Neo-Backup/74" : [ "                lifecycleScope.launch {\n                    val account = caldavDao.getAccountByUuid(calendar.account!!)\r\n                    listSettingsRequest.launch(\n--------------------------------------------------\ncaldavDao.getAccount(TYPE_GOOGLE_TASKS, accountName)\n--------------------------------------------------\ncaldavDao.getAccount(TYPE_MICROSOFT, email)\n--------------------------------------------------\ncaldavDao.getAccount(CaldavAccount.TYPE_TASKS, username)\n--------------------------------------------------\ngetAccount(name) != null\n--------------------------------------------------\ngetAccount(it)\n--------------------------------------------------\ngetAccount(accountName)", "import org.tasks.Strings.isNullOrEmpty\nimport android.accounts.Account\nfun getAccount(name: String?): Account? = if (isNullOrEmpty(name)) {\r\n        null\r\n    } else {\r\n        accountList.find { name.equals(it.name, ignoreCase = true) }\r\n    }\nImport(names=[android, accounts, Account], wildcard=false, alias=null)" ],
  "Neo-Backup/70" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/678" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Iconify/704" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/701" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "MaterialFiles/677" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "MaterialFiles/676" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.util.*\nimport java.io.File\nimport com.google.common.io.Files\nprivate fun delete(vararg files: File) {\r\n        for (file in files) {\r\n            if (file.isDirectory) {\r\n                file.listFiles()?.let { delete(*it) }\r\n            } else {\r\n                file.delete()\r\n            }\r\n        }\r\n    }\nimport com.google.common.io.Files\nimport java.io.File\nimport java.util.*" ],
  "Iconify/708" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/707" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/705" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Neo-Backup/86" : [ "checksum.update(buffer.array())\n--------------------------------------------------\nplaylistAdapter.update(it)\n--------------------------------------------------\nstate.update(pos, VLCOptions.getEqualizerSavedState(activity))\n--------------------------------------------------\nstate.update(presetCount + customCount, false)\n--------------------------------------------------\nstate.update(pos, false)\n--------------------------------------------------\nstate.update(allSets.indexOf(newName), true)\n--------------------------------------------------\nstate.update(0, true)\n--------------------------------------------------\nstate.update(revertPos, true)\n--------------------------------------------------\nstate.update(pos, true)\n--------------------------------------------------\nif (!isEmpty()) update(ArrayList(0))\n--------------------------------------------------\nadapter.update(mediaLibraryItems!!)\n--------------------------------------------------\nstorageBrowserAdapter.update(it)\n--------------------------------------------------\nfavoritesAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(it)\n--------------------------------------------------\nnetworkAdapter.update(filtered)\n--------------------------------------------------\nadapter.update(it)\n--------------------------------------------------\nadapter.update(renderers)\n--------------------------------------------------\nupdate(dataset, finalList)\n--------------------------------------------------\nadapter.update(bookmarkList)\n--------------------------------------------------\nadapter.update(bookmarks)\n--------------------------------------------------\n(recyclerview.adapter as OptionsAdapter).update(options)\n--------------------------------------------------\nhistoryAdapter.update(it)\n--------------------------------------------------\nstreamsAdapter.update(it)\n--------------------------------------------------\nmd.update(input.toByteArray())\n--------------------------------------------------\noverlayDelegate.playlistAdapter.update(mediaWrappers)\n--------------------------------------------------\nplaylistModel?.update()\n--------------------------------------------------\nplayer.update()\n--------------------------------------------------\ncallback.update()\n--------------------------------------------------\nwidgetDao.update(widget)\n--------------------------------------------------\nmd.update(certificate)\n--------------------------------------------------\nupdate()", "fun update(oldList: List<D>, newList: List<D>) {\r\n            this.oldList = oldList\r\n            this.newList = newList\r\n        }" ],
  "Neo-Backup/81" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/750" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/207" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/481" : [ "", "import android.database.sqlite.SQLiteDatabase;\r\nimport it.feio.android.omninotes.exceptions.DatabaseException;\r\nimport it.feio.android.omninotes.helpers.LogDelegate;\r\nimport java.io.IOException;\r\nimport java.io.IOException\nimport it.feio.android.omninotes.helpers.LogDelegate\nimport it.feio.android.omninotes.exceptions.DatabaseException\nimport android.database.sqlite.SQLiteDatabase\n@Override\r\npublic void onCreate(SQLiteDatabase db) {\r\n    try {\r\n        LogDelegate.i(\"Database creation\");\r\n        execSqlFile(CREATE_QUERY, db);\r\n    } catch (IOException e) {\r\n        throw new DatabaseException(\"Database creation failed: \" + e.getMessage(), e);\r\n    }\r\n}" ],
  "Trail-Sense/482" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/483" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/484" : [ "\n            addFolderName(details.folder)\r\n        }", "import com.mikepenz.fastadapter.GenericItem\nimport com.fsck.k9.ui.R\nprivate fun MutableList<GenericItem>.addFolderName(folder: FolderInfoUi?) {\r\n        if (folder != null) {\r\n            val folderNameItem = FolderNameItem(\r\n                displayName = folder.displayName,\r\n                iconResourceId = folderIconProvider.getFolderIcon(folder.type),\r\n            )\r\n            add(folderNameItem)\r\n        } else {\r\n            add(EmptyItem())\r\n        }\r\n    }\nimport com.fsck.k9.ui.R\nimport com.mikepenz.fastadapter.GenericItem" ],
  "Iconify/758" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Trail-Sense/486" : [ "private void setupEditText(final Context context, final AttributeSet attrs, TypedArray arr, CharSequence defaultValue) {\r\n    mInputType = arr.getInt(R.styleable.TitleSpinner_android_inputType, EditorInfo.TYPE_CLASS_NUMBER | EditorInfo.TYPE_NUMBER_FLAG_DECIMAL);\r\n    setValueWithoutSave(defaultValue);\r\n    final EditText edit = new EditText(context, attrs);\r\n    mSpin.setViewOnClickListener(v -> {\r\n        edit.setText(mSpin.getViewValueText());\r\n        edit.setInputType(mInputType);\r\n        edit.setMinimumHeight(48);\r\n        edit.setMinimumWidth(148);\r\n        if (edit.getParent() != null) {\r\n            ((LinearLayout) edit.getParent()).removeView(edit);\r\n        }\r\n        final LinearLayout layout = createLayout(context);\r\n        layout.addView(edit);\r\n        new AlertDialog.Builder(context).setTitle(mLabel).setView(layout).setPositiveButton(org.runnerup.common.R.string.OK, (dialog, whichButton) -> {\r\n            setValue(edit.getText().toString());\r\n            dialog.dismiss();\r\n            layout.removeView(edit);\r\n            onClose(true);\r\n        }).setNegativeButton(org.runnerup.common.R.string.Cancel, (dialog, whichButton) -> {\r\n            dialog.dismiss();\r\n            layout.removeView(edit);\r\n            onClose(false);\r\n        }).show();\r\n    });\r\n}\n--------------------------------------------------\nprivate void setupDatePicker(final Context context, AttributeSet attrs, CharSequence defaultValue) {\r\n    if (defaultValue != null && \"today\".contentEquals(defaultValue)) {\r\n        DateFormat df = android.text.format.DateFormat.getDateFormat(context);\r\n        defaultValue = df.format(new Date());\r\n    }\r\n    setValueWithoutSave(defaultValue);\r\n    final DatePicker datePicker = new DatePicker(context, attrs);\r\n    mSpin.setViewOnClickListener(v -> {\r\n        if (datePicker.getParent() != null) {\r\n            ((LinearLayout) datePicker.getParent()).removeView(datePicker);\r\n        }\r\n        final LinearLayout layout = createLayout(context);\r\n        layout.addView(datePicker);\r\n        new AlertDialog.Builder(context).setTitle(mLabel).setView(layout).setPositiveButton(org.runnerup.common.R.string.OK, new DialogInterface.OnClickListener() {\r\n\r\n            public void onClick(DialogInterface dialog, int whichButton) {\r\n                setValue(getValue(datePicker));\r\n                dialog.dismiss();\r\n                layout.removeView(datePicker);\r\n                onClose(true);\r\n            }\r\n\r\n            private String getValue(DatePicker dp) {\r\n                Calendar c = Calendar.getInstance();\r\n                c.set(dp.getYear(), dp.getMonth(), dp.getDayOfMonth());\r\n                DateFormat df = android.text.format.DateFormat.getDateFormat(context);\r\n                return df.format(c.getTime());\r\n            }\r\n        }).setNegativeButton(org.runnerup.common.R.string.Cancel, (dialog, whichButton) -> {\r\n            dialog.dismiss();\r\n            layout.removeView(datePicker);\r\n            onClose(false);\r\n        }).show();\r\n    });\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.view.Gravity;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.LinearLayout.VERTICAL\nimport org.runnerup.R\nimport android.widget.LinearLayout\nimport android.view.Gravity\nimport android.content.Context\nprivate static LinearLayout createLayout(Context context) {\r\n    final LinearLayout layout = new LinearLayout(context);\r\n    layout.setOrientation(LinearLayout.HORIZONTAL);\r\n    layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));\r\n    layout.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);\r\n    return layout;\r\n}" ],
  "Iconify/757" : [ "build()\n--------------------------------------------------\nbuilder().tag(tag).build()\n--------------------------------------------------\nbuilder().tag(\"activity\").build()\n--------------------------------------------------\nbuilder().tag(\"discovery_activity_sample\").build()\n--------------------------------------------------\nbuilder().tag(\"category\").build()\n--------------------------------------------------\nbuilder().tag(\"category\" + sort.refTagSuffix()).build()\n--------------------------------------------------\nbuilder().tag(\"category_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"city\").build()\n--------------------------------------------------\nbuilder().tag(\"android_project_collection_tag_$tagId\").build()\n--------------------------------------------------\nbuilder().tag(\"dashboard\").build()\n--------------------------------------------------\nbuilder().tag(\"android_deep_link\").build()\n--------------------------------------------------\nbuilder().tag(\"discovery\").build()\n--------------------------------------------------\nbuilder().tag(\"pledge_info\").build()\n--------------------------------------------------\nbuilder().tag(\"android_project_share\").build()\n--------------------------------------------------\nbuilder().tag(\"push\").build()\n--------------------------------------------------\nbuilder().tag(\"recommended\").build()\n--------------------------------------------------\nbuilder().tag(\"recommended\" + sort.refTagSuffix()).build()\n--------------------------------------------------\nbuilder().tag(\"search\").build()\n--------------------------------------------------\nbuilder().tag(\"search_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"search_popular_title_view\").build()\n--------------------------------------------------\nbuilder().tag(\"search_popular_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"social\").build()\n--------------------------------------------------\nbuilder().tag(\"survey\").build()\n--------------------------------------------------\nbuilder().tag(\"thanks\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_facebook_share\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_twitter_share\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_share\").build()\n--------------------------------------------------\nbuilder().tag(\"update\").build()\n--------------------------------------------------\nbuilder().tag(\"android_update_share\").build()\n--------------------------------------------------\npayload.toBuilder().traits(uniqueTraits).build()\n--------------------------------------------------\nRelativeDateTimeOptions.builder().build()\n--------------------------------------------------\nNumberOptions.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().category(it).build()\n--------------------------------------------------\nNavigationDrawerData.Section.builder().rows(it.first).expanded(it.second).build()\n--------------------------------------------------\nNavigationDrawerData.Section.Row.builder().params(it).build()\n--------------------------------------------------\nDiscoveryParams.builder().recommended(true).backed(-1).build()\n--------------------------------------------------\nDiscoveryParams.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().staffPicks(true).build()\n--------------------------------------------------\nDiscoveryParams.builder().starred(1).build()\n--------------------------------------------------\nNavigationDrawerData.Section.builder().rows(it).build()\n--------------------------------------------------\nNumberOptions.builder().precision(precision).build()\n--------------------------------------------------\nuriBuilder.build()\n--------------------------------------------------\nbuilder.build()\n--------------------------------------------------\nConstraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()\n--------------------------------------------------\nAccessTokenEnvelope.builder().user(user).accessToken(token).build()\n--------------------------------------------------\nActivityEnvelope.UrlsEnvelope.ApiEnvelope.builder().moreActivities(\"\").build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_BACKING).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_FAILURE).project(failedProject()).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_SUCCESS).project(successfulProject()).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_UPDATE).project(project()).user(user()).build()\n--------------------------------------------------\nbacking().toBuilder().status(status).build()\n--------------------------------------------------\ncheckoutData(shippingAmount, totalAmount).toBuilder().id(id).build()\n--------------------------------------------------\nCommentEnvelope.builder().totalCount(0).comments(emptyList()).pageInfoEnvelope(null).build()\n--------------------------------------------------\nconfig().toBuilder().countryCode(\"CA\").build()\n--------------------------------------------------\nconfig().toBuilder().countryCode(\"IT\").build()\n--------------------------------------------------\nconfig().toBuilder().abExperiments(abExperiments).build()\n--------------------------------------------------\nconfig().toBuilder().features(features.toMutableMap()).build()\n--------------------------------------------------\nCreatorDetails.builder().backingsCount(3).launchedProjectsCount(2).build()\n--------------------------------------------------\nbuilder().id(-1L).displayableName(\"\").name(\"\").country(\"\").expandedCountry(\"\").build()\n--------------------------------------------------\nmessageThreadEnvelope().toBuilder().messages(null).build()\n--------------------------------------------------\nbuilder().ed(url).full(url).little(url).med(url).small(url).thumb(url).build()\n--------------------------------------------------\nProjectData.builder().project(project).build()\n--------------------------------------------------\nUrls.builder().web(web).build()\n--------------------------------------------------\nproject.toBuilder().backing(backing).isBacking(true).build()\n--------------------------------------------------\nproject().toBuilder().country(\"GB\").currency(\"GBP\").currencySymbol(\"£\").build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).limit(10).build()\n--------------------------------------------------\nRewardFactory.addOn().toBuilder().remaining(0).limit(0).quantity(1).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).isAvailable(true).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(false).build()\n--------------------------------------------------\nproject().toBuilder().rewards(listOf(rw, rwWithAddOn)).build()\n--------------------------------------------------\nRewardFactory.limitReached().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nproject().toBuilder().name(\"halfwayProject\").goal(100.0).pledged(50.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"allTheWayProject\").goal(100.0).pledged(100.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"doubledGoalProject\").goal(100.0).pledged(200.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"failedProject\").state(Project.STATE_FAILED).build()\n--------------------------------------------------\nproject().toBuilder().name(\"almostCompleteProject\").deadline(DateTime().plusDays(1)).build()\n--------------------------------------------------\nproject().toBuilder().name(\"featuredProject\").featuredAt(DateTime()).build()\n--------------------------------------------------\nproject().toBuilder().name(\"savedProject\").isStarred(true).build()\n--------------------------------------------------\nproject().toBuilder().name(\"staffPickProject\").staffPick(true).build()\n--------------------------------------------------\nproject().toBuilder().rewards(null).build()\n--------------------------------------------------\nenabled().toBuilder().email(false).mobile(false).build()\n--------------------------------------------------\nProjectNotification.Project.builder().id(1L).name(\"SKULL GRAPHIC TEE\").build()\n--------------------------------------------------\nProjectNotification.Urls.Api.builder().notification(\"/url\").build()\n--------------------------------------------------\nProjectNotification.Urls.builder().api(api).build()\n--------------------------------------------------\nReferralAggregateStats.builder().custom(10f).external(15f).internal(20f).build()\n--------------------------------------------------\nRewardStats.builder().backersCount(10).rewardId(1).minimum(5).pledged(10f).build()\n--------------------------------------------------\nbuilder().alert(\"You've received a new push notification\").title(\"Hello\").build()\n--------------------------------------------------\nPushNotificationEnvelope.builder().gcm(gcm).build()\n--------------------------------------------------\nreward().toBuilder().isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().quantity(1).isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().quantity(5).isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nreward().toBuilder().backersCount(100).build()\n--------------------------------------------------\nreward().toBuilder().endsAt(DateTime.now().minusDays(2)).build()\n--------------------------------------------------\nreward().toBuilder().endsAt(DateTime.now().plusDays(2)).build()\n--------------------------------------------------\nrewardsItem().toBuilder().rewardId(rewardId).build()\n--------------------------------------------------\nreward().toBuilder().limit(10).remaining(5).build()\n--------------------------------------------------\nreward().toBuilder().backersCount(0).build()\n--------------------------------------------------\nreward().toBuilder().minimum(country.maxPledge.toDouble()).backersCount(0).build()\n--------------------------------------------------\nSingleLocation.builder().id(IdFactory.id().toLong()).localizedName(localizedLocationName).build()\n--------------------------------------------------\nreward().toBuilder().description(\"\").build()\n--------------------------------------------------\nItemFactory.item().toBuilder().id(itemId).build()\n--------------------------------------------------\nShippingRule.builder().id(1L).cost(30.0).location(LocationFactory.unitedStates()).build()\n--------------------------------------------------\nShippingRule.builder().id(2L).cost(40.0).location(LocationFactory.germany()).build()\n--------------------------------------------------\nShippingRule.builder().id(3L).cost(10.0).location(LocationFactory.mexico()).build()\n--------------------------------------------------\nShippingRule.builder().id(-1L).location(LocationFactory.empty()).cost(-1.0).build()\n--------------------------------------------------\nShippingRulesEnvelope.builder().shippingRules(listOf()).build()\n--------------------------------------------------\nStoredCard.builder().lastFourDigits(\"1234\").resourceId(1234).clientSetupId(\"ClientSetupId\").build()\n--------------------------------------------------\nSurveyResponse.Urls.Web.builder().survey(surveyUrl).build()\n--------------------------------------------------\nSurveyResponse.Urls.builder().web(web).build()\n--------------------------------------------------\ncreator().toBuilder().id(278438049L).build()\n--------------------------------------------------\nproject().toBuilder().creator(creator).build()\n--------------------------------------------------\nUpdate.Urls.Web.builder().update(updatesUrl + \"id\").likes(\"$updatesUrl/likes\").build()\n--------------------------------------------------\nUpdate.Urls.builder().web(web).build()\n--------------------------------------------------\nupdate().toBuilder().isPublic(false).build()\n--------------------------------------------------\nuser().toBuilder().social(true).build()\n--------------------------------------------------\nuser().toBuilder().needsPassword(true).build()\n--------------------------------------------------\nuser().toBuilder().createdProjectsCount(0).memberProjectsCount(10).build()\n--------------------------------------------------\nuser().toBuilder().createdProjectsCount(5).memberProjectsCount(10).build()\n--------------------------------------------------\nuser().toBuilder().location(germany()).build()\n--------------------------------------------------\nuser().toBuilder().location(mexico()).build()\n--------------------------------------------------\nuser().toBuilder().optedOutOfRecommendations(true).build()\n--------------------------------------------------\nproject().toBuilder().slug(param).build()\n--------------------------------------------------\nDiscoverEnvelope.StatsEnvelope.builder().count(10).build()\n--------------------------------------------------\nUpdatesEnvelope.UrlsEnvelope.ApiEnvelope.builder().moreUpdates(\"http://more.updates.please\").build()\n--------------------------------------------------\nuser().toBuilder().build()\n--------------------------------------------------\nAccessTokenEnvelope.builder().user(user().toBuilder().build()).accessToken(\"deadbeef\").build()\n--------------------------------------------------\nuser().toBuilder().name(name).build()\n--------------------------------------------------\nproject.toBuilder().isStarred(true).build()\n--------------------------------------------------\nSurveyResponseFactory.surveyResponse().toBuilder().id(surveyResponseId).build()\n--------------------------------------------------\nproject.toBuilder().isStarred(!project.isStarred()).build()\n--------------------------------------------------\nprojectNotification.toBuilder().email(checked).mobile(checked).build()\n--------------------------------------------------\nbuilder().code(200).message(\"\").build()\n--------------------------------------------------\nproject.toBuilder().isStarred(false).build()\n--------------------------------------------------\nProjectFactory.project().toBuilder().slug(slug).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().isAddOn(true).quantity(2).build()\n--------------------------------------------------\nUser.builder().build()\n--------------------------------------------------\nUrls.builder().build()\n--------------------------------------------------\nUri.parse(webProjectUrl()).buildUpon().scheme(\"https\").build()\n--------------------------------------------------\nProject.builder().build()\n--------------------------------------------------\nApi.builder().build()\n--------------------------------------------------\nItem.builder().build()\n--------------------------------------------------\nLocation.builder().build()\n--------------------------------------------------\nWeb.builder().build()\n--------------------------------------------------\nAvatar.builder().build()\n--------------------------------------------------\nErrorEnvelope.builder().errorMessages(listOf(t.message ?: \"\")).build()\n--------------------------------------------------\nUrlsEnvelope.builder().build()\n--------------------------------------------------\nApiEnvelope.builder().build()\n--------------------------------------------------\ntoBuilder().page(page + 1).build()\n--------------------------------------------------\notherBuilder.build()\n--------------------------------------------------\nbuilder.sort(Sort.MAGIC).build()\n--------------------------------------------------\nbuilder.url(url(initialRequest.url)).build()\n--------------------------------------------------\nrequestBuilder.build()\n--------------------------------------------------\nCancelBackingMutation.builder().backingId(encodeRelayId(backing)).note(note).build()\n--------------------------------------------------\nCheckout.builder().id(decodeRelayId(checkoutPayload?.id())).backing(backing).build()\n--------------------------------------------------\nGetBackingQuery.builder().backingId(backingId).build()\n--------------------------------------------------\nClearUserUnseenActivityMutation.builder().build()\n--------------------------------------------------\nGetProjectUpdatesQuery.builder().cursor(cursor).slug(slug).limit(limit).build()\n--------------------------------------------------\nupdateTransformer(edge?.node()?.fragments()?.post()).toBuilder().build()\n--------------------------------------------------\nGetProjectCommentsQuery.builder().cursor(cursor).slug(slug).limit(limit).build()\n--------------------------------------------------\ncommentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n--------------------------------------------------\nGetProjectUpdateCommentsQuery.builder().cursor(cursor).id(updateId).limit(limit).build()\n--------------------------------------------------\nFetchProjectQuery.builder().slug(slug).build()\n--------------------------------------------------\nGetRootCategoriesQuery.builder().build()\n--------------------------------------------------\nFetchCategoryQuery.builder().categoryParam(categoryParam).build()\n--------------------------------------------------\nDiscoverEnvelope.builder().projects(projects).pageInfoEnvelope(pageInfoEnvelope).build()\n--------------------------------------------------\nGetCommentQuery.builder().commentableId(commentableId).build()\n--------------------------------------------------\nCreatePasswordMutation.builder().password(password).passwordConfirmation(confirmPassword).build()\n--------------------------------------------------\nProjectCreatorDetailsQuery.builder().slug(slug).build()\n--------------------------------------------------\nDeletePaymentSourceMutation.builder().paymentSourceId(paymentSourceId).build()\n--------------------------------------------------\nErroredBackingsQuery.builder().build()\n--------------------------------------------------\nErroredBacking.builder().project(project).build()\n--------------------------------------------------\nGetProjectBackingQuery.builder().slug(slug).build()\n--------------------------------------------------\nGetShippingRulesForRewardIdQuery.builder().rewardId(encodeRelayId(reward)).build()\n--------------------------------------------------\nGetProjectAddOnsQuery.builder().slug(slug).locationId(encodeRelayId(locationId)).build()\n--------------------------------------------------\nWatchProjectMutation.builder().id(encodeRelayId(project)).build()\n--------------------------------------------------\nUnwatchProjectMutation.builder().id(encodeRelayId(project)).build()\n--------------------------------------------------\nUserPaymentsQuery.builder().build()\n--------------------------------------------------\nUpdateUserCurrencyMutation.builder().chosenCurrency(currency).build()\n--------------------------------------------------\nUserPrivacyQuery.builder().build()\n--------------------------------------------------\nUpdateUserEmailMutation.builder().email(email).currentPassword(currentPassword).build()\n--------------------------------------------------\nSendEmailVerificationMutation.builder().build()\n--------------------------------------------------\nProjectFaq.builder().id(id).answer(answer).createdAt(createdAt).question(question).build()\n--------------------------------------------------\nItem.builder().name(name).description(description).id(id).build()\n--------------------------------------------------\nRewardsItem.builder().id(id).itemId(item.id()).item(item).rewardId(0).quantity(quantity).build()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder().minimum(minPledge).build()\n--------------------------------------------------\nWeb.builder().project(url).rewards(\"$url/rewards\").build()\n--------------------------------------------------\nUrls.builder().web(urlsWeb).build()\n--------------------------------------------------\nAvatar.builder().medium(user?.imageUrl()).build()\n--------------------------------------------------\nUser.builder().id(id).name(name).avatar(avatar).chosenCurrency(chosenCurrency).build()\n--------------------------------------------------\nAvatar.builder().medium(post?.author()?.fragments()?.user()?.imageUrl()).build()\n--------------------------------------------------\nUpdate.Urls.Web.builder().update(\"$url/posts/$id\").build()\n--------------------------------------------------\nUpdate.Urls.builder().web(urlsWeb).build()\n--------------------------------------------------\nAvatar.builder().medium(commentFr?.author()?.fragments()?.user()?.imageUrl()).build()\n--------------------------------------------------\nAvatar.builder().medium(backerData?.imageUrl()).build()\n--------------------------------------------------\nUser.builder().id(backerId).name(nameBacker).avatar(avatar).build()\n--------------------------------------------------\nit.toBuilder().quantity(q + 1).build()\n--------------------------------------------------\nVideo.builder().base(base).frame(frame).high(high).hls(hls).build()\n--------------------------------------------------\nShippingRule.builder().cost(cost).location(location).build()\n--------------------------------------------------\nLocation.builder().id(id).country(country).displayableName(displayName).name(name).build()\n--------------------------------------------------\nShippingRulesEnvelope.builder().shippingRules(shippingRulesList).build()\n--------------------------------------------------\nThirdPartyEventItemInput.builder().itemId(it.itemId).itemName(it.itemName).price(it.price).build()\n--------------------------------------------------\nTriggerThirdPartyEventMutation.builder().triggerThirdPartyEventInput(graphInput).build()\n--------------------------------------------------\nenvironment?.build()\n--------------------------------------------------\ngetEnvironment()?.build()\n--------------------------------------------------\nplayerBuilder.build()\n--------------------------------------------------\nbuilder().requestCode(requestCode).resultCode(resultCode).intent(intent).build()\n--------------------------------------------------\nProjectData.builder().build()\n--------------------------------------------------\nReward.builder().build()\n--------------------------------------------------\nbuilder().pledgeFlowContext(pledgeFlowContext).projectData(projectData).reward(reward).build()\n--------------------------------------------------\npledgeDataAndReason.first.projectData().toBuilder().project(reducedProject).build()\n--------------------------------------------------\npledgeDataAndReason.first.toBuilder().projectData(reducedProjectData).build()\n--------------------------------------------------\nImageRequest.Builder(LocalContext.current).data(imageUrl).crossfade(true).build()\n--------------------------------------------------\nRelativeDateTimeOptions.builder().absolute(true).relativeToDateTime(DateTime.now()).build()\n--------------------------------------------------\nAudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()\n--------------------------------------------------\nenvironment().build()\n--------------------------------------------------\nShareLinkContent.Builder().setContentUrl(Uri.parse(shareUrl)).build()\n--------------------------------------------------\npledgeData.toBuilder().addOns(finalList).shippingRule(shippingRule).build()\n--------------------------------------------------\npledgeData.toBuilder().addOns(finalList).build()\n--------------------------------------------------\npledgeData.toBuilder().build()\n--------------------------------------------------\naddOn.toBuilder().quantity(currentSelection[addOn.id()]).build()\n--------------------------------------------------\nit.toBuilder().shippingRules(graphAddOn.shippingRules()).build()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder().minimum(projectData.backing()?.amount() ?: 1.0).build()\n--------------------------------------------------\nit.first.toBuilder().commentCardState(commentCardState?.commentCardStatus ?: 0).build()\n--------------------------------------------------\nit.second.toBuilder().id(id).build()\n--------------------------------------------------\nuser.toBuilder().notifyMobileOfMarketingUpdate(true).build()\n--------------------------------------------------\nOkHttpClient.Builder().build()\n--------------------------------------------------\nRequest.Builder().url(uri.toString()).build()\n--------------------------------------------------\nbuilder().refTagFromIntent(refTag.second).refTagFromCookie(cookieRefTag).project(it.second).build()\n--------------------------------------------------\ndrawerClickParams.params().toBuilder().sort(currentParams).build()\n--------------------------------------------------\np.toBuilder().sort(s).build()\n--------------------------------------------------\nit.first.toBuilder().sort(it.second).build()\n--------------------------------------------------\nDiscoveryParams.builder().sort(DiscoveryParams.Sort.MAGIC).tagId(it).build()\n--------------------------------------------------\nuser.toBuilder().showPublicProfile(!showProfile).build()\n--------------------------------------------------\nMessageThread.builder().build()\n--------------------------------------------------\nthis.toBuilder().alumniNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().artsCultureNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().filmNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().gamesNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().happeningNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().inventNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().musicNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().promoNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().publishingNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().weeklyNewsletter(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfBackings(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfComments(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfCreatorEdu(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfFollower(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfFriendActivity(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfMessages(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfPostLikes(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfUpdates(checked).build()\n--------------------------------------------------\nuserBuilder.build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfMarketingUpdate(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfComments(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCommentReplies(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCreatorDigest(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCreatorEdu(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfFollower(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfFriendActivity(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfMessages(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfUpdates(checked).build()\n--------------------------------------------------\nRefTag.Builder().build()\n--------------------------------------------------\nStoredCard.builder().build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().social(true).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().social(false).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().optedOutOfRecommendations(!checked).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().showPublicProfile(!checked).build()\n--------------------------------------------------\nDiscoveryParams.builder().backed(1).perPage(18).sort(DiscoveryParams.Sort.ENDING_SOON).build()\n--------------------------------------------------\nErrorEnvelope.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().sort(defaultSort).build()\n--------------------------------------------------\nDiscoveryParams.builder().term(it).build()\n--------------------------------------------------\nit.first.toBuilder().needsPassword(false).build()", "fun build() = DiscoveryFilterStyle(\r\n            light = light,\r\n            primary = primary,\r\n            showLiveProjectsCount = showLiveProjectsCount,\r\n            selected = selected,\r\n            visible = visible\r\n        )" ],
  "Iconify/754" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "MaterialFiles/687" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import java.io.IOException\nimport com.todoroo.astrid.gtasks.api.HttpNotFoundException\nimport com.google.api.services.drive.model.File\n @Throws(IOException::class)\r\n    suspend fun delete(file: File) {\r\n        try {\r\n            execute(service.files().delete(file.id))\r\n        } catch (ignored: HttpNotFoundException) {}\r\n    }\nImport(names=[com, google, api, services, drive, model, File], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, gtasks, api, HttpNotFoundException], wildcard=false, alias=null)" ],
  "Iconify/761" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/760" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/491" : [ "DateTimeUtils.isDateToday(it)", "import java.util.TimeZone\nimport org.joda.time.DateTimeZone\nimport org.joda.time.DateTime\nimport com.kickstarter.R\nfun isDateToday(dateTime: DateTime): Boolean {\r\n        return (\r\n            dateTime.withZone(DateTimeZone.UTC).withTimeAtStartOfDay()\r\n                == DateTime.now().withTimeAtStartOfDay().withZoneRetainFields(DateTimeZone.UTC)\r\n            )\r\n    }\nImport(names=[org, joda, time, DateTime], wildcard=false, alias=null)" ],
  "Trail-Sense/492" : [ "            val actualRelease =\n                if (hasNextEpisode) TimeTools.applyUserOffset(context, show.nextAirdateMs) else null\r\n            return bindViewAt(\n--------------------------------------------------\n                episodeDescription,\n                actualRelease = TimeTools.applyUserOffset(context, episode.episode_firstairedms),\r\n                episode.network,\n--------------------------------------------------\nTimeTools.applyUserOffset(context, item.nextAirdateMs)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, nextEpisodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, episode_firstairedms)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), episodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, sgShow.nextAirdateMs)\n--------------------------------------------------\ndateTime = applyUserOffset(context, dateTime)", "import java.util.Date\nimport org.threeten.bp.ZonedDateTime\nimport com.battlelancer.seriesguide.settings.DisplaySettings\nimport android.content.Context\nprivate fun applyUserOffset(context: Context, dateTime: ZonedDateTime): ZonedDateTime {\r\n        val offset = DisplaySettings.getShowsTimeOffset(context)\r\n        if (offset != 0) {\r\n            return dateTime.plusHours(offset.toLong())\r\n        }\r\n        return dateTime\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, settings, DisplaySettings], wildcard=false, alias=null)\nImport(names=[org, threeten, bp, ZonedDateTime], wildcard=false, alias=null)" ],
  "Trail-Sense/493" : [ "${formatDate(context, trip.firstDepartureTime)}\n--------------------------------------------------\nformatDate(context, trip.firstDepartureTime)\n--------------------------------------------------\ndate.text = formatDate(context, calendar.time)", "import android.text.format.DateFormat\nimport android.content.Context\nfun formatDate(context: Context, date: Date): String {\r\n        val df = DateFormat.getDateFormat(context)\r\n        return df.format(date)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, format, DateFormat], wildcard=false, alias=null)" ],
  "Trail-Sense/494" : [ "DateTimeUtils.isDateToday(it)", "import java.util.TimeZone\nimport org.joda.time.DateTimeZone\nimport org.joda.time.DateTime\nimport com.kickstarter.R\nfun isDateToday(dateTime: DateTime): Boolean {\r\n        return (\r\n            dateTime.withZone(DateTimeZone.UTC).withTimeAtStartOfDay()\r\n                == DateTime.now().withTimeAtStartOfDay().withZoneRetainFields(DateTimeZone.UTC)\r\n            )\r\n    }\nImport(names=[org, joda, time, DateTime], wildcard=false, alias=null)" ],
  "Trail-Sense/495" : [ "slaveRepository.saveSlaves(mw)", "import org.videolan.vlc.mediadb.models.Slave\nimport org.videolan.medialibrary.interfaces.media.MediaWrapper\nimport kotlinx.coroutines.Job\nfun saveSlaves(mw: MediaWrapper): List<Job>? {\r\n        return mw.slaves?.let{\r\n            it.map { saveSlave(mw.location, it.type, it.priority, it.uri) }\r\n        }\r\n    }\nImport(names=[org, videolan, medialibrary, interfaces, media, MediaWrapper], wildcard=false, alias=null)" ],
  "MaterialFiles/693" : [ "doRequest {\n    withContext(Dispatchers.IO) {\n        provider.forUrl(url, username, password).homeSet(username, password)\n    }\n}", "import timber.log.Timber\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.NonCancellable\nprotected suspend fun <T> doRequest(action: suspend () -> T): T? =\r\n        withContext(NonCancellable) {\r\n            if (inFlight.value == true) {\r\n                return@withContext null\r\n            }\r\n            inFlight.value = true\r\n            try {\r\n                return@withContext action()\r\n            } catch (e: Exception) {\r\n                Timber.e(e)\r\n                error.value = e\r\n                return@withContext null\r\n            } finally {\r\n                inFlight.value = false\r\n            }\r\n        }\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)\nImport(names=[timber, log, Timber], wildcard=false, alias=null)" ],
  "Trail-Sense/496" : [ "DateTimeUtils.isDateToday(it)", "import java.util.TimeZone\nimport org.joda.time.DateTimeZone\nimport org.joda.time.DateTime\nimport com.kickstarter.R\nfun isDateToday(dateTime: DateTime): Boolean {\r\n        return (\r\n            dateTime.withZone(DateTimeZone.UTC).withTimeAtStartOfDay()\r\n                == DateTime.now().withTimeAtStartOfDay().withZoneRetainFields(DateTimeZone.UTC)\r\n            )\r\n    }\nImport(names=[org, joda, time, DateTime], wildcard=false, alias=null)" ],
  "Iconify/769" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/768" : [ "build()\n--------------------------------------------------\nbuilder().tag(tag).build()\n--------------------------------------------------\nbuilder().tag(\"activity\").build()\n--------------------------------------------------\nbuilder().tag(\"discovery_activity_sample\").build()\n--------------------------------------------------\nbuilder().tag(\"category\").build()\n--------------------------------------------------\nbuilder().tag(\"category\" + sort.refTagSuffix()).build()\n--------------------------------------------------\nbuilder().tag(\"category_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"city\").build()\n--------------------------------------------------\nbuilder().tag(\"android_project_collection_tag_$tagId\").build()\n--------------------------------------------------\nbuilder().tag(\"dashboard\").build()\n--------------------------------------------------\nbuilder().tag(\"android_deep_link\").build()\n--------------------------------------------------\nbuilder().tag(\"discovery\").build()\n--------------------------------------------------\nbuilder().tag(\"pledge_info\").build()\n--------------------------------------------------\nbuilder().tag(\"android_project_share\").build()\n--------------------------------------------------\nbuilder().tag(\"push\").build()\n--------------------------------------------------\nbuilder().tag(\"recommended\").build()\n--------------------------------------------------\nbuilder().tag(\"recommended\" + sort.refTagSuffix()).build()\n--------------------------------------------------\nbuilder().tag(\"search\").build()\n--------------------------------------------------\nbuilder().tag(\"search_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"search_popular_title_view\").build()\n--------------------------------------------------\nbuilder().tag(\"search_popular_featured\").build()\n--------------------------------------------------\nbuilder().tag(\"social\").build()\n--------------------------------------------------\nbuilder().tag(\"survey\").build()\n--------------------------------------------------\nbuilder().tag(\"thanks\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_facebook_share\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_twitter_share\").build()\n--------------------------------------------------\nbuilder().tag(\"android_thanks_share\").build()\n--------------------------------------------------\nbuilder().tag(\"update\").build()\n--------------------------------------------------\nbuilder().tag(\"android_update_share\").build()\n--------------------------------------------------\npayload.toBuilder().traits(uniqueTraits).build()\n--------------------------------------------------\nRelativeDateTimeOptions.builder().build()\n--------------------------------------------------\nNumberOptions.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().category(it).build()\n--------------------------------------------------\nNavigationDrawerData.Section.builder().rows(it.first).expanded(it.second).build()\n--------------------------------------------------\nNavigationDrawerData.Section.Row.builder().params(it).build()\n--------------------------------------------------\nDiscoveryParams.builder().recommended(true).backed(-1).build()\n--------------------------------------------------\nDiscoveryParams.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().staffPicks(true).build()\n--------------------------------------------------\nDiscoveryParams.builder().starred(1).build()\n--------------------------------------------------\nNavigationDrawerData.Section.builder().rows(it).build()\n--------------------------------------------------\nNumberOptions.builder().precision(precision).build()\n--------------------------------------------------\nuriBuilder.build()\n--------------------------------------------------\nbuilder.build()\n--------------------------------------------------\nConstraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()\n--------------------------------------------------\nAccessTokenEnvelope.builder().user(user).accessToken(token).build()\n--------------------------------------------------\nActivityEnvelope.UrlsEnvelope.ApiEnvelope.builder().moreActivities(\"\").build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_BACKING).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_FAILURE).project(failedProject()).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_SUCCESS).project(successfulProject()).build()\n--------------------------------------------------\nactivity().toBuilder().category(Activity.CATEGORY_UPDATE).project(project()).user(user()).build()\n--------------------------------------------------\nbacking().toBuilder().status(status).build()\n--------------------------------------------------\ncheckoutData(shippingAmount, totalAmount).toBuilder().id(id).build()\n--------------------------------------------------\nCommentEnvelope.builder().totalCount(0).comments(emptyList()).pageInfoEnvelope(null).build()\n--------------------------------------------------\nconfig().toBuilder().countryCode(\"CA\").build()\n--------------------------------------------------\nconfig().toBuilder().countryCode(\"IT\").build()\n--------------------------------------------------\nconfig().toBuilder().abExperiments(abExperiments).build()\n--------------------------------------------------\nconfig().toBuilder().features(features.toMutableMap()).build()\n--------------------------------------------------\nCreatorDetails.builder().backingsCount(3).launchedProjectsCount(2).build()\n--------------------------------------------------\nbuilder().id(-1L).displayableName(\"\").name(\"\").country(\"\").expandedCountry(\"\").build()\n--------------------------------------------------\nmessageThreadEnvelope().toBuilder().messages(null).build()\n--------------------------------------------------\nbuilder().ed(url).full(url).little(url).med(url).small(url).thumb(url).build()\n--------------------------------------------------\nProjectData.builder().project(project).build()\n--------------------------------------------------\nUrls.builder().web(web).build()\n--------------------------------------------------\nproject.toBuilder().backing(backing).isBacking(true).build()\n--------------------------------------------------\nproject().toBuilder().country(\"GB\").currency(\"GBP\").currencySymbol(\"£\").build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).limit(10).build()\n--------------------------------------------------\nRewardFactory.addOn().toBuilder().remaining(0).limit(0).quantity(1).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(true).isAvailable(true).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().hasAddons(false).build()\n--------------------------------------------------\nproject().toBuilder().rewards(listOf(rw, rwWithAddOn)).build()\n--------------------------------------------------\nRewardFactory.limitReached().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nproject().toBuilder().name(\"halfwayProject\").goal(100.0).pledged(50.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"allTheWayProject\").goal(100.0).pledged(100.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"doubledGoalProject\").goal(100.0).pledged(200.0).build()\n--------------------------------------------------\nproject().toBuilder().name(\"failedProject\").state(Project.STATE_FAILED).build()\n--------------------------------------------------\nproject().toBuilder().name(\"almostCompleteProject\").deadline(DateTime().plusDays(1)).build()\n--------------------------------------------------\nproject().toBuilder().name(\"featuredProject\").featuredAt(DateTime()).build()\n--------------------------------------------------\nproject().toBuilder().name(\"savedProject\").isStarred(true).build()\n--------------------------------------------------\nproject().toBuilder().name(\"staffPickProject\").staffPick(true).build()\n--------------------------------------------------\nproject().toBuilder().rewards(null).build()\n--------------------------------------------------\nenabled().toBuilder().email(false).mobile(false).build()\n--------------------------------------------------\nProjectNotification.Project.builder().id(1L).name(\"SKULL GRAPHIC TEE\").build()\n--------------------------------------------------\nProjectNotification.Urls.Api.builder().notification(\"/url\").build()\n--------------------------------------------------\nProjectNotification.Urls.builder().api(api).build()\n--------------------------------------------------\nReferralAggregateStats.builder().custom(10f).external(15f).internal(20f).build()\n--------------------------------------------------\nRewardStats.builder().backersCount(10).rewardId(1).minimum(5).pledged(10f).build()\n--------------------------------------------------\nbuilder().alert(\"You've received a new push notification\").title(\"Hello\").build()\n--------------------------------------------------\nPushNotificationEnvelope.builder().gcm(gcm).build()\n--------------------------------------------------\nreward().toBuilder().isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().quantity(1).isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().quantity(5).isAddOn(true).isAvailable(true).limit(10).build()\n--------------------------------------------------\nreward().toBuilder().hasAddons(true).build()\n--------------------------------------------------\nreward().toBuilder().backersCount(100).build()\n--------------------------------------------------\nreward().toBuilder().endsAt(DateTime.now().minusDays(2)).build()\n--------------------------------------------------\nreward().toBuilder().endsAt(DateTime.now().plusDays(2)).build()\n--------------------------------------------------\nrewardsItem().toBuilder().rewardId(rewardId).build()\n--------------------------------------------------\nreward().toBuilder().limit(10).remaining(5).build()\n--------------------------------------------------\nreward().toBuilder().backersCount(0).build()\n--------------------------------------------------\nreward().toBuilder().minimum(country.maxPledge.toDouble()).backersCount(0).build()\n--------------------------------------------------\nSingleLocation.builder().id(IdFactory.id().toLong()).localizedName(localizedLocationName).build()\n--------------------------------------------------\nreward().toBuilder().description(\"\").build()\n--------------------------------------------------\nItemFactory.item().toBuilder().id(itemId).build()\n--------------------------------------------------\nShippingRule.builder().id(1L).cost(30.0).location(LocationFactory.unitedStates()).build()\n--------------------------------------------------\nShippingRule.builder().id(2L).cost(40.0).location(LocationFactory.germany()).build()\n--------------------------------------------------\nShippingRule.builder().id(3L).cost(10.0).location(LocationFactory.mexico()).build()\n--------------------------------------------------\nShippingRule.builder().id(-1L).location(LocationFactory.empty()).cost(-1.0).build()\n--------------------------------------------------\nShippingRulesEnvelope.builder().shippingRules(listOf()).build()\n--------------------------------------------------\nStoredCard.builder().lastFourDigits(\"1234\").resourceId(1234).clientSetupId(\"ClientSetupId\").build()\n--------------------------------------------------\nSurveyResponse.Urls.Web.builder().survey(surveyUrl).build()\n--------------------------------------------------\nSurveyResponse.Urls.builder().web(web).build()\n--------------------------------------------------\ncreator().toBuilder().id(278438049L).build()\n--------------------------------------------------\nproject().toBuilder().creator(creator).build()\n--------------------------------------------------\nUpdate.Urls.Web.builder().update(updatesUrl + \"id\").likes(\"$updatesUrl/likes\").build()\n--------------------------------------------------\nUpdate.Urls.builder().web(web).build()\n--------------------------------------------------\nupdate().toBuilder().isPublic(false).build()\n--------------------------------------------------\nuser().toBuilder().social(true).build()\n--------------------------------------------------\nuser().toBuilder().needsPassword(true).build()\n--------------------------------------------------\nuser().toBuilder().createdProjectsCount(0).memberProjectsCount(10).build()\n--------------------------------------------------\nuser().toBuilder().createdProjectsCount(5).memberProjectsCount(10).build()\n--------------------------------------------------\nuser().toBuilder().location(germany()).build()\n--------------------------------------------------\nuser().toBuilder().location(mexico()).build()\n--------------------------------------------------\nuser().toBuilder().optedOutOfRecommendations(true).build()\n--------------------------------------------------\nproject().toBuilder().slug(param).build()\n--------------------------------------------------\nDiscoverEnvelope.StatsEnvelope.builder().count(10).build()\n--------------------------------------------------\nUpdatesEnvelope.UrlsEnvelope.ApiEnvelope.builder().moreUpdates(\"http://more.updates.please\").build()\n--------------------------------------------------\nuser().toBuilder().build()\n--------------------------------------------------\nAccessTokenEnvelope.builder().user(user().toBuilder().build()).accessToken(\"deadbeef\").build()\n--------------------------------------------------\nuser().toBuilder().name(name).build()\n--------------------------------------------------\nproject.toBuilder().isStarred(true).build()\n--------------------------------------------------\nSurveyResponseFactory.surveyResponse().toBuilder().id(surveyResponseId).build()\n--------------------------------------------------\nproject.toBuilder().isStarred(!project.isStarred()).build()\n--------------------------------------------------\nprojectNotification.toBuilder().email(checked).mobile(checked).build()\n--------------------------------------------------\nbuilder().code(200).message(\"\").build()\n--------------------------------------------------\nproject.toBuilder().isStarred(false).build()\n--------------------------------------------------\nProjectFactory.project().toBuilder().slug(slug).build()\n--------------------------------------------------\nRewardFactory.reward().toBuilder().isAddOn(true).quantity(2).build()\n--------------------------------------------------\nUser.builder().build()\n--------------------------------------------------\nUrls.builder().build()\n--------------------------------------------------\nUri.parse(webProjectUrl()).buildUpon().scheme(\"https\").build()\n--------------------------------------------------\nProject.builder().build()\n--------------------------------------------------\nApi.builder().build()\n--------------------------------------------------\nItem.builder().build()\n--------------------------------------------------\nLocation.builder().build()\n--------------------------------------------------\nWeb.builder().build()\n--------------------------------------------------\nAvatar.builder().build()\n--------------------------------------------------\nErrorEnvelope.builder().errorMessages(listOf(t.message ?: \"\")).build()\n--------------------------------------------------\nUrlsEnvelope.builder().build()\n--------------------------------------------------\nApiEnvelope.builder().build()\n--------------------------------------------------\ntoBuilder().page(page + 1).build()\n--------------------------------------------------\notherBuilder.build()\n--------------------------------------------------\nbuilder.sort(Sort.MAGIC).build()\n--------------------------------------------------\nbuilder.url(url(initialRequest.url)).build()\n--------------------------------------------------\nrequestBuilder.build()\n--------------------------------------------------\nCancelBackingMutation.builder().backingId(encodeRelayId(backing)).note(note).build()\n--------------------------------------------------\nCheckout.builder().id(decodeRelayId(checkoutPayload?.id())).backing(backing).build()\n--------------------------------------------------\nGetBackingQuery.builder().backingId(backingId).build()\n--------------------------------------------------\nClearUserUnseenActivityMutation.builder().build()\n--------------------------------------------------\nGetProjectUpdatesQuery.builder().cursor(cursor).slug(slug).limit(limit).build()\n--------------------------------------------------\nupdateTransformer(edge?.node()?.fragments()?.post()).toBuilder().build()\n--------------------------------------------------\nGetProjectCommentsQuery.builder().cursor(cursor).slug(slug).limit(limit).build()\n--------------------------------------------------\ncommentTransformer(edge?.node()?.fragments()?.comment()).toBuilder().cursor(edge?.cursor()).build()\n--------------------------------------------------\nGetProjectUpdateCommentsQuery.builder().cursor(cursor).id(updateId).limit(limit).build()\n--------------------------------------------------\nFetchProjectQuery.builder().slug(slug).build()\n--------------------------------------------------\nGetRootCategoriesQuery.builder().build()\n--------------------------------------------------\nFetchCategoryQuery.builder().categoryParam(categoryParam).build()\n--------------------------------------------------\nDiscoverEnvelope.builder().projects(projects).pageInfoEnvelope(pageInfoEnvelope).build()\n--------------------------------------------------\nGetCommentQuery.builder().commentableId(commentableId).build()\n--------------------------------------------------\nCreatePasswordMutation.builder().password(password).passwordConfirmation(confirmPassword).build()\n--------------------------------------------------\nProjectCreatorDetailsQuery.builder().slug(slug).build()\n--------------------------------------------------\nDeletePaymentSourceMutation.builder().paymentSourceId(paymentSourceId).build()\n--------------------------------------------------\nErroredBackingsQuery.builder().build()\n--------------------------------------------------\nErroredBacking.builder().project(project).build()\n--------------------------------------------------\nGetProjectBackingQuery.builder().slug(slug).build()\n--------------------------------------------------\nGetShippingRulesForRewardIdQuery.builder().rewardId(encodeRelayId(reward)).build()\n--------------------------------------------------\nGetProjectAddOnsQuery.builder().slug(slug).locationId(encodeRelayId(locationId)).build()\n--------------------------------------------------\nWatchProjectMutation.builder().id(encodeRelayId(project)).build()\n--------------------------------------------------\nUnwatchProjectMutation.builder().id(encodeRelayId(project)).build()\n--------------------------------------------------\nUserPaymentsQuery.builder().build()\n--------------------------------------------------\nUpdateUserCurrencyMutation.builder().chosenCurrency(currency).build()\n--------------------------------------------------\nUserPrivacyQuery.builder().build()\n--------------------------------------------------\nUpdateUserEmailMutation.builder().email(email).currentPassword(currentPassword).build()\n--------------------------------------------------\nSendEmailVerificationMutation.builder().build()\n--------------------------------------------------\nProjectFaq.builder().id(id).answer(answer).createdAt(createdAt).question(question).build()\n--------------------------------------------------\nItem.builder().name(name).description(description).id(id).build()\n--------------------------------------------------\nRewardsItem.builder().id(id).itemId(item.id()).item(item).rewardId(0).quantity(quantity).build()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder().minimum(minPledge).build()\n--------------------------------------------------\nWeb.builder().project(url).rewards(\"$url/rewards\").build()\n--------------------------------------------------\nUrls.builder().web(urlsWeb).build()\n--------------------------------------------------\nAvatar.builder().medium(user?.imageUrl()).build()\n--------------------------------------------------\nUser.builder().id(id).name(name).avatar(avatar).chosenCurrency(chosenCurrency).build()\n--------------------------------------------------\nAvatar.builder().medium(post?.author()?.fragments()?.user()?.imageUrl()).build()\n--------------------------------------------------\nUpdate.Urls.Web.builder().update(\"$url/posts/$id\").build()\n--------------------------------------------------\nUpdate.Urls.builder().web(urlsWeb).build()\n--------------------------------------------------\nAvatar.builder().medium(commentFr?.author()?.fragments()?.user()?.imageUrl()).build()\n--------------------------------------------------\nAvatar.builder().medium(backerData?.imageUrl()).build()\n--------------------------------------------------\nUser.builder().id(backerId).name(nameBacker).avatar(avatar).build()\n--------------------------------------------------\nit.toBuilder().quantity(q + 1).build()\n--------------------------------------------------\nVideo.builder().base(base).frame(frame).high(high).hls(hls).build()\n--------------------------------------------------\nShippingRule.builder().cost(cost).location(location).build()\n--------------------------------------------------\nLocation.builder().id(id).country(country).displayableName(displayName).name(name).build()\n--------------------------------------------------\nShippingRulesEnvelope.builder().shippingRules(shippingRulesList).build()\n--------------------------------------------------\nThirdPartyEventItemInput.builder().itemId(it.itemId).itemName(it.itemName).price(it.price).build()\n--------------------------------------------------\nTriggerThirdPartyEventMutation.builder().triggerThirdPartyEventInput(graphInput).build()\n--------------------------------------------------\nenvironment?.build()\n--------------------------------------------------\ngetEnvironment()?.build()\n--------------------------------------------------\nplayerBuilder.build()\n--------------------------------------------------\nbuilder().requestCode(requestCode).resultCode(resultCode).intent(intent).build()\n--------------------------------------------------\nProjectData.builder().build()\n--------------------------------------------------\nReward.builder().build()\n--------------------------------------------------\nbuilder().pledgeFlowContext(pledgeFlowContext).projectData(projectData).reward(reward).build()\n--------------------------------------------------\npledgeDataAndReason.first.projectData().toBuilder().project(reducedProject).build()\n--------------------------------------------------\npledgeDataAndReason.first.toBuilder().projectData(reducedProjectData).build()\n--------------------------------------------------\nImageRequest.Builder(LocalContext.current).data(imageUrl).crossfade(true).build()\n--------------------------------------------------\nRelativeDateTimeOptions.builder().absolute(true).relativeToDateTime(DateTime.now()).build()\n--------------------------------------------------\nAudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()\n--------------------------------------------------\nenvironment().build()\n--------------------------------------------------\nShareLinkContent.Builder().setContentUrl(Uri.parse(shareUrl)).build()\n--------------------------------------------------\npledgeData.toBuilder().addOns(finalList).shippingRule(shippingRule).build()\n--------------------------------------------------\npledgeData.toBuilder().addOns(finalList).build()\n--------------------------------------------------\npledgeData.toBuilder().build()\n--------------------------------------------------\naddOn.toBuilder().quantity(currentSelection[addOn.id()]).build()\n--------------------------------------------------\nit.toBuilder().shippingRules(graphAddOn.shippingRules()).build()\n--------------------------------------------------\nRewardFactory.noReward().toBuilder().minimum(projectData.backing()?.amount() ?: 1.0).build()\n--------------------------------------------------\nit.first.toBuilder().commentCardState(commentCardState?.commentCardStatus ?: 0).build()\n--------------------------------------------------\nit.second.toBuilder().id(id).build()\n--------------------------------------------------\nuser.toBuilder().notifyMobileOfMarketingUpdate(true).build()\n--------------------------------------------------\nOkHttpClient.Builder().build()\n--------------------------------------------------\nRequest.Builder().url(uri.toString()).build()\n--------------------------------------------------\nbuilder().refTagFromIntent(refTag.second).refTagFromCookie(cookieRefTag).project(it.second).build()\n--------------------------------------------------\ndrawerClickParams.params().toBuilder().sort(currentParams).build()\n--------------------------------------------------\np.toBuilder().sort(s).build()\n--------------------------------------------------\nit.first.toBuilder().sort(it.second).build()\n--------------------------------------------------\nDiscoveryParams.builder().sort(DiscoveryParams.Sort.MAGIC).tagId(it).build()\n--------------------------------------------------\nuser.toBuilder().showPublicProfile(!showProfile).build()\n--------------------------------------------------\nMessageThread.builder().build()\n--------------------------------------------------\nthis.toBuilder().alumniNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().artsCultureNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().filmNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().gamesNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().happeningNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().inventNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().musicNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().promoNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().publishingNewsletter(checked).build()\n--------------------------------------------------\nthis.toBuilder().weeklyNewsletter(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfBackings(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfComments(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfCreatorEdu(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfFollower(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfFriendActivity(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfMessages(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfPostLikes(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfUpdates(checked).build()\n--------------------------------------------------\nuserBuilder.build()\n--------------------------------------------------\nit.toBuilder().notifyMobileOfMarketingUpdate(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfComments(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCommentReplies(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCreatorDigest(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfCreatorEdu(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfFollower(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfFriendActivity(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfMessages(checked).build()\n--------------------------------------------------\nit.toBuilder().notifyOfUpdates(checked).build()\n--------------------------------------------------\nRefTag.Builder().build()\n--------------------------------------------------\nStoredCard.builder().build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().social(true).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().social(false).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().optedOutOfRecommendations(!checked).build()\n--------------------------------------------------\nthis.userOutput.value.toBuilder().showPublicProfile(!checked).build()\n--------------------------------------------------\nDiscoveryParams.builder().backed(1).perPage(18).sort(DiscoveryParams.Sort.ENDING_SOON).build()\n--------------------------------------------------\nErrorEnvelope.builder().build()\n--------------------------------------------------\nDiscoveryParams.builder().sort(defaultSort).build()\n--------------------------------------------------\nDiscoveryParams.builder().term(it).build()\n--------------------------------------------------\nit.first.toBuilder().needsPassword(false).build()", "fun build() = DiscoveryFilterStyle(\r\n            light = light,\r\n            primary = primary,\r\n            showLiveProjectsCount = showLiveProjectsCount,\r\n            selected = selected,\r\n            visible = visible\r\n        )" ],
  "Trail-Sense/497" : [ "DateTimeUtils.isDateToday(it)", "import java.util.TimeZone\nimport org.joda.time.DateTimeZone\nimport org.joda.time.DateTime\nimport com.kickstarter.R\nfun isDateToday(dateTime: DateTime): Boolean {\r\n        return (\r\n            dateTime.withZone(DateTimeZone.UTC).withTimeAtStartOfDay()\r\n                == DateTime.now().withTimeAtStartOfDay().withZoneRetainFields(DateTimeZone.UTC)\r\n            )\r\n    }\nImport(names=[org, joda, time, DateTime], wildcard=false, alias=null)" ],
  "MaterialFiles/211" : [ "override fun onCreate() {\n    super.onCreate()\n    Log.d(TAG, \"onCreate\")\n    state = State.CREATED\n    finishJobThread.start()\n    localNotificationsFacade = LocalNotificationsFacade(this)\n    val appDatabase: AppDatabase = AppDatabase.getDatabase(this, allowMainThreadAccess = true)\n    val crypto = AndroidNativeCryptoFacade(this)\n    val keyStoreFacade = createAndroidKeyStoreFacade(crypto)\n    val sseStorage = SseStorage(appDatabase, keyStoreFacade)\n    val alarmNotificationsManager = AlarmNotificationsManager(sseStorage, crypto, SystemAlarmFacade(this), localNotificationsFacade)\n    alarmNotificationsManager.reScheduleAlarms()\n    sseClient = SseClient(crypto, sseStorage, NetworkObserver(this, this), NotificationSseListener(localNotificationsFacade, sseStorage, alarmNotificationsManager, NetworkUtils.defaultClient), NetworkUtils.defaultClient)\n    sseStorage.observeUsers().observeForever { userInfos ->\n        Log.d(TAG, \"sse storage updated \" + userInfos.size)\n        lifecycleScope.launch(Dispatchers.IO) {\n            val userIds = userInfos.mapTo(HashSet()) {\n                it.userId\n            }\n            if (userIds.isEmpty()) {\n                sseClient.stopConnection()\n                removeForegroundNotification()\n                finishJobIfNeeded()\n            } else {\n                sseClient.restartConnectionIfNeeded(SseInfo(sseStorage.getPushIdentifier()!!, userIds, sseStorage.getSseOrigin()!!))\n            }\n        }\n    }\n    if (atLeastOreo()) {\n        localNotificationsFacade.createNotificationChannels()\n    }\n}", "import android.util.Log\noverride fun onDestroy() {\r\n\t\tLog.d(TAG, \"onDestroy\")\r\n\t\tthis.state = State.STOPPED\r\n\t\tsuper.onDestroy()\r\n\t}" ],
  "Trail-Sense/498" : [ "${formatDate(context, trip.firstDepartureTime)}\n--------------------------------------------------\nformatDate(context, trip.firstDepartureTime)\n--------------------------------------------------\ndate.text = formatDate(context, calendar.time)", "import android.text.format.DateFormat\nimport android.content.Context\nfun formatDate(context: Context, date: Date): String {\r\n        val df = DateFormat.getDateFormat(context)\r\n        return df.format(date)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, format, DateFormat], wildcard=false, alias=null)" ],
  "Trail-Sense/499" : [ "            val actualRelease =\n                if (hasNextEpisode) TimeTools.applyUserOffset(context, show.nextAirdateMs) else null\r\n            return bindViewAt(\n--------------------------------------------------\n                episodeDescription,\n                actualRelease = TimeTools.applyUserOffset(context, episode.episode_firstairedms),\r\n                episode.network,\n--------------------------------------------------\nTimeTools.applyUserOffset(context, item.nextAirdateMs)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, nextEpisodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, episode_firstairedms)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), episodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, sgShow.nextAirdateMs)\n--------------------------------------------------\ndateTime = applyUserOffset(context, dateTime)", "import java.util.Date\nimport org.threeten.bp.ZonedDateTime\nimport com.battlelancer.seriesguide.settings.DisplaySettings\nimport android.content.Context\nprivate fun applyUserOffset(context: Context, dateTime: ZonedDateTime): ZonedDateTime {\r\n        val offset = DisplaySettings.getShowsTimeOffset(context)\r\n        if (offset != 0) {\r\n            return dateTime.plusHours(offset.toLong())\r\n        }\r\n        return dateTime\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, settings, DisplaySettings], wildcard=false, alias=null)\nImport(names=[org, threeten, bp, ZonedDateTime], wildcard=false, alias=null)" ],
  "Iconify/765" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "VinylMusicPlayer/392" : [ "private LinkedHashMap<String, DatabaseMetadata> parseStorageContent(String value) {\r\n    Type listType = new TypeToken<LinkedHashMap<String, DatabaseMetadata>>() {\r\n    }.getType();\r\n    Gson gson = new Gson();\r\n    LinkedHashMap<String, DatabaseMetadata> map = gson.fromJson(value, listType);\r\n    return map;\r\n}\n--------------------------------------------------\n@Override\r\npublic Uri insert(@NonNull Uri uri, ContentValues values) {\r\n    Timber.d(\"Insert Uri: %s\", uri);\r\n    // find object from uri\r\n    Object ret = getObjectFromUri(uri);\r\n    long id = Constants.NOT_SET;\r\n    String parse;\r\n    if (ret instanceof Dataset) {\r\n        Dataset dataset = ((Dataset) ret);\r\n        if (Objects.requireNonNull(dataset.getType()) == DatasetType.TABLE) {\r\n            logTableInsert(dataset, values);\r\n            //database.beginTransaction();\r\n            try {\r\n                initializeDependencies();\r\n                id = openHelper.get().getWritableDatabase().insertOrThrow(dataset.getSource(), null, values);\r\n                //database.setTransactionSuccessful();\r\n            } catch (Exception e) {\r\n                Timber.e(e, \"inserting: %s\", \"insert\");\r\n            }\r\n            parse = dataset.getBasepath() + \"/\" + id;\r\n        } else {\r\n            throw new IllegalArgumentException(\"Type of dataset not supported for update\");\r\n        }\r\n    } else {\r\n        throw new IllegalArgumentException(\"Object ret of mapContent is not instance of dataset\");\r\n    }\r\n    if (id > 0) {\r\n        notifyChange(uri);\r\n    }\r\n    // return Uri with the primary key of the inserted record.\r\n    return Uri.parse(parse);\r\n}\n--------------------------------------------------\n", "import com.money.manager.ex.account.AccountTypes;\r\nimport com.money.manager.ex.account.AccountTypes\npublic AccountTypes getType() {\r\n    String typeName = getTypeName();\r\n    return AccountTypes.get(typeName);\r\n}" ],
  "VinylMusicPlayer/393" : [ "public static String getRelativeDateTime(Context context, long date, java.util.Locale locale, FormatStyle style, boolean alwaysDisplayFullDate, boolean lowercase) {\r\n    if (alwaysDisplayFullDate || !isWithinSixDays(date)) {\r\n        return Task.hasDueTime(date) ? getFullDateTime(newDateTime(date), locale, style) : getFullDate(newDateTime(date), locale, style);\r\n    }\r\n    String day = getRelativeDay(context, date, locale, isAbbreviated(style), lowercase);\r\n    if (Task.hasDueTime(date)) {\r\n        String time = getTimeString(context, newDateTime(date));\r\n        return newDateTime().startOfDay().equals(newDateTime(date).startOfDay()) ? time : String.format(\"%s %s\", day, time);\r\n    } else {\r\n        return day;\r\n    }\r\n}\n--------------------------------------------------\n@Nullable\r\nprivate static String getRelativeDay(Context context, long date, java.util.Locale locale, boolean abbreviated, boolean lowercase) {\r\n    DateTime startOfToday = newDateTime().startOfDay();\r\n    DateTime startOfDate = newDateTime(date).startOfDay();\r\n    if (startOfToday.equals(startOfDate)) {\r\n        return context.getString(lowercase ? R.string.today_lowercase : R.string.today);\r\n    }\r\n    if (startOfToday.plusDays(1).equals(startOfDate)) {\r\n        return context.getString(abbreviated ? lowercase ? R.string.tomorrow_abbrev_lowercase : R.string.tmrw : lowercase ? R.string.tomorrow_lowercase : R.string.tomorrow);\r\n    }\r\n    if (startOfDate.plusDays(1).equals(startOfToday)) {\r\n        return context.getString(abbreviated ? lowercase ? R.string.yesterday_abbrev_lowercase : R.string.yest : lowercase ? R.string.yesterday_lowercase : R.string.yesterday);\r\n    }\r\n    DateTime dateTime = newDateTime(date);\r\n    return abbreviated ? DateUtilities.getWeekdayShort(dateTime, locale) : DateUtilities.getWeekday(dateTime, locale);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    AlarmEntry that = (AlarmEntry) o;\r\n    return alarmId == that.alarmId && taskId == that.taskId && time == that.time && type == that.type;\r\n}" ],
  "MaterialFiles/229" : [ "activity.resources.getString(R.string.you_are_now_a_developer)\n--------------------------------------------------\nresources.getString(R.string.about)\n--------------------------------------------------\nresources.getString(R.string.version_n)\n--------------------------------------------------\nrequireArguments().getString(\"notes\")\n--------------------------------------------------\nres.getString(R.string.yes)\n--------------------------------------------------\nres.getString(R.string.no)\n--------------------------------------------------\nthis.getString(R.string.every_x_days)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_week)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_month)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_y_days)\n--------------------------------------------------\nresources.getString(R.string.every_month)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_month, freqNum)\n--------------------------------------------------\nresources.getString(R.string.every_day)\n--------------------------------------------------\nresources.getString(R.string.every_week)\n--------------------------------------------------\nresources.getString(R.string.every_x_days, freqDen)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_week, freqNum)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_y_days, freqNum, freqDen)\n--------------------------------------------------\nbinding.toolbar.title = getString(R.string.edit_habit)\n--------------------------------------------------\nbinding.nameInput.hint = getString(R.string.measurable_short_example)\n--------------------------------------------------\nbinding.questionInput.hint = getString(R.string.measurable_question_example)\n--------------------------------------------------\ngetString(R.string.target_type_at_least)\n--------------------------------------------------\ngetString(R.string.target_type_at_most)\n--------------------------------------------------\ngetString(R.string.every_day)\n--------------------------------------------------\ngetString(R.string.every_week)\n--------------------------------------------------\ngetString(R.string.every_month)\n--------------------------------------------------\nbinding.targetInput.error = getString(R.string.validation_cannot_be_blank)\n--------------------------------------------------\nbinding.reminderTimePicker.text = getString(R.string.reminder_off)\n--------------------------------------------------\n1 -> getString(R.string.every_day)\n--------------------------------------------------\n7 -> getString(R.string.every_week)\n--------------------------------------------------\n30 -> getString(R.string.every_month)\n--------------------------------------------------\nNumericalHabitType.AT_MOST -> getString(R.string.target_type_at_most)\n--------------------------------------------------\nelse -> getString(R.string.target_type_at_least)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_entered)\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_completed)\n--------------------------------------------------\nresources.getString(R.string.main_activity_title)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_import)\n--------------------------------------------------\ngetString(when(m) {\n    COULD_NOT_EXPORT -> R.string.could_not_export\n    IMPORT_SUCCESSFUL -> R.string.habits_imported\n    IMPORT_FAILED -> R.string.could_not_import\n    DATABASE_REPAIRED -> R.string.database_repaired\n    COULD_NOT_GENERATE_BUG_REPORT -> R.string.bug_report_failed\n    FILE_NOT_RECOGNIZED -> R.string.file_not_recognized\n})\n--------------------------------------------------\nactivity.resources.getString(R.string.toast_habit_created)\n--------------------------------------------------\nactivity.resources.getString(R.string.habits_imported)\n--------------------------------------------------\nactivity.resources.getString(R.string.file_not_recognized)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(id)\n--------------------------------------------------\nresources.getString(R.string.hint_title)\n--------------------------------------------------\nresources.getString(R.string.fa_skipped)\n--------------------------------------------------\nresources.getString(R.string.fa_question)\n--------------------------------------------------\nresources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(R.string.reminder_off)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_up)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_down)\n--------------------------------------------------\nresources.getString(R.string.today)\n--------------------------------------------------\nresources.getString(R.string.week)\n--------------------------------------------------\nresources.getString(R.string.month)\n--------------------------------------------------\nresources.getString(R.string.quarter)\n--------------------------------------------------\nresources.getString(R.string.year)\n--------------------------------------------------\ngetString(R.string.intro_title_1)\n--------------------------------------------------\ngetString(R.string.intro_description_1)\n--------------------------------------------------\ngetString(R.string.intro_title_2)\n--------------------------------------------------\ngetString(R.string.intro_description_2)\n--------------------------------------------------\ngetString(R.string.intro_title_4)\n--------------------------------------------------\ngetString(R.string.intro_description_4)\n--------------------------------------------------\nresources.getString(R.string.settings)\n--------------------------------------------------\ngetString(R.string.playStoreURL)\n--------------------------------------------------\nactivity.getString(R.string.check)\n--------------------------------------------------\nactivity.getString(R.string.uncheck)\n--------------------------------------------------\nactivity.getString(R.string.toggle)\n--------------------------------------------------\nactivity.getString(R.string.increment)\n--------------------------------------------------\nactivity.getString(R.string.decrement)\n--------------------------------------------------\nresources.getString(R.string.app_name)\n--------------------------------------------------\ncursor.getString(index)\n--------------------------------------------------\ncontext.getString(R.string.translateURL)\n--------------------------------------------------\ncontext.getString(R.string.playStoreURL)\n--------------------------------------------------\ncontext.getString(R.string.feedbackURL)\n--------------------------------------------------\ncontext.getString(R.string.privacyPolicyURL)\n--------------------------------------------------\ncontext.getString(R.string.helpURL)\n--------------------------------------------------\ncontext.getString(R.string.sourceCodeURL)\n--------------------------------------------------\ncontext.getString(R.string.codeContributorsURL)\n--------------------------------------------------\ncontext.getString(R.string.yes)\n--------------------------------------------------\ncontext.getString(R.string.no)\n--------------------------------------------------\ncontext.getString(R.string.enter)\n--------------------------------------------------\ncontext.getString(R.string.default_reminder_question)\n--------------------------------------------------\ncontext.getString(R.string.snooze)\n--------------------------------------------------\ncontext.resources.getString(R.string.reminder)\n--------------------------------------------------\ncontext.resources.getString(R.string.none)\n--------------------------------------------------\nprefs.getString(\"pref_ringtone_uri\", defaultRingtoneUri.toString())\n--------------------------------------------------\nsharedPrefs.getString(key, defValue)\n--------------------------------------------------\ncontext.resources.getString(resId)\n--------------------------------------------------\ncontext.getString(R.string.weekends)\n--------------------------------------------------\ncontext.getString(R.string.any_weekday)\n--------------------------------------------------\ncontext.getString(R.string.any_day)\n--------------------------------------------------\nresources.getString(R.string.activity_not_found)\n--------------------------------------------------\nthis.getString(toId)\n--------------------------------------------------\nthis.getString(subjectId)\n--------------------------------------------------\ncontext.getString(R.string.habit_not_found)\n--------------------------------------------------\nresources.getString(R.string.fa_check)\n--------------------------------------------------\nresources.getString(R.string.fa_times)", "override fun getString(index: Int): String? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getString(index)\r\n        }\r\n    }" ],
  "Iconify/737" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/736" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/399" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/396" : [ "", "public String getLine(int time) {\r\n    time += offset + AbsSynchronizedLyrics.TIME_OFFSET_MS;\r\n    int lastLineTime = lines.keyAt(0);\r\n    for (int i = 0; i < lines.size(); i++) {\r\n        int lineTime = lines.keyAt(i);\r\n        if (time >= lineTime) {\r\n            lastLineTime = lineTime;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return lines.get(lastLineTime);\r\n}" ],
  "Iconify/733" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "MaterialFiles/223" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}" ],
  "VinylMusicPlayer/398" : [ "/**\r\n * 从文件解析双语歌词\r\n */\r\nstatic List<LrcEntry> parseLrc(File[] lrcFiles) {\r\n    if (lrcFiles == null || lrcFiles.length != 2 || lrcFiles[0] == null) {\r\n        return null;\r\n    }\r\n    File mainLrcFile = lrcFiles[0];\r\n    File secondLrcFile = lrcFiles[1];\r\n    List<LrcEntry> mainEntryList = parseLrc(mainLrcFile);\r\n    List<LrcEntry> secondEntryList = parseLrc(secondLrcFile);\r\n    if (mainEntryList != null && secondEntryList != null) {\r\n        for (LrcEntry mainEntry : mainEntryList) {\r\n            for (LrcEntry secondEntry : secondEntryList) {\r\n                if (mainEntry.getTime() == secondEntry.getTime()) {\r\n                    mainEntry.setSecondText(secondEntry.getText());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return mainEntryList;\r\n}\n--------------------------------------------------\n/**\r\n * 从文本解析双语歌词\r\n */\r\nstatic List<LrcEntry> parseLrc(String[] lrcTexts) {\r\n    if (lrcTexts == null || lrcTexts.length != 2 || TextUtils.isEmpty(lrcTexts[0])) {\r\n        return null;\r\n    }\r\n    String mainLrcText = lrcTexts[0];\r\n    String secondLrcText = lrcTexts[1];\r\n    List<LrcEntry> mainEntryList = parseLrc(mainLrcText);\r\n    List<LrcEntry> secondEntryList = parseLrc(secondLrcText);\r\n    if (mainEntryList != null && secondEntryList != null) {\r\n        for (LrcEntry mainEntry : mainEntryList) {\r\n            for (LrcEntry secondEntry : secondEntryList) {\r\n                if (mainEntry.getTime() == secondEntry.getTime()) {\r\n                    mainEntry.setSecondText(secondEntry.getText());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return mainEntryList;\r\n}\n--------------------------------------------------\n", "@Override\r\npublic String getText() {\r\n    parse(false);\r\n    if (valid) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < lines.size(); i++) {\r\n            String line = lines.valueAt(i);\r\n            sb.append(line).append(\"\\r\\n\");\r\n        }\r\n        return sb.toString().trim().replaceAll(\"(\\r?\\n){3,}\", \"\\r\\n\\r\\n\");\r\n    }\r\n    return super.getText();\r\n}" ],
  "VinylMusicPlayer/397" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/739" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/738" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/239" : [ "        } else {\n            super.onMenuItemClick(item)\r\n        }", "import org.tasks.data.Place\nimport org.tasks.R\nimport android.view.MenuItem\noverride fun onMenuItemClick(item: MenuItem): Boolean =\r\n            if (item.itemId == R.id.menu_search) {\r\n                searchPlace()\r\n                true\r\n            } else false\nimport android.view.MenuItem\nimport org.tasks.R\nimport org.tasks.data.Place" ],
  "MaterialFiles/238" : [ "", "override fun setMaximumSize(numBytes: Long): Long {\r\n        delegate.maximumSize = numBytes\r\n        return delegate.maximumSize\r\n    }" ],
  "Iconify/747" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "MaterialFiles/230" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/746" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/385" : [ "public int getCount() {\r\n    return iter == null ? 0 : iter.getCount();\r\n}\n--------------------------------------------------\npublic int getCount() {\r\n    return c.getCount();\r\n}\n--------------------------------------------------\n", "public int getCount() {\r\n    if (zones != null)\r\n        return zones.length - 1;\r\n    return 0;\r\n}" ],
  "MaterialFiles/235" : [ "        var mFile = file\n        mFile = tryGetCanonicalFile(mFile) // important as we compare the path value later\n        if (mFile.isDirectory) {\n--------------------------------------------------\n                    Crumb(\n                        tryGetCanonicalFile(startDirectory)\n                    ),", "import java.io.IOException\nimport java.io.File\nprivate fun tryGetCanonicalFile(file: File): File {\n            return try {\n                file.canonicalFile\n            } catch (e: IOException) {\n                e.printStackTrace()\n                file\n            }\n        }\nimport java.io.File\nimport java.io.IOException" ],
  "VinylMusicPlayer/384" : [ "private LinkedHashMap<String, DatabaseMetadata> parseStorageContent(String value) {\r\n    Type listType = new TypeToken<LinkedHashMap<String, DatabaseMetadata>>() {\r\n    }.getType();\r\n    Gson gson = new Gson();\r\n    LinkedHashMap<String, DatabaseMetadata> map = gson.fromJson(value, listType);\r\n    return map;\r\n}\n--------------------------------------------------\n@Override\r\npublic Uri insert(@NonNull Uri uri, ContentValues values) {\r\n    Timber.d(\"Insert Uri: %s\", uri);\r\n    // find object from uri\r\n    Object ret = getObjectFromUri(uri);\r\n    long id = Constants.NOT_SET;\r\n    String parse;\r\n    if (ret instanceof Dataset) {\r\n        Dataset dataset = ((Dataset) ret);\r\n        if (Objects.requireNonNull(dataset.getType()) == DatasetType.TABLE) {\r\n            logTableInsert(dataset, values);\r\n            //database.beginTransaction();\r\n            try {\r\n                initializeDependencies();\r\n                id = openHelper.get().getWritableDatabase().insertOrThrow(dataset.getSource(), null, values);\r\n                //database.setTransactionSuccessful();\r\n            } catch (Exception e) {\r\n                Timber.e(e, \"inserting: %s\", \"insert\");\r\n            }\r\n            parse = dataset.getBasepath() + \"/\" + id;\r\n        } else {\r\n            throw new IllegalArgumentException(\"Type of dataset not supported for update\");\r\n        }\r\n    } else {\r\n        throw new IllegalArgumentException(\"Object ret of mapContent is not instance of dataset\");\r\n    }\r\n    if (id > 0) {\r\n        notifyChange(uri);\r\n    }\r\n    // return Uri with the primary key of the inserted record.\r\n    return Uri.parse(parse);\r\n}\n--------------------------------------------------\n", "import com.money.manager.ex.account.AccountTypes;\r\nimport com.money.manager.ex.account.AccountTypes\npublic AccountTypes getType() {\r\n    String typeName = getTypeName();\r\n    return AccountTypes.get(typeName);\r\n}" ],
  "MaterialFiles/234" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Iconify/743" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "MaterialFiles/237" : [ "{\r\n        return isValidZcashAddress(address)\r\n    }\n--------------------------------------------------\n{\r\n        return isValidTransparentAddress(address) || isValidShieldedAddress(address)\r\n    }", "import io.horizontalsystems.tronkit.models.Address\noverride fun isValid(reference: String): Boolean {\r\n        return try {\r\n            Address.fromBase58(reference)\r\n            true\r\n        } catch (e: Exception) {\r\n            false\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, tronkit, models, Address], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/386" : [ "private void createAdvancedWorkout(String name, boolean workoutExists) throws JSONException, IOException {\r\n    if (workoutExists) {\r\n        advancedWorkout = WorkoutSerializer.readFile(getApplicationContext(), name);\r\n    } else {\r\n        advancedWorkout = new Workout();\r\n        WorkoutSerializer.writeFile(getApplicationContext(), name, advancedWorkout);\r\n    }\r\n    advancedWorkoutStepsAdapter.steps = advancedWorkout.getStepList();\r\n    advancedWorkoutStepsAdapter.notifyDataSetChanged();\r\n}\n--------------------------------------------------\nprivate void deleteStep(StepButton button) {\r\n    Step s = button.getStep();\r\n    for (Step se : advancedWorkout.getSteps()) {\r\n        if (se instanceof RepeatStep) {\r\n            for (Step subStep : ((RepeatStep) se).getSteps()) {\r\n                if (subStep.equals(s)) {\r\n                    ((RepeatStep) se).getSteps().remove(s);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (se.equals(s)) {\r\n            advancedWorkout.getSteps().remove(se);\r\n            break;\r\n        }\r\n    }\r\n    advancedWorkoutStepsAdapter.steps = advancedWorkout.getStepList();\r\n    advancedWorkoutStepsAdapter.notifyDataSetChanged();\r\n}\n--------------------------------------------------\n", "import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\npublic List<StepListEntry> getStepList() {\r\n    ArrayList<StepListEntry> list = new ArrayList<>();\r\n    for (Step s : steps) {\r\n        s.getSteps(null, 0, list);\r\n    }\r\n    return list;\r\n}" ],
  "Iconify/749" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/491" : [ "@Override\r\nprotected void onDestroy() {\r\n    EventBus.getDefault().unregister(this);\r\n    super.onDestroy();\r\n    player.seekToDefaultPosition();\r\n    player.stop(true);\r\n    player.release();\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    player.seekToDefaultPosition();\r\n    player.stop(true);\r\n    player.release();\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void release() {\r\n    if (helper != null) {\r\n        helper.release();\r\n        helper = null;\r\n    }\r\n    container = null;\r\n}" ],
  "VinylMusicPlayer/490" : [ "@Override\r\npublic void onViewCreated(View view, Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    displayBudgets();\r\n}\n--------------------------------------------------\n@Override\r\npublic void onViewCreated(View view, Bundle savedInstanceState) {\r\n    mFloatingActionButton = view.findViewById(R.id.fab);\r\n    if (mFloatingActionButton != null) {\r\n        mFloatingActionButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View v) {\r\n                onFloatingActionButtonClickListener();\r\n            }\r\n        });\r\n    }\r\n    super.onViewCreated(view, savedInstanceState);\r\n}\n--------------------------------------------------\n", "import android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.View\nimport android.os.Bundle\n/**\r\n * Attach to list view once the view hierarchy has been created.\r\n */\r\n@Override\r\npublic void onViewCreated(View view, Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    ensureList();\r\n}" ],
  "VinylMusicPlayer/493" : [ "public void swapCursor(Cursor inputCursor) {\r\n    if (inputCursor == mCursor) {\r\n        return;\r\n    }\r\n    if (inputCursor != null) {\r\n        mCursor = inputCursor;\r\n        mRowIDColumn = mCursor.getColumnIndex(mRowIDColumnName);\r\n        mDataValid = true;\r\n        notifyDataSetChanged();\r\n    } else {\r\n        notifyItemRangeRemoved(0, getItemCount());\r\n        mCursor = null;\r\n        mRowIDColumn = -1;\r\n        mDataValid = false;\r\n    }\r\n}\n--------------------------------------------------\nprivate void updateLoyaltyCardList(boolean updateCount) {\r\n    Group group = null;\r\n    if (mGroup != null) {\r\n        group = (Group) mGroup;\r\n    }\r\n    mAdapter.swapCursor(DBHelper.getLoyaltyCardCursor(mDatabase, mFilter, group, mOrder, mOrderDirection, mAdapter.showingArchivedCards() ? DBHelper.LoyaltyCardArchiveFilter.All : DBHelper.LoyaltyCardArchiveFilter.Unarchived));\r\n    if (updateCount) {\r\n        updateLoyaltyCardCount();\r\n        // Update menu icons if necessary\r\n        invalidateOptionsMenu();\r\n    }\r\n    if (mLoyaltyCardCount > 0) {\r\n        // We want the cardList to be visible regardless of the filtered match count\r\n        // to ensure that the noMatchingCardsText doesn't end up being shown below\r\n        // the keyboard\r\n        mHelpSection.setVisibility(View.GONE);\r\n        mNoGroupCardsText.setVisibility(View.GONE);\r\n        if (mAdapter.getItemCount() > 0) {\r\n            mCardList.setVisibility(View.VISIBLE);\r\n            mNoMatchingCardsText.setVisibility(View.GONE);\r\n        } else {\r\n            mCardList.setVisibility(View.GONE);\r\n            if (!mFilter.isEmpty()) {\r\n                // Actual Empty Search Result\r\n                mNoMatchingCardsText.setVisibility(View.VISIBLE);\r\n                mNoGroupCardsText.setVisibility(View.GONE);\r\n            } else {\r\n                // Group Tab with no Group Cards\r\n                mNoMatchingCardsText.setVisibility(View.GONE);\r\n                mNoGroupCardsText.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    } else {\r\n        mCardList.setVisibility(View.GONE);\r\n        mHelpSection.setVisibility(View.VISIBLE);\r\n        mNoMatchingCardsText.setVisibility(View.GONE);\r\n        mNoGroupCardsText.setVisibility(View.GONE);\r\n    }\r\n    if (mCurrentActionMode != null) {\r\n        mCurrentActionMode.finish();\r\n    }\r\n}\n--------------------------------------------------\n", "import android.database.Cursor\n@Override\r\npublic int getItemCount() {\r\n    if (mDataValid) {\r\n        return mCursor.getCount();\r\n    } else {\r\n        return 0;\r\n    }\r\n}" ],
  "VinylMusicPlayer/492" : [ "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    EventBus.getDefault().register(this);\r\n    RatingDialog.init(this);\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    isPaused = false;\r\n    EventBus.getDefault().register(this);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    loadItems();\r\n}" ],
  "Feeder/16" : [ "                                    is DrawerItem.Filter -> {\n                                        viewModel.setFilter(it.type())\r\n                                        scope.launch(Dispatchers.Default) {\n--------------------------------------------------\n                    getParcelableExtra(data, OPEN_FILTER, Filter::class.java)?.let {\n                        viewModel.setFilter(it)\r\n                    }\n--------------------------------------------------\n                    getParcelableExtra(data, EXTRA_PLACE, Place::class.java)?.let {\n                        viewModel.setFilter(PlaceFilter(it))\r\n                    }\n--------------------------------------------------\n            val task = getTaskToLoad(filter)\n            viewModel.setFilter(filter = filter, task = task)\r\n        }\n--------------------------------------------------\nlistViewModel.setFilter(FilterImpl(\"subtasks\", getQueryTemplate(it)))\n--------------------------------------------------\nsetFilter(defaultFilterProvider.getFilterPreferenceValue(filter))", "import kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.flow.filter\nimport com.todoroo.astrid.api.Filter\nfun setFilter(filter: Filter) {\r\n        _state.update {\r\n            it.copy(filter = filter)\r\n        }\r\n    }\nimport com.todoroo.astrid.api.Filter\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.update" ],
  "VinylMusicPlayer/499" : [ "@Override\r\npublic void run() {\r\n    synchronized (mLock) {\r\n        if (SystemClock.uptimeMillis() - mLastDecrementRefCountTimeStamp < mAutoCloseTimeoutInMs) {\r\n            // An increment + decrement beat us to closing the db. We\r\n            // will not close the database, and there should be at least\r\n            // one more auto-close scheduled.\r\n            return;\r\n        }\r\n        if (mRefCount != 0) {\r\n            // An increment beat us to closing the db. We don't close the\r\n            // db, and another closer will be scheduled once the ref\r\n            // count is decremented.\r\n            return;\r\n        }\r\n        if (mOnAutoCloseCallback != null) {\r\n            mOnAutoCloseCallback.run();\r\n        } else {\r\n            throw new IllegalStateException(\"mOnAutoCloseCallback is null but it should\" + \" have been set before use. Please file a bug \" + \"against Room at: https://issuetracker.google\" + \".com/issues/new?component=413107&template=1096568\");\r\n        }\r\n        if (mDelegateDatabase != null && mDelegateDatabase.isOpen()) {\r\n            try {\r\n                mDelegateDatabase.close();\r\n            } catch (IOException e) {\r\n                SneakyThrow.reThrow(e);\r\n            }\r\n            mDelegateDatabase = null;\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n/**\r\n * Close the database if it is still active.\r\n *\r\n * @throws IOException if an exception is encountered when closing the underlying db.\r\n */\r\npublic void closeDatabaseIfOpen() throws IOException {\r\n    synchronized (mLock) {\r\n        mManuallyClosed = true;\r\n        if (mDelegateDatabase != null) {\r\n            mDelegateDatabase.close();\r\n        }\r\n        mDelegateDatabase = null;\r\n    }\r\n}\n--------------------------------------------------\n", "import java.io\n/**\r\n * Forces any buffered output bytes to be encoded out to the stream\r\n * and closes this output stream.\r\n *\r\n * @exception\tIOException\tfor I/O errors\r\n */\r\n@Override\r\npublic void close() throws IOException {\r\n    flush();\r\n    out.close();\r\n}" ],
  "VinylMusicPlayer/498" : [ "/**\r\n * The match method.\r\n *\r\n * @param msg\tthe Message number is matched with this Message\r\n * @return\t\ttrue if the match succeeds, otherwise false\r\n */\r\npublic boolean match(Message msg) {\r\n    long msgId;\r\n    try {\r\n        if (msg instanceof GmailMessage)\r\n            msgId = ((GmailMessage) msg).getMsgId();\r\n        else\r\n            return false;\r\n    } catch (Exception e) {\r\n        return false;\r\n    }\r\n    return super.match(msgId);\r\n}\n--------------------------------------------------\n/**\r\n * The match method.\r\n *\r\n * @param msg\tthe Message number is matched with this Message\r\n * @return\t\ttrue if the match succeeds, otherwise false\r\n */\r\npublic boolean match(Message msg) {\r\n    long thrId;\r\n    try {\r\n        if (msg instanceof GmailMessage)\r\n            thrId = ((GmailMessage) msg).getThrId();\r\n        else\r\n            return false;\r\n    } catch (Exception e) {\r\n        return false;\r\n    }\r\n    return super.match(thrId);\r\n}\n--------------------------------------------------\n", "import javax.mail.Message;\r\nimport javax.mail.Message\n/**\r\n *  The AND operation. <p>\r\n *\r\n *  The terms specified in the constructor are applied to\r\n *  the given object and the AND operator is applied to their results.\r\n *\r\n *  @param msg\tThe specified SearchTerms are applied to this Message\r\n * \t\t\tand the AND operator is applied to their results.\r\n *  @return\t\ttrue if the AND succeds, otherwise false\r\n */\r\n@Override\r\npublic boolean match(Message msg) {\r\n    for (int i = 0; i < terms.length; i++) if (!terms[i].match(msg))\r\n        return false;\r\n    return true;\r\n}" ],
  "VinylMusicPlayer/495" : [ "", "import org.tasks.R\nimport android.view.View\n/**\r\n * Set the range of numbers allowed for the number picker. The current value will be automatically\r\n * set to the start.\r\n *\r\n * @param start the start of the range (inclusive)\r\n * @param end the end of the range (inclusive)\r\n */\r\npublic void setRange(int start, int end) {\r\n    mStart = start;\r\n    mEnd = end;\r\n    mCurrent = start;\r\n    updateView();\r\n}" ],
  "VinylMusicPlayer/494" : [ "position(SlidrPosition.BOTTOM)\n--------------------------------------------------\n                if (id >= 0L) {\n                    val position: Int = intent.getIntExtra(\"position\", 0)\n                    val songs: List<Song> = PlaylistSongsLoader.getPlaylistSongList(get(), id)\n--------------------------------------------------\n                    val songs: List<Song> = PlaylistSongsLoader.getPlaylistSongList(get(), id)\n                    MusicPlayerRemote.openQueue(songs, position, true)\n                    handled = true\n--------------------------------------------------\n                if (id >= 0L) {\n                    val position: Int = intent.getIntExtra(\"position\", 0)\n                    val songs = libraryViewModel.albumById(id).songs\n--------------------------------------------------\n                        songs,\n                        position,\n                        true\n--------------------------------------------------\n                if (id >= 0L) {\n                    val position: Int = intent.getIntExtra(\"position\", 0)\n                    val songs: List<Song> = libraryViewModel.artistById(id).songs", "import android.media.MediaPlayer\noverride fun position(): Int {\n        return if (!this.isInitialized) {\n            -1\n        } else try {\n            mCurrentMediaPlayer.currentPosition\n        } catch (e: IllegalStateException) {\n            -1\n        }\n    }\nimport android.media.MediaPlayer" ],
  "Feeder/11" : [ "{\n        super.onCreate(savedInstanceState)\r\n        theme.applyTheme(this)\n--------------------------------------------------\n                        skipPartiallyExpanded,\n                        saver = SheetState.Saver(\r\n                            skipPartiallyExpanded = skipPartiallyExpanded,\n--------------------------------------------------\n                } else if (task != existingTef?.task) {\n                    existingTef?.save(remove = false)\r\n                    transaction\n--------------------------------------------------\nsave()\n--------------------------------------------------\ntaskDao.save(it.copy(priority = priorityPickerViewModel.priority.value))\n--------------------------------------------------\netebase.save(null)", "import com.todoroo.astrid.data.Task\nsuspend fun save(task: Task, original: Task?) {\r\n        if (taskDao.update(task, original)) {\r\n            afterUpdate(task, original)\r\n        }\r\n    }\nimport com.todoroo.astrid.data.Task" ],
  "Feeder/12" : [ "", "import io.reactivex.functions.Function\nfun pageTransformation(pageTransformation: Function<List<Data>, List<Data>>): Builder<Data, Envelope, Params> {\r\n            this.pageTransformation = pageTransformation\r\n            return this\r\n        }\nImport(names=[io, reactivex, functions, Function], wildcard=false, alias=null)" ],
  "BCR/1" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    controller.release();\r\n    controller = null;\r\n}\n--------------------------------------------------\n", "import de.danoeh.antennapod.core.util.playback.PlaybackController;\r\nimport de.danoeh.antennapod.core.util.playback.PlaybackController\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    controller = new PlaybackController(getActivity()) {\r\n\r\n        @Override\r\n        public void loadMediaInfo() {\r\n            setupAudioTracks();\r\n        }\r\n    };\r\n    controller.init();\r\n}" ],
  "BCR/0" : [ "data = getResultUri(contact)", "import com.simplemobiletools.contacts.pro.R\nimport com.simplemobiletools.commons.models.contacts.Contact\nimport android.provider.ContactsContract\nimport android.net.Uri\nprivate fun getResultUri(contact: Contact): Uri {\r\n        return when {\r\n            specialMimeType != null -> {\r\n                val contactId = ContactsHelper(this).getContactMimeTypeId(contact.id.toString(), specialMimeType!!)\r\n                Uri.withAppendedPath(ContactsContract.Data.CONTENT_URI, contactId)\r\n            }\r\n\r\n            else -> getContactPublicUri(contact)\r\n        }\r\n    }\nImport(names=[android, net, Uri], wildcard=false, alias=null)\nImport(names=[com, simplemobiletools, commons, models, contacts, Contact], wildcard=false, alias=null)" ],
  "BCR/4" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    controller.release();\r\n    controller = null;\r\n}\n--------------------------------------------------\n", "import de.danoeh.antennapod.core.util.playback.PlaybackController;\r\nimport de.danoeh.antennapod.core.util.playback.PlaybackController\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    controller = new PlaybackController(getActivity()) {\r\n\r\n        @Override\r\n        public void loadMediaInfo() {\r\n            setupAudioTracks();\r\n        }\r\n    };\r\n    controller.init();\r\n}" ],
  "BCR/7" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    controller.release();\r\n    controller = null;\r\n}\n--------------------------------------------------\n", "import de.danoeh.antennapod.core.util.playback.PlaybackController;\r\nimport de.danoeh.antennapod.core.util.playback.PlaybackController\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    controller = new PlaybackController(getActivity()) {\r\n\r\n        @Override\r\n        public void loadMediaInfo() {\r\n            setupAudioTracks();\r\n        }\r\n    };\r\n    controller.init();\r\n}" ],
  "Feeder/161" : [ "getValidUrl(link) ?: return", "private fun getValidUrl(urlString: String): String? {\r\n        if (urlString.isBlank())\r\n            return null\r\n\r\n        val url = createUrl(urlString) ?: createUrl(urlString, \"https://\") ?: return null\r\n\r\n        return url.toString()\r\n    }" ],
  "BCR/9" : [ "@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    controller.release();\r\n    controller = null;\r\n}\n--------------------------------------------------\n", "import de.danoeh.antennapod.core.util.playback.PlaybackController;\r\nimport de.danoeh.antennapod.core.util.playback.PlaybackController\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    controller = new PlaybackController(getActivity()) {\r\n\r\n        @Override\r\n        public void loadMediaInfo() {\r\n            setupAudioTracks();\r\n        }\r\n    };\r\n    controller.init();\r\n}" ],
  "Feeder/163" : [ "uri.getQueryParameter(\"backed\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"page\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"per_page\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"pledged\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"social\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"starred\").toInteger()\n--------------------------------------------------\nuri.getQueryParameter(\"tag_id\").toInteger()", "import java.text.NumberFormat\nfun String?.toInteger(): Int? {\r\n    return if (this != null) {\r\n        try {\r\n            this.toInt()\r\n        } catch (e: NumberFormatException) {\r\n            null\r\n        }\r\n    } else null\r\n}\nImport(names=[java, text, NumberFormat], wildcard=false, alias=null)" ],
  "Feeder/164" : [ "val parameters = parseQueryParameters(query)", "private fun parseQueryParameters(query: String?): Map<String, String> {\r\n        val parameters = mutableMapOf<String, String>()\r\n\r\n        if (!query.isNullOrBlank()) {\r\n            val keyValuePairs = query.split(\"&\")\r\n            for (pair in keyValuePairs) {\r\n                val (key, value) = pair.split(\"=\")\r\n                parameters[key] = value\r\n            }\r\n        }\r\n\r\n        return parameters\r\n    }" ],
  "Feeder/165" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/167" : [ "viewModel.skipToNext()\n--------------------------------------------------\n{\r\n        viewModel.skipToNext()\r\n    }", "import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun skipToNext() {\r\n        viewModelScope.launch {\r\n            queueManager.next()\r\n        }\r\n    }\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.launch" ],
  "Feeder/168" : [ "kit.stop()\n--------------------------------------------------\n{\r\n        // stopped via EthereumKitManager\r\n    }\n--------------------------------------------------\nadaptersMap[it]?.stop()\n--------------------------------------------------\nadapter.stop()\n--------------------------------------------------\npreviousAdapter.stop()\n--------------------------------------------------\nkit?.stop()\n--------------------------------------------------\nstop()\n--------------------------------------------------\nevmKitWrapper?.evmKit?.stop()\n--------------------------------------------------\nsolanaKitWrapper?.solanaKit?.stop()\n--------------------------------------------------\ntorOperator.stop()\n--------------------------------------------------\ntronKitWrapper?.tronKit?.stop()\n--------------------------------------------------\nservice.stop()\n--------------------------------------------------\ntotalBalance.stop()", "import kotlinx.coroutines.cancel\noverride fun stop() {\r\n        tonKit.stop()\r\n        coroutineScope.cancel()\r\n    }\nimport kotlinx.coroutines.cancel" ],
  "VinylMusicPlayer/488" : [ "", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport androidx.annotation.MainThread\n/**\r\n * Stops to listen the given {@code LiveData}.\r\n *\r\n * @param toRemote {@code LiveData} to stop to listen\r\n * @param <S>      the type of data hold by {@code source} LiveData\r\n */\r\n@MainThread\r\npublic <S> void removeSource(@NonNull LiveData<S> toRemote) {\r\n    Source<?> source = mSources.remove(toRemote);\r\n    if (source != null) {\r\n        source.unplug();\r\n    }\r\n}" ],
  "VinylMusicPlayer/489" : [ "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    EventBus.getDefault().register(this);\r\n    RatingDialog.init(this);\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    isPaused = false;\r\n    EventBus.getDefault().register(this);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    loadItems();\r\n}" ],
  "VinylMusicPlayer/486" : [ "        }\n        navController.addOnDestinationChangedListener { _, destination, _ ->\n            if (destination.id == navGraph.startDestinationId) {\n--------------------------------------------------\n            object : RecyclerView.AdapterDataObserver() {\n                override fun onChanged() {\n                    super.onChanged()\n--------------------------------------------------\n                override fun onChanged() {\n                    super.onChanged()\n                    checkIsEmpty()", "import android.os.Handler\noverride fun onChange(selfChange: Boolean) {\n        // if a change is detected, remove any scheduled callback\n        // then post a new one. This is intended to prevent closely\n        // spaced events from generating multiple refresh calls\n        mHandler.removeCallbacks(this)\n        mHandler.postDelayed(this, REFRESH_DELAY)\n    }" ],
  "VinylMusicPlayer/485" : [ "releaseWakeLockIfHandlerIdle()", "import android.util.Log\nimport android.os.PowerManager.WakeLock\nimport android.os.Message\nimport android.os.Handler\nprivate fun releaseWakeLockIfHandlerIdle() {\n            if (mHandler.hasMessages(MSG_HEADSET_DOUBLE_CLICK_TIMEOUT)) {\n                if (DEBUG) Log.v(TAG, \"Handler still has messages pending, not releasing wake lock\")\n                return\n            }\n\n            if (wakeLock != null) {\n                if (DEBUG) Log.v(TAG, \"Releasing wake lock\")\n                wakeLock!!.release()\n                wakeLock = null\n            }\n        }\nImport(names=[android, os, Handler], wildcard=false, alias=null)\nImport(names=[android, util, Log], wildcard=false, alias=null)" ],
  "Feeder/170" : [ "this[\"force_dark_mode\"] = sessionForceDarkMode()", "import com.kickstarter.R\nimport android.content.res.Configuration\noverride fun sessionForceDarkMode(): Boolean {\r\n        return if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {\r\n            when (context.resources?.configuration?.uiMode?.and(Configuration.UI_MODE_NIGHT_MASK)) {\r\n                Configuration.UI_MODE_NIGHT_YES -> {\r\n                    true\r\n                }\r\n                else -> false\r\n            }\r\n        } else {\r\n            false\r\n        }\r\n    }\nImport(names=[android, content, res, Configuration], wildcard=false, alias=null)" ],
  "Feeder/171" : [ "            caldavDao.getAccounts()\n                    .ifEmpty { listOf(caldavDao.setupLocalAccount(context)) }\r\n                    .filter { it.accountType != TYPE_LOCAL || preferences.getBoolean(R.string.p_lists_enabled, true) }", "import kotlinx.coroutines.sync.withLock\nimport android.content.Context\nsuspend fun setupLocalAccount(context: Context): CaldavAccount = mutex.withLock {\r\n        val account = getLocalAccount()\r\n        getLocalList(context, account)\r\n        return account\r\n    }\nimport android.content.Context\nimport kotlinx.coroutines.sync.withLock" ],
  "Feeder/173" : [ "{\n        // Set the fill-in intents for the collection item.\r\n        if (episodeId != null) {\n--------------------------------------------------\nSimilarMoviesActivity.intent(requireContext(), tmdbId, it)\n--------------------------------------------------\nFullscreenImageActivity.intent(requireActivity(), smallImageUrl, largeImageUrl)\n--------------------------------------------------\nNotificationAlarmReceiver.intent(context)\n--------------------------------------------------\nQuickCheckInActivity.intent(id, context)\n--------------------------------------------------\nNotificationActionReceiver.intent(id, context)\n--------------------------------------------------\nintent(requireContext(), tmdbOrTvdbStillUrl(imagePath, requireContext(), false), tmdbOrTvdbStillUrl(imagePath, requireContext(), true))\n--------------------------------------------------\nSimilarShowsActivity.intent(requireContext(), show.tmdbId, show.title)\n--------------------------------------------------\nSimilarShowsActivity.intent(requireContext(), it, show.title)\n--------------------------------------------------\nintent(requireContext(), ImageTools.tmdbOrTvdbPosterUrl(posterSmall, requireContext()), ImageTools.tmdbOrTvdbPosterUrl(show.poster, requireContext(), originalSize = true))\n--------------------------------------------------\nTraktShowsActivity.intent(requireContext(), link)\n--------------------------------------------------\nSimilarShowsActivity.intent(this, it.tmdbId, it.title)", "import android.content.Intent\nimport android.content.Context\nfun intent(episodeId: Long, context: Context): Intent {\r\n            return Intent(context, NotificationActionReceiver::class.java)\r\n                .putExtra(EXTRA_LONG_EPISODE_ID, episodeId)\r\n        }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "Feeder/174" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    EntityLog.log(this, \"Activity create \" + this.getClass().getName() + \" version=\" + BuildConfig.VERSION_NAME + BuildConfig.REVISION + \" process=\" + android.os.Process.myPid());\r\n    Intent intent = getIntent();\r\n    if (intent != null)\r\n        EntityLog.log(this, intent + \" extras=\" + TextUtils.join(\", \", Log.getExtras(intent.getExtras())));\r\n    getSupportFragmentManager().registerFragmentLifecycleCallbacks(lifecycleCallbacks, true);\r\n    this.contacts = hasPermission(Manifest.permission.READ_CONTACTS);\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n    boolean secure = prefs.getBoolean(\"secure\", false);\r\n    if (secure)\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n    if (!this.getClass().equals(ActivityMain.class)) {\r\n        themeId = FragmentDialogTheme.getTheme(this);\r\n        setTheme(themeId);\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            boolean dark = Helper.isDarkTheme(this);\r\n            Window window = getWindow();\r\n            View view = window.getDecorView();\r\n            int flags = view.getSystemUiVisibility();\r\n            if (dark)\r\n                flags &= ~View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;\r\n            view.setSystemUiVisibility(flags);\r\n        }\r\n    }\r\n    String requestKey = getRequestKey();\r\n    if (!BuildConfig.PLAY_STORE_RELEASE)\r\n        EntityLog.log(this, \"Listening key=\" + requestKey);\r\n    getSupportFragmentManager().setFragmentResultListener(requestKey, this, new FragmentResultListener() {\r\n\r\n        @Override\r\n        public void onFragmentResult(@NonNull String requestKey, @NonNull Bundle result) {\r\n            try {\r\n                result.setClassLoader(ApplicationEx.class.getClassLoader());\r\n                int requestCode = result.getInt(\"requestCode\");\r\n                int resultCode = result.getInt(\"resultCode\");\r\n                EntityLog.log(ActivityBase.this, \"Received key=\" + requestKey + \" request=\" + requestCode + \" result=\" + resultCode);\r\n                Intent data = new Intent();\r\n                data.putExtra(\"args\", result);\r\n                onActivityResult(requestCode, resultCode, data);\r\n            } catch (Throwable ex) {\r\n                Log.e(ex);\r\n            }\r\n        }\r\n    });\r\n    prefs.registerOnSharedPreferenceChangeListener(this);\r\n    int colorPrimaryDark = Helper.resolveColor(this, androidx.appcompat.R.attr.colorPrimaryDark);\r\n    try {\r\n        Drawable d = getDrawable(R.drawable.baseline_mail_24);\r\n        Bitmap bm = Bitmap.createBitmap(d.getIntrinsicWidth(), d.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(bm);\r\n        d.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());\r\n        d.setTint(Color.WHITE);\r\n        d.draw(canvas);\r\n        int colorPrimary = colorPrimaryDark;\r\n        if (colorPrimary != 0 && Color.alpha(colorPrimary) != 255) {\r\n            Log.w(\"Task color primary=\" + Integer.toHexString(colorPrimary));\r\n            colorPrimary = ColorUtils.setAlphaComponent(colorPrimary, 255);\r\n        }\r\n        ActivityManager.TaskDescription td = new ActivityManager.TaskDescription(null, bm, colorPrimary);\r\n        setTaskDescription(td);\r\n    } catch (Throwable ex) {\r\n        Log.e(ex);\r\n    }\r\n    boolean navbar_colorize = prefs.getBoolean(\"navbar_colorize\", false);\r\n    if (navbar_colorize) {\r\n        Window window = getWindow();\r\n        if (window != null)\r\n            window.setNavigationBarColor(colorPrimaryDark);\r\n    }\r\n    FragmentManager fm = getSupportFragmentManager();\r\n    Fragment bfragment = fm.findFragmentByTag(\"androidx.biometric.BiometricFragment\");\r\n    if (bfragment == null)\r\n        bfragment = fm.findFragmentByTag(\"androidx.biometric.FingerprintDialogFragment\");\r\n    if (bfragment != null) {\r\n        Log.e(\"Orphan fragment tag=\" + bfragment.getTag());\r\n        fm.beginTransaction().remove(bfragment).commitNowAllowingStateLoss();\r\n        /*\r\n                java.lang.RuntimeException: Unable to start activity ComponentInfo{eu.faircode.email/eu.faircode.email.ActivitySetup}: androidx.fragment.app.Fragment$InstantiationException: Unable to instantiate fragment androidx.biometric.FingerprintDialogFragment: could not find Fragment constructor\r\n                  at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2957)\r\n                  at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3032)\r\n                  at android.app.ActivityThread.handleRelaunchActivity(ActivityThread.java:4921)\r\n                  at android.app.ActivityThread.-wrap19(Unknown Source:0)\r\n                  at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1702)\r\n                  at android.os.Handler.dispatchMessage(Handler.java:105)\r\n                  at android.os.Looper.loop(Looper.java:164)\r\n                  at android.app.ActivityThread.main(ActivityThread.java:6944)\r\n                  at java.lang.reflect.Method.invoke(Native Method)\r\n                  at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)\r\n                  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)\r\n                Caused by: androidx.fragment.app.Fragment$InstantiationException: Unable to instantiate fragment androidx.biometric.FingerprintDialogFragment: could not find Fragment constructor\r\n                  at androidx.fragment.app.Fragment.instantiate(SourceFile:8)\r\n                  at androidx.fragment.app.FragmentContainer.instantiate(SourceFile:1)\r\n                  at androidx.fragment.app.FragmentManager$3.instantiate(SourceFile:1)\r\n                  at androidx.fragment.app.FragmentStateManager.<init>(SourceFile:12)\r\n                  at androidx.fragment.app.FragmentManager.restoreSaveState(SourceFile:11)\r\n                  at androidx.fragment.app.FragmentController.restoreSaveState(SourceFile:2)\r\n                  at androidx.fragment.app.FragmentActivity$2.onContextAvailable(SourceFile:5)\r\n                  at androidx.activity.contextaware.ContextAwareHelper.dispatchOnContextAvailable(SourceFile:3)\r\n                  at androidx.activity.ComponentActivity.onCreate(SourceFile:2)\r\n                  at androidx.fragment.app.FragmentActivity.onCreate(SourceFile:1)\r\n                  at eu.faircode.email.ActivityBase.onCreate(SourceFile:37)\r\n                  at eu.faircode.email.ActivitySetup.onCreate(SourceFile:1)\r\n                  at android.app.Activity.performCreate(Activity.java:7183)\r\n                  at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1220)\r\n                  at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2910)\r\n                  ... 10 more\r\n                Caused by: java.lang.NoSuchMethodException: <init> []\r\n                  at java.lang.Class.getConstructor0(Class.java:2320)\r\n                  at java.lang.Class.getConstructor(Class.java:1725)\r\n                  at androidx.fragment.app.Fragment.instantiate(SourceFile:4)\r\n             */\r\n    }\r\n    Fragment ffragment = fm.findFragmentByTag(\"androidx.biometric.FingerprintDialogFragment\");\r\n    if (ffragment != null) {\r\n        Log.e(\"Orphan FingerprintDialogFragment\");\r\n        fm.beginTransaction().remove(ffragment).commitNowAllowingStateLoss();\r\n    }\r\n    checkAuthentication(true);\r\n    super.onCreate(savedInstanceState);\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onResume() {\r\n    Log.d(\"Resume \" + this.getClass().getName());\r\n    super.onResume();\r\n    visible = true;\r\n    if (!(this instanceof ActivityMain)) {\r\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n        prefs.edit().putString(\"last_activity\", this.getClass().getName()).apply();\r\n    }\r\n    boolean contacts = hasPermission(Manifest.permission.READ_CONTACTS);\r\n    if (this.contacts != contacts && !this.getClass().equals(ActivitySetup.class) && !this.getClass().equals(ActivityCompose.class)) {\r\n        Log.i(\"Contacts permission=\" + contacts);\r\n        finish();\r\n        startActivity(getIntent());\r\n    } else\r\n        checkAuthentication(true);\r\n}\n--------------------------------------------------\n", "import android.Manifest;\r\nimport android.content.Context;\r\nimport android.content.pm.PackageManager;\r\nimport androidx.core.content.ContextCompat\nimport android.content.pm.PackageManager\nimport android.content.Context\nimport android.Manifest\n// Features\r\nstatic boolean hasPermission(Context context, String name) {\r\n    if (Manifest.permission.WRITE_CALENDAR.equals(name))\r\n        if (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED)\r\n            return false;\r\n    return (ContextCompat.checkSelfPermission(context, name) == PackageManager.PERMISSION_GRANTED);\r\n}" ],
  "Feeder/176" : [ "getOpenListIntent(context, filter, id)", "import org.tasks.intents.TaskIntents\nimport org.tasks.R\nimport com.todoroo.astrid.api.Filter\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\nprivate fun getOpenListIntent(context: Context, filter: Filter, widgetId: Int): PendingIntent {\r\n        val intent = TaskIntents.getTaskListIntent(context, filter)\r\n        intent.action = \"open_list\"\r\n        return PendingIntent.getActivity(\r\n            context,\r\n            widgetId,\r\n            intent,\r\n            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT\r\n        )\r\n    }\nImport(names=[android, app, PendingIntent], wildcard=false, alias=null)\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[com, todoroo, astrid, api, Filter], wildcard=false, alias=null)\nImport(names=[org, tasks, intents, TaskIntents], wildcard=false, alias=null)" ],
  "Feeder/178" : [ "val pendingIntent = getNotificationIntent(event)", "import com.simplemobiletools.calendar.pro.receivers.NotificationReceiver\nimport com.simplemobiletools.calendar.pro.R\nimport android.content.Intent\nimport android.content.Context\nfun Context.getNotificationIntent(event: Event): PendingIntent {\r\n    val intent = Intent(this, NotificationReceiver::class.java)\r\n    intent.putExtra(EVENT_ID, event.id)\r\n    intent.putExtra(EVENT_OCCURRENCE_TS, event.startTS)\r\n    return PendingIntent.getBroadcast(this, event.id!!.toInt(), intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)\r\n}\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[com, simplemobiletools, calendar, pro, receivers, NotificationReceiver], wildcard=false, alias=null)" ],
  "Feeder/179" : [ "pendingIntents.dismissNotification(habit)", "import org.isoron.uhabits.receivers.WidgetReceiver\nimport org.isoron.uhabits.receivers.ReminderReceiver\nimport org.isoron.uhabits.core.models.Habit\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.PendingIntent.getBroadcast\nimport android.app.PendingIntent.FLAG_UPDATE_CURRENT\nimport android.app.PendingIntent.FLAG_IMMUTABLE\nimport android.app.PendingIntent\nfun dismissNotification(habit: Habit): PendingIntent =\r\n        getBroadcast(\r\n            context,\r\n            0,\r\n            Intent(context, ReminderReceiver::class.java).apply {\r\n                action = WidgetReceiver.ACTION_DISMISS_REMINDER\r\n                data = Uri.parse(habit.uriString)\r\n            },\r\n            FLAG_IMMUTABLE or FLAG_UPDATE_CURRENT\r\n        )\nImport(names=[android, app, PendingIntent], wildcard=false, alias=null)\nImport(names=[android, app, PendingIntent, FLAG_IMMUTABLE], wildcard=false, alias=null)\nImport(names=[android, app, PendingIntent, FLAG_UPDATE_CURRENT], wildcard=false, alias=null)\nImport(names=[android, app, PendingIntent, getBroadcast], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[android, net, Uri], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, core, models, Habit], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, receivers, ReminderReceiver], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, receivers, WidgetReceiver], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/471" : [ "", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\npublic static String extractCategory(@NonNull String mediaID) {\r\n    int pos = mediaID.indexOf(LEAF_SEPARATOR);\r\n    if (pos >= 0) {\r\n        return mediaID.substring(0, pos);\r\n    }\r\n    return mediaID;\r\n}" ],
  "VinylMusicPlayer/470" : [ "", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\npublic static String extractCategory(@NonNull String mediaID) {\r\n    int pos = mediaID.indexOf(LEAF_SEPARATOR);\r\n    if (pos >= 0) {\r\n        return mediaID.substring(0, pos);\r\n    }\r\n    return mediaID;\r\n}" ],
  "VinylMusicPlayer/477" : [ "/**\r\n * Sets the unique ID of the thread (from {@link java.lang.Thread})\r\n */\r\npublic void setId(@NonNull String id) {\r\n    if (id != null) {\r\n        impl.setId(id);\r\n    } else {\r\n        logNull(\"id\");\r\n    }\r\n}\n--------------------------------------------------\nprivate void bindButtons(TupleMessageEx message) {\r\n    String keywords = prefs.getString(\"global_keywords\", null);\r\n    if (keywords == null)\r\n        return;\r\n    if (buttons.getReferencedIds().length > 0)\r\n        return;\r\n    int dp3 = Helper.dp2pixels(context, 3);\r\n    Drawable on = ContextCompat.getDrawable(context, R.drawable.twotone_check_12);\r\n    Drawable off = ContextCompat.getDrawable(context, R.drawable.twotone_close_12);\r\n    on.setBounds(0, 0, on.getIntrinsicWidth(), on.getIntrinsicHeight());\r\n    off.setBounds(0, 0, off.getIntrinsicWidth(), off.getIntrinsicHeight());\r\n    List<String> selected = Arrays.asList(message.keywords);\r\n    for (String keyword : keywords.split(\" \")) {\r\n        boolean set = selected.contains(keyword);\r\n        String title = prefs.getString(\"kwtitle.\" + keyword, keyword);\r\n        String c = \"kwcolor.\" + keyword;\r\n        Integer color = (prefs.contains(c) ? prefs.getInt(c, Color.GRAY) : null);\r\n        Button button = new Button(context, null, android.R.attr.buttonStyleSmall);\r\n        button.setId(View.generateViewId());\r\n        button.setText(title);\r\n        button.setCompoundDrawablePadding(dp3);\r\n        button.setCompoundDrawablesRelative(null, null, set ? off : on, null);\r\n        if (color != null)\r\n            button.setBackgroundTintList(ColorStateList.valueOf(color));\r\n        button.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View view) {\r\n                Bundle args = new Bundle();\r\n                args.putLong(\"id\", message.id);\r\n                args.putString(\"keyword\", keyword);\r\n                args.putBoolean(\"set\", !set);\r\n                new SimpleTask<Void>() {\r\n\r\n                    @Override\r\n                    protected Void onExecute(Context context, Bundle args) throws Throwable {\r\n                        long id = args.getLong(\"id\");\r\n                        String keyword = args.getString(\"keyword\");\r\n                        boolean set = args.getBoolean(\"set\");\r\n                        DB db = DB.getInstance(context);\r\n                        try {\r\n                            db.beginTransaction();\r\n                            EntityMessage message = db.message().getMessage(id);\r\n                            if (message == null)\r\n                                return null;\r\n                            EntityOperation.queue(context, message, EntityOperation.KEYWORD, keyword, set);\r\n                            db.setTransactionSuccessful();\r\n                        } finally {\r\n                            db.endTransaction();\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                    @Override\r\n                    protected void onException(Bundle args, Throwable ex) {\r\n                    }\r\n                }.execute(context, owner, args, \"toggle:keyword\");\r\n            }\r\n        });\r\n        ((ConstraintLayout) buttons.getParent()).addView(button);\r\n        buttons.addView(button);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull\n@NonNull\r\npublic SimpleTask<T> setId(String id) {\r\n    this.id = id;\r\n    return this;\r\n}" ],
  "VinylMusicPlayer/476" : [ "/**\r\n * Sets the unique ID of the thread (from {@link java.lang.Thread})\r\n */\r\npublic void setId(@NonNull String id) {\r\n    if (id != null) {\r\n        impl.setId(id);\r\n    } else {\r\n        logNull(\"id\");\r\n    }\r\n}\n--------------------------------------------------\nprivate void bindButtons(TupleMessageEx message) {\r\n    String keywords = prefs.getString(\"global_keywords\", null);\r\n    if (keywords == null)\r\n        return;\r\n    if (buttons.getReferencedIds().length > 0)\r\n        return;\r\n    int dp3 = Helper.dp2pixels(context, 3);\r\n    Drawable on = ContextCompat.getDrawable(context, R.drawable.twotone_check_12);\r\n    Drawable off = ContextCompat.getDrawable(context, R.drawable.twotone_close_12);\r\n    on.setBounds(0, 0, on.getIntrinsicWidth(), on.getIntrinsicHeight());\r\n    off.setBounds(0, 0, off.getIntrinsicWidth(), off.getIntrinsicHeight());\r\n    List<String> selected = Arrays.asList(message.keywords);\r\n    for (String keyword : keywords.split(\" \")) {\r\n        boolean set = selected.contains(keyword);\r\n        String title = prefs.getString(\"kwtitle.\" + keyword, keyword);\r\n        String c = \"kwcolor.\" + keyword;\r\n        Integer color = (prefs.contains(c) ? prefs.getInt(c, Color.GRAY) : null);\r\n        Button button = new Button(context, null, android.R.attr.buttonStyleSmall);\r\n        button.setId(View.generateViewId());\r\n        button.setText(title);\r\n        button.setCompoundDrawablePadding(dp3);\r\n        button.setCompoundDrawablesRelative(null, null, set ? off : on, null);\r\n        if (color != null)\r\n            button.setBackgroundTintList(ColorStateList.valueOf(color));\r\n        button.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View view) {\r\n                Bundle args = new Bundle();\r\n                args.putLong(\"id\", message.id);\r\n                args.putString(\"keyword\", keyword);\r\n                args.putBoolean(\"set\", !set);\r\n                new SimpleTask<Void>() {\r\n\r\n                    @Override\r\n                    protected Void onExecute(Context context, Bundle args) throws Throwable {\r\n                        long id = args.getLong(\"id\");\r\n                        String keyword = args.getString(\"keyword\");\r\n                        boolean set = args.getBoolean(\"set\");\r\n                        DB db = DB.getInstance(context);\r\n                        try {\r\n                            db.beginTransaction();\r\n                            EntityMessage message = db.message().getMessage(id);\r\n                            if (message == null)\r\n                                return null;\r\n                            EntityOperation.queue(context, message, EntityOperation.KEYWORD, keyword, set);\r\n                            db.setTransactionSuccessful();\r\n                        } finally {\r\n                            db.endTransaction();\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                    @Override\r\n                    protected void onException(Bundle args, Throwable ex) {\r\n                    }\r\n                }.execute(context, owner, args, \"toggle:keyword\");\r\n            }\r\n        });\r\n        ((ConstraintLayout) buttons.getParent()).addView(button);\r\n        buttons.addView(button);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull\n@NonNull\r\npublic SimpleTask<T> setId(String id) {\r\n    this.id = id;\r\n    return this;\r\n}" ],
  "VinylMusicPlayer/478" : [ "/**\r\n * Sets the unique ID of the thread (from {@link java.lang.Thread})\r\n */\r\npublic void setId(@NonNull String id) {\r\n    if (id != null) {\r\n        impl.setId(id);\r\n    } else {\r\n        logNull(\"id\");\r\n    }\r\n}\n--------------------------------------------------\nprivate void bindButtons(TupleMessageEx message) {\r\n    String keywords = prefs.getString(\"global_keywords\", null);\r\n    if (keywords == null)\r\n        return;\r\n    if (buttons.getReferencedIds().length > 0)\r\n        return;\r\n    int dp3 = Helper.dp2pixels(context, 3);\r\n    Drawable on = ContextCompat.getDrawable(context, R.drawable.twotone_check_12);\r\n    Drawable off = ContextCompat.getDrawable(context, R.drawable.twotone_close_12);\r\n    on.setBounds(0, 0, on.getIntrinsicWidth(), on.getIntrinsicHeight());\r\n    off.setBounds(0, 0, off.getIntrinsicWidth(), off.getIntrinsicHeight());\r\n    List<String> selected = Arrays.asList(message.keywords);\r\n    for (String keyword : keywords.split(\" \")) {\r\n        boolean set = selected.contains(keyword);\r\n        String title = prefs.getString(\"kwtitle.\" + keyword, keyword);\r\n        String c = \"kwcolor.\" + keyword;\r\n        Integer color = (prefs.contains(c) ? prefs.getInt(c, Color.GRAY) : null);\r\n        Button button = new Button(context, null, android.R.attr.buttonStyleSmall);\r\n        button.setId(View.generateViewId());\r\n        button.setText(title);\r\n        button.setCompoundDrawablePadding(dp3);\r\n        button.setCompoundDrawablesRelative(null, null, set ? off : on, null);\r\n        if (color != null)\r\n            button.setBackgroundTintList(ColorStateList.valueOf(color));\r\n        button.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View view) {\r\n                Bundle args = new Bundle();\r\n                args.putLong(\"id\", message.id);\r\n                args.putString(\"keyword\", keyword);\r\n                args.putBoolean(\"set\", !set);\r\n                new SimpleTask<Void>() {\r\n\r\n                    @Override\r\n                    protected Void onExecute(Context context, Bundle args) throws Throwable {\r\n                        long id = args.getLong(\"id\");\r\n                        String keyword = args.getString(\"keyword\");\r\n                        boolean set = args.getBoolean(\"set\");\r\n                        DB db = DB.getInstance(context);\r\n                        try {\r\n                            db.beginTransaction();\r\n                            EntityMessage message = db.message().getMessage(id);\r\n                            if (message == null)\r\n                                return null;\r\n                            EntityOperation.queue(context, message, EntityOperation.KEYWORD, keyword, set);\r\n                            db.setTransactionSuccessful();\r\n                        } finally {\r\n                            db.endTransaction();\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                    @Override\r\n                    protected void onException(Bundle args, Throwable ex) {\r\n                    }\r\n                }.execute(context, owner, args, \"toggle:keyword\");\r\n            }\r\n        });\r\n        ((ConstraintLayout) buttons.getParent()).addView(button);\r\n        buttons.addView(button);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull\n@NonNull\r\npublic SimpleTask<T> setId(String id) {\r\n    this.id = id;\r\n    return this;\r\n}" ],
  "VinylMusicPlayer/473" : [ "/**\r\n * Sets the unique ID of the thread (from {@link java.lang.Thread})\r\n */\r\npublic void setId(@NonNull String id) {\r\n    if (id != null) {\r\n        impl.setId(id);\r\n    } else {\r\n        logNull(\"id\");\r\n    }\r\n}\n--------------------------------------------------\nprivate void bindButtons(TupleMessageEx message) {\r\n    String keywords = prefs.getString(\"global_keywords\", null);\r\n    if (keywords == null)\r\n        return;\r\n    if (buttons.getReferencedIds().length > 0)\r\n        return;\r\n    int dp3 = Helper.dp2pixels(context, 3);\r\n    Drawable on = ContextCompat.getDrawable(context, R.drawable.twotone_check_12);\r\n    Drawable off = ContextCompat.getDrawable(context, R.drawable.twotone_close_12);\r\n    on.setBounds(0, 0, on.getIntrinsicWidth(), on.getIntrinsicHeight());\r\n    off.setBounds(0, 0, off.getIntrinsicWidth(), off.getIntrinsicHeight());\r\n    List<String> selected = Arrays.asList(message.keywords);\r\n    for (String keyword : keywords.split(\" \")) {\r\n        boolean set = selected.contains(keyword);\r\n        String title = prefs.getString(\"kwtitle.\" + keyword, keyword);\r\n        String c = \"kwcolor.\" + keyword;\r\n        Integer color = (prefs.contains(c) ? prefs.getInt(c, Color.GRAY) : null);\r\n        Button button = new Button(context, null, android.R.attr.buttonStyleSmall);\r\n        button.setId(View.generateViewId());\r\n        button.setText(title);\r\n        button.setCompoundDrawablePadding(dp3);\r\n        button.setCompoundDrawablesRelative(null, null, set ? off : on, null);\r\n        if (color != null)\r\n            button.setBackgroundTintList(ColorStateList.valueOf(color));\r\n        button.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View view) {\r\n                Bundle args = new Bundle();\r\n                args.putLong(\"id\", message.id);\r\n                args.putString(\"keyword\", keyword);\r\n                args.putBoolean(\"set\", !set);\r\n                new SimpleTask<Void>() {\r\n\r\n                    @Override\r\n                    protected Void onExecute(Context context, Bundle args) throws Throwable {\r\n                        long id = args.getLong(\"id\");\r\n                        String keyword = args.getString(\"keyword\");\r\n                        boolean set = args.getBoolean(\"set\");\r\n                        DB db = DB.getInstance(context);\r\n                        try {\r\n                            db.beginTransaction();\r\n                            EntityMessage message = db.message().getMessage(id);\r\n                            if (message == null)\r\n                                return null;\r\n                            EntityOperation.queue(context, message, EntityOperation.KEYWORD, keyword, set);\r\n                            db.setTransactionSuccessful();\r\n                        } finally {\r\n                            db.endTransaction();\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                    @Override\r\n                    protected void onException(Bundle args, Throwable ex) {\r\n                    }\r\n                }.execute(context, owner, args, \"toggle:keyword\");\r\n            }\r\n        });\r\n        ((ConstraintLayout) buttons.getParent()).addView(button);\r\n        buttons.addView(button);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull\n@NonNull\r\npublic SimpleTask<T> setId(String id) {\r\n    this.id = id;\r\n    return this;\r\n}" ],
  "VinylMusicPlayer/472" : [ "", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\npublic static String extractMusicID(@NonNull String mediaID) {\r\n    int pos = mediaID.indexOf(LEAF_SEPARATOR);\r\n    if (pos >= 0) {\r\n        return mediaID.substring(pos + LEAF_SEPARATOR.length());\r\n    }\r\n    return null;\r\n}" ],
  "VinylMusicPlayer/475" : [ "/**\r\n * Sets the unique ID of the thread (from {@link java.lang.Thread})\r\n */\r\npublic void setId(@NonNull String id) {\r\n    if (id != null) {\r\n        impl.setId(id);\r\n    } else {\r\n        logNull(\"id\");\r\n    }\r\n}\n--------------------------------------------------\nprivate void bindButtons(TupleMessageEx message) {\r\n    String keywords = prefs.getString(\"global_keywords\", null);\r\n    if (keywords == null)\r\n        return;\r\n    if (buttons.getReferencedIds().length > 0)\r\n        return;\r\n    int dp3 = Helper.dp2pixels(context, 3);\r\n    Drawable on = ContextCompat.getDrawable(context, R.drawable.twotone_check_12);\r\n    Drawable off = ContextCompat.getDrawable(context, R.drawable.twotone_close_12);\r\n    on.setBounds(0, 0, on.getIntrinsicWidth(), on.getIntrinsicHeight());\r\n    off.setBounds(0, 0, off.getIntrinsicWidth(), off.getIntrinsicHeight());\r\n    List<String> selected = Arrays.asList(message.keywords);\r\n    for (String keyword : keywords.split(\" \")) {\r\n        boolean set = selected.contains(keyword);\r\n        String title = prefs.getString(\"kwtitle.\" + keyword, keyword);\r\n        String c = \"kwcolor.\" + keyword;\r\n        Integer color = (prefs.contains(c) ? prefs.getInt(c, Color.GRAY) : null);\r\n        Button button = new Button(context, null, android.R.attr.buttonStyleSmall);\r\n        button.setId(View.generateViewId());\r\n        button.setText(title);\r\n        button.setCompoundDrawablePadding(dp3);\r\n        button.setCompoundDrawablesRelative(null, null, set ? off : on, null);\r\n        if (color != null)\r\n            button.setBackgroundTintList(ColorStateList.valueOf(color));\r\n        button.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View view) {\r\n                Bundle args = new Bundle();\r\n                args.putLong(\"id\", message.id);\r\n                args.putString(\"keyword\", keyword);\r\n                args.putBoolean(\"set\", !set);\r\n                new SimpleTask<Void>() {\r\n\r\n                    @Override\r\n                    protected Void onExecute(Context context, Bundle args) throws Throwable {\r\n                        long id = args.getLong(\"id\");\r\n                        String keyword = args.getString(\"keyword\");\r\n                        boolean set = args.getBoolean(\"set\");\r\n                        DB db = DB.getInstance(context);\r\n                        try {\r\n                            db.beginTransaction();\r\n                            EntityMessage message = db.message().getMessage(id);\r\n                            if (message == null)\r\n                                return null;\r\n                            EntityOperation.queue(context, message, EntityOperation.KEYWORD, keyword, set);\r\n                            db.setTransactionSuccessful();\r\n                        } finally {\r\n                            db.endTransaction();\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                    @Override\r\n                    protected void onException(Bundle args, Throwable ex) {\r\n                    }\r\n                }.execute(context, owner, args, \"toggle:keyword\");\r\n            }\r\n        });\r\n        ((ConstraintLayout) buttons.getParent()).addView(button);\r\n        buttons.addView(button);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull\n@NonNull\r\npublic SimpleTask<T> setId(String id) {\r\n    this.id = id;\r\n    return this;\r\n}" ],
  "VinylMusicPlayer/474" : [ "/**\r\n * Sets the unique ID of the thread (from {@link java.lang.Thread})\r\n */\r\npublic void setId(@NonNull String id) {\r\n    if (id != null) {\r\n        impl.setId(id);\r\n    } else {\r\n        logNull(\"id\");\r\n    }\r\n}\n--------------------------------------------------\nprivate void bindButtons(TupleMessageEx message) {\r\n    String keywords = prefs.getString(\"global_keywords\", null);\r\n    if (keywords == null)\r\n        return;\r\n    if (buttons.getReferencedIds().length > 0)\r\n        return;\r\n    int dp3 = Helper.dp2pixels(context, 3);\r\n    Drawable on = ContextCompat.getDrawable(context, R.drawable.twotone_check_12);\r\n    Drawable off = ContextCompat.getDrawable(context, R.drawable.twotone_close_12);\r\n    on.setBounds(0, 0, on.getIntrinsicWidth(), on.getIntrinsicHeight());\r\n    off.setBounds(0, 0, off.getIntrinsicWidth(), off.getIntrinsicHeight());\r\n    List<String> selected = Arrays.asList(message.keywords);\r\n    for (String keyword : keywords.split(\" \")) {\r\n        boolean set = selected.contains(keyword);\r\n        String title = prefs.getString(\"kwtitle.\" + keyword, keyword);\r\n        String c = \"kwcolor.\" + keyword;\r\n        Integer color = (prefs.contains(c) ? prefs.getInt(c, Color.GRAY) : null);\r\n        Button button = new Button(context, null, android.R.attr.buttonStyleSmall);\r\n        button.setId(View.generateViewId());\r\n        button.setText(title);\r\n        button.setCompoundDrawablePadding(dp3);\r\n        button.setCompoundDrawablesRelative(null, null, set ? off : on, null);\r\n        if (color != null)\r\n            button.setBackgroundTintList(ColorStateList.valueOf(color));\r\n        button.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View view) {\r\n                Bundle args = new Bundle();\r\n                args.putLong(\"id\", message.id);\r\n                args.putString(\"keyword\", keyword);\r\n                args.putBoolean(\"set\", !set);\r\n                new SimpleTask<Void>() {\r\n\r\n                    @Override\r\n                    protected Void onExecute(Context context, Bundle args) throws Throwable {\r\n                        long id = args.getLong(\"id\");\r\n                        String keyword = args.getString(\"keyword\");\r\n                        boolean set = args.getBoolean(\"set\");\r\n                        DB db = DB.getInstance(context);\r\n                        try {\r\n                            db.beginTransaction();\r\n                            EntityMessage message = db.message().getMessage(id);\r\n                            if (message == null)\r\n                                return null;\r\n                            EntityOperation.queue(context, message, EntityOperation.KEYWORD, keyword, set);\r\n                            db.setTransactionSuccessful();\r\n                        } finally {\r\n                            db.endTransaction();\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                    @Override\r\n                    protected void onException(Bundle args, Throwable ex) {\r\n                    }\r\n                }.execute(context, owner, args, \"toggle:keyword\");\r\n            }\r\n        });\r\n        ((ConstraintLayout) buttons.getParent()).addView(button);\r\n        buttons.addView(button);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull\n@NonNull\r\npublic SimpleTask<T> setId(String id) {\r\n    this.id = id;\r\n    return this;\r\n}" ],
  "Trail-Sense/900" : [ "R.id.new_note -> displayNewNoteDialog()\n--------------------------------------------------\ndisplayNewNoteDialog(text)\n--------------------------------------------------\ndisplayNewNoteDialog(note.value, title = it.title, it.path, setChecklistAsDefault = true)\n--------------------------------------------------\ndisplayNewNoteDialog(it.value, title = it.title, it.path)\n--------------------------------------------------\ndisplayNewNoteDialog(note.value, title = noteTitle, \"\")\n--------------------------------------------------\ndisplayNewNoteDialog(note.value, title = noteTitle, path)", "import com.simplemobiletools.notes.pro.models.Note\nprivate fun displayNewNoteDialog(value: String = \"\", title: String? = null, path: String = \"\", setChecklistAsDefault: Boolean = false) {\r\n        NewNoteDialog(this, title, setChecklistAsDefault) {\r\n            it.value = value\r\n            it.path = path\r\n            addNewNote(it)\r\n        }\r\n    }" ],
  "Trail-Sense/901" : [ "", "import org.videolan.vlc.R\nimport org.videolan.libvlc.interfaces.IVLCVout\noverride fun onSurfacesCreated(vlcVout: IVLCVout) {\r\n        service.setVideoAspectRatio(null)\r\n        service.setVideoScale(0f)\r\n        service.setVideoTrackEnabled(true)\r\n        if (service.hasMedia()) {\r\n            service.flush()\r\n            playPauseButton.setImageResource(if (service.isPlaying) R.drawable.ic_popup_pause else R.drawable.ic_popup_play)\r\n        } else\r\n            service.playIndex(service.currentMediaPosition)\r\n        showNotification()\r\n    }\nImport(names=[org, videolan, libvlc, interfaces, IVLCVout], wildcard=false, alias=null)\nImport(names=[org, videolan, vlc, R], wildcard=false, alias=null)" ],
  "Trail-Sense/902" : [ "        discardOldestFileIfNeeded()\n        val filename = File(storageDir, getFilename(streamable)).absolutePath\r\n        var stream: JsonStream? = null", "import java.io.File\nimport com.bugsnag.android.SessionFilenameInfo.Companion.defaultFilename\noverride fun getFilename(obj: Any?): String {\r\n        val sessionInfo = defaultFilename(obj, config)\r\n        return sessionInfo.encode()\r\n    }\nImport(names=[com, bugsnag, android, SessionFilenameInfo, Companion, defaultFilename], wildcard=false, alias=null)" ],
  "Trail-Sense/903" : [ "buildInfoString(resources.getString(R.string.up_next), MusicUtil.getReadableDurationString(duration))\n--------------------------------------------------\nMusicUtil.buildInfoString(songCountString, \"\")", "fun buildInfoString(string1: String?, string2: String?): String {\n        if (string1.isNullOrEmpty()) {\n            return if (string2.isNullOrEmpty()) \"\" else string2\n        }\n        return if (string2.isNullOrEmpty()) if (string1.isNullOrEmpty()) \"\" else string1 else \"$string1  •  $string2\"\n    }" ],
  "VinylMusicPlayer/469" : [ "private HashMap<Integer, Money> runTask() {\r\n    // load data\r\n    Cursor c = loadData();\r\n    if (c == null)\r\n        return null;\r\n    int records = c.getCount();\r\n    if (balances != null && records == balances.size())\r\n        return null;\r\n    if (c.getCount() <= 0)\r\n        return null;\r\n    Money startingBalance = null;\r\n    AccountService accountService = new AccountService(this.context);\r\n    AccountTransactionDisplay tx = new AccountTransactionDisplay();\r\n    int originalPosition = c.getPosition();\r\n    balances = new HashMap<>();\r\n    String transType;\r\n    Money amount = MoneyFactory.fromBigDecimal(BigDecimal.ZERO);\r\n    Money runningBalance = MoneyFactory.fromBigDecimal(BigDecimal.ZERO);\r\n    // populate balance amounts\r\n    // Move from the earliest record towards the newer ones.\r\n    int i = c.getCount() - 1;\r\n    while (c.moveToPosition(i)) {\r\n        // load the initial balance based on the date of the first transaction\r\n        if (startingBalance == null) {\r\n            // Get starting balance on the given day.\r\n            startingBalance = accountService.loadInitialBalance(this.accountId);\r\n            String date = new MmxDate(this.startingDate).minusDays(1).toIsoDateString();\r\n            Money balanceOnDate = accountService.calculateBalanceOn(this.accountId, date);\r\n            startingBalance = startingBalance.add(balanceOnDate);\r\n            runningBalance = startingBalance;\r\n        }\r\n        // adjust the balance for each transaction.\r\n        tx.loadFromCursor(c);\r\n        // Exclude Void transactions from calculation.\r\n        TransactionStatuses status = tx.getStatus();\r\n        if (!status.equals(TransactionStatuses.VOID)) {\r\n            transType = tx.getTransactionTypeName();\r\n            switch(TransactionTypes.valueOf(transType)) {\r\n                case Withdrawal:\r\n                    amount = tx.getAmount();\r\n                    break;\r\n                case Deposit:\r\n                    amount = tx.getAmount();\r\n                    break;\r\n                case Transfer:\r\n                    int accountId = tx.getAccountId();\r\n                    if (accountId == this.accountId) {\r\n                        amount = tx.getAmount();\r\n                    } else {\r\n                        amount = tx.getToAmount();\r\n                    }\r\n                    break;\r\n            }\r\n            runningBalance = runningBalance.add(amount);\r\n        }\r\n        this.balances.put(tx.getId(), runningBalance);\r\n        i--;\r\n    }\r\n    // set back to the original position.\r\n    c.moveToPosition(originalPosition);\r\n    return this.balances;\r\n}\n--------------------------------------------------\n@Override\r\npublic void bindView(View view, Context context, Cursor cursor) {\r\n    // take a holder\r\n    AllDataViewHolder holder = (AllDataViewHolder) view.getTag();\r\n    String transactionType = cursor.getString(cursor.getColumnIndex(TRANSACTIONTYPE));\r\n    boolean isTransfer = TransactionTypes.valueOf(transactionType).equals(TransactionTypes.Transfer);\r\n    // header index\r\n    int accountId = cursor.getInt(cursor.getColumnIndex(TOACCOUNTID));\r\n    if (!mHeadersAccountIndex.containsKey(accountId)) {\r\n        mHeadersAccountIndex.put(accountId, cursor.getPosition());\r\n    }\r\n    // Status\r\n    String status = cursor.getString(cursor.getColumnIndex(STATUS));\r\n    holder.txtStatus.setText(TransactionStatus.getStatusAsString(mContext, status));\r\n    // color status\r\n    int colorBackground = TransactionStatus.getBackgroundColorFromStatus(mContext, status);\r\n    holder.linDate.setBackgroundColor(colorBackground);\r\n    holder.txtStatus.setTextColor(Color.GRAY);\r\n    // Date\r\n    String dateString = cursor.getString(cursor.getColumnIndex(DATE));\r\n    if (!TextUtils.isEmpty(dateString)) {\r\n        Locale locale = MmexApplication.getApp().getAppLocale();\r\n        MmxDateTimeUtils dateUtils = new MmxDateTimeUtils(locale);\r\n        Date dateTime = new MmxDate(dateString).toDate();\r\n        String month = dateUtils.format(dateTime, \"MMM\");\r\n        holder.txtMonth.setText(month);\r\n        String year = dateUtils.format(dateTime, \"yyyy\");\r\n        holder.txtYear.setText(year);\r\n        String day = dateUtils.format(dateTime, \"dd\");\r\n        holder.txtDay.setText(day);\r\n    }\r\n    // Amount\r\n    double amount;\r\n    if (useDestinationValues(isTransfer, cursor)) {\r\n        amount = cursor.getDouble(cursor.getColumnIndex(TOAMOUNT));\r\n        setCurrencyId(cursor.getInt(cursor.getColumnIndex(TOCURRENCYID)));\r\n    } else {\r\n        amount = cursor.getDouble(cursor.getColumnIndex(AMOUNT));\r\n        setCurrencyId(cursor.getInt(cursor.getColumnIndex(CURRENCYID)));\r\n    }\r\n    CurrencyService currencyService = new CurrencyService(mContext);\r\n    holder.txtAmount.setText(currencyService.getCurrencyFormatted(getCurrencyId(), MoneyFactory.fromDouble(amount)));\r\n    // text color amount\r\n    int amountTextColor;\r\n    if (isTransfer) {\r\n        amountTextColor = ContextCompat.getColor(mContext, R.color.material_grey_700);\r\n    } else if (TransactionTypes.valueOf(transactionType).equals(TransactionTypes.Deposit)) {\r\n        amountTextColor = ContextCompat.getColor(mContext, R.color.material_green_700);\r\n    } else {\r\n        amountTextColor = ContextCompat.getColor(mContext, R.color.material_red_700);\r\n    }\r\n    holder.txtAmount.setTextColor(amountTextColor);\r\n    // Group header - account name.\r\n    if (isShowAccountName()) {\r\n        if (mHeadersAccountIndex.containsValue(cursor.getPosition())) {\r\n            holder.txtAccountName.setText(cursor.getString(cursor.getColumnIndex(TOACCOUNTNAME)));\r\n            holder.txtAccountName.setVisibility(View.VISIBLE);\r\n        } else {\r\n            holder.txtAccountName.setVisibility(View.GONE);\r\n        }\r\n    } else {\r\n        holder.txtAccountName.setVisibility(View.GONE);\r\n    }\r\n    // Payee\r\n    String payee = getPayeeName(cursor, isTransfer);\r\n    holder.txtPayee.setText(payee);\r\n    // compose category description\r\n    String categorySub;\r\n    if (!isTransfer) {\r\n        categorySub = cursor.getString(cursor.getColumnIndex(CATEGORY));\r\n        // check sub category\r\n        if (!(TextUtils.isEmpty(cursor.getString(cursor.getColumnIndex(SUBCATEGORY))))) {\r\n            categorySub += \" : <i>\" + cursor.getString(cursor.getColumnIndex(SUBCATEGORY)) + \"</i>\";\r\n        }\r\n        // write category/subcategory format html\r\n        if (!TextUtils.isEmpty(categorySub)) {\r\n            // Display category/sub-category.\r\n            categorySub = Html.fromHtml(categorySub).toString();\r\n        } else {\r\n            // It is either a Transfer or a split category.\r\n            // then it is a split? todo: improve this check to make it explicit.\r\n            categorySub = mContext.getString(R.string.split_category);\r\n        }\r\n    } else {\r\n        categorySub = mContext.getString(R.string.transfer);\r\n    }\r\n    holder.txtCategorySub.setText(categorySub);\r\n    // notes\r\n    if (!TextUtils.isEmpty(cursor.getString(cursor.getColumnIndex(NOTES)))) {\r\n        holder.txtNotes.setText(Html.fromHtml(\"<small>\" + cursor.getString(cursor.getColumnIndex(NOTES)) + \"</small>\"));\r\n        holder.txtNotes.setVisibility(View.VISIBLE);\r\n    } else {\r\n        holder.txtNotes.setVisibility(View.GONE);\r\n    }\r\n    // check if item is checked\r\n    if (mCheckedPosition.get(cursor.getPosition(), false)) {\r\n        view.setBackgroundResource(R.color.material_green_100);\r\n    } else {\r\n        view.setBackgroundResource(android.R.color.transparent);\r\n    }\r\n    // Display balance account or days left.\r\n    displayBalanceAmountOrDaysLeft(holder, cursor, context);\r\n}\n--------------------------------------------------\n", "import android.database.Cursor;\r\nimport android.database.Cursor\npublic static int getPosition(String displayText, String fieldName, Cursor cursor) {\r\n    int position = -1;\r\n    cursor.moveToFirst();\r\n    while (cursor.moveToNext()) {\r\n        String text = cursor.getString(cursor.getColumnIndex(fieldName));\r\n        if (text.equals(displayText)) {\r\n            position = cursor.getPosition();\r\n            break;\r\n        }\r\n    }\r\n    return position;\r\n}" ],
  "Trail-Sense/906" : [ "noteDao.getNote(id)\n--------------------------------------------------\nnotesRepository.getNote(id)", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Note\noverride suspend fun getNote(id: Int): Note {\r\n        return withContext(ioDispatcher) {\r\n            noteDao.getNote(id)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Note], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/907" : [ "taskDao.insertTask(task)\n--------------------------------------------------\n{\r\n        return tasksRepository.insertTask(task)\r\n    }", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Task\noverride suspend fun insertTask(task: Task): Long {\r\n        return withContext(ioDispatcher) {\r\n            taskDao.insertTask(task)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Task], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Feeder/9" : [ "val validDayEvent = isDayValid(event, day.code)", "import org.joda.time.DateTime\nimport com.simplemobiletools.calendar.pro.models.Event\nimport com.simplemobiletools.calendar.pro.helpers.Formatter\nprivate fun isDayValid(event: Event, code: String): Boolean {\r\n        val date = Formatter.getDateTimeFromCode(code)\r\n        return event.startTS != event.endTS && Formatter.getDateTimeFromTS(event.endTS) == Formatter.getDateTimeFromTS(date.seconds()).withTimeAtStartOfDay()\r\n    }\nImport(names=[com, simplemobiletools, calendar, pro, helpers, Formatter], wildcard=false, alias=null)\nImport(names=[com, simplemobiletools, calendar, pro, models, Event], wildcard=false, alias=null)" ],
  "Feeder/8" : [ "isLrcFileExist(song.title, song.artistName)", "private fun isLrcFileExist(title: String, artist: String): Boolean {\n        val file = File(getLrcPath(title, artist))\n        return file.exists()\n    }" ],
  "VinylMusicPlayer/466" : [ "private List<Item> fromNotes(List<Note> noteList, @NonNull NavigationCategory selectedCategory, @Nullable CategorySortingMethod sortingMethod) {\r\n    if (selectedCategory.getType() == DEFAULT_CATEGORY) {\r\n        final String category = selectedCategory.getCategory();\r\n        if (category != null) {\r\n            return fillListByCategory(noteList, category);\r\n        } else {\r\n            throw new IllegalStateException(NavigationCategory.class.getSimpleName() + \" type is \" + DEFAULT_CATEGORY + \", but category is null.\");\r\n        }\r\n    }\r\n    if (sortingMethod == SORT_MODIFIED_DESC) {\r\n        return fillListByTime(getApplication(), noteList);\r\n    } else {\r\n        return fillListByInitials(getApplication(), noteList);\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport it.niedermann.owncloud.notes.main.items.section.SectionItem;\r\nimport it.niedermann.owncloud.notes.shared.util.NoteUtil\nimport it.niedermann.owncloud.notes.shared.model.Item\nimport it.niedermann.owncloud.notes.persistence.entity.Note\nimport it.niedermann.owncloud.notes.main.items.section.SectionItem\nimport java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<Item> fillListByCategory(@NonNull List<Note> noteList, @Nullable String currentCategory) {\r\n    final var itemList = new ArrayList<Item>();\r\n    for (final var note : noteList) {\r\n        if (currentCategory != null && !currentCategory.equals(note.getCategory())) {\r\n            itemList.add(new SectionItem(NoteUtil.extendCategory(note.getCategory())));\r\n        }\r\n        itemList.add(note);\r\n        currentCategory = note.getCategory();\r\n    }\r\n    return itemList;\r\n}" ],
  "VinylMusicPlayer/465" : [ "", "override suspend fun getPlaylistSongs(playlist: Playlist): List<Song> =\n        if (playlist is AbsCustomPlaylist) {\n            playlist.songs()\n        } else {\n            PlaylistSongsLoader.getPlaylistSongList(context, playlist.id)\n        }" ],
  "VinylMusicPlayer/467" : [ "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    if (context instanceof AccountSwitcherListener) {\r\n        this.accountSwitcherListener = (AccountSwitcherListener) context;\r\n    } else {\r\n        throw new ClassCastException(\"Caller must implement \" + AccountSwitcherListener.class.getSimpleName());\r\n    }\r\n    final var args = getArguments();\r\n    if (args == null || !args.containsKey(KEY_CURRENT_ACCOUNT_ID)) {\r\n        throw new IllegalArgumentException(\"Please provide at least \" + KEY_CURRENT_ACCOUNT_ID);\r\n    } else {\r\n        this.currentAccountId = args.getLong(KEY_CURRENT_ACCOUNT_ID);\r\n    }\r\n    repo = NotesRepository.getInstance(requireContext());\r\n}\n--------------------------------------------------\n@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        listener = (NoteFragmentListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.getClass() + \" must implement \" + NoteFragmentListener.class);\r\n    }\r\n    repo = NotesRepository.getInstance(context);\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.room.Database;\r\nimport it.niedermann.owncloud.notes.persistence.entity.Note;\r\nimport it.niedermann.owncloud.notes.persistence.entity.Note\nimport androidx.room.Database\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static NotesDatabase getInstance(@NonNull Context context) {\r\n    if (instance == null) {\r\n        instance = create(context.getApplicationContext());\r\n    }\r\n    return instance;\r\n}" ],
  "VinylMusicPlayer/464" : [ "/**\r\n * This function will take a song entry and update it to the latest week and increase the count\r\n * for the current week by 1 if necessary\r\n *\r\n * @param database a writeable database\r\n * @param id the id of the track to bump\r\n * @param bumpCount whether to bump the current's week play count by 1 and adjust the score\r\n */\r\nprivate void updateExistingRow(@NonNull final SQLiteDatabase database, final long id, boolean bumpCount) {\r\n    String stringId = String.valueOf(id);\r\n    // begin the transaction\r\n    database.beginTransaction();\r\n    // get the cursor of this content inside the transaction\r\n    final Cursor cursor = database.query(SongPlayCountColumns.NAME, null, WHERE_ID_EQUALS, new String[] { stringId }, null, null, null);\r\n    // if we have a result\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        // figure how many weeks since we last updated\r\n        int lastUpdatedIndex = cursor.getColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX);\r\n        int lastUpdatedWeek = cursor.getInt(lastUpdatedIndex);\r\n        int weekDiff = mNumberOfWeeksSinceEpoch - lastUpdatedWeek;\r\n        // if it's more than the number of weeks we track, delete it and create a new entry\r\n        if (Math.abs(weekDiff) >= NUM_WEEKS) {\r\n            // this entry needs to be dropped since it is too outdated\r\n            deleteEntry(database, stringId);\r\n            if (bumpCount) {\r\n                createNewPlayedEntry(database, id);\r\n            }\r\n        } else if (weekDiff != 0) {\r\n            // else, shift the weeks\r\n            int[] playCounts = new int[NUM_WEEKS];\r\n            if (weekDiff > 0) {\r\n                // time is shifted forwards\r\n                for (int i = 0; i < NUM_WEEKS - weekDiff; i++) {\r\n                    playCounts[i + weekDiff] = cursor.getInt(getColumnIndexForWeek(i));\r\n                }\r\n            } else {\r\n                // time is shifted backwards (by user) - nor typical behavior but we\r\n                // will still handle it\r\n                // since weekDiff is -ve, NUM_WEEKS + weekDiff is the real # of weeks we have to\r\n                // transfer.  Then we transfer the old week i - weekDiff to week i\r\n                // for example if the user shifted back 2 weeks, ie -2, then for 0 to\r\n                // NUM_WEEKS + (-2) we set the new week i = old week i - (-2) or i+2\r\n                for (int i = 0; i < NUM_WEEKS + weekDiff; i++) {\r\n                    playCounts[i] = cursor.getInt(getColumnIndexForWeek(i - weekDiff));\r\n                }\r\n            }\r\n            // bump the count\r\n            if (bumpCount) {\r\n                playCounts[0]++;\r\n            }\r\n            float score = calculateScore(playCounts);\r\n            // if the score is non-existant, then delete it\r\n            if (score < .01f) {\r\n                deleteEntry(database, stringId);\r\n            } else {\r\n                // create the content values\r\n                ContentValues values = new ContentValues(NUM_WEEKS + 2);\r\n                values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX, mNumberOfWeeksSinceEpoch);\r\n                values.put(SongPlayCountColumns.PLAY_COUNT_SCORE, score);\r\n                for (int i = 0; i < NUM_WEEKS; i++) {\r\n                    values.put(getColumnNameForWeek(i), playCounts[i]);\r\n                }\r\n                // update the entry\r\n                database.update(SongPlayCountColumns.NAME, values, WHERE_ID_EQUALS, new String[] { stringId });\r\n            }\r\n        } else if (bumpCount) {\r\n            // else no shifting, just update the scores\r\n            ContentValues values = new ContentValues(2);\r\n            // increase the score by a single score amount\r\n            int scoreIndex = cursor.getColumnIndex(SongPlayCountColumns.PLAY_COUNT_SCORE);\r\n            float score = cursor.getFloat(scoreIndex) + getScoreMultiplierForWeek(0);\r\n            values.put(SongPlayCountColumns.PLAY_COUNT_SCORE, score);\r\n            // increase the play count by 1\r\n            values.put(getColumnNameForWeek(0), cursor.getInt(getColumnIndexForWeek(0)) + 1);\r\n            // update the entry\r\n            database.update(SongPlayCountColumns.NAME, values, WHERE_ID_EQUALS, new String[] { stringId });\r\n        }\r\n        cursor.close();\r\n    } else if (bumpCount) {\r\n        // if we have no existing results, create a new one\r\n        createNewPlayedEntry(database, id);\r\n    }\r\n    database.setTransactionSuccessful();\r\n    database.endTransaction();\r\n}\n--------------------------------------------------\n/**\r\n * This function will take a song entry and update it to the latest week and increase the count\r\n * for the current week by 1 if necessary\r\n *\r\n * @param database a writeable database\r\n * @param id the id of the track to bump\r\n * @param bumpCount whether to bump the current's week play count by 1 and adjust the score\r\n */\r\nprivate void updateExistingRow(@NonNull final SQLiteDatabase database, final long id, boolean bumpCount) {\r\n    String stringId = String.valueOf(id);\r\n    // begin the transaction\r\n    database.beginTransaction();\r\n    // get the cursor of this content inside the transaction\r\n    final Cursor cursor = database.query(SongPlayCountColumns.NAME, null, WHERE_ID_EQUALS, new String[] { stringId }, null, null, null);\r\n    // if we have a result\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        // figure how many weeks since we last updated\r\n        int lastUpdatedIndex = cursor.getColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX);\r\n        int lastUpdatedWeek = cursor.getInt(lastUpdatedIndex);\r\n        int weekDiff = mNumberOfWeeksSinceEpoch - lastUpdatedWeek;\r\n        // if it's more than the number of weeks we track, delete it and create a new entry\r\n        if (Math.abs(weekDiff) >= NUM_WEEKS) {\r\n            // this entry needs to be dropped since it is too outdated\r\n            deleteEntry(database, stringId);\r\n            if (bumpCount) {\r\n                createNewPlayedEntry(database, id);\r\n            }\r\n        } else if (weekDiff != 0) {\r\n            // else, shift the weeks\r\n            int[] playCounts = new int[NUM_WEEKS];\r\n            if (weekDiff > 0) {\r\n                // time is shifted forwards\r\n                for (int i = 0; i < NUM_WEEKS - weekDiff; i++) {\r\n                    playCounts[i + weekDiff] = cursor.getInt(getColumnIndexForWeek(i));\r\n                }\r\n            } else {\r\n                // time is shifted backwards (by user) - nor typical behavior but we\r\n                // will still handle it\r\n                // since weekDiff is -ve, NUM_WEEKS + weekDiff is the real # of weeks we have to\r\n                // transfer.  Then we transfer the old week i - weekDiff to week i\r\n                // for example if the user shifted back 2 weeks, ie -2, then for 0 to\r\n                // NUM_WEEKS + (-2) we set the new week i = old week i - (-2) or i+2\r\n                for (int i = 0; i < NUM_WEEKS + weekDiff; i++) {\r\n                    playCounts[i] = cursor.getInt(getColumnIndexForWeek(i - weekDiff));\r\n                }\r\n            }\r\n            // bump the count\r\n            if (bumpCount) {\r\n                playCounts[0]++;\r\n            }\r\n            float score = calculateScore(playCounts);\r\n            // if the score is non-existant, then delete it\r\n            if (score < .01f) {\r\n                deleteEntry(database, stringId);\r\n            } else {\r\n                // create the content values\r\n                ContentValues values = new ContentValues(NUM_WEEKS + 2);\r\n                values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX, mNumberOfWeeksSinceEpoch);\r\n                values.put(SongPlayCountColumns.PLAY_COUNT_SCORE, score);\r\n                for (int i = 0; i < NUM_WEEKS; i++) {\r\n                    values.put(getColumnNameForWeek(i), playCounts[i]);\r\n                }\r\n                // update the entry\r\n                database.update(SongPlayCountColumns.NAME, values, WHERE_ID_EQUALS, new String[] { stringId });\r\n            }\r\n        } else if (bumpCount) {\r\n            // else no shifting, just update the scores\r\n            ContentValues values = new ContentValues(2);\r\n            // increase the score by a single score amount\r\n            int scoreIndex = cursor.getColumnIndex(SongPlayCountColumns.PLAY_COUNT_SCORE);\r\n            float score = cursor.getFloat(scoreIndex) + getScoreMultiplierForWeek(0);\r\n            values.put(SongPlayCountColumns.PLAY_COUNT_SCORE, score);\r\n            // increase the play count by 1\r\n            values.put(getColumnNameForWeek(0), cursor.getInt(getColumnIndexForWeek(0)) + 1);\r\n            // update the entry\r\n            database.update(SongPlayCountColumns.NAME, values, WHERE_ID_EQUALS, new String[] { stringId });\r\n        }\r\n        cursor.close();\r\n    } else if (bumpCount) {\r\n        // if we have no existing results, create a new one\r\n        createNewPlayedEntry(database, id);\r\n    }\r\n    database.setTransactionSuccessful();\r\n    database.endTransaction();\r\n}\n--------------------------------------------------\n", "/**\r\n * For some performance gain, return a static value for the column index for a week WARNING: This\r\n * function assumes you have selected all columns for it to work\r\n *\r\n * @param week number\r\n * @return column index of that week\r\n */\r\nprivate static int getColumnIndexForWeek(final int week) {\r\n    // ID, followed by the weeks columns\r\n    return 1 + week;\r\n}" ],
  "Trail-Sense/910" : [ "requireArguments().getLong(\"habit\")\n--------------------------------------------------\n            .setMultiChoiceItems(\n                DateUtils.getLongWeekdayNames(Calendar.SATURDAY),\r\n                selectedDays,\n--------------------------------------------------\nstate.getLong(\"habitId\")\n--------------------------------------------------\nintent.extras?.getLong(\"habit\")\n--------------------------------------------------\nintent.extras?.getLong(\"timestamp\")\n--------------------------------------------------\nbundle.getLong(\"habit\")\n--------------------------------------------------\ncursor.getLong(index)\n--------------------------------------------------\nsharedPrefs.getLong(key, defValue)", "override fun getLong(index: Int): Long? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getLong(index)\r\n        }\r\n    }" ],
  "Feeder/192" : [ "\n        cancelNotifications(cancelNotificationIds)\r\n    }\n--------------------------------------------------\n{\n        cancelNotifications(notificationData.cancelNotificationIds)\r\n", "private fun cancelNotifications(notificationIds: List<Int>) {\r\n        for (notificationId in notificationIds) {\r\n            notificationManager.cancel(notificationId)\r\n        }\r\n    }" ],
  "Trail-Sense/917" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/197" : [ "@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}\n--------------------------------------------------\n", "import android.content.Intent;\r\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    handleIntent(intent);\r\n}" ],
  "Feeder/0" : [ "", "import android.view.View\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\noverride fun getDefaultVideoPoster(): Bitmap? {\r\n        return if (customView == null) {\r\n            null\r\n        } else BitmapFactory.decodeResource(\r\n            requireActivity.applicationContext?.resources,\r\n            2130837573\r\n        )\r\n    }\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)\nImport(names=[android, graphics, BitmapFactory], wildcard=false, alias=null)\nImport(names=[android, view, View], wildcard=false, alias=null)" ],
  "Trail-Sense/1281" : [ "kit.start()\n--------------------------------------------------\n{\r\n        // started via EthereumKitManager\r\n    }\n--------------------------------------------------\nstart()\n--------------------------------------------------\nit.start()\n--------------------------------------------------\nadapter.start()\n--------------------------------------------------\nLockScreenActivity.start(activity)\n--------------------------------------------------\nevmKit.start()\n--------------------------------------------------\ntorOperator.start()\n--------------------------------------------------\ntronKitWrapper?.tronKit?.start()\n--------------------------------------------------\nThread(Runnable {\n    torControl.onBootstrapped(torControl.torInfo)\n}).start()\n--------------------------------------------------\nservice.start()\n--------------------------------------------------\nIntroActivity.start(this)\n--------------------------------------------------\nMainModule.start(this, intent.data)\n--------------------------------------------------\ntotalBalance.start(viewModelScope)\n--------------------------------------------------\nnonceService.start()\n--------------------------------------------------\nsettingsService.start()\n--------------------------------------------------\nrepository.start()\n--------------------------------------------------\ntorManager.start()", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\noverride suspend fun start() = withContext(Dispatchers.IO) {\r\n        launch {\r\n            settingsService.stateFlow\r\n                .collect {\r\n                    sync(it)\r\n                }\r\n        }\r\n\r\n        settingsService.start()\r\n    }\nImport(names=[kotlinx, coroutines, launch], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Feeder/125" : [ "", "override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n\r\n        if (s == null) return\r\n        val length = s.length\r\n        if (length > 0) {\r\n            playlistModel?.filter(s)\r\n        } else {\r\n            playlistModel?.filter(null)\r\n        }\r\n    }" ],
  "Feeder/126" : [ "        val menu = toolbar.menu\n        val delete = menu.findItem(R.id.menu_delete)\r\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n--------------------------------------------------\n        val delete = menu.findItem(R.id.menu_delete)\n        delete.isVisible = !model.isNew && editViewModel.isWritable\r\n        delete.setShowAsAction(\n--------------------------------------------------\n        delete.isVisible = !model.isNew && editViewModel.isWritable\n        delete.setShowAsAction(\r\n                if (backButtonSavesTask) MenuItem.SHOW_AS_ACTION_NEVER else MenuItem.SHOW_AS_ACTION_IF_ROOM)\n--------------------------------------------------\n        activity?.hideKeyboard()\n        if (item.itemId == R.id.menu_delete) {\r\n            deleteButtonClick()\n--------------------------------------------------\n        if (item.itemId == R.id.menu_delete) {\n            deleteButtonClick()\r\n            return true\n--------------------------------------------------\n        dialogBuilder\n                .newDialog(R.string.DLG_delete_this_task_question)\r\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\n--------------------------------------------------\n                .newDialog(R.string.DLG_delete_this_task_question)\n                .setPositiveButton(R.string.ok) { _, _ -> delete() }\r\n                .setNegativeButton(R.string.cancel, null)\n--------------------------------------------------\n= lifecycleScope.launch {\r\n        editViewModel.delete()\r\n    }\n--------------------------------------------------\n                .value,\n            deleteComment = {\r\n                lifecycleScope.launch {\n--------------------------------------------------\n                lifecycleScope.launch {\n                    userActivityDao.delete(it)\r\n                }\n--------------------------------------------------\nservice!!.tasklists().delete(listId)\n--------------------------------------------------\nservice!!.tasks().delete(listId, taskId)\n--------------------------------------------------\ndelete()\n--------------------------------------------------\ntaskDeleter.delete(gtasksList)\n--------------------------------------------------\ntagDataDao.delete(tagData)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount!!)\n--------------------------------------------------\nfile.delete()\n--------------------------------------------------\nRequest.Builder().delete(FormBody.Builder().add(FORM_SESSION_ID, id.toString()).build())\n--------------------------------------------------\ndelete(tasks)\n--------------------------------------------------\ndelete(calendar)\n--------------------------------------------------\nservice.files().delete(file.id)\n--------------------------------------------------\ndrive.delete(it)\n--------------------------------------------------\ntaskDeleter.delete(account)\n--------------------------------------------------\ntaskDeleter.delete(it)\n--------------------------------------------------\nopenTaskDao.delete(listId, it)\n--------------------------------------------------\ncaldavDao.delete(moved)\n--------------------------------------------------\ntaskDeleter.delete(deleted.map {\n    it.id\n})\n--------------------------------------------------\ntaskDeleter.delete(caldavDao.getTasksByRemoteId(calendar, it.toList()))\n--------------------------------------------------\ntaskDeleter.delete(googleTaskAccount)\n--------------------------------------------------\ntaskDeleter.delete(microsoftAccount)\n--------------------------------------------------\ntaskDeleter.delete(caldavAccount)\n--------------------------------------------------\nFileHelper.delete(context, preferences.cacheDirectory)", "import androidx.room.Transaction\n @Transaction\r\n    open suspend fun delete(tagData: TagData) {\r\n        deleteTags(tagData.remoteId!!)\r\n        deleteTagData(tagData)\r\n    }" ],
  "Feeder/127" : [ "mediaList.replaceWith(list)\n--------------------------------------------------\nmediaList.replaceWith(withContext(Dispatchers.IO) {\n    mediaList.copy.updateWithMLMeta()\n})", "import org.videolan.medialibrary.interfaces.media.MediaWrapper\n @Synchronized\r\n    fun replaceWith(list: List<MediaWrapper>) {\r\n        internalList.clear()\r\n        internalList.addAll(list)\r\n    }" ],
  "Trail-Sense/1280" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Feeder/128" : [ "languageManager.getNativeName(it.tag)", "fun getNativeName(tag: String): String {\r\n        val locale = Locale.forLanguageTag(tag)\r\n        return locale.getDisplayName(locale).replaceFirstChar(Char::uppercase)\r\n    }" ],
  "MaterialFiles/729" : [ "\t\tval pushKeyResolver = PushKeyResolver(sseStorage)\n\t\tval alarmInfos = sseStorage.readAlarmNotifications()\r\n\t\tfor (alarmNotification in alarmInfos) {\n--------------------------------------------------\n{\n\t\tval alarmNotifications = sseStorage.readAlarmNotifications()\r\n\t\tfor (alarmNotification in alarmNotifications) {\n--------------------------------------------------\n\t\t// The DELETE notification we receive from the server has only placeholder fields and no keys. We must use our saved alarm to cancel notifications.\n\t\tval savedAlarmNotification = sseStorage.readAlarmNotifications().find {\r\n\t\t\tit.alarmInfo.identifier == alarmNotification.alarmInfo.identifier\n--------------------------------------------------\n`in`.read()\n--------------------------------------------------\n`in`.read(bytes, off, len)", "import java.io.IOException\n\t@Throws(IOException::class)\r\n\toverride fun read(bytes: ByteArray, off: Int, len: Int): Int {\r\n\t\tval numOfBytesRead = `in`.read(bytes, off, len)\r\n\t\tif (numOfBytesRead != -1) {\r\n\t\t\tdigest.update(bytes, off, numOfBytesRead)\r\n\t\t}\r\n\t\treturn numOfBytesRead\r\n\t}" ],
  "Trail-Sense/1284" : [ "extendAddOns(it)", "import com.kickstarter.models.Reward\nimport com.kickstarter.R\nprivate fun extendAddOns(flattenedList: List<Reward>): List<Reward> {\r\n            val mutableList = mutableListOf<Reward>()\r\n\r\n            flattenedList.map {\r\n                if (!it.isAddOn()) mutableList.add(it)\r\n                else {\r\n                    val q = it.quantity() ?: 1\r\n                    for (i in 1..q) {\r\n                        mutableList.add(it)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return mutableList.toList()\r\n        }" ],
  "VinylMusicPlayer/455" : [ "@Override\r\npublic void afterTextChanged(Editable s) {\r\n    String value = EntityAnswer.getCustomPlaceholder(context, s.toString().trim());\r\n    if (!TextUtils.isEmpty(value))\r\n        etValue.setText(value);\r\n}\n--------------------------------------------------\n", "/*\r\n    This file is part of FairEmail.\r\n\r\n    FairEmail is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    FairEmail is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with FairEmail.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    Copyright 2018-2024 by Marcel Bokhorst (M66B)\r\n*/\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport androidx.preference.PreferenceManager;\r\nimport androidx.room.Entity\nimport androidx.preference.PreferenceManager\nimport android.content.SharedPreferences\nimport android.content.Context\nstatic String getCustomPlaceholder(Context context, String name) {\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n    return prefs.getString(EntityAnswer.PREF_PLACEHOLDER + name, null);\r\n}" ],
  "Trail-Sense/1289" : [ "audioPlayer.bookmarkModel.addBookmark(this)\n--------------------------------------------------\nbookmarkModel.addBookmark(activity)\n--------------------------------------------------\nbookmarkModel.addBookmark(this)\n--------------------------------------------------\nit.addBookmark(playbackService.getTime())\n--------------------------------------------------\nit.addBookmark(service!!.getTime())", "import org.videolan.vlc.R\nimport org.videolan.medialibrary.interfaces.media.Bookmark\nimport org.videolan.medialibrary.Tools\nimport android.content.Context\nfun addBookmark(context: Context) {\r\n        if (service == null) return\r\n        service?.currentMediaWrapper?.let {\r\n            viewModelScope.launch {\r\n                withContext(Dispatchers.IO) {\r\n                    val bookmark = it.addBookmark(service!!.getTime())\r\n                    bookmark?.setName(context.getString(R.string.bookmark_default_name, Tools.millisToString(service!!.getTime())))\r\n                }\r\n                refresh()\r\n            }\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[org, videolan, medialibrary, Tools], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/451" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/450" : [ "", "import androidx.annotation.NonNull;\r\nimport java.util.List;\r\nimport java.util.List\nimport androidx.annotation.NonNull\npublic <T> void addSections(@NonNull final List<List<T>> sections) {\r\n    for (final List<T> section : sections) {\r\n        addSection(section);\r\n    }\r\n}" ],
  "VinylMusicPlayer/452" : [ "", "import com.kickstarter.libs.Range;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.NonNull\nimport java.util.List\nimport java.util.ArrayList\nimport com.kickstarter.libs.Range\n@NonNull\r\npublic static List<Range> positionalRanges(@NonNull final List<Integer> positions) {\r\n    final Integer firstPosition;\r\n    if (positions.size() == 0) {\r\n        return new ArrayList<>();\r\n    }\r\n    firstPosition = positions.get(0);\r\n    final List<Range> ranges = RangeUtils.consecutiveRanges(positions);\r\n    final List<Range> result = new ArrayList<>();\r\n    for (final Range range : ranges) {\r\n        result.add(Range.create(range.start + firstPosition, range.length));\r\n    }\r\n    return result;\r\n}" ],
  "MaterialFiles/719" : [ "FileUtils.copyFile(db, dst)\n--------------------------------------------------\nFileUtils.copyFile(db, dbFile)\n--------------------------------------------------\nFileUtils.copyFile(File(uri.path), VLCOptions.getSoundFontFile(context))\n--------------------------------------------------\ncopyFile(`in`, out)\n--------------------------------------------------\nret and copyFile(file, File(dst, file.name))", "import java.io\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    @Throws(IOException::class)\r\n    private fun copyFile(inputStream: InputStream, out: OutputStream) {\r\n        val buffer = ByteArray(1024)\r\n        var read = inputStream.read(buffer)\r\n        while (read != -1) {\r\n            out.write(buffer, 0, read)\r\n            read = inputStream.read(buffer)\r\n        }\r\n    }" ],
  "Feeder/121" : [ "", "fun setIsBackgroundTransparent(isBackgroundTransparent: Boolean) {\r\n        this.isBackgroundTransparent = isBackgroundTransparent\r\n        initColors()\r\n    }" ],
  "Feeder/122" : [ "            val actualRelease =\n                if (hasNextEpisode) TimeTools.applyUserOffset(context, show.nextAirdateMs) else null\r\n            return bindViewAt(\n--------------------------------------------------\n                episodeDescription,\n                actualRelease = TimeTools.applyUserOffset(context, episode.episode_firstairedms),\r\n                episode.network,\n--------------------------------------------------\nTimeTools.applyUserOffset(context, item.nextAirdateMs)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, nextEpisodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, episode_firstairedms)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), episodeReleaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(requireContext(), releaseTime)\n--------------------------------------------------\nTimeTools.applyUserOffset(context, sgShow.nextAirdateMs)\n--------------------------------------------------\ndateTime = applyUserOffset(context, dateTime)", "import java.util.Date\nimport org.threeten.bp.ZonedDateTime\nimport com.battlelancer.seriesguide.settings.DisplaySettings\nimport android.content.Context\nprivate fun applyUserOffset(context: Context, dateTime: ZonedDateTime): ZonedDateTime {\r\n        val offset = DisplaySettings.getShowsTimeOffset(context)\r\n        if (offset != 0) {\r\n            return dateTime.plusHours(offset.toLong())\r\n        }\r\n        return dateTime\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, settings, DisplaySettings], wildcard=false, alias=null)\nImport(names=[org, threeten, bp, ZonedDateTime], wildcard=false, alias=null)" ],
  "MaterialFiles/734" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        writer.beginObject()\r\n        serialiseFields(writer)\r\n        writer.endObject()\r\n    }" ],
  "Trail-Sense/1292" : [ "{\n        val account = preferences.getAccount(accountUuid) ?: error(\"Account $accountUuid not found\")\r\n\n--------------------------------------------------\ncontext = get()\n--------------------------------------------------\ndefaultFolderProvider = get()\n--------------------------------------------------\nmessageStoreManager = get()\n--------------------------------------------------\nget()\n--------------------------------------------------\nresourceProvider = get()\n--------------------------------------------------\ncontactRepository = get()\n--------------------------------------------------\nalarmManager = get()\n--------------------------------------------------\ncontentResolver = get()\n--------------------------------------------------\nprocessExecutor = get()\n--------------------------------------------------\nDI.get(Context::class.java)\n--------------------------------------------------\ncolumnMap?.get(flag)\n--------------------------------------------------\nDI.get<MessageListRepository>()\n--------------------------------------------------\ndisplayHtmlFactory = get()\n--------------------------------------------------\nsystemConnectivityManager = get()\n--------------------------------------------------\nsystemPowerManager = get()\n--------------------------------------------------\nlocalStoreProvider = get()\n--------------------------------------------------\nstorageManager = get()\n--------------------------------------------------\nbasicPartInfoExtractor = get()\n--------------------------------------------------\nmessageViewInfoExtractorFactory = get()\n--------------------------------------------------\nhtmlSettingsProvider = get()\n--------------------------------------------------\nthemeManager = get()\n--------------------------------------------------\nletterExtractor = get()\n--------------------------------------------------\nconfig = get()\n--------------------------------------------------\ncontactLetterBitmapCreator = get()\n--------------------------------------------------\ncontactPhotoLoader = get()\n--------------------------------------------------\naccountManager = get()\n--------------------------------------------------\nmessageCountsProvider = get()\n--------------------------------------------------\nmessageListRepository = get()\n--------------------------------------------------\naccountFallbackImageProvider = get()\n--------------------------------------------------\nappCoroutineScope = get(named(\"AppCoroutineScope\"))\n--------------------------------------------------\ngeneralSettingsManager = get()\n--------------------------------------------------\nchangeLogManager = get()\n--------------------------------------------------\nresources = get()\n--------------------------------------------------\nfolderRepository = get()\n--------------------------------------------------\nget<DisplayHtmlUiFactory>().createForMessageView()\n--------------------------------------------------\ntextPartFinder = get()\n--------------------------------------------------\nquoteDateFormatter = get()\n--------------------------------------------------\nclipboardManager = get()\n--------------------------------------------------\npreferences = get()\n--------------------------------------------------\nmessagingController = get()\n--------------------------------------------------\nmessageRepository = get()\n--------------------------------------------------\ncontactNameProvider = get()\n--------------------------------------------------\nViewConfiguration.get(context)\n--------------------------------------------------\nclock = get()\n--------------------------------------------------\nreplyRoParser = get()\n--------------------------------------------------\nmessageHelper = get()", "override fun get(index: Int): Char {\r\n        require(index in 0..(length - 1)) { \"index: $index; length: $length\" }\r\n\r\n        var offset = index\r\n        for (i in 0..(segments.size - 1)) {\r\n            val segment = segments[i]\r\n            val segmentLength = segment.endIndex - segment.startIndex\r\n            if (offset < segmentLength) {\r\n                return text[segment.startIndex + offset]\r\n            }\r\n            offset -= segmentLength\r\n        }\r\n\r\n        throw AssertionError()\r\n    }" ],
  "Trail-Sense/1293" : [ "setPosition(logo.x + logo.width - 12.dp, logo.x + logo.width - 12.dp, logo.y + logo.height - 24.dp, logo.y + logo.height + 24.dp)\n--------------------------------------------------\nsetPosition(logo.x + 12.dp, logo.x + 12.dp, logo.y + logo.height - 24.dp, logo.y + logo.height + 24.dp)\n--------------------------------------------------\nsetPosition(currentHeight * proportion)\n--------------------------------------------------\nplayer.setPosition(0F)\n--------------------------------------------------\nsetPosition((time.toFloat() / NO_LENGTH_PROGRESS_MAX.toFloat()))\n--------------------------------------------------\nplaylistManager.player.setPosition(pos)", "import org.videolan.vlc.R\nprivate fun setPosition(y: Float) {\r\n        val position = y / currentHeight\r\n        val handleHeight = handle.height\r\n        handle.y = getValueInRange(0, currentHeight - handleHeight, ((currentHeight - handleHeight) * position).toInt()).toFloat()\r\n        val bubbleHeight = bubble.height\r\n        bubble.y = getValueInRange(0, currentHeight - bubbleHeight, ((currentHeight - bubbleHeight) * position).toInt() - handleHeight).toFloat()\r\n    }" ],
  "Feeder/138" : [ "/**\r\n * If this returns non-null there are no pending sync operations.\r\n *\r\n * @return int[] An int array where the index for each tableId has the action for that\r\n * table.\r\n */\r\n@Nullable\r\nint[] getTablesToSync() {\r\n    synchronized (this) {\r\n        if (!mNeedsSync) {\r\n            return null;\r\n        }\r\n        final int tableCount = mTableObservers.length;\r\n        for (int i = 0; i < tableCount; i++) {\r\n            final boolean newState = mTableObservers[i] > 0;\r\n            if (newState != mTriggerStates[i]) {\r\n                mTriggerStateChanges[i] = newState ? ADD : REMOVE;\r\n            } else {\r\n                mTriggerStateChanges[i] = NO_OP;\r\n            }\r\n            mTriggerStates[i] = newState;\r\n        }\r\n        mNeedsSync = false;\r\n        return mTriggerStateChanges.clone();\r\n    }\r\n}\n--------------------------------------------------\n/**\r\n * Return the Gmail labels associated with this message.\r\n *\r\n * @return\tarray of labels, or empty array if none\r\n * @exception\tMessagingException for failures\r\n */\r\npublic String[] getLabels() throws MessagingException {\r\n    String[] labels = (String[]) getItem(GmailProtocol.LABELS_ITEM);\r\n    if (labels != null)\r\n        return (String[]) (labels.clone());\r\n    else\r\n        return new String[0];\r\n}\n--------------------------------------------------\n", "@Override\r\npublic Object clone() {\r\n    ensureParsed();\r\n    return super.clone();\r\n}" ],
  "Trail-Sense/1290" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/1296" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        computeTextSize()\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "MaterialFiles/737" : [ "@Override\r\npublic ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\r\n    final int res = uriMatcher.match(uri);\r\n    Log.e(getClass().getName(), \"match(\" + uri + \"): \" + res);\r\n    switch(res) {\r\n        case GPX:\r\n        case TCX:\r\n            final List<String> list = uri.getPathSegments();\r\n            final String id = list.get(list.size() - 2);\r\n            final long activityId = Long.parseLong(id);\r\n            final String parcelFile = \"activity.\" + list.get(list.size() - 3);\r\n            final Pair<File, OutputStream> out = openCacheFile(parcelFile);\r\n            if (out == null) {\r\n                Log.e(getClass().getName(), \"Failed to open cacheFile(\" + parcelFile + \")\");\r\n                return null;\r\n            }\r\n            Log.e(getClass().getName(), \"activity: \" + activityId + \", file: \" + out.first.getAbsolutePath());\r\n            SQLiteDatabase mDB = DBHelper.getReadableDatabase(getContext());\r\n            PathSimplifier simplifier = PathSimplifier.getPathSimplifierForExport(getContext());\r\n            try {\r\n                switch(res) {\r\n                    case TCX:\r\n                        TCX tcx = new TCX(mDB, simplifier);\r\n                        tcx.export(activityId, new OutputStreamWriter(out.second));\r\n                        Log.e(getClass().getName(), \"export tcx\");\r\n                        break;\r\n                    case GPX:\r\n                        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this.getContext());\r\n                        //The data must exist if log, use the log option as a possibility to \"deactivate\" too\r\n                        boolean extraData = prefs.getBoolean(this.getContext().getString(org.runnerup.R.string.pref_log_gpx_accuracy), false);\r\n                        GPX gpx = new GPX(mDB, true, extraData, simplifier);\r\n                        gpx.export(activityId, new OutputStreamWriter(out.second));\r\n                        Log.e(getClass().getName(), \"export gpx\");\r\n                        break;\r\n                }\r\n                out.second.flush();\r\n                out.second.close();\r\n                Log.e(getClass().getName(), \"wrote \" + out.first.length() + \" bytes...\");\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            DBHelper.closeDB(mDB);\r\n            //noinspection UnnecessaryLocalVariable\r\n            ParcelFileDescriptor pfd = ParcelFileDescriptor.open(out.first, ParcelFileDescriptor.MODE_READ_ONLY);\r\n            return pfd;\r\n    }\r\n    throw new FileNotFoundException(\"Unsupported uri: \" + uri);\r\n}\n--------------------------------------------------\n/**\r\n * recompute laps aggregates based on locations\r\n */\r\nprivate void recomputeLaps(SQLiteDatabase db, long activityId) {\r\n    final String[] cols = new String[] { DB.LAP.LAP };\r\n    ArrayList<Long> laps = new ArrayList<>();\r\n    Cursor c = db.query(DB.LAP.TABLE, cols, DB.LAP.ACTIVITY + \" = \" + activityId, null, null, null, \"_id\", null);\r\n    if (c.moveToFirst()) {\r\n        do {\r\n            laps.add(c.getLong(0));\r\n        } while (c.moveToNext());\r\n    }\r\n    c.close();\r\n    for (long lap : laps) {\r\n        recomputeLap(db, activityId, lap);\r\n    }\r\n}\n--------------------------------------------------\n", "import java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStream\nimport java.io.IOException\npublic static void close(InputStream input) {\r\n    if (input != null)\r\n        try {\r\n            input.close();\r\n        } catch (IOException ex) {\r\n        }\r\n}" ],
  "Trail-Sense/1297" : [ "                } else {\n                    drawBackground(dX, viewWidth, viewHeight)\r\n                }", "import com.fsck.k9.ui.R\nimport android.graphics.Paint\nimport android.graphics.Canvas\nprivate fun Canvas.drawBackground(dX: Float, width: Int, height: Int) {\r\n        val swipeAction = if (dX > 0) swipeRightAction else swipeLeftAction\r\n        val backgroundColor = resourceProvider.getBackgroundColor(swipeAction)\r\n\r\n        backgroundColorPaint.color = backgroundColor\r\n        drawRect(\r\n            0F,\r\n            0F,\r\n            width.toFloat(),\r\n            height.toFloat(),\r\n            backgroundColorPaint,\r\n        )\r\n    }\nimport android.graphics.Canvas\nimport android.graphics.Paint\nimport com.fsck.k9.ui.R" ],
  "Trail-Sense/1294" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        computeTextSize()\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/443" : [ "", "import android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteDatabase\n/**\r\n * Increases the play count of a song by 1\r\n *\r\n * @param songId The song id to increase the play count\r\n */\r\npublic void bumpPlayCount(final long songId) {\r\n    if (songId == -1) {\r\n        return;\r\n    }\r\n    final SQLiteDatabase database = getWritableDatabase();\r\n    updateExistingRow(database, songId, true);\r\n}" ],
  "Iconify/802" : [ "service.setTopMarket(topMarket)", "import io.horizontalsystems.bankwallet.modules.market.TopMarket\nfun setTopMarket(topMarket: TopMarket) {\r\n        this.topMarket = topMarket\r\n        sync()\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.TopMarket" ],
  "Iconify/801" : [ "", "import com.mhss.app.mybrain.R\nimport android.content.Context\nimport android.app.NotificationChannel\noverride fun onCreate() {\r\n        super.onCreate()\r\n        appContext = this\r\n        createRemindersNotificationChannel()\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/445" : [ "public static boolean isBrowseable(@NonNull String mediaID) {\r\n    return !mediaID.contains(LEAF_SEPARATOR);\r\n}\n--------------------------------------------------\nprivate static boolean isValidCategory(String category) {\r\n    return category == null || (!category.contains(CATEGORY_SEPARATOR) && !category.contains(LEAF_SEPARATOR));\r\n}\n--------------------------------------------------\n", "import android.database.Cursor;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.Cursor\npublic boolean contains(long id) {\r\n    final SQLiteDatabase database = getReadableDatabase();\r\n    Cursor cursor = database.query(RecentStoreColumns.NAME, new String[] { RecentStoreColumns.ID }, RecentStoreColumns.ID + \"=?\", new String[] { String.valueOf(id) }, null, null, null, null);\r\n    boolean containsId = cursor != null && cursor.moveToFirst();\r\n    if (cursor != null) {\r\n        cursor.close();\r\n    }\r\n    return containsId;\r\n}" ],
  "Trail-Sense/1299" : [ "super.onDraw(canvas)", "import org.videolan.tools.Settings\nimport android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        if (!Settings.showTvUi) {\r\n            val cx = if (isLeft) -width else width * 2\r\n            val cy = height / 2\r\n            canvas.drawCircle(cx.toFloat(), cy.toFloat(), width.toFloat()*2, paint)\r\n        }\r\n        super.onDraw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/442" : [ "public static boolean isSynchronized(String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(null, data);\r\n            if (lyrics.isValid()) {\r\n                return true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return false;\r\n}\n--------------------------------------------------\npublic static Lyrics parse(Song song, String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(song, data);\r\n            if (lyrics.isValid()) {\r\n                return lyrics.parse(false);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return new Lyrics().setData(song, data).parse(false);\r\n}\n--------------------------------------------------\n", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\npublic Lyrics setData(Song song, String data) {\r\n    this.song = song;\r\n    this.data = data;\r\n    return this;\r\n}" ],
  "MaterialFiles/732" : [ "it.toStream(writer)\n--------------------------------------------------\nobj.toStream(writer)\n--------------------------------------------------\nstreamable.toStream(JsonStream(it))", "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun toStream(writer: JsonStream) {\r\n        writer.beginObject()\r\n        serialiseFields(writer)\r\n        writer.endObject()\r\n    }" ],
  "Iconify/809" : [ "val item = getSearchResultFor(position)", "import com.battlelancer.seriesguide.R\nprivate fun getSearchResultFor(position: Int): SearchResult {\r\n        return if (showOnlyResults) {\r\n            searchResults[position]\r\n        } else {\r\n            searchResults[position - links.size - 1 /* header */]\r\n        }\r\n    }" ],
  "Iconify/805" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/438" : [ "", "import android.database.Cursor;\r\nimport java.util.ArrayList;\r\nimport java.util.ArrayList\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\npublic ArrayList<String> getPaths() {\r\n    Cursor cursor = getReadableDatabase().query(BlacklistStoreColumns.NAME, new String[] { BlacklistStoreColumns.PATH }, null, null, null, null, null);\r\n    ArrayList<String> paths = new ArrayList<>();\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        do {\r\n            paths.add(cursor.getString(0));\r\n        } while (cursor.moveToNext());\r\n    }\r\n    if (cursor != null)\r\n        cursor.close();\r\n    return paths;\r\n}" ],
  "Iconify/804" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/130" : [ "", "import android.database.sqlite.SQLiteDatabase;\r\nimport it.feio.android.omninotes.exceptions.DatabaseException;\r\nimport it.feio.android.omninotes.helpers.LogDelegate;\r\nimport java.io.IOException;\r\nimport java.io.IOException\nimport it.feio.android.omninotes.helpers.LogDelegate\nimport it.feio.android.omninotes.exceptions.DatabaseException\nimport android.database.sqlite.SQLiteDatabase\n@Override\r\npublic void onCreate(SQLiteDatabase db) {\r\n    try {\r\n        LogDelegate.i(\"Database creation\");\r\n        execSqlFile(CREATE_QUERY, db);\r\n    } catch (IOException e) {\r\n        throw new DatabaseException(\"Database creation failed: \" + e.getMessage(), e);\r\n    }\r\n}" ],
  "Feeder/147" : [ "", "import org.videolan.vlc.interfaces.Filterable\noverride fun onQueryTextChange(filterQueryString: String): Boolean {\r\n        val current = currentFragment\r\n        if (current is Filterable) {\r\n            if (filterQueryString.isEmpty())\r\n                (current as Filterable).restoreList()\r\n            else\r\n                (current as Filterable).filter(filterQueryString)\r\n            return true\r\n        }\r\n        return false\r\n    }\nImport(names=[org, videolan, vlc, interfaces, Filterable], wildcard=false, alias=null)" ],
  "MaterialFiles/745" : [ "FileUtils.copyFile(db, dst)\n--------------------------------------------------\nFileUtils.copyFile(db, dbFile)\n--------------------------------------------------\nFileUtils.copyFile(File(uri.path), VLCOptions.getSoundFontFile(context))\n--------------------------------------------------\ncopyFile(`in`, out)\n--------------------------------------------------\nret and copyFile(file, File(dst, file.name))", "import java.io\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    @Throws(IOException::class)\r\n    private fun copyFile(inputStream: InputStream, out: OutputStream) {\r\n        val buffer = ByteArray(1024)\r\n        var read = inputStream.read(buffer)\r\n        while (read != -1) {\r\n            out.write(buffer, 0, read)\r\n            read = inputStream.read(buffer)\r\n        }\r\n    }" ],
  "Feeder/148" : [ "private static Imported parseRoot(XmlPullParser xpp, boolean globalSettings, List<String> accountUuids, boolean overview) throws XmlPullParserException, IOException, SettingsImportExportException {\r\n    Imported result = new Imported();\r\n    String fileFormatVersionString = xpp.getAttributeValue(null, SettingsExporter.FILE_FORMAT_ATTRIBUTE);\r\n    validateFileFormatVersion(fileFormatVersionString);\r\n    String contentVersionString = xpp.getAttributeValue(null, SettingsExporter.VERSION_ATTRIBUTE);\r\n    result.contentVersion = validateContentVersion(contentVersionString);\r\n    int eventType = xpp.next();\r\n    while (!(eventType == XmlPullParser.END_TAG && SettingsExporter.ROOT_ELEMENT.equals(xpp.getName()))) {\r\n        if (eventType == XmlPullParser.START_TAG) {\r\n            String element = xpp.getName();\r\n            if (SettingsExporter.GLOBAL_ELEMENT.equals(element)) {\r\n                if (overview || globalSettings) {\r\n                    if (result.globalSettings == null) {\r\n                        if (overview) {\r\n                            result.globalSettings = new ImportedSettings();\r\n                            skipToEndTag(xpp, SettingsExporter.GLOBAL_ELEMENT);\r\n                        } else {\r\n                            result.globalSettings = parseSettings(xpp, SettingsExporter.GLOBAL_ELEMENT);\r\n                        }\r\n                    } else {\r\n                        skipToEndTag(xpp, SettingsExporter.GLOBAL_ELEMENT);\r\n                        Timber.w(\"More than one global settings element. Only using the first one!\");\r\n                    }\r\n                } else {\r\n                    skipToEndTag(xpp, SettingsExporter.GLOBAL_ELEMENT);\r\n                    Timber.i(\"Skipping global settings\");\r\n                }\r\n            } else if (SettingsExporter.ACCOUNTS_ELEMENT.equals(element)) {\r\n                if (result.accounts == null) {\r\n                    result.accounts = parseAccounts(xpp, accountUuids, overview);\r\n                } else {\r\n                    Timber.w(\"More than one accounts element. Only using the first one!\");\r\n                }\r\n            } else {\r\n                Timber.w(\"Unexpected start tag: %s\", xpp.getName());\r\n            }\r\n        }\r\n        eventType = xpp.next();\r\n    }\r\n    return result;\r\n}\n--------------------------------------------------\nprivate static Imported parseRoot(XmlPullParser xpp, boolean globalSettings, List<String> accountUuids, boolean overview) throws XmlPullParserException, IOException, SettingsImportExportException {\r\n    Imported result = new Imported();\r\n    String fileFormatVersionString = xpp.getAttributeValue(null, SettingsExporter.FILE_FORMAT_ATTRIBUTE);\r\n    validateFileFormatVersion(fileFormatVersionString);\r\n    String contentVersionString = xpp.getAttributeValue(null, SettingsExporter.VERSION_ATTRIBUTE);\r\n    result.contentVersion = validateContentVersion(contentVersionString);\r\n    int eventType = xpp.next();\r\n    while (!(eventType == XmlPullParser.END_TAG && SettingsExporter.ROOT_ELEMENT.equals(xpp.getName()))) {\r\n        if (eventType == XmlPullParser.START_TAG) {\r\n            String element = xpp.getName();\r\n            if (SettingsExporter.GLOBAL_ELEMENT.equals(element)) {\r\n                if (overview || globalSettings) {\r\n                    if (result.globalSettings == null) {\r\n                        if (overview) {\r\n                            result.globalSettings = new ImportedSettings();\r\n                            skipToEndTag(xpp, SettingsExporter.GLOBAL_ELEMENT);\r\n                        } else {\r\n                            result.globalSettings = parseSettings(xpp, SettingsExporter.GLOBAL_ELEMENT);\r\n                        }\r\n                    } else {\r\n                        skipToEndTag(xpp, SettingsExporter.GLOBAL_ELEMENT);\r\n                        Timber.w(\"More than one global settings element. Only using the first one!\");\r\n                    }\r\n                } else {\r\n                    skipToEndTag(xpp, SettingsExporter.GLOBAL_ELEMENT);\r\n                    Timber.i(\"Skipping global settings\");\r\n                }\r\n            } else if (SettingsExporter.ACCOUNTS_ELEMENT.equals(element)) {\r\n                if (result.accounts == null) {\r\n                    result.accounts = parseAccounts(xpp, accountUuids, overview);\r\n                } else {\r\n                    Timber.w(\"More than one accounts element. Only using the first one!\");\r\n                }\r\n            } else {\r\n                Timber.w(\"Unexpected start tag: %s\", xpp.getName());\r\n            }\r\n        }\r\n        eventType = xpp.next();\r\n    }\r\n    return result;\r\n}\n--------------------------------------------------\n", "import java.io.IOException;\r\nimport org.xmlpull.v1.XmlPullParser;\r\nimport org.xmlpull.v1.XmlPullParserException;\r\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport java.io.IOException\nprivate static void skipToEndTag(XmlPullParser xpp, String endTag) throws XmlPullParserException, IOException {\r\n    int eventType = xpp.next();\r\n    while (!(eventType == XmlPullParser.END_TAG && endTag.equals(xpp.getName()))) {\r\n        eventType = xpp.next();\r\n    }\r\n}" ],
  "MaterialFiles/744" : [ "prettyPrint(response)", "import java.io.IOException\nimport org.tasks.BuildConfig\nimport com.google.api.client.json.GenericJson\n @Throws(IOException::class)\r\n    private fun <T> prettyPrint(`object`: T?): Any? {\r\n        if (BuildConfig.DEBUG) {\r\n            if (`object` is GenericJson) {\r\n                return (`object` as GenericJson).toPrettyString()\r\n            }\r\n        }\r\n        return `object`\r\n    }\nImport(names=[com, google, api, client, json, GenericJson], wildcard=false, alias=null)" ],
  "Feeder/149" : [ "\"notes\" -> parseList(parser, parser.name, baseNotes, Folder.NOTES)\n--------------------------------------------------\n\"deleted-notes\" -> parseList(parser, parser.name, baseNotes, Folder.DELETED)\n--------------------------------------------------\n\"archived-notes\" -> parseList(parser, parser.name, baseNotes, Folder.ARCHIVED)", "import org.xmlpull.v1.XmlPullParser\nimport com.omgodse.notally.room.Type\nimport com.omgodse.notally.room.Folder\nimport com.omgodse.notally.room.BaseNote\nprivate fun parseList(parser: XmlPullParser, rootTag: String, list: ArrayList<BaseNote>, folder: Folder) {\r\n        while (parser.next() != XmlPullParser.END_DOCUMENT) {\r\n            if (parser.eventType == XmlPullParser.START_TAG) {\r\n                val note = parseBaseNote(parser, parser.name, folder)\r\n                list.add(note)\r\n            } else if (parser.eventType == XmlPullParser.END_TAG) {\r\n                if (parser.name == rootTag) {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, room, Folder], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, Type], wildcard=false, alias=null)\nImport(names=[org, xmlpull, v1, XmlPullParser], wildcard=false, alias=null)" ],
  "MaterialFiles/748" : [ "@RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)\r\n@Override\r\npublic boolean isWriteAheadLoggingEnabled() {\r\n    return mAutoCloser.executeRefCountingFunction(db -> {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\r\n            return db.isWriteAheadLoggingEnabled();\r\n        }\r\n        return false;\r\n    });\r\n}\n--------------------------------------------------\nprivate static void beginTransactionInternal(SupportSQLiteDatabase database) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN && database.isWriteAheadLoggingEnabled()) {\r\n        database.beginTransactionNonExclusive();\r\n    } else {\r\n        database.beginTransaction();\r\n    }\r\n}\n--------------------------------------------------\n", "import android.os.Build;\r\nimport androidx.arch.core.util.Function\nimport androidx.annotation.RequiresApi\nimport android.os.Build\n@RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)\r\n@Override\r\npublic boolean isWriteAheadLoggingEnabled() {\r\n    return mAutoCloser.executeRefCountingFunction(db -> {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\r\n            return db.isWriteAheadLoggingEnabled();\r\n        }\r\n        return false;\r\n    });\r\n}" ],
  "Android-Password-Store/5" : [ "{\n        val decrypted = decrypted(backup.crypto, passphrase)\r\n        return BackupLocalModule.getAccountTypeFromData(backup.type, decrypted)\n--------------------------------------------------\n        val decrypted = decrypted(backup.crypto, passphrase)\n        return BackupLocalModule.getAccountTypeFromData(backup.type, decrypted)\r\n    }\n--------------------------------------------------\n            val auth = syncSource.auth?.let {\n                val decryptedAuth = decrypted(it, passphrase)\r\n                String(decryptedAuth, Charsets.UTF_8)\n--------------------------------------------------\n                val decryptedAuth = decrypted(it, passphrase)\n                String(decryptedAuth, Charsets.UTF_8)\r\n            }\n--------------------------------------------------\n        fullBackup.contacts?.let {\n            val decrypted = decrypted(it, passphrase)\r\n            val contactsBackupJson = String(decrypted, Charsets.UTF_8)\n--------------------------------------------------\n            val decrypted = decrypted(it, passphrase)\n            val contactsBackupJson = String(decrypted, Charsets.UTF_8)\r\n\n--------------------------------------------------\n        fullBackupItems(\n            accounts = decryptedFullBackup.wallets.map { it.account },\r\n            watchlist = decryptedFullBackup.watchlist,\n--------------------------------------------------\n            accounts = decryptedFullBackup.wallets.map { it.account },\n            watchlist = decryptedFullBackup.watchlist,\r\n            contacts = decryptedFullBackup.contacts,\n--------------------------------------------------\n            watchlist = decryptedFullBackup.watchlist,\n            contacts = decryptedFullBackup.contacts,\r\n            customRpcsCount = decryptedFullBackup.settings.evmSyncSources.custom.ifEmpty { null }?.size\n--------------------------------------------------\n            contacts = decryptedFullBackup.contacts,\n            customRpcsCount = decryptedFullBackup.settings.evmSyncSources.custom.ifEmpty { null }?.size\r\n        )\n--------------------------------------------------\n{\n        return decryptedFullBackup != null && decryptedFullBackup.contacts.isNotEmpty() && contactsRepository.contacts.isNotEmpty()\r\n    }", "import io.horizontalsystems.bankwallet.modules.backuplocal.BackupLocalModule\nimport io.horizontalsystems.bankwallet.core.managers.EncryptDecryptManager\nimport io.horizontalsystems.bankwallet.R\nprivate fun decrypted(crypto: BackupLocalModule.BackupCrypto, passphrase: String): ByteArray {\r\n        val kdfParams = crypto.kdfparams\r\n        val key = EncryptDecryptManager.getKey(passphrase, kdfParams) ?: throw RestoreException.EncryptionKeyException\r\n\r\n        if (EncryptDecryptManager.passwordIsCorrect(crypto.mac, crypto.ciphertext, key)) {\r\n            return encryptDecryptManager.decrypt(crypto.ciphertext, key, crypto.cipherparams.iv)\r\n        } else {\r\n            throw RestoreException.InvalidPasswordException\r\n        }\r\n    }\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.core.managers.EncryptDecryptManager\nimport io.horizontalsystems.bankwallet.modules.backuplocal.BackupLocalModule" ],
  "Android-Password-Store/2" : [ "\n        setAppTheme()\r\n", "import io.horizontalsystems.bankwallet.modules.theme.ThemeType\nimport androidx.appcompat.app.AppCompatDelegate\nprivate fun setAppTheme() {\r\n        val nightMode = when (localStorage.currentTheme) {\r\n            ThemeType.Light -> AppCompatDelegate.MODE_NIGHT_NO\r\n            ThemeType.Dark -> AppCompatDelegate.MODE_NIGHT_YES\r\n            ThemeType.System -> AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM\r\n        }\r\n\r\n        if (AppCompatDelegate.getDefaultNightMode() != nightMode) {\r\n            AppCompatDelegate.setDefaultNightMode(nightMode)\r\n        }\r\n    }\nimport androidx.appcompat.app.AppCompatDelegate\nimport io.horizontalsystems.bankwallet.modules.theme.ThemeType" ],
  "VinylMusicPlayer/432" : [ "", "import android.widget.SeekBar;\r\nimport android.widget.SeekBar\n@Override\r\npublic void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\r\n    if (progress < 10)\r\n        progress = 10;\r\n    if (progress > 90)\r\n        progress = 90;\r\n    prefs.edit().putInt(\"column_width\", progress).apply();\r\n}" ],
  "VinylMusicPlayer/435" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "MaterialFiles/741" : [ "", "import java.io\n @Throws(Exception::class)\r\n    fun getStringFromFile(filePath: String): String {\r\n        val fl = File(filePath)\r\n        val fin = FileInputStream(fl)\r\n        val ret = convertStreamToString(fin)\r\n        //Make sure you close all streams.\r\n        fin.close()\r\n        return ret\r\n    }" ],
  "MaterialFiles/740" : [ "", "import android.database.sqlite.SQLiteDatabase;\r\nimport it.feio.android.omninotes.exceptions.DatabaseException;\r\nimport it.feio.android.omninotes.helpers.LogDelegate;\r\nimport java.io.IOException;\r\nimport java.io.IOException\nimport it.feio.android.omninotes.helpers.LogDelegate\nimport it.feio.android.omninotes.exceptions.DatabaseException\nimport android.database.sqlite.SQLiteDatabase\n@Override\r\npublic void onCreate(SQLiteDatabase db) {\r\n    try {\r\n        LogDelegate.i(\"Database creation\");\r\n        execSqlFile(CREATE_QUERY, db);\r\n    } catch (IOException e) {\r\n        throw new DatabaseException(\"Database creation failed: \" + e.getMessage(), e);\r\n    }\r\n}" ],
  "VinylMusicPlayer/429" : [ "getSelected(categories) == 0\n--------------------------------------------------\ngetSelected(categories) > 5", "import code.name.monkey.retromusic.model.CategoryInfo\nprivate fun getSelected(categories: List<CategoryInfo>): Int {\n        var selected = 0\n        for (categoryInfo in categories) {\n            if (categoryInfo.visible)\n                selected++\n        }\n        return selected\n    }" ],
  "Android-Password-Store/0" : [ "@Override\r\npublic void onCreate() {\r\n    PREF_KEY_THEME = getString(R.string.pref_key_theme);\r\n    setAppTheme(getAppTheme(getApplicationContext()));\r\n    final var prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    lockedPreference = prefs.getBoolean(getString(R.string.pref_key_lock), false);\r\n    isGridViewEnabled = getDefaultSharedPreferences(this).getBoolean(getString(R.string.pref_key_gridview), false);\r\n    super.onCreate();\r\n    if (BuildConfig.DEBUG) {\r\n        WebView.setWebContentsDebuggingEnabled(true);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onItemClick(NavigationItem item) {\r\n    final var data = new NotesListWidgetData();\r\n    data.setId(appWidgetId);\r\n    if (item.type != null) {\r\n        switch(item.type) {\r\n            case RECENT:\r\n                {\r\n                    data.setMode(MODE_DISPLAY_ALL);\r\n                    break;\r\n                }\r\n            case FAVORITES:\r\n                {\r\n                    data.setMode(MODE_DISPLAY_STARRED);\r\n                    break;\r\n                }\r\n            case UNCATEGORIZED:\r\n                {\r\n                    data.setMode(MODE_DISPLAY_CATEGORY);\r\n                    data.setCategory(null);\r\n                }\r\n            case DEFAULT_CATEGORY:\r\n            default:\r\n                {\r\n                    if (item.getClass() == NavigationItem.CategoryNavigationItem.class) {\r\n                        data.setMode(MODE_DISPLAY_CATEGORY);\r\n                        data.setCategory(((NavigationItem.CategoryNavigationItem) item).category);\r\n                    } else {\r\n                        data.setMode(MODE_DISPLAY_ALL);\r\n                        Log.e(TAG, \"Unknown item navigation type. Fallback to show \" + RECENT);\r\n                    }\r\n                }\r\n        }\r\n    } else {\r\n        data.setMode(MODE_DISPLAY_ALL);\r\n        Log.e(TAG, \"Unknown item navigation type. Fallback to show \" + RECENT);\r\n    }\r\n    data.setAccountId(localAccount.getId());\r\n    data.setThemeMode(NotesApplication.getAppTheme(getApplicationContext()).getModeId());\r\n    executor.submit(() -> {\r\n        repo.createOrUpdateNoteListWidgetData(data);\r\n        final var updateIntent = new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE, null, getApplicationContext(), NoteListWidget.class).putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);\r\n        setResult(RESULT_OK, updateIntent);\r\n        getApplicationContext().sendBroadcast(updateIntent);\r\n        finish();\r\n    });\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport androidx.preference.PreferenceManager;\r\nimport it.niedermann.owncloud.notes.preferences.DarkModeSetting;\r\nimport it.niedermann.owncloud.notes.preferences.DarkModeSetting\nimport androidx.preference.PreferenceManager\nimport android.content.Context\nimport androidx.preference.PreferenceManager.getDefaultSharedPreferences\npublic static DarkModeSetting getAppTheme(Context context) {\r\n    final var prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n    String mode;\r\n    try {\r\n        mode = prefs.getString(PREF_KEY_THEME, DarkModeSetting.SYSTEM_DEFAULT.name());\r\n    } catch (ClassCastException e) {\r\n        final boolean darkModeEnabled = prefs.getBoolean(PREF_KEY_THEME, false);\r\n        mode = darkModeEnabled ? DarkModeSetting.DARK.name() : DarkModeSetting.LIGHT.name();\r\n    }\r\n    return DarkModeSetting.valueOf(mode);\r\n}" ],
  "Feeder/143" : [ "@Override\r\nprotected void onPostExecute(Pastebin p) {\r\n    if (p != null) {\r\n        String extension = p.getExtension();\r\n        pastebin = p;\r\n        paste.setText(p.getBody());\r\n        filename.setText(p.getName());\r\n        pastebin.setExtension(extension);\r\n        pastebinType.setSelection(adapter.getPosition(pastebin.getExtension()));\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void afterTextChanged(Editable editable) {\r\n    pastebin.setExtension(extension());\r\n    pastebinType.setSelection(adapter.getPosition(extension()));\r\n}\n--------------------------------------------------\n", "public int getPosition(String extension) {\r\n    for (int i = 0; i < data.size(); i++) {\r\n        if (data.get(i).extension.equalsIgnoreCase(extension))\r\n            return i;\r\n    }\r\n    return -1;\r\n}" ],
  "Feeder/144" : [ "hasDiscoveredChildren(storagePath)", "private fun hasDiscoveredChildren(path: String): Boolean {\r\n        for (directory in mediaDirsLocation) if (directory.startsWith(path)) return true\r\n        return false\r\n    }" ],
  "MaterialFiles/759" : [ "R.id.import_folder -> openFolder()\n--------------------------------------------------\nopenFolder(it) {\n    ImportFolderDialog(this, it.path) {\n        NotesHelper(this).getNotes {\n            mNotes = it\n            showSaveButton = false\n            initViewPager()\n        }\n    }\n}", "import java.io.File\nprivate fun openFolder(path: String, onChecksPassed: (file: File) -> Unit) {\r\n        val file = File(path)\r\n        if (file.isDirectory) {\r\n            onChecksPassed(file)\r\n        }\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/423" : [ "private void initializeControls() {\r\n    mViewHolder = new AccountEditViewHolder(this);\r\n    // Initial balance.\r\n    ArrayAdapter<String> adapterSymbol = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, new String[] { \"+\", \"-\" });\r\n    mViewHolder.spinSymbolInitialBalance.setAdapter(adapterSymbol);\r\n    mViewHolder.txtInitialBalance.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Calculator.forActivity(AccountEditActivity.this).currency(mAccount.getCurrencyId()).amount(mAccount.getInitialBalance()).show(RequestCodes.AMOUNT);\r\n        }\r\n    });\r\n    // Account Type adapters and values\r\n    String[] mAccountTypeItems = getResources().getStringArray(R.array.accounttype_items);\r\n    mAccountTypeValues = AccountTypes.getNames();\r\n    ArrayAdapter<String> adapterAccountType = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, mAccountTypeItems);\r\n    adapterAccountType.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    mViewHolder.accountTypeSpinner.setAdapter(adapterAccountType);\r\n    if (!(TextUtils.isEmpty(mAccount.getTypeName()))) {\r\n        if (Arrays.asList(mAccountTypeValues).contains(mAccount.getTypeName())) {\r\n            int position = Arrays.asList(mAccountTypeValues).indexOf(mAccount.getTypeName());\r\n            mViewHolder.accountTypeSpinner.setSelection(position, true);\r\n        }\r\n    } else {\r\n        AccountTypes accountType = getSelectedAccountType();\r\n        mAccount.setType(accountType);\r\n    }\r\n    // Account Status adapters and values\r\n    String[] mAccountStatusItems = getResources().getStringArray(R.array.accountstatus_items);\r\n    mAccountStatusValues = getResources().getStringArray(R.array.accountstatus_values);\r\n    ArrayAdapter<String> adapterAccountStatus = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, mAccountStatusItems);\r\n    mViewHolder.spinAccountStatus.setAdapter(adapterAccountStatus);\r\n    adapterAccountStatus.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    if (!(TextUtils.isEmpty(mAccount.getStatus()))) {\r\n        if (Arrays.asList(mAccountStatusValues).contains(mAccount.getStatus())) {\r\n            mViewHolder.spinAccountStatus.setSelection(Arrays.asList(mAccountStatusValues).indexOf(mAccount.getStatus()), true);\r\n        }\r\n    } else {\r\n        String selectedStatus = (String) mViewHolder.spinAccountStatus.getSelectedItem();\r\n        AccountStatuses status = AccountStatuses.get(selectedStatus);\r\n        mAccount.setStatus(status);\r\n    }\r\n    Date date = mAccount.getInitialDate();\r\n    if (date == null) {\r\n        date = new MmxDate().toDate();\r\n        mAccount.setInitialDate(date);\r\n    }\r\n    showDate(date);\r\n    // Set up control listeners\r\n    initializeDefaultAccountControls();\r\n    mViewHolder.accountTypeSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            if ((position >= 0) && (position <= mAccountTypeValues.length)) {\r\n                //ArrayAdapter<String> adapter = (ArrayAdapter<String>) parent.getAdapter();\r\n                String accountTypeValue = mAccountTypeValues[position];\r\n                AccountTypes accountType = AccountTypes.get(accountTypeValue);\r\n                mAccount.setType(accountType);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    mViewHolder.spinAccountStatus.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            if ((position >= 0) && (position <= mAccountStatusValues.length)) {\r\n                String selectedStatus = mAccountStatusValues[position];\r\n                AccountStatuses status = AccountStatuses.get(selectedStatus);\r\n                mAccount.setStatus(status);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    // Favourite\r\n    initializeFavouriteAccountControls();\r\n    mViewHolder.txtSelectCurrency.setOnClickListener(new OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            Intent intent = new Intent(AccountEditActivity.this, CurrencyListActivity.class);\r\n            intent.setAction(Intent.ACTION_PICK);\r\n            startActivityForResult(intent, RequestCodes.CURRENCY);\r\n        }\r\n    });\r\n    //Date picker\r\n    mViewHolder.txtInitialDate.setOnClickListener(new View.OnClickListener() {\r\n\r\n        final DatePickerDialog.OnDateSetListener listener = (view, year, month, dayOfMonth) -> {\r\n            Date dateTime = dateTimeUtils.from(year, month, dayOfMonth);\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        };\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            MmxDate dateTime = new MmxDate(mAccount.getInitialDate());\r\n            DatePickerDialog datePicker = new DatePickerDialog(AccountEditActivity.this, listener, dateTime.getYear(), dateTime.getMonthOfYear(), dateTime.getDayOfMonth());\r\n            // Customize the DatePickerDialog if needed\r\n            datePicker.show();\r\n        }\r\n    });\r\n    mViewHolder.previousDayButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            Date dateTime = new MmxDate(mAccount.getInitialDate()).minusDays(1).toDate();\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        }\r\n    });\r\n    mViewHolder.nextDayButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View view) {\r\n            Date dateTime = new MmxDate(mAccount.getInitialDate()).plusDays(1).toDate();\r\n            mAccount.setInitialDate(dateTime);\r\n            showDate(dateTime);\r\n        }\r\n    });\r\n    // Notes\r\n    UIHelper ui = new UIHelper(this);\r\n    mViewHolder.edtNotes.setCompoundDrawablesWithIntrinsicBounds(ui.getIcon(GoogleMaterial.Icon.gmd_content_paste), null, null, null);\r\n    // Display data.\r\n    displayAccountValues();\r\n    // Refresh data on the other controls\r\n    refreshCurrencyName();\r\n}\n--------------------------------------------------\n", "import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.List\nimport java.util.ArrayList\npublic static String[] getNames() {\r\n    List<String> list = new ArrayList<>();\r\n    for (AccountTypes type : AccountTypes.values()) {\r\n        list.add(type.title);\r\n    }\r\n    String[] result = new String[list.size()];\r\n    return list.toArray(result);\r\n}" ],
  "MaterialFiles/752" : [ "R.id.import_folder -> openFolder()\n--------------------------------------------------\nopenFolder(it) {\n    ImportFolderDialog(this, it.path) {\n        NotesHelper(this).getNotes {\n            mNotes = it\n            showSaveButton = false\n            initViewPager()\n        }\n    }\n}", "import java.io.File\nprivate fun openFolder(path: String, onChecksPassed: (file: File) -> Unit) {\r\n        val file = File(path)\r\n        if (file.isDirectory) {\r\n            onChecksPassed(file)\r\n        }\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/418" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "VinylMusicPlayer/414" : [ "@Override\r\npublic int hashCode() {\r\n    return mSelection.hashCode() ^ mProvisionalSelection.hashCode();\r\n}\n--------------------------------------------------\n@Override\r\npublic int hashCode() {\r\n    return mSelection.hashCode() ^ mProvisionalSelection.hashCode();\r\n}\n--------------------------------------------------\n", "@Override\r\npublic int hashCode() {\r\n    ensureParsed();\r\n    return super.hashCode();\r\n}" ],
  "VinylMusicPlayer/416" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "Feeder/150" : [ "\"notes\" -> parseList(parser, parser.name, baseNotes, Folder.NOTES)\n--------------------------------------------------\n\"deleted-notes\" -> parseList(parser, parser.name, baseNotes, Folder.DELETED)\n--------------------------------------------------\n\"archived-notes\" -> parseList(parser, parser.name, baseNotes, Folder.ARCHIVED)", "import org.xmlpull.v1.XmlPullParser\nimport com.omgodse.notally.room.Type\nimport com.omgodse.notally.room.Folder\nimport com.omgodse.notally.room.BaseNote\nprivate fun parseList(parser: XmlPullParser, rootTag: String, list: ArrayList<BaseNote>, folder: Folder) {\r\n        while (parser.next() != XmlPullParser.END_DOCUMENT) {\r\n            if (parser.eventType == XmlPullParser.START_TAG) {\r\n                val note = parseBaseNote(parser, parser.name, folder)\r\n                list.add(note)\r\n            } else if (parser.eventType == XmlPullParser.END_TAG) {\r\n                if (parser.name == rootTag) {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, room, Folder], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, Type], wildcard=false, alias=null)\nImport(names=[org, xmlpull, v1, XmlPullParser], wildcard=false, alias=null)" ],
  "Feeder/153" : [ "model.getJSONFile(baseNote)", "import java.io.File\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.omgodse.notally.room.BaseNote\nimport com.omgodse.notally.miscellaneous.IO\nimport com.omgodse.notally.miscellaneous.Export\nsuspend fun getJSONFile(baseNote: BaseNote) = withContext(Dispatchers.IO) {\r\n        val file = File(getExportedPath(), \"Untitled.json\")\r\n        val json = getJSON(baseNote)\r\n        file.writeText(json)\r\n        file\r\n    }\nImport(names=[com, omgodse, notally, room, BaseNote], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "Feeder/156" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/157" : [ "                            .replace(R.id.detail, newEmptyTaskEditFragment())\n                            .runOnCommit {\r\n                                if (isSinglePaneLayout) {\n--------------------------------------------------\n                        .replace(R.id.detail, newTaskEditFragment(task), FRAG_TAG_TASK_EDIT)\n                        .runOnCommit {\r\n                            if (isSinglePaneLayout) {\n--------------------------------------------------\n                    .replace(R.id.master, tlf, FRAG_TAG_TASK_LIST)\n                    .runOnCommit { updateSystemBars(newFilter) }\r\n                    .commit()\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(account).createGtaskList(name)!!\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).deleteGtaskList(list.uuid)\n}\n--------------------------------------------------\nrun {\n    invoker.getGtasksInvoker(list.account!!).renameGtaskList(list.uuid, name)!!\n}\n--------------------------------------------------\ngetEmail(authState.accessToken) ?: run {\n    error(\"Failed to fetch profile\")\n    return@launch\n}\n--------------------------------------------------\nrun {\n    clientProvider.forUrl(url, username, password, foreground = true).getSession()\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).makeCollection(name, color)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).deleteCollection(calendar)\n}\n--------------------------------------------------\nrun {\n    clientProvider.forAccount(account).updateCollection(calendar, name, color)\n}\n--------------------------------------------------\nrun {\n    if (isNullOrEmpty(pass)) {\n        clientProvider.forUrl(url, user, null, session, true).getSession()\n    } else {\n        clientProvider.forUrl(url, user, pass, foreground = true).getSession()\n    }\n}\n--------------------------------------------------\nrun()\n--------------------------------------------------\nthrottle.run {\n    notificationManagerCompat.notify(id, notification)\n}", "import kotlinx.coroutines.runBlocking\nprivate fun run(from: Int, version: Int, runnable: suspend () -> Unit) {\r\n        if (from < version) {\r\n            runBlocking {\r\n                runnable()\r\n            }\r\n            preferences.setCurrentVersion(version)\r\n        }\r\n    }\nimport kotlinx.coroutines.runBlocking" ],
  "Iconify/398" : [ "/**\r\n * recompute a lap aggregate based on locations\r\n */\r\nprivate void recomputeLap(SQLiteDatabase db, long activityId, long lap) {\r\n    long sum_time = 0;\r\n    long sum_hr = 0;\r\n    double sum_distance = 0;\r\n    int count = 0;\r\n    int max_hr = 0;\r\n    final String[] cols = new String[] { DB.LOCATION.TIME, DB.LOCATION.LATITUDE, DB.LOCATION.LONGITUDE, DB.LOCATION.TYPE, DB.LOCATION.HR, //DB.LOCATION.CADENCE,\r\n    //DB.LOCATION.TEMPERATURE,\r\n    //DB.LOCATION.PRESSURE,\r\n    \"_id\" };\r\n    Cursor c = db.query(DB.LOCATION.TABLE, cols, DB.LOCATION.ACTIVITY + \" = \" + activityId + \" and \" + DB.LOCATION.LAP + \" = \" + lap, null, null, null, \"_id\", null);\r\n    if (c.moveToFirst()) {\r\n        do {\r\n            Location l = new Location(\"Dill poh\");\r\n            l.setTime(c.getLong(0));\r\n            l.setLatitude(c.getDouble(1));\r\n            l.setLongitude(c.getDouble(2));\r\n            l.setProvider(\"\" + c.getLong(3));\r\n            int type = c.getInt(3);\r\n            switch(type) {\r\n                case DB.LOCATION.TYPE_START:\r\n                case DB.LOCATION.TYPE_RESUME:\r\n                    _lastLocation = l;\r\n                    _isActive = true;\r\n                    break;\r\n                case DB.LOCATION.TYPE_END:\r\n                case DB.LOCATION.TYPE_PAUSE:\r\n                case DB.LOCATION.TYPE_GPS:\r\n                    if (_lastLocation == null) {\r\n                        _lastLocation = l;\r\n                        break;\r\n                    }\r\n                    if (_isActive) {\r\n                        double diffDist = l.distanceTo(_lastLocation);\r\n                        sum_distance += diffDist;\r\n                        _totalDistance += diffDist;\r\n                        long diffTime = l.getTime() - _lastLocation.getTime();\r\n                        sum_time += diffTime;\r\n                        _totalTime += diffTime;\r\n                        int hr = c.getInt(4);\r\n                        sum_hr += hr;\r\n                        max_hr = Math.max(max_hr, hr);\r\n                        _totalMaxHr = Math.max(_totalMaxHr, hr);\r\n                        count++;\r\n                        _totalCount++;\r\n                        _totalSumHr += hr;\r\n                    }\r\n                    _lastLocation = l;\r\n                    if (type == DB.LOCATION.TYPE_PAUSE || type == DB.LOCATION.TYPE_END) {\r\n                        _isActive = false;\r\n                    }\r\n                    break;\r\n            }\r\n        } while (c.moveToNext());\r\n    }\r\n    c.close();\r\n    ContentValues tmp = new ContentValues();\r\n    tmp.put(DB.LAP.DISTANCE, sum_distance);\r\n    tmp.put(DB.LAP.TIME, Math.round(sum_time / 1000.0d));\r\n    if (sum_hr > 0) {\r\n        long hr = Math.round(sum_hr / (double) count);\r\n        tmp.put(DB.LAP.AVG_HR, hr);\r\n        tmp.put(DB.LAP.MAX_HR, max_hr);\r\n    }\r\n    db.update(DB.LAP.TABLE, tmp, DB.LAP.ACTIVITY + \" = \" + activityId + \" and \" + DB.LAP.LAP + \" = \" + lap, null);\r\n}\n--------------------------------------------------\n/**\r\n * recompute a lap aggregate based on locations\r\n */\r\nprivate void recomputeLap(SQLiteDatabase db, long activityId, long lap) {\r\n    long sum_time = 0;\r\n    long sum_hr = 0;\r\n    double sum_distance = 0;\r\n    int count = 0;\r\n    int max_hr = 0;\r\n    final String[] cols = new String[] { DB.LOCATION.TIME, DB.LOCATION.LATITUDE, DB.LOCATION.LONGITUDE, DB.LOCATION.TYPE, DB.LOCATION.HR, //DB.LOCATION.CADENCE,\r\n    //DB.LOCATION.TEMPERATURE,\r\n    //DB.LOCATION.PRESSURE,\r\n    \"_id\" };\r\n    Cursor c = db.query(DB.LOCATION.TABLE, cols, DB.LOCATION.ACTIVITY + \" = \" + activityId + \" and \" + DB.LOCATION.LAP + \" = \" + lap, null, null, null, \"_id\", null);\r\n    if (c.moveToFirst()) {\r\n        do {\r\n            Location l = new Location(\"Dill poh\");\r\n            l.setTime(c.getLong(0));\r\n            l.setLatitude(c.getDouble(1));\r\n            l.setLongitude(c.getDouble(2));\r\n            l.setProvider(\"\" + c.getLong(3));\r\n            int type = c.getInt(3);\r\n            switch(type) {\r\n                case DB.LOCATION.TYPE_START:\r\n                case DB.LOCATION.TYPE_RESUME:\r\n                    _lastLocation = l;\r\n                    _isActive = true;\r\n                    break;\r\n                case DB.LOCATION.TYPE_END:\r\n                case DB.LOCATION.TYPE_PAUSE:\r\n                case DB.LOCATION.TYPE_GPS:\r\n                    if (_lastLocation == null) {\r\n                        _lastLocation = l;\r\n                        break;\r\n                    }\r\n                    if (_isActive) {\r\n                        double diffDist = l.distanceTo(_lastLocation);\r\n                        sum_distance += diffDist;\r\n                        _totalDistance += diffDist;\r\n                        long diffTime = l.getTime() - _lastLocation.getTime();\r\n                        sum_time += diffTime;\r\n                        _totalTime += diffTime;\r\n                        int hr = c.getInt(4);\r\n                        sum_hr += hr;\r\n                        max_hr = Math.max(max_hr, hr);\r\n                        _totalMaxHr = Math.max(_totalMaxHr, hr);\r\n                        count++;\r\n                        _totalCount++;\r\n                        _totalSumHr += hr;\r\n                    }\r\n                    _lastLocation = l;\r\n                    if (type == DB.LOCATION.TYPE_PAUSE || type == DB.LOCATION.TYPE_END) {\r\n                        _isActive = false;\r\n                    }\r\n                    break;\r\n            }\r\n        } while (c.moveToNext());\r\n    }\r\n    c.close();\r\n    ContentValues tmp = new ContentValues();\r\n    tmp.put(DB.LAP.DISTANCE, sum_distance);\r\n    tmp.put(DB.LAP.TIME, Math.round(sum_time / 1000.0d));\r\n    if (sum_hr > 0) {\r\n        long hr = Math.round(sum_hr / (double) count);\r\n        tmp.put(DB.LAP.AVG_HR, hr);\r\n        tmp.put(DB.LAP.MAX_HR, max_hr);\r\n    }\r\n    db.update(DB.LAP.TABLE, tmp, DB.LAP.ACTIVITY + \" = \" + activityId + \" and \" + DB.LAP.LAP + \" = \" + lap, null);\r\n}\n--------------------------------------------------\n", "public static int getInt(ExternalIdStatus s) {\r\n    if (s == PENDING) {\r\n        return 1;\r\n    } else if (s == OK) {\r\n        return 2;\r\n    }\r\n    return 0;\r\n}" ],
  "Iconify/399" : [ "@Override\r\npublic void emit(Workout s, Context ctx) {\r\n    double val;\r\n    if (trigger != null)\r\n        val = trigger.getValue();\r\n    else\r\n        val = s.get(scope, dimension);\r\n    int cmp = sign * range.compare(val);\r\n    String msg = \"\";\r\n    if (cmp < 0) {\r\n        msg = \" \" + formatter.getCueString(R.string.cue_speedup);\r\n    } else if (cmp > 0) {\r\n        msg = \" \" + formatter.getCueString(R.string.cue_slowdown);\r\n    }\r\n    if (!\"\".contentEquals(msg) && textToSpeech != null) {\r\n        textToSpeech.speak(formatter.getCueString(scope.getCueId()) + \" \" + formatter.format(Formatter.Format.CUE_LONG, dimension, val) + msg, TextToSpeech.QUEUE_ADD, null);\r\n    }\r\n}\n--------------------------------------------------\npublic boolean inside(double d) {\r\n    return compare(d) == 0;\r\n}\n--------------------------------------------------\n", "public int compare(double value) {\r\n    if (value < minValue)\r\n        return -1;\r\n    if (value > maxValue)\r\n        return 1;\r\n    return 0;\r\n}" ],
  "Iconify/396" : [ "@Override\r\npublic Notification createNotification() {\r\n    String distance = formatter.formatDistance(Formatter.Format.TXT_SHORT, Math.round(workoutInfo.getDistance(Scope.ACTIVITY)));\r\n    String time = formatter.formatElapsedTime(Formatter.Format.TXT_LONG, Math.round(workoutInfo.getTime(Scope.ACTIVITY)));\r\n    String pace = formatter.formatVelocityByPreferredUnit(Formatter.Format.TXT_SHORT, workoutInfo.getSpeed(Scope.ACTIVITY));\r\n    String content = String.format(\"%s: %s %s: %s %s: %s\", context.getString(org.runnerup.common.R.string.distance), distance, context.getString(org.runnerup.common.R.string.time), time, context.getString(org.runnerup.common.R.string.pace), pace);\r\n    builder.setContentText(content);\r\n    Notification n = builder.build();\r\n    if (workoutInfo.isPaused()) {\r\n        n.actions[1] = new Notification.Action(org.runnerup.common.R.drawable.ic_av_play_arrow, context.getString(org.runnerup.common.R.string.Resume), n.actions[1].actionIntent);\r\n    } else {\r\n        n.actions[1] = new Notification.Action(org.runnerup.common.R.drawable.ic_av_pause, context.getString(org.runnerup.common.R.string.Pause), n.actions[1].actionIntent);\r\n    }\r\n    return n;\r\n}\n--------------------------------------------------\n@Override\r\npublic void workoutEvent(WorkoutInfo workoutInfo, int type) {\r\n    if (!isConnected())\r\n        return;\r\n    PebbleDictionary data = new PebbleDictionary();\r\n    data.addString(Constants.SPORTS_TIME_KEY, formatter.format(Formatter.Format.TXT_SHORT, Dimension.TIME, workoutInfo.get(Scope.ACTIVITY, Dimension.TIME)));\r\n    data.addString(Constants.SPORTS_DISTANCE_KEY, formatter.format(Formatter.Format.TXT, Dimension.DISTANCE, workoutInfo.get(Scope.ACTIVITY, Dimension.DISTANCE)));\r\n    data.addString(Constants.SPORTS_DATA_KEY, formatter.format(Formatter.Format.TXT_SHORT, Dimension.PACE, workoutInfo.get(Scope.ACTIVITY, Dimension.PACE)));\r\n    if (tracker.isComponentConnected(TrackerHRM.NAME)) {\r\n        data.addUint8(Constants.SPORTS_HR_BPM_KEY, (byte) workoutInfo.getHeartRate(Scope.CURRENT));\r\n    }\r\n    data.addString(Constants.SPORTS_CUSTOM_LABEL_KEY, \"SPEED\");\r\n    data.addString(Constants.SPORTS_CUSTOM_VALUE_KEY, formatter.format(Formatter.Format.TXT_SHORT, Dimension.SPEED, workoutInfo.getSpeed(Scope.CURRENT)));\r\n    data.addUint8(Constants.SPORTS_LABEL_KEY, (byte) Constants.SPORTS_DATA_PACE);\r\n    data.addUint8(Constants.SPORTS_UNITS_KEY, isMetric ? (byte) Constants.SPORTS_UNITS_METRIC : (byte) Constants.SPORTS_UNITS_IMPERIAL);\r\n    PebbleKit.sendDataToPebble(context, Constants.SPORTS_UUID, data);\r\n}\n--------------------------------------------------\n", "public double getSpeed(Workout w, Scope s) {\r\n    double t = getTime(w, s);\r\n    double d = getDistance(w, s);\r\n    if (t != 0) {\r\n        return d / t;\r\n    }\r\n    return 0;\r\n}" ],
  "Iconify/397" : [ "private static boolean latIsGridPoint(double lat) {\r\n    return latOk(lat) && (latIsPole(lat) || lat == LATITUDE_MAX_GRID || lat == LATITUDE_MIN_GRID || lat <= LATITUDE_ROW_FIRST && lat >= LATITUDE_ROW_LAST && lat / LATITUDE_STEP == Math.round(lat / LATITUDE_STEP));\r\n}\n--------------------------------------------------\nprivate static boolean lngIsGridPoint(double lng) {\r\n    return lngOkGrid(lng) && lng / LONGITIDE_STEP == Math.round(lng / LONGITIDE_STEP);\r\n}\n--------------------------------------------------\n", "public static double round(double base, double decimals) {\r\n    double exp = Math.pow(10, decimals);\r\n    return Math.round(base * exp) / exp;\r\n}" ],
  "Trail-Sense/1241" : [ "{\n        super.onNoteLoaded(note)\r\n        Log.d(TAG, \"onNoteLoaded() called\")\n--------------------------------------------------\n        super.onNoteLoaded(note)\n        Log.d(TAG, \"onNoteLoaded() called\")\r\n        val newNoteParam = arguments?.getSerializable(PARAM_NEWNOTE) as Note?", "import it.niedermann.owncloud.notes.persistence.entity.Note\nimport it.niedermann.owncloud.notes.R\nimport android.webkit.WebView\nimport android.view.View\nimport android.util.Log\noverride fun onNoteLoaded(note: Note) {\r\n        super.onNoteLoaded(note)\r\n        Log.d(TAG, \"onNoteLoaded() called\")\r\n        val newNoteParam = arguments?.getSerializable(PARAM_NEWNOTE) as Note?\r\n        if (newNoteParam != null || note.remoteId == null) {\r\n            createAndLoadNote(note)\r\n        } else {\r\n            loadNoteInWebView(note)\r\n        }\r\n    }\nimport android.util.Log\nimport android.view.View\nimport android.webkit.WebView\nimport it.niedermann.owncloud.notes.R\nimport it.niedermann.owncloud.notes.persistence.entity.Note" ],
  "Neo-Backup/332" : [ "alarmManager.scheduleAlarm(alarm, context)\n--------------------------------------------------\nalarmManager.scheduleAlarm(it, context)", "import com.mhss.app.mybrain.util.Constants\nimport com.mhss.app.mybrain.domain.model.Alarm\nimport androidx.core.app.AlarmManagerCompat\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\nimport android.app.AlarmManager\nfun AlarmManager.scheduleAlarm(alarm: Alarm, context: Context) {\r\n\r\n    val intent = Intent(context, AlarmReceiver::class.java)\r\n    intent.putExtra(Constants.TASK_ID_EXTRA, alarm.id)\r\n    val pendingIntent = PendingIntent.getBroadcast(\r\n        context,\r\n        alarm.id,\r\n        intent,\r\n        PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT\r\n    )\r\n    AlarmManagerCompat.setExactAndAllowWhileIdle(this, AlarmManager.RTC_WAKEUP, alarm.time, pendingIntent)\r\n}\nImport(names=[android, app, AlarmManager], wildcard=false, alias=null)\nImport(names=[android, app, PendingIntent], wildcard=false, alias=null)\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[androidx, core, app, AlarmManagerCompat], wildcard=false, alias=null)\nImport(names=[com, mhss, app, mybrain, domain, model, Alarm], wildcard=false, alias=null)" ],
  "Trail-Sense/1246" : [ "", "import com.fsck.k9.ui.R\noverride fun doPositiveClick(dialogId: Int) {\r\n        if (dialogId == R.id.dialog_confirm_delete) {\r\n            delete()\r\n        } else if (dialogId == R.id.dialog_confirm_spam) {\r\n            val destinationFolderId = checkNotNull(this.destinationFolderId)\r\n\r\n            refileMessage(destinationFolderId)\r\n            this.destinationFolderId = null\r\n        }\r\n    }\nimport com.fsck.k9.ui.R" ],
  "Neo-Backup/330" : [ "it.createdDate.inTheLast30Days()", "fun Long.inTheLast30Days(): Boolean {\r\n    val calendar = Calendar.getInstance()\r\n    calendar.add(Calendar.MONTH, -1)\r\n    return this > calendar.timeInMillis\r\n}" ],
  "Trail-Sense/1247" : [ "                viewState = ViewState.Success\n                chartData = getChartData(top10ShareNumber.toFloat(), blockchain)\r\n                topHolders = factory.getCoinMajorHolders(result)\n--------------------------------------------------\n                marketCapDiff,\n                getChartData(totalMarketCapPoints),\r\n                MetricsType.TotalMarketCap\n--------------------------------------------------\n                volume24hDiff,\n                getChartData(volume24Points),\r\n                MetricsType.Volume24h\n--------------------------------------------------\n                defiMarketCapDiff,\n                getChartData(defiMarketCapPoints),\r\n                MetricsType.DefiCap\n--------------------------------------------------\n                tvlDiff,\n                getChartData(defiTvlPoints),\r\n                MetricsType.TvlInDefi", "import io.horizontalsystems.marketkit.models.MarketOverview\nimport io.horizontalsystems.chartview.models.ChartPoint\nimport io.horizontalsystems.chartview.ChartData\nimport io.horizontalsystems.bankwallet.modules.market.overview.MarketOverviewModule.MarketMetricsPoint\nimport io.horizontalsystems.bankwallet.modules.market.overview.MarketOverviewModule.MarketMetrics\nprivate fun getChartData(marketMetricsPoints: List<MarketMetricsPoint>): ChartData? {\r\n        if (marketMetricsPoints.isEmpty()) return null\r\n\r\n        val points = marketMetricsPoints.map { ChartPoint(it.value.toFloat(), it.timestamp) }\r\n        return ChartData(points, true, false)\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.overview.MarketOverviewModule.MarketMetrics\nimport io.horizontalsystems.bankwallet.modules.market.overview.MarketOverviewModule.MarketMetricsPoint\nimport io.horizontalsystems.chartview.ChartData\nimport io.horizontalsystems.chartview.models.ChartPoint\nimport io.horizontalsystems.marketkit.models.MarketOverview" ],
  "Neo-Backup/334" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/335" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/408" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "Trail-Sense/966" : [ "            onClickListener = { _, _, item, _ ->\n                handleItemClick(item)\r\n                true", "import com.mikepenz.fastadapter.GenericItem\nimport com.fsck.k9.Account\nimport androidx.navigation.fragment.findNavController\nprivate fun handleItemClick(item: GenericItem) {\r\n        when (item) {\r\n            is AccountItem -> launchAccountSettings(item.account)\r\n            is UrlActionItem -> openUrl(item.url)\r\n            is SettingsActionItem -> findNavController().navigate(item.navigationAction)\r\n        }\r\n    }\nimport androidx.navigation.fragment.findNavController\nimport com.fsck.k9.Account\nimport com.mikepenz.fastadapter.GenericItem" ],
  "Neo-Backup/327" : [ "/**\r\n * Updates default language with forced one\r\n */\r\n@SuppressLint(\"ApplySharedPref\")\r\npublic static Context updateLanguage(Context ctx, String lang) {\r\n    String language = Prefs.getString(PREF_LANG, \"\");\r\n    Locale locale = null;\r\n    if (TextUtils.isEmpty(language) && lang == null) {\r\n        locale = Locale.getDefault();\r\n    } else if (lang != null) {\r\n        locale = getLocale(lang);\r\n        Prefs.edit().putString(PREF_LANG, lang).commit();\r\n    } else if (!TextUtils.isEmpty(language)) {\r\n        locale = getLocale(language);\r\n    }\r\n    return setLocale(ctx, locale);\r\n}\n--------------------------------------------------\npublic static Context resetSystemLanguage(Context ctx) {\r\n    Prefs.edit().remove(PREF_LANG).apply();\r\n    return setLocale(ctx, Locale.getDefault());\r\n}\n--------------------------------------------------\n", "import android.content.Context;\r\nimport android.content.res.Configuration;\r\nimport java.util.Locale;\r\nimport java.util.Locale\nimport android.content.res.Configuration\nimport android.content.Context\nprivate static Context setLocale(Context context, Locale locale) {\r\n    Configuration configuration = context.getResources().getConfiguration();\r\n    configuration.locale = locale;\r\n    context.getResources().updateConfiguration(configuration, null);\r\n    return context;\r\n}" ],
  "VinylMusicPlayer/1113" : [ "super.onInterceptTouchEvent(event)", "import android.view.MotionEvent\noverride fun onInterceptTouchEvent(event: MotionEvent): Boolean {\r\n        return if (isScrollable) {\r\n            super.onInterceptTouchEvent(event)\r\n        } else {\r\n            false\r\n        }\r\n    }\nImport(names=[android, view, MotionEvent], wildcard=false, alias=null)" ],
  "Trail-Sense/968" : [ "", "import com.simplemobiletools.notes.pro.models.Note\noverride fun onResume() {\r\n        super.onResume()\r\n        loadNoteById(noteId)\r\n    }" ],
  "VinylMusicPlayer/1119" : [ "", "import android.util.Log;\r\nimport android.view.MotionEvent;\r\nimport android.view.MotionEvent\nimport android.util.Log\npublic void onLongPress(MotionEvent event) {\r\n    // todo Trigger context menu\r\n    Log.d(\"test\", \"test\");\r\n}" ],
  "VinylMusicPlayer/888" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "Trail-Sense/969" : [ "override fun onResume() {\n    super.onResume()\n    updateHelper.start()\n}", "override fun onPause() {\n        super.onPause()\n        updateHelper.stop()\n    }" ],
  "VinylMusicPlayer/1118" : [ "", "import android.view.MotionEvent\noverride fun onSingleTapUp(e: MotionEvent): Boolean {\r\n            val position = holder.adapterPosition\r\n            controller.get().onItemClick(position)\r\n            return true\r\n        }\nImport(names=[android, view, MotionEvent], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/403" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/887" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1117" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1116" : [ "@Override\r\npublic long read(Buffer sink, long byteCount) throws IOException {\r\n    long bytesRead = super.read(sink, byteCount);\r\n    // read() returns the number of bytes read, or -1 if this source is exhausted.\r\n    totalBytesRead += bytesRead != -1 ? bytesRead : 0;\r\n    progressListener.update(totalBytesRead, responseBody.contentLength(), bytesRead == -1);\r\n    return bytesRead;\r\n}\n--------------------------------------------------\nprivate Uri writeResponseBodyToDisk(ResponseBody body, boolean isDefaultDestination, String destinationFileUriString, String destinationFileName, int mediaType) throws IOException {\r\n    ContentResolver contentResolver = getContentResolver();\r\n    if (isDefaultDestination) {\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\r\n            InputStream inputStream = body.byteStream();\r\n            OutputStream outputStream = new FileOutputStream(destinationFileUriString);\r\n            byte[] fileReader = new byte[4096];\r\n            long fileSize = body.contentLength();\r\n            long fileSizeDownloaded = 0;\r\n            while (true) {\r\n                int read = inputStream.read(fileReader);\r\n                if (read == -1) {\r\n                    break;\r\n                }\r\n                outputStream.write(fileReader, 0, read);\r\n                fileSizeDownloaded += read;\r\n            }\r\n            outputStream.flush();\r\n        } else {\r\n            ContentValues contentValues = new ContentValues();\r\n            contentValues.put(MediaStore.MediaColumns.DISPLAY_NAME, destinationFileName);\r\n            String mimeType;\r\n            switch(mediaType) {\r\n                case EXTRA_MEDIA_TYPE_VIDEO:\r\n                    mimeType = \"video/mpeg\";\r\n                    break;\r\n                case EXTRA_MEDIA_TYPE_GIF:\r\n                    mimeType = \"image/gif\";\r\n                    break;\r\n                default:\r\n                    mimeType = \"image/jpeg\";\r\n            }\r\n            contentValues.put(MediaStore.MediaColumns.MIME_TYPE, mimeType);\r\n            contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH, destinationFileUriString);\r\n            contentValues.put(MediaStore.MediaColumns.IS_PENDING, 1);\r\n            final Uri contentUri = mediaType == EXTRA_MEDIA_TYPE_VIDEO ? MediaStore.Video.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY) : MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);\r\n            Uri uri = contentResolver.insert(contentUri, contentValues);\r\n            if (uri == null) {\r\n                throw new IOException(\"Failed to create new MediaStore record.\");\r\n            }\r\n            OutputStream stream = contentResolver.openOutputStream(uri);\r\n            if (stream == null) {\r\n                throw new IOException(\"Failed to get output stream.\");\r\n            }\r\n            InputStream in = body.byteStream();\r\n            byte[] buf = new byte[1024];\r\n            int len;\r\n            while ((len = in.read(buf)) > 0) {\r\n                stream.write(buf, 0, len);\r\n            }\r\n            contentValues.clear();\r\n            contentValues.put(MediaStore.MediaColumns.IS_PENDING, 0);\r\n            contentResolver.update(uri, contentValues, null, null);\r\n            destinationFileUriString = uri.toString();\r\n        }\r\n    } else {\r\n        try (OutputStream stream = contentResolver.openOutputStream(Uri.parse(destinationFileUriString))) {\r\n            if (stream == null) {\r\n                throw new IOException(\"Failed to get output stream.\");\r\n            }\r\n            InputStream in = body.byteStream();\r\n            byte[] buf = new byte[1024];\r\n            int len;\r\n            while ((len = in.read(buf)) > 0) {\r\n                stream.write(buf, 0, len);\r\n            }\r\n        }\r\n    }\r\n    return Uri.parse(destinationFileUriString);\r\n}\n--------------------------------------------------\n", "import ml.docilealligator.infinityforreddit.R\nimport android.app.Notification\n@Override\r\npublic void update(long bytesRead, long contentLength, boolean done) {\r\n    if (!done) {\r\n        if (contentLength != -1) {\r\n            long currentTime = System.currentTimeMillis();\r\n            if (currentTime - time > 1000) {\r\n                time = currentTime;\r\n                updateNotification(0, (int) ((100 * bytesRead) / contentLength), randomNotificationIdOffset, null);\r\n            }\r\n        }\r\n    }\r\n}" ],
  "fcitx5-android/247" : [ "applyColor(ThemeStore.accentColor(context))\n--------------------------------------------------\nshuffleAction.applyColor(color)\n--------------------------------------------------\nbinding.progressSlider.applyColor(colorFinal)\n--------------------------------------------------\nbinding.progressSlider.applyColor(lastPlaybackControlsColor)\n--------------------------------------------------\nbinding.progressSlider.applyColor(Color.WHITE)\n--------------------------------------------------\nbinding.progressSlider.applyColor(color.primaryTextColor)\n--------------------------------------------------\nbinding.progressSlider.applyColor(controlsColor)", "import com.google.android.material.button.MaterialButton\nimport code.name.monkey.appthemehelper.util.MaterialValueHelper\nimport code.name.monkey.appthemehelper.util.ColorUtil\nimport android.widget.Button\nimport android.graphics.Color\nimport android.content.res.ColorStateList\nfun MaterialButton.applyColor(color: Int) {\n    val backgroundColorStateList = ColorStateList.valueOf(color)\n    val textColorColorStateList = ColorStateList.valueOf(\n        MaterialValueHelper.getPrimaryTextColor(\n            context,\n            ColorUtil.isColorLight(color)\n        )\n    )\n    backgroundTintList = backgroundColorStateList\n    setTextColor(textColorColorStateList)\n    iconTint = textColorColorStateList\n}\nImport(names=[android, content, res, ColorStateList], wildcard=false, alias=null)\nImport(names=[android, graphics, Color], wildcard=false, alias=null)\nImport(names=[code, name, monkey, appthemehelper, util, ColorUtil], wildcard=false, alias=null)\nImport(names=[code, name, monkey, appthemehelper, util, MaterialValueHelper], wildcard=false, alias=null)\nImport(names=[com, google, android, material, button, MaterialButton], wildcard=false, alias=null)" ],
  "Trail-Sense/1251" : [ "cacheMap = convertToCacheMap(dao.getAll())\n--------------------------------------------------\ncacheMap + convertToCacheMap(list)", "import io.horizontalsystems.bankwallet.entities.Wallet\nimport io.horizontalsystems.bankwallet.entities.EnabledWalletCache\nimport io.horizontalsystems.bankwallet.core.BalanceData\nprivate fun convertToCacheMap(list: List<EnabledWalletCache>): Map<String, BalanceData> {\r\n        return list.map {\r\n            val key = listOf(it.tokenQueryId, it.accountId).joinToString()\r\n            key to BalanceData(it.balance, it.balanceLocked)\r\n        }.toMap()\r\n    }\nImport(names=[io, horizontalsystems, bankwallet, core, BalanceData], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/400" : [ "@Override\r\npublic String getText() {\r\n    parse(false);\r\n    if (valid) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < lines.size(); i++) {\r\n            String line = lines.valueAt(i);\r\n            sb.append(line).append(\"\\r\\n\");\r\n        }\r\n        return sb.toString().trim().replaceAll(\"(\\r?\\n){3,}\", \"\\r\\n\\r\\n\");\r\n    }\r\n    return super.getText();\r\n}\n--------------------------------------------------\npublic boolean isValid() {\r\n    parse(true);\r\n    return valid;\r\n}\n--------------------------------------------------\n", "import code.name.monkey.retromusic.model.Song;\r\nimport code.name.monkey.retromusic.model.Song\npublic static Lyrics parse(Song song, String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(song, data);\r\n            if (lyrics.isValid()) {\r\n                return lyrics.parse(false);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return new Lyrics().setData(song, data).parse(false);\r\n}" ],
  "Trail-Sense/1256" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/344" : [ "", "import androidx.leanback.widget.ImageCardView\nimport androidx.databinding.BindingAdapter\nimport android.view.View\n\r\n@BindingAdapter(\"icvTitle\")\r\nfun imageCardViewTitle(v: View, title: String?) {\r\n    if (v is ImageCardView) {\r\n        v.titleText = title\r\n    }\r\n}\nImport(names=[android, view, View], wildcard=false, alias=null)\nImport(names=[androidx, leanback, widget, ImageCardView], wildcard=false, alias=null)" ],
  "Trail-Sense/970" : [ "TextUtils.equals(status, \"CONNECTED\")\n--------------------------------------------------\nTextUtils.equals(status, \"FAILED\")\n--------------------------------------------------\nsuper.equals(other)\n--------------------------------------------------\nother.address.equals(address, ignoreCase = true)\n--------------------------------------------------\naddress.equals(uniswapKit.etherToken().address.hex, true)\n--------------------------------------------------\naddress.equals(uniswapV3Kit.etherToken().address.hex, true)\n--------------------------------------------------\nmanufacturer.equals(Build.MANUFACTURER, ignoreCase = true)", "import io.horizontalsystems.marketkit.models.Coin\noverride fun equals(other: Any?): Boolean {\r\n        if (other is CoinValue) {\r\n            return coin.uid == other.coin.uid && value == other.value\r\n        }\r\n\r\n        return super.equals(other)\r\n    }\nImport(names=[io, horizontalsystems, marketkit, models, Coin], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/402" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/401" : [ "", "public static boolean isSynchronized(String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(null, data);\r\n            if (lyrics.isValid()) {\r\n                return true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return false;\r\n}" ],
  "Neo-Backup/347" : [ "extendAddOns(it)", "import com.kickstarter.models.Reward\nimport com.kickstarter.R\nprivate fun extendAddOns(flattenedList: List<Reward>): List<Reward> {\r\n            val mutableList = mutableListOf<Reward>()\r\n\r\n            flattenedList.map {\r\n                if (!it.isAddOn()) mutableList.add(it)\r\n                else {\r\n                    val q = it.quantity() ?: 1\r\n                    for (i in 1..q) {\r\n                        mutableList.add(it)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return mutableList.toList()\r\n        }" ],
  "VinylMusicPlayer/880" : [ "this@AbsMusicServiceActivity.onServiceConnected()\n--------------------------------------------------\nlistener.onServiceConnected()\n--------------------------------------------------\nsuper.onServiceConnected()", "import code.name.monkey.retromusic.model.Song\noverride fun onServiceConnected() {\n        super.onServiceConnected()\n        updateIsFavorite()\n        updateSong()\n    }" ],
  "Neo-Backup/348" : [ "extendAddOns(it)", "import com.kickstarter.models.Reward\nimport com.kickstarter.R\nprivate fun extendAddOns(flattenedList: List<Reward>): List<Reward> {\r\n            val mutableList = mutableListOf<Reward>()\r\n\r\n            flattenedList.map {\r\n                if (!it.isAddOn()) mutableList.add(it)\r\n                else {\r\n                    val q = it.quantity() ?: 1\r\n                    for (i in 1..q) {\r\n                        mutableList.add(it)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return mutableList.toList()\r\n        }" ],
  "Trail-Sense/973" : [ "onButtonCheckInClick()", "import com.battlelancer.seriesguide.traktapi.MovieCheckInDialogFragment\nimport androidx.fragment.app.Fragment\nprivate fun onButtonCheckInClick() {\r\n        movieTitle?.let {\r\n            if (it.isEmpty()) {\r\n                return\r\n            }\r\n            MovieCheckInDialogFragment.show(parentFragmentManager, tmdbId, it)\r\n        }\r\n    }\nImport(names=[com, battlelancer, seriesguide, traktapi, MovieCheckInDialogFragment], wildcard=false, alias=null)" ],
  "Neo-Backup/345" : [ "            val newValue = locale\n                .parseInteger(it)\r\n                ?: 0", "import java.text.ParseException\nimport java.text.NumberFormat\nfun Locale.parseInteger(number: String?): Int? {\r\n    return try {\r\n        NumberFormat.getNumberInstance(this).parse(number).toInt()\r\n    } catch (e: ParseException) {\r\n        null\r\n    }\r\n}\nImport(names=[java, text, NumberFormat], wildcard=false, alias=null)\nImport(names=[java, text, ParseException], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/881" : [ "listener.onPlayingMetaChanged()\n--------------------------------------------------\nactivity.onPlayingMetaChanged()\n--------------------------------------------------\nsuper.onPlayingMetaChanged()", "override fun onPlayingMetaChanged() {\n        super.onPlayingMetaChanged()\n        updateSong()\n    }" ],
  "Trail-Sense/1259" : [ "tasksRepository.getTaskById(id)\n--------------------------------------------------\n            val task =\n                intent?.getIntExtra(Constants.TASK_ID_EXTRA, 0)?.let { getTaskByIdUseCase(it) }\r\n                    ?: kotlin.run {", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Task\noverride suspend fun getTaskById(id: Int): Task {\r\n        return withContext(ioDispatcher) {\r\n            taskDao.getTask(id)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Task], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/1104" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "Trail-Sense/976" : [ "", "private fun handleUpdatedSearchState(searchState: MarketSearchService.State) {\r\n        this.searchState = searchState\r\n\r\n        emitState()\r\n    }" ],
  "Trail-Sense/977" : [ "refreshPluginData()", "import io.horizontalsystems.hodler.HodlerPlugin\nimport io.horizontalsystems.hodler.HodlerData\nprivate fun refreshPluginData() {\r\n        pluginData = lockTimeInterval?.let {\r\n            mapOf(HodlerPlugin.id to HodlerData(it))\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, hodler, HodlerData], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/1103" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/1102" : [ "void editNote(final Note note, final View view) {\r\n    if (note.isLocked() && !Prefs.getBoolean(\"settings_password_access\", false)) {\r\n        PasswordHelper.requestPassword(mainActivity, passwordConfirmed -> {\r\n            if (passwordConfirmed.equals(PasswordValidator.Result.SUCCEED)) {\r\n                note.setPasswordChecked(true);\r\n                AnimationsHelper.zoomListItem(mainActivity, view, getZoomListItemView(view, note), binding.listRoot, buildAnimatorListenerAdapter(note));\r\n            }\r\n        });\r\n    } else {\r\n        AnimationsHelper.zoomListItem(mainActivity, view, getZoomListItemView(view, note), binding.listRoot, buildAnimatorListenerAdapter(note));\r\n    }\r\n}\n--------------------------------------------------\nvoid editNote(final Note note, final View view) {\r\n    if (note.isLocked() && !Prefs.getBoolean(\"settings_password_access\", false)) {\r\n        PasswordHelper.requestPassword(mainActivity, passwordConfirmed -> {\r\n            if (passwordConfirmed.equals(PasswordValidator.Result.SUCCEED)) {\r\n                note.setPasswordChecked(true);\r\n                AnimationsHelper.zoomListItem(mainActivity, view, getZoomListItemView(view, note), binding.listRoot, buildAnimatorListenerAdapter(note));\r\n            }\r\n        });\r\n    } else {\r\n        AnimationsHelper.zoomListItem(mainActivity, view, getZoomListItemView(view, note), binding.listRoot, buildAnimatorListenerAdapter(note));\r\n    }\r\n}\n--------------------------------------------------\n", "import android.animation.Animator;\r\nimport android.animation.AnimatorListenerAdapter;\r\nimport it.feio.android.omninotes.models.Note;\r\nimport java.util.List;\r\nimport java.util.List\nimport it.feio.android.omninotes.models.Note\nimport android.animation.AnimatorListenerAdapter\nimport android.animation.Animator\n/**\r\n * Listener that fires note opening once the zooming animation is finished\r\n */\r\nprivate AnimatorListenerAdapter buildAnimatorListenerAdapter(final Note note) {\r\n    return new AnimatorListenerAdapter() {\r\n\r\n        @Override\r\n        public void onAnimationEnd(Animator animation) {\r\n            editNote2(note);\r\n        }\r\n    };\r\n}" ],
  "Trail-Sense/979" : [ "refreshPluginData()", "import io.horizontalsystems.hodler.HodlerPlugin\nimport io.horizontalsystems.hodler.HodlerData\nprivate fun refreshPluginData() {\r\n        pluginData = lockTimeInterval?.let {\r\n            mapOf(HodlerPlugin.id to HodlerData(it))\r\n        }\r\n    }\nImport(names=[io, horizontalsystems, hodler, HodlerData], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/877" : [ "", "import java.util.List\nimport android.view.View\nimport android.view.MenuItem\n@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    if (recyclerAdapter != null) {\r\n        recyclerAdapter.endSelectMode();\r\n    }\r\n    recyclerAdapter = null;\r\n    if (toolbar != null) {\r\n        toolbar.setOnMenuItemClickListener(null);\r\n        toolbar.setOnLongClickListener(null);\r\n    }\r\n}" ],
  "VinylMusicPlayer/1107" : [ "@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    binding = ScanActivityBinding.inflate(getLayoutInflater());\r\n    customBarcodeScannerBinding = CustomBarcodeScannerBinding.bind(binding.zxingBarcodeScanner);\r\n    setTitle(R.string.scanCardBarcode);\r\n    setContentView(binding.getRoot());\r\n    Toolbar toolbar = binding.toolbar;\r\n    setSupportActionBar(toolbar);\r\n    enableToolbarBackButton();\r\n    extractIntentFields(getIntent());\r\n    manualAddLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> handleActivityResult(Utils.SELECT_BARCODE_REQUEST, result.getResultCode(), result.getData()));\r\n    photoPickerLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> handleActivityResult(Utils.BARCODE_IMPORT_FROM_IMAGE_FILE, result.getResultCode(), result.getData()));\r\n    customBarcodeScannerBinding.fabOtherOptions.setOnClickListener(view -> {\r\n        setScannerActive(false);\r\n        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(ScanActivity.this);\r\n        builder.setTitle(getString(R.string.add_a_card_in_a_different_way));\r\n        builder.setItems(new CharSequence[] { getString(R.string.addWithoutBarcode), getString(R.string.addManually), getString(R.string.addFromImage) }, (dialogInterface, i) -> {\r\n            switch(i) {\r\n                case 0:\r\n                    addWithoutBarcode();\r\n                    break;\r\n                case 1:\r\n                    addManually();\r\n                    break;\r\n                case 2:\r\n                    addFromImage();\r\n                    break;\r\n                default:\r\n                    throw new IllegalArgumentException(\"Unknown 'Add a card in a different way' dialog option\");\r\n            }\r\n        });\r\n        builder.setOnCancelListener(dialogInterface -> setScannerActive(true));\r\n        builder.show();\r\n    });\r\n    barcodeScannerView = binding.zxingBarcodeScanner;\r\n    // Even though we do the actual decoding with the barcodeScannerView\r\n    // CaptureManager needs to be running to show the camera and scanning bar\r\n    capture = new CatimaCaptureManager(this, barcodeScannerView);\r\n    Intent captureIntent = new Intent();\r\n    Bundle captureIntentBundle = new Bundle();\r\n    captureIntentBundle.putBoolean(Intents.Scan.BEEP_ENABLED, false);\r\n    captureIntent.putExtras(captureIntentBundle);\r\n    capture.initializeFromIntent(captureIntent, savedInstanceState);\r\n    barcodeScannerView.decodeSingle(new BarcodeCallback() {\r\n\r\n        @Override\r\n        public void barcodeResult(BarcodeResult result) {\r\n            Intent scanResult = new Intent();\r\n            Bundle scanResultBundle = new Bundle();\r\n            scanResultBundle.putString(BARCODE_CONTENTS, result.getText());\r\n            scanResultBundle.putString(BARCODE_FORMAT, result.getBarcodeFormat().name());\r\n            if (addGroup != null) {\r\n                scanResultBundle.putString(LoyaltyCardEditActivity.BUNDLE_ADDGROUP, addGroup);\r\n            }\r\n            scanResult.putExtras(scanResultBundle);\r\n            ScanActivity.this.setResult(RESULT_OK, scanResult);\r\n            finish();\r\n        }\r\n\r\n        @Override\r\n        public void possibleResultPoints(List<ResultPoint> resultPoints) {\r\n        }\r\n    });\r\n}\n--------------------------------------------------\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    binding = ScanActivityBinding.inflate(getLayoutInflater());\r\n    customBarcodeScannerBinding = CustomBarcodeScannerBinding.bind(binding.zxingBarcodeScanner);\r\n    setTitle(R.string.scanCardBarcode);\r\n    setContentView(binding.getRoot());\r\n    Toolbar toolbar = binding.toolbar;\r\n    setSupportActionBar(toolbar);\r\n    enableToolbarBackButton();\r\n    extractIntentFields(getIntent());\r\n    manualAddLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> handleActivityResult(Utils.SELECT_BARCODE_REQUEST, result.getResultCode(), result.getData()));\r\n    photoPickerLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> handleActivityResult(Utils.BARCODE_IMPORT_FROM_IMAGE_FILE, result.getResultCode(), result.getData()));\r\n    customBarcodeScannerBinding.fabOtherOptions.setOnClickListener(view -> {\r\n        setScannerActive(false);\r\n        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(ScanActivity.this);\r\n        builder.setTitle(getString(R.string.add_a_card_in_a_different_way));\r\n        builder.setItems(new CharSequence[] { getString(R.string.addWithoutBarcode), getString(R.string.addManually), getString(R.string.addFromImage) }, (dialogInterface, i) -> {\r\n            switch(i) {\r\n                case 0:\r\n                    addWithoutBarcode();\r\n                    break;\r\n                case 1:\r\n                    addManually();\r\n                    break;\r\n                case 2:\r\n                    addFromImage();\r\n                    break;\r\n                default:\r\n                    throw new IllegalArgumentException(\"Unknown 'Add a card in a different way' dialog option\");\r\n            }\r\n        });\r\n        builder.setOnCancelListener(dialogInterface -> setScannerActive(true));\r\n        builder.show();\r\n    });\r\n    barcodeScannerView = binding.zxingBarcodeScanner;\r\n    // Even though we do the actual decoding with the barcodeScannerView\r\n    // CaptureManager needs to be running to show the camera and scanning bar\r\n    capture = new CatimaCaptureManager(this, barcodeScannerView);\r\n    Intent captureIntent = new Intent();\r\n    Bundle captureIntentBundle = new Bundle();\r\n    captureIntentBundle.putBoolean(Intents.Scan.BEEP_ENABLED, false);\r\n    captureIntent.putExtras(captureIntentBundle);\r\n    capture.initializeFromIntent(captureIntent, savedInstanceState);\r\n    barcodeScannerView.decodeSingle(new BarcodeCallback() {\r\n\r\n        @Override\r\n        public void barcodeResult(BarcodeResult result) {\r\n            Intent scanResult = new Intent();\r\n            Bundle scanResultBundle = new Bundle();\r\n            scanResultBundle.putString(BARCODE_CONTENTS, result.getText());\r\n            scanResultBundle.putString(BARCODE_FORMAT, result.getBarcodeFormat().name());\r\n            if (addGroup != null) {\r\n                scanResultBundle.putString(LoyaltyCardEditActivity.BUNDLE_ADDGROUP, addGroup);\r\n            }\r\n            scanResult.putExtras(scanResultBundle);\r\n            ScanActivity.this.setResult(RESULT_OK, scanResult);\r\n            finish();\r\n        }\r\n\r\n        @Override\r\n        public void possibleResultPoints(List<ResultPoint> resultPoints) {\r\n        }\r\n    });\r\n}\n--------------------------------------------------\n", "import android.view.View\nprivate void setScannerActive(boolean isActive) {\r\n    if (isActive) {\r\n        barcodeScannerView.resume();\r\n    } else {\r\n        barcodeScannerView.pause();\r\n    }\r\n    mScannerActive = isActive;\r\n}" ],
  "VinylMusicPlayer/1106" : [ "togglePlayerState()", "fun togglePlayerState() {\r\n        if (!isPrepared) return\r\n        if (mediaPlayer.isPlaying) {\r\n            pausePlayer()\r\n        } else {\r\n            startPlayer()\r\n        }\r\n    }" ],
  "fcitx5-android/230" : [ "", "fun setAmountEnabled(enabled: Boolean) {\r\n        amountEnabled = enabled\r\n        syncState()\r\n    }" ],
  "VinylMusicPlayer/879" : [ "", "import com.simplemobiletools.notes.pro.models.Note\noverride fun onResume() {\r\n        super.onResume()\r\n        loadNoteById(noteId)\r\n    }" ],
  "VinylMusicPlayer/1105" : [ "public void connect(final Callback callback, final String name) {\r\n    Synchronizer synchronizer = synchronizers.get(name);\r\n    if (synchronizer == null) {\r\n        callback.run(name, Synchronizer.Status.INCORRECT_USAGE);\r\n        return;\r\n    }\r\n    Status s = synchronizer.connect();\r\n    if (s == Synchronizer.Status.NEED_REFRESH) {\r\n        s = handleRefreshComplete(synchronizer, synchronizer.refreshToken());\r\n    }\r\n    switch(s) {\r\n        case OK:\r\n            callback.run(name, s);\r\n            return;\r\n        case NEED_AUTH:\r\n            mSpinner.show();\r\n            handleAuth((synchronizerName, status) -> {\r\n                mSpinner.dismiss();\r\n                callback.run(synchronizerName, status);\r\n            }, synchronizer, s.authMethod);\r\n            return;\r\n        default:\r\n            synchronizer.reset();\r\n            callback.run(name, s);\r\n    }\r\n}\n--------------------------------------------------\nprivate void handleAuthComplete(Synchronizer synchronizer, Status s) {\r\n    Callback cb = authCallback;\r\n    authCallback = null;\r\n    authSynchronizer = null;\r\n    if (s == Status.OK) {\r\n        ContentValues tmp = new ContentValues();\r\n        tmp.put(\"_id\", synchronizer.getId());\r\n        tmp.put(DB.ACCOUNT.AUTH_CONFIG, synchronizer.getAuthConfig());\r\n        String[] args = { Long.toString(synchronizer.getId()) };\r\n        try {\r\n            mDB.update(DB.ACCOUNT.TABLE, tmp, \"_id = ?\", args);\r\n        } catch (IllegalStateException ex) {\r\n            Log.e(getClass().getName(), \"Update failed:\", ex);\r\n            s = Status.ERROR;\r\n        }\r\n    }\r\n    if (s != Status.OK) {\r\n        synchronizer.reset();\r\n    }\r\n    cb.run(synchronizer.getName(), s);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void reset() {\r\n    username = null;\r\n    password = null;\r\n}" ],
  "QuickNovel/5" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "QuickNovel/2" : [ "getValidUrl(link) ?: return", "private fun getValidUrl(urlString: String): String? {\r\n        if (urlString.isBlank())\r\n            return null\r\n\r\n        val url = createUrl(urlString) ?: createUrl(urlString, \"https://\") ?: return null\r\n\r\n        return url.toString()\r\n    }" ],
  "Iconify/376" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1260" : [ "                viewState = ViewState.Success\n                chartData = getChartData(top10ShareNumber.toFloat(), blockchain)\r\n                topHolders = factory.getCoinMajorHolders(result)\n--------------------------------------------------\n                marketCapDiff,\n                getChartData(totalMarketCapPoints),\r\n                MetricsType.TotalMarketCap\n--------------------------------------------------\n                volume24hDiff,\n                getChartData(volume24Points),\r\n                MetricsType.Volume24h\n--------------------------------------------------\n                defiMarketCapDiff,\n                getChartData(defiMarketCapPoints),\r\n                MetricsType.DefiCap\n--------------------------------------------------\n                tvlDiff,\n                getChartData(defiTvlPoints),\r\n                MetricsType.TvlInDefi", "import io.horizontalsystems.marketkit.models.MarketOverview\nimport io.horizontalsystems.chartview.models.ChartPoint\nimport io.horizontalsystems.chartview.ChartData\nimport io.horizontalsystems.bankwallet.modules.market.overview.MarketOverviewModule.MarketMetricsPoint\nimport io.horizontalsystems.bankwallet.modules.market.overview.MarketOverviewModule.MarketMetrics\nprivate fun getChartData(marketMetricsPoints: List<MarketMetricsPoint>): ChartData? {\r\n        if (marketMetricsPoints.isEmpty()) return null\r\n\r\n        val points = marketMetricsPoints.map { ChartPoint(it.value.toFloat(), it.timestamp) }\r\n        return ChartData(points, true, false)\r\n    }\nimport io.horizontalsystems.bankwallet.modules.market.overview.MarketOverviewModule.MarketMetrics\nimport io.horizontalsystems.bankwallet.modules.market.overview.MarketOverviewModule.MarketMetricsPoint\nimport io.horizontalsystems.chartview.ChartData\nimport io.horizontalsystems.chartview.models.ChartPoint\nimport io.horizontalsystems.marketkit.models.MarketOverview" ],
  "Iconify/377" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/374" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/375" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Iconify/372" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/108" : [ "", "import androidx.room.Database;\r\nimport androidx.sqlite.db.SupportSQLiteDatabase;\r\nimport androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\n@Override\r\npublic void migrate(SupportSQLiteDatabase database) {\r\n    database.execSQL(\"ALTER TABLE subscribed_subreddits\" + \" ADD COLUMN is_favorite INTEGER DEFAULT 0 NOT NULL\");\r\n    database.execSQL(\"ALTER TABLE subscribed_users\" + \" ADD COLUMN is_favorite INTEGER DEFAULT 0 NOT NULL\");\r\n}" ],
  "Iconify/373" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Feeder/109" : [ "", "import androidx.sqlite.db.SupportSQLiteDatabase\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n        database.execSQL(\"DROP TABLE IF EXISTS `EvmAccountState`\")\r\n        database.execSQL(\"CREATE TABLE IF NOT EXISTS `TokenAutoEnabledBlockchain` (`accountId` TEXT NOT NULL, `blockchainType` TEXT NOT NULL, PRIMARY KEY(`accountId`, `blockchainType`))\")\r\n    }\nImport(names=[androidx, sqlite, db, SupportSQLiteDatabase], wildcard=false, alias=null)" ],
  "Iconify/370" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1262" : [ "activity.resources.getString(R.string.you_are_now_a_developer)\n--------------------------------------------------\nresources.getString(R.string.about)\n--------------------------------------------------\nresources.getString(R.string.version_n)\n--------------------------------------------------\nrequireArguments().getString(\"notes\")\n--------------------------------------------------\nres.getString(R.string.yes)\n--------------------------------------------------\nres.getString(R.string.no)\n--------------------------------------------------\nthis.getString(R.string.every_x_days)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_week)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_month)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_y_days)\n--------------------------------------------------\nresources.getString(R.string.every_month)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_month, freqNum)\n--------------------------------------------------\nresources.getString(R.string.every_day)\n--------------------------------------------------\nresources.getString(R.string.every_week)\n--------------------------------------------------\nresources.getString(R.string.every_x_days, freqDen)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_week, freqNum)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_y_days, freqNum, freqDen)\n--------------------------------------------------\nbinding.toolbar.title = getString(R.string.edit_habit)\n--------------------------------------------------\nbinding.nameInput.hint = getString(R.string.measurable_short_example)\n--------------------------------------------------\nbinding.questionInput.hint = getString(R.string.measurable_question_example)\n--------------------------------------------------\ngetString(R.string.target_type_at_least)\n--------------------------------------------------\ngetString(R.string.target_type_at_most)\n--------------------------------------------------\ngetString(R.string.every_day)\n--------------------------------------------------\ngetString(R.string.every_week)\n--------------------------------------------------\ngetString(R.string.every_month)\n--------------------------------------------------\nbinding.targetInput.error = getString(R.string.validation_cannot_be_blank)\n--------------------------------------------------\nbinding.reminderTimePicker.text = getString(R.string.reminder_off)\n--------------------------------------------------\n1 -> getString(R.string.every_day)\n--------------------------------------------------\n7 -> getString(R.string.every_week)\n--------------------------------------------------\n30 -> getString(R.string.every_month)\n--------------------------------------------------\nNumericalHabitType.AT_MOST -> getString(R.string.target_type_at_most)\n--------------------------------------------------\nelse -> getString(R.string.target_type_at_least)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_entered)\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_completed)\n--------------------------------------------------\nresources.getString(R.string.main_activity_title)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_import)\n--------------------------------------------------\ngetString(when(m) {\n    COULD_NOT_EXPORT -> R.string.could_not_export\n    IMPORT_SUCCESSFUL -> R.string.habits_imported\n    IMPORT_FAILED -> R.string.could_not_import\n    DATABASE_REPAIRED -> R.string.database_repaired\n    COULD_NOT_GENERATE_BUG_REPORT -> R.string.bug_report_failed\n    FILE_NOT_RECOGNIZED -> R.string.file_not_recognized\n})\n--------------------------------------------------\nactivity.resources.getString(R.string.toast_habit_created)\n--------------------------------------------------\nactivity.resources.getString(R.string.habits_imported)\n--------------------------------------------------\nactivity.resources.getString(R.string.file_not_recognized)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(id)\n--------------------------------------------------\nresources.getString(R.string.hint_title)\n--------------------------------------------------\nresources.getString(R.string.fa_skipped)\n--------------------------------------------------\nresources.getString(R.string.fa_question)\n--------------------------------------------------\nresources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(R.string.reminder_off)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_up)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_down)\n--------------------------------------------------\nresources.getString(R.string.today)\n--------------------------------------------------\nresources.getString(R.string.week)\n--------------------------------------------------\nresources.getString(R.string.month)\n--------------------------------------------------\nresources.getString(R.string.quarter)\n--------------------------------------------------\nresources.getString(R.string.year)\n--------------------------------------------------\ngetString(R.string.intro_title_1)\n--------------------------------------------------\ngetString(R.string.intro_description_1)\n--------------------------------------------------\ngetString(R.string.intro_title_2)\n--------------------------------------------------\ngetString(R.string.intro_description_2)\n--------------------------------------------------\ngetString(R.string.intro_title_4)\n--------------------------------------------------\ngetString(R.string.intro_description_4)\n--------------------------------------------------\nresources.getString(R.string.settings)\n--------------------------------------------------\ngetString(R.string.playStoreURL)\n--------------------------------------------------\nactivity.getString(R.string.check)\n--------------------------------------------------\nactivity.getString(R.string.uncheck)\n--------------------------------------------------\nactivity.getString(R.string.toggle)\n--------------------------------------------------\nactivity.getString(R.string.increment)\n--------------------------------------------------\nactivity.getString(R.string.decrement)\n--------------------------------------------------\nresources.getString(R.string.app_name)\n--------------------------------------------------\ncursor.getString(index)\n--------------------------------------------------\ncontext.getString(R.string.translateURL)\n--------------------------------------------------\ncontext.getString(R.string.playStoreURL)\n--------------------------------------------------\ncontext.getString(R.string.feedbackURL)\n--------------------------------------------------\ncontext.getString(R.string.privacyPolicyURL)\n--------------------------------------------------\ncontext.getString(R.string.helpURL)\n--------------------------------------------------\ncontext.getString(R.string.sourceCodeURL)\n--------------------------------------------------\ncontext.getString(R.string.codeContributorsURL)\n--------------------------------------------------\ncontext.getString(R.string.yes)\n--------------------------------------------------\ncontext.getString(R.string.no)\n--------------------------------------------------\ncontext.getString(R.string.enter)\n--------------------------------------------------\ncontext.getString(R.string.default_reminder_question)\n--------------------------------------------------\ncontext.getString(R.string.snooze)\n--------------------------------------------------\ncontext.resources.getString(R.string.reminder)\n--------------------------------------------------\ncontext.resources.getString(R.string.none)\n--------------------------------------------------\nprefs.getString(\"pref_ringtone_uri\", defaultRingtoneUri.toString())\n--------------------------------------------------\nsharedPrefs.getString(key, defValue)\n--------------------------------------------------\ncontext.resources.getString(resId)\n--------------------------------------------------\ncontext.getString(R.string.weekends)\n--------------------------------------------------\ncontext.getString(R.string.any_weekday)\n--------------------------------------------------\ncontext.getString(R.string.any_day)\n--------------------------------------------------\nresources.getString(R.string.activity_not_found)\n--------------------------------------------------\nthis.getString(toId)\n--------------------------------------------------\nthis.getString(subjectId)\n--------------------------------------------------\ncontext.getString(R.string.habit_not_found)\n--------------------------------------------------\nresources.getString(R.string.fa_check)\n--------------------------------------------------\nresources.getString(R.string.fa_times)", "override fun getString(index: Int): String? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getString(index)\r\n        }\r\n    }" ],
  "Iconify/371" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/873" : [ "", "import android.os.AsyncTask\n@Override\r\nprotected Void doInBackground(final Account... params) {\r\n    mAsyncTaskDao.insert(params[0]);\r\n    return null;\r\n}" ],
  "Trail-Sense/980" : [ "private void bottomAppBarOptionAction(int option) {\r\n    switch(option) {\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_SUBSCRIPTIONS:\r\n            {\r\n                Intent intent = new Intent(this, SubscribedThingListingActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_MULTIREDDITS:\r\n            {\r\n                Intent intent = new Intent(this, SubscribedThingListingActivity.class);\r\n                intent.putExtra(SubscribedThingListingActivity.EXTRA_SHOW_MULTIREDDITS, true);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_INBOX:\r\n            {\r\n                Intent intent = new Intent(this, InboxActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_PROFILE:\r\n            {\r\n                Intent intent = new Intent(this, ViewUserDetailActivity.class);\r\n                intent.putExtra(ViewUserDetailActivity.EXTRA_USER_NAME_KEY, mAccountName);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_REFRESH:\r\n            {\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.refresh();\r\n                }\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_CHANGE_SORT_TYPE:\r\n            {\r\n                changeSortType();\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_CHANGE_POST_LAYOUT:\r\n            {\r\n                PostLayoutBottomSheetFragment postLayoutBottomSheetFragment = new PostLayoutBottomSheetFragment();\r\n                postLayoutBottomSheetFragment.show(getSupportFragmentManager(), postLayoutBottomSheetFragment.getTag());\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_SEARCH:\r\n            {\r\n                Intent intent = new Intent(this, SearchActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_GO_TO_SUBREDDIT:\r\n            goToSubreddit();\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_GO_TO_USER:\r\n            goToUser();\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_RANDOM:\r\n            randomThing();\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_HIDE_READ_POSTS:\r\n            if (sectionsPagerAdapter != null) {\r\n                sectionsPagerAdapter.hideReadPosts();\r\n            }\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_FILTER_POSTS:\r\n            if (sectionsPagerAdapter != null) {\r\n                sectionsPagerAdapter.filterPosts();\r\n            }\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_UPVOTED:\r\n            {\r\n                Intent intent = new Intent(this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_UPVOTED);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_DOWNVOTED:\r\n            {\r\n                Intent intent = new Intent(this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_DOWNVOTED);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_HIDDEN:\r\n            {\r\n                Intent intent = new Intent(this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_HIDDEN);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_SAVED:\r\n            {\r\n                Intent intent = new Intent(MainActivity.this, AccountSavedThingActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_GO_TO_TOP:\r\n            {\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.goBackToTop();\r\n                }\r\n                break;\r\n            }\r\n        default:\r\n            PostTypeBottomSheetFragment postTypeBottomSheetFragment = new PostTypeBottomSheetFragment();\r\n            postTypeBottomSheetFragment.show(getSupportFragmentManager(), postTypeBottomSheetFragment.getTag());\r\n            break;\r\n    }\r\n}\n--------------------------------------------------\nprivate void bindView() {\r\n    if (isFinishing() || isDestroyed()) {\r\n        return;\r\n    }\r\n    if (showBottomAppBar) {\r\n        int optionCount = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_COUNT, 4);\r\n        int option1 = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_1, SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_SUBSCRIPTIONS);\r\n        int option2 = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_2, SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_MULTIREDDITS);\r\n        if (optionCount == 2) {\r\n            navigationWrapper.bindOptionDrawableResource(getBottomAppBarOptionDrawableResource(option1), getBottomAppBarOptionDrawableResource(option2));\r\n            if (navigationWrapper.navigationRailView == null) {\r\n                navigationWrapper.option2BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option1);\r\n                });\r\n                navigationWrapper.option4BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option2);\r\n                });\r\n            } else {\r\n                navigationWrapper.navigationRailView.setOnItemSelectedListener(item -> {\r\n                    int itemId = item.getItemId();\r\n                    if (itemId == R.id.navigation_rail_option_1) {\r\n                        bottomAppBarOptionAction(option1);\r\n                        return true;\r\n                    } else if (itemId == R.id.navigation_rail_option_2) {\r\n                        bottomAppBarOptionAction(option2);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n        } else {\r\n            int option3 = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_3, mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_REFRESH : SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_INBOX);\r\n            int option4 = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_4, mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_CHANGE_SORT_TYPE : SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_PROFILE);\r\n            navigationWrapper.bindOptionDrawableResource(getBottomAppBarOptionDrawableResource(option1), getBottomAppBarOptionDrawableResource(option2), getBottomAppBarOptionDrawableResource(option3), getBottomAppBarOptionDrawableResource(option4));\r\n            if (navigationWrapper.navigationRailView == null) {\r\n                navigationWrapper.option1BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option1);\r\n                });\r\n                navigationWrapper.option2BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option2);\r\n                });\r\n                navigationWrapper.option3BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option3);\r\n                });\r\n                navigationWrapper.option4BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option4);\r\n                });\r\n            } else {\r\n                navigationWrapper.navigationRailView.setOnItemSelectedListener(item -> {\r\n                    int itemId = item.getItemId();\r\n                    if (itemId == R.id.navigation_rail_option_1) {\r\n                        bottomAppBarOptionAction(option1);\r\n                        return true;\r\n                    } else if (itemId == R.id.navigation_rail_option_2) {\r\n                        bottomAppBarOptionAction(option2);\r\n                        return true;\r\n                    } else if (itemId == R.id.navigation_rail_option_3) {\r\n                        bottomAppBarOptionAction(option3);\r\n                        return true;\r\n                    } else if (itemId == R.id.navigation_rail_option_4) {\r\n                        bottomAppBarOptionAction(option4);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n        }\r\n    } else {\r\n        CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) navigationWrapper.floatingActionButton.getLayoutParams();\r\n        lp.setAnchorId(View.NO_ID);\r\n        lp.gravity = Gravity.END | Gravity.BOTTOM;\r\n        navigationWrapper.floatingActionButton.setLayoutParams(lp);\r\n    }\r\n    fabOption = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB, SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_SUBMIT_POSTS);\r\n    switch(fabOption) {\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_REFRESH:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_refresh_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_CHANGE_SORT_TYPE:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_sort_toolbar_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_CHANGE_POST_LAYOUT:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_post_layout_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_SEARCH:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_search_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_SUBREDDIT:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_subreddit_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_USER:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_user_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_RANDOM:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_random_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_HIDE_READ_POSTS:\r\n            if (mAccountName.equals(Account.ANONYMOUS_ACCOUNT)) {\r\n                navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_filter_24dp);\r\n                fabOption = SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_FILTER_POSTS;\r\n            } else {\r\n                navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_hide_read_posts_24dp);\r\n            }\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_FILTER_POSTS:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_filter_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_TOP:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_keyboard_double_arrow_up_24);\r\n            break;\r\n        default:\r\n            if (mAccountName.equals(Account.ANONYMOUS_ACCOUNT)) {\r\n                navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_filter_24dp);\r\n                fabOption = SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_FILTER_POSTS;\r\n            } else {\r\n                navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_add_day_night_24dp);\r\n            }\r\n            break;\r\n    }\r\n    navigationWrapper.floatingActionButton.setOnClickListener(view -> {\r\n        switch(fabOption) {\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_REFRESH:\r\n                {\r\n                    if (sectionsPagerAdapter != null) {\r\n                        sectionsPagerAdapter.refresh();\r\n                    }\r\n                    break;\r\n                }\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_CHANGE_SORT_TYPE:\r\n                {\r\n                    changeSortType();\r\n                    break;\r\n                }\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_CHANGE_POST_LAYOUT:\r\n                {\r\n                    PostLayoutBottomSheetFragment postLayoutBottomSheetFragment = new PostLayoutBottomSheetFragment();\r\n                    postLayoutBottomSheetFragment.show(getSupportFragmentManager(), postLayoutBottomSheetFragment.getTag());\r\n                    break;\r\n                }\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_SEARCH:\r\n                {\r\n                    Intent intent = new Intent(this, SearchActivity.class);\r\n                    startActivity(intent);\r\n                    break;\r\n                }\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_SUBREDDIT:\r\n                goToSubreddit();\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_USER:\r\n                goToUser();\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_RANDOM:\r\n                randomThing();\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_HIDE_READ_POSTS:\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.hideReadPosts();\r\n                }\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_FILTER_POSTS:\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.filterPosts();\r\n                }\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_TOP:\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.goBackToTop();\r\n                }\r\n                break;\r\n            default:\r\n                PostTypeBottomSheetFragment postTypeBottomSheetFragment = new PostTypeBottomSheetFragment();\r\n                postTypeBottomSheetFragment.show(getSupportFragmentManager(), postTypeBottomSheetFragment.getTag());\r\n                break;\r\n        }\r\n    });\r\n    navigationWrapper.floatingActionButton.setOnLongClickListener(view -> {\r\n        FABMoreOptionsBottomSheetFragment fabMoreOptionsBottomSheetFragment = new FABMoreOptionsBottomSheetFragment();\r\n        Bundle bundle = new Bundle();\r\n        bundle.putBoolean(FABMoreOptionsBottomSheetFragment.EXTRA_ANONYMOUS_MODE, mAccountName.equals(Account.ANONYMOUS_ACCOUNT));\r\n        fabMoreOptionsBottomSheetFragment.setArguments(bundle);\r\n        fabMoreOptionsBottomSheetFragment.show(getSupportFragmentManager(), fabMoreOptionsBottomSheetFragment.getTag());\r\n        return true;\r\n    });\r\n    navigationWrapper.floatingActionButton.setVisibility(hideFab ? View.GONE : View.VISIBLE);\r\n    adapter = new NavigationDrawerRecyclerViewMergedAdapter(this, mSharedPreferences, mNsfwAndSpoilerSharedPreferences, mNavigationDrawerSharedPreferences, mSecuritySharedPreferences, mCustomThemeWrapper, mAccountName, new NavigationDrawerRecyclerViewMergedAdapter.ItemClickListener() {\r\n\r\n        @Override\r\n        public void onMenuClick(int stringId) {\r\n            Intent intent = null;\r\n            if (stringId == R.string.profile) {\r\n                intent = new Intent(MainActivity.this, ViewUserDetailActivity.class);\r\n                intent.putExtra(ViewUserDetailActivity.EXTRA_USER_NAME_KEY, mAccountName);\r\n            } else if (stringId == R.string.subscriptions) {\r\n                intent = new Intent(MainActivity.this, SubscribedThingListingActivity.class);\r\n            } else if (stringId == R.string.multi_reddit) {\r\n                intent = new Intent(MainActivity.this, SubscribedThingListingActivity.class);\r\n                intent.putExtra(SubscribedThingListingActivity.EXTRA_SHOW_MULTIREDDITS, true);\r\n            } else if (stringId == R.string.history) {\r\n                intent = new Intent(MainActivity.this, HistoryActivity.class);\r\n            } else if (stringId == R.string.trending) {\r\n                intent = new Intent(MainActivity.this, TrendingActivity.class);\r\n            } else if (stringId == R.string.upvoted) {\r\n                intent = new Intent(MainActivity.this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_UPVOTED);\r\n            } else if (stringId == R.string.downvoted) {\r\n                intent = new Intent(MainActivity.this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_DOWNVOTED);\r\n            } else if (stringId == R.string.hidden) {\r\n                intent = new Intent(MainActivity.this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_HIDDEN);\r\n            } else if (stringId == R.string.account_saved_thing_activity_label) {\r\n                intent = new Intent(MainActivity.this, AccountSavedThingActivity.class);\r\n            } else if (stringId == R.string.light_theme) {\r\n                mSharedPreferences.edit().putString(SharedPreferencesUtils.THEME_KEY, \"0\").apply();\r\n                AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_NO);\r\n                mCustomThemeWrapper.setThemeType(CustomThemeSharedPreferencesUtils.LIGHT);\r\n            } else if (stringId == R.string.dark_theme) {\r\n                mSharedPreferences.edit().putString(SharedPreferencesUtils.THEME_KEY, \"1\").apply();\r\n                AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_YES);\r\n                if (mSharedPreferences.getBoolean(SharedPreferencesUtils.AMOLED_DARK_KEY, false)) {\r\n                    mCustomThemeWrapper.setThemeType(CustomThemeSharedPreferencesUtils.AMOLED);\r\n                } else {\r\n                    mCustomThemeWrapper.setThemeType(CustomThemeSharedPreferencesUtils.DARK);\r\n                }\r\n            } else if (stringId == R.string.enable_nsfw) {\r\n                if (sectionsPagerAdapter != null) {\r\n                    mNsfwAndSpoilerSharedPreferences.edit().putBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.NSFW_BASE, true).apply();\r\n                    sectionsPagerAdapter.changeNSFW(true);\r\n                }\r\n            } else if (stringId == R.string.disable_nsfw) {\r\n                if (sectionsPagerAdapter != null) {\r\n                    mNsfwAndSpoilerSharedPreferences.edit().putBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.NSFW_BASE, false).apply();\r\n                    sectionsPagerAdapter.changeNSFW(false);\r\n                }\r\n            } else if (stringId == R.string.settings) {\r\n                intent = new Intent(MainActivity.this, SettingsActivity.class);\r\n            } else if (stringId == R.string.add_account) {\r\n                Intent addAccountIntent = new Intent(MainActivity.this, LoginActivity.class);\r\n                startActivityForResult(addAccountIntent, LOGIN_ACTIVITY_REQUEST_CODE);\r\n            } else if (stringId == R.string.anonymous_account) {\r\n                SwitchToAnonymousMode.switchToAnonymousMode(mRedditDataRoomDatabase, mCurrentAccountSharedPreferences, mExecutor, new Handler(), false, () -> {\r\n                    Intent anonymousIntent = new Intent(MainActivity.this, MainActivity.class);\r\n                    startActivity(anonymousIntent);\r\n                    finish();\r\n                });\r\n            } else if (stringId == R.string.log_out) {\r\n                SwitchToAnonymousMode.switchToAnonymousMode(mRedditDataRoomDatabase, mCurrentAccountSharedPreferences, mExecutor, new Handler(), true, () -> {\r\n                    Intent logOutIntent = new Intent(MainActivity.this, MainActivity.class);\r\n                    startActivity(logOutIntent);\r\n                    finish();\r\n                });\r\n            }\r\n            if (intent != null) {\r\n                startActivity(intent);\r\n            }\r\n            drawer.closeDrawers();\r\n        }\r\n\r\n        @Override\r\n        public void onSubscribedSubredditClick(String subredditName) {\r\n            Intent intent = new Intent(MainActivity.this, ViewSubredditDetailActivity.class);\r\n            intent.putExtra(ViewSubredditDetailActivity.EXTRA_SUBREDDIT_NAME_KEY, subredditName);\r\n            startActivity(intent);\r\n        }\r\n\r\n        @Override\r\n        public void onAccountClick(@NonNull String accountName) {\r\n            SwitchAccount.switchAccount(mRedditDataRoomDatabase, mCurrentAccountSharedPreferences, mExecutor, new Handler(), accountName, newAccount -> {\r\n                Intent intent = new Intent(MainActivity.this, MainActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n            });\r\n        }\r\n    });\r\n    adapter.setInboxCount(inboxCount);\r\n    navDrawerRecyclerView.setLayoutManager(new LinearLayoutManagerBugFixed(this));\r\n    navDrawerRecyclerView.setAdapter(adapter.getConcatAdapter());\r\n    int tabCount = mMainActivityTabsSharedPreferences.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_TAB_COUNT, 3);\r\n    mShowFavoriteMultiReddits = mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_FAVORITE_MULTIREDDITS, false);\r\n    mShowMultiReddits = mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_MULTIREDDITS, false);\r\n    mShowFavoriteSubscribedSubreddits = mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_FAVORITE_SUBSCRIBED_SUBREDDITS, false);\r\n    mShowSubscribedSubreddits = mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_SUBSCRIBED_SUBREDDITS, false);\r\n    sectionsPagerAdapter = new SectionsPagerAdapter(this, tabCount, mShowFavoriteMultiReddits, mShowMultiReddits, mShowFavoriteSubscribedSubreddits, mShowSubscribedSubreddits);\r\n    viewPager2.setAdapter(sectionsPagerAdapter);\r\n    viewPager2.setOffscreenPageLimit(ViewPager2.OFFSCREEN_PAGE_LIMIT_DEFAULT);\r\n    viewPager2.setUserInputEnabled(!mDisableSwipingBetweenTabs);\r\n    if (mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_TAB_NAMES, true)) {\r\n        if (mShowFavoriteMultiReddits || mShowMultiReddits || mShowFavoriteSubscribedSubreddits || mShowSubscribedSubreddits) {\r\n            tabLayout.setTabMode(TabLayout.MODE_SCROLLABLE);\r\n        } else {\r\n            tabLayout.setTabMode(TabLayout.MODE_FIXED);\r\n        }\r\n        new TabLayoutMediator(tabLayout, viewPager2, (tab, position) -> {\r\n            switch(position) {\r\n                case 0:\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, mMainActivityTabsSharedPreferences.getString((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_TAB_1_TITLE, getString(R.string.home)));\r\n                    break;\r\n                case 1:\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, mMainActivityTabsSharedPreferences.getString((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_TAB_2_TITLE, getString(R.string.popular)));\r\n                    break;\r\n                case 2:\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, mMainActivityTabsSharedPreferences.getString((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_TAB_3_TITLE, getString(R.string.all)));\r\n                    break;\r\n            }\r\n            if (position >= tabCount && (mShowFavoriteMultiReddits || mShowMultiReddits || mShowFavoriteSubscribedSubreddits || mShowSubscribedSubreddits) && sectionsPagerAdapter != null) {\r\n                if (position - tabCount < sectionsPagerAdapter.favoriteMultiReddits.size()) {\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, sectionsPagerAdapter.favoriteMultiReddits.get(position - tabCount).getDisplayName());\r\n                } else if (position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() < sectionsPagerAdapter.multiReddits.size()) {\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, sectionsPagerAdapter.multiReddits.get(position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size()).getDisplayName());\r\n                } else if (position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() - sectionsPagerAdapter.multiReddits.size() < sectionsPagerAdapter.favoriteSubscribedSubreddits.size()) {\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, sectionsPagerAdapter.favoriteSubscribedSubreddits.get(position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() - sectionsPagerAdapter.multiReddits.size()).getName());\r\n                } else if (position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() - sectionsPagerAdapter.multiReddits.size() - sectionsPagerAdapter.favoriteSubscribedSubreddits.size() < sectionsPagerAdapter.subscribedSubreddits.size()) {\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, sectionsPagerAdapter.subscribedSubreddits.get(position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() - sectionsPagerAdapter.multiReddits.size() - sectionsPagerAdapter.favoriteSubscribedSubreddits.size()).getName());\r\n                }\r\n            }\r\n        }).attach();\r\n    } else {\r\n        tabLayout.setVisibility(View.GONE);\r\n    }\r\n    viewPager2.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {\r\n\r\n        @Override\r\n        public void onPageSelected(int position) {\r\n            if (showBottomAppBar) {\r\n                navigationWrapper.showNavigation();\r\n            }\r\n            if (!hideFab) {\r\n                navigationWrapper.showFab();\r\n            }\r\n            sectionsPagerAdapter.displaySortTypeInToolbar();\r\n        }\r\n    });\r\n    fixViewPager2Sensitivity(viewPager2);\r\n    loadSubscriptions();\r\n    multiRedditViewModel = new ViewModelProvider(this, new MultiRedditViewModel.Factory(getApplication(), mRedditDataRoomDatabase, mAccountName)).get(MultiRedditViewModel.class);\r\n    multiRedditViewModel.getAllFavoriteMultiReddits().observe(this, multiReddits -> {\r\n        if (mShowFavoriteMultiReddits && sectionsPagerAdapter != null) {\r\n            sectionsPagerAdapter.setFavoriteMultiReddits(multiReddits);\r\n        }\r\n    });\r\n    multiRedditViewModel.getAllMultiReddits().observe(this, multiReddits -> {\r\n        if (mShowMultiReddits && sectionsPagerAdapter != null) {\r\n            sectionsPagerAdapter.setMultiReddits(multiReddits);\r\n        }\r\n    });\r\n    subscribedSubredditViewModel = new ViewModelProvider(this, new SubscribedSubredditViewModel.Factory(getApplication(), mRedditDataRoomDatabase, mAccountName)).get(SubscribedSubredditViewModel.class);\r\n    subscribedSubredditViewModel.getAllSubscribedSubreddits().observe(this, subscribedSubredditData -> {\r\n        adapter.setSubscribedSubreddits(subscribedSubredditData);\r\n        if (mShowSubscribedSubreddits && sectionsPagerAdapter != null) {\r\n            sectionsPagerAdapter.setSubscribedSubreddits(subscribedSubredditData);\r\n        }\r\n    });\r\n    subscribedSubredditViewModel.getAllFavoriteSubscribedSubreddits().observe(this, subscribedSubredditData -> {\r\n        adapter.setFavoriteSubscribedSubreddits(subscribedSubredditData);\r\n        if (mShowFavoriteSubscribedSubreddits && sectionsPagerAdapter != null) {\r\n            sectionsPagerAdapter.setFavoriteSubscribedSubreddits(subscribedSubredditData);\r\n        }\r\n    });\r\n    accountViewModel = new ViewModelProvider(this, new AccountViewModel.Factory(mRedditDataRoomDatabase)).get(AccountViewModel.class);\r\n    accountViewModel.getAccountsExceptCurrentAccountLiveData().observe(this, adapter::changeAccountsDataset);\r\n    accountViewModel.getCurrentAccountLiveData().observe(this, account -> {\r\n        if (account != null) {\r\n            adapter.updateAccountInfo(account.getProfileImageUrl(), account.getBannerImageUrl(), account.getKarma());\r\n        }\r\n    });\r\n    loadUserData();\r\n    if (!mAccountName.equals(Account.ANONYMOUS_ACCOUNT)) {\r\n        if (mMessageFullname != null) {\r\n            ReadMessage.readMessage(mOauthRetrofit, mAccessToken, mMessageFullname, new ReadMessage.ReadMessageListener() {\r\n\r\n                @Override\r\n                public void readSuccess() {\r\n                    mMessageFullname = null;\r\n                }\r\n\r\n                @Override\r\n                public void readFailed() {\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment;\r\nimport ml.docilealligator.infinityforreddit.fragments.PostFragment;\r\nimport ml.docilealligator.infinityforreddit.post.Post;\r\nimport ml.docilealligator.infinityforreddit.post.Post\nimport ml.docilealligator.infinityforreddit.fragments.PostFragment\nimport androidx.fragment.app.Fragment\nvoid filterPosts() {\r\n    PostFragment currentFragment = getCurrentFragment();\r\n    if (currentFragment != null) {\r\n        currentFragment.filterPosts();\r\n    }\r\n}" ],
  "VinylMusicPlayer/872" : [ "toggleFavorite(MusicPlayerRemote.currentSong)\n--------------------------------------------------\n            R.id.action_toggle_favorite -> {\n                toggleFavorite(song)\n                return true\n--------------------------------------------------\nsuper.toggleFavorite(song)", "import code.name.monkey.retromusic.model.Song\nimport code.name.monkey.retromusic.helper.MusicPlayerRemote\nimport code.name.monkey.retromusic.R\noverride fun toggleFavorite(song: Song) {\n        super.toggleFavorite(song)\n        if (song.id == MusicPlayerRemote.currentSong.id) {\n            updateIsFavorite()\n        }\n    }\nImport(names=[code, name, monkey, retromusic, helper, MusicPlayerRemote], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, model, Song], wildcard=false, alias=null)" ],
  "Neo-Backup/355" : [ "                    .withThemeColor(getFilterColor(newFilter))\n                    .applyToContext(this) // must happen before committing fragment\r\n                transaction\n--------------------------------------------------\ntheme.applyToContext(dialog!!.context)\n--------------------------------------------------\napplyToContext(activity)\n--------------------------------------------------\napplyToContext(wrapper)", "import android.content.Context\nfun applyToContext(context: Context) {\r\n        val theme = context.theme\r\n        themeColor.applyStyle(theme)\r\n        themeAccent.applyStyle(theme)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Trail-Sense/981" : [ "private void bottomAppBarOptionAction(int option) {\r\n    switch(option) {\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_SUBSCRIPTIONS:\r\n            {\r\n                Intent intent = new Intent(this, SubscribedThingListingActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_MULTIREDDITS:\r\n            {\r\n                Intent intent = new Intent(this, SubscribedThingListingActivity.class);\r\n                intent.putExtra(SubscribedThingListingActivity.EXTRA_SHOW_MULTIREDDITS, true);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_INBOX:\r\n            {\r\n                Intent intent = new Intent(this, InboxActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_PROFILE:\r\n            {\r\n                Intent intent = new Intent(this, ViewUserDetailActivity.class);\r\n                intent.putExtra(ViewUserDetailActivity.EXTRA_USER_NAME_KEY, mAccountName);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_REFRESH:\r\n            {\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.refresh();\r\n                }\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_CHANGE_SORT_TYPE:\r\n            {\r\n                changeSortType();\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_CHANGE_POST_LAYOUT:\r\n            {\r\n                PostLayoutBottomSheetFragment postLayoutBottomSheetFragment = new PostLayoutBottomSheetFragment();\r\n                postLayoutBottomSheetFragment.show(getSupportFragmentManager(), postLayoutBottomSheetFragment.getTag());\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_SEARCH:\r\n            {\r\n                Intent intent = new Intent(this, SearchActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_GO_TO_SUBREDDIT:\r\n            goToSubreddit();\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_GO_TO_USER:\r\n            goToUser();\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_RANDOM:\r\n            randomThing();\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_HIDE_READ_POSTS:\r\n            if (sectionsPagerAdapter != null) {\r\n                sectionsPagerAdapter.hideReadPosts();\r\n            }\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_FILTER_POSTS:\r\n            if (sectionsPagerAdapter != null) {\r\n                sectionsPagerAdapter.filterPosts();\r\n            }\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_UPVOTED:\r\n            {\r\n                Intent intent = new Intent(this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_UPVOTED);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_DOWNVOTED:\r\n            {\r\n                Intent intent = new Intent(this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_DOWNVOTED);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_HIDDEN:\r\n            {\r\n                Intent intent = new Intent(this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_HIDDEN);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_SAVED:\r\n            {\r\n                Intent intent = new Intent(MainActivity.this, AccountSavedThingActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            }\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_GO_TO_TOP:\r\n            {\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.goBackToTop();\r\n                }\r\n                break;\r\n            }\r\n        default:\r\n            PostTypeBottomSheetFragment postTypeBottomSheetFragment = new PostTypeBottomSheetFragment();\r\n            postTypeBottomSheetFragment.show(getSupportFragmentManager(), postTypeBottomSheetFragment.getTag());\r\n            break;\r\n    }\r\n}\n--------------------------------------------------\nprivate void bindView() {\r\n    if (isFinishing() || isDestroyed()) {\r\n        return;\r\n    }\r\n    if (showBottomAppBar) {\r\n        int optionCount = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_COUNT, 4);\r\n        int option1 = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_1, SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_SUBSCRIPTIONS);\r\n        int option2 = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_2, SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_MULTIREDDITS);\r\n        if (optionCount == 2) {\r\n            navigationWrapper.bindOptionDrawableResource(getBottomAppBarOptionDrawableResource(option1), getBottomAppBarOptionDrawableResource(option2));\r\n            if (navigationWrapper.navigationRailView == null) {\r\n                navigationWrapper.option2BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option1);\r\n                });\r\n                navigationWrapper.option4BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option2);\r\n                });\r\n            } else {\r\n                navigationWrapper.navigationRailView.setOnItemSelectedListener(item -> {\r\n                    int itemId = item.getItemId();\r\n                    if (itemId == R.id.navigation_rail_option_1) {\r\n                        bottomAppBarOptionAction(option1);\r\n                        return true;\r\n                    } else if (itemId == R.id.navigation_rail_option_2) {\r\n                        bottomAppBarOptionAction(option2);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n        } else {\r\n            int option3 = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_3, mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_REFRESH : SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_INBOX);\r\n            int option4 = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_4, mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_CHANGE_SORT_TYPE : SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_OPTION_PROFILE);\r\n            navigationWrapper.bindOptionDrawableResource(getBottomAppBarOptionDrawableResource(option1), getBottomAppBarOptionDrawableResource(option2), getBottomAppBarOptionDrawableResource(option3), getBottomAppBarOptionDrawableResource(option4));\r\n            if (navigationWrapper.navigationRailView == null) {\r\n                navigationWrapper.option1BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option1);\r\n                });\r\n                navigationWrapper.option2BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option2);\r\n                });\r\n                navigationWrapper.option3BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option3);\r\n                });\r\n                navigationWrapper.option4BottomAppBar.setOnClickListener(view -> {\r\n                    bottomAppBarOptionAction(option4);\r\n                });\r\n            } else {\r\n                navigationWrapper.navigationRailView.setOnItemSelectedListener(item -> {\r\n                    int itemId = item.getItemId();\r\n                    if (itemId == R.id.navigation_rail_option_1) {\r\n                        bottomAppBarOptionAction(option1);\r\n                        return true;\r\n                    } else if (itemId == R.id.navigation_rail_option_2) {\r\n                        bottomAppBarOptionAction(option2);\r\n                        return true;\r\n                    } else if (itemId == R.id.navigation_rail_option_3) {\r\n                        bottomAppBarOptionAction(option3);\r\n                        return true;\r\n                    } else if (itemId == R.id.navigation_rail_option_4) {\r\n                        bottomAppBarOptionAction(option4);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n        }\r\n    } else {\r\n        CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) navigationWrapper.floatingActionButton.getLayoutParams();\r\n        lp.setAnchorId(View.NO_ID);\r\n        lp.gravity = Gravity.END | Gravity.BOTTOM;\r\n        navigationWrapper.floatingActionButton.setLayoutParams(lp);\r\n    }\r\n    fabOption = mBottomAppBarSharedPreference.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? Account.ANONYMOUS_ACCOUNT : \"\") + SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB, SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_SUBMIT_POSTS);\r\n    switch(fabOption) {\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_REFRESH:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_refresh_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_CHANGE_SORT_TYPE:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_sort_toolbar_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_CHANGE_POST_LAYOUT:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_post_layout_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_SEARCH:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_search_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_SUBREDDIT:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_subreddit_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_USER:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_user_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_RANDOM:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_random_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_HIDE_READ_POSTS:\r\n            if (mAccountName.equals(Account.ANONYMOUS_ACCOUNT)) {\r\n                navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_filter_24dp);\r\n                fabOption = SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_FILTER_POSTS;\r\n            } else {\r\n                navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_hide_read_posts_24dp);\r\n            }\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_FILTER_POSTS:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_filter_24dp);\r\n            break;\r\n        case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_TOP:\r\n            navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_keyboard_double_arrow_up_24);\r\n            break;\r\n        default:\r\n            if (mAccountName.equals(Account.ANONYMOUS_ACCOUNT)) {\r\n                navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_filter_24dp);\r\n                fabOption = SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_FILTER_POSTS;\r\n            } else {\r\n                navigationWrapper.floatingActionButton.setImageResource(R.drawable.ic_add_day_night_24dp);\r\n            }\r\n            break;\r\n    }\r\n    navigationWrapper.floatingActionButton.setOnClickListener(view -> {\r\n        switch(fabOption) {\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_REFRESH:\r\n                {\r\n                    if (sectionsPagerAdapter != null) {\r\n                        sectionsPagerAdapter.refresh();\r\n                    }\r\n                    break;\r\n                }\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_CHANGE_SORT_TYPE:\r\n                {\r\n                    changeSortType();\r\n                    break;\r\n                }\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_CHANGE_POST_LAYOUT:\r\n                {\r\n                    PostLayoutBottomSheetFragment postLayoutBottomSheetFragment = new PostLayoutBottomSheetFragment();\r\n                    postLayoutBottomSheetFragment.show(getSupportFragmentManager(), postLayoutBottomSheetFragment.getTag());\r\n                    break;\r\n                }\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_SEARCH:\r\n                {\r\n                    Intent intent = new Intent(this, SearchActivity.class);\r\n                    startActivity(intent);\r\n                    break;\r\n                }\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_SUBREDDIT:\r\n                goToSubreddit();\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_USER:\r\n                goToUser();\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_RANDOM:\r\n                randomThing();\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_HIDE_READ_POSTS:\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.hideReadPosts();\r\n                }\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_FILTER_POSTS:\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.filterPosts();\r\n                }\r\n                break;\r\n            case SharedPreferencesUtils.MAIN_ACTIVITY_BOTTOM_APP_BAR_FAB_GO_TO_TOP:\r\n                if (sectionsPagerAdapter != null) {\r\n                    sectionsPagerAdapter.goBackToTop();\r\n                }\r\n                break;\r\n            default:\r\n                PostTypeBottomSheetFragment postTypeBottomSheetFragment = new PostTypeBottomSheetFragment();\r\n                postTypeBottomSheetFragment.show(getSupportFragmentManager(), postTypeBottomSheetFragment.getTag());\r\n                break;\r\n        }\r\n    });\r\n    navigationWrapper.floatingActionButton.setOnLongClickListener(view -> {\r\n        FABMoreOptionsBottomSheetFragment fabMoreOptionsBottomSheetFragment = new FABMoreOptionsBottomSheetFragment();\r\n        Bundle bundle = new Bundle();\r\n        bundle.putBoolean(FABMoreOptionsBottomSheetFragment.EXTRA_ANONYMOUS_MODE, mAccountName.equals(Account.ANONYMOUS_ACCOUNT));\r\n        fabMoreOptionsBottomSheetFragment.setArguments(bundle);\r\n        fabMoreOptionsBottomSheetFragment.show(getSupportFragmentManager(), fabMoreOptionsBottomSheetFragment.getTag());\r\n        return true;\r\n    });\r\n    navigationWrapper.floatingActionButton.setVisibility(hideFab ? View.GONE : View.VISIBLE);\r\n    adapter = new NavigationDrawerRecyclerViewMergedAdapter(this, mSharedPreferences, mNsfwAndSpoilerSharedPreferences, mNavigationDrawerSharedPreferences, mSecuritySharedPreferences, mCustomThemeWrapper, mAccountName, new NavigationDrawerRecyclerViewMergedAdapter.ItemClickListener() {\r\n\r\n        @Override\r\n        public void onMenuClick(int stringId) {\r\n            Intent intent = null;\r\n            if (stringId == R.string.profile) {\r\n                intent = new Intent(MainActivity.this, ViewUserDetailActivity.class);\r\n                intent.putExtra(ViewUserDetailActivity.EXTRA_USER_NAME_KEY, mAccountName);\r\n            } else if (stringId == R.string.subscriptions) {\r\n                intent = new Intent(MainActivity.this, SubscribedThingListingActivity.class);\r\n            } else if (stringId == R.string.multi_reddit) {\r\n                intent = new Intent(MainActivity.this, SubscribedThingListingActivity.class);\r\n                intent.putExtra(SubscribedThingListingActivity.EXTRA_SHOW_MULTIREDDITS, true);\r\n            } else if (stringId == R.string.history) {\r\n                intent = new Intent(MainActivity.this, HistoryActivity.class);\r\n            } else if (stringId == R.string.trending) {\r\n                intent = new Intent(MainActivity.this, TrendingActivity.class);\r\n            } else if (stringId == R.string.upvoted) {\r\n                intent = new Intent(MainActivity.this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_UPVOTED);\r\n            } else if (stringId == R.string.downvoted) {\r\n                intent = new Intent(MainActivity.this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_DOWNVOTED);\r\n            } else if (stringId == R.string.hidden) {\r\n                intent = new Intent(MainActivity.this, AccountPostsActivity.class);\r\n                intent.putExtra(AccountPostsActivity.EXTRA_USER_WHERE, PostPagingSource.USER_WHERE_HIDDEN);\r\n            } else if (stringId == R.string.account_saved_thing_activity_label) {\r\n                intent = new Intent(MainActivity.this, AccountSavedThingActivity.class);\r\n            } else if (stringId == R.string.light_theme) {\r\n                mSharedPreferences.edit().putString(SharedPreferencesUtils.THEME_KEY, \"0\").apply();\r\n                AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_NO);\r\n                mCustomThemeWrapper.setThemeType(CustomThemeSharedPreferencesUtils.LIGHT);\r\n            } else if (stringId == R.string.dark_theme) {\r\n                mSharedPreferences.edit().putString(SharedPreferencesUtils.THEME_KEY, \"1\").apply();\r\n                AppCompatDelegate.setDefaultNightMode(MODE_NIGHT_YES);\r\n                if (mSharedPreferences.getBoolean(SharedPreferencesUtils.AMOLED_DARK_KEY, false)) {\r\n                    mCustomThemeWrapper.setThemeType(CustomThemeSharedPreferencesUtils.AMOLED);\r\n                } else {\r\n                    mCustomThemeWrapper.setThemeType(CustomThemeSharedPreferencesUtils.DARK);\r\n                }\r\n            } else if (stringId == R.string.enable_nsfw) {\r\n                if (sectionsPagerAdapter != null) {\r\n                    mNsfwAndSpoilerSharedPreferences.edit().putBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.NSFW_BASE, true).apply();\r\n                    sectionsPagerAdapter.changeNSFW(true);\r\n                }\r\n            } else if (stringId == R.string.disable_nsfw) {\r\n                if (sectionsPagerAdapter != null) {\r\n                    mNsfwAndSpoilerSharedPreferences.edit().putBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.NSFW_BASE, false).apply();\r\n                    sectionsPagerAdapter.changeNSFW(false);\r\n                }\r\n            } else if (stringId == R.string.settings) {\r\n                intent = new Intent(MainActivity.this, SettingsActivity.class);\r\n            } else if (stringId == R.string.add_account) {\r\n                Intent addAccountIntent = new Intent(MainActivity.this, LoginActivity.class);\r\n                startActivityForResult(addAccountIntent, LOGIN_ACTIVITY_REQUEST_CODE);\r\n            } else if (stringId == R.string.anonymous_account) {\r\n                SwitchToAnonymousMode.switchToAnonymousMode(mRedditDataRoomDatabase, mCurrentAccountSharedPreferences, mExecutor, new Handler(), false, () -> {\r\n                    Intent anonymousIntent = new Intent(MainActivity.this, MainActivity.class);\r\n                    startActivity(anonymousIntent);\r\n                    finish();\r\n                });\r\n            } else if (stringId == R.string.log_out) {\r\n                SwitchToAnonymousMode.switchToAnonymousMode(mRedditDataRoomDatabase, mCurrentAccountSharedPreferences, mExecutor, new Handler(), true, () -> {\r\n                    Intent logOutIntent = new Intent(MainActivity.this, MainActivity.class);\r\n                    startActivity(logOutIntent);\r\n                    finish();\r\n                });\r\n            }\r\n            if (intent != null) {\r\n                startActivity(intent);\r\n            }\r\n            drawer.closeDrawers();\r\n        }\r\n\r\n        @Override\r\n        public void onSubscribedSubredditClick(String subredditName) {\r\n            Intent intent = new Intent(MainActivity.this, ViewSubredditDetailActivity.class);\r\n            intent.putExtra(ViewSubredditDetailActivity.EXTRA_SUBREDDIT_NAME_KEY, subredditName);\r\n            startActivity(intent);\r\n        }\r\n\r\n        @Override\r\n        public void onAccountClick(@NonNull String accountName) {\r\n            SwitchAccount.switchAccount(mRedditDataRoomDatabase, mCurrentAccountSharedPreferences, mExecutor, new Handler(), accountName, newAccount -> {\r\n                Intent intent = new Intent(MainActivity.this, MainActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n            });\r\n        }\r\n    });\r\n    adapter.setInboxCount(inboxCount);\r\n    navDrawerRecyclerView.setLayoutManager(new LinearLayoutManagerBugFixed(this));\r\n    navDrawerRecyclerView.setAdapter(adapter.getConcatAdapter());\r\n    int tabCount = mMainActivityTabsSharedPreferences.getInt((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_TAB_COUNT, 3);\r\n    mShowFavoriteMultiReddits = mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_FAVORITE_MULTIREDDITS, false);\r\n    mShowMultiReddits = mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_MULTIREDDITS, false);\r\n    mShowFavoriteSubscribedSubreddits = mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_FAVORITE_SUBSCRIBED_SUBREDDITS, false);\r\n    mShowSubscribedSubreddits = mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_SUBSCRIBED_SUBREDDITS, false);\r\n    sectionsPagerAdapter = new SectionsPagerAdapter(this, tabCount, mShowFavoriteMultiReddits, mShowMultiReddits, mShowFavoriteSubscribedSubreddits, mShowSubscribedSubreddits);\r\n    viewPager2.setAdapter(sectionsPagerAdapter);\r\n    viewPager2.setOffscreenPageLimit(ViewPager2.OFFSCREEN_PAGE_LIMIT_DEFAULT);\r\n    viewPager2.setUserInputEnabled(!mDisableSwipingBetweenTabs);\r\n    if (mMainActivityTabsSharedPreferences.getBoolean((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_SHOW_TAB_NAMES, true)) {\r\n        if (mShowFavoriteMultiReddits || mShowMultiReddits || mShowFavoriteSubscribedSubreddits || mShowSubscribedSubreddits) {\r\n            tabLayout.setTabMode(TabLayout.MODE_SCROLLABLE);\r\n        } else {\r\n            tabLayout.setTabMode(TabLayout.MODE_FIXED);\r\n        }\r\n        new TabLayoutMediator(tabLayout, viewPager2, (tab, position) -> {\r\n            switch(position) {\r\n                case 0:\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, mMainActivityTabsSharedPreferences.getString((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_TAB_1_TITLE, getString(R.string.home)));\r\n                    break;\r\n                case 1:\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, mMainActivityTabsSharedPreferences.getString((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_TAB_2_TITLE, getString(R.string.popular)));\r\n                    break;\r\n                case 2:\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, mMainActivityTabsSharedPreferences.getString((mAccountName.equals(Account.ANONYMOUS_ACCOUNT) ? \"\" : mAccountName) + SharedPreferencesUtils.MAIN_PAGE_TAB_3_TITLE, getString(R.string.all)));\r\n                    break;\r\n            }\r\n            if (position >= tabCount && (mShowFavoriteMultiReddits || mShowMultiReddits || mShowFavoriteSubscribedSubreddits || mShowSubscribedSubreddits) && sectionsPagerAdapter != null) {\r\n                if (position - tabCount < sectionsPagerAdapter.favoriteMultiReddits.size()) {\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, sectionsPagerAdapter.favoriteMultiReddits.get(position - tabCount).getDisplayName());\r\n                } else if (position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() < sectionsPagerAdapter.multiReddits.size()) {\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, sectionsPagerAdapter.multiReddits.get(position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size()).getDisplayName());\r\n                } else if (position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() - sectionsPagerAdapter.multiReddits.size() < sectionsPagerAdapter.favoriteSubscribedSubreddits.size()) {\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, sectionsPagerAdapter.favoriteSubscribedSubreddits.get(position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() - sectionsPagerAdapter.multiReddits.size()).getName());\r\n                } else if (position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() - sectionsPagerAdapter.multiReddits.size() - sectionsPagerAdapter.favoriteSubscribedSubreddits.size() < sectionsPagerAdapter.subscribedSubreddits.size()) {\r\n                    Utils.setTitleWithCustomFontToTab(typeface, tab, sectionsPagerAdapter.subscribedSubreddits.get(position - tabCount - sectionsPagerAdapter.favoriteMultiReddits.size() - sectionsPagerAdapter.multiReddits.size() - sectionsPagerAdapter.favoriteSubscribedSubreddits.size()).getName());\r\n                }\r\n            }\r\n        }).attach();\r\n    } else {\r\n        tabLayout.setVisibility(View.GONE);\r\n    }\r\n    viewPager2.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {\r\n\r\n        @Override\r\n        public void onPageSelected(int position) {\r\n            if (showBottomAppBar) {\r\n                navigationWrapper.showNavigation();\r\n            }\r\n            if (!hideFab) {\r\n                navigationWrapper.showFab();\r\n            }\r\n            sectionsPagerAdapter.displaySortTypeInToolbar();\r\n        }\r\n    });\r\n    fixViewPager2Sensitivity(viewPager2);\r\n    loadSubscriptions();\r\n    multiRedditViewModel = new ViewModelProvider(this, new MultiRedditViewModel.Factory(getApplication(), mRedditDataRoomDatabase, mAccountName)).get(MultiRedditViewModel.class);\r\n    multiRedditViewModel.getAllFavoriteMultiReddits().observe(this, multiReddits -> {\r\n        if (mShowFavoriteMultiReddits && sectionsPagerAdapter != null) {\r\n            sectionsPagerAdapter.setFavoriteMultiReddits(multiReddits);\r\n        }\r\n    });\r\n    multiRedditViewModel.getAllMultiReddits().observe(this, multiReddits -> {\r\n        if (mShowMultiReddits && sectionsPagerAdapter != null) {\r\n            sectionsPagerAdapter.setMultiReddits(multiReddits);\r\n        }\r\n    });\r\n    subscribedSubredditViewModel = new ViewModelProvider(this, new SubscribedSubredditViewModel.Factory(getApplication(), mRedditDataRoomDatabase, mAccountName)).get(SubscribedSubredditViewModel.class);\r\n    subscribedSubredditViewModel.getAllSubscribedSubreddits().observe(this, subscribedSubredditData -> {\r\n        adapter.setSubscribedSubreddits(subscribedSubredditData);\r\n        if (mShowSubscribedSubreddits && sectionsPagerAdapter != null) {\r\n            sectionsPagerAdapter.setSubscribedSubreddits(subscribedSubredditData);\r\n        }\r\n    });\r\n    subscribedSubredditViewModel.getAllFavoriteSubscribedSubreddits().observe(this, subscribedSubredditData -> {\r\n        adapter.setFavoriteSubscribedSubreddits(subscribedSubredditData);\r\n        if (mShowFavoriteSubscribedSubreddits && sectionsPagerAdapter != null) {\r\n            sectionsPagerAdapter.setFavoriteSubscribedSubreddits(subscribedSubredditData);\r\n        }\r\n    });\r\n    accountViewModel = new ViewModelProvider(this, new AccountViewModel.Factory(mRedditDataRoomDatabase)).get(AccountViewModel.class);\r\n    accountViewModel.getAccountsExceptCurrentAccountLiveData().observe(this, adapter::changeAccountsDataset);\r\n    accountViewModel.getCurrentAccountLiveData().observe(this, account -> {\r\n        if (account != null) {\r\n            adapter.updateAccountInfo(account.getProfileImageUrl(), account.getBannerImageUrl(), account.getKarma());\r\n        }\r\n    });\r\n    loadUserData();\r\n    if (!mAccountName.equals(Account.ANONYMOUS_ACCOUNT)) {\r\n        if (mMessageFullname != null) {\r\n            ReadMessage.readMessage(mOauthRetrofit, mAccessToken, mMessageFullname, new ReadMessage.ReadMessageListener() {\r\n\r\n                @Override\r\n                public void readSuccess() {\r\n                    mMessageFullname = null;\r\n                }\r\n\r\n                @Override\r\n                public void readFailed() {\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\n--------------------------------------------------\n", "import androidx.fragment.app.Fragment;\r\nimport ml.docilealligator.infinityforreddit.fragments.PostFragment;\r\nimport ml.docilealligator.infinityforreddit.post.Post;\r\nimport ml.docilealligator.infinityforreddit.post.Post\nimport ml.docilealligator.infinityforreddit.fragments.PostFragment\nimport androidx.fragment.app.Fragment\nvoid filterPosts() {\r\n    PostFragment currentFragment = getCurrentFragment();\r\n    if (currentFragment != null) {\r\n        currentFragment.filterPosts();\r\n    }\r\n}" ],
  "VinylMusicPlayer/875" : [ "", "@Override\r\nprotected Void doInBackground(Void... params) {\r\n    buildMessageInternal();\r\n    return null;\r\n}" ],
  "Trail-Sense/982" : [ "restartLibVLC()", "import org.videolan.vlc.gui.helpers.restartMediaPlayer\nimport org.videolan.resources.VLCInstance\nprivate suspend fun restartLibVLC() {\r\n        VLCInstance.restart()\r\n        restartMediaPlayer()\r\n    }\nImport(names=[org, videolan, resources, VLCInstance], wildcard=false, alias=null)\nImport(names=[org, videolan, vlc, gui, helpers, restartMediaPlayer], wildcard=false, alias=null)" ],
  "Trail-Sense/984" : [ "newInstance(displayInCards = viewModel.providersInCard[currentTab], onlyFavs = viewModel.providers[currentTab].onlyFavorites, sorts = sorts, currentSort = viewModel.providers[currentTab].sort, currentSortDesc = viewModel.providers[currentTab].desc)\n--------------------------------------------------\nnewInstance(displayInCards = viewModel.providersInCard[currentTab], showAllArtists = if (currentTab == 0) Settings.getInstance(requireActivity()).getBoolean(KEY_ARTISTS_SHOW_ALL, false) else null, onlyFavs = viewModel.providers[currentTab].onlyFavorites, sorts = sorts, currentSort = viewModel.providers[currentTab].sort, currentSortDesc = viewModel.providers[currentTab].desc)\n--------------------------------------------------\nPlaybackSpeedDialog.newInstance()\n--------------------------------------------------\nSleepTimerDialog.newInstance()\n--------------------------------------------------\nConfirmDeleteDialog.newInstance(arrayListOf(mw))\n--------------------------------------------------\nRenameDialog.newInstance(mw, true)\n--------------------------------------------------\nConfirmDeleteDialog.newInstance(ArrayList(items))\n--------------------------------------------------\nConfirmDeleteDialog.newInstance(arrayListOf(item))\n--------------------------------------------------\nDuplicationWarningDialog.newInstance(highlightedItemsCount, duplicateItemsCount)\n--------------------------------------------------\nRenameDialog.newInstance(media)\n--------------------------------------------------\nRenameDialog.newInstance(bookmark)\n--------------------------------------------------\nJumpToTimeDialog.newInstance()\n--------------------------------------------------\nSelectChapterDialog.newInstance()\n--------------------------------------------------\nEqualizerFragment.newInstance()\n--------------------------------------------------\nAboutVersionDialog.newInstance()\n--------------------------------------------------\nnewInstance(LibraryWithLicense(activity.getString(R.string.app_name), activity.getString(R.string.about_copyright), activity.getString(R.string.about_license), licenseText, \"https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt\"))\n--------------------------------------------------\nnewInstance(title = getString(R.string.clear_playback_history), description = getString(R.string.clear_history_message), buttonText = getString(R.string.clear_history))\n--------------------------------------------------\nLicenseDialog.newInstance(it)\n--------------------------------------------------\nAllAccessPermissionDialog.newInstance()\n--------------------------------------------------\nRenameDialog.newInstance(viewModel.dataset.get(position))\n--------------------------------------------------\nOnboardingWelcomeFragment.newInstance()\n--------------------------------------------------\nOnboardingPermissionFragment.newInstance()\n--------------------------------------------------\nOnboardingScanningFragment.newInstance()\n--------------------------------------------------\nOnboardingNoPermissionFragment.newInstance()\n--------------------------------------------------\nOnboardingNotificationPermissionFragment.newInstance()\n--------------------------------------------------\nOnboardingThemeFragment.newInstance()\n--------------------------------------------------\nnewInstance(displayInCards = viewModel.providerInCard, onlyFavs = viewModel.provider.onlyFavorites, sorts = sorts, currentSort = viewModel.provider.sort, currentSortDesc = viewModel.provider.desc)\n--------------------------------------------------\nMultiSelectListPreferenceDialogFragmentCompat.newInstance(preference.getKey())\n--------------------------------------------------\nNumberPickerPreferenceDialog.newInstance(preference.key)\n--------------------------------------------------\nnewInstance(title = getString(R.string.clear_media_db), description = getString(R.string.clear_media_db_message), buttonText = getString(R.string.clear))\n--------------------------------------------------\nnewInstance(title = getString(R.string.clear_app_data), description = getString(R.string.clear_app_data_message), buttonText = getString(R.string.clear))\n--------------------------------------------------\nFeatureFlagWarningDialog.newInstance(it) {\n    currentPreference.isChecked = true\n}\n--------------------------------------------------\nMLStorageBrowserFragment.newInstance(id == STORAGE_BROWSER_ONBOARDING)\n--------------------------------------------------\nVideoGridFragment.newInstance()\n--------------------------------------------------\nPlaylistFragment.newInstance(Playlist.Type.Video)\n--------------------------------------------------\nnewInstance(displayInCards = settings.getBoolean(KEY_VIDEOS_CARDS, true), onlyFavs = viewModel.provider.onlyFavorites, sorts = sorts, currentSort = viewModel.provider.sort, currentSortDesc = viewModel.provider.desc, videoGroup = settings.getString(KEY_GROUP_VIDEOS, GROUP_VIDEOS_NAME))\n--------------------------------------------------\nSubtitleDownloaderDialogFragment.newInstance(mediaUris, mediaTitles)", "import androidx.preference.PreferenceDialogFragmentCompat\nimport androidx.preference.Preference\nimport androidx.preference.MultiSelectListPreference\nimport androidx.core.os.bundleOf\nfun newInstance(key: String): MultiSelectListPreferenceDialogFragmentCompat {\r\n            return MultiSelectListPreferenceDialogFragmentCompat().apply {\r\n                arguments = bundleOf(\"key\" to key)\r\n            }\r\n        }\nImport(names=[androidx, core, os, bundleOf], wildcard=false, alias=null)\nImport(names=[androidx, preference, MultiSelectListPreference], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceDialogFragmentCompat], wildcard=false, alias=null)" ],
  "Iconify/378" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1269" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/356" : [ "                    .withThemeColor(getFilterColor(newFilter))\n                    .applyToContext(this) // must happen before committing fragment\r\n                transaction\n--------------------------------------------------\ntheme.applyToContext(dialog!!.context)\n--------------------------------------------------\napplyToContext(activity)\n--------------------------------------------------\napplyToContext(wrapper)", "import android.content.Context\nfun applyToContext(context: Context) {\r\n        val theme = context.theme\r\n        themeColor.applyStyle(theme)\r\n        themeAccent.applyStyle(theme)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/870" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "Neo-Backup/357" : [ "startActivityAddShows()", "import com.battlelancer.seriesguide.ui.SearchActivity\nimport android.content.Intent\nprivate fun startActivityAddShows() {\r\n        startActivity(\r\n            SearchActivity.newIntent(requireContext())\r\n        )\r\n    }\nImport(names=[com, battlelancer, seriesguide, ui, SearchActivity], wildcard=false, alias=null)" ],
  "Iconify/379" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/987" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/504" : [ "findLocation(location.latAsDouble, location.lonAsDouble)\n--------------------------------------------------\nfindLocation(location.latitude, location.longitude)\n--------------------------------------------------\ngeoCoder.findLocation(it)", "import de.schildbach.pte.dto.Location\nfun findLocation(location: android.location.Location) {\r\n        if (location.latitude == 0.0 && location.latitude == 0.0) return\r\n        findLocation(location.latitude, location.longitude)\r\n    }" ],
  "Trail-Sense/505" : [ "HexagonSettings.getAccountName(requireContext())\n--------------------------------------------------\nHexagonSettings.getAccountName(context)\n--------------------------------------------------\nHexagonSettings.getAccountName(this@MoreOptionsActivity)", "import androidx.preference.PreferenceManager\nimport android.content.Context\nfun getAccountName(context: Context): String? {\r\n        return PreferenceManager.getDefaultSharedPreferences(context)\r\n            .getString(KEY_ACCOUNT_NAME, null)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[androidx, preference, PreferenceManager], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/865" : [ "@Override\r\npublic void write(JsonWriter writer, @Nullable Boolean value) {\r\n    serializeNullable(value, writer);\r\n}\n--------------------------------------------------\npublic static void serialize(final Map<String, String> value, final JsonWriter sw) {\r\n    sw.writeByte(JsonWriter.OBJECT_START);\r\n    final int size = value.size();\r\n    if (size > 0) {\r\n        final Iterator<Map.Entry<String, String>> iterator = value.entrySet().iterator();\r\n        Map.Entry<String, String> kv = iterator.next();\r\n        StringConverter.serializeShort(kv.getKey(), sw);\r\n        sw.writeByte(JsonWriter.SEMI);\r\n        StringConverter.serializeNullable(kv.getValue(), sw);\r\n        for (int i = 1; i < size; i++) {\r\n            sw.writeByte(JsonWriter.COMMA);\r\n            kv = iterator.next();\r\n            StringConverter.serializeShort(kv.getKey(), sw);\r\n            sw.writeByte(JsonWriter.SEMI);\r\n            StringConverter.serializeNullable(kv.getValue(), sw);\r\n        }\r\n    }\r\n    sw.writeByte(JsonWriter.OBJECT_END);\r\n}\n--------------------------------------------------\n", "import androidx.annotation.Nullable;\r\nimport androidx.annotation.Nullable\npublic static void serializeNullable(@Nullable final Long value, final JsonWriter sw) {\r\n    if (value == null) {\r\n        sw.writeNull();\r\n    } else {\r\n        serialize(value, sw);\r\n    }\r\n}" ],
  "fcitx5-android/260" : [ "AccessControl.getCallingPackage(ctx, callingUid)\n--------------------------------------------------\nval callingPackage = getCallingPackage(ctx, callingUid, clientPackageName)", "import android.util.Log\nimport android.content.Context\nfun getCallingPackage(ctx: Context, callingUid: Int, clientPackageName: String? = null): String? {\r\n        val packages = ctx.packageManager.getPackagesForUid(callingUid) ?: return null\r\n        val packageName = packages.firstOrNull()\r\n        return if (clientPackageName == null || clientPackageName == packageName) {\r\n            packageName\r\n        } else {\r\n            Log.i(TAG, \"Unexpected package name mismatch between $clientPackageName and $packageName\")\r\n            null\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, util, Log], wildcard=false, alias=null)" ],
  "Iconify/380" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1271" : [ "override fun onCreate() {\n    super.onCreate()\n    Log.d(TAG, \"onCreate\")\n    state = State.CREATED\n    finishJobThread.start()\n    localNotificationsFacade = LocalNotificationsFacade(this)\n    val appDatabase: AppDatabase = AppDatabase.getDatabase(this, allowMainThreadAccess = true)\n    val crypto = AndroidNativeCryptoFacade(this)\n    val keyStoreFacade = createAndroidKeyStoreFacade(crypto)\n    val sseStorage = SseStorage(appDatabase, keyStoreFacade)\n    val alarmNotificationsManager = AlarmNotificationsManager(sseStorage, crypto, SystemAlarmFacade(this), localNotificationsFacade)\n    alarmNotificationsManager.reScheduleAlarms()\n    sseClient = SseClient(crypto, sseStorage, NetworkObserver(this, this), NotificationSseListener(localNotificationsFacade, sseStorage, alarmNotificationsManager, NetworkUtils.defaultClient), NetworkUtils.defaultClient)\n    sseStorage.observeUsers().observeForever { userInfos ->\n        Log.d(TAG, \"sse storage updated \" + userInfos.size)\n        lifecycleScope.launch(Dispatchers.IO) {\n            val userIds = userInfos.mapTo(HashSet()) {\n                it.userId\n            }\n            if (userIds.isEmpty()) {\n                sseClient.stopConnection()\n                removeForegroundNotification()\n                finishJobIfNeeded()\n            } else {\n                sseClient.restartConnectionIfNeeded(SseInfo(sseStorage.getPushIdentifier()!!, userIds, sseStorage.getSseOrigin()!!))\n            }\n        }\n    }\n    if (atLeastOreo()) {\n        localNotificationsFacade.createNotificationChannels()\n    }\n}", "import android.util.Log\noverride fun onDestroy() {\r\n\t\tLog.d(TAG, \"onDestroy\")\r\n\t\tthis.state = State.STOPPED\r\n\t\tsuper.onDestroy()\r\n\t}" ],
  "Iconify/383" : [ "private static boolean latIsGridPoint(double lat) {\r\n    return latOk(lat) && (latIsPole(lat) || lat == LATITUDE_MAX_GRID || lat == LATITUDE_MIN_GRID || lat <= LATITUDE_ROW_FIRST && lat >= LATITUDE_ROW_LAST && lat / LATITUDE_STEP == Math.round(lat / LATITUDE_STEP));\r\n}\n--------------------------------------------------\nprivate static boolean lngIsGridPoint(double lng) {\r\n    return lngOkGrid(lng) && lng / LONGITIDE_STEP == Math.round(lng / LONGITIDE_STEP);\r\n}\n--------------------------------------------------\n", "public static double round(double base, double decimals) {\r\n    double exp = Math.pow(10, decimals);\r\n    return Math.round(base * exp) / exp;\r\n}" ],
  "Neo-Backup/361" : [ "", "import io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun LoadingPreview() {\r\n    ComposeAppTheme {\r\n        Loading()\r\n    }\r\n}\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.tooling.preview.Preview\nimport io.horizontalsystems.bankwallet.ui.compose.ComposeAppTheme" ],
  "Trail-Sense/1274" : [ "            disconnect = getDisconnectButtonState(state, connection),\n            cancel = getCancelButtonState(state),\r\n            remove = getRemoveButtonState(state, connection),", "import io.horizontalsystems.bankwallet.modules.walletconnect.session.v2.WC2SessionServiceState.Ready\nimport io.horizontalsystems.bankwallet.R\nprivate fun getCancelButtonState(state: WC2SessionServiceState): WCButtonState {\r\n        return if (state != Ready) {\r\n            WCButtonState.Enabled\r\n        } else {\r\n            WCButtonState.Hidden\r\n        }\r\n    }\nimport io.horizontalsystems.bankwallet.R\nimport io.horizontalsystems.bankwallet.modules.walletconnect.session.v2.WC2SessionServiceState.Ready" ],
  "Iconify/384" : [ "private static boolean isColorLight(int backgroundColor) {\r\n    return calculateLuminance(backgroundColor) > 0.5f;\r\n}\n--------------------------------------------------\nprivate void ensureColors(int backgroundColor, int mForegroundColor) {\r\n    {\r\n        double backLum = NotificationColorUtil.calculateLuminance(backgroundColor);\r\n        double textLum = NotificationColorUtil.calculateLuminance(mForegroundColor);\r\n        double contrast = NotificationColorUtil.calculateContrast(mForegroundColor, backgroundColor);\r\n        // We only respect the given colors if worst case Black or White still has\r\n        // contrast\r\n        boolean backgroundLight = backLum > textLum && NotificationColorUtil.satisfiesTextContrast(backgroundColor, Color.BLACK) || backLum <= textLum && !NotificationColorUtil.satisfiesTextContrast(backgroundColor, Color.WHITE);\r\n        if (contrast < 4.5f) {\r\n            if (backgroundLight) {\r\n                secondaryTextColor = NotificationColorUtil.findContrastColor(mForegroundColor, backgroundColor, true, /* findFG */\r\n                4.5f);\r\n                primaryTextColor = NotificationColorUtil.changeColorLightness(secondaryTextColor, -LIGHTNESS_TEXT_DIFFERENCE_LIGHT);\r\n            } else {\r\n                secondaryTextColor = NotificationColorUtil.findContrastColorAgainstDark(mForegroundColor, backgroundColor, true, /* findFG */\r\n                4.5f);\r\n                primaryTextColor = NotificationColorUtil.changeColorLightness(secondaryTextColor, -LIGHTNESS_TEXT_DIFFERENCE_DARK);\r\n            }\r\n        } else {\r\n            primaryTextColor = mForegroundColor;\r\n            secondaryTextColor = NotificationColorUtil.changeColorLightness(primaryTextColor, backgroundLight ? LIGHTNESS_TEXT_DIFFERENCE_LIGHT : LIGHTNESS_TEXT_DIFFERENCE_DARK);\r\n            if (NotificationColorUtil.calculateContrast(secondaryTextColor, backgroundColor) < 4.5f) {\r\n                // oh well the secondary is not good enough\r\n                if (backgroundLight) {\r\n                    secondaryTextColor = NotificationColorUtil.findContrastColor(secondaryTextColor, backgroundColor, true, /* findFG */\r\n                    4.5f);\r\n                } else {\r\n                    secondaryTextColor = NotificationColorUtil.findContrastColorAgainstDark(secondaryTextColor, backgroundColor, true, /* findFG */\r\n                    4.5f);\r\n                }\r\n                primaryTextColor = NotificationColorUtil.changeColorLightness(secondaryTextColor, backgroundLight ? -LIGHTNESS_TEXT_DIFFERENCE_LIGHT : -LIGHTNESS_TEXT_DIFFERENCE_DARK);\r\n            }\r\n        }\r\n    }\r\n    actionBarColor = NotificationColorUtil.resolveActionBarColor(context, backgroundColor);\r\n}\n--------------------------------------------------\n", "import androidx.annotation.ColorInt;\r\nimport androidx.annotation.FloatRange\nimport androidx.annotation.ColorInt\nimport android.graphics.Color\n/**\r\n * Returns the luminance of a color as a float between {@code 0.0} and {@code 1.0}.\r\n *\r\n * <p>Defined as the Y component in the XYZ representation of {@code color}.\r\n */\r\n@FloatRange(from = 0.0, to = 1.0)\r\npublic static double calculateLuminance(@ColorInt int color) {\r\n    final double[] result = getTempDouble3Array();\r\n    colorToXYZ(color, result);\r\n    // Luminance is the Y component\r\n    return result[1] / 100;\r\n}" ],
  "VinylMusicPlayer/862" : [ "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        listener = (NoteFragmentListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.getClass() + \" must implement \" + NoteFragmentListener.class);\r\n    }\r\n    repo = NotesRepository.getInstance(context);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onDetach() {\r\n    super.onDetach();\r\n    listener = null;\r\n}" ],
  "Trail-Sense/1278" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "Neo-Backup/365" : [ "model.deleteBaseNote()", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.omgodse.notally.widget.WidgetProvider\nimport com.omgodse.notally.room.Image\nimport com.omgodse.notally.room.BaseNote\nimport com.omgodse.notally.miscellaneous.IO\nimport com.omgodse.notally.ImageDeleteService\nsuspend fun deleteBaseNote() {\r\n        withContext(Dispatchers.IO) { baseNoteDao.delete(id) }\r\n        WidgetProvider.sendBroadcast(app, longArrayOf(id))\r\n        if (images.value.isNotEmpty()) {\r\n            val copy = ArrayList(images.value)\r\n            ImageDeleteService.start(app, copy)\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, ImageDeleteService], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, Image], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, widget, WidgetProvider], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/991" : [ "        registerMessageListChangedListenerAsync()\n        loadMessageListAsync()\r\n    }", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nprivate fun loadMessageListAsync() {\r\n        coroutineScope.launch(Dispatchers.Main) {\r\n            val messageList = withContext(Dispatchers.IO) {\r\n                messageListLoader.getMessageList(config)\r\n            }\r\n            value = messageList\r\n        }\r\n    }\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1279" : [ "return buildResultFailure(R.string.trakt_error_not_exists)\n--------------------------------------------------\nreturn buildResultFailure(R.string.unknown)\n--------------------------------------------------\nreturn buildResultFailure(R.string.trakt_error_credentials)\n--------------------------------------------------\nbuildResultFailure()\n--------------------------------------------------\nbuildResultFailure(R.string.offline)\n--------------------------------------------------\nbuildResultFailure(false)\n--------------------------------------------------\nbuildResultFailure(true)", "import com.battlelancer.seriesguide.R\nprivate fun buildResultFailure(): Result {\r\n        return Result(\r\n            emptyText = context.getString(\r\n                R.string.api_error_generic,\r\n                context.getString(R.string.trakt)\r\n            )\r\n        )\r\n    }\nImport(names=[com, battlelancer, seriesguide, R], wildcard=false, alias=null)" ],
  "Neo-Backup/366" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/992" : [ "handleDestinationChange(destination)", "import com.omgodse.notally.R\nimport androidx.navigation.NavDestination\nimport androidx.core.view.isVisible\nprivate fun handleDestinationChange(destination: NavDestination) {\r\n        if (destination.id == R.id.Notes) {\r\n            binding.TakeNote.show()\r\n            binding.MakeList.show()\r\n        } else {\r\n            binding.TakeNote.hide()\r\n            binding.MakeList.hide()\r\n        }\r\n\r\n        binding.EnterSearchKeyword.isVisible = (destination.id == R.id.Search)\r\n    }\nImport(names=[androidx, core, view, isVisible], wildcard=false, alias=null)\nImport(names=[androidx, navigation, NavDestination], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, R], wildcard=false, alias=null)" ],
  "Trail-Sense/993" : [ "= publish(filteringJob(charSequence))", "private fun publish(list: MutableList<T>?) {\r\n        sourceSet?.let {\r\n            if (list !== null)\r\n                dataset.value = list\r\n            else {\r\n                dataset.value = it\r\n                sourceSet = null\r\n            }\r\n        }\r\n    }" ],
  "Trail-Sense/1277" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/512" : [ "", "import android.location.Location\noverride fun onLocationChanged(location: Location) {\r\n        if (isBetterPosition(location, _position.value)) {\r\n            _position.value = location\r\n        }\r\n    }\nImport(names=[android, location, Location], wildcard=false, alias=null)" ],
  "Neo-Backup/367" : [ "model.deleteBaseNote()", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.omgodse.notally.widget.WidgetProvider\nimport com.omgodse.notally.room.Image\nimport com.omgodse.notally.room.BaseNote\nimport com.omgodse.notally.miscellaneous.IO\nimport com.omgodse.notally.ImageDeleteService\nsuspend fun deleteBaseNote() {\r\n        withContext(Dispatchers.IO) { baseNoteDao.delete(id) }\r\n        WidgetProvider.sendBroadcast(app, longArrayOf(id))\r\n        if (images.value.isNotEmpty()) {\r\n            val copy = ArrayList(images.value)\r\n            ImageDeleteService.start(app, copy)\r\n        }\r\n    }\nImport(names=[com, omgodse, notally, ImageDeleteService], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, room, Image], wildcard=false, alias=null)\nImport(names=[com, omgodse, notally, widget, WidgetProvider], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/513" : [ "${formatDate(context, trip.firstDepartureTime)}\n--------------------------------------------------\nformatDate(context, trip.firstDepartureTime)\n--------------------------------------------------\ndate.text = formatDate(context, calendar.time)", "import android.text.format.DateFormat\nimport android.content.Context\nfun formatDate(context: Context, date: Date): String {\r\n        val df = DateFormat.getDateFormat(context)\r\n        return df.format(date)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, format, DateFormat], wildcard=false, alias=null)" ],
  "Neo-Backup/368" : [ "view.notes.setText(requireArguments().getString(\"notes\")!!)\n--------------------------------------------------\nbinding.xTimesPerMonthTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.everyXDaysTextView.setText(freqDenominator.toString())\n--------------------------------------------------\nbinding.xTimesPerWeekTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.xTimesPerYDaysXTextView.setText(freqNumerator.toString())\n--------------------------------------------------\nbinding.xTimesPerYDaysYTextView.setText(freqDenominator.toString())\n--------------------------------------------------\nview.notes.setText(originalNotes)\n--------------------------------------------------\nsetText(when {\n    originalValue < 0.01 -> \"0\"\n    else -> DecimalFormat(\"#.##\").format(originalValue)\n})\n--------------------------------------------------\nview.value.setText((Entry.SKIP.toDouble() / 1000).toString())\n--------------------------------------------------\nbinding.nameInput.setText(habit.name)\n--------------------------------------------------\nbinding.questionInput.setText(habit.question)\n--------------------------------------------------\nbinding.notesInput.setText(habit.description)\n--------------------------------------------------\nbinding.unitInput.setText(habit.unit)\n--------------------------------------------------\nbinding.targetInput.setText(habit.targetValue.toString())\n--------------------------------------------------\nfindViewById<TextView>(R.id.message).setText(getEmptyMessage())\n--------------------------------------------------\nring.setText(text)", "fun setText(text: String?) {\r\n        this.text = text\r\n        invalidate()\r\n    }" ],
  "Trail-Sense/997" : [ "fragment?.setColor(colors)\n--------------------------------------------------\nsetColor(colors)\n--------------------------------------------------\nplaybackControlsFragment.setColor(color)\n--------------------------------------------------\ncontrolsFragment.setColor(color)\n--------------------------------------------------\nplainPlaybackControlsFragment.setColor(color)\n--------------------------------------------------\naccentColorPref?.setColor(accentColor, ColorUtil.darkenColor(accentColor))", "import code.name.monkey.retromusic.util.color.MediaNotificationProcessor\nimport code.name.monkey.retromusic.R\nprivate fun setColor(color: MediaNotificationProcessor) {\n            this.color = color\n            isColorReady = true\n            if (colorReceiver != null) {\n                colorReceiver!!.onColorReady(color, request)\n                colorReceiver = null\n            }\n        }\nImport(names=[code, name, monkey, retromusic, util, color, MediaNotificationProcessor], wildcard=false, alias=null)" ],
  "Trail-Sense/514" : [ "${formatDate(context, trip.firstDepartureTime)}\n--------------------------------------------------\nformatDate(context, trip.firstDepartureTime)\n--------------------------------------------------\ndate.text = formatDate(context, calendar.time)", "import android.text.format.DateFormat\nimport android.content.Context\nfun formatDate(context: Context, date: Date): String {\r\n        val df = DateFormat.getDateFormat(context)\r\n        return df.format(date)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, format, DateFormat], wildcard=false, alias=null)" ],
  "Trail-Sense/515" : [ "${formatDate(context, trip.firstDepartureTime)}\n--------------------------------------------------\nformatDate(context, trip.firstDepartureTime)\n--------------------------------------------------\ndate.text = formatDate(context, calendar.time)", "import android.text.format.DateFormat\nimport android.content.Context\nfun formatDate(context: Context, date: Date): String {\r\n        val df = DateFormat.getDateFormat(context)\r\n        return df.format(date)\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, text, format, DateFormat], wildcard=false, alias=null)" ],
  "Trail-Sense/518" : [ "", "import kotlinx.coroutines.runBlocking\nimport android.content.Intent\nimport android.content.Context\nimport android.app.AlarmManager\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        if (intent?.action == Intent.ACTION_BOOT_COMPLETED) {\r\n            val alarmManager = context?.getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n            runBlocking {\r\n                val alarms = getAllAlarms()\r\n                alarms.forEach {\r\n                    alarmManager.scheduleAlarm(it, context)\r\n                }\r\n            }\r\n        }\r\n\r\n    }\nImport(names=[android, app, AlarmManager], wildcard=false, alias=null)\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, runBlocking], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/854" : [ "listener.onPlayingMetaChanged()\n--------------------------------------------------\nactivity.onPlayingMetaChanged()\n--------------------------------------------------\nsuper.onPlayingMetaChanged()", "import code.name.monkey.retromusic.model.Song\noverride fun onPlayingMetaChanged() {\n        updateIsFavorite()\n        updateSong()\n    }" ],
  "fcitx5-android/255" : [ "moveToNextState()", "private fun moveToNextState() {\r\n        state = when (state) {\r\n            null -> true\r\n            true -> false\r\n            false -> null\r\n        }\r\n    }" ],
  "VinylMusicPlayer/1122" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1203" : [ "", "import io.reactivex.Flowable\nimport com.google.gson.JsonObject\noverride fun getTransactionWithPost(host: String, path: String, body: Map<String, Any>): Flowable<JsonObject> {\r\n        return ServiceFullTransaction.service(host)\r\n            .getFullTransactionWithPost(path, body.mapValues { it.value.toString() })\r\n    }\nImport(names=[io, reactivex, Flowable], wildcard=false, alias=null)" ],
  "Trail-Sense/922" : [ "bitmap = padSquare(bitmap)", "import kotlin.math.max\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nprivate fun padSquare(src: Bitmap): Bitmap {\r\n        val width = src.width\r\n        val height = src.height\r\n        if (width == height) return src\r\n        val maxSize = max(width, height)\r\n        val x = ((height - width) / 2f).coerceAtLeast(0f)\r\n        val y = ((width - height) / 2f).coerceAtLeast(0f)\r\n        val dst = Bitmap.createBitmap(maxSize, maxSize, Bitmap.Config.ARGB_8888)\r\n        val c = Canvas(dst)\r\n        c.drawBitmap(src, x, y, null)\r\n        return dst\r\n    }\nImport(names=[android, graphics, Bitmap], wildcard=false, alias=null)\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)\nImport(names=[kotlin, math, max], wildcard=false, alias=null)" ],
  "Trail-Sense/923" : [ "\"SMA\" -> calculateSMA(points, period)\n--------------------------------------------------\n            try {\n                val smaValues = ChartIndicatorManager.calculateSMA(period = period, points = pointsForIndicators)\r\n                chartData[\"sma_$period\"] = smaValues", "fun calculateSMA(\r\n            points: LinkedHashMap<Long, Float>,\r\n            period: Int\r\n        ): LinkedHashMap<Long, Float> {\r\n            val pointsList = points.toList()\r\n            return LinkedHashMap(\r\n                pointsList.windowed(period, 1) {\r\n                    it.last().first to it.map { it.second }.average().toFloat()\r\n                }.toMap()\r\n            )\r\n        }" ],
  "Trail-Sense/924" : [ "super.onMeasure(widthMeasureSpec, heightMeasureSpec)", "override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\r\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\r\n        val height = (measuredWidth * 0.75).toInt()\r\n        if (height != measuredHeight) {\r\n            setMeasuredDimension(measuredWidth, height)\r\n        }\r\n    }" ],
  "Trail-Sense/928" : [ "event.addMetadata(key, value)\n--------------------------------------------------\n=\r\n        metadataState.addMetadata(section, value)\n--------------------------------------------------\n=\r\n        metadataState.addMetadata(section, key, value)\n--------------------------------------------------\nmetadata.addMetadata(section, value)\n--------------------------------------------------\nmetadata.addMetadata(section, key, value)\n--------------------------------------------------\naddMetadata(section, it.key, it.value)", "override fun addMetadata(section: String, value: Map<String, Any?>) {\r\n        value.entries.forEach {\r\n            addMetadata(section, it.key, it.value)\r\n        }\r\n    }" ],
  "Trail-Sense/929" : [ "loc.getName()\n--------------------------------------------------\nnetwork.getName(this)\n--------------------------------------------------\ncontinent.getName(context)\n--------------------------------------------------\nc1.getName(context)\n--------------------------------------------------\nc2.getName(context)\n--------------------------------------------------\ncountry.getName(context)\n--------------------------------------------------\nregion.getName(name.context)\n--------------------------------------------------\ntransportNetwork.getName(context)\n--------------------------------------------------\nnetwork.getName(it)\n--------------------------------------------------\nloc1.getName()", "import android.content.Context\noverride fun getName(context: Context): String {\r\n        return if (name == 0) {\r\n            id.name\r\n        } else {\r\n            context.getString(name)\r\n        }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)" ],
  "fcitx5-android/286" : [ "override fun onStop() {\n    super.onStop()\n    preferenceScreen.sharedPreferences!!.unregisterOnSharedPreferenceChangeListener(this)\n}", "import androidx.preference.Preference\noverride fun onStart() {\r\n        super.onStart()\r\n        preferenceScreen.sharedPreferences!!.registerOnSharedPreferenceChangeListener(this)\r\n    }" ],
  "Trail-Sense/1211" : [ "activity.resources.getString(R.string.you_are_now_a_developer)\n--------------------------------------------------\nresources.getString(R.string.about)\n--------------------------------------------------\nresources.getString(R.string.version_n)\n--------------------------------------------------\nrequireArguments().getString(\"notes\")\n--------------------------------------------------\nres.getString(R.string.yes)\n--------------------------------------------------\nres.getString(R.string.no)\n--------------------------------------------------\nthis.getString(R.string.every_x_days)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_week)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_month)\n--------------------------------------------------\nthis.getString(R.string.x_times_per_y_days)\n--------------------------------------------------\nresources.getString(R.string.every_month)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_month, freqNum)\n--------------------------------------------------\nresources.getString(R.string.every_day)\n--------------------------------------------------\nresources.getString(R.string.every_week)\n--------------------------------------------------\nresources.getString(R.string.every_x_days, freqDen)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_week, freqNum)\n--------------------------------------------------\nresources.getString(R.string.x_times_per_y_days, freqNum, freqDen)\n--------------------------------------------------\nbinding.toolbar.title = getString(R.string.edit_habit)\n--------------------------------------------------\nbinding.nameInput.hint = getString(R.string.measurable_short_example)\n--------------------------------------------------\nbinding.questionInput.hint = getString(R.string.measurable_question_example)\n--------------------------------------------------\ngetString(R.string.target_type_at_least)\n--------------------------------------------------\ngetString(R.string.target_type_at_most)\n--------------------------------------------------\ngetString(R.string.every_day)\n--------------------------------------------------\ngetString(R.string.every_week)\n--------------------------------------------------\ngetString(R.string.every_month)\n--------------------------------------------------\nbinding.targetInput.error = getString(R.string.validation_cannot_be_blank)\n--------------------------------------------------\nbinding.reminderTimePicker.text = getString(R.string.reminder_off)\n--------------------------------------------------\n1 -> getString(R.string.every_day)\n--------------------------------------------------\n7 -> getString(R.string.every_week)\n--------------------------------------------------\n30 -> getString(R.string.every_month)\n--------------------------------------------------\nNumericalHabitType.AT_MOST -> getString(R.string.target_type_at_most)\n--------------------------------------------------\nelse -> getString(R.string.target_type_at_least)\n--------------------------------------------------\n${getString(resId)}\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_entered)\n--------------------------------------------------\nactivity.resources.getString(R.string.hide_completed)\n--------------------------------------------------\nresources.getString(R.string.main_activity_title)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_import)\n--------------------------------------------------\ngetString(when(m) {\n    COULD_NOT_EXPORT -> R.string.could_not_export\n    IMPORT_SUCCESSFUL -> R.string.habits_imported\n    IMPORT_FAILED -> R.string.could_not_import\n    DATABASE_REPAIRED -> R.string.database_repaired\n    COULD_NOT_GENERATE_BUG_REPORT -> R.string.bug_report_failed\n    FILE_NOT_RECOGNIZED -> R.string.file_not_recognized\n})\n--------------------------------------------------\nactivity.resources.getString(R.string.toast_habit_created)\n--------------------------------------------------\nactivity.resources.getString(R.string.habits_imported)\n--------------------------------------------------\nactivity.resources.getString(R.string.file_not_recognized)\n--------------------------------------------------\nactivity.resources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(id)\n--------------------------------------------------\nresources.getString(R.string.hint_title)\n--------------------------------------------------\nresources.getString(R.string.fa_skipped)\n--------------------------------------------------\nresources.getString(R.string.fa_question)\n--------------------------------------------------\nresources.getString(R.string.could_not_export)\n--------------------------------------------------\nresources.getString(R.string.reminder_off)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_up)\n--------------------------------------------------\nresources.getString(R.string.fa_arrow_circle_down)\n--------------------------------------------------\nresources.getString(R.string.today)\n--------------------------------------------------\nresources.getString(R.string.week)\n--------------------------------------------------\nresources.getString(R.string.month)\n--------------------------------------------------\nresources.getString(R.string.quarter)\n--------------------------------------------------\nresources.getString(R.string.year)\n--------------------------------------------------\ngetString(R.string.intro_title_1)\n--------------------------------------------------\ngetString(R.string.intro_description_1)\n--------------------------------------------------\ngetString(R.string.intro_title_2)\n--------------------------------------------------\ngetString(R.string.intro_description_2)\n--------------------------------------------------\ngetString(R.string.intro_title_4)\n--------------------------------------------------\ngetString(R.string.intro_description_4)\n--------------------------------------------------\nresources.getString(R.string.settings)\n--------------------------------------------------\ngetString(R.string.playStoreURL)\n--------------------------------------------------\nactivity.getString(R.string.check)\n--------------------------------------------------\nactivity.getString(R.string.uncheck)\n--------------------------------------------------\nactivity.getString(R.string.toggle)\n--------------------------------------------------\nactivity.getString(R.string.increment)\n--------------------------------------------------\nactivity.getString(R.string.decrement)\n--------------------------------------------------\nresources.getString(R.string.app_name)\n--------------------------------------------------\ncursor.getString(index)\n--------------------------------------------------\ncontext.getString(R.string.translateURL)\n--------------------------------------------------\ncontext.getString(R.string.playStoreURL)\n--------------------------------------------------\ncontext.getString(R.string.feedbackURL)\n--------------------------------------------------\ncontext.getString(R.string.privacyPolicyURL)\n--------------------------------------------------\ncontext.getString(R.string.helpURL)\n--------------------------------------------------\ncontext.getString(R.string.sourceCodeURL)\n--------------------------------------------------\ncontext.getString(R.string.codeContributorsURL)\n--------------------------------------------------\ncontext.getString(R.string.yes)\n--------------------------------------------------\ncontext.getString(R.string.no)\n--------------------------------------------------\ncontext.getString(R.string.enter)\n--------------------------------------------------\ncontext.getString(R.string.default_reminder_question)\n--------------------------------------------------\ncontext.getString(R.string.snooze)\n--------------------------------------------------\ncontext.resources.getString(R.string.reminder)\n--------------------------------------------------\ncontext.resources.getString(R.string.none)\n--------------------------------------------------\nprefs.getString(\"pref_ringtone_uri\", defaultRingtoneUri.toString())\n--------------------------------------------------\nsharedPrefs.getString(key, defValue)\n--------------------------------------------------\ncontext.resources.getString(resId)\n--------------------------------------------------\ncontext.getString(R.string.weekends)\n--------------------------------------------------\ncontext.getString(R.string.any_weekday)\n--------------------------------------------------\ncontext.getString(R.string.any_day)\n--------------------------------------------------\nresources.getString(R.string.activity_not_found)\n--------------------------------------------------\nthis.getString(toId)\n--------------------------------------------------\nthis.getString(subjectId)\n--------------------------------------------------\ncontext.getString(R.string.habit_not_found)\n--------------------------------------------------\nresources.getString(R.string.fa_check)\n--------------------------------------------------\nresources.getString(R.string.fa_times)", "override fun getString(index: Int): String? {\r\n        return if (cursor.isNull(index)) {\r\n            null\r\n        } else {\r\n            cursor.getString(index)\r\n        }\r\n    }" ],
  "Trail-Sense/1216" : [ "adapter.setWorkLocation(workLocation)\n--------------------------------------------------\nfromLocation.setWorkLocation(it)\n--------------------------------------------------\nviaLocation.setWorkLocation(it)\n--------------------------------------------------\ntoLocation.setWorkLocation(it)", "import de.grobox.transportr.locations.WrapLocation\nfun setWorkLocation(location: WrapLocation) {\r\n        runOnBackgroundThread {\r\n            // add also as favorite location if it doesn't exist already\r\n            val favoriteLocation = getFavoriteLocation(networkId.value, location)\r\n            if (favoriteLocation == null) locationDao.addFavoriteLocation(FavoriteLocation(networkId.value, location))\r\n\r\n            locationDao.addWorkLocation(WorkLocation(networkId.value!!, location))\r\n        }\r\n    }\nImport(names=[de, grobox, transportr, locations, WrapLocation], wildcard=false, alias=null)" ],
  "Neo-Backup/303" : [ "IO.copyStreamToFile(stream, destination)\n--------------------------------------------------\nIO.copyStreamToFile(inputStream, databaseFile)\n--------------------------------------------------\nIO.copyStreamToFile(imageStream, file)\n--------------------------------------------------\nIO.copyStreamToFile(inputStream, temp)", "import java.io.InputStream\nimport java.io.FileOutputStream\nimport java.io.File\nfun copyStreamToFile(input: InputStream, destination: File) {\r\n        val output = FileOutputStream(destination)\r\n        input.copyTo(output)\r\n        input.close()\r\n        output.close()\r\n    }\nImport(names=[java, io, File], wildcard=false, alias=null)\nImport(names=[java, io, FileOutputStream], wildcard=false, alias=null)\nImport(names=[java, io, InputStream], wildcard=false, alias=null)" ],
  "Trail-Sense/1217" : [ "isLrcFileExist(song.title, song.artistName)", "private fun isLrcFileExist(title: String, artist: String): Boolean {\n        val file = File(getLrcPath(title, artist))\n        return file.exists()\n    }" ],
  "VinylMusicPlayer/837" : [ "", "import it.feio.android.omninotes.utils.GeocodeHelper;\r\nimport it.feio.android.omninotes.utils.GeocodeHelper\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    GeocodeHelper.stop();\r\n}" ],
  "VinylMusicPlayer/836" : [ "initAdapter()", "import me.zhanghai.android.fastscroll.FastScroller\nimport code.name.monkey.retromusic.util.ThemedFastScroller.create\nimport code.name.monkey.retromusic.R\nimport androidx.recyclerview.widget.RecyclerView\nprivate fun initAdapter() {\n        adapter = createAdapter()\n        adapter?.registerAdapterDataObserver(object : RecyclerView.AdapterDataObserver() {\n            override fun onChanged() {\n                super.onChanged()\n                checkIsEmpty()\n            }\n        })\n    }\nImport(names=[androidx, recyclerview, widget, RecyclerView], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, R], wildcard=false, alias=null)\nImport(names=[code, name, monkey, retromusic, util, ThemedFastScroller, create], wildcard=false, alias=null)" ],
  "Trail-Sense/933" : [ "override fun onResume() {\n    super.onResume()\n    NotesHelper(requireActivity()).getNoteWithId(noteId) {\n        if (it != null) {\n            note = it\n            setupFragment()\n        }\n    }\n}", "import com.simplemobiletools.notes.pro.extensions.config\nimport android.text.TextWatcher\noverride fun onPause() {\r\n        super.onPause()\r\n        if (config!!.autosaveNotes) {\r\n            saveText(false)\r\n        }\r\n\r\n        removeTextWatcher()\r\n    }" ],
  "Trail-Sense/934" : [ "setBackgroundAlpha(preferedBackgroundAlpha)\n--------------------------------------------------\nwidgetView.setBackgroundAlpha(preferedBackgroundAlpha)", "fun setBackgroundAlpha(backgroundAlpha: Int) {\r\n        this.backgroundAlpha = backgroundAlpha\r\n        rebuildBackground()\r\n    }" ],
  "Trail-Sense/1219" : [ "        val usedAccountColors = accounts.map { it.chipColor }.toSet()\n        val accountColors = resources.getIntArray(R.array.account_colors).toList()\r\n\n--------------------------------------------------\n\n        val defaultAccountColors = resources.getIntArray(R.array.default_account_colors)\r\n        return availableColors.shuffled().minByOrNull { color ->\n--------------------------------------------------\nextras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)\n--------------------------------------------------\nstorage.getInt(MESSAGE_LIST_SUBJECT, messageListSubject)\n--------------------------------------------------\nstorage.getInt(MESSAGE_LIST_SENDER, messageListSender)\n--------------------------------------------------\nstorage.getInt(MESSAGE_LIST_DATE, messageListDate)\n--------------------------------------------------\nstorage.getInt(MESSAGE_LIST_PREVIEW, messageListPreview)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_ACCOUNT_NAME, messageViewAccountName)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_SENDER, messageViewSender)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_RECIPIENTS, messageViewRecipients)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_SUBJECT, messageViewSubject)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_DATE, messageViewDate)\n--------------------------------------------------\nstorage.getInt(MESSAGE_COMPOSE_INPUT, messageComposeInput)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_CONTENT_PERCENT, DEFAULT_CONTENT_SIZE_IN_PERCENT)", "override fun getInt(key: String?, defValue: Int): Int {\r\n        return when (key) {\r\n            \"chip_color\" -> account.chipColor\r\n            else -> defValue\r\n        }\r\n    }" ],
  "VinylMusicPlayer/832" : [ "@Override\r\npublic void onAttach(@NonNull Context context) {\r\n    super.onAttach(context);\r\n    try {\r\n        listener = (NoteFragmentListener) context;\r\n    } catch (ClassCastException e) {\r\n        throw new ClassCastException(context.getClass() + \" must implement \" + NoteFragmentListener.class);\r\n    }\r\n    repo = NotesRepository.getInstance(context);\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onDetach() {\r\n    super.onDetach();\r\n    listener = null;\r\n}" ],
  "fcitx5-android/271" : [ "adapter.toggleSelection(position)\n--------------------------------------------------\ntoggleSelection(position)", "fun toggleSelection(position: Int) {\r\n        val h = getItem(position) ?: return\r\n        val k = selected.indexOf(h)\r\n        if (k < 0) selected.add(h) else selected.remove(h)\r\n        notifyDataSetChanged()\r\n    }" ],
  "VinylMusicPlayer/835" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/834" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1224" : [ "        dueDate = remote.dueDateTime.toLong(0L)\n        creationDate = remote.createdDateTime.parseDateTime()\r\n        modificationDate = remote.lastModifiedDateTime.parseDateTime()\n--------------------------------------------------\n        creationDate = remote.createdDateTime.parseDateTime()\n        modificationDate = remote.lastModifiedDateTime.parseDateTime()\r\n        recurrence = remote.recurrence?.let { recurrence ->", "import java.time.ZonedDateTime\nimport org.tasks.time.DateTime\nprivate fun String?.parseDateTime(): Long =\r\n        this\r\n            ?.let { ZonedDateTime.parse(this).toInstant().toEpochMilli() }\r\n            ?: System.currentTimeMillis()\nimport org.tasks.time.DateTime\nimport java.time.ZonedDateTime" ],
  "Trail-Sense/1221" : [ "        val usedAccountColors = accounts.map { it.chipColor }.toSet()\n        val accountColors = resources.getIntArray(R.array.account_colors).toList()\r\n\n--------------------------------------------------\n\n        val defaultAccountColors = resources.getIntArray(R.array.default_account_colors)\r\n        return availableColors.shuffled().minByOrNull { color ->\n--------------------------------------------------\nextras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)\n--------------------------------------------------\nstorage.getInt(MESSAGE_LIST_SUBJECT, messageListSubject)\n--------------------------------------------------\nstorage.getInt(MESSAGE_LIST_SENDER, messageListSender)\n--------------------------------------------------\nstorage.getInt(MESSAGE_LIST_DATE, messageListDate)\n--------------------------------------------------\nstorage.getInt(MESSAGE_LIST_PREVIEW, messageListPreview)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_ACCOUNT_NAME, messageViewAccountName)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_SENDER, messageViewSender)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_RECIPIENTS, messageViewRecipients)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_SUBJECT, messageViewSubject)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_DATE, messageViewDate)\n--------------------------------------------------\nstorage.getInt(MESSAGE_COMPOSE_INPUT, messageComposeInput)\n--------------------------------------------------\nstorage.getInt(MESSAGE_VIEW_CONTENT_PERCENT, DEFAULT_CONTENT_SIZE_IN_PERCENT)", "override fun getInt(key: String?, defValue: Int): Int {\r\n        return when (key) {\r\n            \"chip_color\" -> account.chipColor\r\n            else -> defValue\r\n        }\r\n    }" ],
  "Trail-Sense/1227" : [ "updateDependencies(context)", "import org.isoron.uhabits.core.preferences.Preferences\nimport org.isoron.uhabits.core.models.Habit\nimport org.isoron.uhabits.HabitsApplication\nimport android.content.Context\nprivate fun updateDependencies(context: Context) {\r\n        val app = context.applicationContext as HabitsApplication\r\n        habits = app.component.habitList\r\n        preferences = app.component.preferences\r\n        widgetPrefs = app.component.widgetPreferences\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, HabitsApplication], wildcard=false, alias=null)\nImport(names=[org, isoron, uhabits, core, models, Habit], wildcard=false, alias=null)" ],
  "Neo-Backup/314" : [ "        val playerIntent = Intent(Intent.ACTION_VIEW).apply {\n            if (context.packageManager.isPackageInstalled(appPreferences.externalPlayerApp)) {\r\n                component = getComponent(appPreferences.externalPlayerApp)\n--------------------------------------------------\n        ).filter { item ->\n            item.key == ExternalPlayerPackage.SYSTEM_DEFAULT || packageManager.isPackageInstalled(item.key)\r\n        }\n--------------------------------------------------\n        // Revert if current selection isn't available\n        if (!packageManager.isPackageInstalled(appPreferences.externalPlayerApp)) {\r\n            appPreferences.externalPlayerApp = ExternalPlayerPackage.SYSTEM_DEFAULT", "import org.koin.android.ext.android.get\nimport org.jellyfin.mobile.settings.ExternalPlayerPackage\nimport android.content.pm.PackageManager\nfun PackageManager.isPackageInstalled(@ExternalPlayerPackage packageName: String) = try {\r\n    packageName.isNotEmpty() && getApplicationInfo(packageName, 0).enabled\r\n} catch (e: PackageManager.NameNotFoundException) {\r\n    false\r\n}\nimport android.content.pm.PackageManager\nimport org.jellyfin.mobile.settings.ExternalPlayerPackage\nimport org.koin.android.ext.android.get" ],
  "Trail-Sense/1228" : [ "getWidgetRepository(context!!).deleteWidget(it)\n--------------------------------------------------\nval widgetRepository = getWidgetRepository(context)", "import org.videolan.vlc.repository.WidgetRepository\nimport org.videolan.vlc.R\nimport android.content.Context\nprivate fun getWidgetRepository(context: Context) = if (::_widgetRepository.isInitialized) _widgetRepository else {\r\n        _widgetRepository = WidgetRepository.getInstance(context)\r\n        _widgetRepository\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[org, videolan, vlc, repository, WidgetRepository], wildcard=false, alias=null)" ],
  "Neo-Backup/312" : [ "loadWithPaginationPath.apply(paginatingData.second!!)\n--------------------------------------------------\nloadWithParams.apply(paginatingData.first)\n--------------------------------------------------\nenvelopeToMoreUrl.apply(envelope)\n--------------------------------------------------\n= apply {\n    this.country = country\n}\n--------------------------------------------------\n= apply {\n    this.currencyCode = currencyCode\n}\n--------------------------------------------------\n= apply {\n    this.currencySymbol = currencySymbol\n}\n--------------------------------------------------\n= apply {\n    this.value = value\n}\n--------------------------------------------------\n= apply {\n    this.activitySamplePreference = activitySamplePreference\n}\n--------------------------------------------------\n= apply {\n    this.apiClient = apiClient\n}\n--------------------------------------------------\n= apply {\n    this.apiClientV2 = apiClientV2\n}\n--------------------------------------------------\n= apply {\n    this.apolloClient = apolloClient\n}\n--------------------------------------------------\n= apply {\n    this.apolloClientV2 = apolloClientV2\n}\n--------------------------------------------------\n= apply {\n    this.build = build\n}\n--------------------------------------------------\n= apply {\n    this.cookieManager = cookieManager\n}\n--------------------------------------------------\n= apply {\n    this.currentConfig = currentConfig\n}\n--------------------------------------------------\n= apply {\n    this.currentConfigV2 = currentConfig2\n}\n--------------------------------------------------\n= apply {\n    this.currentUser = currentUser\n}\n--------------------------------------------------\n= apply {\n    this.currentUserV2 = currentUserV2\n}\n--------------------------------------------------\n= apply {\n    this.firstSessionPreference = firstSessionPreference\n}\n--------------------------------------------------\n= apply {\n    this.gson = gson\n}\n--------------------------------------------------\n= apply {\n    this.hasSeenAppRatingPreference = hasSeenAppRatingPreference\n}\n--------------------------------------------------\n= apply {\n    this.hasSeenGamesNewsletterPreference = hasSeenGamesNewsletterPreference\n}\n--------------------------------------------------\n= apply {\n    this.internalTools = internalTools\n}\n--------------------------------------------------\n= apply {\n    this.ksCurrency = ksCurrency\n}\n--------------------------------------------------\n= apply {\n    this.ksString = ksString\n}\n--------------------------------------------------\n= apply {\n    this.analytics = analytics\n}\n--------------------------------------------------\n= apply {\n    this.logout = logout\n}\n--------------------------------------------------\n= apply {\n    this.playServicesCapability = playServicesCapability\n}\n--------------------------------------------------\n= apply {\n    this.scheduler = scheduler\n}\n--------------------------------------------------\n= apply {\n    this.schedulerV2 = schedulerV2\n}\n--------------------------------------------------\n= apply {\n    this.sharedPreferences = sharedPreferences\n}\n--------------------------------------------------\n= apply {\n    this.stripe = stripe\n}\n--------------------------------------------------\n= apply {\n    this.webEndpoint = webEndpoint\n}\n--------------------------------------------------\n= apply {\n    this.firebaseAnalyticsClient = firebaseAnalyticsClient\n}\n--------------------------------------------------\n= apply {\n    this.featureFlagClient = featureFlag\n}\n--------------------------------------------------\nthis.children().getOrNull(0)?.apply {\n    this.attr(\"width\", \"100%\")\n}\n--------------------------------------------------\napply {\n    if (isReversed) {\n        ys?.toMutableList()?.let {\n            this.addAll(it)\n        }\n        xs?.toMutableList()?.let {\n            this.addAll(it)\n        }\n    } else {\n        xs?.toMutableList()?.let {\n            this.addAll(it)\n        }\n        ys?.toMutableList()?.let {\n            this.addAll(it)\n        }\n    }\n}\n--------------------------------------------------\nloadWithParams.apply(paginatingData)\n--------------------------------------------------\n= apply {\n    this.bucketAbove = bucketAbove\n}\n--------------------------------------------------\n= apply {\n    this.bucketPrecision = bucketPrecision\n}\n--------------------------------------------------\n= apply {\n    this.precision = precision\n}\n--------------------------------------------------\n= apply {\n    this.roundingMode = roundingMode\n}\n--------------------------------------------------\nsharedPreferences.edit().putBoolean(key, value).apply()\n--------------------------------------------------\nsharedPreferences.edit().remove(key).apply()\n--------------------------------------------------\nsharedPreferences.edit().putInt(key, value).apply()\n--------------------------------------------------\nsharedPreferences.edit().putString(key, value).apply()\n--------------------------------------------------\n= apply {\n    this.tag = tag\n}\n--------------------------------------------------\n= apply {\n    this.abbreviated = abbreviated\n}\n--------------------------------------------------\n= apply {\n    this.absolute = absolute\n}\n--------------------------------------------------\n= apply {\n    this.relativeToDateTime = relativeToDateTime\n}\n--------------------------------------------------\n= apply {\n    this.threshold = threshold\n}\n--------------------------------------------------\nProperties().apply {\n    newProperties.forEach { (key, value) ->\n        this[key] = value\n    }\n}\n--------------------------------------------------\napply {\n    Timber.d(\"Queued ${type().tag} Identify userName: ${this.name()} userId: ${this.id()} traits: ${getTraits(user)}\")\n}\n--------------------------------------------------\napply {\n    user.getTraits().map { entry ->\n        if (entry.key == NAME) this.putName(user.name()) else {\n            this[entry.key] = entry.value\n        }\n    }\n}\n--------------------------------------------------\napply {\n    this[\"app_build_number\"] = buildNumber()\n    this[\"app_release_version\"] = versionName()\n    this[\"platform\"] = \"native_android\"\n    this[\"client\"] = \"native\"\n    this[\"variants_internal\"] = currentVariants() ?: \"\"\n    this[\"country\"] = sessionCountry()\n    this[\"device_distinct_id\"] = deviceDistinctId()\n    this[\"device_type\"] = deviceFormat()\n    this[\"device_manufacturer\"] = manufacturer()\n    this[\"device_model\"] = model()\n    this[\"device_orientation\"] = deviceOrientation()\n    this[\"display_language\"] = Locale.getDefault().language\n    this[\"is_voiceover_running\"] = isTalkBackOn\n    this[\"mp_lib\"] = \"kickstarter_android\"\n    this[\"os\"] = \"android\"\n    this[\"os_version\"] = OSVersion()\n    this[\"user_agent\"] = userAgent() ?: \"\"\n    this[\"user_is_logged_in\"] = userIsLoggedIn\n    this[\"wifi_connection\"] = wifiConnection()\n    this[\"force_dark_mode\"] = sessionForceDarkMode()\n}\n--------------------------------------------------\nHashMap(additionalProperties).apply {\n    putAll(genericProperties())\n}\n--------------------------------------------------\napply {\n    put(\"amount\", checkoutData.amount().round())\n    checkoutData.id()?.let {\n        put(\"id\", it.toString())\n    }\n    put(\"payment_type\", checkoutData.paymentType().rawValue().lowercase(Locale.getDefault()))\n    put(\"amount_total_usd\", checkoutData.totalAmount(project.staticUsdRate()).round())\n    put(\"shipping_amount\", checkoutData.shippingAmount())\n    put(\"shipping_amount_usd\", checkoutData.shippingAmount(project.staticUsdRate()).round())\n    put(\"bonus_amount\", checkoutData.bonus())\n    put(\"bonus_amount_usd\", checkoutData.bonus(project.staticUsdRate()).round())\n    put(\"add_ons_count_total\", pledgeData.totalQuantity())\n    put(\"add_ons_count_unique\", pledgeData.totalCountUnique())\n    put(\"add_ons_minimum_usd\", pledgeData.addOnsCost(project.staticUsdRate()).round())\n}\n--------------------------------------------------\napply {\n    put(\"amount\", checkoutData.amount().round())\n    checkoutData.id()?.let {\n        put(\"id\", it.toString())\n    }\n    put(\"payment_type\", checkoutData.paymentType().rawValue().lowercase(Locale.getDefault()))\n    put(\"amount_total_usd\", checkoutData.totalAmount(project.staticUsdRate()).round())\n    put(\"shipping_amount\", checkoutData.shippingAmount())\n    put(\"shipping_amount_usd\", checkoutData.shippingAmount(project.staticUsdRate()).round())\n    put(\"bonus_amount\", checkoutData.bonus())\n    put(\"bonus_amount_usd\", checkoutData.bonus(project.staticUsdRate()).round())\n    put(\"add_ons_count_total\", totalQuantity(addOns))\n    put(\"add_ons_count_unique\", totalCountUnique(addOns))\n    put(\"add_ons_minimum_usd\", addOnsCost(project.staticUsdRate(), addOns).round())\n}\n--------------------------------------------------\napply {\n    put(\"everything\", params.isAllProjects.isTrue())\n    put(\"pwl\", params.staffPicks().isTrue())\n    put(\"recommended\", params.recommended()?.isTrue() ?: false)\n    params.refTag()?.tag()?.let {\n        put(\"ref_tag\", it)\n    }\n    params.term()?.let {\n        put(\"search_term\", it)\n    }\n    put(\"social\", params.social().isNonZero())\n    put(\"sort\", discoverSort?.let {\n        when(it) {\n            DiscoveryParams.Sort.POPULAR -> \"popular\"\n            DiscoveryParams.Sort.ENDING_SOON -> \"ending_soon\"\n            else -> it.toString()\n        }\n    } ?: \"\")\n    params.tagId()?.let {\n        put(\"tag\", it)\n    }\n    put(\"watched\", params.starred().isNonZero())\n    val paramsCategory = params.category()\n    paramsCategory?.let { category ->\n        if (category.isRoot) {\n            putAll(categoryProperties(category))\n        } else {\n            category.root()?.let {\n                putAll(categoryProperties(it))\n            }\n            putAll(subcategoryProperties(category))\n        }\n    }\n}\n--------------------------------------------------\napply {\n    put(\"id\", category.id().toString())\n    put(\"name\", category.analyticsName().toString())\n}\n--------------------------------------------------\napply {\n    put(\"id\", location.id().toString())\n    put(\"name\", location.name())\n    put(\"displayable_name\", location.displayableName())\n    location.city()?.let {\n        put(\"city\", it)\n    }\n    location.state()?.let {\n        put(\"state\", it)\n    }\n    put(\"country\", location.country())\n    location.projectsCount()?.let {\n        put(\"projects_count\", it)\n    }\n}\n--------------------------------------------------\napply {\n    put(LENGTH.contextName, videoLength)\n    put(POSITION.contextName, videoPosition)\n}\n--------------------------------------------------\napply {\n    reward.estimatedDeliveryOn()?.let { deliveryDate ->\n        put(\"estimated_delivery_on\", deliveryDate)\n    }\n    put(\"has_items\", isItemized(reward))\n    put(\"id\", reward.id().toString())\n    put(\"is_limited_time\", isTimeLimitedEnd(reward))\n    put(\"is_limited_quantity\", reward.limit() != null)\n    put(\"minimum\", reward.minimum())\n    put(\"shipping_enabled\", isShippable(reward))\n    put(\"minimum_usd\", pledgeData.rewardCost(project.staticUsdRate()).round())\n    reward.shippingPreference()?.let {\n        put(\"shipping_preference\", it)\n    }\n    reward.title()?.let {\n        put(\"title\", it)\n    }\n}\n--------------------------------------------------\napply {\n    put(\"add_ons_count_total\", pledgeData.totalQuantity())\n    put(\"add_ons_count_unique\", pledgeData.totalCountUnique())\n    put(\"add_ons_minimum_usd\", addOnsCost(project.staticUsdRate(), pledgeData.addOns()?.let {\n        it as? List<Reward>\n    } ?: emptyList()).round())\n}\n--------------------------------------------------\napply {\n    put(\"backers_count\", project.backersCount())\n    project.category()?.let { category ->\n        if (category.isRoot) {\n            put(\"category\", category.analyticsName())\n        } else {\n            category.parent()?.let { parent ->\n                put(\"category\", parent.analyticsName())\n            } ?: category.parentName()?.let {\n                if (!this.containsKey(\"category\")) this[\"category\"] = it\n            }\n            put(\"subcategory\", category.analyticsName())\n        }\n    }\n    project.commentsCount()?.let {\n        put(\"comments_count\", it)\n    }\n    project.prelaunchActivated()?.let {\n        put(\"project_prelaunch_activated\", it)\n    }\n    put(\"country\", project.country())\n    put(\"creator_uid\", project.creator().id().toString())\n    put(\"currency\", project.currency())\n    put(\"current_pledge_amount\", project.pledged())\n    put(\"current_amount_pledged_usd\", (project.pledged() * project.usdExchangeRate()).round())\n    project.deadline()?.let { deadline ->\n        put(\"deadline\", deadline)\n    }\n    put(\"duration\", project.timeInDaysOfDuration().toFloat().roundToInt())\n    put(\"goal\", project.goal())\n    put(\"goal_usd\", (project.goal() * project.usdExchangeRate()).round())\n    put(\"has_video\", project.video() != null)\n    put(\"hours_remaining\", ceil((project.timeInSecondsUntilDeadline() / 60.0f / 60.0f).toDouble()).toInt())\n    put(\"is_repeat_creator\", project.creator().createdProjectsCount().intValueOrZero() >= 2)\n    project.launchedAt()?.let { launchedAt ->\n        put(\"launched_at\", launchedAt)\n    }\n    project.location()?.let { location ->\n        put(\"location\", location.name())\n    }\n    put(\"name\", project.name())\n    put(\"percent_raised\", (project.percentageFunded()).toInt())\n    put(\"pid\", project.id().toString())\n    put(\"prelaunch_activated\", project.prelaunchActivated().isTrue())\n    project.rewards()?.let { a ->\n        val rewards = a.filter {\n            isReward(it)\n        }\n        put(\"rewards_count\", rewards.size)\n    }\n    put(\"state\", project.state())\n    put(\"static_usd_rate\", project.staticUsdRate())\n    project.updatesCount()?.let {\n        put(\"updates_count\", it)\n    }\n    put(\"user_is_project_creator\", project.userIsCreator(loggedInUser))\n    put(\"user_is_backer\", project.isBacking())\n    put(\"user_has_watched\", project.isStarred())\n    val hasAddOns = project.rewards()?.find {\n        it.hasAddons()\n    }\n    put(\"has_add_ons\", hasAddOns?.hasAddons() ?: false)\n    put(\"tags\", project.tags()?.let {\n        it.joinToString(\", \")\n    } ?: \"\")\n    put(\"url\", project.urls().web().project())\n    project.photo()?.full()?.let {\n        put(\"image_url\", it)\n    }\n}\n--------------------------------------------------\napply {\n    intentRefTag?.tag()?.let {\n        put(\"session_ref_tag\", it)\n    }\n    cookieRefTag?.tag()?.let {\n        put(\"session_referrer_credit\", it)\n    }\n}\n--------------------------------------------------\nHashMap<String, Any>().apply {\n    activity.category()?.let {\n        put(\"category\", it)\n    }\n}\n--------------------------------------------------\napply {\n    update.commentsCount()?.let {\n        put(\"comments_count\", it)\n    }\n    update.hasLiked()?.let {\n        put(\"has_liked\", it)\n    }\n    put(\"id\", update.id())\n    update.likesCount()?.let {\n        put(\"likes_count\", it)\n    }\n    put(\"title\", update.title())\n    put(\"sequence\", update.sequence())\n    update.visible()?.let {\n        put(\"visible\", it)\n    }\n    update.publishedAt()?.let {\n        put(\"published_at\", it)\n    }\n}\n--------------------------------------------------\napply {\n    for (feature in it) {\n        add(\"${feature.key}[${feature.value}]\")\n    }\n}\n--------------------------------------------------\nJSONArray().apply {\n    for (feature in it) {\n        put(feature)\n    }\n}\n--------------------------------------------------\nfeatures()?.toMutableMap()?.apply {\n    set(featureName, isEnabled)\n}\n--------------------------------------------------\napply {\n    this.putExtra(IntentKey.RESET_PASSWORD_FACEBOOK_LOGIN, isResetPasswordFacebook)\n    email?.let {\n        this.putExtra(IntentKey.EMAIL, it)\n    }\n}\n--------------------------------------------------\napply {\n    loginReason?.let {\n        this.putExtra(IntentKey.LOGIN_REASON, it)\n    }\n    email?.let {\n        this.putExtra(IntentKey.EMAIL, it)\n    }\n}\n--------------------------------------------------\napply {\n    email?.let {\n        this.putExtra(IntentKey.EMAIL, it)\n    }\n}\n--------------------------------------------------\naction.apply(value!!)\n--------------------------------------------------\nmutableMapOf<String, String>().apply {\n    this[experiment] = variant\n}\n--------------------------------------------------\nmutableMapOf<String, Boolean>().apply {\n    this[featureKey] = true\n}\n--------------------------------------------------\nmutableMapOf<String, Boolean>().apply {\n    this[featureKey] = false\n}\n--------------------------------------------------\n= apply {\n    this.category = category ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    createdAt?.let {\n        this.createdAt = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.id = id ?: 0L\n}\n--------------------------------------------------\n= apply {\n    this.project = project\n}\n--------------------------------------------------\n= apply {\n    this.update = update\n}\n--------------------------------------------------\n= apply {\n    this.updatedAt = updatedAt\n}\n--------------------------------------------------\n= apply {\n    this.user = user\n}\n--------------------------------------------------\n= apply {\n    this.id = id\n}\n--------------------------------------------------\n= apply {\n    this.fundingForAiAttribution = aiAttribution ?: false\n}\n--------------------------------------------------\n= apply {\n    this.fundingForAiConsent = aiConsent ?: false\n}\n--------------------------------------------------\n= apply {\n    this.fundingForAiOption = aiOption ?: false\n}\n--------------------------------------------------\n= apply {\n    this.generatedByAiConsent = gByAiConsent ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.generatedByAiDetails = gByAiDetails ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.otherAiDetails = oAiDetails ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.comments = comments\n}\n--------------------------------------------------\n= apply {\n    this.updates = updates\n}\n--------------------------------------------------\n= apply {\n    med?.let {\n        this.medium = it\n    }\n}\n--------------------------------------------------\n= apply {\n    sma?.let {\n        this.small = it\n    }\n}\n--------------------------------------------------\n= apply {\n    thu?.let {\n        this.thumb = it\n    }\n}\n--------------------------------------------------\n= apply {\n    analyticsName?.let {\n        this.analyticsName = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.color = color\n}\n--------------------------------------------------\n= apply {\n    this.name = name ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.parent = parent\n}\n--------------------------------------------------\n= apply {\n    this.parentId = parentId ?: 0L\n}\n--------------------------------------------------\n= apply {\n    this.parentName = parentName\n}\n--------------------------------------------------\n= apply {\n    this.position = position ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.projectsCount = projectsCount ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.slug = slug ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    author?.let {\n        this.author = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.cursor = cursor ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.authorBadges = authorBadges\n}\n--------------------------------------------------\n= apply {\n    this.repliesCount = repliesCount ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.body = body ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.createdAt = createdAt\n}\n--------------------------------------------------\n= apply {\n    this.deleted = deleted ?: false\n}\n--------------------------------------------------\n= apply {\n    this.hasFlaggings = hasFlaggings ?: false\n}\n--------------------------------------------------\n= apply {\n    this.sustained = sustained ?: false\n}\n--------------------------------------------------\n= apply {\n    this.authorCanceledPledge = authorCanceledPledge ?: false\n}\n--------------------------------------------------\n= apply {\n    this.id = id ?: -1\n}\n--------------------------------------------------\n= apply {\n    this.parentId = parentId ?: -1\n}\n--------------------------------------------------\n= apply {\n    this.description = description\n}\n--------------------------------------------------\n= apply {\n    this.category = category\n}\n--------------------------------------------------\napply {\n    this[position] = listOfComments[position].toBuilder().commentCardState(CommentCardStatus.COMMENT_FOR_LOGIN_BACKED_USERS.commentCardStatus).comment(this@updateCommentAfterSuccessfulPost).build()\n}\n--------------------------------------------------\napply {\n    this[position] = listOfComments[position].toBuilder().commentCardState(CommentCardStatus.FAILED_TO_SEND_COMMENT.commentCardStatus).comment(this@updateCommentFailedToPost).build()\n}\n--------------------------------------------------\napply {\n    this[position] = listOfComments[position].toBuilder().commentCardState(CommentCardStatus.CANCELED_PLEDGE_COMMENT.commentCardStatus).comment(this@updateCanceledPledgeComment).build()\n}\n--------------------------------------------------\neditor.apply()\n--------------------------------------------------\n= apply {\n    this.amount = amount ?: 0.0f\n}\n--------------------------------------------------\n= apply {\n    this.description = description ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.id = id ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.projectId = projectId ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.taxable = taxable ?: false\n}\n--------------------------------------------------\n= apply {\n    dName?.let {\n        this.displayableName = it\n    }\n}\n--------------------------------------------------\n= apply {\n    city?.let {\n        this.city = it\n    }\n}\n--------------------------------------------------\n= apply {\n    count?.let {\n        this.country = it\n    }\n}\n--------------------------------------------------\n= apply {\n    expCount?.let {\n        this.expandedCountry = it\n    }\n}\n--------------------------------------------------\n= apply {\n    name?.let {\n        this.name = it\n    }\n}\n--------------------------------------------------\n= apply {\n    state?.let {\n        this.state = it\n    }\n}\n--------------------------------------------------\n= apply {\n    pCount?.let {\n        this.projectsCount = it\n    }\n}\n--------------------------------------------------\n= apply {\n    id?.let {\n        this.id = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.backing = backing\n}\n--------------------------------------------------\n= apply {\n    this.closed = closed\n}\n--------------------------------------------------\n= apply {\n    this.lastMessage = lastMessage\n}\n--------------------------------------------------\n= apply {\n    this.participant = participant\n}\n--------------------------------------------------\n= apply {\n    this.unreadMessagesCount = unreadMessagesCount\n}\n--------------------------------------------------\n= apply {\n    this.id = id ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.paymentType = type ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.state = state ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.type = type ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.lastFour = lastFour\n}\n--------------------------------------------------\n= apply {\n    this.expirationDate = expirationDate\n}\n--------------------------------------------------\n= apply {\n    this.availableCardTypes = availableCardTypes\n}\n--------------------------------------------------\n= apply {\n    this.backersCount = backersCount ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.watchesCount = watchesCount ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.blurb = blurb ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.commentsCount = commentsCount\n}\n--------------------------------------------------\n= apply {\n    this.country = country ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    creator?.let {\n        this.creator = it\n    }\n}\n--------------------------------------------------\n= apply {\n    currency?.let {\n        this.currency = it\n    }\n}\n--------------------------------------------------\n= apply {\n    currencySymbol?.let {\n        this.currencySymbol = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.currentCurrency = currency\n}\n--------------------------------------------------\n= apply {\n    this.currencyTrailingCode = currencyTrailingCode ?: false\n}\n--------------------------------------------------\n= apply {\n    this.displayPrelaunch = displayPrelaunch\n}\n--------------------------------------------------\n= apply {\n    this.canComment = canComment ?: false\n}\n--------------------------------------------------\n= apply {\n    this.deadline = deadline\n}\n--------------------------------------------------\n= apply {\n    this.featuredAt = featuredAt\n}\n--------------------------------------------------\n= apply {\n    this.friends = friends ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.fxRate = fxRate ?: 0f\n}\n--------------------------------------------------\n= apply {\n    this.goal = goal ?: 0.0\n}\n--------------------------------------------------\n= apply {\n    this.isBacking = isBacking ?: false\n}\n--------------------------------------------------\n= apply {\n    this.isStarred = isStarred ?: false\n}\n--------------------------------------------------\n= apply {\n    this.lastUpdatePublishedAt = lastUpdatePublishedAt\n}\n--------------------------------------------------\n= apply {\n    this.launchedAt = launchedAt\n}\n--------------------------------------------------\n= apply {\n    this.location = location\n}\n--------------------------------------------------\n= apply {\n    this.permissions = permissions?.filterNotNull() ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.pledged = pledged ?: 0.0\n}\n--------------------------------------------------\n= apply {\n    this.photo = photo\n}\n--------------------------------------------------\n= apply {\n    this.prelaunchActivated = prelaunchActivated\n}\n--------------------------------------------------\n= apply {\n    this.sendMetaCapiEvents = sendMetaCapiEvents\n}\n--------------------------------------------------\n= apply {\n    this.sendThirdPartyEvents = sendThirdPartyEvents\n}\n--------------------------------------------------\n= apply {\n    this.tags = tags ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.rewards = rewards ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.slug = slug\n}\n--------------------------------------------------\n= apply {\n    this.staffPick = staffPick\n}\n--------------------------------------------------\n= apply {\n    this.staticUsdRate = staticUsdRate ?: 0f\n}\n--------------------------------------------------\n= apply {\n    this.usdExchangeRate = usdExchangeRate ?: 0f\n}\n--------------------------------------------------\n= apply {\n    this.stateChangedAt = stateChangedAt\n}\n--------------------------------------------------\n= apply {\n    this.unreadMessagesCount = unreadMessagesCount ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.unseenActivityCount = unseenActivityCount ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.updatesCount = updatesCount ?: 0\n}\n--------------------------------------------------\n= apply {\n    urls?.let {\n        this.urls = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.video = video\n}\n--------------------------------------------------\n= apply {\n    this.projectFaqs = projectFaqs ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.envCommitments = envCommitments ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.aiDisclosure = aiDisclosure\n}\n--------------------------------------------------\n= apply {\n    this.risks = risks ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.story = story ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.isFlagged = isFlagged\n}\n--------------------------------------------------\n= apply {\n    this.answer = answer\n}\n--------------------------------------------------\n= apply {\n    this.question = question\n}\n--------------------------------------------------\n= apply {\n    this.project = project ?: Project.builder().build()\n}\n--------------------------------------------------\n= apply {\n    email?.let {\n        this.email = it\n    }\n}\n--------------------------------------------------\n= apply {\n    mobile?.let {\n        this.mobile = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.urls = urls ?: Urls.builder().build()\n}\n--------------------------------------------------\n= apply {\n    this.api = api ?: Api.builder().build()\n}\n--------------------------------------------------\n= apply {\n    this.notification = notification ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    commentId?.let {\n        this.commentId = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.projectId = projectId\n}\n--------------------------------------------------\n= apply {\n    this.projectPhoto = projectPhoto\n}\n--------------------------------------------------\n= apply {\n    this.userPhoto = userPhoto\n}\n--------------------------------------------------\n= apply {\n    this.updateId = updateId\n}\n--------------------------------------------------\n= apply {\n    this.alert = alert\n}\n--------------------------------------------------\n= apply {\n    this.title = title\n}\n--------------------------------------------------\n= apply {\n    this.backersCount = backersCount\n}\n--------------------------------------------------\n= apply {\n    this.convertedMinimum = convertedMinimum ?: 0.0\n}\n--------------------------------------------------\n= apply {\n    this.endsAt = endsAt\n}\n--------------------------------------------------\n= apply {\n    this.startsAt = startsAt\n}\n--------------------------------------------------\n= apply {\n    this.id = id ?: -1L\n}\n--------------------------------------------------\n= apply {\n    this.limit = limit\n}\n--------------------------------------------------\n= apply {\n    this.minimum = minimum ?: 0.0\n}\n--------------------------------------------------\n= apply {\n    this.estimatedDeliveryOn = estimatedDeliveryOn\n}\n--------------------------------------------------\n= apply {\n    this.remaining = remaining\n}\n--------------------------------------------------\n= apply {\n    this.rewardsItems = rewardsItems ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.shippingPreference = shippingPreference\n}\n--------------------------------------------------\n= apply {\n    this.shippingSingleLocation = shippingSingleLocation\n}\n--------------------------------------------------\n= apply {\n    this.shippingType = shippingType\n}\n--------------------------------------------------\n= apply {\n    this.isAddOn = isAddOn ?: false\n}\n--------------------------------------------------\n= apply {\n    this.addOnsItems = addOnsItems ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.quantity = quantity\n}\n--------------------------------------------------\n= apply {\n    this.hasAddons = hasAddons ?: false\n}\n--------------------------------------------------\n= apply {\n    this.shippingRules = shippingRules\n}\n--------------------------------------------------\n= apply {\n    this.shippingPreferenceType = shippingPreferenceType\n}\n--------------------------------------------------\n= apply {\n    this.isAvailable = isAvailable ?: false\n}\n--------------------------------------------------\n= apply {\n    this.localReceiptLocation = localReceiptLocation\n}\n--------------------------------------------------\n= apply {\n    this.item = item ?: Item.builder().build()\n}\n--------------------------------------------------\n= apply {\n    this.itemId = itemId ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.quantity = quantity ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.rewardId = rewardId ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.hasBackers = hasBackers\n}\n--------------------------------------------------\n= apply {\n    this.cost = cost\n}\n--------------------------------------------------\n= apply {\n    this.localizedName = localizedName ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.lastFourDigits = lastFourDigits\n}\n--------------------------------------------------\n= apply {\n    this.expiration = expiration\n}\n--------------------------------------------------\n= apply {\n    this.type = type\n}\n--------------------------------------------------\n= apply {\n    this.resourceId = resourceId\n}\n--------------------------------------------------\n= apply {\n    this.clientSetupId = clientSetupId\n}\n--------------------------------------------------\n= apply {\n    this.web = web ?: Web.builder().build()\n}\n--------------------------------------------------\n= apply {\n    this.api = api\n}\n--------------------------------------------------\n= apply {\n    this.alumniNewsletter = alN ?: false\n}\n--------------------------------------------------\n= apply {\n    this.artsCultureNewsletter = arN ?: false\n}\n--------------------------------------------------\n= apply {\n    avatar?.let {\n        this.avatar = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.backedProjectsCount = bPC ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.draftProjectsCount = dPC ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.createdProjectsCount = cPC ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.erroredBackingsCount = eBC ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.facebookConnected = facebookConnected ?: false\n}\n--------------------------------------------------\n= apply {\n    this.filmNewsletter = filmNewsletter ?: false\n}\n--------------------------------------------------\n= apply {\n    this.gamesNewsletter = gamesNewsletter ?: false\n}\n--------------------------------------------------\n= apply {\n    this.happeningNewsletter = happeningNewsletter ?: false\n}\n--------------------------------------------------\n= apply {\n    this.isAdmin = isAdmin ?: false\n}\n--------------------------------------------------\n= apply {\n    this.isEmailVerified = isEmailVerified ?: false\n}\n--------------------------------------------------\n= apply {\n    this.isCreator = isCreator ?: false\n}\n--------------------------------------------------\n= apply {\n    this.isDeliverable = isDeliverable ?: false\n}\n--------------------------------------------------\n= apply {\n    this.email = email\n}\n--------------------------------------------------\n= apply {\n    this.chosenCurrency = chosenCurrency\n}\n--------------------------------------------------\n= apply {\n    this.inventNewsletter = inventNewsletter ?: false\n}\n--------------------------------------------------\n= apply {\n    this.hasPassword = hasPassword ?: false\n}\n--------------------------------------------------\n= apply {\n    this.memberProjectsCount = memberProjectsCount ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.musicNewsletter = musicNewsletter ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfBackings = notifyOfFriendActivity ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfComments = notifyMobileOfComments ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfCreatorEdu = notifyMobileOfCreatorEdu ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfFollower = notifyMobileOfFollower ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfFriendActivity = notifyMobileOfFriendActivity ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfMessages = notifyMobileOfMessages ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfPostLikes = notifyMobileOfPostLikes ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfUpdates = notifyMobileOfUpdates ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfMarketingUpdate = notifyMobileOfMarketingUpdate ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfBackings = notifyOfBackings ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfComments = notifyOfComments ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfCommentReplies = notifyOfCommentReplies ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfCreatorDigest = notifyOfCreatorDigest ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfCreatorEdu = notifyOfCreatorEdu ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfFollower = notifyOfFollower ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfFriendActivity = notifyOfFriendActivity ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfMessages = notifyOfMessages ?: false\n}\n--------------------------------------------------\n= apply {\n    this.notifyOfUpdates = notifyOfUpdates ?: false\n}\n--------------------------------------------------\n= apply {\n    this.optedOutOfRecommendations = optedOutOfRecommendations ?: false\n}\n--------------------------------------------------\n= apply {\n    this.promoNewsletter = promoNewsletter ?: false\n}\n--------------------------------------------------\n= apply {\n    this.publishingNewsletter = publishingNewsletter ?: false\n}\n--------------------------------------------------\n= apply {\n    this.showPublicProfile = showPublicProfile ?: false\n}\n--------------------------------------------------\n= apply {\n    this.social = social ?: false\n}\n--------------------------------------------------\n= apply {\n    starredProjectsCount?.let {\n        this.starredProjectsCount = it\n    }\n}\n--------------------------------------------------\n= apply {\n    this.weeklyNewsletter = weeklyNewsletter ?: false\n}\n--------------------------------------------------\n= apply {\n    this.needsPassword = needsPassword ?: false\n}\n--------------------------------------------------\n= apply {\n    this.project = project ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.projectShort = projectShort\n}\n--------------------------------------------------\n= apply {\n    this.rewards = rewards\n}\n--------------------------------------------------\n= apply {\n    this.body = body\n}\n--------------------------------------------------\n= apply {\n    this.pushServer = pushServer\n}\n--------------------------------------------------\n= apply {\n    this.token = token\n}\n--------------------------------------------------\n= apply {\n    this.optedOutOfRecommendations = optedOutOfRecommendations ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.notifyMobileOfBackings = notifyMobileOfBackings ?: false\n}\n--------------------------------------------------\n= apply {\n    this.showPublicProfile = showPublicProfile ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.social = social ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.alumniNewsletter = alumniNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.artsCultureNewsletter = artsCultureNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.filmNewsletter = filmNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.gamesNewsletter = gamesNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.happeningNewsletter = happeningNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.inventNewsletter = inventNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.musicNewsletter = musicNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.promoNewsletter = promoNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.publishingNewsletter = publishingNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.weeklyNewsletter = weeklyNewsletter ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.name = name\n}\n--------------------------------------------------\n= apply {\n    this.password = password\n}\n--------------------------------------------------\n= apply {\n    this.passwordConfirmation = passwordConfirmation\n}\n--------------------------------------------------\n= apply {\n    this.newsletterOptIn = newsletterOptIn\n}\n--------------------------------------------------\n= apply {\n    this.sendNewsletters = sendNewsletters\n}\n--------------------------------------------------\n= apply {\n    this.code = code\n}\n--------------------------------------------------\n= apply {\n    this.accessToken = accessToken\n}\n--------------------------------------------------\n= apply {\n    this.commentableId = commentableId\n}\n--------------------------------------------------\n= apply {\n    this.pageInfoEnvelope = pageInfoEnvelope\n}\n--------------------------------------------------\n= apply {\n    this.totalCount = totalCount\n}\n--------------------------------------------------\n= apply {\n    this.hasPreviousPage = hasPreviousPage\n}\n--------------------------------------------------\n= apply {\n    this.hasNextPage = hasNextPage\n}\n--------------------------------------------------\n= apply {\n    this.startCursor = startCursor\n}\n--------------------------------------------------\n= apply {\n    this.endCursor = endCursor\n}\n--------------------------------------------------\n= apply {\n    this.projects = projects ?: emptyList()\n}\n--------------------------------------------------\n= apply {\n    this.urls = urls\n}\n--------------------------------------------------\n= apply {\n    this.stats = stats\n}\n--------------------------------------------------\n= apply {\n    this.moreProjects = moreProjects ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.count = count ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.message = message\n}\n--------------------------------------------------\n= apply {\n    this.email = email ?: \"\"\n}\n--------------------------------------------------\napply {\n    errorMessages?.let {\n        this.errorMessages = it.filterNotNull()\n    } ?: emptyList<String>()\n}\n--------------------------------------------------\n= apply {\n    this.httpCode = httpCode ?: 0\n}\n--------------------------------------------------\n= apply {\n    this.ksrCode = ksrCode ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.facebookUser = facebookUser\n}\n--------------------------------------------------\n= apply {\n    this.messageThreads = messageThreads\n}\n--------------------------------------------------\n= apply {\n    this.moreMessageThreads = moreMessageThreads\n}\n--------------------------------------------------\n= apply {\n    this.projects = projects\n}\n--------------------------------------------------\n= apply {\n    this.moreUpdates = moreUpdates ?: \"\"\n}\n--------------------------------------------------\n= apply {\n    this.backed = backed\n}\n--------------------------------------------------\n= apply {\n    this.categoryParam = categoryParam\n}\n--------------------------------------------------\n= apply {\n    this.locationParam = locationParam\n}\n--------------------------------------------------\n= apply {\n    this.page = page\n}\n--------------------------------------------------\n= apply {\n    this.perPage = perPage\n}\n--------------------------------------------------\n= apply {\n    this.pledged = pledged\n}\n--------------------------------------------------\n= apply {\n    this.sort = sort\n}\n--------------------------------------------------\n= apply {\n    this.staffPicks = staffPicks\n}\n--------------------------------------------------\n= apply {\n    this.starred = starred\n}\n--------------------------------------------------\n= apply {\n    this.social = social\n}\n--------------------------------------------------\n= apply {\n    this.recommended = recommended\n}\n--------------------------------------------------\n= apply {\n    this.similarTo = similarTo\n}\n--------------------------------------------------\n= apply {\n    this.state = state\n}\n--------------------------------------------------\n= apply {\n    this.tagId = tagId\n}\n--------------------------------------------------\n= apply {\n    this.term = term\n}\n--------------------------------------------------\napply {\n    if (backed() != null) {\n        put(\"backed\", backed().toString())\n    }\n    category()?.let {\n        put(\"category_id\", it.id().toString())\n    }\n    categoryParam()?.let {\n        put(\"category_id\", it)\n    }\n    location()?.let {\n        put(\"woe_id\", it.id().toString())\n    }\n    locationParam()?.let {\n        put(\"woe_id\", it)\n    }\n    if (page() != null) {\n        put(\"page\", page().toString())\n    }\n    if (perPage() != null) {\n        put(\"per_page\", perPage().toString())\n    }\n    if (pledged() != null) {\n        put(\"pledged\", pledged().toString())\n    }\n    if (recommended() != null) {\n        put(\"recommended\", recommended().toString())\n    }\n    similarTo()?.let {\n        put(\"similar_to\", it.id().toString())\n    }\n    if (starred() != null) {\n        put(\"starred\", starred().toString())\n    }\n    if (social() != null) {\n        put(\"social\", social().toString())\n    }\n    val sort = sort()\n    if (sort != null) {\n        put(\"sort\", sort.toString())\n    }\n    if (staffPicks() != null) {\n        put(\"staff_picks\", staffPicks().toString())\n    }\n    val state = state()\n    if (state != null) {\n        put(\"state\", state.toString())\n    }\n    val tagId = tagId()\n    if (tagId != null) {\n        put(\"tag_id\", tagId.toString())\n    }\n    term()?.let {\n        put(\"q\", it)\n    }\n    if (shouldIncludeFeatured()) {\n        put(\"include_featured\", \"true\")\n    }\n}\n--------------------------------------------------\napply {\n    if (project != null) this.projectId(encodeRelayId(project))\n}\n--------------------------------------------------\napply {\n    addAll(subCategories)\n}\n--------------------------------------------------\napply {\n    slug?.let { cursor ->\n        this.cursor(cursor)\n    }\n    discoveryParams.category()?.id()?.let { id ->\n        this.categoryId(id.toString())\n    }\n    discoveryParams.recommended()?.let { isRecommended ->\n        this.recommended(isRecommended)\n    }\n    discoveryParams.starred()?.let { isStarred ->\n        this.starred(isStarred.toBoolean())\n    }\n    discoveryParams.backed()?.let { isBacked ->\n        this.backed(isBacked.toBoolean())\n    }\n    discoveryParams.staffPicks()?.let { isPicked ->\n        this.staffPicks(isPicked)\n    }\n}\n--------------------------------------------------\napply {\n    updateBackingData.paymentSourceId?.let {\n        this.paymentSourceId(it)\n    }\n    updateBackingData.intentClientSecret?.let {\n        this.intentClientSecret(it)\n    }\n}\n--------------------------------------------------\napply {\n    putExtra(IntentKey.COMMENT_CARD_DATA, commentData)\n    putExtra(IntentKey.REPLY_EXPAND, openKeyboard)\n    putExtra(IntentKey.UPDATE_POST_ID, projectUpdateId)\n}\n--------------------------------------------------\napply {\n    putExtra(IntentKey.COMMENT_CARD_DATA, commentData)\n    putExtra(IntentKey.REPLY_EXPAND, false)\n    putExtra(IntentKey.REPLY_SCROLL_BOTTOM, true)\n    putExtra(IntentKey.UPDATE_POST_ID, projectUpdateId)\n}\n--------------------------------------------------\nsharedPrefs?.edit()?.putInt(SharedPreferenceKey.APP_THEME, p2)?.apply()\n--------------------------------------------------\nLinearLayoutManager(this).apply {\n    orientation = RecyclerView.VERTICAL\n}\n--------------------------------------------------\n= apply {\n    this.requestCode = requestCode\n}\n--------------------------------------------------\n= apply {\n    this.resultCode = resultCode\n}\n--------------------------------------------------\n= apply {\n    this.intent = intent\n}\n--------------------------------------------------\n= apply {\n    this.amount = amount\n}\n--------------------------------------------------\n= apply {\n    this.paymentType = paymentType\n}\n--------------------------------------------------\n= apply {\n    this.shippingAmount = shippingAmount\n}\n--------------------------------------------------\n= apply {\n    this.bonusAmount = bonusAmount\n}\n--------------------------------------------------\n= apply {\n    this.comment = comment\n}\n--------------------------------------------------\n= apply {\n    this.commentCardState = commentCardState\n}\n--------------------------------------------------\n= apply {\n    this.pledgeFlowContext = pledgeFlowContext\n}\n--------------------------------------------------\n= apply {\n    this.projectData = projectData\n}\n--------------------------------------------------\n= apply {\n    this.reward = reward\n}\n--------------------------------------------------\n= apply {\n    this.addOns = addOns\n}\n--------------------------------------------------\n= apply {\n    this.shippingRule = shippingRule\n}\n--------------------------------------------------\napply {\n    setBackgroundTint(backGroundColor)\n    setTextColor(textColor)\n}\n--------------------------------------------------\napply {\n    val sb = StringBuilder(text.toString())\n    sb.append(\" \" + resources.getString(R.string.Delays_or_changes_are_possible))\n    text = sb.toString()\n    val boldPortionLength = text.toString().split(\".\").first().length\n    setBoldSpanOnTextView(boldPortionLength, this, resources.getColor(R.color.kds_support_400, null))\n}\n--------------------------------------------------\napply {\n    viewModel.inputs.receivedCheckboxToggled(this.isChecked)\n}\n--------------------------------------------------\napply {\n    val totalCharacters = text.length\n    text = viewModel.ksString?.format(getString(R.string.estimated_delivery_data), \"title\", text.toString(), \"estimated_delivery_data\", it)\n    setBoldSpanOnTextView(totalCharacters, this, resources.getColor(R.color.kds_support_400, null))\n}\n--------------------------------------------------\napply {\n    text = viewModel.ksString?.format(getString(R.string.estimated_delivery_data), \"title\", text.toString(), \"estimated_delivery_data\", it)\n    val totalCharacters2 = text.length\n    setBoldSpanOnTextView(totalCharacters2, this, resources.getColor(R.color.kds_support_400, null))\n}\n--------------------------------------------------\ncontext?.apply {\n    binding?.backingAvatar?.loadCircleImage(url)\n}\n--------------------------------------------------\napply {\n    adapter = discoveryAdapter\n    layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)\n    recyclerViewPaginator = RecyclerViewPaginator(this, {\n        this@DiscoveryFragment.viewModel.inputs.nextPage()\n    }, this@DiscoveryFragment.viewModel.outputs.isFetchingProjects())\n}\n--------------------------------------------------\napply {\n    binding?.answerEmptyStateTv?.text = getString(R.string.Looks_like_there_arent_any_frequently_asked_questions) + \" \" + this\n}\n--------------------------------------------------\napply {\n    setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)\n    setContent {\n        KickstarterApp(useDarkTheme = if (darkModeEnabled) {\n            when(theme) {\n                AppThemes.MATCH_SYSTEM.ordinal -> isSystemInDarkTheme()\n                AppThemes.DARK.ordinal -> true\n                AppThemes.LIGHT.ordinal -> false\n                else -> false\n            }\n        } else isSystemInDarkTheme()) {\n            AiDisclosureScreen(state = viewModel.state, clickCallback = {\n                ApplicationUtils.openUrlExternally(context, viewModel.state.openExternalUrl)\n            })\n        }\n    }\n}\n--------------------------------------------------\napply {\n    setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)\n    setContent {\n        KickstarterApp(useDarkTheme = if (darkModeEnabled) {\n            when(theme) {\n                AppThemes.MATCH_SYSTEM.ordinal -> isSystemInDarkTheme()\n                AppThemes.DARK.ordinal -> true\n                AppThemes.LIGHT.ordinal -> false\n                else -> false\n            }\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\n            isSystemInDarkTheme()\n        } else false) {\n            RisksScreen(riskDescState = viewModel.projectRisks().subscribeAsState(initial = \"\"), callback = {\n                viewModel.onLearnAboutAccountabilityOnKickstarterClicked()\n            })\n        }\n    }\n}\n--------------------------------------------------\ncontext?.apply {\n    binding?.rewardsCount?.isGone = ViewUtils.isLandscape(this)\n}\n--------------------------------------------------\noutRect.apply {\n    bottom = margin\n}\n--------------------------------------------------\napply {\n    setCompoundDrawablesRelativeWithIntrinsicBounds(iconDrawable, null, null, null)\n    setTextColor(textColor)\n    background = backgroundDrawable\n    setOnClickListener {\n        textViewClick()\n    }\n}\n--------------------------------------------------\napply {\n    val ksString = requireNotNull(environment().ksString())\n    text = item?.params()?.filterString(context, ksString)\n    setCompoundDrawablesRelativeWithIntrinsicBounds(iconDrawable, null, null, null)\n    setTextColor(textColor)\n    background = backgroundDrawable\n    setOnClickListener {\n        textViewClick()\n    }\n}\n--------------------------------------------------\napply {\n    visibility = View.VISIBLE\n    ContextCompat.getDrawable(context, R.drawable.gray_gradient)?.let {\n        Picasso.get().load(photo.med()).placeholder(it).into(this)\n    }\n}\n--------------------------------------------------\n(data as? ExternalSourceViewElement).apply {\n    this?.let {\n        configure(it)\n    }\n}\n--------------------------------------------------\n(data as? String).apply {\n    this?.let {\n        configure(it)\n    }\n}\n--------------------------------------------------\n(data as? ImageViewElement).apply {\n    this?.let {\n        configure(it)\n    }\n}\n--------------------------------------------------\n(data as? TextViewElement).apply {\n    this?.let {\n        configure(it)\n    }\n}\n--------------------------------------------------\n(data as? VideoViewElement).apply {\n    this?.let {\n        configure(it)\n    }\n}\n--------------------------------------------------\napply {\n    this.setKeepContentOnPlayerReset(true)\n    useController = true\n    this.player = player\n    this.player?.addListener(listener)\n}\n--------------------------------------------------\napply {\n    adapter = rewardItemsAdapter\n    this.layoutManager = layoutManager\n}\n--------------------------------------------------\nExoPlayer.Builder(context).apply {\n    trackSelector?.let {\n        setTrackSelector(it)\n    }\n}\n--------------------------------------------------\nlist.toMutableList().apply {\n    add(0, it.second)\n}\n--------------------------------------------------\nsharedPreferences.edit().putBoolean(SharedPreferenceKey.CONSENT_MANAGEMENT_PREFERENCE, it).apply()\n--------------------------------------------------\nsharedPreferences.edit().putBoolean(HAS_SEEN_NOTIF_PERMISSIONS, it).apply()\n--------------------------------------------------\napply {\n    val updatedUser = this.toBuilder().alumniNewsletter(checked).artsCultureNewsletter(checked).filmNewsletter(checked).gamesNewsletter(checked).happeningNewsletter(checked).inventNewsletter(checked).musicNewsletter(checked).promoNewsletter(checked).publishingNewsletter(checked).weeklyNewsletter(checked).build()\n    userInput.onNext(updatedUser)\n    newsletterInput.onNext(Pair(checked, Newsletter.ALL))\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().alumniNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().artsCultureNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().filmNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().gamesNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().happeningNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().inventNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().musicNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().promoNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().publishingNewsletter(checked).build())\n}\n--------------------------------------------------\napply {\n    userInput.onNext(this.toBuilder().weeklyNewsletter(checked).build())\n}\n--------------------------------------------------\npair.first.toMutableList().apply {\n    newlyPostedRepliesList.add(0, reply)\n    add(0, reply)\n}", "import io.reactivex.ObservableSource\nimport io.reactivex.Observable\noverride fun apply(upstream: Observable<S>): ObservableSource<android.util.Pair<S, T>> {\r\n        return Observable.combineLatest(\r\n            upstream,\r\n            second\r\n        ) { first: S, second: T -> android.util.Pair(first, second) }\r\n    }\nImport(names=[io, reactivex, Observable], wildcard=false, alias=null)\nImport(names=[io, reactivex, ObservableSource], wildcard=false, alias=null)" ],
  "Trail-Sense/941" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/942" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/943" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Neo-Backup/305" : [ "getAllBackupsNewestFirst(backup, context)\n--------------------------------------------------\ngetAllBackupsNewestFirst(backup, context).let {\n    return if (it.isNotEmpty()) it[0] else null\n}", "import java.io.IOException\nimport java.io.File\nimport com.battlelancer.seriesguide.dataliberation.AutoBackupTask.Backup\nimport android.content.Context\n @Throws(IOException::class)\r\n    private fun getAllBackupsNewestFirst(backup: Backup, context: Context): List<BackupFile> {\r\n        val backupDirectory = getBackupDirectory(context)\r\n        val files = backupDirectory.listFiles()\r\n\r\n        val backups = files?.mapNotNull { file ->\r\n            if (file.isFile && file.name.startsWith(backup.name)) {\r\n                getBackupTimestamp(file)\r\n                    ?.let { return@mapNotNull BackupFile(file, it) }\r\n            }\r\n            return@mapNotNull null\r\n        } ?: emptyList()\r\n\r\n        return backups.sortedByDescending { it.timestamp }\r\n    }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, battlelancer, seriesguide, dataliberation, AutoBackupTask, Backup], wildcard=false, alias=null)\nImport(names=[java, io, File], wildcard=false, alias=null)" ],
  "Trail-Sense/945" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "VinylMusicPlayer/827" : [ "", "import android.view.View;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport ml.docilealligator.infinityforreddit.R;\r\nimport ml.docilealligator.infinityforreddit.comment.Comment\nimport ml.docilealligator.infinityforreddit.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {\r\n    if (touchHelper != null) {\r\n        exceedThreshold = false;\r\n        touchHelper.attachToRecyclerView(null);\r\n        touchHelper.attachToRecyclerView((mCommentsRecyclerView == null ? mRecyclerView : mCommentsRecyclerView));\r\n    }\r\n}" ],
  "Trail-Sense/946" : [ "findLocation(location.latAsDouble, location.lonAsDouble)\n--------------------------------------------------\nfindLocation(location.latitude, location.longitude)\n--------------------------------------------------\ngeoCoder.findLocation(it)", "import de.schildbach.pte.dto.Location\nfun findLocation(location: android.location.Location) {\r\n        if (location.latitude == 0.0 && location.latitude == 0.0) return\r\n        findLocation(location.latitude, location.longitude)\r\n    }" ],
  "Neo-Backup/306" : [ "", "import java.io.IOException\nimport java.io.File\nimport org.apache.commons.io.IOUtils\nimport com.lazygeniouz.dfc.file.DocumentFileCompat\nimport android.content.Context\n @JvmStatic\r\n        @Throws(IOException::class)\r\n        fun readContent(context: Context, documentFile: DocumentFileCompat): String {\r\n            context.contentResolver.openInputStream(documentFile.uri).use { `is` ->\r\n                return IOUtils.toString(`is`)\r\n            }\r\n        }\nImport(names=[android, content, Context], wildcard=false, alias=null)\nImport(names=[com, lazygeniouz, dfc, file, DocumentFileCompat], wildcard=false, alias=null)\nImport(names=[org, apache, commons, io, IOUtils], wildcard=false, alias=null)" ],
  "Trail-Sense/947" : [ "(item1 as? MediaWrapper)?.fileName?.removeExtension()\n--------------------------------------------------\n(item2 as? MediaWrapper)?.fileName?.removeExtension()", "fun String.removeExtension():String {\r\n    if (isNotEmpty() && substringBeforeLast(\".\").isEmpty()) return this\r\n    return substringBeforeLast(\".\")\r\n}" ],
  "VinylMusicPlayer/821" : [ "@Override\r\npublic void replyMessageSuccess(Message message) {\r\n    if (mAdapter != null) {\r\n        mAdapter.addReply(message);\r\n    }\r\n    goToBottom();\r\n    mEditText.setText(\"\");\r\n    mSendImageView.setColorFilter(mSendMessageIconColor, android.graphics.PorterDuff.Mode.SRC_IN);\r\n    isSendingMessage = false;\r\n    EventBus.getDefault().post(new RepliedToPrivateMessageEvent(message, getIntent().getIntExtra(EXTRA_MESSAGE_POSITION, -1)));\r\n}\n--------------------------------------------------\npublic void addReply(Message reply) {\r\n    int currentSize = getItemCount();\r\n    if (mMessage != null) {\r\n        mMessage.addReply(reply);\r\n    } else {\r\n        mMessage = reply;\r\n    }\r\n    notifyItemInserted(currentSize);\r\n}\n--------------------------------------------------\n", "import ml.docilealligator.infinityforreddit.message.Message;\r\nimport ml.docilealligator.infinityforreddit.message.Message\nimport ml.docilealligator.infinityforreddit.R\npublic void addReply(Message reply) {\r\n    int currentSize = getItemCount();\r\n    if (mMessage != null) {\r\n        mMessage.addReply(reply);\r\n    } else {\r\n        mMessage = reply;\r\n    }\r\n    notifyItemInserted(currentSize);\r\n}" ],
  "Trail-Sense/948" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/949" : [ "super.onDraw(canvas)", "import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        drawer.draw(canvas)\r\n    }\nImport(names=[android, graphics, Canvas], wildcard=false, alias=null)" ],
  "Trail-Sense/1235" : [ "{\r\n        return isValidZcashAddress(address)\r\n    }\n--------------------------------------------------\n{\r\n        return isValidTransparentAddress(address) || isValidShieldedAddress(address)\r\n    }", "import java.math.BigDecimal\noverride fun isValid(text: String?): Boolean {\r\n        if (text.isNullOrBlank()) return true\r\n\r\n        val parsed = text.toBigDecimalOrNull()\r\n        return parsed != null && parsed.scale() <= 2\r\n    }" ],
  "VinylMusicPlayer/820" : [ "val currentSortOrder: String? = getSortOrder()\n--------------------------------------------------\nval order: String? = getSortOrder()", "fun getSortOrder(): String? {\n        if (sortOrder == null) {\n            sortOrder = loadSortOrder()\n        }\n        return sortOrder\n    }" ],
  "Trail-Sense/1233" : [ "onServiceChanged(it)\n--------------------------------------------------\nsuper.onServiceChanged(service)\n--------------------------------------------------\nonServiceChanged(null)", "import org.videolan.vlc.PlaybackService\nprivate fun onServiceChanged(service: PlaybackService?) {\r\n        if (this.service == service) return\r\n        if (service != null) {\r\n            service.addCallback(serviceCb)\r\n            this.service = service\r\n        } else {\r\n            this.service?.apply { removeCallback(serviceCb) }\r\n            this.service = null\r\n        }\r\n    }\nImport(names=[org, videolan, vlc, PlaybackService], wildcard=false, alias=null)" ],
  "Trail-Sense/950" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/1238" : [ "tasksRepository.getTaskById(id)\n--------------------------------------------------\n            val task =\n                intent?.getIntExtra(Constants.TASK_ID_EXTRA, 0)?.let { getTaskByIdUseCase(it) }\r\n                    ?: kotlin.run {", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Task\noverride suspend fun getTaskById(id: Int): Task {\r\n        return withContext(ioDispatcher) {\r\n            taskDao.getTask(id)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Task], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Trail-Sense/951" : [ "@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    if (!isLocked()) {\r\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n        intent.setAction(Const.ACTION_VIEW_ENTRY);\r\n        intent.putExtra(Const.EXTRA_ID, -1);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivityAndCollapse(intent);\r\n    }\r\n}\n--------------------------------------------------\n@Override\r\npublic void onClick() {\r\n    super.onClick();\r\n    mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\r\n    String path = mSharedPreferences.getString(Const.PREF_LOCAL_REPO_PATH, \"\");\r\n    Uri uri = Uri.parse(mSharedPreferences.getString(Const.PREF_BACKUP_URI, \"\"));\r\n    // Update tile UI\r\n    updateTile();\r\n    // Send a sync request\r\n    Utils.sendSyncRequest(getApplicationContext(), path, uri);\r\n    // Update tile UI\r\n    updateTile();\r\n}\n--------------------------------------------------\n", "import android.content.DialogInterface;\r\nimport android.content.DialogInterface\npublic void onClick(DialogInterface dialog, int id) {\r\n    // User clicked OK button\r\n    doSave(false, true);\r\n    // Allow auto save\r\n    mAutoSaveSafe = true;\r\n}" ],
  "Trail-Sense/1239" : [ "tasksRepository.getTaskById(id)\n--------------------------------------------------\n            val task =\n                intent?.getIntExtra(Constants.TASK_ID_EXTRA, 0)?.let { getTaskByIdUseCase(it) }\r\n                    ?: kotlin.run {", "import kotlinx.coroutines.withContext\nimport com.mhss.app.mybrain.domain.model.Task\noverride suspend fun getTaskById(id: Int): Task {\r\n        return withContext(ioDispatcher) {\r\n            taskDao.getTask(id)\r\n        }\r\n    }\nImport(names=[com, mhss, app, mybrain, domain, model, Task], wildcard=false, alias=null)\nImport(names=[kotlinx, coroutines, withContext], wildcard=false, alias=null)" ],
  "Neo-Backup/326" : [ "        }\n        val share = FileProvider.getUriForFile(context, Constants.FILE_PROVIDER_AUTHORITY, File(uri.path))\r\n        intent.setDataAndType(share, mimeType)\n--------------------------------------------------\n{\n            getUris(observer.authority).forEach {\r\n                context.contentResolver.registerContentObserver(it, false, observer)", "import org.tasks.Strings.isNullOrEmpty\nimport android.net.Uri\nprivate fun getUri(key: Int): Uri? {\r\n        val uri = getStringValue(key)\r\n        return if (isNullOrEmpty(uri)) null else Uri.parse(uri)\r\n    }\nimport android.net.Uri\nimport org.tasks.Strings.isNullOrEmpty" ],
  "Neo-Backup/323" : [ "        permissions = getPermissionsToRequest()\n        hadPermissions = hasPermissions()\n        permissionDeniedMessage = null\n--------------------------------------------------\n        super.onResume()\n        val hasPermissions = hasPermissions()\n        if (hasPermissions != hadPermissions) {\n--------------------------------------------------\n        val hasPermissions = hasPermissions()\n        if (hasPermissions != hadPermissions) {\n            hadPermissions = hasPermissions\n--------------------------------------------------\n        if (hasPermissions != hadPermissions) {\n            hadPermissions = hasPermissions\n            if (VersionUtils.hasMarshmallow()) {\n--------------------------------------------------\n            if (VersionUtils.hasMarshmallow()) {\n                onHasPermissionsChanged(hasPermissions)\n            }\n--------------------------------------------------\n{\n        // implemented by sub classes\n        logD(hasPermissions)\n    }\n--------------------------------------------------\nhasPermissions()\n--------------------------------------------------\nreturn hasPermissions()", "import code.name.monkey.retromusic.R\nimport androidx.core.app.ActivityCompat\nimport android.content.pm.PackageManager\nprotected fun hasPermissions(): Boolean {\n        for (permission in permissions) {\n            if (ActivityCompat.checkSelfPermission(this,\n                    permission) != PackageManager.PERMISSION_GRANTED\n            ) {\n                return false\n            }\n        }\n        return true\n    }\nimport android.content.pm.PackageManager\nimport androidx.core.app.ActivityCompat\nimport code.name.monkey.retromusic.R" ],
  "Trail-Sense/952" : [ "        uri?.let {\n            viewModel.importDatabase(it, encrypted, password)\r\n        }\n--------------------------------------------------\nbackupRepository.importDatabase(uri, encrypted, password)", "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport android.net.Uri\nimport android.content.Context\noverride suspend fun importDatabase(\r\n        fileUri: Uri,\r\n        encrypted: Boolean, // To be added in a future version\r\n        password: String // To be added in a future version\r\n    ): Boolean {\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                database.close()\r\n                context.contentResolver.openInputStream(fileUri)?.use {\r\n                    it.copyTo(dbPath.outputStream())\r\n                } ?: return@withContext false\r\n                true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n    }\nimport android.content.Context\nimport android.net.Uri\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext" ],
  "Trail-Sense/953" : [ "return getWritableOrReadableDatabase(writable)", "import android.database.sqlite.SQLiteDatabase\nprivate fun getWritableOrReadableDatabase(writable: Boolean): SQLiteDatabase {\r\n            return if (writable) {\r\n                super.getWritableDatabase()\r\n            } else {\r\n                super.getReadableDatabase()\r\n            }\r\n        }\nImport(names=[android, database, sqlite, SQLiteDatabase], wildcard=false, alias=null)" ],
  "VinylMusicPlayer/815" : [ "protected void setToolbarGoToTop(Toolbar toolbar) {\r\n    toolbar.setOnLongClickListener(view -> {\r\n        if (BaseActivity.this instanceof ActivityToolbarInterface) {\r\n            ((ActivityToolbarInterface) BaseActivity.this).onLongPress();\r\n        }\r\n        return true;\r\n    });\r\n}\n--------------------------------------------------\n", "@Override\r\npublic void onLongPress() {\r\n    if (mFragment != null) {\r\n        mFragment.goBackToTop();\r\n    }\r\n}" ],
  "Trail-Sense/954" : [ "{\n        mainNavItems = navigationItems()\r\n        if (selectedTabIndex >= mainNavItems.size) {", "private fun navigationItems(): List<MainModule.NavigationViewItem> {\r\n        return items.mapIndexed { index, mainNavItem ->\r\n            getNavItem(mainNavItem, index == selectedTabIndex)\r\n        }\r\n    }" ],
  "Neo-Backup/318" : [ "activity.startActivitySafely(intents.rateApp(activity))\n--------------------------------------------------\nactivity.startActivitySafely(intents.sendFeedback(activity))\n--------------------------------------------------\nactivity.startActivitySafely(intents.viewSourceCode(activity))\n--------------------------------------------------\nactivity.startActivitySafely(intents.helpTranslate(activity))\n--------------------------------------------------\nactivity.startActivitySafely(intents.privacyPolicy(activity))\n--------------------------------------------------\nactivity.startActivitySafely(intents.codeContributors(activity))\n--------------------------------------------------\nactivity?.startActivitySafely(intent)\n--------------------------------------------------\nstartActivitySafely(Intent().apply {\n    action = Intent.ACTION_SEND\n    type = \"application/zip\"\n    putExtra(Intent.EXTRA_STREAM, fileUri)\n    flags = Intent.FLAG_GRANT_READ_URI_PERMISSION\n})", "import org.isoron.uhabits.R\nimport android.content.Intent\nimport android.content.ActivityNotFoundException\nimport android.app.Activity\nfun Activity.startActivitySafely(intent: Intent) {\r\n    try {\r\n        startActivity(intent)\r\n    } catch (e: ActivityNotFoundException) {\r\n        this.showMessage(resources.getString(R.string.activity_not_found))\r\n    }\r\n}\nImport(names=[android, app, Activity], wildcard=false, alias=null)\nImport(names=[android, content, ActivityNotFoundException], wildcard=false, alias=null)\nImport(names=[android, content, Intent], wildcard=false, alias=null)" ],
  "Neo-Backup/319" : [ "                onCloseClick = { finish() },\n                onCameraPermissionSettingsClick = { openCameraPermissionSettings() }\r\n            )", "import android.provider.Settings\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\nprivate fun openCameraPermissionSettings() {\r\n        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)\r\n        val uri: Uri = Uri.fromParts(\"package\", packageName, null)\r\n        intent.data = uri\r\n        startActivity(intent)\r\n    }\nimport android.app.Activity\nimport android.content.Intent\nimport android.net.Uri\nimport android.provider.Settings" ],
  "Trail-Sense/956" : [ "            'o' -> {\n                messageListFragment!!.onCycleSort()\r\n                return true", "import com.fsck.k9.Account.SortType\nfun onCycleSort() {\r\n        val sortTypes = SortType.entries\r\n        val currentIndex = sortTypes.indexOf(sortType)\r\n        val newIndex = if (currentIndex == sortTypes.lastIndex) 0 else currentIndex + 1\r\n        val nextSortType = sortTypes[newIndex]\r\n        changeSort(nextSortType)\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.Account.SortType" ],
  "VinylMusicPlayer/817" : [ "getGridSize()\n--------------------------------------------------\ngetGridSize() > maxGridSizeForList", "fun getGridSize(): Int {\n        if (gridSize == 0) {\n            gridSize = if (isLandscape) {\n                loadGridSizeLand()\n            } else {\n                loadGridSize()\n            }\n        }\n        return gridSize\n    }" ],
  "VinylMusicPlayer/816" : [ "", "import android.os.Bundle;\r\nimport android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    mFragment = this;\r\n}" ],
  "Neo-Backup/317" : [ "StartActivityOnCrash.setUp(this)", "import android.app.Activity\nfun setUp(context: Activity): Boolean {\r\n            try {\r\n                Thread.setDefaultUncaughtExceptionHandler(StartActivityOnCrash(context))\r\n            } catch (e: Exception) {\r\n                return false\r\n            }\r\n\r\n            return true\r\n        }\nImport(names=[android, app, Activity], wildcard=false, alias=null)" ],
  "Trail-Sense/958" : [ "        val sortAscending = if (this.sortType == sortType) !sortAscending else null\n        changeSort(sortType, sortAscending)\r\n    }\n--------------------------------------------------\n        val nextSortType = sortTypes[newIndex]\n        changeSort(nextSortType)\r\n    }\n--------------------------------------------------\n            R.id.compose -> onCompose()\n            R.id.set_sort_date -> changeSort(SortType.SORT_DATE)\r\n            R.id.set_sort_arrival -> changeSort(SortType.SORT_ARRIVAL)\n--------------------------------------------------\n            R.id.set_sort_date -> changeSort(SortType.SORT_DATE)\n            R.id.set_sort_arrival -> changeSort(SortType.SORT_ARRIVAL)\r\n            R.id.set_sort_subject -> changeSort(SortType.SORT_SUBJECT)\n--------------------------------------------------\n            R.id.set_sort_arrival -> changeSort(SortType.SORT_ARRIVAL)\n            R.id.set_sort_subject -> changeSort(SortType.SORT_SUBJECT)\r\n            R.id.set_sort_sender -> changeSort(SortType.SORT_SENDER)\n--------------------------------------------------\n            R.id.set_sort_subject -> changeSort(SortType.SORT_SUBJECT)\n            R.id.set_sort_sender -> changeSort(SortType.SORT_SENDER)\r\n            R.id.set_sort_flag -> changeSort(SortType.SORT_FLAGGED)\n--------------------------------------------------\n            R.id.set_sort_sender -> changeSort(SortType.SORT_SENDER)\n            R.id.set_sort_flag -> changeSort(SortType.SORT_FLAGGED)\r\n            R.id.set_sort_unread -> changeSort(SortType.SORT_UNREAD)\n--------------------------------------------------\n            R.id.set_sort_flag -> changeSort(SortType.SORT_FLAGGED)\n            R.id.set_sort_unread -> changeSort(SortType.SORT_UNREAD)\r\n            R.id.set_sort_attach -> changeSort(SortType.SORT_ATTACHMENT)\n--------------------------------------------------\n            R.id.set_sort_unread -> changeSort(SortType.SORT_UNREAD)\n            R.id.set_sort_attach -> changeSort(SortType.SORT_ATTACHMENT)\r\n            R.id.select_all -> selectAll()\n--------------------------------------------------\n{\r\n        changeSort(sortType)\r\n    }", "import com.fsck.k9.Account.SortType\nprivate fun changeSort(sortType: SortType) {\r\n        val sortAscending = if (this.sortType == sortType) !sortAscending else null\r\n        changeSort(sortType, sortAscending)\r\n    }\nimport com.fsck.k9.Account\nimport com.fsck.k9.Account.SortType" ],
  "fcitx5-android/294" : [ "screen.onAttached()\n--------------------------------------------------\ncache.onAttached()\n--------------------------------------------------\nadapter.onAttached()\n--------------------------------------------------\ntask.onAttached(this)", "fun onAttached() {\r\n        cache.onAttached()\r\n        midnightTimer.addListener(this)\r\n    }" ],
  "fcitx5-android/295" : [ "screen.onDetached()\n--------------------------------------------------\ncache.onDetached()\n--------------------------------------------------\nadapter.onDetached()", "fun onDetached() {\r\n        cache.onDetached()\r\n        midnightTimer.removeListener(this)\r\n    }" ],
  "VinylMusicPlayer/819" : [ "@Override\r\nprotected InputStream getContentStream() throws MessagingException {\r\n    InputStream is = null;\r\n    // acquire outside of message cache lock\r\n    boolean pk = message.getPeek();\r\n    // Acquire MessageCacheLock, to freeze seqnum.\r\n    synchronized (message.getMessageCacheLock()) {\r\n        try {\r\n            IMAPProtocol p = message.getProtocol();\r\n            // Check whether this message is expunged\r\n            message.checkExpunged();\r\n            if (p.isREV1() && (message.getFetchBlockSize() != -1))\r\n                return new IMAPInputStream(message, sectionId, message.ignoreBodyStructureSize() ? -1 : bs.size, pk);\r\n            // Else, vanila IMAP4, no partial fetch\r\n            int seqnum = message.getSequenceNumber();\r\n            BODY b;\r\n            if (pk)\r\n                b = p.peekBody(seqnum, sectionId);\r\n            else\r\n                b = p.fetchBody(seqnum, sectionId);\r\n            if (b != null)\r\n                is = b.getByteArrayInputStream();\r\n        } catch (ConnectionException cex) {\r\n            throw new FolderClosedException(message.getFolder(), cex.getMessage());\r\n        } catch (ProtocolException pex) {\r\n            throw new MessagingException(pex.getMessage(), pex);\r\n        }\r\n    }\r\n    if (is == null) {\r\n        // may throw MessageRemovedException\r\n        message.forceCheckExpunged();\r\n        // nope, the server doesn't think it's expunged.\r\n        // can't tell the difference between the server returning NIL\r\n        // and some other error that caused null to be returned above,\r\n        // so we'll just assume it was empty content.\r\n        is = new ByteArrayInputStream(new byte[0]);\r\n    }\r\n    return is;\r\n}\n--------------------------------------------------\n/**\r\n * Get all the bytes for this message. Overrides getContentStream()\r\n * in MimeMessage. This method is ultimately used by the DataHandler\r\n * to obtain the input stream for this message.\r\n *\r\n * @see javax.mail.internet.MimeMessage#getContentStream\r\n */\r\n@Override\r\nprotected InputStream getContentStream() throws MessagingException {\r\n    if (bodyLoaded)\r\n        return super.getContentStream();\r\n    InputStream is = null;\r\n    // get before acquiring message cache lock\r\n    boolean pk = getPeek();\r\n    // Acquire MessageCacheLock, to freeze seqnum.\r\n    synchronized (getMessageCacheLock()) {\r\n        try {\r\n            IMAPProtocol p = getProtocol();\r\n            // This message could be expunged when we were waiting\r\n            // to acquire the lock ...\r\n            checkExpunged();\r\n            if (// IMAP4rev1\r\n            p.isREV1() && (getFetchBlockSize() != -1))\r\n                return new IMAPInputStream(this, toSection(\"TEXT\"), bs != null && !ignoreBodyStructureSize() ? bs.size : -1, pk);\r\n            if (p.isREV1()) {\r\n                BODY b;\r\n                if (pk)\r\n                    b = p.peekBody(getSequenceNumber(), toSection(\"TEXT\"));\r\n                else\r\n                    b = p.fetchBody(getSequenceNumber(), toSection(\"TEXT\"));\r\n                if (b != null)\r\n                    is = b.getByteArrayInputStream();\r\n            } else {\r\n                RFC822DATA rd = p.fetchRFC822(getSequenceNumber(), \"TEXT\");\r\n                if (rd != null)\r\n                    is = rd.getByteArrayInputStream();\r\n            }\r\n        } catch (ConnectionException cex) {\r\n            throw new FolderClosedException(folder, cex.getMessage());\r\n        } catch (ProtocolException pex) {\r\n            forceCheckExpunged();\r\n            throw new MessagingException(pex.getMessage(), pex);\r\n        }\r\n    }\r\n    if (is == null) {\r\n        // may throw MessageRemovedException\r\n        forceCheckExpunged();\r\n        // nope, the server doesn't think it's expunged.\r\n        // can't tell the difference between the server returning NIL\r\n        // and some other error that caused null to be returned above,\r\n        // so we'll just assume it was empty content.\r\n        is = new ByteArrayInputStream(new byte[0]);\r\n    }\r\n    return is;\r\n}\n--------------------------------------------------\n", "/**\r\n * Get whether or not to use the PEEK variant of FETCH when\r\n * fetching message content.\r\n *\r\n * @return\tthe peek flag\r\n * @since\tJavaMail 1.3.3\r\n */\r\npublic synchronized boolean getPeek() {\r\n    if (peek == null)\r\n        return ((IMAPStore) folder.getStore()).getPeek();\r\n    else\r\n        return peek.booleanValue();\r\n}" ]
}