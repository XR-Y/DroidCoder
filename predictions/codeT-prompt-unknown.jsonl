{"prompt": "import app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.util.extensions.getString\nprivate fun setNightMode() {\r\n    setDefaultNightMode(\r\n      when (prefs.getString(PreferenceKeys.APP_THEME) ?: getString(R.string.app_theme_def)) {\r\n        \"light\" -> MODE_NIGHT_NO\r\n        \"dark\" -> MODE_NIGHT_YES", "choices": [{"text": "\r\n      },\r\n      when (prefs.getString(PreferenceKeys.APP_THEME)?: getString(R.string.app_theme_def)) {\r\n        \"light\" -> MODE_NIGHT_YES\r\n        \"dark\" -> MODE_NIGHT_NO\r\n      },\r\n      when (prefs.getString(PreferenceKeys.APP_THEME)?: getString(R.string.app_theme_def)) {\r\n        \"light\" -> MODE_NIGHT_YES\r\n        \"dark\" -> MODE_NIGHT_NO"}], "metadata": {"task_id": "Android-Password-Store/2", "ground_truth": "        \"follow_system\" -> MODE_NIGHT_FOLLOW_SYSTEM\r\n        else -> MODE_NIGHT_AUTO_BATTERY\r\n      }\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\Application.kt"}}
{"prompt": "import java.io.ByteArrayOutputStream\nimport java.io.ByteArrayInputStream\nimport com.github.michaelbull.result.filterValues\nimport com.github.michaelbull.result.Result\nimport app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.crypto.errors.CryptoHandlerException\nimport app.passwordstore.crypto.PGPIdentifier\nimport app.passwordstore.crypto.PGPEncryptOptions\nprivate suspend fun encryptPgp(\r\n    identities: List<PGPIdentifier>,\r\n    content: ByteArrayInputStream,\r\n    out: ByteArrayOutputStream,\r\n  ): Result<Unit, CryptoHandlerException> {\r\n    val encryptionOptions =\r\n      PGPEncryptOptions.Builder()\r\n        .withAsciiArmor(settings.getBoolean(PreferenceKeys.ASCII_ARMOR, false))\r\n        .build()\r\n    val keys = identities.map { id -> pgpKeyManager.getKeyById(id) }.filterValues()\r\n    return pgpCryptoHandler.encrypt(\r\n      keys,", "choices": [{"text": " encryptionOptions,\r\n      content,\r\n      out,\r\n    ).filterValues()\r\n  }\r\nprivate suspend fun decryptPgp(\r\n    identities: List<PGPIdentifier>,\r\n    content: ByteArrayInputStream,\r\n    out: ByteArrayOutputStream,\r\n  ): Result<Unit, CryptoHandlerException> {\r\n    val encryptionOptions =\r\n      PGPEncryptOptions.Builder()\r\n       .withAsciiArmor(settings.getBoolean(PreferenceKeys.ASCII_ARMOR, false))\r\n       .build()\r\n    val keys = identities.map"}], "metadata": {"task_id": "Android-Password-Store/5", "ground_truth": "      content,\r\n      out,\r\n      encryptionOptions,\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\crypto\\CryptoRepository.kt"}}
{"prompt": "import org.eclipse.jgit.storage.file.FileRepositoryBuilder\nimport org.eclipse.jgit.lib.Repository\nimport org.eclipse.jgit.api.Git\nimport java.io.File\nimport com.github.michaelbull.result.runCatching\nprivate fun initializeRepository(repositoryDir: File) {\r\n    val builder = FileRepositoryBuilder()\r\n    repository =\r\n      runCatching { builder.setGitDir(repositoryDir).build() }", "choices": [{"text": "\n    return () -> repository\r\n  }\r\n\r\n  private fun initializeGit(repositoryDir: File) {\r\n    val builder = FileRepositoryBuilder()\r\n    git =\r\n      runCatching { builder.setGitDir(repositoryDir).build() }\r\n    return () -> git\r\n  }\r\n\r\n  public static void main(String[] args) {\r\n    val repositoryDir = new File(\".\")\r\n    val git = initializeGit(repositoryDir)\r\n    val repository = initializeRepository(repositoryDir)\r\n\r\n    val"}], "metadata": {"task_id": "Android-Password-Store/13", "ground_truth": "        .getOrElse { e ->\r\n          e.printStackTrace()\r\n          null\r\n        }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "import org.eclipse.jgit.lib.Constants\nfun getCurrentBranch(): String? {\r\n    val repository = repository ?: return null\r\n    val headRef = repository.findRef(Constants.HEAD) ?: return null\r\n    return if (headRef.isSymbolic) {\r\n      val branchName = headRef.target.name", "choices": [{"text": "\r\n      return branchName\r\n    } else {\r\n      return headRef.target.name\r\n    }\r\n  }\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/16", "ground_truth": "      Repository.shortenRefName(branchName)\r\n    } else {\r\n      null\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "import java.io.File\nprivate fun getFilesList(path: File): ArrayList<File> {\r\n    if (!path.exists()) return ArrayList()\r\n    val files =\r\n      (path.listFiles { file -> file.isDirectory || file.extension == \"gpg\" } ?: emptyArray())", "choices": [{"text": ")\r\n    return files\r\n}\r\npublic class Solution {\r\n  public ArrayList<File> getFilesList(File path) {\r\n    return getFilesList(path);\r\n  }\r\n  public ArrayList<File> getFilesList(String path) {\r\n    return getFilesList(new File(path));\r\n  }\r\n  public ArrayList<File> getFilesList(int path) {\r\n    return getFilesList(new File(path));\r\n  }\r\n  public ArrayList<File> getFilesList(long path) {\r\n    return getFilesList(new"}], "metadata": {"task_id": "Android-Password-Store/17", "ground_truth": "        .toList()\r\n    val items = ArrayList<File>()\r\n    items.addAll(files)\r\n    return items\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "import dagger.Reusable\nimport dagger.Provides\nimport app.passwordstore.util.autofill.AutofillResponseBuilder\nimport android.os.Build\n @Provides\r\n  @Reusable\r\n  fun provideAutofillResponseBuilder(): AutofillResponseBuilder.Factory {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {", "choices": [{"text": "\r\n      return AutofillResponseBuilder.create()\r\n    } else {\r\n      return AutofillResponseBuilder.create()\r\n    }\r\n  }\r\n"}], "metadata": {"task_id": "Android-Password-Store/18", "ground_truth": "      Api30AutofillResponseBuilder.Factory\r\n    } else {\r\n      Api26AutofillResponseBuilder.Factory\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\injection\\AutofillResponseBuilderModule.kt"}}
{"prompt": "import dagger.Provides\nimport app.passwordstore.util.coroutines.DispatcherProvider\nimport app.passwordstore.crypto.PGPKeyManager\n @Provides\r\n  fun providePGPKeyManager(\r\n    @PGPKeyDir keyDir: String,\r\n    dispatcherProvider: DispatcherProvider,\r\n  ): PGPKeyManager {", "choices": [{"text": "\r\n  return PGPKeyManager(\r\n    keyDir,\r\n    dispatcherProvider,\r\n  )\r\n @Provides\r\n  fun providePGPKeyManager(\r\n    @PGPKeyDir String,\r\n    dispatcherProvider: DispatcherProvider,\r\n  ): PGPKeyManager {\r\n    return PGPKeyManager(\r\n      keyDir,\r\n      dispatcherProvider,\r\n    )\r\n  }\r\n @Provides\r\n  fun providePGPKeyManager(\r\n    @PGPKeyDir String,\r\n    dispatcherProvider: DispatcherProvider,\r"}], "metadata": {"task_id": "Android-Password-Store/19", "ground_truth": "    return PGPKeyManager(\r\n      keyDir,\r\n      dispatcherProvider.io(),\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\injection\\crypto\\KeyManagerModule.kt"}}
{"prompt": "import app.passwordstore.data.password.FieldItem\nimport app.passwordstore.data.passfile.Totp\nfun updateOTPCode(totp: Totp) {\r\n    var otpItemPosition = -1\r\n    fieldItemList =\r\n      fieldItemList.mapIndexed { position, item ->\r\n        if (item.key.startsWith(FieldItem.ItemType.OTP.type, true)) {\r\n          otpItemPosition = position\r\n          return@mapIndexed FieldItem.createOtpField(totp)\r\n        }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Android-Password-Store/23", "ground_truth": "        return@mapIndexed item\r\n      }\r\n\r\n    notifyItemChanged(otpItemPosition)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\adapters\\FieldItemAdapter.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.github.androidpasswordstore.autofillparser.AutofillAction\nimport app.passwordstore.util.auth.BiometricAuthenticator.Result\nimport app.passwordstore.ui.crypto.PasswordDialog\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.fragment.app.setFragmentResultListener\nimport android.os.Bundle\nprivate fun askPassphrase(filePath: String, clientState: Bundle, action: AutofillAction) {\r\n    val dialog = PasswordDialog()\r\n    dialog.show(supportFragmentManager, \"PASSWORD_DIALOG\")\r\n    dialog.setFragmentResultListener(PasswordDialog.PASSWORD_RESULT_KEY) { key, bundle ->\r\n      if (key == PasswordDialog.PASSWORD_RESULT_KEY) {\r\n        val value = bundle.getString(PasswordDialog.PASSWORD_RESULT_KEY)!!\r\n        lifecycleScope.launch(dispatcherProvider.main()) {", "choices": [{"text": " {\r\n          if (value!= null) {\r\n            action.setPassword(value)\r\n          }\r\n        })\r\n      }\r\n    }}\r\n    return () -> dialog.dismiss()\r\n  }\r\n  private fun askPassword(filePath: String, clientState: Bundle, action: AutofillAction) {\r\n    val dialog = PasswordDialog()\r\n    dialog.show(supportFragmentManager, \"PASSWORD_DIALOG\")\r\n    dialog.setFragmentResultListener(PasswordDialog.PASSWORD_RESULT_KEY) { key, bundle ->"}], "metadata": {"task_id": "Android-Password-Store/25", "ground_truth": "          decryptWithPassphrase(File(filePath), clientState, action, value)\r\n        }\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\autofill\\AutofillDecryptActivity.kt"}}
{"prompt": "import java.io.File\nimport app.passwordstore.R\n @Suppress(\"ReturnCount\")\r\n  private fun File.findTillRoot(fileName: String, rootPath: File): File? {\r\n    val gpgFile = File(this, fileName)\r\n    if (gpgFile.exists()) return gpgFile\r\n\r\n    if (this.absolutePath == rootPath.absolutePath) {\r\n      return null\r\n    }\r\n    val parent = parentFile\r\n    return if (parent != null && parent.exists()) {", "choices": [{"text": "\r\n      val child = parent.findTillRoot(fileName, rootPath)\r\n      if (child!= null) {\r\n        return child\r\n      }\r\n      return null\r\n    }\r\n  }\r\n  private fun File.findTillRoot(fileName: String, rootPath: File): File? {\r\n    val gpgFile = File(this, fileName)\r\n    if (gpgFile.exists()) return gpgFile\r\n\r\n    if (this.absolutePath == rootPath.absolutePath) {\r\n      return null\r\n    }\r\n"}], "metadata": {"task_id": "Android-Password-Store/32", "ground_truth": "      parent.findTillRoot(fileName, rootPath)\r\n    } else {\r\n      null\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\BasePGPActivity.kt"}}
{"prompt": "import app.passwordstore.R\n @JvmStatic\r\n    fun getLongName(fullPath: String, repositoryPath: String, basename: String): String {\r\n      var relativePath = getRelativePath(fullPath, repositoryPath)\r\n      return if (relativePath.isNotEmpty() && relativePath != \"/\") {\r\n        // remove preceding '/'\r\n        relativePath = relativePath.substring(1)\r\n        if (relativePath.endsWith('/')) {\r\n          relativePath + basename\r\n        } else {\r\n          \"$relativePath/$basename\"", "choices": [{"text": "\r\n        }\r\n      } else {\r\n        relativePath + basename\r\n      }\r\n    }\r\n\r\n    fun getRelativePath(fullPath: String, repositoryPath: String): String {\r\n      if (fullPath.startsWith(repositoryPath)) {\r\n        return fullPath.substring(repositoryPath.length)\r\n      } else {\r\n        return \"\"\r\n      }\r\n    }\r\n"}], "metadata": {"task_id": "Android-Password-Store/34", "ground_truth": "        }\r\n      } else {\r\n        basename\r\n      }\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\BasePGPActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n    menuInflater.inflate(R.menu.pgp_handler, menu)\r\n    passwordEntry?.let { entry ->\r\n      menu.findItem(R.id.edit_password).isVisible = true\r\n      if (!entry.password.isNullOrBlank()) {\r\n        menu.findItem(R.id.share_password_as_plaintext).isVisible = true", "choices": [{"text": "\r\n      } else {\r\n        menu.findItem(R.id.edit_password).isVisible = false\r\n        menu.findItem(R.id.share_password_as_plain).isVisible = false\r\n      }\r\n    }\r\n    return True\r\n}\r\noverride fun onPrepareOptionsMenu(menu: Menu): Boolean {\r\n    menuInflater.inflate(R.menu.pgp_handler, menu)\r\n    passwordEntry?.let { entry ->\r\n      menu.findItem(R.id.edit_"}], "metadata": {"task_id": "Android-Password-Store/35", "ground_truth": "        menu.findItem(R.id.copy_password).isVisible = true\r\n      }\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.util.settings.Constants\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun startAutoDismissTimer() {\r\n    lifecycleScope.launch {\r\n      val timeout =\r\n        settings.getString(PreferenceKeys.GENERAL_SHOW_TIME)?.toIntOrNull()\r\n          ?: Constants.DEFAULT_DECRYPTION_TIMEOUT\r\n      if (timeout != 0) {", "choices": [{"text": "\r\n        autoDismissTimer = kotlinx.coroutines.launch(\r\n          startAutoDismissTimer,\r\n          timeout\r\n        )\r\n      } else {\r\n        autoDismissTimer = null\r\n      }\r\n    }\r\n    return () -> {\r\n      if (autoDismissTimer!= null) {\r\n        autoDismissTimer.cancel()\r\n        autoDismissTimer = null\r\n      }\r\n    }\r\n  }\r\n"}], "metadata": {"task_id": "Android-Password-Store/37", "ground_truth": "        delay(timeout.seconds)\r\n        finish()\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport java.io.File\nimport java.io.ByteArrayOutputStream\nimport com.github.michaelbull.result.runCatching\nimport app.passwordstore.crypto.PGPIdentifier\nprivate suspend fun decryptPGPStream(\r\n    passphrase: String,\r\n    gpgIdentifiers: List<PGPIdentifier>,\r\n  ) = runCatching {\r\n    val message = withContext(dispatcherProvider.io()) { File(fullPath).readBytes().inputStream() }\r\n    val outputStream = ByteArrayOutputStream()\r\n    val result =\r\n      repository.decrypt(\r\n        passphrase,\r\n        gpgIdentifiers,", "choices": [{"text": "\r\n        message,\r\n        outputStream,\r\n      )\r\n    outputStream.flush()\r\n    outputStream.close()\r\n    return result\r\n  }\r\n"}], "metadata": {"task_id": "Android-Password-Store/40", "ground_truth": "        message,\r\n        outputStream,\r\n      )\r\n    if (result.isOk) outputStream else throw result.error\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "import app.passwordstore.data.passfile.PasswordEntry\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.Text\n\r\n@Composable\r\nprivate fun ExtraContent(\r\n  entry: PasswordEntry,\r\n  modifier: Modifier = Modifier,\r\n) {\r\n  TextField(\r\n    value = entry.extraContentString,", "choices": [{"text": "\r\n    modifier = modifier,\r\n  )\r\n}\r\n\r\n@Composable\r\nprivate fun Title(\r\n  entry: PasswordEntry,\r\n  modifier: Modifier = Modifier,\r\n) {\r\n  Text(\r\n    value = entry.title,\r\n    modifier = modifier,\r\n  )\r\n}\r\n\r\n@Composable\r\nprivate fun Password(\r\n  entry: PasswordEntry,\r\n  modifier: Modifier = Modifier,\r\n) {\r\n  TextField(\r\n    value = entry.password,\r\n    modifier"}], "metadata": {"task_id": "Android-Password-Store/41", "ground_truth": "    onValueChange = {},\r\n    label = { Text(\"Extra content\") },\r\n    modifier = modifier.fillMaxWidth(),\r\n  )\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": "import app.passwordstore.ui.compose.theme.APSThemePreview\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun EditPasswordScreenPreview() {\r\n  APSThemePreview {\r\n    EditPasswordScreen(\r\n      entryName = \"Test Entry\",\r\n      entry = createTestEntry(),", "choices": [{"text": "\r\n    ),\r\n  };\r\n}\r\n\r\nprivate fun createTestEntry() {\r\n  return {\r\n    name: \"Test Entry\",\r\n    password: \"12345678\",\r\n    confirmPassword: \"12345678\",\r\n  };\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/42", "ground_truth": "      onNavigateUp = {},\r\n      onSave = {},\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": "import app.passwordstore.util.totp.UriTotpFinder\nimport app.passwordstore.util.time.UserClock\nimport app.passwordstore.data.passfile.PasswordEntry\nimport app.passwordstore.R\nprivate fun createTestEntry() =\r\n  PasswordEntry(\r\n    UserClock(),\r\n    UriTotpFinder(),\r\n    \"\"\"\r\n    |My Password\r\n    |otpauth://totp/ACME%20Co:john@example.com?secret=HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ&issuer=ACME%20Co&algorithm=SHA1&digits=6&period=30\r\n    |login: msfjarvis", "choices": [{"text": "@example.com\r\n    \"\"\"\r\n  )\r\n\r\n@app.route('/')\r\ndef index():\r\n  return render_template('index.html')\r\n\r\n@app.route('/login')\r\ndef login():\r\n  return render_template('login.html')\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n  return render_template('logout.html')\r\n\r\n@app.route('/register')\r\ndef register():\r\n  return render_template('register.html')\r"}], "metadata": {"task_id": "Android-Password-Store/43", "ground_truth": "    |URL: example.com\r\n  \"\"\"\r\n      .trimMargin()\r\n      .encodeToByteArray()\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        setResult(RESULT_CANCELED)\r\n        onBackPressedDispatcher.onBackPressed()\r\n      }\r\n      R.id.save_password -> {\r\n        copy = false\r\n        requireKeysExist { encrypt() }\r\n      }\r\n      R.id.save_and_copy_password -> {\r\n        copy = true\r\n        requireKeysExist { encrypt() }", "choices": [{"text": "\r\n      }\r\n    }\r\n    return super.onOptionsItemSelected(item)\r\n\r\n  def encrypt(self):\r\n    if copy:\r\n      self.setResult(RESULT_CANCELED)\r\n      onBackPressedDispatcher.onBackPressed()\r\n    else:\r\n      self.setResult(RESULT_OK)\r\n      onBackPressedDispatcher.onBackPressed()\r\n\r\n  def requireKeysExist(self):\r\n    if copy:\r\n      self.setResult(RESULT_CANCELED)\r\n      on"}], "metadata": {"task_id": "Android-Password-Store/45", "ground_truth": "      }\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\PasswordCreationActivity.kt"}}
{"prompt": "import app.passwordstore.ui.compose.theme.APSThemePreview\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun ViewPasswordScreenPreview() {\r\n  APSThemePreview {\r\n    ViewPasswordScreen(\r\n      entryName = \"Test Entry\",", "choices": [{"text": "\r\n      password = \"Test Password\",\r\n    )\r\n  }\r\n}\r\n\r\npublic class ViewPasswordScreen {\r\n  private final String entryName;\r\n  private final String password;\r\n\r\n  public ViewPasswordScreen(String entryName, String password) {\r\n    this.entryName = entryName;\r\n    this.password = password;\r\n  }\r\n\r\n  public String getEntryName() {\r\n    return entryName;\r\n  }\r\n\r\n  public String getPassword() {\r\n    return password;\r"}], "metadata": {"task_id": "Android-Password-Store/49", "ground_truth": "      entry = createTestEntry(),\r\n      onNavigateUp = {},\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\ViewPasswordScreen.kt"}}
{"prompt": "import app.passwordstore.util.totp.UriTotpFinder\nimport app.passwordstore.util.time.UserClock\nimport app.passwordstore.data.passfile.PasswordEntry\nimport app.passwordstore.R\nprivate fun createTestEntry() =\r\n  PasswordEntry(\r\n    UserClock(),\r\n    UriTotpFinder(),\r\n    \"\"\"\r\n    |My Password\r\n    |otpauth://totp/ACME%20Co:john@example.com?secret=HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ&issuer=ACME%20Co&algorithm=SHA1&digits=6&period=30\r\n    |login: msfjarvis", "choices": [{"text": "@example.com\r\n    \"\"\"\r\n  )\r\n\r\n@app.route('/')\r\ndef index():\r\n  return render_template('index.html')\r\n\r\n@app.route('/login')\r\ndef login():\r\n  return render_template('login.html')\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n  return render_template('logout.html')\r\n\r\n@app.route('/register')\r\ndef register():\r\n  return render_template('register.html')\r"}], "metadata": {"task_id": "Android-Password-Store/50", "ground_truth": "    |URL: example.com\r\n  \"\"\"\r\n      .trimMargin()\r\n      .encodeToByteArray()\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\ViewPasswordScreen.kt"}}
{"prompt": "fun build(): BasicBottomSheet {\r\n      require(message != null) { \"Message needs to be set\" }\r\n      return BasicBottomSheet(\r\n        title,\r\n        message!!,\r\n        positiveButtonLabel,", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Android-Password-Store/59", "ground_truth": "        negativeButtonLabel,\r\n        positiveButtonClickListener,\r\n        negativeButtonClickListener\r\n      )\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "private fun setPreferences(length: Int, separator: Char) {", "choices": [{"text": ": Char) {\n  if (length == null) {\n    length = 0;\n  }\n  if (separator == null) {\n    separator ='';\n  }\n  if (separator.length == 0) {\n    separator ='';\n  }\n  if (separator.length == 1) {\n    separator ='';\n  }\n  if (separator.length == 2) {\n    separator ='';\n  }\n  if (separator.length == 3) {\n    separator ='';\n  }\n  if (separator.length =="}], "metadata": {"task_id": "Android-Password-Store/61", "ground_truth": "    prefs.edit {\r\n      putInt(DICEWARE_LENGTH, length)\r\n      putString(DICEWARE_SEPARATOR, separator.toString())\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\DicewarePasswordGeneratorDialogFragment.kt"}}
{"prompt": "import app.passwordstore.passgen.random.PasswordOption\nimport app.passwordstore.passgen.random.PasswordGenerator\nimport app.passwordstore.R\nimport androidx.core.content.edit\nimport android.content.Context\nprivate fun setPrefs(ctx: Context, options: List<PasswordOption>, targetLength: Int): Boolean {\r\n    ctx.getSharedPreferences(\"PasswordGenerator\", Context.MODE_PRIVATE).edit {\r\n      for (possibleOption in PasswordOption.entries) {\r\n        putBoolean(possibleOption.key, possibleOption in options)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/68", "ground_truth": "      }\r\n      putInt(\"length\", targetLength)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\PasswordGeneratorDialogFragment.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        setResult(RESULT_CANCELED)\r\n        onBackPressedDispatcher.onBackPressed()\r\n      }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Android-Password-Store/72", "ground_truth": "      R.id.crypto_select -> selectFolder()\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\folderselect\\SelectFolderActivity.kt"}}
{"prompt": "import net.schmizz.sshj.common.SSHException\nimport net.schmizz.sshj.common.DisconnectReason\nimport com.github.michaelbull.result.Err\nimport app.passwordstore.R\nprivate fun isExplicitlyUserInitiatedError(throwable: Throwable): Boolean {\r\n    var cause: Throwable? = throwable\r\n    while (cause != null) {\r\n      if (\r\n        cause is SSHException && cause.disconnectReason == DisconnectReason.AUTH_CANCELLED_BY_USER\r\n      )", "choices": [{"text": "\r\n        return true\r\n      cause = cause.getCause()\r\n    }\r\n    return false\r\n  }\r\n  private fun isExplicitlyUserInitiatedError(throwable: Throwable): Boolean {\r\n    var cause: Throwable? = throwable\r\n    while (cause!= null) {\r\n      if (\r\n        cause is SSHException && cause.disconnectReason == DisconnectReason.AUTH_CANCELLED_BY_USER\r\n      )\r\n        return true\r\n      cause = cause.getCause()\r\n    }\r\n    return false\r\n "}], "metadata": {"task_id": "Android-Password-Store/74", "ground_truth": "        return true\r\n      cause = cause.cause\r\n    }\r\n    return false\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\base\\BaseGitActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "\r\n      }\r\n    }\r\n  }\r\n  onBackPressedDispatcher.onBackPressed = () => {\r\n    onBackPressedDispatcher.onBackPressed = () => {\r\n      onBackPressedDispatcher.onBackPressed = () => {\r\n        onBackPressedDispatcher.onBackPressed = () => {\r\n          onBackPressedDispatcher.onBackPressed = () => {\r\n            onBackPressedDispatcher.onBackPressed = () => {\r\n              onBackPressedDispatcher.onBackPressed = () => {\r\n                onBackPressedDispatcher.onBackPressed"}], "metadata": {"task_id": "Android-Password-Store/75", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\config\\GitConfigActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "\r\n      }\r\n    }\r\n  }\r\n  onBackPressedDispatcher.onBackPressed = () => {\r\n    onBackPressedDispatcher.onBackPressed = () => {\r\n      onBackPressedDispatcher.onBackPressed = () => {\r\n        onBackPressedDispatcher.onBackPressed = () => {\r\n          onBackPressedDispatcher.onBackPressed = () => {\r\n            onBackPressedDispatcher.onBackPressed = () => {\r\n              onBackPressedDispatcher.onBackPressed = () => {\r\n                onBackPressedDispatcher.onBackPressed"}], "metadata": {"task_id": "Android-Password-Store/76", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\config\\GitServerConfigActivity.kt"}}
{"prompt": "import android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        finish()", "choices": [{"text": "\r\n        finish()\r\n      }\r\n    }\r\n  }\r\n"}], "metadata": {"task_id": "Android-Password-Store/80", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\log\\GitLogActivity.kt"}}
{"prompt": "import androidx.activity.addCallback\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    supportActionBar?.hide()\r\n    val callback = onBackPressedDispatcher.addCallback(enabled = false) { finishAffinity() }\r\n    supportFragmentManager.addOnBackStackChangedListener {", "choices": [{"text": "() {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.show()\r\n        callback()\r\n    }\r\n    supportFragmentManager.addOnBackStackChangedListener(callback)\r\n}\r\noverride fun finishAffinity() {\r\n    super.finishAffinity()\r\n    supportActionBar?.hide()\r\n}\r\noverride fun onBackPressed() {\r\n    super.onBackPressed()\r\n    supportActionBar?.hide()\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/86", "ground_truth": "      if (supportFragmentManager.backStackEntryCount == 0) {\r\n        callback.isEnabled = true\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\onboarding\\activity\\OnboardingActivity.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport java.io.File\nimport app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.flowWithLifecycle\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    setContentView(R.layout.activity_pwdstore)\r\n\r\n    lifecycleScope.launch {\r\n      model.currentDir.flowWithLifecycle(lifecycle).collect { dir ->\r\n        val basePath = PasswordRepository.getRepositoryDirectory().absoluteFile\r\n        supportActionBar?.apply {", "choices": [{"text": "\r\n          val actionBar = getSupportActionBar()\r\n          if (actionBar!= null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true)\r\n            actionBar.setDisplayShowHomeEnabled(true)\r\n            actionBar.setDisplayShowTitleEnabled(true)\r\n            actionBar.setDisplayShowTitleEnabled(true)\r\n            actionBar.setDisplayShowCustomEnabled(true)\r\n            actionBar.setDisplayShowCustomEnabled(true)\r\n            actionBar.setDisplayShowCustomEnabled(true)\r\n            actionBar."}], "metadata": {"task_id": "Android-Password-Store/94", "ground_truth": "          if (dir != basePath) title = dir.name else setTitle(R.string.app_name)\r\n        }\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.R\noverride fun onResume() {\r\n    super.onResume()\r\n    checkLocalRepository()\r\n    if (settings.getBoolean(PreferenceKeys.SEARCH_ON_START, false) && ::searchItem.isInitialized) {", "choices": [{"text": "\r\n        ::searchItem.onResume()\r\n    }\r\n}\r\noverride fun onPause() {\r\n    super.onPause()\r\n    checkLocalRepository()\r\n    if (settings.getBoolean(PreferenceKeys.SEARCH_ON_START, false) && ::searchItem.isInitialized) {\r\n        ::searchItem.onPause()\r\n    }\r\n}\r\noverride fun onDestroy() {\r\n    super.onDestroy()\r\n    checkLocalRepository()\r\n    if (settings.getBoolean(PreferenceKeys.SEARCH_ON_START"}], "metadata": {"task_id": "Android-Password-Store/96", "ground_truth": "      if (!searchItem.isActionViewExpanded) {\r\n        searchItem.expandActionView()\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import app.passwordstore.ui.crypto.DecryptActivity\nimport app.passwordstore.data.password.PasswordItem\nimport android.content.Intent\nimport android.content.ComponentName\nfun decryptPassword(item: PasswordItem) {\r\n    val authDecryptIntent = item.createAuthEnabledIntent(this)\r\n    val decryptIntent =\r\n      Intent(authDecryptIntent).setComponent(ComponentName(this, DecryptActivity::class.java))", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Android-Password-Store/100", "ground_truth": "    startActivity(decryptIntent)\r\n\r\n    // Adds shortcut\r\n    shortcutHandler.addDynamicShortcut(item, authDecryptIntent)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.R\nprivate fun validateState(): Boolean {\r\n    if (!PasswordRepository.isInitialized) {\r\n      MaterialAlertDialogBuilder(this)\r\n        .setMessage(resources.getString(R.string.creation_dialog_text))\r\n        .setPositiveButton(resources.getString(R.string.dialog_ok), null)", "choices": [{"text": "\n       .setNegativeButton(resources.getString(R.string.dialog_cancel), null)\r\n       .show();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/101", "ground_truth": "        .show()\r\n      return false\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.data.password.PasswordItem\nimport app.passwordstore.R\nfun matchPasswordWithApp(item: PasswordItem) {\r\n    val path =\r\n      item.file.absolutePath\r\n        .replace(PasswordRepository.getRepositoryDirectory().toString() + \"/\", \"\")\r\n        .replace(\".gpg\", \"\")", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Android-Password-Store/106", "ground_truth": "    val data = Intent()\r\n    data.putExtra(\"path\", path)\r\n    setResult(RESULT_OK, data)\r\n    finish()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import kotlinx.coroutines.runBlocking\nimport app.passwordstore.crypto.PGPKey\nprivate fun importKey(bytes: ByteArray, replace: Boolean): PGPKey? {\r\n    lastBytes = bytes\r\n    val (key, error) = runBlocking { keyManager.addKey(PGPKey(bytes), replace = replace) }\r\n    if (replace) {", "choices": [{"text": "\r\n        return key\r\n    else {\r\n        return keyManager.addKey(PGPKey(bytes))\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/110", "ground_truth": "      lastBytes = null\r\n    }\r\n    if (error != null) throw error\r\n    return key\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyImportActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.AlertDialog\n\r\n@Suppress(\"NOTHING_TO_INLINE\")\r\n@Composable\r\nprivate inline fun DeleteConfirmationDialog(\r\n  isDeleting: Boolean,\r\n  noinline onDismiss: () -> Unit,\r\n  noinline onConfirm: () -> Unit,\r\n) {\r\n  if (isDeleting) {\r\n    AlertDialog(\r\n      onDismissRequest = onDismiss,\r\n      title = {\r\n        Text(text = stringResource(R.string.pgp_key_manager_delete_confirmation_dialog_title))\r\n      },\r\n      confirmButton = {\r\n        TextButton(onClick = onConfirm) { Text(text = stringResource(R.string.dialog_yes)) }\r\n      },\r\n      dismissButton = {", "choices": [{"text": "\r\n        TextButton(onClick = onDismiss) { Text(text = stringResource(R.string.dialog_no)) }\r\n      },\r\n    ).show();\r\n  } else {\r\n    AlertDialog(\r\n      onDismissRequest = onDismiss,\r\n      title = {\r\n        Text(text = stringResource(R.string.pgp_key_manager_delete_confirmation_dialog_title))\r\n      },\r\n      confirmButton = {\r\n        TextButton(onClick = onConfirm) { Text(text ="}], "metadata": {"task_id": "Android-Password-Store/111", "ground_truth": "        TextButton(onClick = onDismiss) { Text(text = stringResource(R.string.dialog_no)) }\r\n      },\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyList.kt"}}
{"prompt": "import kotlinx.collections.immutable.toPersistentList\nimport app.passwordstore.ui.compose.theme.APSThemePreview\nimport app.passwordstore.crypto.PGPIdentifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.background\n\r\n@Preview\r\n@Composable\r\nprivate fun KeyListPreview() {\r\n  APSThemePreview {\r\n    Box(modifier = Modifier.background(MaterialTheme.colorScheme.background)) {\r\n      KeyList(\r\n        identifiers =\r\n          listOfNotNull(\r\n              PGPIdentifier.fromString(\"ultramicroscopicsilicovolcanoconiosis@example.com\"),\r\n              PGPIdentifier.fromString(\"0xB950AE2813841585\"),\r\n            )\r\n            .toPersistentList(),", "choices": [{"text": "\r\n      ),\r\n    }\r\n  }\r\n}\r\n\r\nprivate fun KeyList(\r\n  identifiers: kotlinx.collections.immutable.toPersistentList<PGPIdentifier>,\r\n): KeyList {\r\n  return KeyList(\r\n    identifiers,\r\n  );\r\n}\r\n\r\nprivate fun KeyList(\r\n  identifiers: kotlinx.collections.immutable.toPersistentList<PGPIdentifier>,\r\n): KeyList {\r\n  return KeyList(\r\n    identifiers,\r\n  );\r"}], "metadata": {"task_id": "Android-Password-Store/112", "ground_truth": "        onItemClick = {}\r\n      )\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyList.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Android-Password-Store/115", "ground_truth": "      }\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\proxy\\ProxySelectorActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home ->\r\n        if (!preferencesAdapter.goBack()) {\r\n          super.onOptionsItemSelected(item)\r\n        } else {", "choices": [{"text": ":\r\n          return super.onOptionsItemSelected(item)\r\n    }\r\n}\r\noverride fun onCreateOptionsMenu(menu: Menu): Menu {\r\n    return when (menu.itemId) {\r\n      android.R.id.home ->\r\n        if (!preferencesAdapter.goBack()) {\r\n          super.onCreateOptionsMenu(menu)\r\n        } else {\r\n          return super.onCreateOptionsMenu(menu)\r\n        }\r\n    }\r\n}\r\noverride fun onPrepareOptionsMenu(menu: Menu): Menu {"}], "metadata": {"task_id": "Android-Password-Store/119", "ground_truth": "          true\r\n        }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\settings\\SettingsActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "\r\n      }\r\n    }\r\n  }\r\n  onBackPressedDispatcher.onBackPressed = () => {\r\n    onBackPressedDispatcher.onBackPressed = () => {\r\n      onBackPressedDispatcher.onBackPressed = () => {\r\n        onBackPressedDispatcher.onBackPressed = () => {\r\n          onBackPressedDispatcher.onBackPressed = () => {\r\n            onBackPressedDispatcher.onBackPressed = () => {\r\n              onBackPressedDispatcher.onBackPressed = () => {\r\n                onBackPressedDispatcher.onBackPressed"}], "metadata": {"task_id": "Android-Password-Store/120", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\sshkeygen\\SshKeyGenActivity.kt"}}
{"prompt": "import androidx.core.content.getSystemService\nimport android.view.inputmethod.InputMethodManager\nprivate fun hideKeyboard() {\r\n    val imm = getSystemService<InputMethodManager>() ?: return\r\n    var view = currentFocus", "choices": [{"text": "\r\n    if (imm!= null) {\r\n        imm.hideSoftInputFromWindow(view.getWindowToken(), 0)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Android-Password-Store/121", "ground_truth": "    if (view == null) {\r\n      view = View(this)\r\n    }\r\n    imm.hideSoftInputFromWindow(view.windowToken, 0)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\sshkeygen\\SshKeyGenActivity.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\noverride fun animateChange(\r\n    oldHolder: RecyclerView.ViewHolder,\r\n    newHolder: RecyclerView.ViewHolder,\r\n    preInfo: ItemHolderInfo,\r\n    postInfo: ItemHolderInfo\r\n  ): Boolean {\r\n    return if (isEnabled) {", "choices": [{"text": "(\r\n    oldHolder: RecyclerView.ViewHolder,\r\n    newHolder: RecyclerView.ViewHolder,\r\n    preInfo: ItemHolderInfo,\r\n    postInfo: ItemHolderInfo\r\n  ): Boolean {\r\n    return if (isEnabled) {\r\n      return if (\r\n        oldHolder.getAdapterPosition() == newHolder.getAdapterPosition()\r\n      ) {\r\n        return if (\r\n          oldHolder.getAdapterPosition() == preInfo.position\r\n        ) {\r\n          return if (\r\n            oldHolder."}], "metadata": {"task_id": "Android-Password-Store/124", "ground_truth": "      super.animateChange(oldHolder, newHolder, preInfo, postInfo)\r\n    } else {\r\n      dontAnimate(oldHolder)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\util\\OnOffItemAnimator.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\noverride fun animatePersistence(\r\n    viewHolder: RecyclerView.ViewHolder,\r\n    preInfo: ItemHolderInfo,\r\n    postInfo: ItemHolderInfo\r\n  ): Boolean {\r\n    return if (isEnabled) {", "choices": [{"text": ": Boolean => {\r\n  if (isEnabled) {\r\n    viewHolder.animatePersistence(preInfo, postInfo);\r\n  } else {\r\n    viewHolder.animatePersistence(postInfo, preInfo);\r\n  }\r\n  return true;\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/126", "ground_truth": "      super.animatePersistence(viewHolder, preInfo, postInfo)\r\n    } else {\r\n      dontAnimate(viewHolder)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\util\\OnOffItemAnimator.kt"}}
{"prompt": "import com.github.androidpasswordstore.autofillparser.AutofillAction\nimport android.service.autofill.Dataset\nimport android.os.Build\nimport android.content.IntentSender\nimport android.content.Context\n @Suppress(\"DEPRECATION\")\r\n  private fun makeIntentDataset(\r\n    context: Context,\r\n    action: AutofillAction,\r\n    intentSender: IntentSender,\r\n    metadata: DatasetMetadata,\r\n  ): Dataset {\r\n    return Dataset.Builder(makeRemoteView(context, metadata)).run {", "choices": [{"text": " {\r\n      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n        intentSender.send(action);\r\n      } else {\r\n        action.send(intentSender);\r\n      }\r\n    };\r\n  }\r\n\r\n  private fun makeRemoteView(\r\n    context: Context,\r\n    metadata: DatasetMetadata,\r\n  ): DatasetRemoteView {\r\n    return DatasetRemoteView.Builder(makeRemoteView(context, metadata)).build();\r\n  }\r\n"}], "metadata": {"task_id": "Android-Password-Store/128", "ground_truth": "      fillWith(scenario, action, credentials = null)\r\n      setAuthentication(intentSender)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api26AutofillResponseBuilder.kt"}}
{"prompt": "import android.service.autofill.SaveInfo\nprivate fun makeSaveInfo(): SaveInfo? {\r\n    if (!canBeSaved) return null\r\n    check(saveFlags != null) { \"saveFlags must not be null\" }\r\n    val idsToSave = scenario.fieldsToSave.toTypedArray()\r\n    if (idsToSave.isEmpty()) return null\r\n    var saveDataTypes = SaveInfo.SAVE_DATA_TYPE_PASSWORD\r\n    if (scenario.hasUsername) {\r\n      saveDataTypes = saveDataTypes or SaveInfo.SAVE_DATA_TYPE_USERNAME\r\n    }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/134", "ground_truth": "    return SaveInfo.Builder(saveDataTypes, idsToSave).run {\r\n      setFlags(saveFlags)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api26AutofillResponseBuilder.kt"}}
{"prompt": "import com.github.androidpasswordstore.autofillparser.fillWith\nimport com.github.androidpasswordstore.autofillparser.AutofillAction\nimport android.widget.inline.InlinePresentationSpec\nimport android.service.autofill.Dataset\nimport android.os.Build\nimport android.content.IntentSender\nimport android.content.Context\n @Suppress(\"DEPRECATION\")\r\n  private fun makeIntentDataSetR(\r\n    context: Context,\r\n    action: AutofillAction,\r\n    intentSender: IntentSender,\r\n    metadata: DatasetMetadata,\r\n    imeSpec: InlinePresentationSpec?,\r\n  ): Dataset {\r\n    return Dataset.Builder(makeRemoteView(context, metadata)).run {\r\n      fillWith(scenario, action, credentials = null)\r\n      setAuthentication(intentSender)\r\n      if (imeSpec != null) {\r\n        val inlinePresentation = makeInlinePresentation(context, imeSpec, metadata)\r\n        if (inlinePresentation != null) {\r\n          setInlinePresentation(inlinePresentation)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/137", "ground_truth": "        }\r\n      }\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "import com.github.androidpasswordstore.autofillparser.AutofillAction\nimport app.passwordstore.autofill.oreo.ui.AutofillSmsActivity\nimport android.widget.inline.InlinePresentationSpec\nimport android.service.autofill.Dataset\nimport android.content.IntentSender\nimport android.content.Context\nprivate fun makeFillOtpFromSmsDataset(\r\n    context: Context,\r\n    imeSpec: InlinePresentationSpec?\r\n  ): Dataset? {\r\n    if (!scenario.hasFieldsToFillOn(AutofillAction.FillOtpFromSms)) return null\r\n    if (!AutofillSmsActivity.shouldOfferFillFromSms(context)) return null\r\n    val metadata = makeFillOtpFromSmsMetadata(context)\r\n    val intentSender = AutofillSmsActivity.makeFillOtpFromSmsIntentSender(context)\r\n    return makeIntentDataset(\r\n      context,\r\n      AutofillAction.FillOtpFromSms,", "choices": [{"text": "\r\n      metadata,\r\n      intentSender,\r\n      imeSpec\r\n    )\r\n  }\r\nprivate fun makeFillOtpFromSmsMetadata(\r\n    context: Context\r\n  ): Dataset? {\r\n    return makeIntentDataset(\r\n      context,\r\n      AutofillAction.FillOtpFromSms,\r\n      null,\r\n      null,\r\n      null\r\n    )\r\n  }\r\nprivate fun makeFillOtpFromSmsIntentSender(\r\n    context: Context\r\n  ): IntentSender {\r"}], "metadata": {"task_id": "Android-Password-Store/141", "ground_truth": "      intentSender,\r\n      metadata,\r\n      imeSpec\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "import android.service.autofill.SaveInfo\nprivate fun makeSaveInfo(): SaveInfo? {\r\n    if (!canBeSaved) return null\r\n    check(saveFlags != null) { \"saveFlags must not be null\" }\r\n    val idsToSave = scenario.fieldsToSave.toTypedArray()\r\n    if (idsToSave.isEmpty()) return null\r\n    var saveDataTypes = SaveInfo.SAVE_DATA_TYPE_PASSWORD\r\n    if (scenario.hasUsername) {\r\n      saveDataTypes = saveDataTypes or SaveInfo.SAVE_DATA_TYPE_USERNAME\r\n    }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/143", "ground_truth": "    return SaveInfo.Builder(saveDataTypes, idsToSave).run {\r\n      setFlags(saveFlags)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "import com.github.androidpasswordstore.autofillparser.FormOrigin\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate fun Context.matchPreferences(formOrigin: FormOrigin): SharedPreferences {", "choices": [{"text": ".FormOrigin;\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ListView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class"}], "metadata": {"task_id": "Android-Password-Store/145", "ground_truth": "  return when (formOrigin) {\r\n    is FormOrigin.App -> autofillAppMatches\r\n    is FormOrigin.Web -> autofillWebMatches\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillMatcher.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.content.res.Resources\nimport android.content.Context\nfun makeRemoteView(context: Context, metadata: DatasetMetadata): RemoteViews {\r\n  return RemoteViews(context.packageName, R.layout.oreo_autofill_dataset).apply {\r\n    setTextViewText(R.id.title, metadata.title)\r\n    if (metadata.subtitle != null) {\r\n      setTextViewText(R.id.summary, metadata.subtitle)\r\n    } else {\r\n      setViewVisibility(R.id.summary, View.GONE)\r\n    }\r\n    if (metadata.iconRes != Resources.ID_NULL) {\r\n      setImageViewResource(R.id.icon, metadata.iconRes)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/150", "ground_truth": "    } else {\r\n      setViewVisibility(R.id.icon, View.GONE)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillViewUtils.kt"}}
{"prompt": "import androidx.compose.ui.Modifier\nfun Modifier.conditional(isEnabled: Boolean, modifier: Modifier.() -> Modifier): Modifier {\r\n  return if (isEnabled) {", "choices": [{"text": " if (modifier) {\r\n    return modifier;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/161", "ground_truth": "    then(modifier())\r\n  } else {\r\n    this\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\AndroidExtensions.kt"}}
{"prompt": "import app.passwordstore.R\nimport androidx.fragment.app.commit\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.IdRes\nfun FragmentManager.performTransactionWithBackStack(\r\n  destinationFragment: Fragment,\r\n  @IdRes containerViewId: Int = android.R.id.content\r\n) {\r\n  commit {\r\n    addToBackStack(destinationFragment.tag)\r\n    setCustomAnimations(\r\n      R.animator.slide_in_left,\r\n      R.animator.slide_out_left,\r\n      R.animator.slide_in_right,", "choices": [{"text": "\r\n      R.animator.slide_out_right,\r\n      R.animator.slide_in_up,\r\n      R.animator.slide_out_up,\r\n      R.animator.slide_in_down,\r\n      R.animator.slide_out_down,\r\n      R.animator.slide_in_top,\r\n      R.animator.slide_out_top,\r\n      R.animator.slide_in_bottom,\r\n      R.animator.slide_out_bottom,\r\n"}], "metadata": {"task_id": "Android-Password-Store/163", "ground_truth": "      R.animator.slide_out_right\r\n    )\r\n    replace(containerViewId, destinationFragment)\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\FragmentExtensions.kt"}}
{"prompt": "import kotlin.reflect.KProperty\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport androidx.fragment.app.Fragment\noverride fun getValue(thisRef: Fragment, property: KProperty<*>): T {\r\n    val binding = binding\r\n    if (binding != null) {\r\n      return binding\r\n    }\r\n\r\n    val lifecycle = fragment.viewLifecycleOwner.lifecycle\r\n    if (!lifecycle.currentState.isAtLeast(Lifecycle.State.INITIALIZED)) {\r\n      throw IllegalStateException(\r\n        \"Should not attempt to get bindings when Fragment views are destroyed.\"", "choices": [{"text": ",\r\n      )\r\n    }\r\n\r\n    val lifecycleOwner = fragment.viewLifecycleOwner\r\n    if (lifecycleOwner == null) {\r\n      throw IllegalStateException(\r\n        \"Should not attempt to get bindings when Fragment views are destroyed.\",\r\n      )\r\n    }\r\n\r\n    val binding = lifecycleOwner.getBinding(property)\r\n    if (binding == null) {\r\n      throw IllegalStateException(\r\n        \"Should not attempt to get bindings when Fragment views are destroyed.\",\r\n      )\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "Android-Password-Store/164", "ground_truth": "      )\r\n    }\r\n\r\n    return viewBindingFactory(thisRef.requireView()).also { this.binding = it }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\FragmentViewBindingDelegate.kt"}}
{"prompt": "private fun rootCause(throwable: Throwable): Throwable {\r\n    var cause = throwable\r\n    while (cause.cause != null) {\r\n      if (cause is GitException) break\r\n      val nextCause = cause.cause!!", "choices": [{"text": "\r\n      cause = nextCause\r\n    }\r\n    return cause\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/166", "ground_truth": "      if (nextCause is RemoteException) break\r\n      cause = nextCause\r\n    }\r\n    return cause\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\ErrorMessages.kt"}}
{"prompt": "import org.eclipse.jgit.revwalk.RevCommit\nimport org.eclipse.jgit.api.Git\nimport logcat.logcat\nimport logcat.LogPriority.ERROR\nimport com.github.michaelbull.result.runCatching\nimport app.passwordstore.data.repo.PasswordRepository\nprivate fun commits(): Iterable<RevCommit> {\r\n  val repo = PasswordRepository.repository\r\n  if (repo == null) {\r\n    logcat(TAG, ERROR) { \"Could not access git repository\" }\r\n    return listOf()\r\n  }\r\n  return runCatching { Git(repo).log().call() }", "choices": [{"text": "\n}\r\n\r\npublic class PasswordStore {\r\n\r\n  private static final String TAG = PasswordStore.class.getSimpleName();\r\n\r\n  public static void main(final String[] args) {\r\n    commits().forEach(System.out::println);\r\n  }\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/167", "ground_truth": "    .getOrElse { e ->\r\n      logcat(TAG, ERROR) { e.asLog(\"Failed to obtain git commits\") }\r\n      listOf()\r\n    }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\GitLogModel.kt"}}
{"prompt": "import org.eclipse.jgit.transport.URIish\nimport org.eclipse.jgit.transport.CredentialItem\nimport app.passwordstore.R\noverride fun get(uri: URIish?, vararg items: CredentialItem): Boolean {\r\n      for (item in items) {\r\n        when (item) {\r\n          is CredentialItem.Username -> item.value = uri?.user\r\n          is CredentialItem.Password -> {\r\n            item.value =\r\n              cachedPassword?.clone()\r\n                ?: passwordFinder.reqPassword(null).also { cachedPassword = it.clone() }\r\n          }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/169", "ground_truth": "          else -> UnsupportedCredentialItem(uri, item.javaClass.name)\r\n        }\r\n      }\r\n      return true\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\operation\\GitOperation.kt"}}
{"prompt": "import org.eclipse.jgit.api.GitCommand\nimport org.eclipse.jgit.api.Git\nimport com.github.michaelbull.result.Result\nimport com.github.michaelbull.result.Ok\nimport app.passwordstore.util.git.GitCommandExecutor\nimport app.passwordstore.R\nsuspend fun execute(): Result<Unit, Throwable> {\r\n    if (!preExecute()) {\r\n      return Ok(Unit)\r\n    }\r\n    val operationResult =\r\n      GitCommandExecutor(\r\n          callingActivity,\r\n          this,", "choices": [{"text": " new GitCommandExecutor.GitCommandExecutorCallback() {\r\n            @Override\r\n            public void onGitCommandExecuted(GitCommand gitCommand) {\r\n              onGitCommandExecuted(gitCommand)\r\n            }\r\n\r\n            @Override\r\n            public void onGitCommandFailed(GitCommand gitCommand, Throwable throwable) {\r\n              onGitCommandFailed(gitCommand, throwable)\r\n            }\r\n          }\r\n      ).execute()\r\n    return Ok(operationResult)\r\n  }\r\n\r\n  private boolean preExecute() {\r\n   "}], "metadata": {"task_id": "Android-Password-Store/173", "ground_truth": "        )\r\n        .execute()\r\n    postExecute()\r\n    return operationResult\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\operation\\GitOperation.kt"}}
{"prompt": "import com.hierynomus.sshj.key.KeyAlgorithms\nprivate fun initKeyAlgorithms() {\r\n    keyAlgorithms =\r\n      listOf(\r\n        KeyAlgorithms.SSHRSACertV01(),\r\n        KeyAlgorithms.EdDSA25519(),\r\n        KeyAlgorithms.ECDSASHANistp521(),\r\n        KeyAlgorithms.ECDSASHANistp384(),\r\n        KeyAlgorithms.ECDSASHANistp256(),", "choices": [{"text": "\r\n        KeyAlgorithms.ECDSASHANistp224(),\r\n        KeyAlgorithms.ECDSASHANistp256(),\r\n        KeyAlgorithms.ECDSASHANistp384(),\r\n        KeyAlgorithms.ECDSASHANistp521(),\r\n        KeyAlgorithms.ECDSASHANistp384(),\r\n        KeyAlgorithms.ECDSASHANistp521(),\r\n        KeyAlgorithms.ECDSASHANistp384(),\r\n        KeyAlgorithms.ECDSASHANistp521(),\r\n        KeyAlgorithms.ECDSASHANistp384"}], "metadata": {"task_id": "Android-Password-Store/175", "ground_truth": "        KeyAlgorithms.RSASHA512(),\r\n        KeyAlgorithms.RSASHA256(),\r\n        KeyAlgorithms.SSHRSA(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "import com.hierynomus.sshj.userauth.keyprovider.OpenSSHKeyV1KeyFile\nprivate fun initFileKeyProviderFactories() {\r\n    fileKeyProviderFactories =\r\n      listOf(\r\n        OpenSSHKeyV1KeyFile.Factory(),", "choices": [{"text": "\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1"}], "metadata": {"task_id": "Android-Password-Store/176", "ground_truth": "        PKCS8KeyFile.Factory(),\r\n        OpenSSHKeyFile.Factory(),\r\n        PuTTYKeyFile.Factory(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "import com.hierynomus.sshj.transport.cipher.GcmCiphers\nprivate fun initCipherFactories() {\r\n    cipherFactories =\r\n      listOf(\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),", "choices": [{"text": "\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128G"}], "metadata": {"task_id": "Android-Password-Store/177", "ground_truth": "        BlockCiphers.AES256CTR(),\r\n        BlockCiphers.AES192CTR(),\r\n        BlockCiphers.AES128CTR(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "import com.hierynomus.sshj.transport.mac.Macs\nprivate fun initMACFactories() {\r\n    macFactories =\r\n      listOf(\r\n        Macs.HMACSHA2512Etm(),", "choices": [{"text": "\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA384Etm(),\r\n        Macs.HMACSHA512Etm(),\r\n        Macs.HMACSHA1Etm(),\r\n        Macs.HMACSHA224Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA384Etm(),\r\n        Macs.HMACSHA512Etm(),\r\n        Macs.HMACSHA1Etm(),\r\n        Macs.HMACSHA224Etm(),\r\n        Macs.HMACSHA"}], "metadata": {"task_id": "Android-Password-Store/178", "ground_truth": "        Macs.HMACSHA2256Etm(),\r\n        Macs.HMACSHA2512(),\r\n        Macs.HMACSHA2256(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "private fun initCompressionFactories() {", "choices": [{"text": " {\n    return {\n        initCompressionFactories: initCompressionFactories,\n    };\n}\n\nexport default {\n    initCompressionFactories: initCompressionFactories,\n};\n"}], "metadata": {"task_id": "Android-Password-Store/179", "ground_truth": "    compressionFactories =\r\n      listOf(\r\n        NoneCompression.Factory(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "import kotlinx.coroutines.isActive\nprivate suspend fun startTimer(showTime: Int) {\r\n    var current = 0\r\n    while (scope.isActive && current < showTime) {", "choices": [{"text": "\r\n        current += 1\r\n    }\r\n    return current\r\n}\r\nsuspend fun stopTimer(showTime: Int) {\r\n    var current = 0\r\n    while (scope.isActive && current < showTime) {\r\n        current += 1\r\n    }\r\n    return current\r\n}\r\nsuspend fun pauseTimer(showTime: Int) {\r\n    var current = 0\r\n    while (scope.isActive && current < showTime) {\r\n        current += 1\r\n    }\r\n    return current\r\n}"}], "metadata": {"task_id": "Android-Password-Store/198", "ground_truth": "      // Block for 1s or until cancel is signalled\r\n      current++\r\n      delay(1000)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\ClipboardService.kt"}}
{"prompt": "import androidx.documentfile.provider.DocumentFile\nprivate fun copyDirToDir(sourceDirectory: DocumentFile, targetDirectory: DocumentFile) {\r\n    sourceDirectory.listFiles().forEach { file ->\r\n      if (file.isDirectory) {\r\n        // Create new directory and recurse\r\n        val newDir = targetDirectory.createDirectory(file.name!!)\r\n        copyDirToDir(file, newDir!!)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/203", "ground_truth": "      } else {\r\n        copyFileToDir(file, targetDirectory)\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\PasswordExportService.kt"}}
{"prompt": "import app.passwordstore.R\nimport androidx.core.app.NotificationCompat\nimport android.app.NotificationChannel\nprivate fun createNotification() {\r\n    createNotificationChannel()\r\n\r\n    val notification =\r\n      NotificationCompat.Builder(this, CHANNEL_ID)\r\n        .setContentTitle(getString(R.string.app_name))\r\n        .setContentText(getString(R.string.exporting_passwords))\r\n        .setSmallIcon(R.drawable.ic_round_import_export)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/204", "ground_truth": "        .setPriority(NotificationCompat.PRIORITY_LOW)\r\n        .build()\r\n\r\n    startForeground(2, notification)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\PasswordExportService.kt"}}
{"prompt": "import com.github.michaelbull.result.get\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun migrateToClipboardHistory(sharedPrefs: SharedPreferences) {\r\n  if (sharedPrefs.contains(PreferenceKeys.CLEAR_CLIPBOARD_20X)) {\r\n    sharedPrefs.edit {\r\n      putBoolean(\r\n        PreferenceKeys.CLEAR_CLIPBOARD_HISTORY,\r\n        sharedPrefs.getBoolean(PreferenceKeys.CLEAR_CLIPBOARD_20X, false)", "choices": [{"text": " )\r\n    }.apply();\r\n  }\r\n}\r\npublic class PreferenceKeys {\r\n  public static final String CLEAR_CLIPBOARD_HISTORY = \"CLEAR_CLIPBOARD_HISTORY\";\r\n  public static final String CLEAR_CLIPBOARD_20X = \"CLEAR_CLIPBOARD_20X\";\r\n  public static final String CLEAR_CLIPBOARD_20Y = \"CLEAR_CLIPBOARD_20Y\";\r\n  public static final String CLEAR_CLIPBOARD"}], "metadata": {"task_id": "Android-Password-Store/209", "ground_truth": "      )\r\n      remove(PreferenceKeys.CLEAR_CLIPBOARD_20X)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "import com.github.michaelbull.result.get\nimport app.passwordstore.util.extensions.getString\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun migrateToDiceware(sharedPrefs: SharedPreferences) {\r\n  if (sharedPrefs.contains(PreferenceKeys.PREF_KEY_PWGEN_TYPE)) {\r\n    sharedPrefs.edit {\r\n      if (sharedPrefs.getString(PreferenceKeys.PREF_KEY_PWGEN_TYPE) == \"xkpasswd\") {", "choices": [{"text": "\r\n        sharedPrefs.edit {\r\n          sharedPrefs.edit {\r\n            sharedPrefs.edit {\r\n              sharedPrefs.edit {\r\n                sharedPrefs.edit {\r\n                  sharedPrefs.edit {\r\n                    sharedPrefs.edit {\r\n                      sharedPrefs.edit {\r\n                        sharedPrefs.edit {\r\n                          sharedPrefs.edit {\r\n                            sharedPrefs.edit {\r\n                              sharedPrefs.edit {\r\n                                sharedPrefs.edit {\r\n                                  sharedPrefs.edit {\r\n"}], "metadata": {"task_id": "Android-Password-Store/210", "ground_truth": "        putString(PreferenceKeys.PREF_KEY_PWGEN_TYPE, \"diceware\")\r\n      }\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "import com.github.michaelbull.result.get\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun removeExternalStorageProperties(prefs: SharedPreferences) {\r\n  prefs.edit {\r\n    if (prefs.contains(PreferenceKeys.GIT_EXTERNAL)) {\r\n      if (prefs.getBoolean(PreferenceKeys.GIT_EXTERNAL, false)) {\r\n        putBoolean(PreferenceKeys.GIT_EXTERNAL_MIGRATED, true)\r\n      }\r\n      remove(PreferenceKeys.GIT_EXTERNAL)\r\n    }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Android-Password-Store/211", "ground_truth": "    if (prefs.contains(PreferenceKeys.GIT_EXTERNAL_REPO)) {\r\n      remove(PreferenceKeys.GIT_EXTERNAL_REPO)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "import app.passwordstore.crypto.PGPIdentifier\nvar keys ImmutableList<PGPIdentifier>\nfun deleteKey(identifier: PGPIdentifier) {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Android-Password-Store/216", "ground_truth": "    viewModelScope.launch {\r\n      keyManager.removeKey(identifier)\r\n      updateKeySet()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\PGPKeyListViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.flow.filter\nimport java.io.File\nprivate fun makeSearchAction(\r\n    baseDirectory: File,\r\n    filter: String,\r\n    filterMode: FilterMode,\r\n    searchMode: SearchMode,\r\n    listMode: ListMode\r\n  ): SearchAction {\r\n    return SearchAction(\r\n      baseDirectory = baseDirectory,\r\n      filter = filter,\r\n      filterMode = filterMode,", "choices": [{"text": "\r\n      searchMode = searchMode,\r\n      listMode = listMode\r\n    );\r\n  }\r\npublic class SearchAction {\r\n  private final File baseDirectory;\r\n  private final String filter;\r\n  private final FilterMode filterMode;\r\n  private final SearchMode searchMode;\r\n  private final ListMode listMode;\r\n  public SearchAction(\r\n    File baseDirectory: File,\r\n    String filter: String,\r\n    FilterMode filterMode: FilterMode,\r\n    SearchMode searchMode: SearchMode,\r\n   "}], "metadata": {"task_id": "Android-Password-Store/218", "ground_truth": "      searchMode = searchMode,\r\n      listMode = listMode,\r\n      updateCounter = updateCounter\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "import java.io.File\nprivate fun shouldTake(file: File) =\r\n    with(file) {\r\n      if (showHiddenContents) {\r\n        return !file.name.startsWith(\".git\")\r\n      }\r\n      if (isDirectory) {", "choices": [{"text": "(file.isDirectory()) {\r\n        return shouldTake(file.getParentFile());\r\n      }\r\n      return true;\r\n    };\r\n"}], "metadata": {"task_id": "Android-Password-Store/219", "ground_truth": "        !isHidden\r\n      } else {\r\n        !isHidden && file.extension == \"gpg\"\r\n      }\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.drop\nimport kotlinx.coroutines.flow.asFlow\nimport kotlinx.coroutines.flow.Flow\nimport java.io.File\nprivate fun listFilesRecursively(dir: File): Flow<File> {\r\n    return dir\r\n      // Take top directory even if it is hidden.\r\n      .walkTopDown()\r\n      .onEnter { file -> file == dir || shouldTake(file) }\r\n      .asFlow()\r\n      // Skip the root directory\r\n      .drop(1)\r\n      .map {", "choices": [{"text": "\r\n        return file -> {\r\n          if (file.isDirectory()) {\r\n            return listFilesRecursively(file);\r\n          } else {\r\n            return file;\r\n          }\r\n        };\r\n      };\r\n  }\r\n  private boolean shouldTake(File file) {\r\n    return file.isHidden() || file.isDirectory();\r\n  }\r\n  public static void main(String[] args) {\r\n    File dir = new File(\".\");\r\n    System.out.println(listFilesRecursively(dir));\r"}], "metadata": {"task_id": "Android-Password-Store/220", "ground_truth": "        yield()\r\n        it\r\n      }\r\n      .filter(::shouldTake)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.Flow\nimport java.io.File\nimport com.github.androidpasswordstore.sublimefuzzy.Fuzzy\nfun search(\r\n    filter: String,\r\n    baseDirectory: File? = null,\r\n    filterMode: FilterMode = FilterMode.Fuzzy,\r\n    searchMode: SearchMode? = null,\r\n    listMode: ListMode = ListMode.AllEntries\r\n  ) {\r\n    require(baseDirectory?.isDirectory != false) { \"Can only search in a directory\" }\r\n    searchActionFlow.update {\r\n      makeSearchAction(\r\n        filter = filter,\r\n        baseDirectory = baseDirectory ?: _currentDir.value,\r\n        filterMode = filterMode,", "choices": [{"text": "\r\n        searchMode = searchMode,\r\n        listMode = listMode\r\n      )\r\n    }\r\n  }\r\n\r\nfun search(\r\n    filter: String,\r\n    baseDirectory: File? = null,\r\n    filterMode: FilterMode = FilterMode.Fuzzy,\r\n    searchMode: SearchMode? = null,\r\n    listMode: ListMode = ListMode.AllEntries\r\n  ) {\r\n    require(baseDirectory?.isDirectory!= false) { \"Can only search in a directory\" }\r\n    search"}], "metadata": {"task_id": "Android-Password-Store/223", "ground_truth": "        searchMode = searchMode ?: defaultSearchMode,\r\n        listMode = listMode\r\n      )\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "import androidx.annotation.RequiresPermission\nimport android.provider.ContactsContract\nimport android.content.Context\nimport android.Manifest\n\r\n@RequiresPermission(Manifest.permission.READ_CONTACTS)\r\nfun findContactByLookupKey(context: Context, lookupKey: String): ContactInfo? {\r\n    val uri = ContactsContract.Contacts.CONTENT_LOOKUP_URI.buildUpon()", "choices": [{"text": "\n    return context.getContentResolver().query(uri, null, null, null, null)\r\n       .findFirst()\r\n       .map(ContactInfo::new)\r\n       .orElse(null)\r\n}\r\n\r\n@RequiresPermission(Manifest.permission.READ_CONTACTS)\r\nclass ContactInfo {\r\n    private final String mFirstName;\r\n    private final String mLastName;\r\n    private final String mEmail;\r\n\r\n    ContactInfo(String firstName, String lastName, String email) {\r\n        mFirstName"}], "metadata": {"task_id": "BCR/0", "ground_truth": "        .appendPath(lookupKey)\r\n        .build()\r\n\r\n    return findContactsByUri(context, uri).asSequence().firstOrNull()\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\Contact.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nimport android.provider.DocumentsContract\nfun DocumentFile.listFilesWithNames(): List<Pair<DocumentFile, String>> {\r\n    if (!isTree) {\r\n        return listFiles().map { Pair(it, it.name!!) }\r\n    }\r\n\r\n    try {\r\n        return iterChildrenWithColumns(arrayOf(DocumentsContract.Document.COLUMN_DISPLAY_NAME))\r\n            .asSequence()\r\n            .map { Pair(it.first, it.second.getString(1)) }\r\n            .toList()\r\n    } catch (e: Exception) {", "choices": [{"text": "\r\n        return emptyList();\r\n    }\r\n}\r\n\r\nfun DocumentFile.listFiles(): List<Pair<DocumentFile, String>> {\r\n    if (!isTree) {\r\n        return listFiles().map { Pair(it, it.name!!) }\r\n    }\r\n\r\n    try {\r\n        return iterChildrenWithColumns(arrayOf(DocumentsContract.Document.COLUMN_DISPLAY_NAME))\r\n           .asSequence()\r\n           .map { Pair(it.first, it.second.getString(1)) }\r\n           ."}], "metadata": {"task_id": "BCR/11", "ground_truth": "        Log.w(TAG, \"Failed to query tree URI\", e)\r\n    }\r\n\r\n    return listOf()\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.listFilesWithPathsRecursively(): List<Pair<DocumentFile, List<String>>> {\r\n    val result = mutableListOf<Pair<DocumentFile, List<String>>>()\r\n\r\n    fun recurse(dir: DocumentFile, path: List<String>) {\r\n        for ((file, name) in dir.listFilesWithNames()) {\r\n            val subPath = path + name\r\n\r\n            result.add(Pair(file, subPath))\r\n\r\n            if (file.isDirectory) {\r\n                recurse(file, subPath)\r\n            }\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "BCR/12", "ground_truth": "    }\r\n\r\n    recurse(this, emptyList())\r\n    return result\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nimport android.provider.DocumentsContract\nfun DocumentFile.findFileFast(displayName: String): DocumentFile? {\r\n    if (!isTree) {\r\n        return findFile(displayName)\r\n    }\r\n\r\n    try {\r\n        return iterChildrenWithColumns(arrayOf(DocumentsContract.Document.COLUMN_DISPLAY_NAME))\r\n            .asSequence()\r\n            .find { it.second.getString(1) == displayName }\r\n            ?.first\r\n    } catch (e: Exception) {", "choices": [{"text": "\r\n        return null\r\n    }\r\n}\r\n\r\nfun DocumentFile.findFile(displayName: String): DocumentFile? {\r\n    try {\r\n        return iterChildrenWithColumns(arrayOf(DocumentsContract.Document.COLUMN_DISPLAY_NAME))\r\n           .asSequence()\r\n           .find { it.second.getString(1) == displayName }\r\n           ?.first\r\n    } catch (e: Exception) {\r\n        return null\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "BCR/13", "ground_truth": "        Log.w(TAG, \"Failed to query tree URI\", e)\r\n    }\r\n\r\n    return null\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.findNestedFile(path: List<String>): DocumentFile? {\r\n    var file = this", "choices": [{"text": ";\r\n    for (var i = 0; i < path.size(); i++) {\r\n        file = file.findNestedFile(path.get(i));\r\n        if (file!= null) {\r\n            return file;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"}], "metadata": {"task_id": "BCR/14", "ground_truth": "    for (segment in path) {\r\n        file = file.findFileFast(segment) ?: return null\r\n    }\r\n    return file\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.findOrCreateDirectories(path: List<String>): DocumentFile? {\r\n    var file = this\r\n    for (segment in path) {\r\n        file = file.findFileFast(segment)", "choices": [{"text": ".findOrCreateDirectories(path)\r\n    }\r\n    return file\r\n}\r\nfun DocumentFile.findOrCreateDirectories(path: List<String>): DocumentFile? {\r\n    var file = this\r\n    for (segment in path) {\r\n        file = file.findOrCreateDirectory(segment)\r\n    }\r\n    return file\r\n}\r\nfun DocumentFile.findOrCreateDirectory(path: List<String>): DocumentFile? {\r\n    var file = this\r\n    for (segment in path) {\r\n        file = file.find"}], "metadata": {"task_id": "BCR/15", "ground_truth": "            ?: file.createDirectory(segment)\r\n            ?: return null\r\n    }\r\n    return file\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.renameToPreserveExt(displayName: String): Boolean {\r\n    val newName = buildString {\r\n        append(displayName)\r\n\r\n        // This intentionally just does simple string operations because MimeTypeMap's\r\n        // getExtensionFromMimeType() and getMimeTypeFromExtension() are not consistent with\r\n        // each other. Eg. audio/mp4 -> m4a -> audio/mpeg -> mp3.\r\n\r\n        val ext = name!!.substringAfterLast('.', \"\")\r\n        if (ext.isNotEmpty()) {\r\n            append('.')\r\n            append(ext)", "choices": [{"text": ".toLowerCase()\r\n        }\r\n\r\n        append('/')\r\n        append(name)\r\n    }\r\n\r\n    return new File(newName).renameTo(new File(displayName))\r\n}\r\n"}], "metadata": {"task_id": "BCR/17", "ground_truth": "        }\r\n    }\r\n\r\n    return renameTo(newName)\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nprivate fun DocumentFile.isEmpty(): Boolean {\r\n    require(isDirectory) { \"Not a directory\" }\r\n\r\n    return if (isTree) {", "choices": [{"text": " {\r\n        require(isDirectory) { \"Not a directory\" }\r\n        require(isFile) { \"Not a file\" }\r\n        require(isDirectory) { \"Not a directory\" }\r\n        require(isFile) { \"Not a file\" }\r\n        require(isDirectory) { \"Not a directory\" }\r\n        require(isFile) { \"Not a file\" }\r\n        require(isDirectory) { \"Not a directory\" }\r\n        require(isFile) { \"Not a file\" }\r\n        require(isDirectory"}], "metadata": {"task_id": "BCR/18", "ground_truth": "        !iterChildrenWithColumns(emptyArray()).hasNext()\r\n    } else {\r\n        listFiles().isEmpty()\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.deleteIfEmptyDir(): Boolean {\r\n    if (isDirectory && isEmpty()) {", "choices": [{"text": "\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "BCR/19", "ground_truth": "        return delete()\r\n    }\r\n\r\n    return false\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.deleteIfEmptyDirRecursively() {\r\n    var current: DocumentFile? = this\r\n\r\n    while (current != null) {\r\n        if (!current.deleteIfEmptyDir()) {", "choices": [{"text": "\r\n            break\r\n        }\r\n\r\n        current = current.getParent()\r\n    }\r\n\r\n    return true\r\n}\r\nfun DocumentFile.deleteIfEmptyDir() {\r\n    var current: DocumentFile? = this\r\n\r\n    while (current!= null) {\r\n        if (current.deleteIfEmptyDir()) {\r\n            return true\r\n        }\r\n\r\n        current = current.getParent()\r\n    }\r\n\r\n    return false\r\n}\r\n"}], "metadata": {"task_id": "BCR/20", "ground_truth": "            return\r\n        }\r\n        current = current.parentFile\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import android.system.Os\noverride fun start() {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        }\r\n\r\n        Os.ftruncate(fd, 0)\r\n\r\n        val header = if (isWideband) { HEADER_WB } else { HEADER_NB }\r\n        val headerBytes = header.toByteArray(Charsets.US_ASCII)", "choices": [{"text": ".getBytes(Charsets.US_ASCII);\r\n\r\n        if (isWideband) {\r\n            Os.write(fd, headerBytes, 0, headerBytes.length);\r\n        } else {\r\n            Os.write(fd, headerBytes, 0, headerBytes.length);\r\n        }\r\n\r\n        isStarted = true;\r\n    }\r\n\r\n    override fun stop() {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\")\r\n        }\r\n\r\n        isStarted = false;\r\n   "}], "metadata": {"task_id": "BCR/23", "ground_truth": "\r\n        writeFully(fd, headerBytes, 0, headerBytes.size)\r\n\r\n        isStarted = true\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\AmrContainer.kt"}}
{"prompt": "val HEADER_NB\nval HEADER_WB\nvar track\n override fun stop() {\r\n        if (!isStarted) {", "choices": [{"text": "\r\n                return;\r\n        }\r\n        isStarted = false;\r\n        if (track) {\r\n                track.stop();\r\n                track = null;\r\n        }\r\n}\r\n var isStarted = false;\r\n var track = null;\r\n function start() {\r\n        if (isStarted) {\r\n                return;\r\n        }\r\n        isStarted = true;\r\n        if (track) {\r\n                track.start();\r\n                track = null;\r\n        }\r\n}\r\n function stop() {"}], "metadata": {"task_id": "BCR/24", "ground_truth": "            throw IllegalStateException(\"Container not started\")\r\n        }\r\n\r\n        isStarted = false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\AmrContainer.kt"}}
{"prompt": "import android.media.MediaFormat\noverride fun addTrack(mediaFormat: MediaFormat): Int {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        } else if (track >= 0) {\r\n            throw IllegalStateException(\"Track already added\")\r\n        }", "choices": [{"text": ") {\r\n            throw IllegalStateException(\"Track already added\")\r\n        } else {\r\n            track = mediaFormat.getTrackNumber()\r\n            isStarted = true\r\n            return track\r\n        }\r\n    }\r\n    override fun removeTrack(track: Int): Int {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        } else if (track < 0) {\r\n            throw IllegalStateException(\"Track not added\")\r\n        } else {\r\n            isStarted = false\r\n            track = -1\r\n            return track"}], "metadata": {"task_id": "BCR/26", "ground_truth": "        track = 0\r\n\r\n        @Suppress(\"KotlinConstantConditions\")\r\n        return track\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\AmrContainer.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport android.media.MediaCodec\noverride fun writeSamples(trackIndex: Int, byteBuffer: ByteBuffer,\r\n                              bufferInfo: MediaCodec.BufferInfo) {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\")\r\n        } else if (track < 0) {\r\n            throw IllegalStateException(\"No track has been added\")\r\n        } else if (track != trackIndex) {", "choices": [{"text": "\r\n            throw IllegalStateException(\"Invalid track index\")\r\n        } else if (byteBuffer == null) {\r\n            throw IllegalStateException(\"Null byte buffer\")\r\n        } else if (bufferInfo == null) {\r\n            throw IllegalStateException(\"Null buffer info\")\r\n        } else {\r\n            throw IllegalStateException(\"Invalid buffer info\")\r\n        }\r\n}\r\n\r\noverride fun readSamples(trackIndex: Int, byteBuffer: ByteBuffer) {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\")\r\n        } else if (track < 0)"}], "metadata": {"task_id": "BCR/27", "ground_truth": "            throw IllegalStateException(\"Invalid track: $trackIndex\")\r\n        }\r\n\r\n        writeFully(fd, byteBuffer)\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\AmrContainer.kt"}}
{"prompt": "override fun start() {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        }", "choices": [{"text": "\r\n        }\r\n        isStarted = true;\r\n    }\r\n\r\n    override fun stop() {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\");\r\n        }\r\n        isStarted = false;\r\n    }\r\n\r\n    override fun pause() {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\");\r\n        }\r\n        isPaused = true;\r\n    }\r\n\r\n    override fun resume() {\r\n        if (!isStarted) {\r\n           "}], "metadata": {"task_id": "BCR/30", "ground_truth": "        Os.lseek(fd, 0, OsConstants.SEEK_SET)\r\n        Os.ftruncate(fd, 0)\r\n\r\n        isStarted = true\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\FlacContainer.kt"}}
{"prompt": "import android.media.MediaFormat\noverride fun addTrack(mediaFormat: MediaFormat): Int {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        } else if (track >= 0) {\r\n            throw IllegalStateException(\"Track already added\")", "choices": [{"text": "\r\n        } else {\r\n            track = mediaFormat.getTrack();\r\n            isStarted = true;\r\n        }\r\n        return track;\r\n    }\r\n    override fun removeTrack(track: Int): Int {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        } else if (track >= 0) {\r\n            isStarted = false;\r\n            track = -1;\r\n            return track;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n   "}], "metadata": {"task_id": "BCR/33", "ground_truth": "        }\r\n\r\n        track = 0\r\n        return track\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\FlacContainer.kt"}}
{"prompt": "import com.chiller3.bcr.extension.frameSizeInBytesCompat\nimport android.media.MediaFormat\nimport android.media.AudioFormat\nfun getMediaFormat(audioFormat: AudioFormat, param: UInt?): MediaFormat {\r\n        if (param != null) {\r\n            paramInfo.validate(param)\r\n        }\r\n\r\n        val format = baseMediaFormat.apply {\r\n            setInteger(MediaFormat.KEY_CHANNEL_COUNT, audioFormat.channelCount)\r\n            setInteger(MediaFormat.KEY_SAMPLE_RATE, audioFormat.sampleRate)\r\n            setInteger(KEY_X_FRAME_SIZE_IN_BYTES, audioFormat.frameSizeInBytesCompat)\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "BCR/35", "ground_truth": "\r\n        updateMediaFormat(format, param ?: paramInfo.default)\r\n\r\n        return format\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\Format.kt"}}
{"prompt": "import java.lang.IllegalStateException\noverride fun start() {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Encoder is already started\")\r\n        }", "choices": [{"text": "\r\n        }\r\n        isStarted = true;\r\n        return this;\r\n}\r\noverride fun stop() {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Encoder is not started\")\r\n        }\r\n        isStarted = false;\r\n        return this;\r\n}\r\n"}], "metadata": {"task_id": "BCR/39", "ground_truth": "\r\n        isStarted = true\r\n        trackIndex = container.addTrack(mediaFormat)\r\n        container.start()\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\PassthroughEncoder.kt"}}
{"prompt": "var isStarted\nval bufferInfo\nvar trackIndex\n override fun stop() {\r\n        if (!isStarted) {", "choices": [{"text": "\r\n        isStarted = false;\r\n        bufferInfo = null;\r\n        trackIndex = -1;\r\n}\r\n\r\nfunction start() {\r\n        isStarted = true;\r\n        bufferInfo = null;\r\n        trackIndex = -1;\r\n}\r\n\r\nfunction pause() {\r\n        isStarted = false;\r\n        bufferInfo = null;\r\n        trackIndex = -1;\r\n}\r\n\r\nfunction resume() {\r\n        isStarted = true;\r\n        bufferInfo = null;\r\n        trackIndex = -1"}], "metadata": {"task_id": "BCR/40", "ground_truth": "            throw IllegalStateException(\"Encoder is not started\")\r\n        }\r\n\r\n        isStarted = false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\PassthroughEncoder.kt"}}
{"prompt": "import android.system.Os\noverride fun start() {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        }\r\n\r\n        Os.ftruncate(fd, 0)", "choices": [{"text": ", 0)\r\n        isStarted = true\r\n}\r\n\r\noverride fun stop() {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\")\r\n        }\r\n\r\n        Os.ftruncate(fd, 0)\r\n        isStarted = false\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "BCR/46", "ground_truth": "        // Skip header\r\n        Os.lseek(fd, HEADER_SIZE.toLong(), OsConstants.SEEK_SET)\r\n\r\n        isStarted = true\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\WaveContainer.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport android.media.MediaCodec\noverride fun writeSamples(trackIndex: Int, byteBuffer: ByteBuffer,\r\n                              bufferInfo: MediaCodec.BufferInfo) {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\")\r\n        } else if (track < 0) {\r\n            throw IllegalStateException(\"No track has been added\")\r\n        } else if (track != trackIndex) {", "choices": [{"text": "\r\n            throw IllegalStateException(\"Invalid track index\")\r\n        } else if (byteBuffer == null) {\r\n            throw IllegalStateException(\"Null byte buffer\")\r\n        } else if (bufferInfo == null) {\r\n            throw IllegalStateException(\"Null buffer info\")\r\n        } else {\r\n            throw IllegalStateException(\"Invalid buffer info\")\r\n        }\r\n}\r\n\r\noverride fun readSamples(trackIndex: Int, byteBuffer: ByteBuffer) {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\")\r\n        } else if (track < 0)"}], "metadata": {"task_id": "BCR/50", "ground_truth": "            throw IllegalStateException(\"Invalid track: $trackIndex\")\r\n        }\r\n\r\n        writeFully(fd, byteBuffer)\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\WaveContainer.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.FileDescriptor\nimport android.system.Os\nfun writeFully(fd: FileDescriptor, buffer: ByteBuffer) {\r\n    while (buffer.remaining() > 0) {\r\n        val n = Os.write(fd, buffer)", "choices": [{"text": ";\r\n        if (n < 0) {\r\n            break;\r\n        }\r\n        buffer.position(buffer.position() + n);\r\n    }\r\n}\r\nfun readFully(fd: FileDescriptor, buffer: ByteBuffer) {\r\n    while (buffer.remaining() > 0) {\r\n        val n = Os.read(fd, buffer);\r\n        if (n < 0) {\r\n            break;\r\n        }\r\n        buffer.position(buffer.position() + n);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "BCR/51", "ground_truth": "        if (n == 0) {\r\n            throw IOException(\"Unexpected EOF when writing data\")\r\n        }\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\IoHelpers.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.FileDescriptor\nimport android.system.Os\nfun writeFully(fd: FileDescriptor, bytes: ByteArray, byteOffset: Int, byteCount: Int) {\r\n    var offset = byteOffset\r\n    var remaining = byteCount\r\n\r\n    while (remaining > 0) {\r\n        val n = Os.write(fd, bytes, offset, remaining)\r\n        if (n == 0) {\r\n            throw IOException(\"Unexpected EOF when writing data\")\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "BCR/52", "ground_truth": "\r\n        offset += n\r\n        remaining -= n\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\IoHelpers.kt"}}
{"prompt": "import android.telecom.Call\nfun updateCallDetails(call: Call, details: Call.Details): CallMetadata {\r\n        if (call !== parentCall && call.parent !== parentCall) {\r\n            throw IllegalStateException(\"Not the parent call nor one of its children: $call\")\r\n        }\r\n\r\n        synchronized(this) {", "choices": [{"text": " (this) {\r\n            parentCall = call;\r\n        }\r\n\r\n        parentCall.details = details;\r\n\r\n        return parentCall;\r\n    }\r\n"}], "metadata": {"task_id": "BCR/64", "ground_truth": "            callDetails[call] = details\r\n\r\n            return update(false)\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\output\\CallMetadataCollector.kt"}}
{"prompt": "import com.chiller3.bcr.template.Template\nimport com.chiller3.bcr.Preferences\nimport android.util.Log\nfun generate(metadata: CallMetadata): OutputPath {\r\n        val path = try {\r\n            generate(filenameTemplate, metadata)\r\n        } catch (e: Exception) {\r\n            if (filenameTemplate === Preferences.DEFAULT_FILENAME_TEMPLATE) {\r\n                throw e\r\n            } else {\r\n                Log.w(TAG, \"Failed to evaluate custom template: $filenameTemplate\", e)\r\n                generate(Preferences.DEFAULT_FILENAME_TEMPLATE, metadata)\r\n            }\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "BCR/73", "ground_truth": "\r\n        Log.i(TAG, \"Generated filename: $path\")\r\n\r\n        return path\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\output\\OutputFilenameGenerator.kt"}}
{"prompt": "import java.time.temporal.Temporal\nfun parseTimestampFromPath(path: List<String>): Temporal? {\r\n        val pathString = path.joinToString(\"/\")\r\n        val redacted = redactTruncate(pathString)\r\n        val timestamp = parseTimestamp(pathString)", "choices": [{"text": "(redacted);\r\n        if (timestamp == null) {\r\n            return null;\r\n        }\r\n        return timestamp.atZone(ZoneOffset.UTC);\r\n    }\r\n    val redactTruncate(path: String): String {\r\n        return path.substring(0, path.length() - 1);\r\n    }\r\n    val parseTimestamp(path: String): Temporal {\r\n        try {\r\n            return Temporal.parse(path);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n   "}], "metadata": {"task_id": "BCR/74", "ground_truth": "\r\n        Log.d(TAG, \"Parsed $timestamp from $redacted\")\r\n\r\n        return timestamp\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\output\\OutputFilenameGenerator.kt"}}
{"prompt": "private fun getOptionalUint(key: String, sentinel: UInt): UInt? {\r\n        // Use a sentinel value because doing contains + getInt results in TOCTOU issues\r\n        val value = prefs.getInt(key, sentinel.toInt())\r\n\r\n        return if (value == sentinel.toInt()) {", "choices": [{"text": "\r\n           ? value\r\n            : null\r\n    }\r\n\r\n    private fun getOptionalInt(key: String, sentinel: Int): Int? {\r\n        // Use a sentinel value because doing contains + getInt results in TOCTOU issues\r\n        val value = prefs.getInt(key, sentinel.toInt())\r\n\r\n        return if (value == sentinel.toInt()) {\r\n            return value\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    private fun getOptionalFloat(key: String, sentinel: Float):"}], "metadata": {"task_id": "BCR/83", "ground_truth": "            null\r\n        } else {\r\n            value.toUInt()\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\Preferences.kt"}}
{"prompt": "import androidx.core.content.edit\nprivate fun setOptionalUint(key: String, sentinel: UInt, value: UInt?) {\r\n        if (value == sentinel) {\r\n            throw IllegalArgumentException(\"$key value cannot be $sentinel\")\r\n        }\r\n\r\n        prefs.edit {\r\n            if (value == null) {\r\n                remove(key)", "choices": [{"text": "(key)\r\n            } else {\r\n                set(key, value)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setOptionalInt(key: String, sentinel: Int, value: Int?) {\r\n        if (value == sentinel) {\r\n            throw IllegalArgumentException(\"$key value cannot be $sentinel\")\r\n        }\r\n\r\n        prefs.edit {\r\n            if (value == null) {\r\n                remove(key)\r\n            } else {\r\n                set(key, value)\r\n            }"}], "metadata": {"task_id": "BCR/84", "ground_truth": "            } else {\r\n                putInt(key, value.toInt())\r\n            }\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\Preferences.kt"}}
{"prompt": "import com.chiller3.bcr.format.Format\nimport androidx.core.content.edit\nvar filenameTemplate Template?\nval outputDirOrDefaultIntent Intent\nvar isDebugMode Boolean\nfun resetAllFormats() {\r\n        val keys = prefs.all.keys.filter(::isFormatKey)\r\n        prefs.edit {", "choices": [{"text": "\r\n        for (var i = 0; i < keys.length; i++) {\r\n            var key = keys[i];\r\n            var format = prefs.all.get(key);\r\n            if (format!= null) {\r\n                format.reset();\r\n            }\r\n        }\r\n    }\r\n\r\n    function isFormatKey(key) {\r\n        return key.endsWith(\".bcr\");\r\n    }\r\n\r\n    function isFormat(format) {\r\n        return format instanceof Format;\r\n    }\r\n"}], "metadata": {"task_id": "BCR/85", "ground_truth": "            for (key in keys) {\r\n                remove(key)\r\n            }\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\Preferences.kt"}}
{"prompt": "import android.telecom.Call\nprivate fun handleDetailsChange(call: Call, details: Call.Details) {\r\n        val parentCall = call.parent\r\n        val recorder = if (parentCall != null) {\r\n            callsToRecorders[parentCall]\r\n        } else {", "choices": [{"text": "\r\n            callsToRecorders[call]\r\n        }\r\n        if (recorder!= null) {\r\n            recorder.onDetailsChange(details)\r\n        }\r\n}\r\nexport class CallRecorder {\r\n    constructor() {\r\n        this.callsToRecorders = {}\r\n    }\r\n    onDetailsChange(call: Call, details: Call.Details) {\r\n        this.callsToRecorders[call] = this\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "BCR/90", "ground_truth": "            callsToRecorders[call]\r\n        }\r\n\r\n        recorder?.onCallDetailsChanged(call, details)\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputFile\nprivate fun notifySuccess(file: OutputFile, additionalFiles: List<OutputFile>) {\r\n        notifications.notifySuccess(\r\n            R.string.notification_recording_succeeded,", "choices": [{"text": "\r\n            R.string.notification_recording_succeeded,\r\n            file,\r\n            additionalFiles\r\n        );\r\n    }\r\n    private fun notifyFailure(file: OutputFile, additionalFiles: List<OutputFile>) {\r\n        notifications.notifyFailure(\r\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n            file,\r\n            additionalFiles\r\n        );\r\n    }\r\n    private fun notifyError(file: OutputFile, additionalFiles: List<Output"}], "metadata": {"task_id": "BCR/91", "ground_truth": "            R.drawable.ic_launcher_quick_settings,\r\n            file,\r\n            additionalFiles,\r\n        )\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputFile\nprivate fun notifyFailure(\r\n        errorMsg: String?,\r\n        file: OutputFile?,\r\n        additionalFiles: List<OutputFile>,\r\n    ) {\r\n        notifications.notifyFailure(\r\n            R.string.notification_recording_failed,\r\n            R.drawable.ic_launcher_quick_settings,", "choices": [{"text": "\r\n            errorMsg,\r\n            file,\r\n            additionalFiles,\r\n        );\r\n    }\r\n    private fun notifyFailure(\r\n        errorMsg: String?,\r\n        file: OutputFile?,\r\n        additionalFiles: List<OutputFile>,\r\n    ) {\r\n        notifications.notifyFailure(\r\n            R.string.notification_recording_failed,\r\n            R.drawable.ic_launcher_quick_settings,\r\n            errorMsg,\r\n            file,\r\n            additionalFiles,\r\n        );\r\n    }"}], "metadata": {"task_id": "BCR/92", "ground_truth": "            errorMsg,\r\n            file,\r\n            additionalFiles,\r\n        )\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputFile\nimport android.util.Log\noverride fun onRecordingCompleted(\r\n        thread: RecorderThread,\r\n        file: OutputFile?,\r\n        additionalFiles: List<OutputFile>,\r\n    ) {\r\n        Log.i(TAG, \"Recording completed: ${thread.id}: ${file?.redacted}\")\r\n        handler.post {\r\n            onRecorderExited(thread)\r\n\r\n            // If the recording was initially paused and the user never resumed it, there's no\r\n            // output file, so nothing needs to be shown.", "choices": [{"text": "\n            if (additionalFiles.isEmpty()) {\r\n                Log.i(TAG, \"Recording completed: ${thread.id}: ${file?.redacted}\")\r\n            } else {\r\n                Log.i(TAG, \"Recording completed: ${thread.id}: ${file?.redacted}: ${additionalFiles.redacted}\")\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onRecorderExited(\r\n        thread: RecorderThread,\r\n    ) {\r\n        Log.i(TAG, \"Recorder exited: ${"}], "metadata": {"task_id": "BCR/94", "ground_truth": "            if (file != null) {\r\n                notifySuccess(file, additionalFiles)\r\n            }\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputFile\nimport android.util.Log\noverride fun onRecordingFailed(\r\n        thread: RecorderThread,\r\n        errorMsg: String?,\r\n        file: OutputFile?,\r\n        additionalFiles: List<OutputFile>,\r\n    ) {\r\n        Log.w(TAG, \"Recording failed: ${thread.id}: ${file?.redacted}\")\r\n        handler.post {", "choices": [{"text": " {\r\n            if (errorMsg!= null) {\r\n                Log.w(TAG, \"Recording failed: ${thread.id}: ${errorMsg}\")\r\n                handler.post {\r\n                    if (file!= null) {\r\n                        Log.w(TAG, \"Recording failed: ${thread.id}: ${file.redacted}\")\r\n                        handler.post {\r\n                            if (additionalFiles!= null) {\r\n                                Log.w(TAG, \"Recording failed: ${thread.id}: ${additionalFiles.redacted}\")\r\n                                handler.post {"}], "metadata": {"task_id": "BCR/95", "ground_truth": "            onRecorderExited(thread)\r\n\r\n            notifyFailure(errorMsg, file, additionalFiles)\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import android.net.Uri\nprivate fun extractOrigUri(uri: Uri): Uri? {\r\n            val param = uri.getQueryParameter(QUERY_ORIG)\r\n            if (param.isNullOrBlank()) {\r\n                return null\r\n            }\r\n\r\n            return try {", "choices": [{"text": "\r\n                return Uri.parse(param);\r\n            }\r\n        }\r\n\r\n        private static final String QUERY_ORIG = \"orig\";\r\n        private static final String QUERY_QUERY = \"query\";\r\n        private static final String QUERY_SORT = \"sort\";\r\n        private static final String QUERY_ORDER = \"order\";\r\n        private static final String QUERY_COUNT = \"count\";\r\n        private static final String QUERY_OFFSET = \"offset\";\r\n        private static final String QUERY_LIMIT = \"limit\";\r\n        private static final String QUERY_OFFSET"}], "metadata": {"task_id": "BCR/97", "ground_truth": "                Uri.parse(param)\r\n            } catch (e: Exception) {\r\n                null\r\n            }\r\n        }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderProvider.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputPath\nimport android.util.Log\nprivate fun getLogcatPath(): OutputPath {\r\n        return outputPath.let {\r\n            val path = it.value.mapIndexed { i, p ->\r\n                p + if (i == it.value.size - 1) { \".log\" } else { \"\" }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "BCR/103", "ground_truth": "            }\r\n\r\n            it.copy(value = path, redacted = it.redacted + \".log\")\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderThread.kt"}}
{"prompt": "import com.chiller3.bcr.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            android.R.id.home -> {\r\n                onBackPressedDispatcher.onBackPressed()", "choices": [{"text": " {\r\n                    onBackPressedDispatcher.onBackPressed()\r\n                }\r\n            },\r\n            R.id.about -> {\r\n                onBackPressedDispatcher.onBackPressed()\r\n            },\r\n            R.id.contact -> {\r\n                onBackPressedDispatcher.onBackPressed()\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed()\r\n        onBackPressedDispatcher.onBackPressed()\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "BCR/113", "ground_truth": "                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesActivity.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.chiller3.bcr.R\nimport androidx.preference.Preference\noverride fun onPreferenceClick(preference: Preference): Boolean {\r\n        when (preference) {\r\n            prefAddRule -> {\r\n                requestContact.launch(null)\r\n                return true", "choices": [{"text": ".launch(null)\r\n                return true\r\n            }\r\n        } else {\r\n            prefAddRule -> {\r\n                requestContact.launch(null)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n}\r\noverride fun onPreferenceLongClick(preference: Preference): Boolean {\r\n        when (preference) {\r\n            prefAddRule -> {\r\n                requestContact.launch(null)\r\n                return true\r\n            }\r\n        } else {\r\n            prefAddRule -> {\r\n                requestContact"}], "metadata": {"task_id": "BCR/114", "ground_truth": "            }\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesFragment.kt"}}
{"prompt": "import com.chiller3.bcr.R\nimport com.chiller3.bcr.Preferences\nimport androidx.preference.Preference\noverride fun onPreferenceChange(preference: Preference, newValue: Any?): Boolean {\r\n        when {\r\n            preference.key.startsWith(Preferences.PREF_RULE_PREFIX) -> {\r\n                val index = preference.key.substring(Preferences.PREF_RULE_PREFIX.length).toInt()\r\n                viewModel.setRuleRecord(index, newValue as Boolean)\r\n                return true", "choices": [{"text": ";\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_rule_record);\r\n        viewModel = new RuleRecordViewModel(this);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        viewModel.onResume();\r\n    }\r\n\r\n    @Override\r\n"}], "metadata": {"task_id": "BCR/115", "ground_truth": "            }\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesFragment.kt"}}
{"prompt": "import com.chiller3.bcr.R\nimport com.chiller3.bcr.Preferences\nimport androidx.preference.Preference\noverride fun onPreferenceLongClick(preference: Preference): Boolean {\r\n        when {\r\n            preference.key.startsWith(Preferences.PREF_RULE_PREFIX) -> {\r\n                val index = preference.key.substring(Preferences.PREF_RULE_PREFIX.length).toInt()\r\n                viewModel.deleteRule(index)\r\n                return true", "choices": [{"text": ";\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    onPreferenceClick(preference: Preference): Boolean {\r\n        when {\r\n            preference.key.startsWith(Preferences.PREF_RULE_PREFIX) -> {\r\n                val index = preference.key.substring(Preferences.PREF_RULE_PREFIX.length).toInt()\r\n                viewModel.deleteRule(index)\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "BCR/116", "ground_truth": "            }\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesFragment.kt"}}
{"prompt": "import com.google.android.material.snackbar.Snackbar\nimport android.view.View\nprivate fun showSnackBar(text: CharSequence, onDismiss: () -> Unit) {\r\n        Snackbar.make(requireView(), text, Snackbar.LENGTH_LONG)\r\n            .addCallback(object : Snackbar.Callback() {\r\n                override fun onDismissed(transientBottomBar: Snackbar?, event: Int) {", "choices": [{"text": "\r\n                    super.onDismissed(transientBottomBar, event);\r\n                    onDismiss.call();\r\n                }\r\n            })\r\n           .show();\r\n    }\r\n    private fun showSnackBar(text: CharSequence, onDismiss: () -> Unit) {\r\n        showSnackBar(text, onDismiss);\r\n    }\r\n    private fun showSnackBar(text: CharSequence, onDismiss: () -> Unit) {\r\n        showSnackBar(text, onDismiss);\r\n    }\r\n"}], "metadata": {"task_id": "BCR/117", "ground_truth": "                    onDismiss()\r\n                }\r\n            })\r\n            .show()\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesFragment.kt"}}
{"prompt": "import kotlinx.coroutines.flow.update\nprivate fun updateAndSaveRules(\r\n        block: (old: List<DisplayedRecordRule>) -> List<DisplayedRecordRule>,\r\n    ) {\r\n        _rules.update {", "choices": [{"text": "\r\n        rules: List<DisplayedRecordRule>,\r\n    ) -> List<DisplayedRecordRule> {\r\n        return block(rules)\r\n    }\r\n\r\n@kotlinx.coroutines.flow.update\r\n@kotlinx.coroutines.flow.update\r\n@kotlinx.coroutines.flow.update\r\n@kotlinx.coroutines.flow.update\r\n@kotlinx.coroutines.flow.update\r\n@kotlinx.coroutines.flow.update\r\n@kot"}], "metadata": {"task_id": "BCR/118", "ground_truth": "            val newRules = block(it).sorted()\r\n            saveRules(newRules)\r\n            newRules\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesViewModel.kt"}}
{"prompt": "import com.chiller3.bcr.findContactByLookupKey\nimport android.content.pm.PackageManager\nimport android.app.Application\nimport android.Manifest\nprivate fun getContactDisplayName(lookupKey: String): String? {\r\n        if (getApplication<Application>().checkSelfPermission(Manifest.permission.READ_CONTACTS)\r\n            != PackageManager.PERMISSION_GRANTED) {\r\n            return null\r\n        }\r\n\r\n        return try {\r\n            findContactByLookupKey(getApplication(), lookupKey)?.displayName", "choices": [{"text": "()\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            return null\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "BCR/119", "ground_truth": "        } catch (e: Exception) {\r\n            Log.w(TAG, \"Failed to look up contact\", e)\r\n            null\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesViewModel.kt"}}
{"prompt": "import android.net.Uri\nimport android.content.Intent\nimport android.content.Context\noverride fun createIntent(context: Context, input: Uri?): Intent {\r\n        val intent = super.createIntent(context, input)\r\n\r\n        intent.addFlags(\r\n            Intent.FLAG_GRANT_WRITE_URI_PERMISSION\r\n                    or Intent.FLAG_GRANT_PREFIX_URI_PERMISSION", "choices": [{"text": ",\r\n            Intent.FLAG_GRANT_READ_URI_PERMISSION\r\n                    or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\r\n                    or Intent.FLAG_GRANT_PREFIX_URI_PERMISSION\r\n        )\r\n\r\n        return intent\r\n}\r\n"}], "metadata": {"task_id": "BCR/122", "ground_truth": "                    or Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION\r\n        )\r\n\r\n        return intent\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\settings\\OpenPersistentDocumentTree.kt"}}
{"prompt": "import com.chiller3.bcr.format\nimport android.view.View\noverride fun onClick(v: View?) {\r\n        when (v) {\r\n            binding.reset -> {\r\n                prefs.resetAllFormats()\r\n                refreshFormat()\r\n                // Need to explicitly refresh the parameter when the default format is already chosen", "choices": [{"text": "\r\n            }\r\n        } else {\r\n            binding.reset -> {\r\n                prefs.resetAllFormats()\r\n                refreshFormat()\r\n                // Need to explicitly refresh the parameter when the default format is already chosen\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "BCR/129", "ground_truth": "                refreshParam()\r\n                refreshSampleRate()\r\n            }\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\settings\\OutputFormatBottomSheetFragment.kt"}}
{"prompt": "import com.chiller3.bcr.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.settings_activity)\r\n        if (savedInstanceState == null) {\r\n            supportFragmentManager\r\n                    .beginTransaction()\r\n                    .replace(R.id.settings, SettingsFragment())\r\n                    .commit()\r\n        }", "choices": [{"text": "()\r\n}\r\noverride fun onStart() {\r\n        super.onStart()\r\n        supportFragmentManager.beginTransaction()\r\n               .replace(R.id.settings, SettingsFragment())\r\n               .commit()\r\n}\r\noverride fun onStop() {\r\n        super.onStop()\r\n        supportFragmentManager.beginTransaction()\r\n               .replace(R.id.settings, SettingsFragment())\r\n               .commit()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        supportFragmentManager.begin"}], "metadata": {"task_id": "BCR/130", "ground_truth": "\r\n        setSupportActionBar(findViewById(R.id.toolbar))\r\n\r\n        setTitle(R.string.app_name_full)\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\settings\\SettingsActivity.kt"}}
{"prompt": "import java.nio.file.Path\nprivate fun delete(path: Path) {\r\n    if (dryRun) {\r\n        println(\"Would have deleted: $path\")", "choices": [{"text": ": $path\");\r\n    } else {\r\n        println(\"Deleting: $path\");\r\n        path.delete();\r\n    }\r\n}\r\nprivate fun mkdir(path: Path) {\r\n    if (dryRun) {\r\n        println(\"Would have created: $path\");\r\n    } else {\r\n        println(\"Creating: $path\");\r\n        path.toFile().mkdirs();\r\n    }\r\n}\r\nprivate fun touch(path: Path) {\r\n    if (dryRun) {\r\n        println(\"Would"}], "metadata": {"task_id": "BCR/136", "ground_truth": "    } else {\r\n        println(\"Deleting: $path\")\r\n        path.deleteIfExists()\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\ClearPackageManagerCaches.kt"}}
{"prompt": "private fun ByteArray.indexOfSubarray(needle: ByteArray, start: Int = 0): Int {\r\n    require(start >= 0) { \"start must be non-negative\" }\r\n\r\n    if (needle.isEmpty()) {\r\n        return 0\r\n    }\r\n\r\n    outer@ for (i in 0 until size - needle.size + 1) {\r\n        for (j in needle.indices) {\r\n            if (this[i + j] != needle[j]) {\r\n                continue@outer\r\n            }\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "BCR/137", "ground_truth": "        return i\r\n    }\r\n\r\n    return -1\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\ClearPackageManagerCaches.kt"}}
{"prompt": "fun main(args: Array<String>) {\r\n    if (\"--dry-run\" in args) {\r\n        dryRun = true\r\n    }\r\n\r\n    try {\r\n        mainInternal()\r\n    } catch (e: Exception) {", "choices": [{"text": "\r\n    process.exit(1)\r\n}\r\n\r\nfunction mainInternal() {\r\n    if (dryRun) {\r\n        console.log(\"--dry-run\")\r\n        return\r\n    }\r\n\r\n    if (process.argv.length < 2) {\r\n        console.log(\"Usage: \" + process.argv[0] + \" [--dry-run]\")\r\n        return\r\n    }\r\n\r\n    if (process.argv[1] === \"--dry-run\") {\r\n        dryRun = true\r\n"}], "metadata": {"task_id": "BCR/138", "ground_truth": "        System.err.println(\"Failed to clear caches\")\r\n        e.printStackTrace()\r\n        exitProcess(1)\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\ClearPackageManagerCaches.kt"}}
{"prompt": "fun updatePermissionFlags(\r\n        permissionName: String,\r\n        packageName: String,\r\n        flagMask: Int,\r\n        flagValues: Int,\r\n        userId: Int,\r\n    ) {\r\n        METHOD_UPDATE_PERMISSION_FLAGS.invoke(\r\n            iFace,\r\n            permissionName,\r\n            packageName,", "choices": [{"text": "\r\n            flagMask,\r\n            flagValues,\r\n            userId,\r\n        );\r\n    }\r\n"}], "metadata": {"task_id": "BCR/139", "ground_truth": "            flagMask,\r\n            flagValues,\r\n            userId,\r\n        )\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\RemoveHardRestrictions.kt"}}
{"prompt": "fun main() {\r\n    try {\r\n        mainInternal()\r\n    } catch (e: Exception) {", "choices": [{"text": "(e: Exception) {\r\n        console.log(e.message)\r\n    }\r\n}\r\n\r\nfunction mainInternal() {\r\n    console.log('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"}], "metadata": {"task_id": "BCR/140", "ground_truth": "        System.err.println(\"Failed to remove hard restrictions\")\r\n        e.printStackTrace()\r\n        exitProcess(1)\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\RemoveHardRestrictions.kt"}}
{"prompt": "val templateParser\nval parser\nval variableRefParser\n override fun toTemplate(): String = buildString {\r\n            append('{')\r\n            append(name)\r\n            if (arg != null) {", "choices": [{"text": "\r\n            if (arg!= null) {\r\n                append(arg.toTemplate());\r\n            } else {\r\n                append('}');\r\n            }\r\n            append('}');\r\n            return buildString;\r\n        }\r\n\r\n override fun toParser(): String = buildString {\r\n            append('{')\r\n            append(name);\r\n            if (arg!= null) {\r\n                append(arg.toParser());\r\n            } else {\r\n                append('}');\r\n            }\r\n            append('}');\r"}], "metadata": {"task_id": "BCR/141", "ground_truth": "                append(':')\r\n                append(escape(arg))\r\n            }\r\n            append('}')\r\n        }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\template\\Template.kt"}}
{"prompt": "override fun toTemplate(): String = buildString {\r\n            append('[')\r\n            for ((i, choice) in choices.withIndex()) {\r\n                if (i > 0) {\r\n                    append('|')", "choices": [{"text": "(choice);\r\n                } else {\r\n                    append('|');\r\n                }\r\n            }\r\n            append(']');\r\n            return super.toTemplate();\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "BCR/142", "ground_truth": "                }\r\n                append(choice.toTemplate())\r\n            }\r\n            append(']')\r\n        }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\template\\Template.kt"}}
{"prompt": "import android.view.View\nprivate fun getMargins(view: View): Pair<Int, Int> {\r\n            val lp = view.layoutParams\r\n\r\n            return if (lp is MarginLayoutParams) {", "choices": [{"text": " {\r\n                left: lp.leftMargin,\r\n                top: lp.topMargin,\r\n                right: lp.rightMargin,\r\n                bottom: lp.bottomMargin\r\n            }\r\n        }\r\n\r\n        val lp = view.getLayoutParams()\r\n\r\n        if (lp is MarginLayoutParams) {\r\n            return {\r\n                left: lp.leftMargin,\r\n                top: lp.topMargin,\r\n                right: lp.rightMargin,\r\n                bottom: lp.bottomMargin\r\n            }\r\n       "}], "metadata": {"task_id": "BCR/145", "ground_truth": "                Pair(lp.marginStart, lp.marginEnd)\r\n            } else {\r\n                Pair(0, 0)\r\n            }\r\n        }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\view\\ChipGroupCentered.kt"}}
{"prompt": "import timber.log.Timber\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.coroutines.Runnable\nfun stop(): List<Runnable> {\r\n        Timber.i(\"FcitxDispatcher stop()\")\r\n        return if (isRunning.compareAndSet(true, false)) {\r\n            runBlocking {\r\n                controller.nativeScheduleEmpty()\r\n                runningLock.withLock {\r\n                    val rest = queue.toList()\r\n                    queue.clear()", "choices": [{"text": "\r\n                    return rest\r\n                }\r\n            }\r\n        } else {\r\n            return queue.toList()\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/2", "ground_truth": "                    rest\r\n                }\r\n            }\r\n        } else emptyList()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxDispatcher.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n            if (this === other) return true\r\n            if (javaClass != other?.javaClass) return false\r\n\r\n            other as UnknownEvent", "choices": [{"text": ".javaClass = this.javaClass\r\n            return false\r\n        }\r\n\r\n        override fun hashCode(): Number {\r\n            return this.javaClass.hashCode()\r\n        }\r\n\r\n        override fun toString(): String {\r\n            return this.javaClass.toString()\r\n        }\r\n\r\n        override fun toString(): String {\r\n            return this.javaClass.toString()\r\n        }\r\n\r\n        override fun toString(): String {\r\n            return this.javaClass.toString()\r\n        }\r\n\r\n        override"}], "metadata": {"task_id": "fcitx5-android/8", "ground_truth": "\r\n            if (!data.contentEquals(other.data)) return false\r\n\r\n            return true\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxEvent.kt"}}
{"prompt": "fun escapeForValue(str: String): String {\r\n        val needsQuote = str.lastIndexOfAny(QuotedChars) >= 0\r\n        return buildString {\r\n            if (needsQuote) append('\"')\r\n            str.forEach { c ->\r\n                append(\r\n                    when (c) {\r\n                        '\\\\' -> \"\\\\\\\\\"\r\n                        '\\n' -> \"\\\\n\"\r\n                        '\"' -> \"\\\\\\\"\"\r\n                        else -> c\r\n                    }", "choices": [{"text": "\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "fcitx5-android/19", "ground_truth": "                )\r\n            }\r\n            if (needsQuote) append('\"')\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxUtils.kt"}}
{"prompt": "fun codePointCountUntil(endIndex: Int): Int {\r\n        var count = 0\r\n        var length = 0\r\n        for (str in strings) {\r\n            val total = length + str.length\r\n            if (total < endIndex) {\r\n                count += str.codePointCount(0, str.length)\r\n                length = total\r\n            } else {\r\n                count += str.codePointCount(0, endIndex - length)", "choices": [{"text": "\r\n                length = endIndex - length\r\n            }\r\n        }\r\n        return count\r\n}\r\n\r\nfun codePointCount(endIndex: Int): Int {\r\n        var count = 0\r\n        var length = 0\r\n        for (str in strings) {\r\n            val total = length + str.length\r\n            if (total < endIndex) {\r\n                count += str.codePointCount(0, str.length)\r\n                length = total\r\n            } else {\r\n                count += str.codePointCount(0, endIndex -"}], "metadata": {"task_id": "fcitx5-android/20", "ground_truth": "                break\r\n            }\r\n        }\r\n        return count\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FormattedText.kt"}}
{"prompt": "import kotlin.concurrent.withLock\nimport timber.log.Timber\nimport org.fcitx.fcitx5.android.daemon.FcitxDaemon.connect\nimport org.fcitx.fcitx5.android.core.FcitxLifecycle\nimport org.fcitx.fcitx5.android.core.Fcitx\nfun connect(name: String): FcitxConnection = lock.withLock {\r\n        if (name in clients)\r\n            return@withLock clients.getValue(name)\r\n        if (realFcitx.lifecycle.currentState == FcitxLifecycle.State.STOPPED) {\r\n            Timber.d(\"FcitxDaemon start fcitx\")\r\n            realFcitx.start()", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/28", "ground_truth": "        }\r\n        val new = mkConnection(name)\r\n        clients[name] = new\r\n        return@withLock new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\daemon\\FcitxDaemon.kt"}}
{"prompt": "import java.io.File\nimport org.fcitx.fcitx5.android.utils.errorArg\nimport org.fcitx.fcitx5.android.data.pinyin.dict.PinyinDictionary\nimport org.fcitx.fcitx5.android.data.pinyin.dict.LibIMEDictionary\nimport org.fcitx.fcitx5.android.R\nfun importFromFile(file: File): Result<LibIMEDictionary> = runCatching {\r\n        val raw =\r\n            PinyinDictionary.new(file) ?: errorArg(R.string.exception_dict_filename, file.path)\r\n        // convert to libime format in dictionaries dir\r\n        // preserve original file name\r\n        val new = raw.toLibIMEDictionary(\r\n            File(\r\n                pinyinDicDir,\r\n                file.nameWithoutExtension + \".${PinyinDictionary.Type.LibIME.ext}\"", "choices": [{"text": ")\r\n        )\r\n        return new\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/48", "ground_truth": "            )\r\n        )\r\n        Timber.d(\"Converted $raw to $new\")\r\n        new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\PinyinDictManager.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.File\nimport org.fcitx.fcitx5.android.utils.appContext\nimport org.fcitx.fcitx5.android.data.pinyin.dict.LibIMEDictionary\nimport org.fcitx.fcitx5.android.R\nfun importFromInputStream(stream: InputStream, name: String): Result<LibIMEDictionary> {\r\n        val tempFile = File(appContext.cacheDir, name)\r\n        tempFile.outputStream().use {\r\n            stream.copyTo(it)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/49", "ground_truth": "        }\r\n        val new = importFromFile(tempFile)\r\n        tempFile.delete()\r\n        return new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\PinyinDictManager.kt"}}
{"prompt": "import androidx.annotation.StringRes\nprotected fun <T : Any> list(\r\n        @StringRes\r\n        title: Int,\r\n        key: String,\r\n        defaultValue: T,\r\n        codec: ManagedPreference.StringLikeCodec<T>,\r\n        entryValues: List<T>,\r\n        @StringRes\r\n        entryLabels: List<Int>,\r\n        enableUiOn: (() -> Boolean)? = null\r\n    ): ManagedPreference.PStringLike<T> {\r\n        val pref = ManagedPreference.PStringLike(sharedPreferences, key, defaultValue, codec)\r\n        val ui = ManagedPreferenceUi.StringList(\r\n            title, key, defaultValue, codec, entryValues, entryLabels, enableUiOn", "choices": [{"text": ")\r\n        pref.setUi(ui)\r\n        return pref\r\n    }\r\n\r\n    protected fun <T : Any> map(\r\n        @StringRes\r\n        title: Int,\r\n        key: String,\r\n        defaultValue: T,\r\n        codec: ManagedPreference.StringLikeCodec<T>,\r\n        entryValues: List<T>,\r\n        @StringRes\r\n        entryLabels: List<Int>,\r\n        enableUiOn: (() -> Boolean)? = null\r\n    ): ManagedPreference.PStringLike<T"}], "metadata": {"task_id": "fcitx5-android/60", "ground_truth": "        )\r\n        pref.register()\r\n        ui.registerUi()\r\n        return pref\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\prefs\\ManagedPreferenceCategory.kt"}}
{"prompt": "var override CustomQuickPhrase?\nval isEnabled Boolean\n override fun enable() {", "choices": [{"text": "?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase"}], "metadata": {"task_id": "fcitx5-android/74", "ground_truth": "        if (isEnabled)\r\n            return\r\n        // override must exist in this case\r\n        override!!.enable()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": "var override CustomQuickPhrase?\nval isEnabled Boolean\n override fun disable() {", "choices": [{"text": "?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase?\n\nvar override CustomQuickPhrase"}], "metadata": {"task_id": "fcitx5-android/75", "ground_truth": "        if (!isEnabled)\r\n            return\r\n        createOverrideIfNotExist()\r\n        override!!.disable()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": "fun load() {\r\n        val xs = file.readLines()", "choices": [{"text": ".split('\\n');\r\n\r\n        for (var i = 0; i < xs.length; i++) {\r\n            var line = xs[i].trim();\r\n\r\n            if (line.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            if (line.charAt(0) === '#') {\r\n                continue;\r\n            }\r\n\r\n            if (line.charAt(line.length - 1) === '\\n') {\r\n                line = line.substring(0, line.length - 1"}], "metadata": {"task_id": "fcitx5-android/85", "ground_truth": "        xs.forEach {\r\n            if (it.isNotBlank())\r\n                put(it, it)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\RecentlyUsed.kt"}}
{"prompt": "import java.io.File\nimport org.fcitx.fcitx5.android.data.table.TableManager\noverride fun toTextDictionary(dest: File): TextDictionary {\r\n        ensureTxt(dest)\r\n        TableManager.tableDictConv(\r\n            file.absolutePath,", "choices": [{"text": "\r\n            dest.getAbsolutePath()\r\n        );\r\n    }\r\n\r\n    private static void ensureTxt(File dest) {\r\n        if (!dest.exists()) {\r\n            dest.mkdirs();\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "fcitx5-android/92", "ground_truth": "            dest.absolutePath,\r\n            TableManager.MODE_BIN_TO_TXT\r\n        )\r\n        return TextDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\LibIMEDictionary.kt"}}
{"prompt": "fun saveTheme(theme: Theme.Custom) {\r\n        ThemeFilesManager.saveThemeFiles(theme)\r\n        customThemes.indexOfFirst { it.name == theme.name }.also {\r\n            if (it >= 0) customThemes[it] = theme else customThemes.add(0, theme)", "choices": [{"text": "\r\n        }\r\n}\r\n\r\nfunction loadTheme(theme: Theme.Custom) {\r\n        ThemeFilesManager.loadThemeFiles(theme)\r\n        customThemes.indexOfFirst { it.name == theme.name }.also {\r\n            if (it >= 0) customThemes[it] = theme else customThemes.add(0, theme)\r\n        }\r\n}\r\n\r\nfunction removeTheme(theme: Theme.Custom) {\r\n        ThemeFilesManager.removeThemeFiles(theme)\r\n        customThemes.indexOfFirst { it.name"}], "metadata": {"task_id": "fcitx5-android/109", "ground_truth": "        }\r\n        if (activeTheme.name == theme.name) {\r\n            activeTheme = theme\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "fun deleteTheme(name: String) {\r\n        customThemes.find { it.name == name }?.also {\r\n            ThemeFilesManager.deleteThemeFiles(it)\r\n            customThemes.remove(it)", "choices": [{"text": "\r\n        }\r\n    }\r\n\r\n    function updateTheme(name: String) {\r\n        customThemes.find { it.name == name }?.also {\r\n            ThemeFilesManager.updateThemeFiles(it)\r\n            customThemes.find { it.name == name }?.also {\r\n                customThemes.find { it.name == name }?.also {\r\n                    customThemes.find { it.name == name }?.also {\r\n                        customThemes.find { it.name == name }?.also {\r\n                           "}], "metadata": {"task_id": "fcitx5-android/110", "ground_truth": "        }\r\n        if (activeTheme.name == name) {\r\n            activeTheme = evaluateActiveTheme()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.utils.appContext\nimport androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nimport androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.N)\r\n    fun syncToDeviceEncryptedStorage() {\r\n        val ctx = appContext.createDeviceProtectedStorageContext()\r\n        val sp = PreferenceManager.getDefaultSharedPreferences(ctx)\r\n        sp.edit {", "choices": [{"text": " {\r\n            sp.edit().putBoolean(\"syncToDeviceEncryptedStorage\", true).commit();\r\n        }\r\n    }\r\n\r\n    fun syncToDeviceProtectedStorage() {\r\n        val ctx = appContext.createDeviceProtectedStorageContext()\r\n        val sp = PreferenceManager.getDefaultSharedPreferences(ctx)\r\n        sp.edit {\r\n            sp.edit().putBoolean(\"syncToDeviceProtectedStorage\", true).commit();\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "fcitx5-android/115", "ground_truth": "            prefs.managedPreferences.forEach {\r\n                it.value.putValueTo(this@edit)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "import timber.log.Timber\nimport org.fcitx.fcitx5.android.utils.desc\nprivate fun transformClipboard(source: String): String {\r\n        var result = source\r\n        clipboardTransformers.forEach {\r\n            try {\r\n                result = it.transform(result)!!\r\n            } catch (e: Exception) {\r\n                Timber.w(\"Exception while calling clipboard transformer '${it.desc}'\")", "choices": [{"text": "\r\n            }\r\n        }\r\n        return result\r\n}\r\n\r\nvar clipboardTransformers = [\r\n    {\r\n        desc: \"Text\",\r\n        transform: function (source: String): String {\r\n            return transformClipboard(source)\r\n        }\r\n    },\r\n    {\r\n        desc: \"Image\",\r\n        transform: function (source: String): String {\r\n            return transformClipboard(source)\r\n        }\r\n    },\r\n    {\r\n        desc: \"Video\",\r\n        transform"}], "metadata": {"task_id": "fcitx5-android/119", "ground_truth": "                Timber.w(e)\r\n            }\r\n        }\r\n        return result\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\FcitxRemoteService.kt"}}
{"prompt": "override fun setText(charSequence: CharSequence?, bufferType: BufferType) {\r\n        // setText can be called in super constructor\r\n        if (!::text.isInitialized || charSequence == null || !text.contentEquals(charSequence)) {\r\n            needsMeasureText = true\r\n            needsCalculateTransform = true", "choices": [{"text": "\r\n            return;\r\n        }\r\n\r\n        if (needsMeasureText) {\r\n            needsMeasureText = false\r\n            needsCalculateTransform = true\r\n        }\r\n\r\n        if (needsCalculateTransform) {\r\n            needsCalculateTransform = false\r\n            needsMeasureText = true\r\n        }\r\n\r\n        if (needsMeasureText) {\r\n            needsMeasureText = false\r\n            needsCalculateTransform = true\r\n        }\r\n\r\n        if (needsCalculateTransform) {\r\n            needsCalculateTransform = false\r\n           "}], "metadata": {"task_id": "fcitx5-android/125", "ground_truth": "            text = charSequence?.toString() ?: \"\"\r\n            requestLayout()\r\n            invalidate()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\AutoScaleTextView.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nimport androidx.lifecycle.lifecycleScope\nprivate fun launchClipboardTimeoutJob() {\r\n        clipboardTimeoutJob?.cancel()\r\n        val timeout = clipboardItemTimeout.getValue() * 1000L\r\n        // never transition to ClipboardTimedOut state when timeout < 0\r\n        if (timeout < 0L) return\r\n        clipboardTimeoutJob = service.lifecycleScope.launch {", "choices": [{"text": "\r\n            @Override\r\n            public void run() {\r\n                clipboardItemTimeout.setValue(timeout)\r\n                clipboardTimeoutJob = null\r\n            }\r\n        }\r\n        return () -> {\r\n            clipboardTimeoutJob?.cancel()\r\n            clipboardTimeoutJob = null\r\n            clipboardItemTimeout.setValue(0)\r\n        }\r\n    }\r\n\r\n@lifecycleScope\r\npublic interface ClipboardService {\r\n\r\n    void setClipboardItemTimeout(long value);\r\n\r\n    long getClipboardItem"}], "metadata": {"task_id": "fcitx5-android/130", "ground_truth": "            delay(timeout)\r\n            isClipboardFresh = false\r\n            clipboardTimeoutJob = null\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nprivate fun switchUiByState(state: KawaiiBarStateMachine.State) {\r\n        val index = state.ordinal\r\n        if (view.displayedChild == index) return\r\n        val new = view.getChildAt(index)\r\n        if (new != titleUi.root) {\r\n            titleUi.setReturnButtonOnClickListener { }", "choices": [{"text": "\r\n            titleUi.root = new\r\n            titleUi.setReturnButtonOnClickListener {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    switchUiByState(state)\r\n                }\r\n            }\r\n        } else {\r\n            titleUi.setReturnButtonOnClickListener {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    switchUiByState(state)\r\n                }\r\n            }\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/133", "ground_truth": "            titleUi.setTitle(\"\")\r\n            titleUi.removeExtension()\r\n        }\r\n        view.displayedChild = index\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "import splitties.views.dsl.core.add\nimport org.fcitx.fcitx5.android.input.wm.InputWindow\nimport org.fcitx.fcitx5.android.input.keyboard.KeyboardWindow\nimport org.fcitx.fcitx5.android.R\noverride fun onWindowAttached(window: InputWindow) {\r\n        when (window) {\r\n            is InputWindow.ExtendedInputWindow<*> -> {\r\n                titleUi.setTitle(window.title)\r\n                window.onCreateBarExtension()?.let { titleUi.addExtension(it, window.showTitle) }\r\n                titleUi.setReturnButtonOnClickListener {\r\n                    windowManager.attachWindow(KeyboardWindow)\r\n                }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "fcitx5-android/134", "ground_truth": "                barStateMachine.push(ExtendedWindowAttached)\r\n            }\r\n            else -> {}\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "import androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.R)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/140", "ground_truth": "    private fun clearPinnedView() {\r\n        pinnedView.removeAllViews()\r\n        pinnedContentView = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\idle\\InlineSuggestionsUi.kt"}}
{"prompt": "import androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.R)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/141", "ground_truth": "    fun clear() {\r\n        clearScrollView()\r\n        clearPinnedView()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\idle\\InlineSuggestionsUi.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nprivate fun updateMenuButtonRotation(instant: Boolean = false) {\r\n        val targetRotation = menuButtonRotation\r\n        menuButton.apply {\r\n            if (targetRotation == rotation) return\r\n            animate().cancel()\r\n            if (!instant && !disableAnimation) {\r\n                animate().setDuration(200L).rotation(targetRotation)", "choices": [{"text": "\r\n            } else {\r\n                animate().setDuration(200L).rotation(targetRotation)\r\n            }\r\n            menuButtonRotation = targetRotation\r\n        }\r\n}\r\nprivate fun updateMenuButton(instant: Boolean = false) {\r\n        val targetRotation = menuButtonRotation\r\n        menuButton.apply {\r\n            if (targetRotation == rotation) return\r\n            animate().cancel()\r\n            if (!instant &&!disableAnimation) {\r\n                animate().setDuration(200L).rotation(targetRotation)\r\n            } else {\r"}], "metadata": {"task_id": "fcitx5-android/145", "ground_truth": "            } else {\r\n                rotation = targetRotation\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\IdleUi.kt"}}
{"prompt": "val backButton\nvar extension View?\nval root\n fun removeExtension() {", "choices": [{"text": "\n var backButton = Ti.UI.createButton({\n title: 'Back'\n });\n backButton.addEventListener('click', function(e) {\n e.cancelBubble = true;\n Ti.UI.currentTab.open(Ti.UI.currentTab);\n });\n\n var backButton2 = Ti.UI.createButton({\n title: 'Back'\n });\n backButton2.addEventListener('click', function(e) {\n e.cancelBubble = true;\n Ti.UI.currentTab.open(Ti.UI."}], "metadata": {"task_id": "fcitx5-android/150", "ground_truth": "        extension?.let {\r\n            root.removeView(it)\r\n            extension = null\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\TitleUi.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        when (parent.layoutDirection) {\r\n            View.LAYOUT_DIRECTION_LTR -> {\r\n                outRect.right = drawable.intrinsicWidth\r\n            }\r\n            View.LAYOUT_DIRECTION_RTL -> {\r\n                outRect.left = drawable.intrinsicWidth\r\n            }\r\n            else -> {", "choices": [{"text": "\r\n                outRect.left = drawable.intrinsicWidth\r\n                outRect.right = drawable.intrinsicWidth\r\n            }\r\n        }\r\n        else {\r\n            outRect.left = drawable.intrinsicWidth\r\n            outRect.right = drawable.intrinsicWidth\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "fcitx5-android/162", "ground_truth": "                // should not reach here\r\n                outRect.set(0, 0, 0, 0)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\decoration\\FlexboxVerticalDecoration.kt"}}
{"prompt": "import android.view.View\nfinal override fun onCreateView(): View {\r\n        candidateLayout = onCreateCandidateLayout().apply {\r\n            recyclerView.apply {\r\n                // disable item cross-fade animation", "choices": [{"text": "\r\n                candidateLayout.setVisibility(View.GONE)\r\n            }\r\n        }\r\n        return super.onCreateView().apply {\r\n            candidateLayout.apply {\r\n                super.onCreateView().apply {\r\n                    super.onCreateView().apply {\r\n                        super.onCreateView().apply {\r\n                            super.onCreateView().apply {\r\n                                super.onCreateView().apply {\r\n                                    super.onCreateView().apply {\r\n                                        super.onCreateView().apply {\r\n                                            super.on"}], "metadata": {"task_id": "fcitx5-android/165", "ground_truth": "                itemAnimator = null\r\n            }\r\n        }\r\n        return candidateLayout\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\window\\BaseExpandedCandidateWindow.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.input.candidates.adapter.PagingCandidateViewAdapter\nimport org.fcitx.fcitx5.android.daemon.launchOnReady\nimport kotlinx.coroutines.launch\nimport android.view.View\nfun bindCandidateUiViewHolder(holder: PagingCandidateViewAdapter.ViewHolder) {\r\n        holder.itemView.setOnClickListener {\r\n            fcitx.launchOnReady { it.select(holder.idx) }\r\n        }\r\n        if (horizontalCandidate.canForgetWord) {\r\n            holder.itemView.setOnLongClickListener { _ ->\r\n                holder.ui.showExtraActionMenu(onForget = {\r\n                    fcitx.launchOnReady { it.forget(holder.idx) }\r\n                })\r\n                true", "choices": [{"text": ".\r\n            }\r\n        }\r\n        if (horizontalCandidate.canForgetSentence) {\r\n            holder.itemView.setOnLongClickListener { _ ->\r\n                holder.ui.showExtraActionMenu(onForget = {\r\n                    fcitx.launchOnReady { it.forgetSentence(holder.idx) }\r\n                })\r\n                true.\r\n            }\r\n        }\r\n        if (horizontalCandidate.canForgetWord) {\r\n            holder.itemView.setOnLongClickListener { _ ->\r\n                holder"}], "metadata": {"task_id": "fcitx5-android/166", "ground_truth": "            }\r\n        } else {\r\n            holder.itemView.setOnLongClickListener(null)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\window\\BaseExpandedCandidateWindow.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) = outRect.run {", "choices": [{"text": " (\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) => outRect.run {\r\n        return outRect.run {\r\n            return outRect.run {\r\n                return outRect.run {\r\n                    return outRect.run {\r\n                        return outRect.run {\r\n                            return outRect.run {\r\n                                return outRect.run {\r\n                                    return outRect.run {\r\n                                        return outRect.run {\r\n"}], "metadata": {"task_id": "fcitx5-android/175", "ground_truth": "        top = space\r\n        bottom = space\r\n        left = space\r\n        right = space\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\clipboard\\SpacesItemDecoration.kt"}}
{"prompt": "fun update(start: Int, end: Int) {\r\n        if (end >= start) {\r\n            data[0] = start\r\n            data[1] = end", "choices": [{"text": "\r\n        } else {\r\n            data[0] = end\r\n            data[1] = start\r\n        }\r\n}\r\n\r\nlet data = [0, 0, 0]\r\n\r\nupdate(0, data.length - 1)\r\nupdate(0, data.length - 1)\r\nupdate(0, data.length - 1)\r\nupdate(0, data.length - 1)\r\nupdate(0, data.length - 1)\r\nupdate(0, data.length - 1)\r\nupdate(0, data.length"}], "metadata": {"task_id": "fcitx5-android/177", "ground_truth": "        } else {\r\n            data[0] = end\r\n            data[1] = start\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorRange.kt"}}
{"prompt": "fun consume(start: Int, end: Int = start): Boolean {\r\n        if (current.rangeEquals(start, end)) {\r\n            return true\r\n        }\r\n        var matched = false\r\n        while (predictions.isNotEmpty()) {\r\n            if (predictions.removeFirst().rangeEquals(start, end)) {\r\n                matched = true\r\n                break\r\n            }\r\n        }\r\n        current.update(start, end)", "choices": [{"text": ".update(start, end)\r\n        return matched\r\n}\r\n\r\nfun consumeUntil(start: Int, end: Int = start): Boolean {\r\n        if (current.rangeEquals(start, end)) {\r\n            return true\r\n        }\r\n        var matched = false\r\n        while (predictions.isNotEmpty()) {\r\n            if (predictions.removeFirst().rangeEquals(start, end)) {\r\n                matched = true\r\n                break\r\n            }\r\n        }\r\n        current.update(start, end)\r\n        return"}], "metadata": {"task_id": "fcitx5-android/182", "ground_truth": "        if (!matched) {\r\n            Timber.d(\"unable to consume [$start,$end]\")\r\n        }\r\n        return matched\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorTracker.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        val position = parent.getChildAdapterPosition(view)\r\n        if (position != index) {", "choices": [{"text": "\r\n            return\r\n        }\r\n        outRect.left = 0\r\n        outRect.top = 0\r\n        outRect.right = parent.getWidth()\r\n        outRect.bottom = parent.getHeight()\r\n    }\r\n"}], "metadata": {"task_id": "fcitx5-android/186", "ground_truth": "            outRect.set(0, 0, 0, 0)\r\n        } else {\r\n            outRect.set(0, dividerHeight, 0, 0)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\dialog\\SingleDividerDecoration.kt"}}
{"prompt": "import splitties.views.imageDrawable\nimport splitties.resources.drawable\nimport org.fcitx.fcitx5.android.R\nimport androidx.annotation.DrawableRes\nprivate fun iconButton(@DrawableRes icon: Int) = GImageButton(ctx).apply {\r\n        image.imageDrawable = drawable(icon)!!.apply {", "choices": [{"text": "\r\n        image.imageDrawable = imageDrawable(icon)!!.apply {\r\n        }\r\n    }\r\npublic class GImageButton extends GButton {\r\n    public GImageButton(Context ctx) {\r\n        super(ctx);\r\n    }\r\n    public GImageButton(Context ctx, AttributeSet attrs) {\r\n        super(ctx, attrs);\r\n    }\r\n    public GImageButton(Context ctx, AttributeSet attrs, int defStyle) {\r\n        super(ctx, attrs, defStyle);\r\n    }\r\n    public"}], "metadata": {"task_id": "fcitx5-android/190", "ground_truth": "            setTint(theme.altKeyTextColor)\r\n        }\r\n        padding = dp(10)\r\n        applyBorderedBackground()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingUi.kt"}}
{"prompt": "import android.view.View\nfun updateSelection(hasSelection: Boolean, userSelection: Boolean) {\r\n        selectButton.isActivated = (hasSelection || userSelection)\r\n        if (hasSelection) {\r\n            selectAllButton.apply {\r\n                visibility = View.GONE\r\n            }\r\n            cutButton.apply {\r\n                visibility = View.VISIBLE\r\n            }\r\n        } else {\r\n            selectAllButton.apply {\r\n                visibility = View.VISIBLE\r\n            }", "choices": [{"text": ".apply {\r\n                visibility = View.GONE\r\n            }\r\n            cutButton.apply {\r\n                visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "fcitx5-android/191", "ground_truth": "            cutButton.apply {\r\n                visibility = View.GONE\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingUi.kt"}}
{"prompt": "fun setValues(values: Map<String, String>) {\r\n        table.apply {\r\n            removeAllViews()", "choices": [{"text": "\r\n            for (let i = 0; i < values.length; i++) {\r\n                table.appendRow(values[values[i]]);\r\n            }\r\n        }\r\n    }\r\n\r\nexport default {\r\n    setValues,\r\n};\r\n"}], "metadata": {"task_id": "fcitx5-android/201", "ground_truth": "            values.forEach { (k, v) ->\r\n                addRow(k, v)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editorinfo\\EditorInfoUi.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.data.theme.Theme\nimport android.view.View\nprivate fun recreateInputView(theme: Theme) {\r\n        // InputView should be created first in onCreateInputView\r\n        // setInputView should be used to 'replace' current InputView only", "choices": [{"text": "\r\n        View inputView = theme.getInputView();\r\n        if (inputView == null) {\r\n                inputView = onCreateInputView(theme);\r\n                theme.setInputView(inputView);\r\n        }\r\n        return inputView;\r\n}\r\nprivate fun onCreateInputView(theme: Theme) {\r\n        return null;\r\n}\r\nprivate fun setInputView(inputView: View) {\r\n        return null;\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/203", "ground_truth": "        InputView(this, fcitx, theme).also {\r\n            inputView = it\r\n            setInputView(it)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "import timber.log.Timber\nimport android.view.View\noverride fun onFinishInputView(finishingInput: Boolean) {\r\n        Timber.d(\"onFinishInputView: finishingInput=$finishingInput\")\r\n        currentInputConnection?.finishComposingText()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "fcitx5-android/220", "ground_truth": "        postFcitxJob {\r\n            focus(false)\r\n        }\r\n        inputView?.finishInput()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "import android.view.KeyEvent\noverride fun onUnbindInput() {\r\n        cachedKeyEvents.evictAll()\r\n        cachedKeyEventIndex = 0\r\n        cursorUpdateIndex = 0\r\n        // currentInputBinding can be null on some devices under some special Multi-screen mode\r\n        val uid = currentInputBinding?.uid ?: return", "choices": [{"text": "\r\n        if (uid) {\r\n            currentInputBinding.unbindInput(uid)\r\n            currentInputBinding = null\r\n        }\r\n}\r\noverride fun onBindInput(inputBinding) {\r\n        currentInputBinding = inputBinding\r\n        if (currentInputBinding) {\r\n            currentInputBinding.bindInput(currentInputBinding.uid)\r\n        }\r\n}\r\noverride fun onKeyEvent(keyEvent) {\r\n        cachedKeyEvents.add(keyEvent)\r\n        cachedKeyEventIndex = cachedKeyEvents.size()"}], "metadata": {"task_id": "fcitx5-android/222", "ground_truth": "        Timber.d(\"onUnbindInput: uid=$uid\")\r\n        postFcitxJob {\r\n            deactivate(uid)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "override fun setEnabled(enabled: Boolean) {", "choices": [{"text": ") {\n  if (enabled === undefined) {\n    return;\n  }\n\n  if (enabled === true) {\n    return;\n  }\n\n  if (enabled === false) {\n    return;\n  }\n\n  if (enabled === null) {\n    return;\n  }\n\n  if (enabled === undefined) {\n    return;\n  }\n\n  if (enabled === true) {\n    return;\n  }\n\n  if (enabled === false) {\n    return;\n  }\n\n  if (enabled === null"}], "metadata": {"task_id": "fcitx5-android/230", "ground_truth": "        super.setEnabled(enabled)\r\n        if (!enabled) {\r\n            isPressed = false\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\CustomGestureView.kt"}}
{"prompt": "import splitties.views.dsl.core.view\nimport org.fcitx.fcitx5.android.input.keyboard.KeyDef.Appearance.Variant\nimport org.fcitx.fcitx5.android.data.theme.Theme\nimport org.fcitx.fcitx5.android.R\nimport androidx.annotation.DrawableRes\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nimport android.content.res.ColorStateList\nprivate fun ImageView.configure(theme: Theme, @DrawableRes src: Int, variant: Variant) = apply {\r\n    isClickable = false\r\n    isFocusable = false\r\n    imageTintList = ColorStateList.valueOf(\r\n        when (variant) {\r\n            Variant.Normal -> theme.keyTextColor\r\n            Variant.AltForeground, Variant.Alternative -> theme.altKeyTextColor", "choices": [{"text": "\r\n        }\r\n    )\r\n    setImageDrawable(src)\r\n}\r\nprivate fun ImageView.configure(theme: Theme, src: Int, variant: Variant) = apply {\r\n    isClickable = false\r\n    isFocusable = false\r\n    imageTintList = ColorStateList.valueOf(\r\n        when (variant) {\r\n            Variant.Normal -> theme.keyTextColor\r\n            Variant.AltForeground, Variant.Alternative -> theme.altKeyTextColor\r\n        }\r\n    )\r\n    setImageDrawable(src)\r\n"}], "metadata": {"task_id": "fcitx5-android/247", "ground_truth": "            Variant.Accent -> theme.accentKeyTextColor\r\n        }\r\n    )\r\n    imageResource = src\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\KeyView.kt"}}
{"prompt": "private fun switchCapsState(lock: Boolean = false) {\r\n        capsState = if (lock) when (capsState) {\r\n            CapsState.Lock -> CapsState.None\r\n            else -> CapsState.Lock\r\n        } else when (capsState) {\r\n            CapsState.None -> CapsState.Once", "choices": [{"text": ";\r\n            CapsState.Once -> CapsState.None\r\n        }\r\n        return capsState;\r\n    }\r\n\r\n    private fun switchCameraState(lock: Boolean = false) {\r\n        cameraState = if (lock) when (cameraState) {\r\n            CameraState.Lock -> CameraState.None\r\n            else -> CameraState.Lock\r\n        } else when (cameraState) {\r\n            CameraState.None -> CameraState.Once\r\n        }\r\n        return cameraState;\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "fcitx5-android/255", "ground_truth": "            else -> CapsState.None\r\n        }\r\n        updateCapsButtonIcon()\r\n        updateAlphabetKeys()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\TextKeyboard.kt"}}
{"prompt": "fun forUid(uid: Int): String {\r\n        val cached = get(uid)\r\n        if (cached != null) return cached\r\n        // returns \"${sharedUserIdName}:${uid}\" rather than package name if app uses sharedUserId\r\n        val name = ctx.packageManager.getNameForUid(uid)\r\n        if (name != null) {\r\n            // strip :uid to make it constant across devices\r\n            val pkgName = name.substringBeforeLast(':')", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/260", "ground_truth": "            put(uid, pkgName)\r\n            return pkgName\r\n        }\r\n        return uid.toString()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\PackageNameCache.kt"}}
{"prompt": "var onTabClick\nvar selected\nval label\n fun activateTab(index: Int) {\r\n        if (index == selected) return\r\n        if (selected >= 0) {", "choices": [{"text": "\r\n        selected = index\r\n        if (onTabClick) {\r\n            onTabClick(index, label)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "fcitx5-android/271", "ground_truth": "            tabs[selected].setActive(false)\r\n        }\r\n        tabs[index].setActive(true)\r\n        selected = index\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerTabsUi.kt"}}
{"prompt": "import kotlin.math.floor\noverride fun onChangeFocus(x: Float, y: Float): Boolean {\r\n        var newColumn = floor(x / keySize).toInt()\r\n        if (newColumn < -2 || newColumn > columnCount + 1) {\r\n            onDismissSelf(this)\r\n            return true\r\n        }\r\n        newColumn = limitIndex(newColumn, columnCount)\r\n        val newFocus = columnOrder[newColumn]\r\n        if (newFocus < keyViews.size) {\r\n            markInactive(focusedIndex)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/286", "ground_truth": "            markFocus(newFocus)\r\n            focusedIndex = newFocus\r\n        }\r\n        return false\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\popup\\PopupMenuUi.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.daemon.launchOnReady\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\noverride fun onAttached() {\r\n        fcitx.launchOnReady {\r\n            val data = it.statusArea()", "choices": [{"text": "[R.id.launch_on_ready_data];\r\n            if (data == null) {\r\n                return;\r\n            }\r\n            kotlinx.coroutines.launch.launchOnReady(data);\r\n        }\r\n}\r\noverride fun onDetached() {\r\n        fcitx.launchOnReady {\r\n            val data = it.statusArea()[R.id.launch_on_ready_data];\r\n            if (data == null) {\r\n                return;\r\n            }\r\n            kotlinx"}], "metadata": {"task_id": "fcitx5-android/294", "ground_truth": "            service.lifecycleScope.launch {\r\n                onStatusAreaUpdate(data)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\status\\StatusAreaWindow.kt"}}
{"prompt": "val fcitx FcitxConnection\nval adapter StatusAreaAdapter\nval staticEntries", "choices": [{"text": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}], "metadata": {"task_id": "fcitx5-android/295", "ground_truth": "override fun onDetached() {\r\n        popupMenu?.dismiss()\r\n        popupMenu = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\status\\StatusAreaWindow.kt"}}
{"prompt": "import androidx.activity.OnBackPressedDispatcher\noverride fun enterMultiSelect(onBackPressedDispatcher: OnBackPressedDispatcher) {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/310", "ground_truth": "        if (shouldShowFab) {\r\n            fab.hide()\r\n        }\r\n        super.enterMultiSelect(onBackPressedDispatcher)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\BaseDynamicListUi.kt"}}
{"prompt": "override fun exitMultiSelect() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "fcitx5-android/311", "ground_truth": "        if (shouldShowFab) {\r\n            fab.show()\r\n        }\r\n        super.exitMultiSelect()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\BaseDynamicListUi.kt"}}
{"prompt": "import android.widget.ImageButton\nimport android.widget.CheckBox\nimport android.view.View\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun <T> Context.DynamicListUi(\r\n    mode: BaseDynamicListUi.Mode<T>,\r\n    initialEntries: List<T>,\r\n    enableOrder: Boolean = false,\r\n    initCheckBox: (CheckBox.(T) -> Unit) = { visibility = View.GONE },\r\n    initSettingsButton: (ImageButton.(T) -> Unit) = { visibility = View.GONE },\r\n    show: (T) -> String\r\n): BaseDynamicListUi<T> = object :\r\n    BaseDynamicListUi<T>(\r\n        this,\r\n        mode,\r\n        initialEntries,\r\n        enableOrder,\r\n        initCheckBox,\r\n        initSettingsButton\r\n    ) {\r\n    init {", "choices": [{"text": " }\r\n    this.show = show\r\n}\r\n\r\n@Suppress(\"FunctionName\")\r\nfun <T> Context.DynamicListUi(\r\n    mode: BaseDynamicListUi.Mode<T>,\r\n    initialEntries: List<T>,\r\n    enableOrder: Boolean = false,\r\n    initCheckBox: (CheckBox.(T) -> Unit) = { visibility = View.GONE },\r\n    initSettingsButton: (ImageButton.(T) -> Unit) = { visibility = View.GONE },\r\n    show: (T) -> String,"}], "metadata": {"task_id": "fcitx5-android/324", "ground_truth": "        addTouchCallback()\r\n    }\r\n\r\n    override fun showEntry(x: T): String = show(x)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "import android.widget.ImageButton\nimport android.widget.CheckBox\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun <T> Context.CheckBoxListUi(\r\n    initialEntries: List<T>,\r\n    initCheckBox: (CheckBox.(T) -> Unit),\r\n    initSettingsButton: (ImageButton.(T) -> Unit),\r\n    show: (T) -> String\r\n) = DynamicListUi(\r\n    BaseDynamicListUi.Mode.Immutable(),\r\n    initialEntries,", "choices": [{"text": " initCheckBox,\r\n    initSettingsButton,\r\n    show\r\n)\r\n\r\n@Suppress(\"FunctionName\")\r\nfun <T> Context.ImageButtonListUi(\r\n    initialEntries: List<T>,\r\n    initCheckBox: (CheckBox.(T) -> Unit),\r\n    initSettingsButton: (ImageButton.(T) -> Unit),\r\n    show: (T) -> String\r\n) = DynamicListUi(\r\n    BaseDynamicListUi.Mode.Immutable(),\r\n    initialEntries,\r\n    initCheckBox,\r\n    initSettings"}], "metadata": {"task_id": "fcitx5-android/325", "ground_truth": "    false,\r\n    initCheckBox,\r\n    initSettingsButton,\r\n    show\r\n)", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "import splitties.views.dsl.core.verticalMargin\nimport splitties.views.dsl.core.verticalLayout\nimport splitties.views.dsl.core.styles.AndroidStyles\nimport splitties.views.dsl.core.matchParent\nimport splitties.views.dsl.core.lParams\nimport splitties.views.dsl.core.add\nimport splitties.dimensions.dp\nimport org.fcitx.fcitx5.android.R\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.StringRes\nimport android.view.View\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun Context.ProgressBarDialogIndeterminate(@StringRes title: Int): AlertDialog.Builder {\r\n    val androidStyles = AndroidStyles(this)\r\n    return AlertDialog.Builder(this)\r\n        .setTitle(title)\r\n        .setView(verticalLayout {\r\n            add(androidStyles.progressBar.horizontal {\r\n                isIndeterminate = true\r\n            }, lParams {\r\n                width = matchParent\r\n                verticalMargin = dp(20)", "choices": [{"text": "\n            })\r\n        })\r\n       .setNegativeButton(androidStyles.progressBar.horizontal.cancel, lParams {\r\n            width = matchParent\r\n            verticalMargin = dp(20)\r\n        })\r\n       .setPositiveButton(androidStyles.progressBar.horizontal.ok, lParams {\r\n            width = matchParent\r\n            verticalMargin = dp(20)\r\n        })\r\n       .setNegativeButton(androidStyles.progressBar.horizontal.cancel, lParams {\r\n            width = matchParent\r\n            verticalMargin"}], "metadata": {"task_id": "fcitx5-android/326", "ground_truth": "                horizontalMargin = dp(26)\r\n            })\r\n        })\r\n        .setCancelable(false)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport androidx.lifecycle.LifecycleCoroutineScope\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.StringRes\nimport android.content.Context\nfun LifecycleCoroutineScope.withLoadingDialog(\r\n    context: Context,\r\n    @StringRes title: Int = R.string.loading,\r\n    threshold: Long = 200L,\r\n    action: suspend () -> Unit\r\n) {\r\n    var loadingDialog: AlertDialog? = null\r\n    val loadingJob = launch {\r\n        delay(threshold)\r\n        loadingDialog = context.ProgressBarDialogIndeterminate(title).show()\r\n    }\r\n    launch {", "choices": [{"text": "\r\n        action()\r\n        loadingDialog.dismiss()\r\n    }\r\n    return loadingJob\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/327", "ground_truth": "        action()\r\n        loadingJob.cancelAndJoin()\r\n        loadingDialog?.dismiss()\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "import splitties.views.dsl.core.wrapContent\nimport splitties.views.dsl.core.textView\nimport android.view.textclassifier.TextClassifier\nimport android.view.ViewGroup.MarginLayoutParams\nimport android.view.ViewGroup\nimport android.os.Build\nimport android.graphics.Typeface\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int) = Holder(\r\n        parent.textView {\r\n            textSize = 12f\r\n            typeface = Typeface.MONOSPACE\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                setTextClassifier(TextClassifier.NO_OP)\r\n            }\r\n            layoutParams = MarginLayoutParams(wrapContent, wrapContent).apply {", "choices": [{"text": "\r\n                margin = 0\r\n            }\r\n        }\r\n    )\r\n\r\noverride fun onBindViewHolder(holder: Holder, position: Int) = Holder(\r\n        holder.textView {\r\n            textSize = 12f\r\n            typeface = Typeface.MONOSPACE\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                setTextClassifier(TextClassifier.NO_OP)\r\n            }\r\n            layoutParams = MarginLayoutParams(wrapContent, wrapContent).apply {"}], "metadata": {"task_id": "fcitx5-android/337", "ground_truth": "                marginStart = dp(4)\r\n                marginEnd = dp(4)\r\n            }\r\n        }\r\n    )", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogAdapter.kt"}}
{"prompt": "val rv\nvar logcat Logcat?\nval logAdapter", "choices": [{"text": "\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval logcat?\nval"}], "metadata": {"task_id": "fcitx5-android/338", "ground_truth": "override fun onDetachedFromWindow() {\r\n        logcat?.shutdownLogFlow()\r\n        super.onDetachedFromWindow()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogView.kt"}}
{"prompt": "override fun onStop() {", "choices": [{"text": "\n\t\tif (this.game.data.gameOver) {\n\t\t\tthis.game.data.gameOver = false;\n\t\t\tthis.game.state.start('GameOver');\n\t\t}\n\t\telse {\n\t\t\tthis.game.data.gameOver = true;\n\t\t\tthis.game.state.start('GameOver');\n\t\t}\n\t},\n\n\t// Update is called once per frame\n\tupdate: function() {\n\n\t},\n\n\t// Draw is called once per frame\n\tdraw: function() {\n\n"}], "metadata": {"task_id": "fcitx5-android/342", "ground_truth": "        viewModel.fcitx.runIfReady {\r\n            save()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainActivity.kt"}}
{"prompt": "val viewModel MainViewModel", "choices": [{"text": " {\n    constructor() {\n        super();\n    }\n\n    static get properties() {\n        return {\n            id: {\n                type: String,\n                required: true,\n            },\n            name: {\n                type: String,\n                required: true,\n            },\n            description: {\n                type: String,\n                required: true,\n            },\n            created: {\n                type: Date,\n                required: true,\n            },\n            updated: {\n                type: Date,\n                required: true,\n            },\n           "}], "metadata": {"task_id": "fcitx5-android/343", "ground_truth": "override fun onStart() {\r\n        super.onStart()\r\n        viewModel.enableAboutButton()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nimport androidx.preference.PreferenceCategory\nimport androidx.annotation.StringRes\nimport androidx.annotation.IdRes\nimport androidx.annotation.DrawableRes\nprivate fun PreferenceCategory.addDestinationPreference(\r\n        @StringRes title: Int,\r\n        @DrawableRes icon: Int,\r\n        @IdRes destination: Int", "choices": [{"text": ",\r\n        @StringRes description: Int\r\n) {\r\n    PreferenceCategory.addDestinationPreference(\r\n            title: title,\r\n            icon: icon,\r\n            destination: destination,\r\n            description: description\r\n    );\r\n}\r\n\r\nprivate fun PreferenceCategory.addDestinationPreference(\r\n        @StringRes title: Int,\r\n        @DrawableRes icon: Int,\r\n        @IdRes destination: Int,\r\n        @StringRes description: Int\r\n) {\r\n    PreferenceCategory.addDestinationPreference(\r\n            title"}], "metadata": {"task_id": "fcitx5-android/345", "ground_truth": "    ) {\r\n        addPreference(title, icon = icon) {\r\n            findNavController().navigate(destination)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainFragment.kt"}}
{"prompt": "import androidx.preference.PreferenceDialogFragmentCompat\nimport androidx.preference.Preference\nimport androidx.preference.EditTextPreference\nfun <T : EditTextPreference> T.restore() {\r\n    // must `callChangeListener` before `setText`\r\n    // https://android.googlesource.com/platform/frameworks/support/+/872b66efac82f0b0a3fac4bb14a789464ab19f96/preference/preference/src/main/java/androidx/preference/EditTextPreferenceDialogFragmentCompat.java#146\r\n    (def() as? String)?.let {", "choices": [{"text": "\r\n        T.callChangeListener()\r\n    }\r\n    (def() as? String)?.let {\r\n        T.setText(def())\r\n    }\r\n    (def() as? String)?.let {\r\n        T.setText(def())\r\n    }\r\n    (def() as? String)?.let {\r\n        T.setText(def())\r\n    }\r\n    (def() as? String)?.let {\r\n        T.setText(def())\r\n    }\r\n    (def() as?"}], "metadata": {"task_id": "fcitx5-android/346", "ground_truth": "        if (callChangeListener(it)) {\r\n            text = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "import androidx.preference.Preference\nimport androidx.preference.ListPreference\nfun <T : ListPreference> T.restore() {\r\n    (def() as? String)?.let {", "choices": [{"text": "\r\n        (def() as? String)?.restore()\r\n    }\r\n    (def() as? String)?.restore()\r\n    (def() as? String)?.restore()\r\n    (def() as? String)?.restore()\r\n    (def() as? String)?.restore()\r\n    (def() as? String)?.restore()\r\n    (def() as? String)?.restore()\r\n    (def() as? String)?.restore()\r\n    (def() as? String)?.restore()\r\n    (def() as"}], "metadata": {"task_id": "fcitx5-android/347", "ground_truth": "        if (callChangeListener(it)) {\r\n            value = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "import androidx.preference.SwitchPreference\nimport androidx.preference.Preference\nfun <T : SwitchPreference> T.restore() {\r\n    (def() as? Boolean)?.let {", "choices": [{"text": "\r\n        (def() as? Boolean)?.restore()\r\n    }\r\n    (def() as? Boolean)?.restore()\r\n    (def() as? Boolean)?.restore()\r\n    (def() as? Boolean)?.restore()\r\n    (def() as? Boolean)?.restore()\r\n    (def() as? Boolean)?.restore()\r\n    (def() as? Boolean)?.restore()\r\n    (def() as? Boolean)?.restore()\r\n    (def() as? Boolean)?.restore()\r\n    (def() as"}], "metadata": {"task_id": "fcitx5-android/348", "ground_truth": "        if (callChangeListener(it)) {\r\n            isChecked = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.core.data.DataManager\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport androidx.lifecycle.lifecycleScope\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        lifecycleScope.launch {\r\n            val needsReload = if (DataManager.synced) {\r\n                val (newPluginsToLoad, _) = DataManager.detectPlugins()\r\n                newPluginsToLoad != DataManager.getLoadedPlugins()\r\n            } else {\r\n                DataManager.waitSynced()", "choices": [{"text": "\r\n            }\r\n\r\n            if (needsReload) {\r\n                DataManager.loadPlugins()\r\n            }\r\n        }\r\n        return super.onCreatePreferences(savedInstanceState, rootKey)\r\n    }\r\n\r\noverride fun onSaveInstanceState(savedInstanceState: Bundle?, rootKey: String?) {\r\n        lifecycleScope.launch {\r\n            super.onSaveInstanceState(savedInstanceState, rootKey)\r\n            DataManager.savePlugins()\r\n        }\r\n        return super.onSaveInstanceState(savedInstanceState, rootKey)\r\n"}], "metadata": {"task_id": "fcitx5-android/357", "ground_truth": "                false\r\n            }\r\n            preferenceScreen = createPreferenceScreen(needsReload)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\PluginFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.core.data.DataManager\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.suspendCancellableCoroutine\nprivate suspend fun DataManager.waitSynced() = suspendCancellableCoroutine {\r\n        if (synced)\r\n            it.resumeWith(Result.success(Unit))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/358", "ground_truth": "        else\r\n            addOnNextSyncedCallback {\r\n                it.resumeWith(Result.success(Unit))\r\n            }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\PluginFragment.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n\t\tif (this.game.data.player == null) {\n\t\t\tthis.game.data.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t} else {\n\t\t\tthis.game.data.player.destroy();\n\t\t"}], "metadata": {"task_id": "fcitx5-android/360", "ground_truth": "        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\addon\\AddonListFragment.kt"}}
{"prompt": "private fun setValue(value: Int) {", "choices": [{"text": "(value: Int): Int {\n  if (value < 0) {\n    return 0;\n  } else if (value > 100) {\n    return 100;\n  } else {\n    return value;\n  }\n}\n"}], "metadata": {"task_id": "fcitx5-android/363", "ground_truth": "        if (callChangeListener(value)) {\r\n            persistInt(value)\r\n            notifyChanged()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\DialogSeekBarPreference.kt"}}
{"prompt": "var raw RawConfig\nval fcitx FcitxConnection\nval scope\n private fun save() {", "choices": [{"text": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}], "metadata": {"task_id": "fcitx5-android/369", "ground_truth": "        if (!configLoaded) return\r\n        fcitx.launchOnReady {\r\n            saveConfig(it, raw[\"cfg\"])\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxPreferenceFragment.kt"}}
{"prompt": "var raw RawConfig\nval scope\nval fcitx FcitxConnection", "choices": [{"text": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}], "metadata": {"task_id": "fcitx5-android/370", "ground_truth": "override fun onStart() {\r\n        super.onStart()\r\n        viewModel.setToolbarTitle(getPageTitle())\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxPreferenceFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.daemon.launchOnReady\nimport org.fcitx.fcitx5.android.R\nimport android.os.Build\nprivate fun updateIMState() {\r\n        if (isInitialized) {\r\n            fcitx.launchOnReady { f ->\r\n                f.setEnabledIme(ui.entries.map { it.uniqueName }.toTypedArray())\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {", "choices": [{"text": "\r\n                    f.setEnabledIme(ui.entries.map { it.uniqueName }.toTypedArray())\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                        f.setEnabledIme(ui.entries.map { it.uniqueName }.toTypedArray())\r\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                            f.setEnabledIme(ui.entries.map { it.uniqueName }.toTypedArray())"}], "metadata": {"task_id": "fcitx5-android/377", "ground_truth": "                    SubtypeManager.syncWith(f.enabledIme())\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        if (::ui.isInitialized) {", "choices": [{"text": "\r\n        if (::ui.isPlaying) {\r\n            ::ui.isPlaying = false;\r\n        }\r\n    }\r\n\r\n    if (::ui.isPaused) {\r\n        ::ui.isPaused = false;\r\n    }\r\n\r\n    if (::ui.isPlaying) {\r\n        ::ui.isPlaying = false;\r\n    }\r\n\r\n    if (::ui.isPaused) {\r\n        ::ui.isPaused = false;\r\n    }\r\n\r\n    if"}], "metadata": {"task_id": "fcitx5-android/379", "ground_truth": "            ui.exitMultiSelect()\r\n        }\r\n        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n\t\tif (this.game.data.player == null) {\n\t\t\tthis.game.data.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t} else {\n\t\t\tthis.game.data.player.destroy();\n\t\t"}], "metadata": {"task_id": "fcitx5-android/380", "ground_truth": "        if (::ui.isInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "\ufeffusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\n\r\n"}], "metadata": {"task_id": "fcitx5-android/384", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\ListFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.data.pinyin.CustomPhraseManager\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.NonCancellable\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.lifecycleScope\nprivate fun saveConfig() {\r\n        if (!dustman.dirty) return\r\n        resetDustman()\r\n        lifecycleScope.launch(NonCancellable + Dispatchers.IO) {\r\n            CustomPhraseManager.save(ui.entries.toTypedArray())", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/387", "ground_truth": "            viewModel.fcitx.runOnReady {\r\n                reloadPinyinCustomPhrase()\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinCustomPhraseFragment.kt"}}
{"prompt": "override fun onStop() {", "choices": [{"text": "\n\t\tif (this.game.data.gameOver) {\n\t\t\tthis.game.data.gameOver = false;\n\t\t\tthis.game.state.start('GameOver');\n\t\t}\n\t\telse {\n\t\t\tthis.game.data.gameOver = true;\n\t\t\tthis.game.state.start('GameOver');\n\t\t}\n\t},\n\n\t// Update is called once per frame\n\tupdate: function() {\n\n\t},\n\n\t// Draw is called once per frame\n\tdraw: function() {\n\n"}], "metadata": {"task_id": "fcitx5-android/389", "ground_truth": "        saveConfig()\r\n        ui.exitMultiSelect()\r\n        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinCustomPhraseFragment.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\nimport android.app.NotificationChannel\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        createNotificationChannel()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "fcitx5-android/391", "ground_truth": "        registerLauncher()\r\n        ui.addOnItemChangedListener(this)\r\n        resetDustman()\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        reloadDict()\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "()\r\n}\r\n\r\noverride fun onStart() {\r\n        reloadDict()\r\n        viewModel.enableToolbarEditButton()\r\n}\r\n\r\noverride fun onBack() {\r\n        viewModel.disableToolbarEditButton()\r\n}\r\n\r\noverride fun onNext() {\r\n        viewModel.disableToolbarEditButton()\r\n}\r\n\r\noverride fun onPrev() {\r\n        viewModel.disableToolbarEditButton()\r\n}\r\n\r\noverride fun onSearch() {\r\n        viewModel.disableToolbarEditButton()\r\n}\r\n\r"}], "metadata": {"task_id": "fcitx5-android/400", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n\t\tif (this.game.data.player == null) {\n\t\t\tthis.game.data.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t} else {\n\t\t\tthis.game.data.player.destroy();\n\t\t"}], "metadata": {"task_id": "fcitx5-android/401", "ground_truth": "        if (uiInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        saveConfig()\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "()\r\n}\r\n\r\noverride fun onStart() {\r\n        saveConfig()\r\n        viewModel.enableToolbarEditButton()\r\n}\r\n\r\noverride fun onPause() {\r\n        saveConfig()\r\n        viewModel.disableToolbarEditButton()\r\n}\r\n\r\noverride fun onResume() {\r\n        saveConfig()\r\n        viewModel.enableToolbarEditButton()\r\n}\r\n\r\noverride fun onDestroy() {\r\n        saveConfig()\r\n        viewModel.disableToolbarEditButton()\r\n}\r\n\r\nfunction saveConfig()"}], "metadata": {"task_id": "fcitx5-android/406", "ground_truth": "        if (isInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PunctuationEditorFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {", "choices": [{"text": ";\nimport org.fcitx.fcitx5.android.R;\nimport org.fcitx.fcitx5.android.utils.Log;\nimport org.fcitx.fcitx5.android.utils.Toast;\nimport org.fcitx.fcitx5.android.utils.ViewUtils;\nimport org.fcitx.fcitx5.android.utils.ViewUtils.OnClickListener;\nimport org.fcitx.fcitx5.android.utils.ViewUtils.OnLongClickListener;\nimport org."}], "metadata": {"task_id": "fcitx5-android/407", "ground_truth": "        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PunctuationEditorFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        saveConfig()\r\n        if (isInitialized) {", "choices": [{"text": "\r\n            game.state.start('Game');\r\n        }\r\n}\r\n\r\noverride fun onStart() {\r\n        saveConfig()\r\n        if (isInitialized) {\r\n            game.state.start('Game');\r\n        }\r\n}\r\n\r\noverride fun onPause() {\r\n        saveConfig()\r\n        if (isInitialized) {\r\n            game.state.pause('Game');\r\n        }\r\n}\r\n\r\noverride fun onResume() {\r\n        saveConfig()\r\n        if (isInitialized)"}], "metadata": {"task_id": "fcitx5-android/410", "ground_truth": "            ui.exitMultiSelect()\r\n        }\r\n        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseEditFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {", "choices": [{"text": ";\nimport org.fcitx.fcitx5.android.R;\nimport org.fcitx.fcitx5.android.utils.Log;\nimport org.fcitx.fcitx5.android.utils.Toast;\nimport org.fcitx.fcitx5.android.utils.ViewUtils;\nimport org.fcitx.fcitx5.android.utils.ViewUtils.OnClickListener;\nimport org.fcitx.fcitx5.android.utils.ViewUtils.OnLongClickListener;\nimport org."}], "metadata": {"task_id": "fcitx5-android/411", "ground_truth": "        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseEditFragment.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\nimport android.app.NotificationChannel\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        createNotificationChannel()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "fcitx5-android/414", "ground_truth": "        registerLauncher()\r\n        ui.addOnItemChangedListener(this)\r\n        resetDustman()\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.data.quickphrase.QuickPhrase\nimport org.fcitx.fcitx5.android.core.reloadQuickPhrase\noverride fun onStop() {\r\n        reloadQuickPhrase()\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "\r\n}\r\noverride fun onStart() {\r\n        viewModel.enableToolbarEditButton()\r\n}\r\noverride fun onPause() {\r\n        viewModel.disableToolbarEditButton()\r\n}\r\noverride fun onResume() {\r\n        viewModel.enableToolbarEditButton()\r\n}\r\noverride fun onDestroy() {\r\n        viewModel.disableToolbarEditButton()\r\n}\r\noverride fun onDestroyView() {\r\n        viewModel.disableToolbarEditButton()\r\n}\r\noverride fun onDestroyViewModel() {\r\n        viewModel.disableToolbarEditButton"}], "metadata": {"task_id": "fcitx5-android/417", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {", "choices": [{"text": ";\nimport org.fcitx.fcitx5.android.R;\nimport org.fcitx.fcitx5.android.utils.Log;\nimport org.fcitx.fcitx5.android.utils.Toast;\nimport org.fcitx.fcitx5.android.utils.ViewUtils;\nimport org.fcitx.fcitx5.android.utils.ViewUtils.OnClickListener;\nimport org.fcitx.fcitx5.android.utils.ViewUtils.OnLongClickListener;\nimport org."}], "metadata": {"task_id": "fcitx5-android/418", "ground_truth": "        if (uiInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?", "choices": [{"text": ",\r\n    ): View\r\n{\r\n    return super.onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    )\r\n}\r\n\r\noverride fun onStart()\r\n{\r\n    super.onStart()\r\n}\r\n\r\noverride fun onResume()\r\n{\r\n    super.onResume()\r\n}\r\n\r\noverride fun onPause()\r\n{\r\n    super.onPause()\r\n}\r\n\r\noverride"}], "metadata": {"task_id": "fcitx5-android/421", "ground_truth": "    ): View {\r\n        resetDustman()\r\n        ui.addOnItemChangedListener(this)\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        reloadConfig()\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "()\r\n        viewModel.enableToolbarEditButton()\r\n}\r\n\r\noverride fun onStart() {\r\n        reloadConfig()\r\n        viewModel.disableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n}\r\n\r\noverride fun onBack() {\r\n        viewModel.disableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n}\r\n\r\noverride fun onReload() {\r\n        reloadConfig()\r\n        viewModel.disableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n}\r\n\r"}], "metadata": {"task_id": "fcitx5-android/432", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.data.theme.Theme\nprivate inline fun whenHasBackground(\r\n        block: BackgroundStates.(Theme.Custom.CustomBackground) -> Unit,", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/436", "ground_truth": "    ) {\r\n        if (theme.backgroundImage != null)\r\n            block(backgroundStates, theme.backgroundImage!!)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun delete() {\r\n        setResult(\r\n            Activity.RESULT_OK,\r\n            Intent().apply {", "choices": [{"text": "\r\n        );\r\n        finish();\r\n}\r\npublic static class fun extends Activity {\r\n        public fun delete() {\r\n                setResult(\r\n                    Activity.RESULT_OK,\r\n                    Intent().apply {\r\n                    }\r\n                );\r\n                finish();\r\n        }\r\n}\r\npublic static class fun2 extends Activity {\r\n        public fun2() {\r\n                setResult(\r\n                    Activity.RESULT_OK,\r\n                    Intent().apply {\r\n                    }\r\n                );\r\n                finish();\r\n        }\r\n"}], "metadata": {"task_id": "fcitx5-android/439", "ground_truth": "                putExtra(RESULT, BackgroundResult.Deleted(theme.name))\r\n            }\r\n        )\r\n        finish()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "import splitties.views.dsl.core.view\nimport org.fcitx.fcitx5.android.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem) = when (item.itemId) {\r\n        android.R.id.home -> {", "choices": [{"text": "\r\n            splitties.views.dsl.core.view.view(\r\n                splitties.views.dsl.core.view.view(\r\n                    splitties.views.dsl.core.view.view(\r\n                        splitties.views.dsl.core.view.view(\r\n                            splitties.views.dsl.core.view.view(\r\n                                splitties.views.dsl.core.view.view(\r\n                                    splitties.views.dsl.core.view.view(\r\n                                        splitties."}], "metadata": {"task_id": "fcitx5-android/441", "ground_truth": "            cancel()\r\n            true\r\n        }\r\n        else -> super.onOptionsItemSelected(item)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "import splitties.views.dsl.core.Ui\nimport org.fcitx.fcitx5.android.data.theme.Theme\nimport android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        (holder.ui as ThemeThumbnailUi).apply {\r\n            val theme = entries[position]\r\n            setTheme(theme)\r\n            editButton.visibility = View.GONE\r\n            setChecked(position == selected)\r\n            root.setOnClickListener {", "choices": [{"text": "\r\n                @Override\r\n                public void onClick(View v) {\r\n                    selected = position\r\n                    notifyItemChanged(position)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    override fun onUnbindViewHolder(holder: ViewHolder) {\r\n        (holder.ui as ThemeThumbnailUi).apply {\r\n            val theme = entries[selected]\r\n            setTheme(theme)\r\n            editButton.visibility = View.VISIBLE\r\n            setChecked(false)\r\n            root.setOnClickListener {\r\n                @"}], "metadata": {"task_id": "fcitx5-android/444", "ground_truth": "                onClick(theme)\r\n                selected = position\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\SimpleThemeListAdapter.kt"}}
{"prompt": "val viewModel SetupViewModel\nvar prevButton Button\nval NOTIFY_ID", "choices": [{"text": "\nvar nextButton Button\nvar nextButton2 Button\nvar nextButton3 Button\nvar nextButton4 Button\nvar nextButton5 Button\nvar nextButton6 Button\nvar nextButton7 Button\nvar nextButton8 Button\nvar nextButton9 Button\nvar nextButton10 Button\nvar nextButton11 Button\nvar nextButton12 Button\nvar nextButton13 Button\nvar nextButton14 Button\nvar nextButton15 Button\nvar nextButton16 Button\nvar nextButton17 Button\nvar nextButton18 Button\nvar nextButton19 Button\nvar nextButton20 Button\nvar nextButton21 Button\nvar"}], "metadata": {"task_id": "fcitx5-android/470", "ground_truth": "override fun onResume() {\r\n        notificationManager.cancel(NOTIFY_ID)\r\n        super.onResume()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\setup\\SetupActivity.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?", "choices": [{"text": ",\r\n    ): View\r\n{\r\n    return super.onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    )\r\n}\r\n\r\noverride fun onStart()\r\n{\r\n    super.onStart()\r\n}\r\n\r\noverride fun onResume()\r\n{\r\n    super.onResume()\r\n}\r\n\r\noverride fun onPause()\r\n{\r\n    super.onPause()\r\n}\r\n\r\noverride"}], "metadata": {"task_id": "fcitx5-android/472", "ground_truth": "    ): View {\r\n        binding = FragmentSetupBinding.inflate(inflater)\r\n        sync()\r\n        return binding.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\setup\\SetupFragment.kt"}}
{"prompt": "import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onPositiveButtonClick(l: AlertDialog.() -> Boolean?): AlertDialog {", "choices": [{"text": "\nimport android.app.AlertDialog\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.content.IntentSender\nimport android.content.SharedPreferences\nimport android.content.SharedPreferences.Editor\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener2\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener3\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener4\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener5\nimport android.content.SharedPreferences.On"}], "metadata": {"task_id": "fcitx5-android/474", "ground_truth": "    positiveButton.setOnClickListener {\r\n        if (l.invoke(this) == true) dismiss()\r\n    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onNegativeButtonClick(l: AlertDialog.() -> Boolean): AlertDialog {", "choices": [{"text": "\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.content.IntentSender\nimport android.content.SharedPreferences\nimport android.content.SharedPreferences.Editor\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener2\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener3\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener4\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener5\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener6\nimport android."}], "metadata": {"task_id": "fcitx5-android/475", "ground_truth": "    negativeButton.setOnClickListener {\r\n        if (l.invoke(this)) dismiss()\r\n    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onNeutralButtonClick(l: AlertDialog.() -> Boolean): AlertDialog {", "choices": [{"text": "\nimport android.app.AlertDialog.Builder;\nimport android.app.AlertDialog.OnCancelListener;\nimport android.app.AlertDialog.OnDismissListener;\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.DialogInterface.OnCancelListener;\nimport android.content.DialogInterface.OnDismissListener;\nimport android.content.Intent;\nimport android.content.IntentSender;\nimport android.content.SharedPreferences;\nimport android.content.SharedPreferences.Editor;\n"}], "metadata": {"task_id": "fcitx5-android/476", "ground_truth": "    neutralButton.setOnClickListener {\r\n        if (l.invoke(this)) dismiss()\r\n    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "import java.io.Serializable\nimport android.os.Bundle\ninline fun <reified T : Serializable> Bundle.serializable(key: String): T? {\r\n    @Suppress(\"DEPRECATION\")\r\n    return getSerializable(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getSerializable(key, T::class.java)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/481", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getSerializable(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Bundle.kt"}}
{"prompt": "import android.os.Parcelable\nimport android.os.Bundle\ninline fun <reified T : Parcelable> Bundle.parcelable(key: String): T? {\r\n    // https://issuetracker.google.com/issues/240585930#comment6\r\n    @Suppress(\"DEPRECATION\")\r\n    return getParcelable(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getParcelable(key, T::class.java)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/482", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getParcelable(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Bundle.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.common.ipc.IClipboardEntryTransformer\nfun IClipboardEntryTransformer.descEquals(other: IClipboardEntryTransformer): Boolean {\r\n    return try {", "choices": [{"text": ";\r\n    } catch (e) {\r\n    }\r\n    return try {\r\n    } catch (e) {\r\n    }\r\n    return try {\r\n    } catch (e) {\r\n    }\r\n    return try {\r\n    } catch (e) {\r\n    }\r\n    return try {\r\n    } catch (e) {\r\n    }\r\n    return try {\r\n    } catch (e) {\r\n    }\r\n    return try {\r\n    } catch (e) {\r\n    }"}], "metadata": {"task_id": "fcitx5-android/484", "ground_truth": "        description!! == other.description!!\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\ClipboardEntryTransformer.kt"}}
{"prompt": "import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun borderDrawable(\r\n    width: Int,\r\n    @ColorInt stroke: Int,\r\n    @ColorInt background: Int = Color.TRANSPARENT", "choices": [{"text": ",\r\n    height: Int,\r\n    @ColorInt stroke: Int = Color.TRANSPARENT,\r\n    @ColorInt background: Int = Color.TRANSPARENT,\r\n) => {\r\n    return {\r\n        width: width,\r\n        stroke: stroke,\r\n        background: background,\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/490", "ground_truth": ") = GradientDrawable().apply {\r\n    setStroke(width, stroke)\r\n    setColor(background)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Drawable.kt"}}
{"prompt": "var target State\nvar pred\nvar raw\n fun push(event: Event, vararg booleanStates: Pair<B, Boolean>) {", "choices": [{"text": ") {\n  target = event.target;\n  pred = event.pred;\n  raw = event.raw;\n}\n fun pop(event: Event) {\n  target = event.target;\n  pred = event.pred;\n  raw = event.raw;\n}\n fun peek(event: Event) {\n  target = event.target;\n  pred = event.pred;\n  raw = event.raw;\n}\n fun peekNext(event: Event) {\n  target = event.target;\n  pred = event.pred;\n  raw ="}], "metadata": {"task_id": "fcitx5-android/493", "ground_truth": "        booleanStates.forEach {\r\n            setBooleanState(it.first, it.second)\r\n        }\r\n        push(event)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\EventStateMachine.kt"}}
{"prompt": "val value String\n fun set(vararg keys: String, str: String) {\r\n        if (keys.isEmpty()) return\r\n        var current = core", "choices": [{"text": "\r\n        for (var i = 0; i < keys.length; i++) {\r\n            current[keys[i]] = str\r\n        }\r\n        return current\r\n    }\r\n fun get(vararg keys: String) {\r\n        if (keys.isEmpty()) return\r\n        var current = core\r\n        for (var i = 0; i < keys.length; i++) {\r\n            current = current[keys[i]]\r\n        }\r\n        return current\r\n    }\r\n fun del(vararg keys: String) {\r\n"}], "metadata": {"task_id": "fcitx5-android/499", "ground_truth": "        keys.forEach {\r\n            current = current.getOrCreate(it)\r\n        }\r\n        current.value = str\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Ini.kt"}}
{"prompt": "import android.os.Parcelable\nimport android.os.Build\nimport android.content.Intent\ninline fun <reified T : Parcelable> Intent.parcelable(key: String): T? {\r\n    // https://issuetracker.google.com/issues/240585930#comment6\r\n    @Suppress(\"DEPRECATION\")\r\n    return getParcelableExtra(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getParcelableExtra(key, T::class.java)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/506", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getParcelableExtra(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Intent.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.async\nimport kotlinx.coroutines.Deferred\nfun getLogAsync(): Deferred<Result<List<String>>> = async {\r\n        runCatching {\r\n            Runtime.getRuntime()\r\n                .exec(arrayOf(\"logcat\", pid?.let { \"--pid=$it\" } ?: \"\", \"-d\"))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "fcitx5-android/509", "ground_truth": "                .inputStream\r\n                .bufferedReader()\r\n                .readLines()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Logcat.kt"}}
{"prompt": "private fun updateDirtyStatus(key: String, boolean: Boolean) {\r\n        if (boolean) {\r\n            dirtyStatus.add(key)", "choices": [{"text": "(key);\r\n        } else {\r\n            dirtyStatus.remove(key);\r\n        }\r\n    }\r\n\r\n    private fun clearDirtyStatus() {\r\n        dirtyStatus.clear();\r\n    }\r\n\r\n    private fun getDirtyStatus() {\r\n        return dirtyStatus;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/512", "ground_truth": "        } else {\r\n            dirtyStatus.remove(key)\r\n        }\r\n        dirty = dirtyStatus.isNotEmpty()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\NaiveDustman.kt"}}
{"prompt": "import androidx.preference.PreferenceScreen\nimport androidx.preference.PreferenceCategory\nimport androidx.preference.Preference\nfun PreferenceScreen.addCategory(title: String, block: PreferenceCategory.() -> Unit) {\r\n    val category = PreferenceCategory(context).apply {", "choices": [{"text": "\r\n        title: title,\r\n        block: block\r\n    }\r\n    PreferenceScreen.addCategory(category)\r\n    return category\r\n}\r\n\r\nexport default PreferenceScreen\r\n"}], "metadata": {"task_id": "fcitx5-android/516", "ground_truth": "        setTitle(title)\r\n    }\r\n    addPreference(category)\r\n    block.invoke(category)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nimport androidx.annotation.DrawableRes\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    summary: String,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null", "choices": [{"text": ",\r\n)\r\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    summary: String,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null,\r\n)\r\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    summary: String,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null,\r\n)\r\nfun PreferenceGroup.addPreference(\r\n    @String"}], "metadata": {"task_id": "fcitx5-android/518", "ground_truth": ") {\r\n    val ctx = context\r\n    addPreference(ctx.getString(title), summary, icon, onClick)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nimport androidx.annotation.DrawableRes\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    @StringRes summary: Int? = null,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null", "choices": [{"text": ",\r\n)\r\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    @StringRes summary: Int? = null,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null,\r\n)\r\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    @StringRes summary: Int? = null,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null,\r\n)\r\n"}], "metadata": {"task_id": "fcitx5-android/519", "ground_truth": ") {\r\n    val ctx = context\r\n    addPreference(ctx.getString(title), summary?.let(ctx::getString), icon, onClick)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.ViewCompat\nfun RecyclerView.applyNavBarInsetsBottomPadding() {\r\n    clipToPadding = false\r\n    ViewCompat.setOnApplyWindowInsetsListener(this) { _, windowInsets ->\r\n        windowInsets.getInsets(WindowInsetsCompat.Type.navigationBars()).also {", "choices": [{"text": "\r\n            clipToPadding = true\r\n        }}\r\n}\r\nfun RecyclerView.applyNavBarInsetsTopPadding() {\r\n    clipToPadding = false\r\n    ViewCompat.setOnApplyWindowInsetsListener(this) { _, windowInsets ->\r\n        windowInsets.getInsets(WindowInsetsCompat.Type.navigationBars()).also {\r\n            clipToPadding = true\r\n        }}\r\n}\r\nfun RecyclerView.applyNavBarInsetsRightPadding() {\r\n    clipToPadding = false\r\n    View"}], "metadata": {"task_id": "fcitx5-android/521", "ground_truth": "            bottomPadding = it.bottom\r\n        }\r\n        windowInsets\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\RecyclerView.kt"}}
{"prompt": "import android.annotation.SuppressLint\n\r\n@SuppressLint(\"PrivateApi\")\r\nfun getSystemProperty(key: String): String {\r\n    return try {\r\n        Class.forName(\"android.os.SystemProperties\")\r\n            .getMethod(\"get\", String::class.java)", "choices": [{"text": "\r\n           .invoke(null, key);\r\n    } catch (Exception e) {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n@SuppressLint(\"PrivateApi\")\r\nfun getSystemProperty(key: String, defaultValue: String): String {\r\n    return try {\r\n        Class.forName(\"android.os.SystemProperties\")\r\n           .getMethod(\"get\", String.class.java)\r\n           .invoke(null, key, defaultValue);\r\n    } catch (Exception e) {\r\n        return defaultValue;\r\n    }"}], "metadata": {"task_id": "fcitx5-android/524", "ground_truth": "            .invoke(null, key) as String\r\n    } catch (e: Exception) {\r\n        \"\"\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\SystemProperty.kt"}}
{"prompt": "fun isSystemSettingEnabled(key: String): Boolean {\r\n    return try {", "choices": [{"text": "\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction isSystemSettingDisabled(key: String): Boolean {\r\n  return try {\r\n    return!isSystemSettingEnabled(key)\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  isSystemSettingEnabled,\r\n  isSystemSettingDisabled\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/525", "ground_truth": "        Settings.System.getInt(appContext.contentResolver, key) == 1\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\SystemSettings.kt"}}
{"prompt": "import java.io.File\ninline fun <T> withTempDir(block: (File) -> T): T {\r\n    val dir = appContext.cacheDir.resolve(System.currentTimeMillis().toString()).also {\r\n        it.mkdirs()\r\n    }\r\n    try {", "choices": [{"text": ".also {\r\n        block.copyTo(dir)\r\n    }\r\n    catch (Exception e) {\r\n        throw new RuntimeException(e)\r\n    }\r\n    return dir\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/526", "ground_truth": "        return block(dir)\r\n    } finally {\r\n        dir.deleteRecursively()\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\TempDir.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport coil.request.Options\nimport coil.decode.DecodeResult\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\noverride suspend fun decode(): DecodeResult? {\r\n        return try {\r\n            if (!isIco(source)) {\r\n                return null\r\n            }\r\n\r\n            return BitmapFactory.Options().decode(source.source())", "choices": [{"text": "\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null\r\n        }\r\n    }\r\n\r\n    private static boolean isIco(Source source) {\r\n        return source.source().startsWith(R.drawable.ic_icon);\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/0", "ground_truth": "        } catch (e: Exception) {\r\n            Log.e(LOG_TAG, \"Failed to decode ICO\", e)\r\n            null\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\danielrampelt\\coil\\ico\\IcoDecoder.kt"}}
{"prompt": "val dao FeedItemDao\nval appDatabase AppDatabase\n suspend fun duplicateStoryExists(\r\n        id: Long,\r\n        title: String,\r\n        link: String?,\r\n    ): Boolean {\r\n        return dao.duplicationExists(", "choices": [{"text": "\r\n        id: Long,\r\n        title: String,\r\n        link: String?,\r\n    ): Boolean {\r\n        return dao.duplicateStoryExists(\r\n            id: Long,\r\n            title: String,\r\n            link: String?,\r\n        );\r\n    }\r\n suspend fun duplicateStory(\r\n        id: Long,\r\n        title: String,\r\n        link: String?,\r\n    ): FeedItem {\r\n        return dao.duplicateStory(\r\n            id: Long,\r\n           "}], "metadata": {"task_id": "Feeder/8", "ground_truth": "            id = id,\r\n            plainTitle = title,\r\n            link = link,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedItemStore.kt"}}
{"prompt": "import java.time.LocalDateTime\nimport java.time.LocalDate\nprivate fun LocalDateTime.formatDynamically(): String {\r\n    val today = LocalDate.now().atStartOfDay()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Feeder/9", "ground_truth": "    return when {\r\n        this >= today -> format(shortTimeFormat)\r\n        else -> format(mediumDateTimeFormat)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedItemStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.db.room.ID_UNSET\nimport com.nononsenseapps.feeder.db.room.Feed\nsuspend fun saveFeed(feed: Feed): Long {\r\n        return if (feed.id > ID_UNSET) {\r\n            feedDao.updateFeed(feed)", "choices": [{"text": "\r\n            return feed.id;\r\n        } else {\r\n            feedDao.insertFeed(feed);\r\n            return feed.id;\r\n        }\r\n    }\r\n\r\nsuspend fun updateFeed(feed: Feed): Long {\r\n        return if (feed.id > ID_UNSET) {\r\n            feedDao.updateFeed(feed);\r\n            return feed.id;\r\n        } else {\r\n            feedDao.insertFeed(feed);\r\n            return feed.id;\r\n        }\r\n    }\r\n\r"}], "metadata": {"task_id": "Feeder/11", "ground_truth": "            feed.id\r\n        } else {\r\n            feedDao.insertFeed(feed)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedStore.kt"}}
{"prompt": "import kotlinx.coroutines.flow.Flow\nimport com.nononsenseapps.feeder.model.FeedUnreadCount\nimport com.nononsenseapps.feeder.db.room.Feed\nimport androidx.paging.PagingData\nimport androidx.paging.PagingConfig\nimport androidx.paging.Pager\nfun getPagedNavDrawerItems(expandedTags: Set<String>): Flow<PagingData<FeedUnreadCount>> =\r\n        Pager(\r\n            config =\r\n                PagingConfig(\r\n                    pageSize = 10,\r\n                    initialLoadSize = 50,\r\n                    prefetchDistance = 50,\r\n                    jumpThreshold = 50,", "choices": [{"text": "\r\n                    expandedTags = expandedTags,\r\n                ),\r\n        )\r\n    return getPagedNavDrawerItems(expandedTags)\r\nfun getPagedNavDrawerItems(expandedTags: Set<String>): Flow<PagingData<FeedUnreadCount>> =\r\n        Pager(\r\n            config =\r\n                PagingConfig(\r\n                    pageSize = 10,\r\n                    initialLoadSize = 50,\r\n                    prefetchDistance = 50,\r\n                    jumpThreshold = 50,\r\n                    expandedTags = expandedTags,\r\n                ),\r\n        )\r"}], "metadata": {"task_id": "Feeder/12", "ground_truth": "                ),\r\n        ) {\r\n            feedDao.getPagedNavDrawerItems(expandedTags)\r\n        }\r\n            .flow", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.feedarticle.FeedListFilter\nimport com.nononsenseapps.feeder.db.room.Feed\nfun setFeedListFilterRecentlyRead(value: Boolean) {\r\n        settingsStore.setFeedListFilterRecentlyRead(value)", "choices": [{"text": ";\r\n}\r\nfun setFeedListFilterRecentlyUpdated(value: Boolean) {\r\n        settingsStore.setFeedListFilterRecentlyUpdated(value);\r\n}\r\nfun setFeedListFilterRecentlyDeleted(value: Boolean) {\r\n        settingsStore.setFeedListFilterRecentlyDeleted(value);\r\n}\r\nfun setFeedListFilterRecentlyRead(value: Boolean) {\r\n        settingsStore.setFeedListFilterRecentlyRead(value);\r\n}\r\nfun setFeedListFilterRecentlyUpdated(value: Boolean) {\r\n       "}], "metadata": {"task_id": "Feeder/16", "ground_truth": "        // Implies read too\r\n        if (!value) {\r\n            settingsStore.setFeedListFilterRead(false)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "import com.nononsenseapps.feeder.util.Either\nimport com.nononsenseapps.feeder.sync.ErrorResponse\nsuspend fun startNewSyncChain(): Either<ErrorResponse, Pair<String, String>> {\r\n        return syncClient.create()\r\n            .onRight {\r\n                updateDeviceList()", "choices": [{"text": "\r\n            }\r\n           .onLeft {\r\n                updateDeviceList()\r\n            }\r\n           .onError {\r\n                updateDeviceList()\r\n            }\r\n    }\r\n\r\n    private void updateDeviceList() {\r\n        syncClient.updateDeviceList()\r\n           .onRight {\r\n                updateDeviceList()\r\n            }\r\n           .onError {\r\n                updateDeviceList()\r\n            }\r\n    }\r\n\r\n    private void updateDeviceList() {\r\n        syncClient.updateDeviceList()"}], "metadata": {"task_id": "Feeder/32", "ground_truth": "            }\r\n            .map { syncCode ->\r\n                syncCode to getSyncRemote().secretKey\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "import kotlinx.coroutines.flow.update\nval _expandedTags\nval expandedTags StateFlow<Set<String>>\nval _resumeTime\nfun toggleTagExpansion(tag: String) {\r\n        _expandedTags.update {\r\n            if (tag in expandedTags.value) {\r\n                _expandedTags.value - tag", "choices": [{"text": "\r\n                expandedTags.value - [tag]\r\n            } else {\r\n                _expandedTags.value - [tag]\r\n            }\r\n        }\r\n    }\r\n\r\n    fun resumeTagExpansion(tag: String) {\r\n        _expandedTags.update {\r\n            if (tag in expandedTags.value) {\r\n                _expandedTags.value - [tag]\r\n                expandedTags.value - [tag]\r\n            } else {\r\n                _expandedTags.value - [tag]\r\n            }\r\n        }"}], "metadata": {"task_id": "Feeder/34", "ground_truth": "            } else {\r\n                _expandedTags.value + tag\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SessionStore.kt"}}
{"prompt": "val _feedItemStyle\nval feedItemStyle\nval _currentFeedAndTag\n fun setFeedItemStyle(value: FeedItemStyle) {\r\n        _feedItemStyle.value = value", "choices": [{"text": "\r\n        feedItemStyle.value = value;\r\n}\r\n\r\nval _currentFeedAndTag\r\nval currentFeedAndTag\r\n fun setCurrentFeedAndTag(value: FeedAndTag) {\r\n        _currentFeedAndTag.value = value;\r\n}\r\n\r\nval _currentFeed\r\nval currentFeed\r\n fun setCurrentFeed(value: Feed) {\r\n        _currentFeed.value = value;\r\n}\r\n\r\nval _currentTag\r\nval currentTag\r\n fun setCurrentTag(value: Tag) {\r\n        _"}], "metadata": {"task_id": "Feeder/62", "ground_truth": "        sp.edit().putString(\r\n            PREF_FEED_ITEM_STYLE,\r\n            value.name,\r\n        ).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nfun setSwipeAsRead(value: SwipeAsRead) {\r\n        _swipeAsRead.value = value", "choices": [{"text": ";\r\n    }\r\n\r\n    private SwipeAsRead _swipeAsRead;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_feeder);\r\n        _swipeAsRead = new SwipeAsRead();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.feeder, menu);\r"}], "metadata": {"task_id": "Feeder/63", "ground_truth": "        sp.edit().putString(\r\n            PREF_SWIPE_AS_READ,\r\n            value.name,\r\n        ).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nfun String.dropEnds(\r\n    starting: Int,\r\n    ending: Int,\r\n): String {\r\n    require(starting >= 0) { \"Requested character count $starting is less than zero.\" }\r\n    require(ending >= 0) { \"Requested character count $ending is less than zero.\" }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Feeder/67", "ground_truth": "    return substring(\r\n        starting.coerceAtMost(length),\r\n        (length - ending).coerceAtLeast(0),\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nval _linkOpener\nval linkOpener\nval _itemOpener\nfun itemOpenerFromString(value: String) =\r\n    when (value) {\r\n        PREF_VAL_OPEN_WITH_BROWSER -> ItemOpener.DEFAULT_BROWSER\r\n        PREF_VAL_OPEN_WITH_WEBVIEW,", "choices": [{"text": " -> ItemOpener.DEFAULT_WEBVIEW\r\n        PREF_VAL_OPEN_WITH_WEBVIEW, -> ItemOpener.DEFAULT_WEBVIEW\r\n        PREF_VAL_OPEN_WITH_WEBVIEW, -> ItemOpener.DEFAULT_WEBVIEW\r\n        PREF_VAL_OPEN_WITH_WEBVIEW, -> ItemOpener.DEFAULT_WEBVIEW\r\n        PREF_VAL_OPEN_WITH_WEBVIEW, -> ItemOpener.DEFAULT_WEBVIEW\r\n        PREF_VAL_OPEN_WITH_WEBVIEW, -> ItemOpener.DEFAULT_WEB"}], "metadata": {"task_id": "Feeder/69", "ground_truth": "        PREF_VAL_OPEN_WITH_CUSTOM_TAB,\r\n        -> ItemOpener.CUSTOM_TAB\r\n\r\n        else -> ItemOpener.READER\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "fun themeOptionsFromString(value: String) =", "choices": [{"text": ") {\n  switch (value) {\n    case 'dark':\n      return 'dark';\n    case 'light':\n      return 'light';\n    default:\n      return value;\n  }\n}\n\nmodule.exports = {\n  themeOptionsFromString,\n};\n"}], "metadata": {"task_id": "Feeder/71", "ground_truth": "    try {\r\n        ThemeOptions.valueOf(value.uppercase())\r\n    } catch (_: Exception) {\r\n        ThemeOptions.SYSTEM\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "fun feedItemStyleFromString(value: String) =", "choices": [{"text": ") {\n  switch (value) {\n    case 'rss':\n      return 'rss';\n    case 'atom':\n      return 'atom';\n    default:\n      return value;\n  }\n}\n\nfunction feedItemStyleToString(value: String) {\n  switch (value) {\n    case 'rss':\n      return 'rss';\n    case 'atom':\n      return 'atom';\n    default:\n      return value;\n  }\n}\n\nmodule.exports = {\n  feedItemStyleFromString,\n  feedItemStyleToString\n};\n"}], "metadata": {"task_id": "Feeder/74", "ground_truth": "    try {\r\n        FeedItemStyle.valueOf(value.uppercase())\r\n    } catch (_: Exception) {\r\n        FeedItemStyle.CARD\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.db.room.SyncRemote\nval remoteFeedDao RemoteFeedDao\nval remoteReadMarkDao RemoteReadMarkDao\nval syncDeviceDao SyncDeviceDao\nsuspend fun getSyncRemote(): SyncRemote {\r\n        dao.getSyncRemote()?.let {", "choices": [{"text": "\r\n                return new SyncRemote(remoteFeedDao, remoteReadMarkDao, syncDeviceDao);\r\n        }\r\n}\r\nsuspend fun setSyncRemote(remoteFeedDao, remoteReadMarkDao, syncDeviceDao): void {\r\n        dao.setSyncRemote(remoteFeedDao, remoteReadMarkDao, syncDeviceDao);\r\n}\r\nsuspend fun addSyncDevice(syncDevice): void {\r\n        dao.addSyncDevice(syncDevice);\r\n}\r\nsuspend fun removeSyncDevice(syncDevice): void {\r\n        dao.removeSyncDevice"}], "metadata": {"task_id": "Feeder/76", "ground_truth": "            return it\r\n        }\r\n\r\n        return createDefaultSyncRemote()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.db.room.ReadStatusSynced\nsuspend fun setSynced(feedItemId: Long) {\r\n        // Ignores duplicates\r\n        readStatusDao.insert(\r\n            ReadStatusSynced(", "choices": [{"text": ".builder()\r\n               .feedItemId(feedItemId)\r\n               .synced(true)\r\n               .build()\r\n        );\r\n    }\r\n\r\nsuspend fun setUnsynced(feedItemId: Long) {\r\n        // Ignores duplicates\r\n        readStatusDao.insert(\r\n            ReadStatusSynced.builder()\r\n               .feedItemId(feedItemId)\r\n               .synced(false)\r\n               .build()\r\n        );\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/77", "ground_truth": "                feed_item = feedItemId,\r\n                sync_remote = 1L,\r\n            ),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "import java.net.URL\nimport com.nononsenseapps.feeder.db.room.RemoteReadMark\nsuspend fun addRemoteReadMark(\r\n        feedUrl: URL,\r\n        articleGuid: String,\r\n    ) {\r\n        // Ignores duplicates\r\n        remoteReadMarkDao.insert(\r\n            RemoteReadMark(\r\n                sync_remote = 1L,\r\n                feedUrl = feedUrl,", "choices": [{"text": "\r\n                articleGuid = articleGuid,\r\n            )\r\n        );\r\n    }\r\nsuspend fun removeRemoteReadMark(\r\n        feedUrl: URL,\r\n        articleGuid: String,\r\n    ) {\r\n        remoteReadMarkDao.delete(\r\n            RemoteReadMark(\r\n                sync_remote = 1L,\r\n                feedUrl = feedUrl,\r\n                articleGuid = articleGuid,\r\n            )\r\n        );\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/79", "ground_truth": "                guid = articleGuid,\r\n                timestamp = Instant.now(),\r\n            ),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "import org.kodein.di.factory\nimport org.kodein.di.compose.LocalDI\nimport org.kodein.di.DIAware\nimport org.kodein.di.DI\nimport androidx.savedstate.SavedStateRegistryOwner\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.lifecycle.ViewModel\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> SavedStateRegistryOwner.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareSavedStateViewModelFactory(LocalDI.current, this)\r\n\r\n    return viewModel(", "choices": [{"text": "factory, key)\r\n}\r\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> SavedStateRegistryOwner.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareSavedStateViewModelFactory(LocalDI.current, this)\r\n\r\n    return viewModel(factory, key)\r\n}\r\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> SavedStateRegistryOwner.diAwareViewModel(key: String? = null): T {\r\n   "}], "metadata": {"task_id": "Feeder/84", "ground_truth": "        modelClass = T::class.java,\r\n        key = key,\r\n        factory = factory,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\base\\DIAwareViewModel.kt"}}
{"prompt": "import org.kodein.di.factory\nimport org.kodein.di.compose.LocalDI\nimport org.kodein.di.DIAware\nimport org.kodein.di.DI\nimport androidx.navigation.NavBackStackEntry\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.lifecycle.ViewModel\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> NavBackStackEntry.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareSavedStateViewModelFactory(LocalDI.current, this, arguments)\r\n\r\n    return viewModel(", "choices": [{"text": "factory)\r\n}\r\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> NavBackStackEntry.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareSavedStateViewModelFactory(LocalDI.current, this, arguments)\r\n\r\n    return viewModel(factory)\r\n}\r\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> NavBackStackEntry.diAwareViewModel(key: String? = null): T {\r\n    val factory"}], "metadata": {"task_id": "Feeder/85", "ground_truth": "        modelClass = T::class.java,\r\n        key = key,\r\n        factory = factory,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\base\\DIAwareViewModel.kt"}}
{"prompt": "fun isKeyDecodable(keysStr: String): Boolean {\r\n        return try {\r\n            decodeKey(keysStr)", "choices": [{"text": ") {\r\n                return true;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/88", "ground_truth": "            true\r\n        } catch (e: Exception) {\r\n            false\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "import java.security.GeneralSecurityException\nimport java.lang.Exception\n @Throws(GeneralSecurityException::class)\r\n    private fun randomBytes(length: Int): ByteArray {", "choices": [{"text": " {\r\n        byte[] bytes = new byte[length];\r\n        for (int i = 0; i < bytes.length; i++) {\r\n            bytes[i] = (byte) (Math.random() * 256);\r\n        }\r\n        return new ByteArray(bytes);\r\n    }\r\n\r\npublic class ByteArray {\r\n    private byte[] bytes;\r\n\r\n    public ByteArray(byte[] bytes) {\r\n        this.bytes = bytes;\r\n    }\r\n\r\n    public byte[] getBytes() {\r\n        return bytes;\r"}], "metadata": {"task_id": "Feeder/89", "ground_truth": "        val random = SecureRandom()\r\n        val b = ByteArray(length)\r\n        random.nextBytes(b)\r\n        return b\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n        database.execSQL(\r\n            \"\"\"\r\n            ALTER TABLE feed_items ADD COLUMN read_time INTEGER DEFAULT null\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items", "choices": [{"text": " from feed_items\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            ALTER TABLE feed_items ADD COLUMN read_time INTEGER DEFAULT null\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            ALTER TABLE feed_items ADD COLUMN read_time INTEGER DEFAULT null\r\n            \"\"\"."}], "metadata": {"task_id": "Feeder/108", "ground_truth": "                set read_time = 1690317917000\r\n            where unread = 0;\r\n            \"\"\".trimIndent(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n        database.execSQL(\r\n            \"\"\"\r\n            CREATE UNIQUE INDEX idx_feed_items_cursor\r\n            ON feed_items (primary_sort_time, pub_date, id)\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items", "choices": [{"text": "_items\r\n            set primary_sort_time = pub_date\r\n            where id =?\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r\n            set pub_date =?\r\n            where id =?\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r\n            set id =?\r\n            where id =?\r\n            \"\"\".trimIndent(),\r\n"}], "metadata": {"task_id": "Feeder/109", "ground_truth": "                set bookmarked = 1\r\n            where pinned = 1;\r\n            \"\"\".trimIndent(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\nfun SupportSQLiteDatabase.inTransaction(init: (SupportSQLiteDatabase) -> Unit) {\r\n    beginTransaction()\r\n    try {\r\n        init(this)", "choices": [{"text": "\r\n    } catch (Exception e) {\r\n        e.printStackTrace()\r\n    }\r\n    return this\r\n}\r\n\r\nfunction beginTransaction() {\r\n    SQLiteDatabase.beginTransaction()\r\n}\r\n\r\nfunction commitTransaction() {\r\n    SQLiteDatabase.commitTransaction()\r\n}\r\n\r\nfunction rollbackTransaction() {\r\n    SQLiteDatabase.rollbackTransaction()\r\n}\r\n\r\nexport default {\r\n    beginTransaction,\r\n    commitTransaction,\r\n    rollbackTransaction\r\n}\r\n"}], "metadata": {"task_id": "Feeder/121", "ground_truth": "        setTransactionSuccessful()\r\n    } finally {\r\n        endTransaction()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun dateTimeFromString(value: String?): ZonedDateTime? {\r\n        var dt: ZonedDateTime? = null\r\n        if (value != null) {\r\n            try {\r\n                dt = ZonedDateTime.parse(value)", "choices": [{"text": "\r\n            } catch (Exception e) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        return dt\r\n    }\r\n\r\n @TypeConverter\r\n    fun dateTimeToString(value: ZonedDateTime?): String? {\r\n        var dt: String? = null\r\n        if (value!= null) {\r\n            try {\r\n                dt = value.toString()\r\n            } catch (Exception e) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        return dt\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/122", "ground_truth": "            } catch (_: Throwable) {\r\n            }\r\n        }\r\n        return dt\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\Converters.kt"}}
{"prompt": "fun estimateWordCount(plainText: String): Int {\r\n    val charCount = plainText.length.toFloat()\r\n    val wordCount = plainText.splitToSequence(patternWhitespace).count()\r\n\r\n    // Calculate average length of chars between spaces\r\n    // A typical value for english is 5-7\r\n    // A typical value for japanese is 50-80\r\n    return if (charCount / wordCount < 15.0) {", "choices": [{"text": "\r\n        return wordCount\r\n    } else {\r\n        return charCount / wordCount\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/125", "ground_truth": "        wordCount\r\n    } else {\r\n        0\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\FeedItem.kt"}}
{"prompt": "import androidx.room.Transaction\n @Transaction\r\n    suspend fun replaceRemoteFeedsWith(remoteFeeds: List<RemoteFeed>) {", "choices": [{"text": ", remoteFeeds: List<RemoteFeed>) {\r\n        remoteFeeds.forEach(remoteFeed => {\r\n            remoteFeed.replaceRemoteFeedsWith(remoteFeeds);\r\n        });\r\n    }\r\n @Transaction\r\n    suspend fun replaceRemoteFeedsWith(remoteFeeds: List<RemoteFeed>) {\r\n        remoteFeeds.forEach(remoteFeed => {\r\n            remoteFeed.replaceRemoteFeedsWith(remoteFeeds);\r\n        });\r\n    }\r\n @Transaction\r\n    suspend fun replaceRemoteFeedsWith(remote"}], "metadata": {"task_id": "Feeder/126", "ground_truth": "        deleteAllRemoteFeeds()\r\n        for (remoteFeed in remoteFeeds) {\r\n            insert(remoteFeed)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\RemoteFeedDao.kt"}}
{"prompt": "import androidx.room.Transaction\n @Transaction\r\n    suspend fun replaceDevices(devices: List<SyncDevice>) {", "choices": [{"text": "\n @Transaction\r\n    suspend fun removeDevices(devices: List<Device>) {\r\n    }\r\n @Transaction\r\n    suspend fun addDevices(devices: List<Device>) {\r\n    }\r\n @Transaction\r\n    suspend fun removeDevices(devices: List<Device>) {\r\n    }\r\n @Transaction\r\n    suspend fun addDevices(devices: List<Device>) {\r\n    }\r\n @Transaction\r\n    suspend fun removeDevices(devices: List<Device>) {\r\n    }\r\n @Transaction\r\n    suspend fun addDevices(devices"}], "metadata": {"task_id": "Feeder/127", "ground_truth": "        deleteAll()\r\n        devices.forEach {\r\n            insert(it)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\SyncDeviceDao.kt"}}
{"prompt": "import java.util.Locale\nimport android.os.Build\nfun generateDeviceName(): String {\r\n    val manufacturer = Build.MANUFACTURER ?: \"\"\r\n    val model = Build.MODEL ?: \"\"\r\n\r\n    return if (model.startsWith(manufacturer, ignoreCase = true)) {\r\n        model\r\n    } else {\r\n        \"$manufacturer $model\"\r\n    }.replaceFirstChar {\r\n        if (it.isLowerCase()) {\r\n            it.titlecase(\r\n                Locale.getDefault(),\r\n            )", "choices": [{"text": ".toLowerCase(\r\n                Locale.getDefault(),\r\n            )\r\n        } else {\r\n            it.toUpperCase(\r\n                Locale.getDefault(),\r\n            )\r\n        }\r\n    }.replaceFirstChar {\r\n        if (it.isLowerCase()) {\r\n            it.titlecase(\r\n                Locale.getDefault(),\r\n            )\r\n        } else {\r\n            it.toUpperCase(\r\n                Locale.getDefault(),\r\n            )\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/128", "ground_truth": "        } else {\r\n            it.toString()\r\n        }\r\n    }.ifBlank { \"${Random.nextInt(100_000)}\" }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\SyncRemote.kt"}}
{"prompt": "import com.nononsenseapps.feeder.model.gofeed.GoPerson\nprivate fun GoPerson.asParsedAuthor() =", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/138", "ground_truth": "    ParsedAuthor(\r\n        name = name,\r\n        url = null,\r\n        avatar = null\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\FeedParser.kt"}}
{"prompt": "suspend fun SequenceScope<String>.recursiveExtensionMediaDescription(extension: GoExtension) {\r\n    if (extension.name.equals(\"description\", ignoreCase = true)) {\r\n        extension.value?.let { value ->\r\n            yield(value)\r\n        }\r\n    }\r\n\r\n    extension.children?.entries?.forEach { (_, value) ->", "choices": [{"text": ") ->\r\n        SequenceScope<String>.recursiveExtensionMediaDescription(value)\r\n    }\r\n}\r\n\r\nsuspend fun SequenceScope<String>.recursiveExtensionMediaTitle(extension: GoExtension) {\r\n    if (extension.name.equals(\"title\", ignoreCase = true)) {\r\n        extension.value?.let { value ->\r\n            yield(value)\r\n        }\r\n    }\r\n\r\n    extension.children?.entries?.forEach { (_, value) ->\r\n        SequenceScope<String>.recursiveExtensionMediaTitle(value"}], "metadata": {"task_id": "Feeder/143", "ground_truth": "        value.forEach { extension ->\r\n            recursiveExtensionMediaDescription(extension)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\gofeed\\GoFeedExtensions.kt"}}
{"prompt": "import java.net.URL\nprivate fun pointsToImage(url: String): Boolean {\r\n    return try {\r\n        val u = URL(url)\r\n\r\n        u.path.endsWith(\".jpg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".jpeg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".gif\", ignoreCase = true) ||\r\n            u.path.endsWith(\".png\", ignoreCase = true) ||", "choices": [{"text": "\r\n            u.path.endsWith(\".bmp\", ignoreCase = true) ||\r\n            u.path.endsWith(\".gif\", ignoreCase = true) ||\r\n            u.path.endsWith(\".bmp\", ignoreCase = true) ||\r\n            u.path.endsWith(\".png\", ignoreCase = true) ||\r\n            u.path.endsWith(\".jpg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".jpeg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".gif\", ignoreCase = true) ||"}], "metadata": {"task_id": "Feeder/144", "ground_truth": "            u.path.endsWith(\".webp\", ignoreCase = true)\r\n    } catch (_: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\gofeed\\GoFeedExtensions.kt"}}
{"prompt": "import kotlinx.coroutines.flow.first\noverride suspend fun saveBlocklistPatterns(patterns: Iterable<String>) {\r\n        val existingPatterns = settingsStore.blockListPreference.first()\r\n\r\n        patterns.asSequence()\r\n            .filterNot { it.isBlank() }\r\n            .filterNot { it in existingPatterns }", "choices": [{"text": ".forEach(pattern => {\r\n            settingsStore.blockListPreference.set(pattern)\r\n        })\r\n    }\r\n\r\n    resume fun loadBlocklistPatterns() {\r\n        val patterns = settingsStore.blockListPreference.first()\r\n\r\n        patterns.asSequence()\r\n           .filterNot { it.isBlank() }\r\n           .forEach(pattern => {\r\n                settingsStore.blockListPreference.set(pattern)\r\n            })\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/147", "ground_truth": "            .distinct()\r\n            .forEach {\r\n                settingsStore.addBlocklistPattern(it)\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OPMLImporter.kt"}}
{"prompt": "import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readOpml() {\r\n        parser.require(XmlPullParser.START_TAG, null, TAG_OPML)\r\n        while (parser.next() != XmlPullParser.END_TAG) {\r\n            if (parser.eventType != XmlPullParser.START_TAG) {\r\n                continue\r\n            }\r\n            // Starts by looking for the entry tag.\r\n            if (parser.name == TAG_BODY) {\r\n                readBody()", "choices": [{"text": "\r\n            } else if (parser.name == TAG_OPML) {\r\n                readOpml()\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    private void readBody() {\r\n        parser.require(XmlPullParser.START_TAG, null, TAG_BODY)\r\n        while (parser.next()!= XmlPullParser.END_TAG) {\r\n            if (parser.eventType!= XmlPullParser.START_TAG) {\r\n                continue\r\n            }\r\n            if (parser.name == TAG_"}], "metadata": {"task_id": "Feeder/148", "ground_truth": "            } else {\r\n                skip()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readSetting() {\r\n        parser.require(XmlPullParser.START_TAG, OPML_FEEDER_NAMESPACE, TAG_SETTING)\r\n\r\n        val key by this\r\n        val value by this\r\n\r\n        key?.let { key ->\r\n            value?.let { value ->\r\n                settings[key] = unescape(value)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/149", "ground_truth": "            }\r\n        }\r\n\r\n        skip()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readBlocked() {\r\n        parser.require(XmlPullParser.START_TAG, OPML_FEEDER_NAMESPACE, TAG_BLOCKED)\r\n\r\n        val pattern by this\r\n\r\n        pattern?.let { pattern ->\r\n            blockList.add(\r\n                unescape(pattern),", "choices": [{"text": "\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n"}], "metadata": {"task_id": "Feeder/150", "ground_truth": "            )\r\n        }\r\n\r\n        skip()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "import java.io.OutputStream\nimport java.io.FileOutputStream\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.nononsenseapps.feeder.db.room.Feed\nsuspend fun writeFile(\r\n    path: String,\r\n    settings: Map<String, String>,\r\n    blockedPatterns: List<String>,\r\n    tags: Iterable<String>,\r\n    feedsWithTag: suspend (String) -> Iterable<Feed>,\r\n) {\r\n    withContext(Dispatchers.IO) {\r\n        writeOutputStream(\r\n            os = FileOutputStream(path),\r\n            settings = settings,\r\n            blockedPatterns = blockedPatterns,", "choices": [{"text": "\n            tags = tags,\r\n            feedsWithTag = feedsWithTag,\r\n        );\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/153", "ground_truth": "            tags = tags,\r\n            feedsWithTag = feedsWithTag,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "protected suspend fun <T : Element> initTag(\r\n        tag: T,\r\n        init: suspend T.() -> Unit,", "choices": [{"text": ") {\r\n\r\n    if (typeof tag ==='string') {\r\n        tag = document.getElementById(tag);\r\n    }\r\n\r\n    if (!tag) {\r\n        tag = document.createElement('div');\r\n        tag.id = tag;\r\n        document.body.appendChild(tag);\r\n    }\r\n\r\n    if (typeof init === 'function') {\r\n        init(tag);\r\n    }\r\n\r\n    return tag;\r\n}\r\n"}], "metadata": {"task_id": "Feeder/157", "ground_truth": "    ): T {\r\n        tag.init()\r\n        children.add(tag)\r\n        return tag\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "suspend fun outline(\r\n        title: String,\r\n        text: String = title,\r\n        type: String? = null,\r\n        xmlUrl: String? = null,\r\n        init: suspend Outline.() -> Unit,\r\n    ) {\r\n        val o = initTag(Outline(), init)\r\n        o.title = title\r\n        o.text = text\r\n        if (type != null) {\r\n            o.type = type", "choices": [{"text": "\r\n        }\r\n        if (xmlUrl!= null) {\r\n            o.xmlUrl = xmlUrl\r\n        }\r\n        return o\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/161", "ground_truth": "        }\r\n        if (xmlUrl != null) {\r\n            o.xmlUrl = xmlUrl\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "import java.net.URI\nfun String?.host(): String? {\r\n    val l: String? = this\r\n    if (l != null) {\r\n        try {\r\n            return URI(l).host", "choices": [{"text": "\r\n        } catch (URISyntaxException e) {\r\n            return null\r\n        }\r\n    } else {\r\n        return null\r\n    }\r\n}\r\nfun String?.port(): String? {\r\n    val l: String? = this\r\n    if (l!= null) {\r\n        try {\r\n            return URI(l).getPort()\r\n        } catch (URISyntaxException e) {\r\n            return null\r\n        }\r\n    } else {\r\n        return null\r\n    }\r\n}\r\nfun String?"}], "metadata": {"task_id": "Feeder/163", "ground_truth": "        } catch (_: Throwable) {\r\n        }\r\n    }\r\n    return null\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\PreviewItem.kt"}}
{"prompt": "import androidx.compose.ui.text.AnnotatedString\nfun tts(\r\n        textArray: List<AnnotatedString>,\r\n        useDetectLanguage: Boolean,\r\n    ) {\r\n        this.useDetectLanguage = useDetectLanguage\r\n//        val textArray = fullText.split(*PUNCTUATION)\r\n        for (text in textArray) {\r\n            if (text.isBlank()) {\r\n                continue", "choices": [{"text": "\r\n            }\r\n            if (useDetectLanguage) {\r\n                text = text.toLowerCase()\r\n            }\r\n            textArray.add(new AnnotatedString(text))\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/164", "ground_truth": "            }\r\n            textToSpeechQueue.add(text)\r\n        }\r\n        play()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nfun skipNext() {\r\n        coroutineScope.launch {\r\n            startJob?.cancel()\r\n            textToSpeech?.stop()\r\n            startJob?.join()\r\n            textToSpeechQueue.removeFirstOrNull()\r\n            when (textToSpeechQueue.isEmpty()) {", "choices": [{"text": "\r\n                startJob?.cancel()\r\n                textToSpeech?.stop()\r\n                startJob?.join()\r\n                textToSpeechQueue.removeFirstOrNull()\r\n                when (textToSpeechQueue.isEmpty()) {\r\n                    startJob?.cancel()\r\n                    textToSpeech?.stop()\r\n                    startJob?.join()\r\n                    textToSpeechQueue.removeFirstOrNull()\r\n                    when (textToSpeechQueue.isEmpty()) {\r\n                        startJob?.cancel()\r\n                        textToSpeech?.stop()\r"}], "metadata": {"task_id": "Feeder/167", "ground_truth": "                true -> stop()\r\n                false -> play()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "import java.util.Locale\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nvar useDetectLanguage Boolean\nvar textToSpeech TextToSpeech?\nvar initializedState Int?\nfun setLanguage(lang: LocaleOverride) {\r\n        coroutineScope.launch {\r\n            startJob?.cancel()\r\n            textToSpeech?.stop()", "choices": [{"text": "\r\n            useDetectLanguage = true\r\n            textToSpeech = new TextToSpeech()\r\n            textToSpeech.lang = lang\r\n            initializedState = 1\r\n            startJob = textToSpeech.start()\r\n        }\r\n    }\r\n    fun stopLanguage() {\r\n        coroutineScope.launch {\r\n            startJob?.cancel()\r\n            textToSpeech?.stop()\r\n            useDetectLanguage = false\r\n            textToSpeech = null\r\n            initializedState = 0\r\n        }\r\n    }\r\n    fun start"}], "metadata": {"task_id": "Feeder/168", "ground_truth": "            startJob?.join()\r\n            _lang.update { lang }\r\n            play()\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "import java.util.Locale\nimport com.nononsenseapps.feeder.R\nimport android.os.Build\nimport android.content.Context\nfun Context.getLocales(): Sequence<Locale> =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        sequence {\r\n            val locales = resources.configuration.locales\r\n\r\n            for (i in 0 until locales.size()) {\r\n                yield(locales[i])\r\n            }", "choices": [{"text": " }\r\n        }\r\n    }\r\nfun Context.getResources(): Resources =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        sequence {\r\n            val resources = resources.configuration.resources\r\n\r\n            for (i in 0 until resources.size()) {\r\n                yield(resources[i])\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/170", "ground_truth": "        }\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        sequenceOf(resources.configuration.locale)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "import kotlin.math.max\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.nononsenseapps.feeder.util.logDebug\nimport com.nononsenseapps.feeder.db.room.ID_UNSET\nimport com.nononsenseapps.feeder.db.room.FeedItem\nimport com.nononsenseapps.feeder.db.room.Feed\nsuspend fun syncFeeds(\r\n        feedId: Long = ID_UNSET,\r\n        feedTag: String = \"\",\r\n        forceNetwork: Boolean = false,\r\n        minFeedAgeMinutes: Int = 5,\r\n    ): Boolean {\r\n        logDebug(LOG_TAG, \"${Thread.currentThread().name}: Taking sync mutex\")\r\n        return syncMutex.withLock {\r\n            withContext(singleThreadedSync) {\r\n                syncFeeds(\r\n                    feedId = feedId,\r\n                    feedTag = feedTag,\r\n                    maxFeedItemCount = repository.maximumCountPerFeed.value,\r\n                    forceNetwork = forceNetwork,", "choices": [{"text": "\r\n                    minFeedAgeMinutes = minFeedAgeMinutes,\r\n                )\r\n            }\r\n        }\r\n    }\r\nsuspend fun syncFeeds(\r\n        feedId: Long = ID_UNSET,\r\n        feedTag: String = \"\",\r\n        maxFeedItemCount: Int = repository.maximumCountPerFeed.value,\r\n        forceNetwork: Boolean = false,\r\n        minFeedAgeMinutes: Int = 5,\r\n    ): Boolean {\r\n        logDebug(LOG_TAG, \"${Thread.currentThread().name}: Taking sync"}], "metadata": {"task_id": "Feeder/171", "ground_truth": "                    minFeedAgeMinutes = minFeedAgeMinutes,\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssLocalSync.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nimport com.nononsenseapps.feeder.db.room.FeedItemDao\nimport android.content.Context\n\r\n@OptIn(DelicateCoroutinesApi::class)\r\nprivate fun markAsNotified(\r\n    context: Context,\r\n    feedItemDao: FeedItemDao,\r\n    itemIds: LongArray?,\r\n) {\r\n    if (itemIds != null) {\r\n        GlobalScope.launch(Dispatchers.Default) {\r\n            val idList = itemIds.toList()", "choices": [{"text": "[0];\r\n            feedItemDao.markAsNotified(context, idList);\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(DelicateCoroutinesApi::class)\r\nprivate fun markAsRead(\r\n    context: Context,\r\n    feedItemDao: FeedItemDao,\r\n    itemIds: LongArray?,\r\n) {\r\n    if (itemIds!= null) {\r\n        GlobalScope.launch(Dispatchers.Default) {\r\n            val idList = itemIds.toList()[0];\r\n"}], "metadata": {"task_id": "Feeder/173", "ground_truth": "            feedItemDao.markAsNotified(idList)\r\n            cancelNotifications(context, idList)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotificationBroadcastReceiver.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.nononsenseapps.feeder.util.notificationManager\nimport com.nononsenseapps.feeder.R\nimport androidx.core.content.ContextCompat\nimport android.content.pm.PackageManager\nimport android.content.Context\nimport android.app.Notification\nimport android.Manifest\nsuspend fun cancelNotifications(\r\n    context: Context,\r\n    feedItemIds: List<Long>,\r\n) = withContext(Dispatchers.Default) {\r\n    if (ContextCompat.checkSelfPermission(\r\n            context,\r\n            Manifest.permission.POST_NOTIFICATIONS,\r\n        ) != PackageManager.PERMISSION_GRANTED\r\n    ) {\r\n        return@withContext\r\n    }\r\n\r\n    val nm = context.notificationManager\r\n\r\n    for (feedItemId in feedItemIds) {\r\n        nm.cancel(feedItemId.toInt())\r\n    }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/174", "ground_truth": "\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\r\n        notify(context)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.URI_FEEDITEMS\nimport com.nononsenseapps.feeder.db.COL_LINK\nimport com.nononsenseapps.feeder.R\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\ninternal fun getOpenInDefaultActivityIntent(\r\n    context: Context,\r\n    feedItemId: Long,\r\n    link: String? = null,\r\n): Intent =\r\n    Intent(\r\n        Intent.ACTION_VIEW,\r\n        // Important to keep the URI different so PendingIntents don't collide\r\n        URI_FEEDITEMS.buildUpon().appendPath(\"$feedItemId\").also {\r\n            if (link != null) {\r\n                it.appendQueryParameter(COL_LINK, link)", "choices": [{"text": "\r\n            } else {\r\n                it.appendQueryParameter(COL_LINK, null)\r\n            }\r\n        },\r\n        PendingIntent.getActivity(\r\n            context,\r\n            0,\r\n            getOpenInDefaultActivityIntent(context, feedItemId),\r\n            PendingIntent.FLAG_UPDATE_CURRENT\r\n        ),\r\n        null\r\n    );\r\n\r\ninternal fun getOpenInDefaultActivityIntent(\r\n    context: Context,\r\n    feedItemId: Long,\r\n    link: String? = null,\r\n): Intent ="}], "metadata": {"task_id": "Feeder/176", "ground_truth": "            }\r\n        }.build(),\r\n        context,\r\n        OpenLinkInDefaultActivity::class.java,\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.room.FeedItemWithFeed\nimport com.nononsenseapps.feeder.R\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\nimport android.app.Notification\nprivate fun getDeleteIntent(\r\n    context: Context,\r\n    feedItems: List<FeedItemWithFeed>,\r\n): PendingIntent {\r\n    val intent = Intent(context, RssNotificationBroadcastReceiver::class.java)\r\n    intent.action = ACTION_MARK_AS_NOTIFIED\r\n\r\n    val ids = LongArray(feedItems.size) { i -> feedItems[i].id }\r\n    intent.putExtra(EXTRA_FEEDITEM_ID_ARRAY, ids)\r\n\r\n    return PendingIntent.getBroadcast(\r\n        context,", "choices": [{"text": " intent,\r\n        0,\r\n        PendingIntent.FLAG_UPDATE_CURRENT\r\n    )\r\n}\r\n\r\n@DI\r\npublic class RssNotificationBroadcastReceiver extends BroadcastReceiver {\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        val feedItems = intent.getParcelableArrayListExtra(EXTRA_FEEDITEM_ID_ARRAY)\r\n        val deleteIntent = getDeleteIntent(context, feedItems)\r\n\r\n        Notification.Builder builder = new Notification.Builder(context)\r\n           "}], "metadata": {"task_id": "Feeder/178", "ground_truth": "        0,\r\n        intent,\r\n        PendingIntent.FLAG_UPDATE_CURRENT or FLAG_IMMUTABLE,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.room.FeedItemWithFeed\nimport com.nononsenseapps.feeder.db.URI_FEEDITEMS\nimport com.nononsenseapps.feeder.R\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nimport android.app.Notification\ninternal fun getDeleteIntent(\r\n    context: Context,\r\n    feedItem: FeedItemWithFeed,\r\n): Intent {\r\n    val intent = Intent(context, RssNotificationBroadcastReceiver::class.java)\r\n    intent.action = ACTION_MARK_AS_NOTIFIED\r\n    intent.data = Uri.withAppendedPath(URI_FEEDITEMS, \"${feedItem.id}\")", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/179", "ground_truth": "    val ids: LongArray = longArrayOf(feedItem.id)\r\n    intent.putExtra(EXTRA_FEEDITEM_ID_ARRAY, ids)\r\n\r\n    return intent\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "import kotlinx.coroutines.cancel\nimport com.nononsenseapps.feeder.model.summaryNotificationId\nimport com.nononsenseapps.feeder.model.cancelNotification\ninternal suspend fun unNotifyForMissingItems(\r\n        prev: List<Long>,\r\n        current: List<Long>,\r\n    ) {\r\n        if (current.isEmpty()) {\r\n            cancelNotification(summaryNotificationId.toLong())\r\n        }\r\n        prev.filter {", "choices": [{"text": " ==> {\r\n            if (current.contains(prev.get(0))) {\r\n                prev.remove(0)\r\n            }\r\n        }\r\n        current.filter {\r\n            ==> {\r\n                if (prev.contains(current.get(0))) {\r\n                    current.remove(0)\r\n                }\r\n            }\r\n        }\r\n        if (prev.isEmpty() && current.isEmpty()) {\r\n            cancelNotification(summaryNotificationId.toLong())\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/192", "ground_truth": "            it !in current\r\n        }.forEach {\r\n            cancelNotification(it)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\notifications\\NotificationsWorker.kt"}}
{"prompt": "import android.content.Intent\nimport android.app.Activity\nfun Activity.onNavigateUpFromIntentActivities() {\r\n    startActivity(\r\n        Intent(\r\n            this,", "choices": [{"text": ",\r\n            MainActivity.class\r\n        )\r\n    )\r\n}\r\n\r\nclass MainActivity extends Activity {\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        getMenuInflater().infl"}], "metadata": {"task_id": "Feeder/197", "ground_truth": "            MainActivity::class.java,\r\n        ),\r\n    )\r\n    finish()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\AddFeedFromShareActivity.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewAutoCompleteOutlinedText() {\r\n    AutoCompleteResults(\r\n        displaySuggestions = true,\r\n        suggestions = immutableListHolderOf(\"One\", \"Two\", \"Three\"),\r\n        onSuggestionClicked = {},\r\n        suggestionContent = {\r\n            Text(text = it)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/204", "ground_truth": "        },\r\n    ) {\r\n        OutlinedTextField(value = \"Testing\", onValueChange = {})\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\components\\AutoCompleteText.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@Preview\r\nprivate fun Preview() =\r\n    DeleteFeedDialog(\r\n        feeds =\r\n            immutableListHolderOf(\r\n                DeletableFeed(1, \"A Feed\"),", "choices": [{"text": "\r\n                DeletableFeed(2, \"A Feed\"),\r\n                DeletableFeed(3, \"A Feed\"),\r\n                DeletableFeed(4, \"A Feed\"),\r\n                DeletableFeed(5, \"A Feed\"),\r\n                DeletableFeed(6, \"A Feed\"),\r\n                DeletableFeed(7, \"A Feed\"),\r\n                DeletableFeed(8, \"A Feed\"),\r\n                DeletableFeed(9, \"A Feed\"),\r\n                DeletableFeed(10, \"A Feed\"),\r\n"}], "metadata": {"task_id": "Feeder/206", "ground_truth": "                DeletableFeed(2, \"Another Feed\"),\r\n            ),\r\n        onDismiss = {},\r\n        onDelete = {},\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\deletefeed\\DeleteFeedScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Edit Feed Phone\")\r\n@Composable\r\nprivate fun PreviewEditFeedScreenPhone() {\r\n    FeederTheme {\r\n        EditFeedScreen(\r\n            screenType = ScreenType.SINGLE,\r\n            onNavigateUp = {},\r\n            onOk = {},", "choices": [{"text": "\r\n            onCancel = {}\r\n        )\r\n    }\r\n}\r\n\r\n@Preview(\"Edit Feed Phone\")\r\n@Composable\r\nprivate fun PreviewEditFeedScreen() {\r\n    FeederTheme {\r\n        EditFeedScreen(\r\n            screenType = ScreenType.SINGLE,\r\n            onNavigateUp = {},\r\n            onOk = {},\r\n            onCancel = {}\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/207", "ground_truth": "            onCancel = {},\r\n            viewState = EditFeedScreenState(),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Edit Feed Foldable\", device = Devices.FOLDABLE)\r\n@Preview(\"Edit Feed Tablet\", device = Devices.PIXEL_C)\r\n@Composable\r\nprivate fun PreviewEditFeedScreenLarge() {\r\n    FeederTheme {\r\n        EditFeedScreen(\r\n            screenType = ScreenType.DUAL,\r\n            onNavigateUp = {},\r\n            onOk = {},", "choices": [{"text": "\r\n            onCancel = {}\r\n        )\r\n    }\r\n}\r\n\r\n@Preview(\"Edit Feed Foldable\", device = Devices.FOLDABLE)\r\n@Preview(\"Edit Feed Tablet\", device = Devices.PIXEL_C)\r\n@Composable\r\nprivate fun PreviewEditFeedScreenSmall() {\r\n    FeederTheme {\r\n        EditFeedScreen(\r\n            screenType = ScreenType.DUAL,\r\n            onNavigateUp = {},\r\n            onOk = {},\r\n            onCancel = {}\r\n        )\r\n"}], "metadata": {"task_id": "Feeder/208", "ground_truth": "            onCancel = {},\r\n            viewState = EditFeedScreenState(),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreen.kt"}}
{"prompt": "import java.net.URL\ninternal fun isValidUrl(value: String): Boolean {\r\n    return try {\r\n        URL(value)", "choices": [{"text": ".parse(value);\r\n        return true;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/209", "ground_truth": "        true\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreenViewModel.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport android.content.res.Configuration\n\r\n@Preview(\r\n    name = \"Nothing to read day\",\r\n    uiMode = Configuration.UI_MODE_NIGHT_NO,\r\n)\r\n@Preview(\r\n    name = \"Nothing to read night\",\r\n    uiMode = Configuration.UI_MODE_NIGHT_YES,\r\n)\r\n@Composable\r\nprivate fun PreviewNothingToRead() {\r\n    FeederTheme {", "choices": [{"text": " }\r\n}\r\n\r\n@Preview(\r\n    name = \"Nothing to read week\",\r\n    uiMode = Configuration.UI_MODE_NIGHT_NO,\r\n)\r\n@Preview(\r\n    name = \"Nothing to read night\",\r\n    uiMode = Configuration.UI_MODE_NIGHT_YES,\r\n)\r\n@Composable\r\nprivate fun PreviewNothingToReadWeek() {\r\n    FeederTheme { }\r\n}\r\n\r\n@Preview(\r\n    name = \"Nothing to read month\",\r\n    uiMode"}], "metadata": {"task_id": "Feeder/210", "ground_truth": "        Surface {\r\n            NothingToRead()\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\empty\\NothingToRead.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport com.nononsenseapps.feeder.ui.compose.utils.ThemePreviews\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.ui.compose.deletefeed.DeletableFeed\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@ThemePreviews\r\nprivate fun Preview() {\r\n    FeederTheme {\r\n        EditFeedDialog(\r\n            feeds =\r\n                immutableListHolderOf(\r\n                    DeletableFeed(1, \"A Feed\"),\r\n                    DeletableFeed(2, \"Another Feed\"),", "choices": [{"text": "\r\n                    DeletableFeed(3, \"Another Feed\"),\r\n                    DeletableFeed(4, \"Another Feed\"),\r\n                    DeletableFeed(5, \"Another Feed\"),\r\n                    DeletableFeed(6, \"Another Feed\"),\r\n                    DeletableFeed(7, \"Another Feed\"),\r\n                    DeletableFeed(8, \"Another Feed\"),\r\n                    DeletableFeed(9, \"Another Feed\"),\r\n                    DeletableFeed(10, \"Another Feed\"),\r\n                    DeletableFeed(11"}], "metadata": {"task_id": "Feeder/211", "ground_truth": "                ),\r\n            onDismiss = {},\r\n        ) {}\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\EditFeedDialog.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.outlined.Circle\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun FeedItemNewIndicator(\r\n    size: Dp,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(modifier = modifier) {\r\n        Icon(\r\n            Icons.Outlined.Circle,\r\n            contentDescription = stringResource(id = R.string.unread_adjective),\r\n            modifier =\r\n                Modifier", "choices": [{"text": "(\r\n                    size = size,\r\n                    modifier =\r\n                        Modifier(\r\n                            size = size,\r\n                            modifier = Modifier(\r\n                                size = size,\r\n                                modifier = Modifier(\r\n                                    size = size,\r\n                                    modifier = Modifier(\r\n                                        size = size,\r\n                                        modifier = Modifier(\r\n                                            size = size,\r\n                                            modifier = Modifier(\r\n                                                size = size,\r\n                                                modifier = Modifier(\r\n                                                    size = size,\r\n                                                    modifier = Modifier(\r\n"}], "metadata": {"task_id": "Feeder/214", "ground_truth": "                    .size(size),\r\n            tint = MaterialTheme.colorScheme.primary,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun FeedItemSavedIndicator(\r\n    size: Dp,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier = modifier,\r\n    ) {\r\n        Icon(\r\n            Icons.Default.Star,\r\n            contentDescription = stringResource(id = R.string.saved_article),\r\n            modifier =\r\n                Modifier", "choices": [{"text": ".Justify,\r\n        ),\r\n    };\r\n}\r\n\r\n@Composable\r\nfun FeedItemSavedIndicator(\r\n    size: Dp,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier = modifier,\r\n    ) {\r\n        Icon(\r\n            Icons.Default.Star,\r\n            contentDescription = stringResource(id = R.string.saved_article),\r\n            modifier =\r\n                Modifier.Justify,\r"}], "metadata": {"task_id": "Feeder/215", "ground_truth": "                    .size(size),\r\n            tint = MaterialTheme.colorScheme.primary,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(\"Light\")\r\n@Composable\r\nprivate fun PreviewLightFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.DAY) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                        .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    FeedItemSavedIndicator(size = 8.dp)", "choices": [{"text": "\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(\"Dark\")\r\n@Composable\r\nprivate fun PreviewDarkFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.DAY) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                       .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n"}], "metadata": {"task_id": "Feeder/216", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(\"Dark\")\r\n@Composable\r\nprivate fun PreviewDarkFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.NIGHT) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                        .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    FeedItemSavedIndicator(size = 8.dp)", "choices": [{"text": "\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(\"Light\")\r\n@Composable\r\nprivate fun PreviewLightFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.LIGHT) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                       .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    Feed"}], "metadata": {"task_id": "Feeder/217", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "import androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.rememberTooltipState\nimport androidx.compose.material3.TooltipDefaults\nimport androidx.compose.material3.TooltipBox\nimport androidx.compose.material3.PlainTooltip\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.Box\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun PlainTooltipBox(\r\n    tooltip: @Composable () -> Unit,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    TooltipBox(\r\n        positionProvider = TooltipDefaults.rememberPlainTooltipPositionProvider(),\r\n        state = rememberTooltipState(),\r\n        tooltip = {\r\n            PlainTooltip {\r\n                tooltip()", "choices": [{"text": "\r\n            },\r\n        },\r\n        content = {\r\n            PlainTooltip {\r\n                content()\r\n            },\r\n        },\r\n    );\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun TooltipBox(\r\n    positionProvider: @Composable () -> Box,\r\n    state: rememberTooltipState(),\r\n    tooltip: @Composable () -> Unit,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    TooltipBox(\r\n       "}], "metadata": {"task_id": "Feeder/218", "ground_truth": "            }\r\n        },\r\n        content = content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.feed.FeedOrTag\nimport com.nononsenseapps.feeder.model.workmanager.requestFeedSync\nfun requestImmediateSyncOfCurrentFeedOrTag() {\r\n        val (feedId, feedTag) = repository.currentFeedAndTag.value\r\n        requestFeedSync(\r\n            di = di,", "choices": [{"text": "\r\n            feedId = feedId,\r\n            feedTag = feedTag\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Feeder/227", "ground_truth": "            feedId = feedId,\r\n            feedTag = feedTag,\r\n            forceNetwork = true,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "val articleFeedUrl String?\nval feedDisplayTitle String\nval feedScreenTitle ScreenTitle\n fun requestImmediateSyncOfAll() {", "choices": [{"text": "\nval feedTitle String?\nval feedDescription String?\nval feedImageUrl String?\nval feedImageWidth Integer?\nval feedImageHeight Integer?\nval feedImageUrlString String?\nval feedImageWidthString String?\nval feedImageHeightString String?\nval feedImageUrlString String?\nval feedImageWidthString String?\nval feedImageHeightString String?\nval feedImageUrlString String?\nval feedImageWidthString String?\nval feedImageHeightString String?\nval feedImageUrlString String?\nval feedImageWidthString String?\nval feedImageHeightString"}], "metadata": {"task_id": "Feeder/228", "ground_truth": "        requestFeedSync(\r\n            di = di,\r\n            forceNetwork = true,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "val articleId Long\nval articleLink String?\nval articleTitle String", "choices": [{"text": "\nval articleTitle String?\nval articleUrl String?\nval articleUrlShort String?\nval articleUrlLong String?\nval articleUrlShortLong String?\nval articleUrlLongLong String?\nval articleUrlShortLongLong String?\nval articleUrlLongLongLong String?\nval articleUrlShortLongLongString String?\nval articleUrlLongLongLongString String?\nval articleUrlShortLongLongString String?\nval articleUrlLongLongLongString String?\nval articleUrlShortLongLongString String?\nval articleUrlLongLongLongString String?\nval articleUrlShortLongLong"}], "metadata": {"task_id": "Feeder/233", "ground_truth": "override fun onCleared() {\r\n        super.onCleared()\r\n        ttsStateHolder.shutdown()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.PermanentNavigationDrawer\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.Row\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun PermanentNavigationDrawer(\r\n    drawerContent: @Composable () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    Row(modifier.fillMaxSize()) {\r\n        drawerContent()", "choices": [{"text": " {\r\n            content() {\r\n                content() {\r\n                    content() {\r\n                        content() {\r\n                            content() {\r\n                                content() {\r\n                                    content() {\r\n                                        content() {\r\n                                            content() {\r\n                                                content() {\r\n                                                    content() {\r\n                                                        content() {\r\n                                                            content() {\r\n                                                                content() {\r\n                                                                    content() {\r\n                                                                        content() {\r\n                                                                            content() {\r\n                                                                                content() {\r\n                                "}], "metadata": {"task_id": "Feeder/236", "ground_truth": "        Box {\r\n            content()\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun ModalDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = DrawerDefaults.shape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.ModalDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier,\r\n        drawerShape,\r\n        drawerContainerColor,", "choices": [{"text": "\r\n        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    );\r\n}\r\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun ModalDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = DrawerDefaults.shape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.ModalDrawerEle"}], "metadata": {"task_id": "Feeder/237", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun DismissibleDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = RectangleShape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.DismissibleDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier,\r\n        drawerShape,\r\n        drawerContainerColor,", "choices": [{"text": "\r\n        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    );\r\n}\r\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun DismissibleDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = RectangleShape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.DismissibleDrawerEle"}], "metadata": {"task_id": "Feeder/238", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.paneTitle\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun PermanentDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = RectangleShape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.PermanentDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    val navigationMenu = getString(Strings.NavigationMenu)\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier.semantics {\r\n            paneTitle = navigationMenu\r\n        },\r\n        drawerShape,\r\n        drawerContainerColor,", "choices": [{"text": "\r\n        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}\r\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun PermanentDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = RectangleShape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.PermanentDrawerElevation,\r"}], "metadata": {"task_id": "Feeder/239", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "import kotlin.math.abs\nimport com.nononsenseapps.feeder.ui.compose.material3.SwipeableDefaults.AnimationSpec\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.runtime.State\nimport androidx.compose.foundation.gestures.draggable\nimport androidx.compose.animation.core.AnimationSpec\nimport androidx.compose.animation.core.Animatable\nprivate suspend fun animateInternalToOffset(\r\n        target: Float,\r\n        spec: AnimationSpec<Float>,\r\n    ) {\r\n        draggableState.drag {\r\n            var prevValue = absoluteOffset.value\r\n            animationTarget.value = target\r\n            isAnimationRunning = true\r\n            try {\r\n                Animatable(prevValue).animateTo(target, spec) {\r\n                    dragBy(this.value - prevValue)\r\n                    prevValue = this.value\r\n                }\r\n            } finally {", "choices": [{"text": "\r\n                isAnimationRunning = false\r\n            }\r\n        }\r\n    }\r\nprivate suspend fun animateInternalToOffset(\r\n        target: Offset,\r\n        spec: AnimationSpec<Offset>,\r\n    ) {\r\n        draggableState.drag {\r\n            var prevValue = absoluteOffset.value\r\n            animationTarget.value = target\r\n            isAnimationRunning = true\r\n            try {\r\n                Animatable(prevValue).animateTo(target, spec) {\r\n                    dragBy(this.value - prevValue)\r\n                   "}], "metadata": {"task_id": "Feeder/246", "ground_truth": "                animationTarget.value = null\r\n                isAnimationRunning = false\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "import kotlinx.coroutines.flow.Flow\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.runtime.getValue\nimport androidx.compose.material3.ExperimentalMaterial3Api\n @ExperimentalMaterial3Api\r\n    internal suspend fun snapTo(targetValue: T) {\r\n        latestNonEmptyAnchorsFlow.collect { anchors ->\r\n            val targetOffset = anchors.getOffset(targetValue)\r\n            requireNotNull(targetOffset) {\r\n                \"The target value must have an associated anchor.\"", "choices": [{"text": "\r\n            }\r\n            anchors.snapTo(targetValue, targetOffset)\r\n        } }\r\n    }\r\n\r\n    @ExperimentalMaterial3Api\r\n    internal suspend fun snapTo(targetValue: T) {\r\n        latestNonEmptyAnchorsFlow.collect { anchors ->\r\n            val targetOffset = anchors.getOffset(targetValue)\r\n            requireNotNull(targetOffset) {\r\n                \"The target value must have an associated anchor.\"\r\n            }\r\n            anchors.snapTo(targetValue, targetOffset)\r\n        } }\r"}], "metadata": {"task_id": "Feeder/247", "ground_truth": "            }\r\n            snapInternalToOffset(targetOffset)\r\n            currentValue = targetValue\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) return true\r\n        if (other !is SwipeProgress<*>) return false\r\n\r\n        if (from != other.from) return false", "choices": [{"text": "\r\n        if (to!= other.to) return false\r\n        if (duration!= other.duration) return false\r\n\r\n        return true\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return `SwipeProgress(from: ${from}, to: ${to}, duration: ${duration})`\r\n    }\r\n}\r\n\r\nexport default SwipeProgress\r\n"}], "metadata": {"task_id": "Feeder/250", "ground_truth": "        if (to != other.to) return false\r\n        if (fraction != other.fraction) return false\r\n\r\n        return true\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.material3.SwipeableDefaults.AnimationSpec\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.saveable.Saver\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.animation.core.AnimationSpec\n\r\n@Composable\r\n@ExperimentalMaterial3Api\r\ninternal fun <T : Any> rememberSwipeableState(\r\n    initialValue: T,\r\n    animationSpec: AnimationSpec<Float> = AnimationSpec,\r\n    confirmStateChange: (newValue: T) -> Boolean = { true },\r\n): SwipeableState<T> {\r\n    return rememberSaveable(\r\n        saver =\r\n            SwipeableState.Saver(\r\n                animationSpec = animationSpec,\r\n                confirmStateChange = confirmStateChange,\r\n            ),\r\n    ) {\r\n        SwipeableState(\r\n            initialValue = initialValue,", "choices": [{"text": "\r\n            animationSpec = animationSpec,\r\n            confirmStateChange = confirmStateChange,\r\n        ).save();\r\n    };\r\n}\r\n\r\n@State\r\n@ExperimentalMaterial3Api\r\ninternal class SwipeableState<T> {\r\n    private final T initialValue;\r\n    private final AnimationSpec<Float> animationSpec;\r\n    private final Boolean confirmStateChange;\r\n\r\n    SwipeableState(\r\n        T initialValue,\r\n        AnimationSpec<Float> animationSpec,\r\n        Boolean confirmStateChange,\r\n    ) {"}], "metadata": {"task_id": "Feeder/252", "ground_truth": "            animationSpec = animationSpec,\r\n            confirmStateChange = confirmStateChange,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.Icons\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun SavedArticles(\r\n    title: String = \"Bar\",\r\n    unreadCount: Int = 10,\r\n    onItemClick: () -> Unit = {},\r\n) {\r\n    Feed(\r\n        title = title,\r\n        unreadCount = unreadCount,\r\n        onItemClick = onItemClick,\r\n        image = {\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,", "choices": [{"text": "\r\n            ),\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r\n            ),\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r\n            ),\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r\n            ),\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r\n            ),\r\n            Icon(\r\n                Icons."}], "metadata": {"task_id": "Feeder/259", "ground_truth": "                modifier = Modifier.size(24.dp),\r\n            )\r\n        },\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun TopLevelFeed(\r\n    title: String = \"Foo\",\r\n    unreadCount: Int = 99,\r\n    onItemClick: () -> Unit = {},\r\n    imageUrl: String? = null,\r\n) = Feed(", "choices": [{"text": "{\r\n    title,\r\n    unreadCount,\r\n    onItemClick,\r\n    imageUrl,\r\n});\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun TopLevelFeed(\r\n    title: String = \"Foo\",\r\n    unreadCount: Int = 99,\r\n    onItemClick: () -> Unit = {},\r\n    imageUrl: String? = null,\r\n) = Feed(\r\n    {\r\n        title,\r\n        unreadCount,\r\n        onItemClick,\r\n        imageUrl,"}], "metadata": {"task_id": "Feeder/260", "ground_truth": "    title = title,\r\n    imageUrl = imageUrl,\r\n    unreadCount = unreadCount,\r\n    onItemClick = onItemClick,\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun ChildFeed(\r\n    title: String = \"Foo\",\r\n    imageUrl: String? = null,\r\n    unreadCount: Int = 99,\r\n    onItemClick: () -> Unit = {},\r\n) {\r\n    Feed(\r\n        title = title,", "choices": [{"text": "\r\n        imageUrl = imageUrl,\r\n        unreadCount = unreadCount,\r\n        onItemClick = onItemClick,\r\n    );\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun ChildFeed(\r\n    title: String = \"Foo\",\r\n    imageUrl: String? = null,\r\n    unreadCount: Int = 99,\r\n    onItemClick: () -> Unit = {},\r\n) {\r\n    Feed(\r\n        title = title,\r\n        imageUrl = imageUrl,\r\n        unread"}], "metadata": {"task_id": "Feeder/261", "ground_truth": "        imageUrl = imageUrl,\r\n        unreadCount = unreadCount,\r\n        onItemClick = onItemClick,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun Placeholder() {\r\n    Box(\r\n        modifier =\r\n            Modifier", "choices": [{"text": " {\r\n                type = Modifier.Type.PLACEHOLDER\r\n            }\r\n    );\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun Placeholder2() {\r\n    Box(\r\n        modifier =\r\n            Modifier {\r\n                type = Modifier.Type.PLACEHOLDER\r\n            }\r\n    );\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun Placeholder3() {\r\n    Box(\r\n        modifier =\r\n            Modifier {\r"}], "metadata": {"task_id": "Feeder/262", "ground_truth": "                .fillMaxWidth()\r\n                .height(48.dp),\r\n    ) {\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedUrl: String? = null,\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                +(\"feedUrl\" to feedUrl)\r\n            }", "choices": [{"text": " {\r\n                +(\"navController\" to navController)\r\n                +(\"feedUrl\" to feedUrl)\r\n            }\r\n        navController.navigate(params)\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/263", "ground_truth": "\r\n        navController.navigate(path + params) {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.searchfeed.SearchFeedScreen\nimport com.nononsenseapps.feeder.ui.compose.feed.FeedScreen\nimport com.nononsenseapps.feeder.base.diAwareViewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n @Composable\r\n    override fun RegisterScreen(\r\n        navController: NavController,\r\n        backStackEntry: NavBackStackEntry,\r\n        navDrawerListState: LazyListState,\r\n    ) {\r\n        SearchFeedScreen(\r\n            onNavigateUp = {\r\n                navController.popBackStack()\r\n            },\r\n            searchFeedViewModel = backStackEntry.diAwareViewModel(),\r\n            initialFeedUrl = backStackEntry.arguments?.getString(\"feedUrl\"),\r\n        ) {\r\n            AddFeedDestination.navigate(\r\n                navController,\r\n                feedUrl = it.url,", "choices": [{"text": "\r\n            );\r\n        };\r\n\r\n        FeedScreen(\r\n            onNavigateUp = {\r\n                navController.popBackStack()\r\n            },\r\n            feedViewModel = backStackEntry.diAwareViewModel(),\r\n            initialFeedUrl = backStackEntry.arguments?.getString(\"feedUrl\"),\r\n        ) {\r\n            AddFeedDestination.navigate(\r\n                navController,\r\n                feedUrl = it.url,\r\n            );\r\n        };\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/264", "ground_truth": "                feedTitle = it.title,\r\n                feedImage = it.feedImage,\r\n            )\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedUrl: String,\r\n        feedTitle: String = \"\",\r\n        feedImage: String = \"\",\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                +(\"feedTitle\" to feedTitle)\r\n                +(\"feedImage\" to feedImage)\r\n            }", "choices": [{"text": " {\r\n                +(\"feedUrl\" to feedUrl)\r\n                +(\"feedTitle\" to feedTitle)\r\n                +(\"feedImage\" to feedImage)\r\n            }\r\n        navController.navigate(feedUrl, params)\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/265", "ground_truth": "\r\n        navController.navigate(\"$path/${feedUrl.urlEncode()}$params\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedId: Long,", "choices": [{"text": "\r\n    ) {\r\n        navController.navigate(feedId);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Feeder/267", "ground_truth": "    ) {\r\n        navController.navigate(\"$path/$feedId\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        itemId: Long,", "choices": [{"text": "\r\n    ) {\r\n        navController.navigate(itemId);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Feeder/270", "ground_truth": "    ) {\r\n        navController.navigate(\"$path/$itemId\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        syncCode: String,\r\n        secretKey: String,\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                if (syncCode.isNotBlank()) {\r\n                    +(\"syncCode\" to syncCode)\r\n                }\r\n                if (secretKey.isNotBlank()) {\r\n                    +(\"secretKey\" to secretKey)\r\n                }\r\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/271", "ground_truth": "\r\n        navController.navigate(\"$path$params\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.sync.SyncScreenViewModel\nimport com.nononsenseapps.feeder.ui.compose.sync.SyncScreen\nimport com.nononsenseapps.feeder.base.diAwareViewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n @Composable\r\n    override fun RegisterScreen(\r\n        navController: NavController,\r\n        backStackEntry: NavBackStackEntry,\r\n        navDrawerListState: LazyListState,\r\n    ) {\r\n        val syncRemoteViewModel = backStackEntry.diAwareViewModel<SyncScreenViewModel>()\r\n\r\n        SyncScreen(\r\n            onNavigateUp = {\r\n                if (!navController.popBackStack()) {\r\n                    SettingsDestination.navigate(navController)", "choices": [{"text": "\n                }\r\n            },\r\n            onNavigateDown = {\r\n                if (!navController.pushBackStack(syncRemoteViewModel)) {\r\n                    SettingsDestination.navigate(navController)\r\n                }\r\n            },\r\n            syncRemoteViewModel = syncRemoteViewModel,\r\n            navDrawerListState = navDrawerListState,\r\n        )\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/272", "ground_truth": "                }\r\n            },\r\n            viewModel = syncRemoteViewModel,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "private fun appendIfNotEmpty(\r\n        name: String,\r\n        value: String?,\r\n    ) {\r\n        if (value?.isNotEmpty() != true) {\r\n            return\r\n        }\r\n\r\n        when {\r\n            sb.isEmpty() -> sb.append(\"?\")", "choices": [{"text": "\r\n            sb.append(value)\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    private fun appendIfNotEmpty(\r\n        name: String,\r\n        value: String?,\r\n    ) {\r\n        if (value?.isNotEmpty()!= true) {\r\n            return\r\n        }\r\n\r\n        when {\r\n            sb.append(value)\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    private fun appendIfNotEmpty(\r\n        name: String,\r\n        value:"}], "metadata": {"task_id": "Feeder/273", "ground_truth": "            else -> sb.append(\"&\")\r\n        }\r\n\r\n        sb.append(\"$name=${value.urlEncode()}\")\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.filled.Stop\nimport androidx.compose.material.icons.filled.Pause\n\r\n@Preview\r\n@Composable\r\nprivate fun PlayerPreview() {\r\n    FeederTheme {\r\n        TTSPlayer(\r\n            currentlyPlaying = true,\r\n            onPlay = {},\r\n            onPause = {},\r\n            onStop = {},", "choices": [{"text": "\r\n        )\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nprivate fun PlayPreview() {\r\n    FeederTheme {\r\n        TTSPlayer(\r\n            currentlyPlaying = true,\r\n            onPlay = {},\r\n            onPause = {},\r\n            onStop = {},\r\n        )\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nprivate fun PausePreview() {\r\n    FeederTheme {\r\n        TTSPlayer(\r\n            currentlyPlaying = true,\r"}], "metadata": {"task_id": "Feeder/279", "ground_truth": "            onSkipNext = {},\r\n            languages = ImmutableHolder(emptyList()),\r\n        ) {}\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\readaloud\\ReadAloudPlayer.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.components.safeSemantics\nimport androidx.compose.ui.semantics.testTag\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun SearchingIndicator(modifier: Modifier = Modifier) {\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier =\r\n            modifier\r\n                .fillMaxWidth()\r\n                .safeSemantics {\r\n                    testTag = \"searchingIndicator\"", "choices": [{"text": "\n                }\r\n            ),\r\n    );\r\n}\r\n"}], "metadata": {"task_id": "Feeder/280", "ground_truth": "                },\r\n    ) {\r\n        CircularProgressIndicator()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\searchfeed\\SearchFeedScreen.kt"}}
{"prompt": "import java.net.URL\nimport java.net.MalformedURLException\nimport com.nononsenseapps.feeder.R\nprivate fun isValidUrl(url: String): Boolean {\r\n    if (url.isBlank()) {\r\n        return false\r\n    }\r\n    return try {\r\n        try {\r\n            URL(url)\r\n            true\r\n        } catch (_: MalformedURLException) {\r\n            URL(\"http://$url\")\r\n            true", "choices": [{"text": "\r\n        }\r\n    } catch (_: MalformedURLException) {\r\n        URL(\"http://$url\")\r\n        false\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/281", "ground_truth": "        }\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\searchfeed\\SearchFeedScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.ProvideTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@Composable\r\nprivate fun RowScope.TitleAndSubtitle(\r\n    title: @Composable () -> Unit,\r\n    subtitle: (@Composable () -> Unit)? = null\r\n) {\r\n    Column(\r\n        modifier = Modifier.weight(1f),\r\n        verticalArrangement = Arrangement.Center\r\n    ) {\r\n        ProvideTextStyle(value = MaterialTheme.typography.titleMedium) {\r\n            title()\r\n        }\r\n        if (subtitle != null) {\r\n            Spacer(modifier = Modifier.size(2.dp))\r\n            ProvideTextStyle(value = MaterialTheme.typography.bodyMedium) {", "choices": [{"text": "\r\n                subtitle()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun RowScope.Title(title: @Composable () -> Unit) {\r\n    Column(\r\n        modifier = Modifier.weight(1f),\r\n        verticalArrangement = Arrangement.Center\r\n    ) {\r\n        ProvideTextStyle(value = MaterialTheme.typography.titleMedium) {\r\n            title()\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun Row"}], "metadata": {"task_id": "Feeder/282", "ground_truth": "                subtitle()\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Slider\nimport androidx.compose.material.Surface\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewSliderWithLabel() {\r\n    FeederTheme {\r\n        Surface {\r\n            var value by remember {\r\n                mutableStateOf(1f)\r\n            }\r\n            SliderWithLabel(\r\n                value = value,\r\n                onValueChange = { value = it },\r\n                valueToLabel = { \"%.1fx\".format(value) },\r\n                valueRange = 1f..2f,", "choices": [{"text": "\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewSliderWithLabel() {\r\n    FeederTheme {\r\n        Surface {\r\n            var value by remember {\r\n                mutableStateOf(1f)\r\n            }\r\n            SliderWithLabel(\r\n                value = value,\r\n                onValueChange = { value = it },\r\n                valueToLabel = { \"%.1fx\".format(value) },\r\n                valueRange = 1f..2f,\r\n           "}], "metadata": {"task_id": "Feeder/298", "ground_truth": "                steps = 9,\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SliderWithLabel.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewLeaveSyncChainDialog() {", "choices": [{"text": ".LeaveSyncChainDialog;\r\nimport androidx.compose.ui.tooling.preview.LeaveSyncChainDialog.Listener;\r\nimport androidx.compose.ui.tooling.preview.LeaveSyncChainDialog.Result;\r\nimport androidx.compose.ui.tooling.preview.LeaveSyncChainDialog.ResultListener;\r\nimport androidx.compose.ui.tooling.preview.LeaveSyncChainDialog.State;\r\nimport androidx.compose.ui.tooling.preview.LeaveSyncChainDialog.StateListener;\r\nimport andro"}], "metadata": {"task_id": "Feeder/300", "ground_truth": "    LeaveSyncChainDialog(\r\n        onDismiss = {},\r\n        onOk = {},\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\LeaveSyncChainDialog.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.getScreenType\nimport com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nfun getSyncScreenType(\r\n    windowSize: WindowSizeClass,\r\n    viewState: SyncScreenViewState,\r\n): SyncScreenType =\r\n    when (getScreenType(windowSize)) {\r\n        ScreenType.SINGLE -> {\r\n            when (viewState.singleScreenToShow) {\r\n                SyncScreenToShow.SETUP -> SyncScreenType.SINGLE_SETUP\r\n                SyncScreenToShow.DEVICELIST -> SyncScreenType.SINGLE_DEVICELIST\r\n                SyncScreenToShow.ADD_DEVICE -> SyncScreenType.SINGLE_ADD_DEVICE\r\n                SyncScreenToShow.JOIN -> SyncScreenType.SINGLE_JOIN", "choices": [{"text": "\r\n                SyncScreenToShow.LEAVE -> SyncScreenType.SINGLE_LEAVE\r\n            }\r\n        }\r\n        ScreenType.MULTI -> {\r\n            when (viewState.multiScreenToShow) {\r\n                SyncScreenToShow.SETUP -> SyncScreenType.MULTI_SETUP\r\n                SyncScreenToShow.DEVICELIST -> SyncScreenType.MULTI_DEVICELIST\r\n                SyncScreenToShow.ADD_DEVICE -> SyncScreenType.MULTI_ADD_DEVICE\r\n                SyncScreenToShow.JOIN -> SyncScreenType.MULTI_JOIN\r\n"}], "metadata": {"task_id": "Feeder/301", "ground_truth": "            }\r\n        }\r\n\r\n        ScreenType.DUAL -> SyncScreenType.DUAL\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.db.room.SyncDevice\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewDeviceEntry() {\r\n    FeederTheme {\r\n        Surface {\r\n            DeviceEntry(\r\n                currentDeviceId = 77L,\r\n                device = SyncDevice(deviceId = 1L, deviceName = \"ONEPLUS A6003\"),", "choices": [{"text": "\r\n            ),\r\n        }\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewSyncDeviceEntry() {\r\n    FeederTheme {\r\n        Surface {\r\n            DeviceEntry(\r\n                currentDeviceId = 77L,\r\n                device = SyncDevice(deviceId = 1L, deviceName = \"ONEPLUS A6003\"),\r\n            ),\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/302", "ground_truth": "                onDelete = {},\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "import java.net.URL\nimport net.glxn.qrgen.core.scheme.Url\nimport com.nononsenseapps.feeder.ui.compose.utils.ImmutableHolder\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.activity.compose.BackHandler\n\r\n@Composable\r\nfun SyncAddNewDeviceScreen(\r\n    onNavigateUp: () -> Unit,\r\n    syncUrl: ImmutableHolder<URL>,\r\n    modifier: Modifier = Modifier,\r\n    onLeaveSyncChain: () -> Unit,\r\n) {\r\n    BackHandler(onBack = onNavigateUp)\r\n    val scrollState = rememberScrollState()\r\n\r\n    SyncScaffold(\r\n        leaveSyncVisible = false,\r\n        onNavigateUp = onNavigateUp,\r\n        onLeaveSyncChain = onLeaveSyncChain,\r\n        title = stringResource(id = R.string.add_new_device),\r\n        modifier = modifier,\r\n    ) { innerModifier ->\r\n        SyncAddNewDeviceContent(", "choices": [{"text": "syncUrl, innerModifier, scrollState)\r\n    }\r\n}\r\n\r\n@Composable\r\nfun SyncAddNewDeviceContent(\r\n    syncUrl: ImmutableHolder<URL>,\r\n    modifier: Modifier = Modifier,\r\n    scrollState: rememberScrollState,\r\n) {\r\n    BackHandler(onBack = () -> Unit)\r\n    val scrollState = rememberScrollState()\r\n\r\n    SyncScaffold(\r\n        leaveSyncVisible = false,\r\n        onNavigateUp = () -> Unit,\r\n        onLeaveSyncChain ="}], "metadata": {"task_id": "Feeder/303", "ground_truth": "            syncUrl = syncUrl,\r\n            modifier = innerModifier.verticalScroll(scrollState),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Scan or Enter Phone\")\r\n@Preview(\"Scan or Enter Small Tablet\", device = Devices.NEXUS_7_2013)\r\n@Composable\r\nprivate fun PreviewJoin() {\r\n    FeederTheme {\r\n        SyncJoinScreen(\r\n            onNavigateUp = {},\r\n            onJoinSyncChain = { _, _ -> },\r\n            syncCode = \"\",\r\n            onSetSyncCode = {},\r\n            onLeaveSyncChain = {},", "choices": [{"text": "\r\n        ),\r\n    }\r\n}\r\n\r\n@Preview(\"Scan or Enter Phone\")\r\n@Preview(\"Scan or Enter Small Tablet\", device = Devices.NEXUS_7_2013)\r\n@Composable\r\nprivate fun PreviewLeave() {\r\n    FeederTheme {\r\n        SyncLeaveScreen(\r\n            onNavigateUp = {},\r\n            onLeaveSyncChain = { _, _ -> },\r\n            syncCode = \"\",\r\n            onSetSyncCode = {},\r\n        ),\r\n    }\r\n}\r"}], "metadata": {"task_id": "Feeder/304", "ground_truth": "            secretKey = \"\",\r\n            onSetSecretKey = {},\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Empty Phone\")\r\n@Preview(\"Empty Small Tablet\", device = Devices.NEXUS_7_2013)\r\n@Composable\r\nprivate fun PreviewEmpty() {\r\n    FeederTheme {\r\n        SyncSetupScreen(\r\n            onNavigateUp = {},\r\n            onScanSyncCode = {},", "choices": [{"text": "\r\n            onNavigateDown = {}\r\n        )\r\n    }\r\n}\r\n\r\n@Preview(\"Empty Phone\")\r\n@Preview(\"Empty Small Tablet\", device = Devices.NEXUS_7_2013)\r\n@Composable\r\nprivate fun PreviewEmptyTablet() {\r\n    FeederTheme {\r\n        SyncSetupScreen(\r\n            onNavigateUp = {},\r\n            onScanSyncCode = {},\r\n            onNavigateDown = {}\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/305", "ground_truth": "            onStartNewSyncChain = {},\r\n            onLeaveSyncChain = {},\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "fun setSyncCode(value: String) {\r\n        val possibleUrlCode = value.syncCodeQueryParam\r\n\r\n        val syncCode =\r\n            if (possibleUrlCode.length == 64) {\r\n                possibleUrlCode\r\n            } else {\r\n                value", "choices": [{"text": "\r\n                possibleUrlCode.substring(0, 64)\r\n            }\r\n\r\n        if (syncCode.length == 64) {\r\n            value.syncCodeQueryParam = syncCode\r\n        } else {\r\n            value.syncCodeQueryParam = value.syncCodeQueryParam + '&' + syncCode\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/307", "ground_truth": "            }\r\n\r\n        state[\"syncCode\"] = syncCode\r\n        _syncCode.update { syncCode }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nfun leaveSyncChain() {\r\n        applicationCoroutineScope.launch {\r\n            repository.leaveSyncChain()", "choices": [{"text": "}\r\n}\r\n\r\n@launch(leaveSyncChain)\r\ndef applicationCoroutineScope(repository) {\r\n        repository.leaveSyncChain()\r\n}\r\n\r\n@launch(leaveSyncChain)\r\ndef repository(repository) {\r\n        repository.leaveSyncChain()\r\n}\r\n\r\n@launch(leaveSyncChain)\r\ndef repository(repository) {\r\n        repository.leaveSyncChain()\r\n}\r\n\r\n@launch(leaveSyncChain)\r\ndef repository(repository) {\r\n        repository.leaveSyncChain()"}], "metadata": {"task_id": "Feeder/311", "ground_truth": "            setSyncCode(\"\")\r\n            setSecretKey(\"\")\r\n            setScreen(SyncScreenToShow.SETUP)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "private fun joinedWithSyncCode(\r\n        syncCode: String,\r\n        secretKey: String,", "choices": [{"text": "Secret: String) {\r\n    return new Promise((resolve, reject) => {\r\n        if (typeof syncCode!=='string') {\r\n            reject(new Error('syncCode must be a string'));\r\n            return;\r\n        }\r\n        if (typeof secretKey!=='string') {\r\n            reject(new Error('secretKey must be a string'));\r\n            return;\r\n        }\r\n\r\n        let url = `https://api.github.com/users/${syncCode}`;\r\n\r\n        fetch(url, {\r"}], "metadata": {"task_id": "Feeder/313", "ground_truth": "    ) {\r\n        setSyncCode(syncCode)\r\n        setSecretKey(secretKey)\r\n        setScreen(SyncScreenToShow.ADD_DEVICE)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\nfun pushComposableStyle(style: @Composable () -> SpanStyle): Int {\r\n        composableStyles.add(\r\n            ComposableStyleWithStartEnd(\r\n                style = style,", "choices": [{"text": "\r\n                start = style.getStart(),\r\n                end = style.getEnd(),\r\n            )\r\n        )\r\n        return style.getStart()\r\n    }\r\n\r\nclass ComposableStyleWithStartEnd:\r\n    def __init__(self, style: SpanStyle, start: Int, end: Int):\r\n        self.style = style\r\n        self.start = start\r\n        self.end = end\r\n\r\nclass ComposableStyles:\r\n    def __init__(self):\r\n        self.composableStyles ="}], "metadata": {"task_id": "Feeder/314", "ground_truth": "                start = builder.length,\r\n            ),\r\n        )\r\n        return composableStyles.lastIndex\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "private fun <T> MutableList<T>.pushMaxTwo(item: T) {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Feeder/319", "ground_truth": "    this.add(0, item)\r\n    if (count() > 2) {\r\n        this.removeLast()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "private fun <T> List<T>.peekSecondLatest(): T? {", "choices": [{"text": "\n{\n    return new List<T>().peekSecondLatest();\n}\n\nprivate fun <T> List<T> List<T>.peekSecondLatest(): List<T> {\n    return new List<T>().peekSecondLatest();\n}\n\nprivate fun <T> List<T> List<T>.peekSecondLatest(): List<T> {\n    return new List<T>().peekSecondLatest();\n}\n\nprivate fun <T> List<T> List<T>.peekSecondLatest(): List<T> {\n    return"}], "metadata": {"task_id": "Feeder/320", "ground_truth": "    if (count() < 2) {\r\n        return null\r\n    }\r\n    return this[1]\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "val strings\nval result List<AnnotatedString>\n override fun emitParagraph(): Boolean {\r\n        // List items emit dots and non-breaking space. Don't newline after that\r\n        if (builder.isEmpty() || builder.endsWithNonBreakingSpace) {\r\n            // Nothing to emit, and nothing to reset\r\n            return false\r\n        }", "choices": [{"text": "\r\n            return false;\r\n        }\r\n\r\n        if (builder.endsWithNonBreakingSpace) {\r\n            return false;\r\n        }\r\n\r\n        if (builder.isEmpty()) {\r\n            return true;\r\n        }\r\n\r\n        if (builder.isEmpty()) {\r\n            return false;\r\n        }\r\n\r\n        if (builder.isEmpty()) {\r\n            return false;\r\n        }\r\n\r\n        if (builder.isEmpty()) {\r\n            return false;\r\n       "}], "metadata": {"task_id": "Feeder/321", "ground_truth": "        strings.add(builder.toAnnotatedString())\r\n\r\n        resetAfterEmit()\r\n        return true\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedStringComposer.kt"}}
{"prompt": "import androidx.compose.runtime.ReadOnlyComposable\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@ReadOnlyComposable", "choices": [{"text": " from 'androidx.compose.runtime.ReadOnlyComposable'\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.Observable\r\nimport androidx.compose.runtime.Observer\r\nimport androidx.compose.runtime.Subscriber\r\nimport androidx.compose.runtime.Subscription\r\nimport androidx.compose.runtime.Unsubscribeable\r\nimport androidx.compose.runtime.UnsubscribeableObserver\r\nimport androidx.compose.runtime.UnsubscribeableSubscriber\r\nimport androidx.compose."}], "metadata": {"task_id": "Feeder/324", "ground_truth": "fun resources(): Resources {\r\n    LocalConfiguration.current\r\n    return LocalContext.current.resources\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\Extensions.kt"}}
{"prompt": "import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun getSpanStyle(name: String?): SpanStyle? {", "choices": [{"text": ".SpanStyle {\r\n    if (name == null) {\r\n        return null\r\n    }\r\n\r\n    switch (name) {\r\n        case \"bold\":\r\n            return SpanStyle.BOLD\r\n        case \"italic\":\r\n            return SpanStyle.ITALIC\r\n        case \"underline\":\r\n            return SpanStyle.UNDERLINE\r\n        case \"strikethrough\":\r\n            return SpanStyle.STRIKETHROUGH\r\n        default:\r\n            return null\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/325", "ground_truth": "    return when (name) {\r\n        \"link\" -> LinkTextStyle().toSpanStyle()\r\n        else -> null\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\Extensions.kt"}}
{"prompt": "protected fun findClosestLink(): String? {\r\n        for (span in spanStack.reversed()) {\r\n            if (span is SpanWithAnnotation && span.tag == \"URL\") {", "choices": [{"text": "\r\n                return span.start.toString();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected fun findClosestLinkWithAnnotation(): String? {\r\n        for (span in spanStack.reversed()) {\r\n            if (span is SpanWithAnnotation && span.tag == \"URL\") {\r\n                return span.start.toString();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/326", "ground_truth": "                return span.annotation\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "import androidx.compose.ui.text.TextStyle\ninline fun <R : Any> HtmlComposer.withTextStyle(\r\n    textStyler: TextStyler,\r\n    crossinline block: HtmlComposer.() -> R,\r\n): R {\r\n    emitParagraph()\r\n    pushTextStyle(textStyler)\r\n    return try {\r\n        block()", "choices": [{"text": "\r\n    } finally {\r\n        popTextStyle()\r\n    }\r\n}\r\ninline fun <R : Any> HtmlComposer.withTextStyle(\r\n    textStyler: TextStyler,\r\n    crossinline block: HtmlComposer.() -> R,\r\n): R {\r\n    return withTextStyle(textStyler, block)\r\n}\r\ninline fun <R : Any> HtmlComposer.withTextStyle(\r\n    textStyler: TextStyler,\r\n    crossinline block: HtmlComposer.() -> R,\r\n): R"}], "metadata": {"task_id": "Feeder/327", "ground_truth": "    } finally {\r\n        emitParagraph()\r\n        popTextStyle()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "inline fun <R : Any> HtmlParser.withParagraph(crossinline block: HtmlParser.() -> R): R {", "choices": [{"text": ");\ninline fun <R : Any> HtmlParser.withBlockquote(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline block: HtmlParser.withParagraph(crossinline"}], "metadata": {"task_id": "Feeder/328", "ground_truth": "    emitParagraph()\r\n    return block(this).also {\r\n        emitParagraph()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "import androidx.compose.ui.text.SpanStyle\ninline fun <R : Any> HtmlParser.withStyle(\r\n    style: SpanStyle?,\r\n    crossinline block: HtmlParser.() -> R,\r\n): R {\r\n    if (style == null) {\r\n        return block()\r\n    }\r\n\r\n    pushSpan(SpanWithStyle(style))\r\n    val index = pushStyle(style)\r\n    return try {\r\n        block()", "choices": [{"text": "(index)\r\n    } finally {\r\n        popSpan(index)\r\n    }\r\n}\r\ninline fun <R : Any> HtmlParser.withText(\r\n    text: str,\r\n    crossinline block: HtmlParser.() -> R,\r\n): R {\r\n    pushSpan(SpanWithText(text))\r\n    val index = pushText(text)\r\n    return try {\r\n        block()\r\n    } finally {\r\n        popSpan(index)\r\n    }\r\n}\r\ninline fun <R : Any"}], "metadata": {"task_id": "Feeder/329", "ground_truth": "    } finally {\r\n        pop(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\ninline fun <R : Any> HtmlComposer.withComposableStyle(\r\n    noinline style: @Composable () -> SpanStyle,\r\n    crossinline block: HtmlComposer.() -> R,\r\n): R {\r\n    pushSpan(SpanWithComposableStyle(style))\r\n    val index = pushComposableStyle(style)\r\n    return try {\r\n        block()", "choices": [{"text": "\r\n    } finally {\r\n        popSpan(index)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/330", "ground_truth": "    } finally {\r\n        popComposableStyle(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "inline fun <R : Any> HtmlParser.withAnnotation(\r\n    tag: String,\r\n    annotation: String,\r\n    crossinline block: HtmlParser.() -> R,\r\n): R {\r\n    pushSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n    val index = pushStringAnnotation(tag = tag, annotation = annotation)\r\n    return try {\r\n        block()", "choices": [{"text": "\r\n    } finally {\r\n        popSpan(index)\r\n    }\r\n}\r\n\r\ninline fun <R : Any> HtmlParser.withAnnotation(\r\n    tag: String,\r\n    annotation: String,\r\n    crossinline block: HtmlParser.() -> R,\r\n): R {\r\n    pushSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n    val index = pushStringAnnotation(tag = tag, annotation = annotation)\r\n    return try {\r\n        block()\r\n    } finally {\r\n        pop"}], "metadata": {"task_id": "Feeder/331", "ground_truth": "    } finally {\r\n        pop(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "import org.jsoup.nodes.Node\nimport org.jsoup.nodes.Element\nimport androidx.compose.ui.text.AnnotatedString\nprivate fun formatBody(\r\n    element: Element,\r\n    baseUrl: String,\r\n): List<AnnotatedString> {\r\n    val composer = AnnotatedStringComposer()\r\n\r\n    composer.appendTextChildren(\r\n        nodes = element.childNodes(),\r\n        baseUrl = baseUrl,\r\n    )", "choices": [{"text": ".appendTextChildren(\r\n        nodes = element.childNodes(),\r\n        baseUrl = baseUrl,\r\n    ).appendTextChildren(\r\n        nodes = element.childNodes(),\r\n        baseUrl = baseUrl,\r\n    ).appendTextChildren(\r\n        nodes = element.childNodes(),\r\n        baseUrl = baseUrl,\r\n    ).appendTextChildren(\r\n        nodes = element.childNodes(),\r\n        baseUrl = baseUrl,\r\n    ).appendTextChildren(\r\n        nodes = element.childNodes(),\r\n        baseUrl = baseUrl,\r\n"}], "metadata": {"task_id": "Feeder/333", "ground_truth": "\r\n    composer.emitParagraph()\r\n\r\n    return composer.result\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToAnnotatedString.kt"}}
{"prompt": "import java.io.InputStream\nimport org.jsoup.Jsoup\nimport com.nononsenseapps.feeder.ui.compose.feedarticle.ArticleItemKeyHolder\nimport androidx.compose.runtime.key\nimport androidx.compose.material3.Text\nimport androidx.compose.foundation.lazy.LazyListScope\nfun LazyListScope.htmlFormattedText(\r\n    keyHolder: ArticleItemKeyHolder,\r\n    inputStream: InputStream,\r\n    baseUrl: String,\r\n    onLinkClick: (String) -> Unit,\r\n) {\r\n    try {\r\n        Jsoup.parse(inputStream, null, baseUrl)\r\n            ?.body()\r\n            ?.let { body ->\r\n                formatBody(\r\n                    element = body,\r\n                    baseUrl = baseUrl,\r\n                    keyHolder = keyHolder,\r\n                    onLinkClick = onLinkClick,\r\n                )", "choices": [{"text": ",\r\n            } };\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\r\n\r\nfunction formatBody(\r\n    element: Element,\r\n    baseUrl: String,\r\n    keyHolder: ArticleItemKeyHolder,\r\n    onLinkClick: (String) -> Unit,\r\n) {\r\n    if (keyHolder == null) {\r\n        return;\r\n    }\r\n\r\n    if (element == null) {\r\n        return;\r\n    }\r\n\r\n"}], "metadata": {"task_id": "Feeder/334", "ground_truth": "            }\r\n    } catch (e: Exception) {\r\n        Log.e(LOG_TAG, \"htmlFormattingFailed\", e)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.Element\nval hasImage Boolean\nval notHasImage Boolean\nval url String\nprivate fun Element.descendants(): Sequence<Element> {\r\n    return sequence {", "choices": [{"text": "\r\n}\r\nprivate fun Element.children(): Sequence<Element> {\r\n    return sequence {\r\n    }\r\n}\r\nprivate fun Element.firstChild(): Element {\r\n    return sequence {\r\n    }\r\n}\r\nprivate fun Element.lastChild(): Element {\r\n    return sequence {\r\n    }\r\n}\r\nprivate fun Element.nextSibling(): Element {\r\n    return sequence {\r\n    }\r\n}\r\nprivate fun Element.previousSibling(): Element {\r\n    return sequence {\r\n    }\r\n}\r\nprivate"}], "metadata": {"task_id": "Feeder/336", "ground_truth": "        children().forEach {\r\n            recursiveSequence(it)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.Element\nprivate suspend fun SequenceScope<Element>.recursiveSequence(element: Element) {\r\n    yield(element)", "choices": [{"text": ";\r\n}\r\npublic class SequenceScope<T> {\r\n    public static <T> SequenceScope<T> create() {\r\n        return new SequenceScope<T>();\r\n    }\r\n    public static <T> SequenceScope<T> create(Iterable<? extends T> iterable) {\r\n        return new SequenceScope<T>(iterable);\r\n    }\r\n    public static <T> SequenceScope<T> create(T... elements) {\r\n        return new SequenceScope<T>(elements);\r\n    }\r\n    public static <"}], "metadata": {"task_id": "Feeder/337", "ground_truth": "\r\n    element.children().forEach {\r\n        recursiveSequence(it)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.Element\nprivate fun Element.notAncestorOf(tagName: String): Boolean {\r\n    var current: Element? = this\r\n\r\n    while (current != null) {\r\n        val parent = current.parent()\r\n\r\n        current =\r\n            when {\r\n                parent == null || parent.tagName() == \"#root\" -> {\r\n                    null\r\n                }\r\n\r\n                parent.tagName() == tagName -> {\r\n                    return false\r\n                }\r\n\r\n                else -> {\r\n                    parent\r\n                }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/338", "ground_truth": "            }\r\n    }\r\n\r\n    return true\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.BoxWithConstraintsScope\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun BoxWithConstraintsScope.rememberMaxImageWidth() =\r\n    with(LocalDensity.current) {\r\n        remember {", "choices": [{"text": " \"max-image-width\" }\r\n    }\r\n\r\n@Composable\r\nfun BoxWithConstraintsScope.rememberMaxImageHeight() =\r\n    with(LocalDensity.current) {\r\n        remember { \"max-image-height\" }\r\n    }\r\n\r\n@Composable\r\nfun BoxWithConstraintsScope.rememberMinImageWidth() =\r\n    with(LocalDensity.current) {\r\n        remember { \"min-image-width\" }\r\n    }\r\n\r\n@Composable\r\nfun BoxWithConstraintsScope.rememberMinImage"}], "metadata": {"task_id": "Feeder/340", "ground_truth": "            derivedStateOf {\r\n                maxWidth.toPx().roundToInt().coerceAtMost(2000)\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.TextNode\nimport org.jsoup.nodes.Node\nimport com.nononsenseapps.feeder.util.asUTF8Sequence\nimport androidx.compose.material3.Text\nfun TextNode.appendCorrectlyNormalizedWhiteSpace(\r\n    builder: HtmlParser,\r\n    stripLeading: Boolean,\r\n) {\r\n    wholeText.asUTF8Sequence()\r\n        .dropWhile {\r\n            stripLeading && isCollapsableWhiteSpace(it)\r\n        }\r\n        .fold(false) { lastWasWhite, char ->\r\n            if (isCollapsableWhiteSpace(char)) {\r\n                if (!lastWasWhite) {\r\n                    builder.append(' ')\r\n                }\r\n                true\r\n            } else {", "choices": [{"text": "\r\n                if (!lastWasWhite) {\r\n                    builder.append(char)\r\n                }\r\n                true\r\n            }\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/342", "ground_truth": "                builder.append(char)\r\n                false\r\n            }\r\n        }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.TextNode\nimport org.jsoup.nodes.Node\nimport org.jsoup.nodes.Element\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.material3.Text\nfun Element.appendCorrectlyNormalizedWhiteSpaceRecursively(\r\n    builder: HtmlParser,\r\n    stripLeading: Boolean,\r\n) {\r\n    for (child in childNodes()) {\r\n        when (child) {\r\n            is TextNode -> child.appendCorrectlyNormalizedWhiteSpace(builder, stripLeading)\r\n            is Element ->\r\n                child.appendCorrectlyNormalizedWhiteSpaceRecursively(\r\n                    builder,", "choices": [{"text": " stripLeading,\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\nfun Element.appendCorrectlyNormalizedWhiteSpaceRecursively(\r\n    builder: HtmlParser,\r\n    stripLeading: Boolean,\r\n) {\r\n    for (child in childNodes()) {\r\n        when (child) {\r\n            is TextNode -> child.appendCorrectlyNormalizedWhiteSpace(builder, stripLeading)\r\n            is Element ->\r\n                child.appendCorrectlyNormalizedWhiteSpaceRecursively(\r\n                    builder, stripLeading,\r\n                )\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/343", "ground_truth": "                    stripLeading,\r\n                )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "fun stripHtml(html: String): String {\r\n    val result = StringBuilder()\r\n\r\n    var skipping = false\r\n\r\n    for (char in html) {\r\n        if (!skipping) {\r\n            if (char == '<') {\r\n                skipping = true\r\n            } else {\r\n                result.append(char)\r\n            }\r\n        } else {\r\n            if (char == '>') {\r\n                skipping = false\r\n            } else {\r\n                // Skipping char\r\n            }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Feeder/344", "ground_truth": "        }\r\n    }\r\n\r\n    return result.toString()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.feed.PlainTooltipBox\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.Box\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun WithTooltipIfNotBlank(\r\n    tooltip: String,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    if (tooltip.isNotBlank()) {\r\n        PlainTooltipBox(tooltip = { Text(tooltip) }) {\r\n            content()", "choices": [{"text": "\n        };\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun WithTooltip(\r\n    tooltip: String,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    if (tooltip.isNotBlank()) {\r\n        PlainTooltipBox(tooltip = { Text(tooltip) }) {\r\n            content()\r\n        };\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable"}], "metadata": {"task_id": "Feeder/345", "ground_truth": "        }\r\n    } else {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import androidx.compose.runtime.Composable\noverride fun appendImage(\r\n        link: String?,\r\n        onLinkClick: (String) -> Unit,\r\n        block: @Composable (() -> Unit) -> Unit,\r\n    ) {\r\n        emitParagraph()\r\n\r\n        val url = link ?: findClosestLink()\r\n        val onClick: (() -> Unit) =\r\n            when {\r\n                url?.isNotBlank() == true -> {\r\n                    {\r\n                        onLinkClick(url)\r\n                    }\r\n                }\r\n                else -> {\r\n                    {}\r\n                }\r\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/346", "ground_truth": "\r\n        item(keyHolder = keyHolder) {\r\n            block(onClick)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\LazyListComposer.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.feedarticle.ArticleItemKeyHolder\nimport androidx.compose.runtime.Composable\nfun item(\r\n        keyHolder: ArticleItemKeyHolder,\r\n        block: @Composable () -> Unit,", "choices": [{"text": "\r\n) {\r\n    if (keyHolder instanceof ArticleItemKeyHolder) {\r\n        return block.call((ArticleItemKeyHolder) keyHolder);\r\n    } else {\r\n        return block.call(keyHolder);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/347", "ground_truth": "    ) {\r\n        lazyListScope.item(key = keyHolder.getAndIncrementKey()) {\r\n            block()\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\LazyListComposer.kt"}}
{"prompt": "import com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun ThemeOptions.isDarkSystemIcons(): Boolean {\r\n    val isDarkTheme =\r\n        when (this) {\r\n            ThemeOptions.DAY,\r\n            ThemeOptions.E_INK,\r\n            -> false\r\n            ThemeOptions.NIGHT -> true", "choices": [{"text": "\r\n        };\r\n    return isDarkTheme;\r\n}\r\n\r\n@Composable\r\nprivate fun ThemeOptions.isLightSystemIcons(): Boolean {\r\n    val isLightTheme =\r\n        when (this) {\r\n            ThemeOptions.DAY,\r\n            ThemeOptions.E_INK,\r\n            -> true\r\n            ThemeOptions.NIGHT -> false\r\n        };\r\n    return isLightTheme;\r\n}\r\n"}], "metadata": {"task_id": "Feeder/349", "ground_truth": "            ThemeOptions.SYSTEM -> isSystemInDarkTheme()\r\n        }\r\n\r\n    return !isDarkTheme\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Theme.kt"}}
{"prompt": "import com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\nimport android.os.Build\n\r\n@Composable\r\nprivate fun ThemeOptions.getNavBarColor(): Color {\r\n    // Api 29 handles transparency\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        Color.Transparent\r\n    } else if (isDarkNavIcons()) {", "choices": [{"text": "\r\n        Color.White\r\n    } else if (isLightNavIcons()) {\r\n        Color.LightGray\r\n    } else if (isDarkNavIcons()) {\r\n        Color.DarkGray\r\n    } else {\r\n        Color.White\r\n    }\r\n}\r\n\r\nprivate static boolean isDarkNavIcons() {\r\n    return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;\r\n}\r\n\r\nprivate static boolean isLightNavIcons() {\r\n    return Build.VERSION."}], "metadata": {"task_id": "Feeder/351", "ground_truth": "        NavBarScrimLight\r\n    } else {\r\n        NavBarScrimDark\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Theme.kt"}}
{"prompt": "import androidx.compose.ui.text.font.FontWeight\nfun titleFontWeight(unread: Boolean) =", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Feeder/353", "ground_truth": "    if (unread) {\r\n        FontWeight.Black\r\n    } else {\r\n        FontWeight.Normal\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "import androidx.compose.ui.text.TextStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun FeedListItemSnippetTextStyle(): TextStyle =\r\n    MaterialTheme.typography.titleSmall.merge(", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/355", "ground_truth": "        TextStyle(\r\n            lineBreak = LineBreak.Paragraph,\r\n            hyphens = Hyphens.Auto,\r\n        ),\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nimport androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi\nimport androidx.compose.material3.Surface\n\r\n@OptIn(ExperimentalMaterial3WindowSizeClassApi::class)\r\n@Composable\r\nfun withAllPreviewProviders(\r\n    currentTheme: ThemeOptions = ThemeOptions.DAY,\r\n    content: @Composable () -> Unit\r\n) {\r\n    FeederTheme(currentTheme = currentTheme) {\r\n        val dm = LocalContext.current.resources.displayMetrics\r\n        val dpSize = with(LocalDensity.current) {\r\n            DpSize(\r\n                dm.widthPixels.toDp(),\r\n                dm.heightPixels.toDp()\r\n            )\r\n        }\r\n        withPreviewWindowSize(WindowSizeClass.calculateFromSize(dpSize)) {\r\n            Surface {", "choices": [{"text": "\r\n                Surface {\r\n                    Surface {\r\n                        Surface {\r\n                            Surface {\r\n                                Surface {\r\n                                    Surface {\r\n                                        Surface {\r\n                                            Surface {\r\n                                                Surface {\r\n                                                    Surface {\r\n                                                        Surface {\r\n                                                            Surface {\r\n                                                                Surface {\r\n                                                                    Surface {\r\n                                                                        Surface {\r\n                                                                            Surface {\r\n                                                                                Surface {\r\n                                                                                    Surface {\r\n                                                                                        Surface {\r\n                                                                                            Surface {\r\n                                                                                                Surface {\r\n                                                                                                    Surface {"}], "metadata": {"task_id": "Feeder/360", "ground_truth": "                content()\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\ComposeProviders.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ApplicationCoroutineScope\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun rememberApplicationCoroutineScope(): ApplicationCoroutineScope {", "choices": [{"text": ".ApplicationCoroutineScope;\r\n\r\n@remember(ApplicationCoroutineScope.class)\r\npublic class rememberApplicationCoroutineScope implements ApplicationCoroutineScope {\r\n\r\n    private ApplicationCoroutineScope applicationCoroutineScope;\r\n\r\n    public rememberApplicationCoroutineScope(ApplicationCoroutineScope applicationCoroutineScope) {\r\n        this.applicationCoroutineScope = applicationCoroutineScope;\r\n    }\r\n\r\n    @Override\r\n    public ApplicationCoroutineScope getApplicationCoroutineScope() {\r\n        return applicationCoroutineScope;\r\n    }\r\n\r"}], "metadata": {"task_id": "Feeder/361", "ground_truth": "    val di = LocalDI.current\r\n    return remember {\r\n        di.direct.instance<ApplicationCoroutineScope>()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\DIUtils.kt"}}
{"prompt": "import android.view.MenuItem\nimport android.view.Menu\nprivate fun updateMenuItems(menu: Menu) {\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Copy, onCopyRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Paste, onPasteRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Cut, onCutRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.SelectAll, onSelectAllRequested)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Feeder/365", "ground_truth": "        onCopyRequested?.let {\r\n            // Depends on copy/paste\r\n            addTextProcessors(menu)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "import androidx.compose.ui.geometry.Rect\nimport android.view.View\nimport android.view.ActionMode\noverride fun onGetContentRect(\r\n        mode: ActionMode?,\r\n        view: View?,\r\n        outRect: android.graphics.Rect?,\r\n    ) {\r\n        val rect = callback.rect\r\n        outRect?.set(\r\n            rect.left.toInt(),", "choices": [{"text": " rect.top.toInt(),\r\n            rect.width.toInt(),\r\n            rect.height.toInt(),\r\n        )\r\n    }\r\n\r\noverride fun onGetContentSize(\r\n        mode: ActionMode?,\r\n        view: View?,\r\n        outSize: Rect?,\r\n    ) {\r\n    val rect = callback.rect\r\n    outSize?.set(\r\n        rect.left.toInt(),\r\n        rect.top.toInt(),\r\n        rect.width.toInt(),\r\n       "}], "metadata": {"task_id": "Feeder/368", "ground_truth": "            rect.top.toInt(),\r\n            rect.right.toInt(),\r\n            rect.bottom.toInt(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "import androidx.compose.ui.platform.debugInspectorInfo\nimport androidx.compose.ui.input.key.onKeyEvent\nimport androidx.compose.ui.input.key.key\nimport androidx.compose.ui.input.key.Key\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.ExperimentalComposeUiApi\n\r\n@OptIn(ExperimentalComposeUiApi::class)\r\nfun Modifier.onKeyEventLikeEscape(action: () -> Unit) =\r\n    composed(\r\n        inspectorInfo =\r\n            debugInspectorInfo {\r\n                name = \"onEscapeLikeKeyPress\"\r\n                properties[\"action\"] = action\r\n            },\r\n    ) {\r\n        onKeyEvent {\r\n            when (it.key) {\r\n                Key.Escape, Key.Back, Key.NavigateOut -> {\r\n                    action()\r\n                    true\r\n                }", "choices": [{"text": " }\r\n            }\r\n        }\r\n    }\r\n\r\n@OptIn(ExperimentalComposeUiApi::class)\r\nfun Modifier.onKeyEventLikeBack(action: () -> Unit) =\r\n    composed(\r\n        inspectorInfo =\r\n            debugInspectorInfo {\r\n                name = \"onBackLikeKeyPress\"\r\n                properties[\"action\"] = action\r\n            },\r\n    ) {\r\n        onKeyEvent {\r\n            when (it.key) {\r\n                Key.Back, Key.NavigateOut -> {\r\n"}], "metadata": {"task_id": "Feeder/369", "ground_truth": "\r\n                else -> false\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\Focusable.kt"}}
{"prompt": "import com.google.accompanist.adaptive.calculateDisplayFeatures\nimport androidx.window.layout.FoldingFeature\nimport androidx.compose.ui.graphics.toComposeRect\nimport androidx.compose.runtime.Composable\nimport android.app.Activity\n\r\n@Composable\r\nfun Activity.withFoldableHinge(content: @Composable () -> Unit) {\r\n    val displayFeatures = calculateDisplayFeatures(this)\r\n    val fold =\r\n        displayFeatures.find {\r\n            it is FoldingFeature\r\n        } as FoldingFeature?\r\n\r\n    val foldableHinge =\r\n        fold?.let {\r\n            FoldableHinge(it.bounds.toComposeRect())\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/371", "ground_truth": "\r\n    CompositionLocalProvider(LocalFoldableHinge provides foldableHinge) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\Foldables.kt"}}
{"prompt": "import kotlinx.coroutines.flow.distinctUntilChanged\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n\r\n@Composable\r\nfun LazyListState.rememberIsItemVisible(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.visibleItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.visibleItemsInfo.any { it.key == key }\r\n        }\r\n            .distinctUntilChanged()\r\n            .collect {", "choices": [{"text": " {\r\n                return layoutInfo.visibleItemsInfo.any { it.key == key }\r\n            }\r\n    }\r\n    return isVisible\r\n}\r\n\r\n@Composable\r\nfun LazyListState.rememberIsItemCollapsed(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.collapsedItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.col"}], "metadata": {"task_id": "Feeder/372", "ground_truth": "                isVisible.value = it\r\n            }\r\n    }\r\n    return isVisible\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\LazyList.kt"}}
{"prompt": "import kotlinx.coroutines.flow.distinctUntilChanged\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState\nimport androidx.compose.foundation.ExperimentalFoundationApi\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun LazyStaggeredGridState.rememberIsItemVisible(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.visibleItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.visibleItemsInfo.any { it.key == key }\r\n        }\r\n            .distinctUntilChanged()\r\n            .collect {", "choices": [{"text": " {\r\n                return layoutInfo.visibleItemsInfo.any { it.key == key }\r\n            }\r\n    }\r\n    return isVisible\r\n}\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun LazyStaggeredGridState.rememberIsItemCollapsed(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.collapsedItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this,"}], "metadata": {"task_id": "Feeder/373", "ground_truth": "                isVisible.value = it\r\n            }\r\n    }\r\n    return isVisible\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\LazyList.kt"}}
{"prompt": "import kotlin.reflect.KProperty\nimport androidx.compose.runtime.getValue\noperator fun getValue(\r\n        thisRef: Any?,\r\n        property: KProperty<*>,\r\n    ): T {\r\n        if (!initialized) {\r\n            value = savedStateHandle[property.name] ?: value", "choices": [{"text": "\r\n            initialized = True\r\n        } else {\r\n            value = savedStateHandle[property.name]\r\n        }\r\n        return value\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/375", "ground_truth": "            initialized = true\r\n            onChange?.invoke(value)\r\n        }\r\n        return value\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\MutableSavedState.kt"}}
{"prompt": "import kotlin.reflect.KProperty\nimport androidx.compose.runtime.setValue\nvar initialized Boolean\nvar value T\noperator fun setValue(\r\n        thisRef: Any?,\r\n        property: KProperty<*>,\r\n        value: T,", "choices": [{"text": "\r\n        thisRef: Any?,\r\n        property: KProperty<*>,\r\n        value: T,\r\n) {\r\n    if (!initialized) {\r\n        initialized = true\r\n        value = value\r\n    } else {\r\n        value = value\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/376", "ground_truth": "    ) {\r\n        savedStateHandle[property.name] = value\r\n        this.value = value\r\n        onChange?.invoke(value)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\MutableSavedState.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.LocalTypographySettings\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.ProvideTextStyle\n\r\n@Composable\r\nfun ProvideScaledText(\r\n    style: TextStyle,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    val typographySettings = LocalTypographySettings.current\r\n\r\n    ProvideTextStyle(\r\n        style.merge(\r\n            TextStyle(\r\n                fontSize = style.fontSize * typographySettings.fontScale,\r\n                lineHeight = style.lineHeight * typographySettings.fontScale,\r\n            ),", "choices": [{"text": "\n        ),\r\n        content,\r\n    )\r\n}\r\n\r\n@Composable\r\nfun ProvideScaledText(\r\n    style: TextStyle,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    val typographySettings = LocalTypographySettings.current\r\n\r\n    ProvideTextStyle(\r\n        style.merge(\r\n            TextStyle(\r\n                fontSize = style.fontSize * typographySettings.fontScale,\r\n                lineHeight = style.lineHeight * typographySettings.fontScale,\r\n"}], "metadata": {"task_id": "Feeder/378", "ground_truth": "        ),\r\n    ) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\ProvideScaledText.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\nfun WindowInsets.addMargin(\r\n    vertical: Dp = 0.dp,\r\n    horizontal: Dp = 0.dp,\r\n) = addMargin(", "choices": [{"text": "\n    vertical: Dp = 0.dp,\r\n    horizontal: Dp = 0.dp,\r\n)\r\nfun WindowInsets.addPadding(\r\n    vertical: Dp = 0.dp,\r\n    horizontal: Dp = 0.dp,\r\n) = addPadding(\r\n    vertical: Dp = 0.dp,\r\n    horizontal: Dp = 0.dp,\r\n)\r\nfun WindowInsets.addPadding(\r\n    vertical: Dp = 0.dp,\r\n    horizontal: Dp = 0.dp,"}], "metadata": {"task_id": "Feeder/379", "ground_truth": "    left = horizontal,\r\n    right = horizontal,\r\n    top = vertical,\r\n    bottom = vertical,\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\n\r\n@Composable\r\nfun WindowInsets.addMarginLayout(\r\n    start: Dp = 0.dp,\r\n    end: Dp = 0.dp,\r\n    top: Dp = 0.dp,\r\n    bottom: Dp = 0.dp,\r\n): WindowInsets {\r\n    val layoutDirection = LocalLayoutDirection.current\r\n    return addMargin(\r\n        left =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> start\r\n                LayoutDirection.Rtl -> end\r\n            },\r\n        right =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> end\r\n                LayoutDirection.Rtl -> start", "choices": [{"text": "\r\n            },\r\n        top =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> top\r\n                LayoutDirection.Rtl -> bottom\r\n            },\r\n        bottom =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> bottom\r\n                LayoutDirection.Rtl -> top\r\n            },\r\n    )\r\n}\r\n"}], "metadata": {"task_id": "Feeder/380", "ground_truth": "            },\r\n        top = top,\r\n        bottom = bottom,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\nfun WindowInsets.addMargin(\r\n    left: Dp = 0.dp,\r\n    right: Dp = 0.dp,\r\n    top: Dp = 0.dp,\r\n    bottom: Dp = 0.dp,\r\n) = add(\r\n    WindowInsets(\r\n        left = left,", "choices": [{"text": "\r\n        right = right,\r\n        top = top,\r\n        bottom = bottom,\r\n    )\r\n)\r\nfun WindowInsets.addPadding(\r\n    left: Dp = 0.dp,\r\n    right: Dp = 0.dp,\r\n    top: Dp = 0.dp,\r\n    bottom: Dp = 0.dp,\r\n) = add(\r\n    WindowInsets(\r\n        left = left,\r\n        right = right,\r\n        top = top,\r\n        bottom = bottom,\r"}], "metadata": {"task_id": "Feeder/381", "ground_truth": "        right = right,\r\n        top = top,\r\n        bottom = bottom,\r\n    ),\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "import androidx.compose.runtime.Composable\nimport androidx.compose.material3.windowsizeclass.calculateWindowSizeClass\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nimport androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi\nimport android.app.Activity\n\r\n@OptIn(ExperimentalMaterial3WindowSizeClassApi::class)\r\n@Composable\r\nfun Activity.withWindowSize(content: @Composable () -> Unit) {\r\n    val windowSizeclass = calculateWindowSizeClass(activity = this)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/382", "ground_truth": "\r\n    CompositionLocalProvider(LocalWindowSize provides windowSizeclass) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowSize.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.nononsenseapps.feeder.model.workmanager.requestFeedSync\nimport androidx.lifecycle.lifecycleScope\nprivate fun maybeRequestSync() =\r\n        lifecycleScope.launch {\r\n            if (mainActivityViewModel.shouldSyncOnResume) {\r\n                if (mainActivityViewModel.isOkToSyncAutomatically()) {\r\n                    requestFeedSync(\r\n                        di = di,", "choices": [{"text": " mainActivityViewModel = mainActivityViewModel\r\n                    );\r\n                } else {\r\n                    requestFeedSync(\r\n                        di = di,\r\n                        mainActivityViewModel = mainActivityViewModel\r\n                    );\r\n                }\r\n            } else {\r\n                requestFeedSync(\r\n                    di = di,\r\n                    mainActivityViewModel = mainActivityViewModel\r\n                );\r\n            }\r\n            return null;\r\n        };\r\n"}], "metadata": {"task_id": "Feeder/392", "ground_truth": "                        forceNetwork = false,\r\n                    )\r\n                }\r\n            }\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "import androidx.core.view.WindowCompat\nimport androidx.activity.compose.setContent\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        installExceptionHandler()\r\n\r\n        mainActivityViewModel.ensurePeriodicSyncConfigured()\r\n\r\n        WindowCompat.setDecorFitsSystemWindows(window, false)\r\n\r\n        setContent {", "choices": [{"text": "\r\n            super.onCreate(savedInstanceState)\r\n\r\n            setContentView(R.layout.activity_main)\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        mainActivityViewModel.ensurePeriodicSyncConfigured()\r\n\r\n        WindowCompat.setDecorFitsSystemWindows(window, true)\r\n\r\n        setContent {\r\n            super.onResume()\r\n\r\n            setContentView(R.layout.activity_main)\r\n        }\r\n    }\r"}], "metadata": {"task_id": "Feeder/393", "ground_truth": "            withAllProviders {\r\n                AppContent()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "import org.xml.sax.SAXException\n @Throws(SAXException::class)\r\n    override fun endDocument() {\r\n        // See test mentioning XKCD\r\n        if (builder?.isEmpty() == true) {", "choices": [{"text": "\r\n            return;\r\n        }\r\n        builder.endDocument();\r\n    }\r\n @Throws(SAXException::class)\r\n    override fun startDocument() {\r\n        // See test mentioning XKCD\r\n        if (builder?.isEmpty() == true) {\r\n            return;\r\n        }\r\n        builder.startDocument();\r\n    }\r\n @Throws(SAXException::class)\r\n    override fun startElement() {\r\n        // See test mentioning XKCD\r\n        if (builder?.isEmpty"}], "metadata": {"task_id": "Feeder/399", "ground_truth": "            lastImageAlt?.let {\r\n                builder?.append(\"[$lastImageAlt]\")\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "private fun startOl(text: StringBuilder?) {\r\n        // Start lists with linebreak\r\n        val len = text!!.length\r\n        if (len > 0 && text[len - 1] != '\\n') {\r\n            text.append(\"\\n\")", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/401", "ground_truth": "        }\r\n\r\n        // Remember list type\r\n        listings.push(Listing(true))\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "private fun startLi(builder: StringBuilder?) {\r\n        builder!!.append(repeated(\"  \", listings.size - 1))\r\n        if (isOrderedList) {\r\n            val listing = listings.peek()\r\n            builder.append(\"\").append(listing.number).append(\". \")", "choices": [{"text": "()\r\n        } else {\r\n            val listing = listings.peek()\r\n            builder.append(\"\").append(listing.number)\r\n        }\r\n        return builder\r\n}\r\n\r\nprivate fun endLi(builder: StringBuilder?) {\r\n        builder!!.append(repeated(\"  \", listings.size - 1))\r\n        if (isOrderedList) {\r\n            val listing = listings.peek()\r\n            builder.append(\"\").append(listing.number)\r\n        } else {\r\n            val listing = list"}], "metadata": {"task_id": "Feeder/402", "ground_truth": "            listing.number = listing.number + 1\r\n        } else {\r\n            builder.append(\"* \")\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "private fun startUl(text: StringBuilder?) {\r\n        // Start lists with linebreak\r\n        val len = text!!.length\r\n        if (len > 0 && text[len - 1] != '\\n') {\r\n            text.append(\"\\n\")", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/404", "ground_truth": "        }\r\n\r\n        // Remember list type\r\n        listings.push(Listing(false))\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "private fun ensureSpace(text: StringBuilder?) {\r\n        val len = text!!.length\r\n        if (len != 0) {\r\n            val c = text[len - 1]\r\n            // Non-breaking space (160) is not caught by trim or whitespace identification\r\n            if (Character.isWhitespace(c) || c.code == 160) {", "choices": [{"text": "\r\n                text = text.substring(0, len - 1)\r\n            }\r\n        }\r\n        return text\r\n    }\r\n\r\n    private fun trim(text: StringBuilder?) {\r\n        val len = text!!.length\r\n        if (len!= 0) {\r\n            val c = text[len - 1]\r\n            // Non-breaking space (160) is not caught by trim or whitespace identification\r\n            if (Character.isWhitespace(c) || c.code == 160) {\r\n                text = text.substring(0"}], "metadata": {"task_id": "Feeder/405", "ground_truth": "                return\r\n            }\r\n            text.append(\" \")\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "fun repeated(\r\n    string: String,\r\n    count: Int,\r\n): String {\r\n    val sb = StringBuilder()\r\n\r\n    for (i in 0 until count) {", "choices": [{"text": ") {\r\n        sb.append(string[i])\r\n    }\r\n\r\n    return sb.toString()\r\n}\r\n"}], "metadata": {"task_id": "Feeder/406", "ground_truth": "        sb.append(string)\r\n    }\r\n\r\n    return sb.toString()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "fun getVideo(src: String?): Video? {\r\n    return src?.let {\r\n        YoutubeIdPattern.find(src)?.let { match ->\r\n            val videoId = match.groupValues[1]\r\n            Video(\r\n                src = src,\r\n                imageUrl = \"http://img.youtube.com/vi/$videoId/hqdefault.jpg\",", "choices": [{"text": "\r\n            )\r\n        }}\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    getVideo\r\n}\r\n"}], "metadata": {"task_id": "Feeder/407", "ground_truth": "                link = \"https://www.youtube.com/watch?v=$videoId\",\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\VideoTagHunter.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport android.os.Build\nimport android.content.Intent\nprivate fun Intent.openAdjacentIfSuitable(openAdjacentIfSuitable: Boolean): Intent {\r\n        return if (openAdjacentIfSuitable &&\r\n            Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&\r\n            configuration.smallestScreenWidthDp >= 600 &&\r\n            repository.isOpenAdjacent.value\r\n        ) {\r\n            addFlags(\r\n                Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT or Intent.FLAG_ACTIVITY_NEW_TASK,", "choices": [{"text": "\r\n                Intent.FLAG_ACTIVITY_NEW_TASK\r\n            );\r\n        }\r\n        return super.openAdjacentIfSuitable(openAdjacentIfSuitable);\r\n    }\r\n    private fun Intent.openAdjacentIfSuitable(openAdjacentIfSuitable: Boolean): Intent {\r\n        return if (openAdjacentIfSuitable &&\r\n            Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&\r\n            configuration.smallestScreenWidthDp >= 600 &&\r\n            repository.isOpenAdjacent.value\r"}], "metadata": {"task_id": "Feeder/408", "ground_truth": "            )\r\n        } else {\r\n            this\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\ActivityLauncher.kt"}}
{"prompt": "private fun bugBody(): String =\r\n    \"\"\"\r\n    ${deviceInfoBlock()}", "choices": [{"text": ": String =\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r\n    \"\"\"\r"}], "metadata": {"task_id": "Feeder/413", "ground_truth": "    \r\n    Hello.\r\n    \r\n    I'd like to report an issue:\r\n    \"\"\".trimIndent()", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\BugReport.kt"}}
{"prompt": "private fun crashBody(throwable: Throwable): String =\r\n    \"\"\"\r\n    ${deviceInfoBlock()}", "choices": [{"text": "\r\n    ${throwable.message}\r\n    ${throwable.stack}\r\n    \"\"\";\r\n\r\nexport default function crash(throwable: Throwable) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      reject(new Error(crashBody(throwable)));\r\n    }, 500);\r\n    resolve();\r\n  });\r\n}\r\n"}], "metadata": {"task_id": "Feeder/415", "ground_truth": "    \r\n    Unhandled exception:\r\n    \r\n    ${throwable.stackTraceToString()}\r\n    \"\"\".trimIndent()", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\BugReport.kt"}}
{"prompt": "import android.content.ContentValues\nfun ContentValues.setStringMaybe(pair: Pair<String, String?>) {\r\n    if (pair.second == null) {", "choices": [{"text": "\r\n        ContentValues.setString(pair.first, null);\r\n    } else if (pair.second instanceof String) {\r\n        ContentValues.setString(pair.first, (String) pair.second);\r\n    } else if (pair.second instanceof String[]) {\r\n        ContentValues.setString(pair.first, (String[]) pair.second);\r\n    } else if (pair.second instanceof CharSequence) {\r\n        ContentValues.setString(pair.first, (CharSequence) pair.second);\r\n    } else {\r\n"}], "metadata": {"task_id": "Feeder/419", "ground_truth": "        putNull(pair.first)\r\n    } else {\r\n        put(pair.first, pair.second)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\ContentValuesExtensions.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun <C> fold(\r\n        ifLeft: (left: A) -> C,\r\n        ifRight: (right: B) -> C,\r\n    ): C {\r\n        contract {\r\n            callsInPlace(ifLeft, InvocationKind.AT_MOST_ONCE)\r\n            callsInPlace(ifRight, InvocationKind.AT_MOST_ONCE)\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/428", "ground_truth": "        return when (this) {\r\n            is Right -> ifRight(value)\r\n            is Left -> ifLeft(value)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "import kotlin.contracts.contract\nfun leftOrNull(): A? {\r\n        contract {\r\n            returnsNotNull() implies (this@Either is Left<A>)", "choices": [{"text": "\r\n            returnsNotNull() implies (this@Either is LeftOrNull<A>)\r\n        }\r\n    }\r\nfun rightOrNull(): A? {\r\n        contract {\r\n            returnsNotNull() implies (this@Either is RightOrNull<A>)\r\n            returnsNotNull() implies (this@Either is RightOrNull<A>)\r\n        }\r\n    }\r\n\r\n@contract\r\nclass Either:\r\n    def __init__(self, left, right):\r\n        self.left = left\r\n        self.right = right\r\n\r\n    def"}], "metadata": {"task_id": "Feeder/434", "ground_truth": "            returns(null) implies (this@Either is Right<B>)\r\n        }\r\n\r\n        return fold(::identity) { null }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun <A, B, C> Either<A, B>.flatMap(f: (right: B) -> Either<A, C>): Either<A, C> {\r\n    contract { callsInPlace(f, InvocationKind.AT_MOST_ONCE) }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/437", "ground_truth": "    return when (this) {\r\n        is Either.Right -> f(this.value)\r\n        is Either.Left -> this\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "import java.net.URI\nfun sloppyLinktoURIOrNull(text: String): URI? =", "choices": [{"text": "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for\n// license information.\n//\n// Code generated by Microsoft (R) AutoRest Code Generator.\n// Changes may cause incorrect behavior and will be lost if the code is\n// regenerated.\n\nnamespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models\n{\n    using Microsoft.Azure;\n    using Microsoft.Azure.Management;\n    using Microsoft.Azure.Management.RecoveryServices;\n    using"}], "metadata": {"task_id": "Feeder/442", "ground_truth": "    try {\r\n        URI(text)\r\n    } catch (_: URISyntaxException) {\r\n        null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "import java.net.URL\nfun sloppyLinkToStrictURLOrNull(url: String): URL? =", "choices": [{"text": "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for\n// license information.\n//\n// Code generated by Microsoft (R) AutoRest Code Generator.\n// Changes may cause incorrect behavior and will be lost if the code is\n// regenerated.\n\nnamespace Microsoft.Azure.Management.DataFactory.Models\n{\n    using Microsoft.Azure;\n    using Microsoft.Azure.Management;\n    using Microsoft.Azure.Management.DataFactory;\n    using Newtonsoft"}], "metadata": {"task_id": "Feeder/443", "ground_truth": "    try {\r\n        sloppyLinkToStrictURL(url)\r\n    } catch (_: MalformedURLException) {\r\n        null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "import java.net.URL\nfun sloppyLinkToStrictURLNoThrows(url: String): URL =", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Feeder/444", "ground_truth": "    try {\r\n        sloppyLinkToStrictURL(url)\r\n    } catch (_: MalformedURLException) {\r\n        URL(\"http://\")\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "import java.net.URL\nfun relativeLinkIntoAbsoluteOrNull(\r\n    base: URL,\r\n    link: String?,\r\n): String? =\r\n    try {\r\n        // If no exception, it's valid\r\n        if (link != null) {\r\n            relativeLinkIntoAbsoluteOrThrow(base, link).toString()\r\n        } else {", "choices": [{"text": "\r\n            return base.toExternalForm()\r\n        }\r\n    } catch (Exception e) {\r\n        return base.toExternalForm()\r\n    }\r\n}\r\nfun relativeLinkIntoAbsoluteOrThrow(\r\n    base: URL,\r\n    link: String?,\r\n): String? =\r\n    try {\r\n        // If no exception, it's valid\r\n        if (link!= null) {\r\n            return relativeLinkIntoAbsoluteOrThrow(base, link).toString()\r\n        } else {\r\n            return base.toExternalForm"}], "metadata": {"task_id": "Feeder/446", "ground_truth": "            null\r\n        }\r\n    } catch (_: MalformedURLException) {\r\n        link\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "fun logDebug(\r\n    tag: String,\r\n    msg: String,\r\n    exception: Throwable? = null,", "choices": [{"text": ",\r\n) {\r\n    if (typeof console!== 'undefined') {\r\n        console.log(tag, msg, exception);\r\n    }\r\n}\r\n\r\nfunction logInfo(\r\n    tag: String,\r\n    msg: String,\r\n    exception: Throwable? = null,\r\n) {\r\n    if (typeof console!== 'undefined') {\r\n        console.log(tag, msg, exception);\r\n    }\r\n}\r\n\r\nfunction logWarn(\r\n    tag: String,\r\n    msg: String,\r"}], "metadata": {"task_id": "Feeder/448", "ground_truth": ") {\r\n    if (BuildConfig.DEBUG) {\r\n        Log.d(tag, msg, exception)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Logging.kt"}}
{"prompt": "import android.database.sqlite.SQLiteDatabase\nfun SQLiteDatabase.inTransaction(init: (SQLiteDatabase) -> Unit) {\r\n    beginTransaction()\r\n    try {\r\n        init(this)", "choices": [{"text": "(this)\r\n    } catch (Exception e) {\r\n        e.printStackTrace()\r\n    } finally {\r\n        commit()\r\n    }\r\n    return this\r\n}\r\nfun SQLiteDatabase.inTransaction(init: (SQLiteDatabase) -> Unit) {\r\n    beginTransaction()\r\n    try {\r\n        init(this)\r\n    } catch (Exception e) {\r\n        e.printStackTrace()\r\n    } finally {\r\n        commit()\r\n    }\r\n    return this\r\n}\r\nfun SQLiteDatabase."}], "metadata": {"task_id": "Feeder/449", "ground_truth": "        setTransactionSuccessful()\r\n    } finally {\r\n        endTransaction()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\SQLiteDatabaseExtensions.kt"}}
{"prompt": "import java.util.concurrent.TimeUnit\nimport java.io.File\nimport okhttp3.OkHttpClient\nimport okhttp3.Cache\nfun cachingHttpClient(\r\n    cacheDirectory: File? = null,\r\n    cacheSize: Long = 10L * 1024L * 1024L,\r\n    trustAllCerts: Boolean = true,\r\n    connectTimeoutSecs: Long = 30L,\r\n    readTimeoutSecs: Long = 30L,\r\n    block: (OkHttpClient.Builder.() -> Unit)? = null,\r\n): OkHttpClient {\r\n    val builder: OkHttpClient.Builder = OkHttpClient.Builder()\r\n\r\n    if (cacheDirectory != null) {\r\n        builder.cache(Cache(cacheDirectory, cacheSize))\r\n    }\r\n\r\n    builder\r\n        .connectTimeout(connectTimeoutSecs, TimeUnit.SECONDS)\r\n        .readTimeout(readTimeoutSecs, TimeUnit.SECONDS)\r\n        .followRedirects(true)\r\n\r\n    if (trustAllCerts) {\r\n        builder.trustAllCerts()\r\n    }\r\n\r\n    block?.let {", "choices": [{"text": " return builder.build(); }\r\n\r\n    return builder.build();\r\n}\r\n"}], "metadata": {"task_id": "Feeder/452", "ground_truth": "        builder.block()\r\n    }\r\n\r\n    return builder.build()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\jsonfeed\\JsonFeedParser.kt"}}
{"prompt": "var prefs SharedPreferences\nvar editor SharedPreferences.Editor\n  @JvmStatic", "choices": [{"text": ".prototype\n\neditor.on('change', function() {\n  prefs.set(this.key, this.value)\n})\n\neditor.on('destroy', function() {\n  prefs.remove(this.key)\n})\n\neditor.on('change', function() {\n  prefs.set(this.key, this.value)\n})\n\neditor.on('destroy', function() {\n  prefs.remove(this.key)\n})\n\neditor.on('change', function() {\n  prefs.set(this.key, this.value)\n"}], "metadata": {"task_id": "Iconify/0", "ground_truth": "    fun clearPrefs(vararg keys: String?) {\n        for (key in keys) {\n            editor.remove(key).apply()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\config\\Prefs.kt"}}
{"prompt": "var prefs SharedPreferences\nvar editor SharedPreferences.Editor\n  @JvmStatic", "choices": [{"text": ".prototype\n\neditor.on('change', function() {\n  prefs.set(this.key, this.value)\n})\n\neditor.on('destroy', function() {\n  prefs.remove(this.key)\n})\n\neditor.on('change', function() {\n  prefs.set(this.key, this.value)\n})\n\neditor.on('destroy', function() {\n  prefs.remove(this.key)\n})\n\neditor.on('change', function() {\n  prefs.set(this.key, this.value)\n"}], "metadata": {"task_id": "Iconify/1", "ground_truth": "    fun clearPrefs(vararg keys: String?) {\n        for (key in keys) {\n            editor.remove(key).apply()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\config\\RPrefs.kt"}}
{"prompt": "var instance Iconify?\nvar contextReference WeakReference<Context>?\nval appContext Context\n private fun getInstance(): Iconify {", "choices": [{"text": "\n var appContext WeakReference<AppContext>?\n val appContext AppContext\n private fun getAppContext(): WeakReference<AppContext> {\n  return contextReference.get()\n }\n var appContext WeakReference<AppContext>?\n val appContext AppContext\n private fun getAppContext(): WeakReference<AppContext> {\n  return contextReference.get()\n }\n var appContext WeakReference<AppContext>?\n val appContext AppContext\n private fun getAppContext(): WeakReference<AppContext> {\n  return contextReference.get()\n }\n var appContext WeakReference<App"}], "metadata": {"task_id": "Iconify/4", "ground_truth": "            if (instance == null) {\n                instance = Iconify()\n            }\n            return instance!!\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\Iconify.kt"}}
{"prompt": "override fun onStartListening() {\n        super.onStartListening()", "choices": [{"text": "()\n        this.setState({\n            loading: true\n        })\n    }\n\n    onStopListening() {\n        super.onStopListening()\n        this.setState({\n            loading: false\n        })\n    }\n\n    render() {\n        return (\n            <View style={styles.container}>\n                <Text style={styles.welcome}>\n                    Welcome to React Native!\n                </Text>\n                <Text style={styles.instructions}>\n                    To get started, edit index.android.js\n                </Text"}], "metadata": {"task_id": "Iconify/10", "ground_truth": "        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE\n        updateTileIcon(tile)\n        tile.updateTile()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": "import android.service.quicksettings.Tile\noverride fun onStopListening() {\n        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE", "choices": [{"text": "\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile.STATE_INACTIVE\n        tile.state = Tile."}], "metadata": {"task_id": "Iconify/11", "ground_truth": "        updateTileIcon(tile)\n        tile.updateTile()\n\n        super.onStopListening()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.SystemUtil\nimport com.drdisagree.iconify.R\nimport android.service.quicksettings.Tile\noverride fun onClick() {\n        super.onClick()\n\n        SystemUtil.restartSystemUI()\n        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE\n        tile.label = resources.getString(R.string.restart_sysui_title)\n        tile.subtitle = \"\"", "choices": [{"text": "\n        tile.title = resources.getString(R.string.restart_sysui_title)\n        tile.subtitle = resources.getString(R.string.restart_sysui_subtitle)\n    }\n}\n"}], "metadata": {"task_id": "Iconify/12", "ground_truth": "\n        updateTileIcon(tile)\n\n        tile.updateTile()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (variant == \"BBN\") {\n                R.layout.view_list_option_brightnessbar\n            } else {\n                R.layout.view_list_option_brightnessbar_pixel\n            },", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/21", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\BrightnessBarAdapter.kt"}}
{"prompt": "import android.view.View\noverride fun onViewAttachedToWindow(holder: ViewHolder) {\n        super.onViewAttachedToWindow(holder)\n\n        itemSelected(\n            holder.container,", "choices": [{"text": "\n            holder.item,\n            holder.position\n        );\n    }\n\n    function itemSelected(\n        container: View,\n        item: int,\n        position: int\n    ) {\n        if (container.onItemSelected) {\n            container.onItemSelected(item, position);\n        }\n    }\n\n    class ViewHolder extends android.view.ViewGroup.AdapterView.OnItemSelectedListener {\n        constructor(container: View) {\n            super();\n\n            this.container = container;\n        }\n\n        onItemSelected("}], "metadata": {"task_id": "Iconify/22", "ground_truth": "            getBoolean(brightnessBarKeys[holder.getBindingAdapterPosition()])\n        )\n\n        refreshButton(holder)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\BrightnessBarAdapter.kt"}}
{"prompt": "import com.drdisagree.iconify.common.Preferences.LSCLOCK_SWITCH\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (prefSwitch == LSCLOCK_SWITCH) {\n                R.layout.view_clock_preview_lockscreen\n            } else {\n                R.layout.view_clock_preview_header\n            },", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/24", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\ClockPreviewAdapter.kt"}}
{"prompt": "import com.drdisagree.iconify.databinding.ViewListIconItemBinding\nimport com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        return IconsViewHolder(\n            ViewListIconItemBinding.inflate(\n                LayoutInflater.from(parent.context),", "choices": [{"text": "\n                R.layout.item_list_icon,\n                parent,\n                false\n            )\n        );\n    }\n\n    override fun onBindViewHolder(\n        holder: IconsViewHolder,\n        position: Int\n    ) {\n        holder.bind(position);\n    }\n\n    override fun onBindViewHolder(\n        holder: IconsViewHolder,\n        position: Int\n    ) {\n        holder.bind(position);\n    }\n\n    override fun onBindViewHolder(\n        holder: IconsViewHolder,\n        position"}], "metadata": {"task_id": "Iconify/32", "ground_truth": "                parent,\n                false\n            )\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\IconsAdapter.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (variant == \"QSSN\") R.layout.view_list_option_qsshape else R.layout.view_list_option_qsshape_pixel,", "choices": [{"text": "\n            parent, false\n        );\n        return new ViewHolder(view);\n    }\n\n    class ViewHolder extends RecyclerView.ViewHolder {\n        View view;\n\n        ViewHolder(View view) {\n            super(view);\n            this.view = view;\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/42", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\QsShapeAdapter.kt"}}
{"prompt": "import com.drdisagree.iconify.config.Prefs\nimport android.widget.Switch\nimport android.view.View\noverride fun onViewAttachedToWindow(holder: ViewHolder) {\n        super.onViewAttachedToWindow(holder)\n\n        holder.aSwitch.setChecked(\n            Prefs.getInt(", "choices": [{"text": "getActivity(), Prefs.KEY_ICONIFY_SWITCH) == holder.aSwitch.getId()\n        )\n    }\n\n    @Override\n    public void onViewDetachedFromWindow(ViewHolder holder: ViewHolder) {\n        super.onViewDetachedFromWindow(holder)\n\n        holder.aSwitch.setChecked(\n            Prefs.getInt(getActivity(), Prefs.KEY_ICONIFY_SWITCH) == holder.aSwitch.getId()\n        )\n    }\n\n    @Override\n    public void onWindowFocusChanged(boolean has"}], "metadata": {"task_id": "Iconify/47", "ground_truth": "                SELECTED_SWITCH,\n                -1\n            ) == holder.getBindingAdapterPosition()\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\SwitchAdapter.kt"}}
{"prompt": "import android.widget.Switch\nimport android.widget.CompoundButton\nimport android.view.View\nprivate fun enableOnCheckedChangeListener(holder: ViewHolder) {\n        holder.container.setOnClickListener {\n            holder.aSwitch.toggle()\n            switchAction(holder, holder.aSwitch.isChecked)\n        }\n        holder.aSwitch.setOnCheckedChangeListener { compoundButton: CompoundButton, b: Boolean ->", "choices": [{"text": " {\n            holder.aSwitch.toggle()\n            switchAction(holder, holder.aSwitch.isChecked)\n        } }\n        holder.aSwitch.setOnCheckedChangeListener { compoundButton: CompoundButton, b: Boolean -> {\n            holder.aSwitch.toggle()\n            switchAction(holder, holder.aSwitch.isChecked)\n        } }\n        holder.aSwitch.setOnCheckedChangeListener { compoundButton: CompoundButton, b: Boolean -> {\n            holder.aSwitch.toggle()\n            switchAction(holder, holder.aSwitch.isChecked)\n"}], "metadata": {"task_id": "Iconify/49", "ground_truth": "            if (compoundButton.isPressed) {\n                switchAction(holder, b)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\SwitchAdapter.kt"}}
{"prompt": "@Suppress(\"deprecation\")", "choices": [{"text": "\", \"unused_argument\")\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Iconify/51", "ground_truth": "    override fun onSupportNavigateUp(): Boolean {\n        onBackPressed()\n        return true\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\base\\BaseActivity.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.widget.TextView\nimport android.graphics.drawable.ColorDrawable\nimport android.graphics.Color\nimport android.app.Dialog\nfun show(title: String?) {\n        if (dialog != null) dialog!!.dismiss()\n\n        dialog = Dialog(context)\n        dialog!!.setContentView(R.layout.view_loading_dialog)\n        dialog!!.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog!!.setCancelable(false)\n        dialog!!.setOnCancelListener(null)\n        dialog!!.setCanceledOnTouchOutside(false)\n\n        val text = dialog!!.findViewById<TextView>(R.id.title)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Iconify/61", "ground_truth": "        text.text = title\n\n        dialog!!.create()\n        dialog!!.show()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\LoadingDialog.kt"}}
{"prompt": "import com.drdisagree.iconify.config.Prefs.putString\nimport com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Preferences.CUSTOM_ACCENT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY_LIGHT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY_LIGHT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY\nimport com.drdisagree.iconify.R\nprivate fun applyMonetColors() {\n        putBoolean(CUSTOM_ACCENT, true)\n\n        if (isSelectedPrimary) {\n            putString(COLOR_ACCENT_PRIMARY, accentPrimary)\n            putString(COLOR_ACCENT_PRIMARY_LIGHT, accentPrimary)\n        }\n        if (isSelectedSecondary) {\n            putString(COLOR_ACCENT_SECONDARY, accentSecondary)\n            putString(COLOR_ACCENT_SECONDARY_LIGHT, accentSecondary)", "choices": [{"text": "\n        }\n        if (isSelectedPrimaryLight) {\n            putString(COLOR_ACCENT_PRIMARY_LIGHT, accentPrimaryLight)\n            putString(COLOR_ACCENT_PRIMARY, accentPrimary)\n            putString(COLOR_ACCENT_PRIMARY_LIGHT, accentPrimaryLight)\n        }\n        if (isSelectedSecondaryLight) {\n            putString(COLOR_ACCENT_SECONDARY_LIGHT, accentSecondaryLight)\n            putString(COLOR_ACCENT_SECONDARY, accentSecondary)\n            putString(COLOR_ACCENT_SECONDARY_LIGHT, accentSecondaryLight)\n        }"}], "metadata": {"task_id": "Iconify/72", "ground_truth": "        }\n\n        if (isSelectedPrimary) applyPrimaryColors()\n        if (isSelectedSecondary) applySecondaryColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\BasicColors.kt"}}
{"prompt": "var binding FragmentBrightnessBarBinding\nvar loadingDialog LoadingDialog?", "choices": [{"text": "() {\n  return new Promise((resolve, reject) => {\n    $.ajax({\n      type: 'GET',\n      url: '/api/v1/brightness-bars',\n      dataType: 'json',\n      success: (data) => {\n        resolve(data);\n      },\n      error: (error) => {\n        reject(error);\n      }\n    });\n  });\n}\n\nvar binding FragmentBrightnessBarBinding = {\n  data() {\n    return new Promise((resolve, reject) => {\n      $.ajax({"}], "metadata": {"task_id": "Iconify/75", "ground_truth": "override fun onDestroy() {\n        loadingDialog?.dismiss()\n\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\BrightnessBar.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.utils.ViewHelper.setHeader\nimport com.drdisagree.iconify.databinding.FragmentChangelogBinding\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentChangelogBinding.inflate(inflater, container, false)\n        val view: View = binding.getRoot()\n\n        // Header\n        setHeader(\n            requireContext(),\n            getParentFragmentManager(),\n            binding.header.toolbar,\n            R.string.activity_title_changelog\n        )\n\n        try {\n            grabChangelog = GrabChangelog()\n            grabChangelog!!.execute()", "choices": [{"text": "\n        } catch (Exception e) {\n            e.printStackTrace()\n        }\n\n        return view\n    }\n}\n"}], "metadata": {"task_id": "Iconify/77", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        return view\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "import java.util.regex.Pattern\nimport com.drdisagree.iconify.R\nfun usernameToLink(str: String): String {\n            val regexPattern = \"@([A-Za-z\\\\d_-]+)\"\n            val pattern = Pattern.compile(regexPattern)\n            val matcher = pattern.matcher(str)\n            val sb = StringBuffer()\n\n            while (matcher.find()) {\n                val username = matcher.group(1)\n                val link = \"<a href=\\\"https://github.com/$username\\\">@$username</a>\"\n                matcher.appendReplacement(sb, link)\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/82", "ground_truth": "\n            matcher.appendTail(sb)\n\n            return sb.toString()\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "import com.drdisagree.iconify.config.Prefs.getString\nimport com.drdisagree.iconify.common.Preferences.STR_NULL\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY\nimport com.drdisagree.iconify.R\nprivate fun applyDefaultColors() {\n        if (shouldUseDefaultColors()) {\n            if (getString(COLOR_ACCENT_PRIMARY) == STR_NULL) {\n                BasicColors.applyDefaultPrimaryColors()\n            } else {\n                BasicColors.applyPrimaryColors()\n            }\n\n            if (getString(COLOR_ACCENT_SECONDARY) == STR_NULL) {\n                BasicColors.applyDefaultSecondaryColors()", "choices": [{"text": "\n            } else {\n                BasicColors.applySecondaryColors()\n            }\n        } else {\n            BasicColors.applyPrimaryColors()\n            BasicColors.applySecondaryColors()\n        }\n    }\n\n    private boolean shouldUseDefaultColors() {\n        return getString(COLOR_ACCENT_PRIMARY)!= STR_NULL && getString(COLOR_ACCENT_SECONDARY)!= STR_NULL;\n    }\n}\n"}], "metadata": {"task_id": "Iconify/85", "ground_truth": "            } else {\n                BasicColors.applySecondaryColors()\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ColorEngine.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.extension.TaskExecutor\nimport com.drdisagree.iconify.R\noverride fun onStop() {\n        if (checkForUpdate?.status == TaskExecutor.Status.PENDING ||\n            checkForUpdate?.status == TaskExecutor.Status.RUNNING\n        ) {", "choices": [{"text": " {\n                checkForUpdate?.cancel();\n                checkForUpdate = null;\n            }\n        }\n        super.onStop();\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_check_for_update);\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        if (checkForUpdate!= null) {\n            checkForUpdate.start();\n        }\n    }\n\n    @Override\n"}], "metadata": {"task_id": "Iconify/87", "ground_truth": "            checkForUpdate?.cancel(true)\n        }\n\n        super.onStop()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Home.kt"}}
{"prompt": "private fun cloneList(src: List<MutableList<Any>>): List<MutableList<Any>> {\n        val cloned: MutableList<MutableList<Any>> = ArrayList()\n\n        for (sublist in src) {", "choices": [{"text": ": MutableList<MutableList<Any>> {\n                cloned.add(sublist.clone())\n        }\n\n        return cloned\n}\n\nprivate fun cloneList(src: List<MutableList<Any>>): List<MutableList<Any>> {\n        val cloned: MutableList<MutableList<Any>> = ArrayList()\n\n        for (sublist in src) {\n                cloned.add(sublist.clone())\n        }\n\n        return cloned\n}\n\nprivate fun cloneList(src: List<MutableList<Any>>): List<MutableList"}], "metadata": {"task_id": "Iconify/92", "ground_truth": "            cloned.add(ArrayList(sublist))\n        }\n\n        return cloned\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\MonetEngine.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nprivate fun initializeLeftGestureSwitch(): Boolean {\n        return try {\n            Shell.cmd(\n                \"settings get secure back_gesture_inset_scale_left\"", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/97", "ground_truth": "            ).exec().out[0].toInt() == -1\n        } catch (ignored: Exception) {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\NavigationBar.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nimport com.drdisagree.iconify.R\nprivate fun initializeRightGestureSwitch(): Boolean {\n        return try {\n            Shell.cmd(\n                \"settings get secure back_gesture_inset_scale_right\"", "choices": [{"text": "\n            );\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n    private fun initializeLeftGestureSwitch(): Boolean {\n        return try {\n            Shell.cmd(\n                \"settings get secure back_gesture_inset_scale_left\"\n            );\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n    private fun initializeUpGestureSwitch(): Boolean {\n        return try {"}], "metadata": {"task_id": "Iconify/98", "ground_truth": "            ).exec().out[0].toInt() == -1\n        } catch (ignored: Exception) {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\NavigationBar.kt"}}
{"prompt": "var binding FragmentProgressBarBinding\nvar loadingDialog LoadingDialog?", "choices": [{"text": " = require('loading-dialog');\nvar $ = require('jquery');\nvar _ = require('underscore');\nvar Backbone = require('backbone');\nvar Marionette = require('backbone.marionette');\nvar MarionetteView = require('backbone.marionette.view');\nvar MarionetteLayout = require('backbone.marionette.layout');\nvar MarionetteModal = require('backbone.marionette.modal');\nvar MarionetteForm = require('backbone.marionette.form');\nvar"}], "metadata": {"task_id": "Iconify/101", "ground_truth": "override fun onDestroy() {\n        loadingDialog?.dismiss()\n\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ProgressBar.kt"}}
{"prompt": "import com.drdisagree.iconify.common.Preferences.QS_TEXT_COLOR_VARIANT_NORMAL\nimport com.drdisagree.iconify.common.Preferences.QS_TEXT_COLOR_VARIANT\nimport com.drdisagree.iconify.R\nprivate fun replaceVariant(vararg args: String): Array<String?> {\n        val newArgs = arrayOfNulls<String>(args.size)\n\n        for (i in args.indices) {\n            if (args[i].contains(\"QST5\")) continue\n\n            newArgs[i] = args[i].replace(\n                \"QST\",\n                if (selectedVariant == QS_TEXT_COLOR_VARIANT_NORMAL) \"QSNT\" else \"QSPT\"", "choices": [{"text": "\n            )\n        }\n\n        return newArgs\n    }\n    private fun replaceVariant(vararg args: String): Array<String?> {\n        val newArgs = arrayOfNulls<String>(args.size)\n\n        for (i in args.indices) {\n            if (args[i].contains(\"QST5\")) continue\n\n            newArgs[i] = args[i].replace(\n                \"QST\",\n                if (selectedVariant == QS_TEXT_COLOR_VARIANT_NORMAL) \"QSNT\" else \"QSPT\"\n"}], "metadata": {"task_id": "Iconify/102", "ground_truth": "            )\n        }\n\n        return newArgs\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsIconLabel.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.models.MenuModel\nimport com.drdisagree.iconify.ui.adapters.MenuAdapter\nimport com.drdisagree.iconify.R\nprivate fun initActivityItems(): MenuAdapter {\n        val qsShapeActivityList = ArrayList<MenuModel>().apply {\n            add(\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string.activity_title_pixel_variant),\n                    resources.getString(R.string.activity_desc_pixel_variant),\n                    R.drawable.ic_pixel_device\n                )", "choices": [{"text": ",\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string.activity_title_pixel_variant),\n                    resources.getString(R.string.activity_desc_pixel_variant),\n                    R.drawable.ic_pixel_device\n                ),\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string.activity_title_pixel_variant),\n                    resources.getString"}], "metadata": {"task_id": "Iconify/106", "ground_truth": "            )\n        }\n\n        return MenuAdapter(requireContext(), qsShapeActivityList)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsPanelTile.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nimport android.view.View\nprivate fun refreshLayout(layout: RelativeLayout) {\n        for (i in 0 until binding.iconPacksList.childCount) {\n            val child = binding.iconPacksList.getChildAt(i)\n                .findViewById<RelativeLayout>(R.id.icon_pack_child)\n\n            itemSelected(\n                child,", "choices": [{"text": "\n                binding.iconPacksList.getChildAt(i).findViewById<View>(R.id.icon_pack_child)\n            );\n\n            i++;\n        }\n    }\n    private fun itemSelected(\n        view: View,\n        layout: RelativeLayout\n    ) {\n        binding.iconPacksList.setSelection(\n            binding.iconPacksList.indexOf(view)\n        );\n    }\n}\n"}], "metadata": {"task_id": "Iconify/117", "ground_truth": "                child === layout,\n                i + 1\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nimport android.view.View\nprivate fun refreshBackground() {\n        for (i in 0 until binding.iconPacksList.childCount) {\n            val child = binding.iconPacksList.getChildAt(i)\n                .findViewById<RelativeLayout>(R.id.icon_pack_child)\n\n            itemSelected(\n                child,", "choices": [{"text": "\n                binding.iconPacksList.getChildAt(i),\n                binding.iconPacksList.getChildAt(i).findViewById<RelativeLayout>(R.id.icon_pack_child),\n                binding.iconPacksList.getChildAt(i).findViewById<RelativeLayout>(R.id.icon_pack_child),\n                binding.iconPacksList.getChildAt(i).findViewById<RelativeLayout>(R.id.icon_pack_child),\n                binding.iconPacksList.getChildAt(i).findViewById<"}], "metadata": {"task_id": "Iconify/118", "ground_truth": "                Prefs.getInt(SELECTED_SETTINGS_ICONS_SET, 1) == i + 1,\n                i + 1\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nvar loadingDialog LoadingDialog?\nvar selectedIcon\nvar selectedIconColor\nprivate fun enableOnClickListener(layout: RelativeLayout, index: Int) {\n        // Set onClick operation for options in list", "choices": [{"text": "\n        switch (index) {\n            case 0:\n                layout.setVisibility(View.VISIBLE);\n                break;\n            case 1:\n                layout.setVisibility(View.GONE);\n                break;\n            case 2:\n                layout.setVisibility(View.VISIBLE);\n                break;\n            case 3:\n                layout.setVisibility(View.GONE);\n                break;\n            case 4:\n                layout.setVisibility(View.VISIBLE);\n                break;\n            case 5:\n                layout.setVisibility(View.GONE);\n               "}], "metadata": {"task_id": "Iconify/119", "ground_truth": "        layout.setOnClickListener {\n            refreshLayout(layout)\n            selectedIcon = index + 1\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.utils.ViewHelper.setHeader\nimport com.drdisagree.iconify.databinding.FragmentTweaksBinding\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentTweaksBinding.inflate(inflater, container, false)\n        val view: View = binding.getRoot()\n\n        // Header\n        setHeader(\n            requireContext(),\n            getParentFragmentManager(),\n            binding.header.toolbar,\n            R.string.navbar_tweaks\n        )", "choices": [{"text": "\n\n        return view\n    }\n}\n"}], "metadata": {"task_id": "Iconify/128", "ground_truth": "\n        addItem(initTweaksItemList(view))\n\n        return view\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Tweaks.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.widgets.MenuWidget\nimport androidx.navigation.Navigation.findNavController\nimport android.view.View\nimport android.view.Menu\nimport android.app.Activity\nprivate fun addItem(pack: ArrayList<Array<Any>>) {\n        for (i in pack.indices) {\n            val menu = MenuWidget(requireActivity())\n\n            menu.setTitle(pack[i][1] as String)\n            menu.setSummary(pack[i][2] as String)\n            menu.setIcon(pack[i][3] as Int)\n            menu.setEndArrowVisibility(View.VISIBLE)\n            menu.setOnClickListener {\n                findNavController(menu).navigate(\n                    (pack[i][0] as Int)\n                )", "choices": [{"text": "\n            }\n            menu.setOnLongClickListener {\n                findNavController(menu).navigate(\n                    (pack[i][0] as Int)\n                )\n            }\n            menu.setOnItemLongClickListener {\n                findNavController(menu).navigate(\n                    (pack[i][0] as Int)\n                )\n            }\n            menu.setOnItemClickListener {\n                findNavController(menu).navigate(\n                    (pack[i][0] as Int)\n                )\n            }\n            menu.setOnItemLongClickListener {"}], "metadata": {"task_id": "Iconify/134", "ground_truth": "            }\n\n            binding.xposedList.addView(menu)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "override fun onDestroy() {\n        try {\n            handler.removeCallbacks(checkSystemUIHooked)", "choices": [{"text": "()\n        } catch (e) {\n        }\n        super.onDestroy();\n    }\n\n    checkSystemUIHooked() {\n        if (this.isSystemUIHooked) {\n            return;\n        }\n\n        this.isSystemUIHooked = true;\n\n        this.setState({\n            isSystemUIHooked: true\n        });\n    }\n\n    render() {\n        return (\n            <View style={styles.container}>\n                <View style={styles.header}>\n                    <Text style={styles."}], "metadata": {"task_id": "Iconify/135", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "override fun onPause() {\n        try {\n            handler.removeCallbacks(checkSystemUIHooked)", "choices": [{"text": "()\n        } catch (e) {\n        }\n    }\n\n    function checkSystemUIHooked() {\n        if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(checkSystemUIHooked)\n        } else if (window.webkitRequestAnimationFrame) {\n            window.webkitRequestAnimationFrame(checkSystemUIHooked)\n        } else if (window.mozRequestAnimationFrame) {\n            window.mozRequestAnimationFrame(checkSystemUIHooked)\n        } else if (window.oRequestAnimationFrame) {\n            window"}], "metadata": {"task_id": "Iconify/137", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        super.onPause()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\noverride fun scrollHorizontallyBy(\n        dx: Int,\n        recycler: RecyclerView.Recycler,\n        state: RecyclerView.State\n    ): Int {\n        val scrolled = super.scrollHorizontallyBy(dx, recycler, state)", "choices": [{"text": ".scrollHorizontallyBy(dx, recycler, state)\n        return scrolled\n    }\n\noverride fun scrollVerticallyBy(\n        dy: Int,\n        recycler: RecyclerView.Recycler,\n        state: RecyclerView.State\n    ): Int {\n        val scrolled = super.scrollVerticallyBy(dy, recycler, state)\n        return scrolled\n    }\n"}], "metadata": {"task_id": "Iconify/153", "ground_truth": "\n        updateScaleFactors()\n\n        return scrolled\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\CarouselLayoutManager.kt"}}
{"prompt": "import com.bumptech.glide.request.transition.Transition\nimport com.bumptech.glide.request.target.CustomTarget\nimport com.bumptech.glide.Glide\nimport android.view.ViewGroup\nimport android.graphics.drawable.Drawable\n @JvmStatic\n    fun setDrawable(viewGroup: ViewGroup, drawable: Drawable?) {\n        Glide.with(viewGroup.context).load(drawable).into(object : CustomTarget<Drawable?>() {\n            override fun onResourceReady(\n                resource: Drawable,\n                transition: Transition<in Drawable?>?\n            ) {\n                viewGroup.background = resource", "choices": [{"text": ";\n            }\n        });\n    }\n @JvmStatic\n    fun setDrawable(viewGroup: ViewGroup, drawable: Drawable) {\n        Glide.with(viewGroup.context).load(drawable).into(object : CustomTarget<Drawable?>() {\n            override fun onResourceReady(\n                resource: Drawable,\n                transition: Transition<in Drawable?>?\n            ) {\n                viewGroup.background = resource;\n            }\n        });\n    }\n @JvmStatic\n    fun setDrawable(viewGroup: ViewGroup, drawable: Drawable) {\n       "}], "metadata": {"task_id": "Iconify/157", "ground_truth": "            }\n\n            override fun onLoadCleared(placeholder: Drawable?) {}\n        })\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewBindingHelpers.kt"}}
{"prompt": "import com.bumptech.glide.request.transition.Transition\nimport com.bumptech.glide.request.target.CustomTarget\nimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions\nimport com.bumptech.glide.Glide\nimport android.view.ViewGroup\nimport android.graphics.drawable.Drawable\n @JvmStatic\n    fun setDrawableWithAnimation(viewGroup: ViewGroup, drawable: Drawable?) {\n        Glide.with(viewGroup.context).load(drawable)\n            .transition(DrawableTransitionOptions.withCrossFade())\n            .into(object : CustomTarget<Drawable?>() {\n                override fun onResourceReady(\n                    resource: Drawable,\n                    transition: Transition<in Drawable?>?\n                ) {\n                    viewGroup.background = resource", "choices": [{"text": ";\n                }\n            });\n    }\n\n    fun setDrawableWithAnimation(viewGroup: ViewGroup, drawable: Drawable?) {\n        Glide.with(viewGroup.context).load(drawable)\n           .transition(DrawableTransitionOptions.withCrossFade())\n           .into(object : CustomTarget<Drawable?>() {\n                override fun onResourceReady(\n                    resource: Drawable,\n                    transition: Transition<in Drawable?>?\n                ) {\n                    viewGroup.background = resource;\n                }\n            });\n    }\n\n    fun setDrawable"}], "metadata": {"task_id": "Iconify/158", "ground_truth": "                }\n\n                override fun onLoadCleared(placeholder: Drawable?) {}\n            })\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewBindingHelpers.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport androidx.viewpager2.widget.ViewPager2\nimport androidx.recyclerview.widget.RecyclerView\n @JvmStatic\n    fun disableNestedScrolling(viewPager: ViewPager2) {\n        var recyclerView: RecyclerView? = null\n\n        for (i in 0 until viewPager.childCount) {\n            if (viewPager.getChildAt(i) is RecyclerView) {\n                recyclerView = viewPager.getChildAt(i) as RecyclerView\n                break\n            }\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/161", "ground_truth": "\n        if (recyclerView != null) {\n            recyclerView.isNestedScrollingEnabled = false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewHelper.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nprivate fun startInstallationTask() {\n        if (installationTask?.isActive != true) {\n            installationTask = CoroutineScope(Dispatchers.IO).launch {\n                onPreExecute()", "choices": [{"text": " {\n                    startInstallationTask();\n                }\n            };\n        }\n        return installationTask;\n    }\n    private fun stopInstallationTask() {\n        if (installationTask?.isActive!= true) {\n            installationTask = CoroutineScope(Dispatchers.IO).launch {\n                onPostExecute() {\n                    stopInstallationTask();\n                }\n            };\n        }\n        return installationTask;\n    }\n    public static void main(String[] args) {\n        startInstallationTask();\n    }\n}\n"}], "metadata": {"task_id": "Iconify/166", "ground_truth": "                doInBackground()\n                onPostExecute()\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "import com.airbnb.lottie.value.LottieValueCallback\nimport com.airbnb.lottie.SimpleColorFilter\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nprivate fun setLottieColorFilter() {\n        val callback = LottieValueCallback<ColorFilter>(SimpleColorFilter(buttonTextColor))\n        binding.loadingAnim.addValueCallback(", "choices": [{"text": "callback);\n        return () -> {\n                binding.loadingAnim.removeValueCallback(callback);\n                binding.loadingAnim.addValueCallback(callback);\n                binding.loadingAnim.addValueCallback(callback);\n                binding.loadingAnim.addValueCallback(callback);\n                binding.loadingAnim.addValueCallback(callback);\n                binding.loadingAnim.addValueCallback(callback);\n                binding.loadingAnim.addValueCallback(callback);\n                binding.loadingAnim.addValueCallback(callback);\n                binding.loadingAnim.addValueCallback(callback);\n                binding"}], "metadata": {"task_id": "Iconify/169", "ground_truth": "            KeyPath(\"**\"),\n            LottieProperty.COLOR_FILTER,\n            callback\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "var hasErroredOut\nvar clickedButton\nvar binding ViewOnboardingPageBinding", "choices": [{"text": ";\n\n$(document).ready(function() {\n\n  $(\"#submit\").click(function(e) {\n\n    e.preventDefault();\n\n    if (hasErroredOut) {\n      return;\n    }\n\n    hasErroredOut = true;\n\n    clickedButton = $(this);\n\n    $.ajax({\n      type: \"POST\",\n      dataType: \"json\",\n      url: \"http://localhost:3000/submit\",\n      data: clickedButton.serialize(),\n      success: function(data) {\n\n       "}], "metadata": {"task_id": "Iconify/170", "ground_truth": "override fun onDetachedFromWindow() {\n        installationTask?.cancel()\n\n        super.onDetachedFromWindow()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nprivate fun buildEntries() {\n        mEntries = resources.getTextArray(arrayResId)\n\n        val mValues: MutableList<String> = ArrayList()\n        for (i in mEntries.indices) {", "choices": [{"text": ".indices) {\n            mValues.add(mEntries.getText(i))\n        }\n        return mValues\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_iconify);\n        mEntries = buildEntries();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        mEntries = null;\n    }\n\n    @Override\n    protected void onResume() {\n        super"}], "metadata": {"task_id": "Iconify/176", "ground_truth": "            mValues.add(i.toString())\n        }\n\n        mEntryValues = mValues.toTypedArray<CharSequence>()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nfun setSelectedIndex(selectedIndex: Int) {\n        var idx = selectedIndex\n        val list = listOf(*resources.getStringArray(arrayResId))\n\n        if (idx < 0 || idx >= list.size) {\n            idx = 0\n        }\n\n        this.selectedIndex = idx", "choices": [{"text": "(idx)\n}\n\nvar arrayResId = R.array.arrayResId\nvar arrayResId2 = R.array.arrayResId2\nvar arrayResId3 = R.array.arrayResId3\nvar arrayResId4 = R.array.arrayResId4\nvar arrayResId5 = R.array.arrayResId5\nvar arrayResId6 = R.array.arrayResId6\nvar arrayResId7 = R.array.arrayResId7\nvar arrayResId8 = R.array.arrayResId8\nvar arrayRes"}], "metadata": {"task_id": "Iconify/182", "ground_truth": "        mValue = idx.toString()\n\n        setSelectedText(list[idx])\n        initBottomSheetDialog()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.activities.MainActivity\nimport androidx.fragment.app.FragmentActivity\nimport android.graphics.Color\nfun setColorPickerListener(\n        activity: FragmentActivity?,\n        defaultColor: Int,\n        showPresets: Boolean,\n        showAlphaSlider: Boolean,\n        showColorShades: Boolean\n    ) {\n        require(activity is MainActivity) { \"Activity must be instance of HomePage\" }\n        previewColor = defaultColor\n\n        container.setOnClickListener {\n            beforeColorPickerListener?.onColorPickerShown()\n\n            activity.showColorPickerDialog(\n                colorPickerDialogId,\n                selectedColor,\n                showPresets,", "choices": [{"text": " showAlphaSlider,\n                showColorShades\n            )\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/188", "ground_truth": "                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.activities.MainActivity\nimport androidx.fragment.app.FragmentActivity\nimport android.graphics.Color\nfun setColorPickerListener(\n        activity: FragmentActivity?,\n        defaultColor: Int,\n        showPresets: Boolean,\n        showAlphaSlider: Boolean,\n        showColorShades: Boolean\n    ) {\n        require(activity is MainActivity) { \"Activity must be instance of HomePage\" }\n        previewColor = defaultColor\n\n        container.setOnClickListener {\n            beforeColorPickerListener?.onColorPickerShown()\n\n            activity.showColorPickerDialog(\n                colorPickerDialogId,\n                selectedColor,\n                showPresets,", "choices": [{"text": " showAlphaSlider,\n                showColorShades\n            )\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/198", "ground_truth": "                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.SystemUtil\nimport com.drdisagree.iconify.R\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nfun setActivityResultLauncher(launcher: ActivityResultLauncher<Intent?>) {\n        activityResultLauncher = launcher\n\n        buttonPicker.setOnClickListener {\n            if (!SystemUtil.hasStoragePermission()) {\n                SystemUtil.requestStoragePermission(context)\n            } else {\n                if (::activityResultLauncher.isInitialized) {", "choices": [{"text": "\n                    ::activityResultLauncher.onActivityResult(::activityResultLauncher.getResultCode(), ::activityResultLauncher.getIntent())\n                }\n            }\n        }\n    }\n}\n"}], "metadata": {"task_id": "Iconify/207", "ground_truth": "                    FileUtil.launchFilePicker(activityResultLauncher, fileType)\n                }\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\FilePickerWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nfun setSelectedIndex(selectedIndex: Int) {\n        var idx = selectedIndex\n        val list = listOf(*resources.getStringArray(arrayResId))\n\n        if (idx < 0 || idx >= list.size) {\n            idx = 0\n        }", "choices": [{"text": ", idx = list.size - 1\n        }\n\n        if (idx < 0) {\n            idx = 0\n        }\n\n        if (idx >= list.size) {\n            idx = list.size - 1\n        }\n\n        if (idx < 0) {\n            idx = 0\n        }\n\n        if (idx >= list.size) {\n            idx = list.size - 1\n        }\n\n        if (idx < 0) {\n            idx = 0\n        }\n\n        if (idx >= list.size) {\n            idx"}], "metadata": {"task_id": "Iconify/214", "ground_truth": "        this.selectedIndex = idx\n\n        setSelectedText(list[idx])\n        initRadioDialog()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.dialogs.RadioDialog\nimport com.drdisagree.iconify.R\nprivate fun initRadioDialog() {\n        radioDialog = RadioDialog(\n            context,", "choices": [{"text": "\n            context,\n            android.R.style.Theme_Holo_Light_NoTitleBar,\n            android.R.style.Theme_Holo_Light_NoTitleBar,\n            android.R.style.Theme_Holo_Light_NoTitleBar,\n            android.R.style.Theme_Holo_Light_NoTitleBar,\n            android.R.style.Theme_Holo_Light_NoTitleBar,\n            android.R.style.Theme_Holo_Light_NoTitleBar,\n            android.R.style.Theme_"}], "metadata": {"task_id": "Iconify/215", "ground_truth": "            radioDialogId,\n            selectedIndex\n        )\n        radioDialog.setRadioDialogListener(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.view.View\nfun setResetClickListener(listener: OnLongClickListener?) {\n        resetClickListener = listener\n\n        resetIcon.setOnLongClickListener { v: View ->\n            if (defaultValue == Int.MAX_VALUE) {\n                return@setOnLongClickListener false\n            }\n\n            sliderValue = defaultValue", "choices": [{"text": ";\n\n            if (resetClickListener!= null) {\n                resetClickListener.onLongClick(v)\n            }\n        }\n    }\n\n    public interface OnLongClickListener {\n        void onLongClick(View v)\n    }\n\n    public interface OnResetClickListener {\n        void onResetClick(View v)\n    }\n\n    public interface OnValueChangeListener {\n        void onValueChange(int value)\n    }\n\n    public interface OnValueChangedListener {\n        void onValueChanged(int value)\n    }\n\n    public interface OnValue"}], "metadata": {"task_id": "Iconify/224", "ground_truth": "            handleResetVisibility()\n            notifyOnResetClicked(v)\n            true\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "import com.google.android.material.slider.Slider\nimport com.drdisagree.iconify.R\nprivate fun handleResetVisibility() {\n        if (defaultValue != Int.MAX_VALUE && materialSlider.value != defaultValue.toFloat()) {", "choices": [{"text": "\n                defaultValue = Int.MAX_VALUE;\n                materialSlider.setValue(defaultValue.toFloat());\n        }\n    }\n    @Override\n    public void onClick(View v) {\n        handleResetVisibility();\n        super.onClick(v);\n    }\n    @Override\n    public void onLongClick(View v) {\n        handleResetVisibility();\n        super.onLongClick(v);\n    }\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        handleResetVisibility();\n        return super.onTouchEvent("}], "metadata": {"task_id": "Iconify/225", "ground_truth": "            resetIcon.setVisibility(VISIBLE)\n        } else {\n            resetIcon.setVisibility(GONE)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "import android.widget.TextView\nfun setSummary(summary: String?) {\n        summaryTextView.text = summary\n\n        if (summary.isNullOrEmpty()) {", "choices": [{"text": "\n            summaryTextView.setVisibility(TextView.GONE);\n        } else {\n            summaryTextView.setVisibility(TextView.VISIBLE);\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/233", "ground_truth": "            summaryTextView.visibility = GONE\n        } else {\n            summaryTextView.visibility = VISIBLE\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\TitleWidget.kt"}}
{"prompt": "import java.nio.ByteOrder\nimport java.nio.ByteBuffer\nprivate static byte[] encodeAsSequenceOfLengthPrefixedElements(byte[][] sequence) {\r\n    int payloadSize = 0;\r\n    for (byte[] element : sequence) {\r\n        payloadSize += 4 + element.length;\r\n    }\r\n    ByteBuffer result = ByteBuffer.allocate(payloadSize);\r\n    result.order(ByteOrder.LITTLE_ENDIAN);\r\n    for (byte[] element : sequence) {", "choices": [{"text": "\r\n        result.putInt(element.length);\r\n        result.put(element);\r\n    }\r\n    return result.array();\r\n}\r\nprivate static byte[][] decodeAsSequenceOfLengthPrefixedElements(byte[] sequence) {\r\n    int payloadSize = 0;\r\n    for (byte[] element : sequence) {\r\n        payloadSize += 4 + element.length;\r\n    }\r\n    ByteBuffer result = ByteBuffer.allocate(payloadSize);\r\n    result.order(ByteOrder.LITTLE_ENDIAN);\r\n    for"}], "metadata": {"task_id": "Iconify/238", "ground_truth": "        result.putInt(element.length);\r\n        result.put(element);\r\n    }\r\n    return result.array();\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ApkSignerV2.java"}}
{"prompt": "import java.io.InputStream\npublic synchronized void readFrom(InputStream is, int len) {\r\n    int read;\r\n    byte[] buffer = new byte[4096];\r\n    try {\r\n        while ((read = is.read(buffer, 0, Math.min(len, buffer.length))) > 0) {\r\n            write(buffer, 0, read);\r\n            len -= read;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/241", "ground_truth": "        }\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ByteArrayStream.java"}}
{"prompt": "import java.security.cert.X509Certificate\nimport java.security.cert.CertificateFactory\nimport java.security.GeneralSecurityException\nimport java.io.InputStream\nimport java.io.IOException\npublic static X509Certificate readCertificate(InputStream input) throws IOException, GeneralSecurityException {\r\n    try {\r\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/242", "ground_truth": "        return (X509Certificate) cf.generateCertificate(input);\r\n    } finally {\r\n        input.close();\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\CryptoUtils.java"}}
{"prompt": "/**\r\n * Returns the multiple (in bytes) at which the provided {@code STORED} entry's data must start\r\n * relative to start of file or {@code 0} if alignment of this entry's data is not important.\r\n */\r\nprivate static int getStoredEntryDataAlignment(String entryName, int defaultAlignment) {\r\n    if (defaultAlignment <= 0) {\r\n        return 0;\r\n    }\r\n    if (entryName.endsWith(\".so\")) {\r\n        // Align .so contents to memory page boundary to enable memory-mapped\r\n        // execution.", "choices": [{"text": "\r\n        return defaultAlignment;\r\n    }\r\n    if (entryName.endsWith(\".dll\")) {\r\n        // Align.dll contents to memory page boundary to enable memory-mapped\r\n        // execution.\r\n        return defaultAlignment;\r\n    }\r\n    if (entryName.endsWith(\".exe\")) {\r\n        // Align.exe contents to memory page boundary to enable memory-mapped\r\n        // execution.\r\n        return defaultAlignment;\r\n    }\r\n    return defaultAlignment;\r\n}\r\n"}], "metadata": {"task_id": "Iconify/246", "ground_truth": "        return 4096;\r\n    } else {\r\n        return defaultAlignment;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "Iconify/247", "ground_truth": "public void write(int b) throws IOException {\r\n    super.write(b);\r\n    mCount++;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "Iconify/248", "ground_truth": "public void write(byte[] b, int off, int len) throws IOException {\r\n    super.write(b, off, len);\r\n    mCount += len;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "import com.drdisagree.iconify.Iconify.Companion.appContext\nimport android.content.pm.PackageManager\nimport android.content.pm.ApplicationInfo\nfun isAppInstalled(packageName: String?): Boolean {\n        val pm = appContext.packageManager\n\n        try {\n            pm.getPackageInfo(packageName!!, PackageManager.GET_ACTIVITIES)\n            return pm.getApplicationInfo(packageName, 0).enabled", "choices": [{"text": ";\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}\n"}], "metadata": {"task_id": "Iconify/255", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "import com.drdisagree.iconify.Iconify.Companion.appContext\nimport android.content.pm.PackageManager\nimport android.content.pm.ApplicationInfo\nfun getAppUid(packageName: String?): Int {\n        val pm = appContext.packageManager\n\n        try {\n            pm.getPackageInfo(packageName!!, PackageManager.GET_ACTIVITIES)\n            return pm.getApplicationInfo(packageName, 0).uid", "choices": [{"text": ";\n        } catch (Exception e) {\n            return 0;\n        }\n    }\n}\n"}], "metadata": {"task_id": "Iconify/257", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return 0\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport com.drdisagree.iconify.Iconify.Companion.appContext\nimport androidx.core.content.ContextCompat\nimport android.graphics.drawable.Drawable\nimport android.annotation.SuppressLint\n @JvmStatic\n    @SuppressLint(\"UseCompatLoadingForDrawables\")\n    fun getAppIcon(packageName: String?): Drawable? {\n        var appIcon = ContextCompat.getDrawable(appContext, R.drawable.ic_android)\n\n        try {\n            appIcon = appContext.packageManager.getApplicationIcon(packageName!!)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/258", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return appIcon\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "import android.content.Context\n @JvmStatic\n    fun clearCache(context: Context) {\n        try {\n            var dir = context.cacheDir\n            deleteDir(dir)\n\n            dir = context.externalCacheDir\n            deleteDir(dir)\n\n            dir = context.filesDir", "choices": [{"text": "\n            deleteDir(dir)\n\n            dir = context.externalFilesDir\n            deleteDir(dir)\n\n            dir = context.dataDir\n            deleteDir(dir)\n\n            dir = context.dataExternalCacheDir\n            deleteDir(dir)\n\n            dir = context.dataFilesDir\n            deleteDir(dir)\n\n            dir = context.dataExternalFilesDir\n            deleteDir(dir)\n\n            dir = context.dataExternalDataDir\n            deleteDir(dir)\n\n            dir = context.dataFilesExternalCacheDir\n            deleteDir(dir)"}], "metadata": {"task_id": "Iconify/262", "ground_truth": "            deleteDir(dir)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\CacheUtil.kt"}}
{"prompt": "import java.io.File\nprivate fun deleteDir(dir: File?): Boolean {\n        return if (dir != null && dir.isDirectory()) {\n            val children = dir.list() ?: return false\n\n            for (child in children) {\n                val success = deleteDir(File(dir, child))\n\n                if (!success) {\n                    return false\n                }\n            }\n\n            dir.delete()\n        } else if (dir != null && dir.isFile()) {", "choices": [{"text": "\n            val success = dir.delete()\n\n            if (!success) {\n                return false\n            }\n        }\n\n        return true\n    }\n"}], "metadata": {"task_id": "Iconify/263", "ground_truth": "            dir.delete()\n        } else {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\CacheUtil.kt"}}
{"prompt": "import android.graphics.Color\nfun getHue(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)", "choices": [{"text": "(color)\n        val a = Color.alpha(color)\n        val h = (r + g + b) / 3.0\n        return h\n}\nfun getColor(color: Int): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n        val a = Color.alpha(color)\n        val h = (r + g + b) / 3.0\n        return a\n}"}], "metadata": {"task_id": "Iconify/264", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[0]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\nfun setHue(color: Int, hue: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": "(3);\n        hsv[0] = hue;\n        hsv[1] = hue;\n        hsv[2] = hue;\n\n        return Color.hsvToColor(hsv);\n    }\n"}], "metadata": {"task_id": "Iconify/265", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[0] = hue\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\nfun getSaturation(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)", "choices": [{"text": "(color)\n        val a = Color.alpha(color)\n        val h = (r + g + b) / 3.0\n        val s = (r + g + b) / 3.0\n        val v = (r + g + b) / 3.0\n        val l = (r + g + b) / 3.0\n        val m = (r + g + b) / 3.0\n        val p = (r + g + b) / 3.0\n        val q = (r + g + b) / 3.0\n       "}], "metadata": {"task_id": "Iconify/266", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[1]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\n @JvmStatic\n    fun setSaturation(color: Int, saturation: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": "(3);\n        hsv[0] = saturation;\n        hsv[1] = saturation;\n        hsv[2] = saturation;\n\n        val rgb = IntArray(3);\n        rgb[0] = r;\n        rgb[1] = g;\n        rgb[2] = b;\n\n        val hsv_rgb = IntArray(3);\n        hsv_rgb[0] = hsv[0];\n        hsv_rgb[1] = hsv[1];\n        hsv_rgb[2] = hsv[2];\n\n        val rgb_hsv"}], "metadata": {"task_id": "Iconify/267", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[1] += saturation\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\nfun getLightness(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)", "choices": [{"text": "(color)\n        val a = Color.alpha(color)\n        val l = Math.max(r, g, b, a)\n        return l / 255.0\n    }\nfun getLightness(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n        val a = Color.alpha(color)\n        val l = Math.max(r, g, b, a)\n        return l / 255.0\n    }\nfun"}], "metadata": {"task_id": "Iconify/268", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[2]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\n @JvmStatic\n    fun setLightness(color: Int, lightness: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": ";\n        hsv[0] = lightness;\n        hsv[1] = lightness;\n        hsv[2] = lightness;\n\n        return Color.hsvToColor(hsv);\n    }\n\n @JvmStatic\n    fun setAlpha(color: Int, alpha: Float): Int {\n        val r = Color.red(color);\n        val g = Color.green(color);\n        val b = Color.blue(color);\n\n        val hsv = FloatArray(3);\n        hsv[0] = alpha;\n        hsv[1]"}], "metadata": {"task_id": "Iconify/269", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[2] += lightness\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import androidx.annotation.AttrRes\nimport android.util.TypedValue\nimport android.graphics.Color\nimport android.content.Context\nfun getColorResCompat(context: Context, @AttrRes id: Int): Int {\n        val typedValue = TypedValue()\n        val theme = context.theme\n        theme.resolveAttribute(id, typedValue, false)\n\n        val arr = context.obtainStyledAttributes(typedValue.data, intArrayOf(id))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/272", "ground_truth": "        @ColorInt val color = arr.getColor(0, -1)\n        arr.recycle()\n\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.color.monet.hct.Hct\n/**\r\n * If color is disliked, lighten it to make it likable.\r\n */\r\npublic static Hct fixIfDisliked(Hct hct) {", "choices": [{"text": "\r\n\tif (hct.isDisliked()) {\r\n\t\thct.lighten();\r\n\t\treturn hct;\r\n\t}\r\n\treturn hct;\r\n}\r\n/**\r\n * If color is disliked, lighten it to make it likable\r\n */\r\npublic static Hct fixIfDisliked(Hct hct) {\r\n\tif (hct.isDisliked()) {\r\n\t\thct.lighten();\r\n\t\treturn hct;\r\n\t}\r\n\treturn"}], "metadata": {"task_id": "Iconify/281", "ground_truth": "    if (isDisliked(hct)) {\r\n        return Hct.from(hct.getHue(), hct.getChroma(), 70.0);\r\n    }\r\n    return hct;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dislike\\DislikeAnalyzer.java"}}
{"prompt": "import java.util.function.Function\nimport com.drdisagree.iconify.utils.color.monet.scheme.DynamicScheme\nimport com.drdisagree.iconify.utils.color.monet.palettes.TonalPalette\nimport androidx.annotation.NonNull\nimport java.lang.Math.max\n/**\r\n * A convenience constructor for DynamicColor.\r\n *\r\n * <p>_Strongly_ prefer using one of the convenience constructors. This class is arguably too\r\n * flexible to ensure it can support any scenario. Functional arguments allow overriding without\r\n * risks that come with subclasses.\r\n *\r\n * <p>For example, the default behavior of adjust tone at max contrast to be at a 7.0 ratio with\r\n * its background is principled and matches accessibility guidance. That does not mean it's the\r\n * desired approach for _every_ design system, and every color pairing, always, in every case.\r\n *\r\n * <p>For opaque colors (colors with alpha = 100%).\r\n *\r\n * <p>For colors that are not backgrounds, and do not have backgrounds.\r\n *\r\n * @param name    The name of the dynamic color.\r\n * @param palette Function that provides a TonalPalette given DynamicScheme. A TonalPalette is\r\n *                defined by a hue and chroma, so this replaces the need to specify hue/chroma. By providing\r\n *                a tonal palette, when contrast adjustments are made, intended chroma can be preserved.\r\n * @param tone    Function that provides a tone, given a DynamicScheme.\r\n */\r\n@NonNull\r\npublic static DynamicColor fromPalette(@NonNull String name, @NonNull Function<DynamicScheme, TonalPalette> palette, @NonNull Function<DynamicScheme, Double> tone) {\r\n    return new DynamicColor(name, palette, tone, /* isBackground= */\r\n    false, /* background= */", "choices": [{"text": "\r\n    max(palette.apply(new DynamicScheme()), tone.apply(new DynamicScheme())));\r\n}\r\n/**\r\n * A convenience constructor for DynamicColor.\r\n *\r\n * @param name    The name of the dynamic color.\r\n * @param palette Function that provides a TonalPalette given DynamicScheme. A TonalPalette is\r\n *                defined by a hue and chroma, so this replaces the need to specify hue/chroma. By providing\r\n *                a tonal palette, when contrast adjustments are made, intended chroma can be preserved."}], "metadata": {"task_id": "Iconify/283", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\DynamicColor.java"}}
{"prompt": "import java.util.function.Function\nimport com.drdisagree.iconify.utils.color.monet.scheme.DynamicScheme\nimport com.drdisagree.iconify.utils.color.monet.palettes.TonalPalette\nimport androidx.annotation.NonNull\nimport java.lang.Math.max\n/**\r\n * A convenience constructor for DynamicColor.\r\n *\r\n * <p>_Strongly_ prefer using one of the convenience constructors. This class is arguably too\r\n * flexible to ensure it can support any scenario. Functional arguments allow overriding without\r\n * risks that come with subclasses.\r\n *\r\n * <p>For example, the default behavior of adjust tone at max contrast to be at a 7.0 ratio with\r\n * its background is principled and matches accessibility guidance. That does not mean it's the\r\n * desired approach for _every_ design system, and every color pairing, always, in every case.\r\n *\r\n * <p>For opaque colors (colors with alpha = 100%).\r\n *\r\n * <p>For colors that do not have backgrounds.\r\n *\r\n * @param name         The name of the dynamic color.\r\n * @param palette      Function that provides a TonalPalette given DynamicScheme. A TonalPalette is\r\n *                     defined by a hue and chroma, so this replaces the need to specify hue/chroma. By providing\r\n *                     a tonal palette, when contrast adjustments are made, intended chroma can be preserved.\r\n * @param tone         Function that provides a tone, given a DynamicScheme.\r\n * @param isBackground Whether this dynamic color is a background, with some other color as the\r\n *                     foreground.\r\n */\r\n@NonNull\r\npublic static DynamicColor fromPalette(@NonNull String name, @NonNull Function<DynamicScheme, TonalPalette> palette, @NonNull Function<DynamicScheme, Double> tone, boolean isBackground) {\r\n    return new DynamicColor(name, palette, tone, isBackground, /* background= */", "choices": [{"text": ");\r\n}\r\n/**\r\n * A convenience constructor for DynamicColor.\r\n *\r\n * <p>For opaque colors (colors with alpha = 100%).\r\n *\r\n * <p>For colors that do not have backgrounds.\r\n *\r\n * @param name         The name of the dynamic color.\r\n * @param palette      Function that provides a TonalPalette given DynamicScheme. A TonalPalette is\r\n *                     defined by a hue and chroma, so this replaces the need to specify hue/chroma. By providing\r\n *                     a tonal"}], "metadata": {"task_id": "Iconify/284", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\DynamicColor.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor background() {\r\n    return new DynamicColor(/* name= */\r\n    \"background\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 98.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    true); /* isDark= */\r\n}\r\n@NonNull\r\npublic DynamicColor darkBackground() {\r\n    return new DynamicColor(/* name= */\r\n    \"darkBackground\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 6.0 : 98.0, /* isBackground= */\r\n    false, /* background= */\r\n    true); /* isDark= */\r\n}\r\n@NonNull\r\npublic DynamicColor darkBackground"}], "metadata": {"task_id": "Iconify/293", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surface() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 98.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    true, /* isDark= */\r\n    true, /* isLight= */\r\n    true, /* isDarkLight= */\r\n    true, /* isDarkDark= */\r\n    true, /* isDarkDarkLight= */\r\n    true, /* isDarkDarkDark= */\r\n    true, /* isDarkDarkDarkLight= */\r\n    true, /* isDarkDarkDarkDark= */\r\n    true, /* isDarkDarkDarkDarkLight= */\r\n"}], "metadata": {"task_id": "Iconify/295", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceDim() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_dim\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 87.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 6.0 : 87.0, /* isBackground= */\r\n    true, /* background= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 6.0 : 87.0, /* isBackground= */\r\n    true, /* background= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n"}], "metadata": {"task_id": "Iconify/296", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceBright() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_bright\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 24.0 : 98.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    true); /* isDark= */\r\n}\r\n@NonNull\r\npublic DynamicColor surfaceDark() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_dark\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 24.0 : 98.0, /* isBackground= */\r\n    true, /* background= */\r\n    true); /* isDark= */\r\n}\r\n@NonNull\r\npublic DynamicColor"}], "metadata": {"task_id": "Iconify/297", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerLowest() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_lowest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 4.0 : 100.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    true); /* isDark= */\r\n}\r\n@NonNull\r\npublic DynamicColor surfaceContainerHighest() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_highest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 4.0 : 100.0, /* isBackground= */\r\n    true, /* background= */\r\n    true); /* isDark= */\r\n}\r\n@NonNull\r"}], "metadata": {"task_id": "Iconify/298", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerLow() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_low\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 10.0 : 96.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": ");\r\n}\r\n@NonNull\r\npublic DynamicColor surfaceContainerMedium() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_medium\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 10.0 : 96.0, /* isBackground= */\r\n    true, /* background= */\r\n    true);\r\n}\r\n@NonNull\r\npublic DynamicColor surfaceContainerHigh() {\r\n    return new DynamicColor(/*"}], "metadata": {"task_id": "Iconify/299", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainer() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 12.0 : 94.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 12.0 : 94.0, /* isBackground= */\r\n    true, /* background= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 12.0 : 94.0, /* isBackground= */\r\n    true, /* background= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    ("}], "metadata": {"task_id": "Iconify/300", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerHigh() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_high\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 17.0 : 92.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": ");\r\n}\r\n@NonNull\r\npublic DynamicColor surfaceContainerMedium() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_medium\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 17.0 : 92.0, /* isBackground= */\r\n    true, /* background= */\r\n    true);\r\n}\r\n@NonNull\r\npublic DynamicColor surfaceContainerLow() {\r\n    return new DynamicColor(/*"}], "metadata": {"task_id": "Iconify/301", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerHighest() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_highest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 22.0 : 90.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 22.0 : 90.0, /* isBackground= */\r\n    true, /* background= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 22.0 : 90.0, /* isBackground= */\r\n    true, /* background= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    ("}], "metadata": {"task_id": "Iconify/302", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import com.drdisagree.iconify.utils.color.monet.scheme.Variant\nimport androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceVariant() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_variant\", /* palette= */\r\n    (s) -> s.neutralVariantPalette, /* tone= */\r\n    (s) -> s.isDark ? 30.0 : 90.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    Variant.SURFACE);\r\n}\r\n\r\n@NonNull\r\npublic DynamicColor surface() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface\", /* palette= */\r\n    (s) -> s.neutralVariantPalette, /* tone= */\r\n    (s) -> s.isDark? 30.0 : 90.0, /* isBackground= */\r\n    true, /* background= */\r\n    Variant.SURFACE);\r\n}\r\n"}], "metadata": {"task_id": "Iconify/304", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor inverseSurface() {\r\n    return new DynamicColor(/* name= */\r\n    \"inverse_surface\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 90.0 : 20.0, /* isBackground= */\r\n    false, /* background= */", "choices": [{"text": "\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 90.0 : 20.0, /* isBackground= */\r\n    false, /* background= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 90.0 : 20.0, /* isBackground= */\r\n    false, /* background= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    ("}], "metadata": {"task_id": "Iconify/306", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor shadow() {\r\n    return new DynamicColor(/* name= */\r\n    \"shadow\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> 0.0, /* isBackground= */\r\n    false, /* background= */", "choices": [{"text": ");\r\n}\r\n@NonNull\r\npublic DynamicColor darker() {\r\n    return new DynamicColor(/* name= */\r\n    \"darker\", /* palette= */\r\n    (s) -> s.darkerPalette, /* tone= */\r\n    (s) -> 0.0, /* isBackground= */\r\n    false, /* background= */\r\n    true);\r\n}\r\n@NonNull\r\npublic DynamicColor light() {\r\n    return new DynamicColor(/* name= */\r\n    \"light\", /* palette= */\r\n    ("}], "metadata": {"task_id": "Iconify/310", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor scrim() {\r\n    return new DynamicColor(/* name= */\r\n    \"scrim\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> 0.0, /* isBackground= */\r\n    false, /* background= */", "choices": [{"text": ", /* isForeground= */\r\n    true, /* foreground= */\r\n    true, /* isTranslucent= */\r\n    true, /* translucent= */\r\n    true, /* isOpaque= */\r\n    true, /* opaque= */\r\n    true, /* isTransparent= */\r\n    true, /* transparent= */\r\n    true, /* isDark= */\r\n    true, /* dark= */\r\n    true, /* isLight= */\r\n    true, /* light= */\r\n    true, /* isDarker="}], "metadata": {"task_id": "Iconify/311", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceTint() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_tint\", /* palette= */\r\n    (s) -> s.primaryPalette, /* tone= */\r\n    (s) -> s.isDark ? 80.0 : 40.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\r\n    true, /* isDark= */\r\n    true);\r\n}\r\n\r\n@NonNull\r\npublic DynamicColor surfaceLight() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_light\", /* palette= */\r\n    (s) -> s.primaryPalette, /* tone= */\r\n    (s) -> s.isDark? 80.0 : 40.0, /* isBackground= */\r\n    true, /* background= */\r\n    true, /* isDark= */\r\n    true);\r\n}"}], "metadata": {"task_id": "Iconify/312", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n// colorControlHighlight documented, in both M3 & GM3:\r\n// Light mode: #1f000000 dark mode: #33ffffff.\r\n// These are black and white with some alpha.\r\n// 1F hex = 31 decimal; 31 / 255 = 12% alpha.\r\n// 33 hex = 51 decimal; 51 / 255 = 20% alpha.\r\n// DynamicColors do not support alpha currently, and _may_ not need it for this use case,\r\n// depending on how MDC resolved alpha for the other cases.\r\n// Returning black in dark mode, white in light mode.\r\n@NonNull\r\npublic DynamicColor controlHighlight() {\r\n    return new DynamicColor(/* name= */\r\n    \"control_highlight\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 100.0 : 0.0, /* isBackground= */\r\n    false, /* background= */\r\n    null, /* secondBackground= */", "choices": [{"text": "\r\n    (s) -> s.isDark? 100.0 : 0.0, /* secondTone= */\r\n    (s) -> s.isDark? 100.0 : 0.0, /* secondIsBackground= */\r\n    (s) -> s.isDark? 100.0 : 0.0, /* secondBackground= */\r\n    (s) -> s.isDark? 100.0 : 0.0, /* secondSecondBackground= */\r\n    (s) -> s.isDark? 100.0 : 0.0,"}], "metadata": {"task_id": "Iconify/333", "ground_truth": "    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null, /* opacity= */\r\n    s -> s.isDark ? 0.20 : 0.12);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "/**\r\n * Create an ARGB color with HCT hue and chroma of this Tones instance, and the provided HCT tone.\r\n *\r\n * @param tone HCT tone, measured from 0 to 100.\r\n * @return ARGB representation of a color with that tone.\r\n */\r\n// AndroidJdkLibsChecker is higher priority than ComputeIfAbsentUseValue (b/119581923)\r\n@SuppressWarnings(\"ComputeIfAbsentUseValue\")\r\npublic int tone(int tone) {\r\n    Integer color = cache.get(tone);\r\n    if (color == null) {", "choices": [{"text": " return 0; }\r\n    return color;\r\n}\r\n\r\n/**\r\n * Create an ARGB color with HCT hue and chroma of this Tones instance, and the provided HCT tone.\r\n *\r\n * @param tone HCT tone, measured from 0 to 100.\r\n * @return ARGB representation of a color with that color.\r\n */\r\n// AndroidJdkLibsChecker is higher priority than ComputeIfAbsentUseValue (b/119581923)\r\n@SuppressWarnings(\"ComputeIfAbsentUseValue\")\r\npublic int tone(int tone,"}], "metadata": {"task_id": "Iconify/346", "ground_truth": "        color = Hct.from(this.hue, this.chroma, tone).toInt();\r\n        cache.put(tone, color);\r\n    }\r\n    return color;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\palettes\\TonalPalette.java"}}
{"prompt": "import java.util.Map\nimport java.util.List\nimport java.util.LinkedHashMap\n@Override\r\npublic QuantizerResult quantize(int[] pixels, int colorCount) {\r\n    QuantizerResult mapResult = new QuantizerMap().quantize(pixels, colorCount);\r\n    constructHistogram(mapResult.colorToCount);\r\n    createMoments();\r\n    CreateBoxesResult createBoxesResult = createBoxes(colorCount);\r\n    List<Integer> colors = createResult(createBoxesResult.resultCount);\r\n    Map<Integer, Integer> resultMap = new LinkedHashMap<>();", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/351", "ground_truth": "    for (int color : colors) {\r\n        resultMap.put(color, 0);\r\n    }\r\n    return new QuantizerResult(resultMap);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\quantize\\QuantizerWu.java"}}
{"prompt": "/**\r\n * Determines if an angle is between two other angles, rotating clockwise.\r\n */\r\nprivate static boolean isBetween(double angle, double a, double b) {", "choices": [{"text": "\r\n{\r\n    if (angle < 0)\r\n    {\r\n        angle += Math.PI;\r\n    }\r\n    else if (angle > Math.PI)\r\n    {\r\n        angle -= Math.PI;\r\n    }\r\n    else\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (a < 0)\r\n    {\r\n        a += Math.PI;\r\n    }\r\n    else if (a > Math.PI)\r\n    {\r\n        a -= Math.PI"}], "metadata": {"task_id": "Iconify/383", "ground_truth": "    if (a < b) {\r\n        return a <= angle && angle <= b;\r\n    }\r\n    return a <= angle || angle <= b;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\temperature\\TemperatureCache.java"}}
{"prompt": "import com.drdisagree.iconify.utils.color.monet.hct.Hct\n/**\r\n * Temperature relative to all colors with the same chroma and tone.\r\n *\r\n * @param hct HCT to find the relative temperature of.\r\n * @return Value on a scale from 0 to 1.\r\n */\r\npublic double getRelativeTemperature(Hct hct) {\r\n    double range = getTempsByHct().get(getWarmest()) - getTempsByHct().get(getColdest());\r\n    double differenceFromColdest = getTempsByHct().get(hct) - getTempsByHct().get(getColdest());\r\n    // Handle when there's no difference in temperature between warmest and\r\n    // coldest: for example, at T100, only one color is available, white.", "choices": [{"text": "\r\n    if (differenceFromColdest == 0) {\r\n        return range;\r\n    }\r\n    double differenceFromWarmest = getTempsByHct().get(getWarmest()) - getTempsByHct().get(hct);\r\n    // Handle when there's no difference in temperature between warmest and\r\n    // coldest: for example, at T100, only one color is available, white.\r\n    if (differenceFromWarmest == 0) {\r\n        return range;\r\n    }\r\n    return differenceFrom"}], "metadata": {"task_id": "Iconify/384", "ground_truth": "    if (range == 0.) {\r\n        return 0.5;\r\n    }\r\n    return differenceFromColdest / range;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\temperature\\TemperatureCache.java"}}
{"prompt": "static double labF(double t) {\r\n    double e = 216.0 / 24389.0;\r\n    double kappa = 24389.0 / 27.0;\r\n    if (t > e) {", "choices": [{"text": "\r\n        return kappa;\r\n    }\r\n    else if (t < kappa) {\r\n        return e;\r\n    }\r\n    else {\r\n        return 0.0;\r\n    }\r\n}\r\n\r\nstatic double labF2(double t) {\r\n    double e = 216.0 / 24389.0;\r\n    double kappa = 24389.0 / 27.0;\r\n    if (t > e) {\r\n        return kappa;\r\n    }\r\n    else if (t < kappa)"}], "metadata": {"task_id": "Iconify/396", "ground_truth": "        return Math.pow(t, 1.0 / 3.0);\r\n    } else {\r\n        return (kappa * t + 16) / 116;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "static double labInvf(double ft) {\r\n    double e = 216.0 / 24389.0;\r\n    double kappa = 24389.0 / 27.0;\r\n    double ft3 = ft * ft * ft;\r\n    if (ft3 > e) {", "choices": [{"text": "\r\n        ft3 = e;\r\n    }\r\n    else if (ft3 < -e) {\r\n        ft3 = -e;\r\n    }\r\n    else if (ft3 > kappa) {\r\n        ft3 = kappa;\r\n    }\r\n    else if (ft3 < -kappa) {\r\n        ft3 = -kappa;\r\n    }\r\n    return ft3;\r\n}\r\n\r\nstatic double labInvf2(double ft) {\r\n    double e = 216.0 / 243"}], "metadata": {"task_id": "Iconify/397", "ground_truth": "        return ft3;\r\n    } else {\r\n        return (116 * ft - 16) / kappa;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "/**\r\n * The signum function.\r\n *\r\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\r\n */\r\npublic static int signum(double num) {\r\n    if (num < 0) {\r\n        return -1;\r\n    } else if (num == 0) {", "choices": [{"text": "\r\n        return 0;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Iconify/398", "ground_truth": "        return 0;\r\n    } else {\r\n        return 1;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "/**\r\n * Clamps an integer between two integers.\r\n *\r\n * @return input when min <= input <= max, and either min or max otherwise.\r\n */\r\npublic static int clampInt(int min, int max, int input) {\r\n    if (input < min) {\r\n        return min;", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Iconify/399", "ground_truth": "    } else if (input > max) {\r\n        return max;\r\n    }\r\n    return input;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "/**\r\n * Clamps an integer between two floating-point numbers.\r\n *\r\n * @return input when min <= input <= max, and either min or max otherwise.\r\n */\r\npublic static double clampDouble(double min, double max, double input) {\r\n    if (input < min) {\r\n        return min;", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Iconify/400", "ground_truth": "    } else if (input > max) {\r\n        return max;\r\n    }\r\n    return input;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "/**\r\n * Sanitizes a degree measure as an integer.\r\n *\r\n * @return a degree measure between 0 (inclusive) and 360 (exclusive).\r\n */\r\npublic static int sanitizeDegreesInt(int degrees) {\r\n    degrees = degrees % 360;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/401", "ground_truth": "    if (degrees < 0) {\r\n        degrees = degrees + 360;\r\n    }\r\n    return degrees;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "/**\r\n * Sanitizes a degree measure as a floating-point number.\r\n *\r\n * @return a degree measure between 0.0 (inclusive) and 360.0 (exclusive).\r\n */\r\npublic static double sanitizeDegreesDouble(double degrees) {\r\n    degrees = degrees % 360.0;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/402", "ground_truth": "    if (degrees < 0) {\r\n        degrees = degrees + 360.0;\r\n    }\r\n    return degrees;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "fun setValue(newValue: T) {\n        if (value !== newValue) {", "choices": [{"text": " === newValue) {\n            value = newValue;\n        }\n    }\n\n    function getValue() {\n        return value;\n    }\n\n    return {\n        setValue,\n        getValue\n    };\n}\n\nexport default setValue;\n"}], "metadata": {"task_id": "Iconify/406", "ground_truth": "            value = newValue\n\n            listener?.onChange(value)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\extension\\ObservableVariable.kt"}}
{"prompt": "private fun closeQuietly(autoCloseable: AutoCloseable?) {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Iconify/412", "ground_truth": "        try {\n            autoCloseable?.close()\n        } catch (ignored: Exception) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "import java.io.OutputStream\nimport java.io.InputStream\nimport java.io.IOException\n @Throws(IOException::class)\n    fun copy(input: InputStream, output: OutputStream) {\n        val buffer = ByteArray(1024)\n        var n: Int", "choices": [{"text": " = input.read(buffer);\n        while (n!= -1) {\n            output.write(buffer, 0, n);\n            n = input.read(buffer);\n        }\n        output.flush();\n    }\n\n @Throws(IOException::class)\n    fun copy(input: InputStream, output: OutputStream) {\n        val buffer = ByteArray(1024);\n        var n: Int = input.read(buffer);\n        while (n!= -1) {\n            output.write(buffer, 0, n);\n            n = input.read(buffer"}], "metadata": {"task_id": "Iconify/414", "ground_truth": "\n        while (-1 != input.read(buffer).also { n = it }) {\n            output.write(buffer, 0, n)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "import android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details: List<String?>) {\n        val log = deviceInfo\n\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')\n        log.append(tag).append(\":\\n\")\n\n        for (line in details) {", "choices": [{"text": "\n            log.append(line).append('\\n')\n        }\n\n        Log.e(tag, log.toString())\n    }\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details: List<String?>) {\n        val log = deviceInfo\n\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')\n        log.append(tag).append(\":\\n\")\n\n        for (line in details) {\n            log.append(line).append"}], "metadata": {"task_id": "Iconify/423", "ground_truth": "            log.append('\\t').append(line).append('\\n')\n        }\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "import android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details: String?) {\n        val log = deviceInfo\n\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')", "choices": [{"text": ".append(details).append('\\n')\n\n        Log.e(tag, log.toString())\n    }\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details: String?) {\n        val log = deviceInfo\n\n        log.append(\"error: \").append(header).append('\\n')\n        log.append(details).append('\\n')\n\n        Log.e(tag, log.toString())\n    }\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details"}], "metadata": {"task_id": "Iconify/424", "ground_truth": "        log.append(tag).append(\":\\n\")\n        log.append(details).append('\\n')\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "import java.io.StringWriter\nimport java.io.PrintWriter\nimport android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, exception: Exception) {\n        val log = deviceInfo\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')\n        log.append(tag).append(\":\\n\")\n\n        val writer = StringWriter()\n        exception.printStackTrace(PrintWriter(writer))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/425", "ground_truth": "        val str = writer.toString()\n        log.append(str).append('\\n')\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nimport com.drdisagree.iconify.common.Resources\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun handleModule() {\n        if (moduleExists()) {\n            // Clean temporary directory\n            Shell.cmd(\"rm -rf \" + Resources.TEMP_DIR).exec()\n\n            // Backup necessary files", "choices": [{"text": "\n            Shell.cmd(\"mkdir -p \" + Resources.TEMP_DIR).exec()\n            Shell.cmd(\"cp -r \" + Resources.ICON_DIR + \" \" + Resources.TEMP_DIR).exec()\n            Shell.cmd(\"cp -r \" + Resources.ICON_DIR + \" \" + Resources.ICON_DIR).exec()\n            Shell.cmd(\"cp -r \" + Resources.ICON_DIR + \" \" + Resources.ICON_DIR).exec()\n            Shell.cmd(\"cp -r \" + Resources.ICON_DIR + \" \" + Resources.ICON_DIR"}], "metadata": {"task_id": "Iconify/429", "ground_truth": "            backupFiles()\n        }\n\n        installModule()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\ModuleUtil.kt"}}
{"prompt": "import android.os.Build\nprivate fun keepFirstDigit(input: String): String {\n        val output = StringBuilder()\n        var firstDigitFound = false\n\n        for (c in input.toCharArray()) {\n            if (Character.isDigit(c)) {\n                if (!firstDigitFound) {\n                    output.append(c)\n                    firstDigitFound = true\n                }\n            } else {\n                output.append(c)", "choices": [{"text": ".append(c)\n            }\n        }\n\n        return output.toString()\n    }\n\npublic class Solution {\n    public String keepFirstDigit(String input) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            return keepFirstDigit(input);\n        } else {\n            return input;\n        }\n    }\n}\n"}], "metadata": {"task_id": "Iconify/434", "ground_truth": "            }\n        }\n\n        return output.toString()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\CompilerUtil.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nprivate fun createManifestResource(\n        overlayName: String?,\n        targetPackage: String?,\n        source: String\n    ): Boolean {\n        Shell.cmd(\"mkdir -p $source/res\").exec()\n\n        val values = arrayOf(\"values\", \"values-land\", \"values-night\")\n\n        for (i in 0..2) {\n            Shell.cmd(\"mkdir -p \" + source + \"/res/\" + values[i]).exec()\n            Shell.cmd(\n                \"printf '\" + mResource[i] + \"' > \" + source + \"/res/\" + values[i] + \"/iconify.xml;\"", "choices": [{"text": "\n            ).exec()\n        }\n\n        Shell.cmd(\"mkdir -p \" + source + \"/res/\" + values[0]).exec()\n        Shell.cmd(\"mkdir -p \" + source + \"/res/\" + values[1]).exec()\n        Shell.cmd(\"mkdir -p \" + source + \"/res/\" + values[0] + \"/iconify.xml\").exec()\n        Shell.cmd(\"mkdir -p \" + source + \"/res/\" + values[1] + \"/iconify.xml\").exec()\n        Shell.cmd(\"mkdir -p \""}], "metadata": {"task_id": "Iconify/436", "ground_truth": "            ).exec()\n        }\n\n        return OverlayCompiler.createManifest(overlayName, targetPackage, source)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\DynamicCompiler.kt"}}
{"prompt": "@JvmStatic\n    fun createManifest(name: String?, target: String?, source: String): Boolean {\n        var hasErroredOut = false\n        var attempt = 3\n\n        while (attempt-- != 0) {\n            if (OverlayCompiler.createManifest(name, target, source)) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored: Exception) {\n                }\n            } else {\n                hasErroredOut = true\n                break", "choices": [{"text": "\n            }\n        }\n\n        return hasErroredOut\n    }\n\n@JvmStatic\n    fun createManifest(name: String?, target: String?, source: String): Boolean {\n        var hasErroredOut = false\n        var attempt = 3\n\n        while (attempt--!= 0) {\n            if (OverlayCompiler.createManifest(name, target, source)) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored: Exception) {\n                }\n            } else {\n                hasErroredOut = true\n                break"}], "metadata": {"task_id": "Iconify/438", "ground_truth": "            }\n        }\n\n        return !hasErroredOut\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\OnboardingCompiler.kt"}}
{"prompt": "import java.util.Locale\nfun listContains(list: List<String>, target: String): Boolean {\n        for (item in list) {\n            if (item.lowercase(Locale.getDefault())\n                    .contains(target.lowercase(Locale.getDefault()))\n            ) {\n                return true", "choices": [{"text": ";\n            }\n        }\n        return false;\n    }\n"}], "metadata": {"task_id": "Iconify/442", "ground_truth": "            }\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\OverlayCompiler.kt"}}
{"prompt": "import java.util.concurrent.atomic.AtomicBoolean\nimport com.drdisagree.iconify.utils.overlay.compiler.DynamicCompiler.buildOverlay\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun buildOverlayWithResource(vararg resourceEntries: ResourceEntry?): Boolean {\n        val hasErroredOut = AtomicBoolean(false)\n\n        try {\n            createResource(*resourceEntries.filterNotNull().toTypedArray())\n        } catch (e: Exception) {\n            hasErroredOut.set(true)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/462", "ground_truth": "            Log.e(TAG, \"buildOverlayWithResource:\", e)\n        }\n\n        return hasErroredOut.get()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.overlay.compiler.DynamicCompiler.buildOverlay\nimport com.drdisagree.iconify.utils.SystemUtil.requestStoragePermission\nimport com.drdisagree.iconify.utils.SystemUtil.hasStoragePermission\nimport com.drdisagree.iconify.R\nimport android.content.Context\n @JvmStatic\n    fun buildOverlayWithResource(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                createResource(*resourceEntries.filterNotNull().toTypedArray())", "choices": [{"text": "\n            } catch (Exception e) {\n                e.printStackTrace()\n            }\n        }\n        return buildOverlay(context, resourceEntries.filterNotNull().toTypedArray())\n    }\n @JvmStatic\n    fun buildOverlayWithResource(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                createResource(*resourceEntries.filterNotNull().toTypedArray())\n            } catch (Exception e) {\n                e.printStackTrace()\n           "}], "metadata": {"task_id": "Iconify/463", "ground_truth": "            } catch (e: Exception) {\n                Log.e(TAG, \"buildOverlayWithResource:\", e)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "import java.util.concurrent.atomic.AtomicBoolean\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun removeResourceFromOverlay(vararg resourceEntries: ResourceEntry?): Boolean {\n        val hasErroredOut = AtomicBoolean(false)\n\n        try {\n            removeResource(*resourceEntries.filterNotNull().toTypedArray())\n        } catch (e: Exception) {\n            hasErroredOut.set(true)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/464", "ground_truth": "            Log.e(TAG, \"removeResourceFromOverlay:\", e)\n        }\n\n        return hasErroredOut.get()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.SystemUtil.requestStoragePermission\nimport com.drdisagree.iconify.utils.SystemUtil.hasStoragePermission\nimport com.drdisagree.iconify.R\nimport android.content.Context\n @JvmStatic\n    fun removeResourceFromOverlay(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                removeResource(*resourceEntries.filterNotNull().toTypedArray())", "choices": [{"text": "\n            } catch (Exception e) {\n                e.printStackTrace()\n            }\n        }\n    }\n @JvmStatic\n    fun removeResourceFromOverlay(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                removeResource(*resourceEntries.filterNotNull().toTypedArray())\n            } catch (Exception e) {\n                e.printStackTrace()\n            }\n        }\n    }\n @JvmStatic\n    fun removeResourceFrom"}], "metadata": {"task_id": "Iconify/465", "ground_truth": "            } catch (e: Exception) {\n                Log.e(TAG, \"removeResourceFromOverlay:\", e)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "import org.json.JSONObject\nimport com.drdisagree.iconify.R\n @Throws(Exception::class)\n    private fun createResource(vararg resourceEntries: ResourceEntry) {\n        val jsonObject = resources\n        val newJsonObject = generateJsonData(*resourceEntries)\n        val mergedJson = Array(3) { JSONObject() }\n\n        for (i in 0..2) {\n            mergedJson[i] = initResourceIfNull(JSONObject())\n\n            mergeJsonObjects(mergedJson[i], jsonObject[i])\n            mergeJsonObjects(mergedJson[i], newJsonObject[i])\n        }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Iconify/466", "ground_truth": "\n        saveResources(mergedJson)\n\n        DynamicCompilerExecutor().execute()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "@JvmStatic\n    fun isOverlayInstalled(enabledOverlays: List<String>, pkgName: String): Boolean {\n        for (line in enabledOverlays) {", "choices": [{"text": " {\n            if (line.startsWith(pkgName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n@JvmStatic\n    fun isOverlayInstalled(enabledOverlays: List<String>, pkgName: String): Boolean {\n        for (line in enabledOverlays) {\n            if (line.startsWith(pkgName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n@JvmStatic\n    fun isOverlayInstalled(enabledOverlays: List<String>, pkgName: String): Boolean {"}], "metadata": {"task_id": "Iconify/472", "ground_truth": "            if (line == pkgName) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\OverlayUtil.kt"}}
{"prompt": "import com.drdisagree.iconify.config.Prefs\n @JvmStatic\n    fun enableOverlaysExclusiveInCategory(vararg pkgNames: String?) {\n        val command = StringBuilder()\n\n        for (pkgName in pkgNames) {\n            Prefs.putBoolean(pkgName, true)\n\n            command.append(\"cmd overlay enable-exclusive --user current --category \")\n                .append(pkgName).append(\"; cmd overlay set-priority \").append(pkgName)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/476", "ground_truth": "                .append(\" highest; \")\n        }\n\n        Shell.cmd(command.toString().trim { it <= ' ' }).submit()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\OverlayUtil.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nval isKSUInstalled Boolean\nval isDeviceRooted Boolean\nval isApatchInstalled Boolean\nfun fileExists(dir: String): Boolean {\n        val lines = Shell.cmd(\"test -f $dir && echo '1'\").exec().out\n\n        for (line in lines) {", "choices": [{"text": "\n            if (line.startsWith(\"1\")) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}], "metadata": {"task_id": "Iconify/481", "ground_truth": "            if (line.contains(\"1\")) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\RootUtil.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\n @JvmStatic\n    fun folderExists(dir: String): Boolean {\n        val lines = Shell.cmd(\"test -d $dir && echo '1'\").exec().out\n\n        for (line in lines) {", "choices": [{"text": " {\n            if (line.startsWith(\"1\")) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    @JvmStatic\n    fun fileExists(file: String): Boolean {\n        val lines = Shell.cmd(\"test -f $file && echo '1'\").exec().out\n\n        for (line in lines) {\n            if (line.startsWith(\"1\")) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    @JvmStatic\n    fun file"}], "metadata": {"task_id": "Iconify/482", "ground_truth": "            if (line.contains(\"1\")) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\RootUtil.kt"}}
{"prompt": "import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport de.robv.android.xposed.XposedBridge.log\nimport com.drdisagree.iconify.xposed.utils.BootLoopProtector\nimport com.drdisagree.iconify.config.XPrefs\nprivate fun onXPrefsReady(loadPackageParam: LoadPackageParam) {\n        if (BootLoopProtector.isBootLooped(loadPackageParam.packageName)) {\n            log(\"Possible bootloop in ${loadPackageParam.packageName} ; Iconify will not load for now...\")\n            return\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/493", "ground_truth": "\n        SystemUtil(mContext!!)\n\n        loadModPacks(loadPackageParam)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\HookEntry.kt"}}
{"prompt": "import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport com.drdisagree.iconify.config.XPrefs.Xprefs\nprivate fun waitForXprefsLoad(loadPackageParam: LoadPackageParam) {\n        while (true) {\n            try {\n                Xprefs?.getBoolean(\"LoadTestBooleanValue\", false)\n                break\n            } catch (ignored: Throwable) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored1: Throwable) {\n                }\n            }\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/494", "ground_truth": "\n        log(\"Iconify Version: ${BuildConfig.VERSION_NAME}\")\n\n        onXPrefsReady(loadPackageParam)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\HookEntry.kt"}}
{"prompt": "import de.robv.android.xposed.XposedHelpers.getAdditionalInstanceField\nimport com.drdisagree.iconify.xposed.modules.batterystyles.BatteryDrawable\nimport android.graphics.drawable.Drawable\nprivate fun updateCustomizeBatteryDrawable(thisObject: Any) {\n        if (!customBatteryEnabled) return\n\n        val mBatteryDrawable = getAdditionalInstanceField(\n            thisObject,", "choices": [{"text": " \"mBatteryDrawable\"\n        );\n        if (mBatteryDrawable == null) {\n            mBatteryDrawable = new BatteryDrawable();\n            getAdditionalInstanceField(\n                thisObject,\n                \"mBatteryDrawable\",\n                mBatteryDrawable\n            );\n        }\n\n        mBatteryDrawable.setCustomBatteryEnabled(customBatteryEnabled);\n    }\n"}], "metadata": {"task_id": "Iconify/502", "ground_truth": "            \"mBatteryDrawable\"\n        ) as BatteryDrawable\n\n        updateCustomizeBatteryDrawable(mBatteryDrawable)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BatteryStyleManager.kt"}}
{"prompt": "import com.drdisagree.iconify.xposed.modules.batterystyles.BatteryDrawable\nimport com.drdisagree.iconify.R\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nprivate fun updateCustomizeBatteryDrawable(mBatteryDrawable: BatteryDrawable) {\n        if (!customBatteryEnabled) return\n\n        mBatteryDrawable.customizeBatteryDrawable(\n            mBatteryLayoutReverse,\n            mScaledPerimeterAlpha,\n            mScaledFillAlpha,\n            mCustomBlendColor,\n            mRainbowFillColor,\n            mCustomFillColor,\n            mCustomFillGradColor,\n            mCustomChargingColor,", "choices": [{"text": "\n            mRainbowChargingColor,\n            mCustomChargingColor,\n            mRainbowChargingColor,\n            mCustomPerimeterColor,\n            mRainbowPerimeterColor,\n            mCustomFillColor,\n            mRainbowFillColor,\n            mCustomFillGradColor,\n            mCustomChargingColor,\n            mRainbowChargingColor,\n            mCustomPerimeterColor,\n            mRainbowPerimeterColor,\n            mCustomFillGradColor,\n            mCustomChargingColor,"}], "metadata": {"task_id": "Iconify/503", "ground_truth": "            mCustomPowerSaveColor,\n            mCustomPowerSaveFillColor,\n            mChargingIconSwitch\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BatteryStyleManager.kt"}}
{"prompt": "import android.graphics.Paint\nimport android.graphics.Color\nvar mChargingColor\nvar mPowerSaveColor\nvar mFGColor\noverride fun setColors(fgColor: Int, bgColor: Int, singleToneColor: Int) {\n        mFGColor = fgColor\n        mBoltPaint.setColor(mFGColor)", "choices": [{"text": "\n        mBoltPaint.setColor(bgColor)\n        mChargingPaint.setColor(fgColor)\n        mPowerSavePaint.setColor(fgColor)\n        mChargingPaint.setColor(singleToneColor)\n        mPowerSavePaint.setColor(bgColor)\n        mChargingPaint.setColor(singleToneColor)\n        mPowerSavePaint.setColor(bgColor)\n        mChargingPaint.setColor(singleToneColor)\n        mPowerSavePaint.setColor(bgColor)\n        mCharging"}], "metadata": {"task_id": "Iconify/513", "ground_truth": "        mFramePaint.setColor(bgColor)\n        mTextPaint.setColor(mFGColor)\n        initColors()\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            }\n            i += 2\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {"}], "metadata": {"task_id": "Iconify/521", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/525", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/532", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/536", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/544", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/548", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/554", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/558", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/564", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/568", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/574", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "val fillColorStrokeProtection\nvar fillColor Int\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.top = top\n        padding.right = right\n        padding.bottom = bottom\n    }\n fun setFillColor(fillColor: Int) {\n        fillColor = fillColor\n    }\n fun setInvertFillIcon(invertFillIcon: Boolean) {\n        invertFillIcon = invertFillIcon\n    }\n fun setFillColorStrokeProtection(fillColorStrokeProtection: Boolean) {\n        fillColorStrokeProtection = fillColorStrokeProtection\n    }\n fun setInvertFillIcon(invertFillIcon: Boolean) {\n        invertFillIcon = invertFill"}], "metadata": {"task_id": "Iconify/578", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/585", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n}\n"}], "metadata": {"task_id": "Iconify/589", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/595", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n}\n"}], "metadata": {"task_id": "Iconify/599", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/605", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/609", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/615", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n}\n"}], "metadata": {"task_id": "Iconify/619", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/625", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/629", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/635", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n}\n"}], "metadata": {"task_id": "Iconify/639", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/645", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/649", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/656", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/660", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "import android.graphics.Paint\nimport android.graphics.Color\noverride fun setColors(fgColor: Int, bgColor: Int, singleToneColor: Int) {\n        fillColor = fgColor\n\n        fillPaint.color = fillColor\n        fillColorStrokePaint.color = fillColor\n\n        backgroundColor = bgColor\n        dualToneBackgroundFill.color = bgColor\n\n        // Also update the level color, since fillColor may have changed\n        levelColor = batteryColorForLevel(batteryLevel)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/661", "ground_truth": "        boltColor = singleToneColor\n        boltPaint.color = boltColor\n\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/667", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n}\n"}], "metadata": {"task_id": "Iconify/671", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/678", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/682", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/689", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n}\n"}], "metadata": {"task_id": "Iconify/693", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/701", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n}\n"}], "metadata": {"task_id": "Iconify/705", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/712", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/716", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/723", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "val fillMask\nval scaledFill\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.top = top\n        padding.right = right\n        padding.bottom = bottom\n    }\n fun setInvertFillIcon(invertFillIcon: Boolean) {\n        invertFillIcon = invertFillIcon\n    }\n fun setFillMask(fillMask: Boolean) {\n        fillMask = fillMask\n    }\n fun setScaledFill(scaledFill: Boolean) {\n        scaledFill = scaledFill\n    }\n fun setInvertFillIcon(invertFillIcon: Boolean) {\n        invertFillIcon = invertFillIcon\n    }\n fun setFill"}], "metadata": {"task_id": "Iconify/727", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/733", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/737", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/743", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "val fillMask\nvar invertFillIcon\nval perimeterPath\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.top = top\n        padding.right = right\n        padding.bottom = bottom\n    }\n fun setFillMask(fill: Int) {\n        fillMask = fill\n    }\n fun setInvertFillIcon(invert: Boolean) {\n        invertFillIcon = invert\n    }\n fun setPerimeterPath(perimeterPath: Int) {\n        perimeterPath = perimeterPath\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(left, top, right, bottom"}], "metadata": {"task_id": "Iconify/747", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/754", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "var invertFillIcon\nval errorPerimeterPath\nval scaledErrorPerimeter", "choices": [{"text": "\nval invertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval inverted"}], "metadata": {"task_id": "Iconify/757", "ground_truth": "override fun onBoundsChange(bounds: Rect) {\n        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/758", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/765", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "var invertFillIcon\nval errorPerimeterPath\nval scaledErrorPerimeter", "choices": [{"text": "\nval invertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval invertedInvertFillPath\nval inverted"}], "metadata": {"task_id": "Iconify/768", "ground_truth": "override fun onBoundsChange(bounds: Rect) {\n        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/769", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/776", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/780", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/787", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/791", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/798", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/802", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/809", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/813", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/820", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/824", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/831", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/835", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/842", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "val fillColorStrokeProtection\nvar fillColor Int\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.top = top\n        padding.right = right\n        padding.bottom = bottom\n    }\n fun setFillColor(fillColor: Int) {\n        fillColor = fillColor\n    }\n fun setInvertFillIcon(invertFillIcon: Boolean) {\n        invertFillIcon = invertFillIcon\n    }\n fun setFillColorStrokeProtection(fillColorStrokeProtection: Boolean) {\n        fillColorStrokeProtection = fillColorStrokeProtection\n    }\n fun setInvertFillIcon(invertFillIcon: Boolean) {\n        invertFillIcon = invertFill"}], "metadata": {"task_id": "Iconify/846", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/853", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/857", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return color\n    }\n    private fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor"}], "metadata": {"task_id": "Iconify/864", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }\n\nval fillRect(x: Int, y: Int, w: Int, h: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int)\nval fillRect(x: Int, y: Int, w: Int, h: Int, r: Int, g: Int, b: Int)\nval"}], "metadata": {"task_id": "Iconify/868", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "import com.drdisagree.iconify.config.XPrefs.Xprefs\nimport com.drdisagree.iconify.common.Preferences.DEPTH_WALLPAPER_SWITCH\nimport com.drdisagree.iconify.common.Preferences.DEPTH_WALLPAPER_FADE_ANIMATION\noverride fun updatePrefs(vararg key: String) {\n        if (Xprefs == null) return\n\n        showDepthWallpaper = Xprefs!!.getBoolean(DEPTH_WALLPAPER_SWITCH, false)\n        showFadingAnimation = Xprefs!!.getBoolean(DEPTH_WALLPAPER_FADE_ANIMATION, false)\n\n        if (key.isNotEmpty() &&\n            (key[0] == DEPTH_WALLPAPER_SWITCH ||", "choices": [{"text": " key[0] == DEPTH_WALLPAPER_FADE_ANIMATION)) {\n            showDepthWallpaper = Xprefs!!.getBoolean(key, false)\n            showFadingAnimation = Xprefs!!.getBoolean(key, false)\n        }\n    }\n}\n"}], "metadata": {"task_id": "Iconify/871", "ground_truth": "                    key[0] == DEPTH_WALLPAPER_CHANGED)\n        ) {\n            updateWallpaper()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\DepthWallpaper.kt"}}
{"prompt": "import de.robv.android.xposed.XposedBridge.log\nimport android.widget.RelativeLayout\nimport android.widget.LinearLayout\nimport android.widget.ImageView\nimport android.view.View\nimport android.view.Gravity\nprivate fun ImageView.addCenterProperty() {\n        val layoutParams = layoutParams\n\n        when (layoutParams) {\n            is RelativeLayout.LayoutParams -> {\n                layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT)\n            }\n\n            is LinearLayout.LayoutParams -> {\n                layoutParams.gravity = Gravity.CENTER\n            }\n\n            else -> {\n                log(TAG + \"Invalid layoutParams: $layoutParams\")", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/875", "ground_truth": "            }\n        }\n\n        setLayoutParams(layoutParams)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\HeaderImage.kt"}}
{"prompt": "import com.drdisagree.iconify.xposed.utils.SystemUtil\nimport android.graphics.Color\nprivate fun initColors(force: Boolean) {\n        val isDark: Boolean = SystemUtil.isDarkMode\n        if (isDark == this.isDark && !force) return", "choices": [{"text": ";\n        val isLight: Boolean = SystemUtil.isLightMode\n        if (isLight == this.isLight && force) return;\n        val isDarkDark: Boolean = SystemUtil.isDarkDarkMode\n        if (isDarkDark == this.isDarkDark && force) return;\n        val isDarkLight: Boolean = SystemUtil.isDarkLightMode\n        if (isDarkLight == this.isDarkLight && force) return;\n        val isLightLight: Boolean = SystemUtil.isLightLightMode\n"}], "metadata": {"task_id": "Iconify/881", "ground_truth": "\n        this.isDark = isDark\n\n        calculateColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA13.kt"}}
{"prompt": "import com.drdisagree.iconify.xposed.utils.SystemUtil\nimport android.graphics.Color\nprivate fun initColors(force: Boolean) {\n        val isDark: Boolean = SystemUtil.isDarkMode\n        if (isDark == this.isDark && !force) return", "choices": [{"text": ";\n        val isLight: Boolean = SystemUtil.isLightMode\n        if (isLight == this.isLight && force) return;\n        val isDarkDark: Boolean = SystemUtil.isDarkDarkMode\n        if (isDarkDark == this.isDarkDark && force) return;\n        val isDarkLight: Boolean = SystemUtil.isDarkLightMode\n        if (isDarkLight == this.isDarkLight && force) return;\n        val isLightLight: Boolean = SystemUtil.isLightLightMode\n"}], "metadata": {"task_id": "Iconify/883", "ground_truth": "\n        this.isDark = isDark\n\n        calculateColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA14.kt"}}
{"prompt": "import de.robv.android.xposed.XposedHelpers.callMethod\nimport android.view.View\nimport android.graphics.Color\nprivate fun setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n        callMethod(\n            modernStatusBarViewBinding,", "choices": [{"text": "\n            modernStatusBarViewBinding,\n            \"setMobileIconTint\",\n            textColor\n        );\n    }\nexport function setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n    setMobileIconTint(modernStatusBarViewBinding, textColor);\n}\nexport function setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n    setMobileIconTint(modernStatusBarViewBinding, textColor);\n}\nexport function setMobileIconTint(modernStatus"}], "metadata": {"task_id": "Iconify/884", "ground_truth": "            \"onIconTintChanged\",\n            textColor,\n            textColor\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA14.kt"}}
{"prompt": "import de.robv.android.xposed.XposedHelpers.callMethod\nimport android.view.View\nimport android.graphics.Color\nprivate fun setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n        callMethod(\n            modernStatusBarViewBinding,", "choices": [{"text": "\n            modernStatusBarViewBinding,\n            \"setMobileIconTint\",\n            textColor\n        );\n    }\nexport function setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n    setMobileIconTint(modernStatusBarViewBinding, textColor);\n}\nexport function setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n    setMobileIconTint(modernStatusBarViewBinding, textColor);\n}\nexport function setMobileIconTint(modernStatus"}], "metadata": {"task_id": "Iconify/897", "ground_truth": "            \"onIconTintChanged\",\n            textColor,\n            textColor\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSLightThemeA14.kt"}}
{"prompt": "import android.view.Display\nimport android.content.Context\nfun isScreenOn(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_ON) {", "choices": [{"text": "\n                return true\n            }\n        }\n        return false\n    }\nfun getDisplayState(context: Context): Array<Display> {\n        val displays = context.getResources().getDisplays()\n        for (display in displays) {\n            if (display.state == Display.STATE_ON) {\n                return [display]\n            }\n        }\n        return []\n    }\n"}], "metadata": {"task_id": "Iconify/899", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "import android.view.Display\nimport android.content.Context\nfun isScreenOff(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_OFF) {", "choices": [{"text": "\n                return true\n            }\n        }\n        return false\n    }\nfun getDisplayState(context: Context): Array<Display> {\n        val displays = context.getResources().getDisplays()\n        for (display in displays) {\n            if (display.state == Display.STATE_ON) {\n                return [display]\n            }\n        }\n        return []\n    }\n"}], "metadata": {"task_id": "Iconify/900", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "import android.view.Display\nimport android.content.Context\nfun isScreenDozing(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_DOZE ||\n                display.state == Display.STATE_DOZE_SUSPEND\n            ) {", "choices": [{"text": "\n                return true\n            }\n        }\n        return false\n}\nfun getDisplayState(context: Context): Array<Display> {\n        val displays = context.getResources().getDisplays()\n        for (display in displays) {\n            if (display.state == Display.STATE_DOZE ||\n                display.state == Display.STATE_DOZE_SUSPEND\n            ) {\n                return [display]\n            }\n        }\n        return []\n}\n"}], "metadata": {"task_id": "Iconify/901", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "import de.robv.android.xposed.XposedHelpers\nfun dumpClass(className: String, classLoader: ClassLoader?) {\n        val ourClass = XposedHelpers.findClassIfExists(className, classLoader)\n        if (ourClass == null) {", "choices": [{"text": "\n            ourClass = XposedHelpers.findClass(className, classLoader)\n        }\n        if (ourClass == null) {\n            ourClass = XposedHelpers.findClass(className, classLoader);\n        }\n        if (ourClass == null) {\n            ourClass = XposedHelpers.findClass(className, classLoader);\n        }\n        if (ourClass == null) {\n            ourClass = XposedHelpers.findClass(className, classLoader);\n        }\n        if (ourClass == null) {\n            ourClass = XposedHelpers.findClass("}], "metadata": {"task_id": "Iconify/908", "ground_truth": "            log(\"Class: $className not found\")\n            return\n        }\n        dumpClass(ourClass)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "import de.robv.android.xposed.XC_MethodHook\nfun tryHookAllMethods(clazz: Class<*>?, method: String?, hook: XC_MethodHook?) {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Iconify/909", "ground_truth": "        try {\n            hookAllMethods(clazz, method, hook)\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "import de.robv.android.xposed.XC_MethodHook\nfun tryHookAllConstructors(clazz: Class<*>?, hook: XC_MethodHook?) {", "choices": [{"text": "(clazz: Class<*>?, hook: XC_MethodHook?) {\n    if (hook) {\n        try {\n            hook(clazz)\n        } catch (e) {\n            e.printStackTrace()\n        }\n    }\n}\nfun tryHookAllMethods(clazz: Class<*>?, hook: XC_MethodHook?) {\n    if (hook) {\n        try {\n            hook(clazz)\n        } catch (e) {\n            e.printStackTrace()\n        }\n    }\n}\n"}], "metadata": {"task_id": "Iconify/910", "ground_truth": "        try {\n            hookAllConstructors(clazz, hook)\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "private fun repeatString(str: String, times: Int): String {\n        val result = StringBuilder()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Iconify/913", "ground_truth": "        for (i in 0 until times) {\n            result.append(str)\n        }\n        return result.toString()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport de.robv.android.xposed.XposedHelpers\noverride fun handleLoadPackage(loadPackageParam: LoadPackageParam) {\n        try {\n            UtilsClass = XposedHelpers.findClass(\n                \"com.android.settingslib.Utils\",", "choices": [{"text": "\n                \"com.android.settingslib.Utils\"\n            )\n        } catch (e) {\n            UtilsClass = XposedHelpers.findClass(\n                \"com.android.settingslib.Utils\",\n                \"com.android.settingslib.Utils\"\n            )\n        }\n\n        try {\n            UtilsClass.loadPackage(loadPackageParam.packageName)\n        } catch (e) {\n            UtilsClass = XposedHelpers.findClass(\n                \"com.android.settingslib.Utils\",\n                \"com.android.settingslib.Utils"}], "metadata": {"task_id": "Iconify/920", "ground_truth": "                loadPackageParam.classLoader\n            )\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\SettingsLibUtils.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.content.Context\nfun setPaddings(\n        viewGroup: ViewGroup,\n        context: Context,\n        left: Int,\n        top: Int,\n        right: Int,\n        bottom: Int\n    ) {\n        viewGroup.setPadding(\n            context.toPx(left),", "choices": [{"text": "\n            context.toPx(top),\n            context.toPx(right),\n            context.toPx(bottom)\n        )\n    }\nfun setPadding(\n        viewGroup: ViewGroup,\n        context: Context,\n        left: Int,\n        top: Int,\n        right: Int,\n        bottom: Int\n    ) {\n        viewGroup.setPadding(\n            context.toPx(left),\n            context.toPx(top),\n            context.toPx(right),\n            context.toPx(bottom)\n        )\n    }"}], "metadata": {"task_id": "Iconify/921", "ground_truth": "            context.toPx(top),\n            context.toPx(right),\n            context.toPx(bottom)\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nfun findViewWithTagAndChangeColor(view: View?, tagContains: String, color: Int) {\n        if (view == null) return\n\n        if (view is ViewGroup) {\n            for (i in 0 until view.childCount) {\n                val child: View = view.getChildAt(i)\n                checkTagAndChangeColor(child, tagContains, color)\n\n                if (child is ViewGroup) {\n                    findViewWithTagAndChangeColor(child, tagContains, color)\n                }", "choices": [{"text": "}\n            }\n        } else {\n            for (i in 0 until view.childCount) {\n                val child: View = view.getChildAt(i)\n                checkTagAndChangeColor(child, tagContains, color)\n\n                if (child is ViewGroup) {\n                    findViewWithTagAndChangeColor(child, tagContains, color)\n                }\n            }\n        }\n    }\n\nfun checkTagAndChangeColor(view: View?, tagContains: String, color: Int) {\n        if (view == null) return\n\n        if"}], "metadata": {"task_id": "Iconify/923", "ground_truth": "            }\n        } else {\n            checkTagAndChangeColor(view, tagContains, color)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "import java.util.Locale\nimport android.view.View\nprivate fun checkTagAndChangeColor(view: View, tagContains: String, color: Int) {\n        val tagObject = view.tag\n        if (tagObject != null && tagObject.toString().lowercase(Locale.getDefault())", "choices": [{"text": "!= null && tagObject.toString().lowercase(Locale.getDefault()).contains(tagContains.toLowerCase(Locale.getDefault()))) {\n                view.setBackgroundColor(color);\n        } else {\n                view.setBackgroundColor(color);\n        }\n}\n"}], "metadata": {"task_id": "Iconify/924", "ground_truth": "                .contains(tagContains)\n        ) {\n            changeViewColor(view, color)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "import java.util.Calendar\nimport com.drdisagree.iconify.config.XPrefs.Xprefs\nimport android.annotation.SuppressLint\n @SuppressLint(\"ApplySharedPref\")\n    fun resetCounter(packageName: String) {\n        if (Xprefs == null) return\n\n        try {\n            val loadTimeKey = \"$LOAD_TIME_KEY_KEY$packageName\"\n            val strikeKey = \"$PACKAGE_STRIKE_KEY_KEY$packageName\"\n            val currentTime = Calendar.getInstance().time.time\n\n            Xprefs!!.edit()\n                .putLong(loadTimeKey, currentTime)", "choices": [{"text": "\n               .putLong(strikeKey, currentTime)\n               .commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    fun resetCounter(packageName: String) {\n        if (Xprefs == null) return\n\n        try {\n            val loadTimeKey = \"$LOAD_TIME_KEY_KEY$packageName\"\n            val strikeKey = \"$PACKAGE_STRIKE_KEY_KEY$packageName\"\n            val currentTime = Calendar.getInstance().time.time\n\n            Xprefs!!."}], "metadata": {"task_id": "Iconify/927", "ground_truth": "                .putInt(strikeKey, 0)\n                .commit()\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\utils\\BootLoopProtector.kt"}}
{"prompt": "import androidx.annotation.Nullable\nimport android.view.View\n@Nullable\r\nprivate View getChildView() {\r\n    for (int i = 0; i < getChildCount(); ++i) {\r\n        View child = getChildAt(i);\r\n        if (!child.equals(mCircleView)) {", "choices": [{"text": "\r\n            return child;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n@Nullable\r\nprivate View getChildView2() {\r\n    for (int i = 0; i < getChildCount(); ++i) {\r\n        View child = getChildAt(i);\r\n        if (!child.equals(mCircleView2)) {\r\n            return child;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n@Nullable\r\nprivate View getChildView3() {\r\n    for (int i = 0; i <"}], "metadata": {"task_id": "MaterialFiles/2", "ground_truth": "            return child;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\androidx\\swiperefreshlayout\\widget\\ThemedSwipeRefreshLayout.java"}}
{"prompt": "import androidx.appcompat.app.AppCompatDelegate\noverride fun getDelegate(): AppCompatDelegate {\r\n        val delegate = super.getDelegate()\r\n\r\n        if (!isDelegateCreated) {", "choices": [{"text": "\r\n            isDelegateCreated = true\r\n\r\n            delegate.registerActivityLifecycleCallbacks(this)\r\n        }\r\n\r\n        return delegate\r\n    }\r\n\r\n    @Override\r\n    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\r\n        super.onActivityCreated(activity, savedInstanceState)\r\n\r\n        if (!isDelegateCreated) {\r\n            isDelegateCreated = true\r\n\r\n            getDelegate().registerActivityLifecycleCallbacks(this)\r\n        }\r\n    }\r\n\r\n    @Override\r\n   "}], "metadata": {"task_id": "MaterialFiles/9", "ground_truth": "            isDelegateCreated = true\r\n            NightModeHelper.apply(this)\r\n        }\r\n        return delegate\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\app\\AppActivity.kt"}}
{"prompt": "override fun onSupportNavigateUp(): Boolean {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "MaterialFiles/11", "ground_truth": "        if (!super.onSupportNavigateUp()) {\r\n            finish()\r\n        }\r\n        return true\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\app\\AppActivity.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nimport android.content.SharedPreferences\nfun migrateCreateArchiveTypeSetting1_1_0() {\r\n    val key = application.getString(R.string.pref_key_create_archive_type)\r\n    val oldValue = defaultSharedPreferences.getString(key, null) ?: return\r\n    val newValue = oldValue.replace(Regex(\"type_.+$\")) {\r\n        when (it.value) {\r\n            \"type_zip\" -> \"zipRadio\"\r\n            \"type_tar_xz\" -> \"tarXzRadio\"\r\n            \"type_seven_z\" -> \"sevenZRadio\"", "choices": [{"text": "\r\n        } else {\r\n            \"type_zip\" -> \"zipRadio\"\r\n            \"type_tar_xz\" -> \"tarXzRadio\"\r\n            \"type_seven_z\" -> \"sevenZRadio\"\r\n        }\r\n    }\r\n    defaultSharedPreferences.edit().putString(key, newValue).commit()\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/20", "ground_truth": "            else -> \"zipRadio\"\r\n        }\r\n    }\r\n    defaultSharedPreferences.edit { putString(key, newValue) }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\app\\AppUpgraders.kt"}}
{"prompt": "import coil.size.pxOrElse\nimport coil.size.Scale\nimport coil.size.Dimension\nfun Dimension.toPx(scale: Scale) =\r\n    pxOrElse {", "choices": [{"text": "\r\n    def toPx(scale: Scale):\r\n        return scale.toPx()\r\n\r\n    def toPx(scale: Scale):\r\n        return scale.toPx()\r\n\r\n    def toPx(scale: Scale):\r\n        return scale.toPx()\r\n\r\n    def toPx(scale: Scale):\r\n        return scale.toPx()\r\n\r\n    def toPx(scale: Scale):\r\n        return scale.toPx()\r\n\r\n    def toPx(scale: Scale):\r\n        return scale.to"}], "metadata": {"task_id": "MaterialFiles/27", "ground_truth": "        when (scale) {\r\n            Scale.FILL -> Int.MIN_VALUE\r\n            Scale.FIT -> Int.MAX_VALUE\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\coil\\CoilUtils.kt"}}
{"prompt": "import android.widget.AbsListView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val swatchView = convertView as ColorSwatchView?\r\n            ?: ColorSwatchView(parent.context).apply {\r\n                layoutParams = AbsListView.LayoutParams(\r\n                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT\r\n                )", "choices": [{"text": "\r\n                swatchView.setLayoutParams(layoutParams)\r\n                return swatchView\r\n            }\r\n        return swatchView\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/32", "ground_truth": "            }\r\n        return swatchView.apply {\r\n            setColor(getItem(position))\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\colorpicker\\ColorPaletteAdapter.kt"}}
{"prompt": "import androidx.appcompat.app.AlertDialog\nimport android.app.Dialog\noverride fun onPrepareDialogBuilder(builder: AlertDialog.Builder) {\r\n        super.onPrepareDialogBuilder(builder)", "choices": [{"text": "\r\n        builder.setCancelable(true)\r\n        builder.setMessage(\"Are you sure?\")\r\n        builder.setPositiveButton(\"Yes\", (dialog, which) => dialog.dismiss())\r\n        builder.setNegativeButton(\"No\", (dialog, which) => dialog.dismiss())\r\n        return builder\r\n    }\r\n\r\n    onCancel(dialog: Dialog) {\r\n        super.onCancel(dialog)\r\n    }\r\n\r\n    onPositive(dialog: Dialog) {\r\n        super.onPositive(dialog)\r"}], "metadata": {"task_id": "MaterialFiles/36", "ground_truth": "\r\n        if (defaultColor in colors) {\r\n            builder.setNeutralButton(R.string.default_, null)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\colorpicker\\ColorPreferenceDialogFragment.kt"}}
{"prompt": "import androidx.annotation.ColorInt\nval gradientDrawable GradientDrawable\nfun setColor(@ColorInt color: Int) {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/40", "ground_truth": "        gradientDrawable.apply {\r\n            mutate()\r\n            setColor(color)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\colorpicker\\ColorSwatchView.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport androidx.appcompat.widget.TintTypedArray\nimport android.annotation.SuppressLint\n\r\n@OptIn(ExperimentalContracts::class)\r\n@SuppressLint(\"RestrictedApi\")\r\ninline fun <R> TintTypedArray.use(block: (TintTypedArray) -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {", "choices": [{"text": " {\r\n        return block()\r\n    } catch (Exception e) {\r\n        return e\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalContracts.class)\r\n@SuppressLint(\"RestrictedApi\")\r\ninline fun <R> TintTypedArray.use(block: (TintTypedArray) -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {\r\n        return block()\r\n    } catch (Exception e)"}], "metadata": {"task_id": "MaterialFiles/42", "ground_truth": "        block(this)\r\n    } finally {\r\n        recycle()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\ContextCompat.kt"}}
{"prompt": "import android.content.Intent\nfun Intent.removeFlagsCompat(flags: Int) {\r\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {", "choices": [{"text": "\r\n        Intent.removeFlagsCompat(flags)\r\n    }\r\n}\r\n\r\nIntent.addFlagsCompat(flags: Int) {\r\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r\n        Intent.addFlagsCompat(flags)\r\n    }\r\n}\r\n\r\nIntent.addFlags(flags: Int) {\r\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r\n       "}], "metadata": {"task_id": "MaterialFiles/48", "ground_truth": "        removeFlags(flags)\r\n    } else {\r\n        setFlags(this.flags andInv flags)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\IntentCompat.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport android.os.Build\nimport android.media.MediaMetadataRetriever\n\r\n@OptIn(ExperimentalContracts::class)\r\ninline fun <R> MediaMetadataRetriever.use(block: (MediaMetadataRetriever) -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    val autoCloseable: AutoCloseable = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        this", "choices": [{"text": ".use(block)\r\n    } else {\r\n        block()\r\n    }\r\n    return autoCloseable\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/54", "ground_truth": "    } else {\r\n        AutoCloseable { release() }\r\n    }\r\n    return autoCloseable.use { block(this) }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\MediaMetadataRetrieverCompat.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport android.os.Build\nimport android.graphics.drawable.RotateDrawable\nfun KClass<RotateDrawable>.createCompat(): RotateDrawable =\r\n    RotateDrawable().apply {\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {\r\n            isPivotXRelativeCompat = true", "choices": [{"text": "\r\n        } else {\r\n            isPivotXRelativeCompat = false\r\n        }\r\n        return self\r\n    }\r\nfun KClass<RotateDrawable>.isPivotXRelativeCompat(): bool =\r\n    KClass<RotateDrawable>.createCompat().isPivotXRelativeCompat\r\nfun KClass<RotateDrawable>.isPivotYRelativeCompat(): bool =\r\n    KClass<RotateDrawable>.createCompat().isPivotYRelativeCompat\r\nfun KClass<RotateDrawable>.isPivotZRelativeCompat(): bool =\r\n    KClass<RotateDrawable>.createCompat().isPivot"}], "metadata": {"task_id": "MaterialFiles/55", "ground_truth": "            pivotXCompat = 0.5f\r\n            isPivotYRelativeCompat = true\r\n            pivotYCompat = 0.5f\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\RotateDrawableCompat.kt"}}
{"prompt": "import kotlin.coroutines.suspendCoroutine\nimport kotlin.coroutines.resumeWithException\nimport kotlin.coroutines.resume\nimport android.os.Handler\nprivate suspend fun ProxyFileDescriptorCallbackCompat.awaitOnRead(\r\n    offset: Long,\r\n    size: Int,\r\n    data: ByteArray,\r\n    handler: Handler\r\n): Int =\r\n    suspendCoroutine { continuation ->\r\n        handler.post {\r\n            val readSize = try {\r\n                onRead(offset, size, data)\r\n            } catch (t: Throwable) {\r\n                continuation.resumeWithException(t)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/60", "ground_truth": "                return@post\r\n            }\r\n            continuation.resume(readSize)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\StorageManagerCompat.kt"}}
{"prompt": "import kotlin.coroutines.suspendCoroutine\nimport kotlin.coroutines.resumeWithException\nimport kotlin.coroutines.resume\nimport android.os.Handler\nprivate suspend fun ProxyFileDescriptorCallbackCompat.awaitOnRelease(handler: Handler) {\r\n    suspendCoroutine<Unit> { continuation ->\r\n        handler.post {\r\n            try {\r\n                onRelease()\r\n            } catch (t: Throwable) {\r\n                continuation.resumeWithException(t)\r\n                return@post", "choices": [{"text": "\r\n            }\r\n            continuation.resume()\r\n        }\r\n    }\r\n}\r\nprivate resume fun ProxyFileDescriptorCallbackCompat.onRelease(handler: Handler) {\r\n    suspendCoroutine<Unit> { continuation ->\r\n        handler.post {\r\n            try {\r\n                onRelease()\r\n            } catch (t: Throwable) {\r\n                continuation.resumeWithException(t)\r\n                return@post\r\n            }\r\n            continuation.resume()\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/61", "ground_truth": "            }\r\n            continuation.resume(Unit)\r\n        }\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\StorageManagerCompat.kt"}}
{"prompt": "override fun onDestroy() {\r\n        super.onDestroy()", "choices": [{"text": "}\r\n\r\nfunction onLoad() {\r\n\r\n}\r\n\r\nfunction onPause() {\r\n\r\n}\r\n\r\nfunction onResume() {\r\n\r\n}\r\n\r\nfunction onStop() {\r\n\r\n}\r\n\r\nfunction onPlay() {\r\n\r\n}\r\n\r\nfunction onPauseAll() {\r\n\r\n}\r\n\r\nfunction onResumeAll() {\r\n\r\n}\r\n\r\nfunction onStopAll() {\r\n\r\n}\r\n\r\nfunction onPlayAll() {\r\n"}], "metadata": {"task_id": "MaterialFiles/80", "ground_truth": "\r\n        if (isFinishing) {\r\n            fragment.onFinish()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileaction\\ArchivePasswordDialogActivity.kt"}}
{"prompt": "override fun onDestroy() {\r\n        super.onDestroy()", "choices": [{"text": "}\r\n\r\nfunction onLoad() {\r\n\r\n}\r\n\r\nfunction onPause() {\r\n\r\n}\r\n\r\nfunction onResume() {\r\n\r\n}\r\n\r\nfunction onStop() {\r\n\r\n}\r\n\r\nfunction onPlay() {\r\n\r\n}\r\n\r\nfunction onPauseAll() {\r\n\r\n}\r\n\r\nfunction onResumeAll() {\r\n\r\n}\r\n\r\nfunction onStopAll() {\r\n\r\n}\r\n\r\nfunction onPlayAll() {\r\n"}], "metadata": {"task_id": "MaterialFiles/82", "ground_truth": "\r\n        if (isFinishing) {\r\n            fragment.onFinish()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobConflictDialogActivity.kt"}}
{"prompt": "override fun onDestroy() {\r\n        super.onDestroy()", "choices": [{"text": "}\r\n\r\nfunction onLoad() {\r\n\r\n}\r\n\r\nfunction onPause() {\r\n\r\n}\r\n\r\nfunction onResume() {\r\n\r\n}\r\n\r\nfunction onStop() {\r\n\r\n}\r\n\r\nfunction onPlay() {\r\n\r\n}\r\n\r\nfunction onPauseAll() {\r\n\r\n}\r\n\r\nfunction onResumeAll() {\r\n\r\n}\r\n\r\nfunction onStopAll() {\r\n\r\n}\r\n\r\nfunction onPlayAll() {\r\n"}], "metadata": {"task_id": "MaterialFiles/83", "ground_truth": "\r\n        if (isFinishing) {\r\n            fragment.onFinish()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobErrorDialogActivity.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.util.ActionState\nimport me.zhanghai.android.files.provider.common.PosixFileStore\nimport kotlinx.coroutines.runInterruptible\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nfun remount(fileStore: PosixFileStore) {\r\n        viewModelScope.launch {\r\n            check(_remountState.value.isReady)\r\n            _remountState.value = ActionState.Running(fileStore)\r\n            _remountState.value = try {\r\n                runInterruptible(Dispatchers.IO) {\r\n                    fileStore.isReadOnly = false\r\n                }\r\n                ActionState.Success(fileStore, Unit)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/84", "ground_truth": "            } catch (e: Exception) {\r\n                ActionState.Error(fileStore, e)\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobErrorViewModel.kt"}}
{"prompt": "import java.io.File\nimport me.zhanghai.android.files.util.asFileName\nimport me.zhanghai.android.files.provider.common.getPath\nimport me.zhanghai.android.files.provider.common.asByteStringListPath\nimport me.zhanghai.android.files.provider.common.ByteString\nimport me.zhanghai.android.files.provider.archive.isArchivePath\nimport me.zhanghai.android.files.provider.archive.createArchiveRootPath\nimport me.zhanghai.android.files.provider.archive.archiveFile\nimport me.zhanghai.android.files.R\nimport java8.nio.file.Path\nprivate fun FileJob.getTargetFileName(source: Path): Path {\r\n    if (source.isArchivePath) {\r\n        val archiveFile = source.archiveFile.asByteStringListPath()\r\n        val archiveRoot = archiveFile.createArchiveRootPath()\r\n        if (source == archiveRoot) {\r\n            return archiveFile.fileSystem.getPath(\r\n                archiveFile.fileNameByteString!!.asFileName().baseName", "choices": [{"text": "()\r\n            )\r\n        } else {\r\n            return archiveRoot.fileSystem.getPath(\r\n                archiveRoot.fileNameByteString!!.asFileName().baseName()\r\n            )\r\n        }\r\n    } else {\r\n        return source.fileSystem.getPath(\r\n            source.fileNameByteString!!.asFileName().baseName()\r\n        )\r\n    }\r\n}\r\nprivate fun FileJob.getTargetPath(source: Path): Path {\r\n    if (source.isArchivePath) {\r\n        val archive"}], "metadata": {"task_id": "MaterialFiles/89", "ground_truth": "            )\r\n        }\r\n    }\r\n    return source.fileName\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.InterruptedIOException\nimport java.io.IOException\n\r\n@Throws(InterruptedIOException::class)", "choices": [{"text": "throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@"}], "metadata": {"task_id": "MaterialFiles/90", "ground_truth": "private fun FileJob.throwIfInterrupted() {\r\n    if (Thread.interrupted()) {\r\n        throw InterruptedIOException()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport me.zhanghai.android.files.provider.common.readAttributes\nimport me.zhanghai.android.files.R\nimport java8.nio.file.attribute.BasicFileAttributes\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\nimport androidx.annotation.PluralsRes\n\r\n@Throws(IOException::class)\r\nprivate fun FileJob.scan(\r\n    source: Path,\r\n    recursive: Boolean,\r\n    @PluralsRes notificationTitleRes: Int\r\n): ScanInfo {\r\n    if (recursive) {\r\n        return scan(source, notificationTitleRes)\r\n    }\r\n    val scanInfo = ScanInfo()\r\n    val attributes = source.readAttributes(\r\n        BasicFileAttributes::class.java, LinkOption.NOFOLLOW_LINKS", "choices": [{"text": ", notificationTitleRes)\r\n    if (attributes!= null) {\r\n        scanInfo.attributes = attributes\r\n    }\r\n    return scanInfo\r\n}\r\n\r\n@Throws(IOException::class)\r\nprivate fun FileJob.scan(\r\n    source: Path,\r\n    @PluralsRes notificationTitleRes: Int\r\n): ScanInfo {\r\n    val scanInfo = ScanInfo()\r\n    val attributes = source.readAttributes(\r\n        BasicFileAttributes::class.java, LinkOption.NOFOLLOW_LINKS, notificationTitleRes)\r"}], "metadata": {"task_id": "MaterialFiles/91", "ground_truth": "    )\r\n    scanPath(attributes, scanInfo, notificationTitleRes)\r\n    throwIfInterrupted()\r\n    return scanInfo\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nfun shouldPostNotification(): Boolean {\r\n        val currentTimeMillis = System.currentTimeMillis()\r\n        return if (fileCount % 100 == 0\r\n            || lastNotificationTimeMillis + NOTIFICATION_INTERVAL_MILLIS < currentTimeMillis) {\r\n            lastNotificationTimeMillis = currentTimeMillis", "choices": [{"text": "\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    val NOTIFICATION_INTERVAL_MILLIS = 1000\r\n    val fileCount = 0\r\n    val lastNotificationTimeMillis = 0\r\n\r\n    def postNotification(): void {\r\n        if (!shouldPostNotification()) {\r\n            return\r\n        }\r\n        fileCount += 1\r\n        if (fileCount % 100 == 0) {\r\n            lastNotificationTimeMillis = System.currentTimeMillis()\r\n        }\r\n    }\r\n\r\n    def"}], "metadata": {"task_id": "MaterialFiles/94", "ground_truth": "            true\r\n        } else {\r\n            false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.File\nimport me.zhanghai.android.files.provider.common.readAttributes\nimport java8.nio.file.attribute.BasicFileAttributes\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\nfun addTransferredFile(path: Path) {\r\n        ++transferredFileCount\r\n        try {\r\n            transferredSize += path.readAttributes(\r\n                BasicFileAttributes::class.java, LinkOption.NOFOLLOW_LINKS", "choices": [{"text": ");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        File file = new File(args[0]);\r\n        if (!file.exists()) {\r\n            System.out.println(\"\u6587\u4ef6\u4e0d\u5b58\u5728\uff01\");\r\n            return;\r\n        }\r\n        System.out.println(\"\u6587\u4ef6\u5df2\u5b58\u5728"}], "metadata": {"task_id": "MaterialFiles/95", "ground_truth": "            ).size()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.File\nimport me.zhanghai.android.files.provider.common.readAttributes\nimport java8.nio.file.attribute.BasicFileAttributes\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\nfun skipFile(path: Path) {\r\n        --fileCount\r\n        try {\r\n            size -= path.readAttributes(\r\n                BasicFileAttributes::class.java, LinkOption.NOFOLLOW_LINKS", "choices": [{"text": ");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        File file = new File(args[0]);\r\n        skipFile(file);\r\n        System.out.println(fileCount);\r\n        System.out.println(size);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/96", "ground_truth": "            ).size()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nfun shouldPostNotification(): Boolean {\r\n        val currentTimeMillis = System.currentTimeMillis()\r\n        return if (lastNotificationTimeMillis + NOTIFICATION_INTERVAL_MILLIS < currentTimeMillis) {\r\n            lastNotificationTimeMillis = currentTimeMillis", "choices": [{"text": "\r\n        } else {\r\n            lastNotificationTimeMillis = currentTimeMillis\r\n            return true\r\n        }\r\n}\r\nval NOTIFICATION_INTERVAL_MILLIS = 1000\r\nval lastNotificationTimeMillis = System.currentTimeMillis()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "MaterialFiles/97", "ground_truth": "            true\r\n        } else {\r\n            false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport me.zhanghai.android.files.provider.linux.isLinuxPath\nimport me.zhanghai.android.files.provider.common.getFileStore\nimport me.zhanghai.android.files.provider.common.ReadOnlyFileSystemException\nimport me.zhanghai.android.files.provider.common.PosixFileStore\nimport me.zhanghai.android.files.R\nimport java8.nio.file.Path\nprivate fun FileJob.getReadOnlyFileStore(path: Path, exception: IOException): PosixFileStore? {\r\n    if (exception !is ReadOnlyFileSystemException || !path.isLinuxPath) {\r\n        return null\r\n    }\r\n    val fileStore = try {\r\n        path.getFileStore() as PosixFileStore\r\n    } catch (e: IOException) {", "choices": [{"text": "\r\n        return null\r\n    }\r\n    return fileStore\r\n}\r\nprivate fun FileJob.getWritableFileStore(path: Path, exception: IOException): PosixFileStore? {\r\n    if (exception!is ReadOnlyFileSystemException ||!path.isLinuxPath) {\r\n        return null\r\n    }\r\n    val fileStore = try {\r\n        path.getFileStore() as PosixFileStore\r\n    } catch (e: IOException) {\r\n        return null\r\n    }\r\n    return fileStore\r\n}\r\nprivate fun FileJob."}], "metadata": {"task_id": "MaterialFiles/99", "ground_truth": "        e.printStackTrace()\r\n        return null\r\n    }\r\n    return if (fileStore.isReadOnly) fileStore else null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import me.zhanghai.android.files.file.fileProviderUri\nimport me.zhanghai.android.files.R\nimport android.os.Build\nimport android.net.Uri\noverride fun run() {\r\n        open(\r\n            file, R.string.file_install_apk_from_background_title_format,\r\n            R.string.file_install_apk_from_background_text\r\n        ) { file ->\r\n            val uri = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n                file.fileProviderUri\r\n            } else {\r\n                // PackageInstaller only supports file URI before N.", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/106", "ground_truth": "                Uri.fromFile(file.toFile())\r\n            }\r\n            uri.createInstallPackageIntent()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/107", "ground_truth": "    override fun run() {\r\n        val newPath = path.resolveSibling(newName)\r\n        rename(path, newPath)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import me.zhanghai.android.files.util.WakeWifiLock\nimport me.zhanghai.android.files.util.ForegroundNotificationManager\nimport android.app.Service\noverride fun onCreate() {\r\n        super.onCreate()\r\n\r\n        wakeWifiLock = WakeWifiLock(FileJobService::class.java.simpleName)\r\n        notificationManager = ForegroundNotificationManager(this)\r\n        instance = this", "choices": [{"text": ";\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy()\r\n\r\n        wakeWifiLock.release()\r\n        notificationManager.release()\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart()\r\n\r\n        wakeWifiLock.acquire()\r\n        notificationManager.acquire()\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop()\r"}], "metadata": {"task_id": "MaterialFiles/114", "ground_truth": "\r\n        while (pendingJobs.isNotEmpty()) {\r\n            startJob(pendingJobs.removeFirst())\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobService.kt"}}
{"prompt": "import me.zhanghai.android.files.util.WakeWifiLock\nimport android.app.Service\nprivate fun startJob(job: FileJob) {\r\n        // Synchronize on runningJobs to prevent a job from removing itself before being added.\r\n        synchronized(runningJobs) {\r\n            val future = executorService.submit {\r\n                job.runOn(this)\r\n                synchronized(runningJobs) {\r\n                    runningJobs.remove(job)\r\n                    updateWakeWifiLockLocked()\r\n                }", "choices": [{"text": "\r\n            }\r\n            runningJobs.add(job)\r\n            return () -> {\r\n                runningJobs.remove(job)\r\n                updateWakeWifiLockLocked()\r\n            }\r\n        }\r\n    }\r\n    private void updateWakeWifiLockLocked() {\r\n        WakeWifiLock wakeWifiLock = WakeWifiLock.getInstance();\r\n        wakeWifiLock.lock();\r\n    }\r\n    private void updateWakeWifiLockUnlocked() {\r\n        WakeWifiLock wake"}], "metadata": {"task_id": "MaterialFiles/115", "ground_truth": "            }\r\n            runningJobs[job] = future\r\n            updateWakeWifiLockLocked()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobService.kt"}}
{"prompt": "var future Future<Unit>?\nval observer PathObserver\nvar isChangedWhileInactive\n private fun onChangeObserved() {\r\n        if (hasActiveObservers()) {", "choices": [{"text": "\r\n        if (isChangedWhileInactive) {\r\n                return;\r\n        }\r\n\r\n        isChangedWhileInactive = true;\r\n\r\n        if (hasActiveObservers()) {\r\n                return;\r\n        }\r\n\r\n        isChangedWhileInactive = false;\r\n\r\n        observer.onPathChanged();\r\n}\r\n\r\nvar hasActiveObservers = function() {\r\n        return observer.observers.length > 0;\r\n}\r\n\r\nvar hasObservers = function() {\r\n        return observer.observers.length"}], "metadata": {"task_id": "MaterialFiles/129", "ground_truth": "            loadValue()\r\n        } else {\r\n            isChangedWhileInactive = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListLiveData.kt"}}
{"prompt": "override fun onActive() {", "choices": [{"text": "\n\t\tif(!this.game.data.player) {\n\t\t\tthis.game.data.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5"}], "metadata": {"task_id": "MaterialFiles/130", "ground_truth": "        if (isChangedWhileInactive) {\r\n            loadValue()\r\n            isChangedWhileInactive = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListLiveData.kt"}}
{"prompt": "import java8.nio.file.Path\nvar searchViewQuery String\nval fileListStateful Stateful<List<FileItem>>\nval _fileListLiveData\nfun reload() {\r\n        val path = currentPath", "choices": [{"text": "\r\n        if (_fileListLiveData) {\r\n            _fileListLiveData.reload();\r\n        } else {\r\n            _fileListLiveData = new List<FileItem>();\r\n        }\r\n    }\r\nvar _fileListLiveData List<FileItem>\r\nvar _fileListStateful Stateful<List<FileItem>>\r\nvar _fileListLiveData List<FileItem>\r\nvar _fileListLiveData List<FileItem>\r\nvar _fileListLiveData List<FileItem>\r\nvar _fileListLive"}], "metadata": {"task_id": "MaterialFiles/134", "ground_truth": "        if (path.isArchivePath) {\r\n            path.archiveRefresh()\r\n        }\r\n        _fileListLiveData.reload()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListViewModel.kt"}}
{"prompt": "import me.zhanghai.android.files.util.valueCompat\nimport androidx.lifecycle.LiveData\nfun clearSelectedFiles() {\r\n        val selectedFiles = _selectedFilesLiveData.valueCompat\r\n        if (selectedFiles.isEmpty()) {", "choices": [{"text": "\r\n                _selectedFilesLiveData = null\r\n        } else {\r\n                _selectedFilesLiveData = LiveData.create(selectedFiles)\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "MaterialFiles/136", "ground_truth": "            return\r\n        }\r\n        selectedFiles.clear()\r\n        _selectedFilesLiveData.value = selectedFiles\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListViewModel.kt"}}
{"prompt": "import me.zhanghai.android.files.util.valueCompat\nimport androidx.lifecycle.LiveData\nfun clearPasteState() {\r\n        val pasteState = _pasteStateLiveData.valueCompat\r\n        if (pasteState.files.isEmpty()) {", "choices": [{"text": "\r\n                _pasteStateLiveData = null\r\n        } else {\r\n                _pasteStateLiveData = valueCompat.createPasteState(pasteState.files)\r\n        }\r\n}\r\nval getPasteState() {\r\n        val pasteState = _pasteStateLiveData.valueCompat\r\n        if (pasteState.files.isEmpty()) {\r\n                _pasteStateLiveData = null\r\n        } else {\r\n                _pasteStateLiveData = valueCompat.createPasteState(pasteState.files)\r\n        }\r\n}\r"}], "metadata": {"task_id": "MaterialFiles/138", "ground_truth": "            return\r\n        }\r\n        pasteState.files.clear()\r\n        _pasteStateLiveData.value = pasteState\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListViewModel.kt"}}
{"prompt": "var searchViewQuery String\nval fileListStateful Stateful<List<FileItem>>\nval _selectedFilesLiveData\n override fun close() {\r\n            liveData?.let {", "choices": [{"text": "\r\n            if (searchViewQuery) {\r\n                searchViewQuery.close();\r\n            }\r\n            if (fileListStateful) {\r\n                fileListStateful.close();\r\n            }\r\n            if (_selectedFilesLiveData) {\r\n                _selectedFilesLiveData.close();\r\n            }\r\n            if (searchViewQuery) {\r\n                searchViewQuery.dispose();\r\n            }\r\n            if (fileListStateful) {\r\n                fileListStateful.dispose();\r\n            }\r\n            if ("}], "metadata": {"task_id": "MaterialFiles/140", "ground_truth": "                removeSource(it)\r\n                it.close()\r\n                this.liveData = null\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListViewModel.kt"}}
{"prompt": "private fun onOk() {\r\n        val name = name\r\n        if (!isNameValid(name)) {", "choices": [{"text": "\r\n    }\r\n\r\n    private fun onCancel() {\r\n        val name = name\r\n    }\r\n\r\n    private fun isNameValid(val name) {\r\n        if (name == null || name.isEmpty()) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/146", "ground_truth": "            return\r\n        }\r\n        onOk(name)\r\n        dismiss()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\NameDialogFragment.kt"}}
{"prompt": "protected open fun isNameValid(name: String): Boolean {\r\n        if (name == initialName) {", "choices": [{"text": "\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected open fun isEmailValid(email: String): Boolean {\r\n        if (email == initialEmail) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected open fun isPhoneValid(phone: String): Boolean {\r\n        if (phone == initialPhone) {\r\n            return true;\r\n        }\r\n"}], "metadata": {"task_id": "MaterialFiles/147", "ground_truth": "            dismiss()\r\n            return false\r\n        }\r\n        return true\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\NameDialogFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.extraPath\nimport me.zhanghai.android.files.file.asMimeTypeOrNull\nimport me.zhanghai.android.files.file.MimeType\nimport java8.nio.file.Path\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val intent = intent\r\n        val path = intent.extraPath\r\n        val mimeType = intent.type?.asMimeTypeOrNull()", "choices": [{"text": "\r\n\r\n        if (mimeType == null) {\r\n            mimeType = MimeType.UNKNOWN\r\n        }\r\n\r\n        if (path == null) {\r\n            path = extraPath.get(intent)\r\n        }\r\n\r\n        if (path == null) {\r\n            path = extraPath.get(intent)\r\n        }\r\n\r\n        if (path == null) {\r\n            path = extraPath.get(intent)\r\n        }\r\n\r\n        if (path == null) {\r\n            path ="}], "metadata": {"task_id": "MaterialFiles/150", "ground_truth": "        if (path != null && mimeType != null) {\r\n            openFile(path, mimeType)\r\n        }\r\n        finish()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\OpenFileActivity.kt"}}
{"prompt": "import android.os.AsyncTask\noverride fun close() {\r\n        AsyncTask.THREAD_POOL_EXECUTOR.execute {\r\n            synchronized(lock) {\r\n                if (closed) {\r\n                    return@execute\r\n                }", "choices": [{"text": "\r\n                    closed = true;\r\n                    lock.notifyAll();\r\n                }\r\n            }\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "MaterialFiles/158", "ground_truth": "                closed = true\r\n                pathObservable?.closeSafe()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\PathObserver.kt"}}
{"prompt": "import java8.nio.file.Path\nimport android.os.Parcelable\nfun navigateTo(lastState: Parcelable, path: Path) {\r\n        val oldTrailData = value\r\n        if (oldTrailData == null) {", "choices": [{"text": "\r\n                value = lastState\r\n                return\r\n        }\r\n        if (oldTrailData == null) {\r\n                value = lastState\r\n                return\r\n        }\r\n        if (value == null) {\r\n                value = lastState\r\n                return\r\n        }\r\n        if (value.equals(lastState)) {\r\n                value = lastState\r\n                return\r\n        }\r\n        if (value.equals(lastState)) {\r\n                value = lastState\r\n                return\r\n        }\r\n        if ("}], "metadata": {"task_id": "MaterialFiles/169", "ground_truth": "            resetTo(path)\r\n            return\r\n        }\r\n        value = oldTrailData.navigateTo(lastState, path)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\TrailLiveData.kt"}}
{"prompt": "import me.zhanghai.android.files.util.Success\nimport me.zhanghai.android.files.util.Loading\nimport me.zhanghai.android.files.file.loadFileItem\nimport me.zhanghai.android.files.file.FileItem\nimport android.os.AsyncTask\noverride fun loadValue() {\r\n        value = Loading(value?.value)\r\n        AsyncTask.THREAD_POOL_EXECUTOR.execute {\r\n            val value = try {\r\n                val file = path.loadFileItem()\r\n                Success(file)\r\n            } catch (e: Exception) {", "choices": [{"text": "\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        return value\r\n}\r\noverride fun saveValue() {\r\n        value = Loading(value?.value)\r\n        AsyncTask.THREAD_POOL_EXECUTOR.execute {\r\n            val value = try {\r\n                val file = path.saveFileItem()\r\n                Success(file)\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        return value\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/177", "ground_truth": "                Failure(valueCompat.value, e)\r\n            }\r\n            postValue(value)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\FileLiveData.kt"}}
{"prompt": "import kotlin.math.roundToLong\nimport org.threeten.bp.Instant\nimport org.threeten.bp.Duration\nprivate fun Instant.withTimezoneInferredFrom(other: Instant): Instant? {\r\n    val smallestZone = Duration.ofMinutes(15)\r\n    val offset = Duration.between(this, other)\r\n    if (offset.abs() < Duration.ofDays(1)) {\r\n        val smallestZoneMillis = smallestZone.toMillis()\r\n        val rounded = Duration.ofMillis(\r\n            (offset.toMillis().toDouble() / smallestZoneMillis).roundToLong() * smallestZoneMillis", "choices": [{"text": ")\r\n        return rounded.withTimezoneInferredFrom(smallestZone)\r\n    } else {\r\n        return this\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/182", "ground_truth": "        )\r\n        return this + rounded\r\n    }\r\n    return null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\image\\ExifInterfaceExtensions.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nprivate fun getEquipment(make: String?, model: String?): String? =\r\n        when {\r\n            make != null && model != null -> {\r\n                if (model.startsWith(make, true)) {\r\n                    model\r\n                } else {\r\n                    getString(R.string.file_properties_image_equipment_format, make, model)\r\n                }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "MaterialFiles/184", "ground_truth": "            }\r\n            make != null -> make\r\n            model != null -> model\r\n            else -> null\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\image\\FilePropertiesImageTabFragment.kt"}}
{"prompt": "var observer PathObserver\nvar changedWhileInactive\n private fun onChangeObserved() {\r\n        if (hasActiveObservers()) {", "choices": [{"text": "\r\n        if (changedWhileInactive) {\r\n                return;\r\n        }\r\n\r\n        changedWhileInactive = true;\r\n\r\n        for (var i = 0; i < observers.length; i++) {\r\n                observers[i].onChangeObserved();\r\n        }\r\n\r\n        changedWhileInactive = false;\r\n}\r\n\r\nfunction hasActiveObservers() {\r\n        for (var i = 0; i < observers.length; i++) {\r\n                if (observers[i].hasActiveObservers()) {\r\n                       "}], "metadata": {"task_id": "MaterialFiles/186", "ground_truth": "            loadValue()\r\n        } else {\r\n            changedWhileInactive = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\PathObserverLiveData.kt"}}
{"prompt": "override fun onActive() {", "choices": [{"text": "\n\t\tif(!this.game.data.player) {\n\t\t\tthis.game.data.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5"}], "metadata": {"task_id": "MaterialFiles/187", "ground_truth": "        if (changedWhileInactive) {\r\n            loadValue()\r\n            changedWhileInactive = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\PathObserverLiveData.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.PosixPrincipal\nimport me.zhanghai.android.files.R\nprivate fun getPrincipalText(principal: PosixPrincipal?) =\r\n        if (principal != null) {\r\n            if (principal.name != null) {\r\n                getString(\r\n                    R.string.file_properties_permissions_principal_format, principal.name,\r\n                    principal.id\r\n                )\r\n            } else {", "choices": [{"text": "\r\n                getString(\r\n                    R.string.file_properties_permissions_principal_format, principal.name,\r\n                    principal.id\r\n                )\r\n            }\r\n        } else {\r\n            if (principal.name!= null) {\r\n                getString(\r\n                    R.string.file_properties_permissions_principal_format, principal.name,\r\n                    principal.id\r\n                )\r\n            } else {\r\n                getString(\r\n                    R.string.file_properties_permissions_principal_format, principal.id\r\n               "}], "metadata": {"task_id": "MaterialFiles/189", "ground_truth": "                principal.id.toString()\r\n            }\r\n        } else {\r\n            getString(R.string.unknown)\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\permissions\\FilePropertiesPermissionsTabFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.PosixFileModeBit\nprivate fun getModeString(\r\n        modeBits: List<PosixFileModeBit>,\r\n        modeBitNames: Array<String>\r\n    ): String {\r\n        val mode = viewModel.mode\r\n        val checkedNames = mutableListOf<String>()\r\n        for (index in modeBits.indices) {\r\n            if (modeBits[index] in mode) {\r\n                checkedNames += modeBitNames[index]\r\n            }\r\n        }\r\n        return if (checkedNames.isEmpty()) {", "choices": [{"text": " return \"\"\r\n        } else {\r\n            return checkedNames.join(\", \")\r\n        }\r\n    }\r\nprivate fun getModeBitNames(\r\n        modeBits: List<PosixFileModeBit>,\r\n        modeBitNames: Array<String>\r\n    ): Array<String> {\r\n        val mode = viewModel.mode\r\n        val checkedNames = mutableListOf<String>()\r\n        for (index in modeBits.indices) {\r\n            if (modeBits[index] in mode) {\r\n                checkedNames += modeBit"}], "metadata": {"task_id": "MaterialFiles/194", "ground_truth": "            getString(R.string.none)\r\n        } else {\r\n            ListFormatterCompat.format(checkedNames)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\permissions\\SetModeDialogFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.valueCompat\nimport me.zhanghai.android.files.util.toEnumSet\nimport me.zhanghai.android.files.provider.common.PosixFileModeBit\nimport androidx.lifecycle.LiveData\nfun toggleModeBit(modeBit: PosixFileModeBit) {\r\n        val mode = _modeLiveData.valueCompat.toEnumSet()\r\n        if (modeBit in mode) {\r\n            mode -= modeBit", "choices": [{"text": "\r\n        } else {\r\n            mode |= modeBit\r\n        }\r\n        _modeLiveData.valueCompat.setEnumSet(mode)\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/196", "ground_truth": "        } else {\r\n            mode += modeBit\r\n        }\r\n        _modeLiveData.value = mode\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\permissions\\SetModeViewModel.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n\t\tif (this.game.data.player == null) {\n\t\t\tthis.game.data.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t} else {\n\t\t\tthis.game.data.player.destroy();\n\t\t"}], "metadata": {"task_id": "MaterialFiles/211", "ground_truth": "        super.onDestroy()\r\n\r\n        executeStop()\r\n        executorService.shutdown()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\FtpServerService.kt"}}
{"prompt": "override fun onClick() {\r\n        super.onClick()\r\n\r\n        if (isLocked) {", "choices": [{"text": "\r\n            this.setState({\r\n                locked:!this.state.locked\r\n            })\r\n        }\r\n\r\n        if (this.state.locked) {\r\n            this.setState({\r\n                locked: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                locked: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View style={styles.container}>\r\n                <View style={styles."}], "metadata": {"task_id": "MaterialFiles/223", "ground_truth": "            unlockAndRun { toggle() }\r\n        } else {\r\n            toggle()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\FtpServerTileService.kt"}}
{"prompt": "override fun changeWorkingDirectory(directoryString: String): Boolean {\r\n        val directory = getFile(directoryString)\r\n        if (!directory.isDirectory) {", "choices": [{"text": "\r\n                return false;\r\n        }\r\n\r\n        if (directory.isDirectory) {\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n}\r\n\r\noverride fun changeWorkingDirectory(directoryString: String): Boolean {\r\n        val directory = getFile(directoryString);\r\n        if (!directory.isDirectory) {\r\n                return false;\r\n        }\r\n\r\n        if (directory.isDirectory) {\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n}\r"}], "metadata": {"task_id": "MaterialFiles/229", "ground_truth": "            return false\r\n        }\r\n        workingDirectory = directory\r\n        return true\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFileSystemView.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.getOwner\noverride fun getOwnerName(): String =\r\n        try {\r\n            path.getOwner().name\r\n        } catch (ignored: UnsupportedOperationException) {", "choices": [{"text": "\r\n        try:\r\n            path.getOwner().name\r\n        except UnsupportedOperationException:\r\n            return ''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "MaterialFiles/234", "ground_truth": "            null\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n            null\r\n        } ?: \"user\"", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import java.io.IOException\nimport me.zhanghai.android.files.provider.common.getFileAttributeView\nimport java8.nio.file.attribute.PosixFileAttributeView\noverride fun getGroupName(): String {\r\n        val attributeView = path.getFileAttributeView(PosixFileAttributeView::class.java)\r\n        return if (attributeView != null) {\r\n            try {\r\n                attributeView.readAttributes().group().name\r\n            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                null", "choices": [{"text": " return null\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "MaterialFiles/235", "ground_truth": "            }\r\n        } else {\r\n            null\r\n        } ?: \"group\"\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.setLastModifiedTime\nimport me.zhanghai.android.files.provider.common.isWritable\nimport java8.nio.file.attribute.FileTime\noverride fun setLastModified(time: Long): Boolean =\r\n        if (!isWritable) {\r\n            false\r\n        } else {\r\n            try {\r\n                path.setLastModifiedTime(FileTime.fromMillis(time))\r\n                true", "choices": [{"text": "\r\n            } catch (Exception e) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\noverride fun isWritable(): Boolean =\r\n        if (!isWritable) {\r\n            false\r\n        } else {\r\n            try {\r\n                path.isWritable()\r\n                true\r\n            } catch (Exception e) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }\r\n"}], "metadata": {"task_id": "MaterialFiles/237", "ground_truth": "            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "override fun getSize(): Long =\r\n        try {", "choices": [{"text": "() {\r\n    return 1;\r\n}\r\n\r\noverride fun getSize2(): Long =\r\n\r\n    try {\r\n        return 2;\r\n    } catch (e) {\r\n        return 3;\r\n    }\r\n\r\noverride fun getSize3(): Long =\r\n\r\n    try {\r\n        return 4;\r\n    } catch (e) {\r\n        return 5;\r\n    }\r\n\r\noverride fun getSize4(): Long =\r\n\r\n    try {\r\n        return 6;\r\n    } catch (e"}], "metadata": {"task_id": "MaterialFiles/238", "ground_truth": "            path.size()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n            0\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.isWritable\nimport me.zhanghai.android.files.provider.common.createDirectory\noverride fun mkdir(): Boolean =\r\n        if (!isWritable) {\r\n            false\r\n        } else {\r\n            try {\r\n                path.createDirectory()\r\n                true", "choices": [{"text": "\r\n                return true\r\n            } catch (e) {\r\n                return false\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "MaterialFiles/239", "ground_truth": "            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.delete\noverride fun delete(): Boolean =\r\n        if (!isRemovable) {\r\n            false\r\n        } else {\r\n            try {\r\n                path.delete()\r\n                true", "choices": [{"text": "\r\n                return True\r\n            except:\r\n                return False\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "MaterialFiles/240", "ground_truth": "            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import org.apache.ftpserver.ftplet.FtpFile\nimport me.zhanghai.android.files.provider.common.moveTo\nimport me.zhanghai.android.files.provider.common.isWritable\nimport java8.nio.file.Path\noverride fun move(destination: FtpFile): Boolean {\r\n        if (!(isRemovable && destination.isWritable)) {\r\n            return false\r\n        }\r\n        val targetPath = (destination as ProviderFtpFile).path\r\n        return try {\r\n            path.moveTo(targetPath)\r\n            true", "choices": [{"text": "\r\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n            return false\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"ProviderFtpFile{\" +\r\n                \"path='\" + path + '\\'' +\r\n                \", isRemovable=\" + isRemovable +\r\n                \", isWritable=\" + isWritable +\r\n                '}';\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/241", "ground_truth": "        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n            false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\nimport me.zhanghai.android.files.provider.common.newInputStream\nimport me.zhanghai.android.files.provider.common.newByteChannel\n @Throws(IOException::class)\r\n    override fun createInputStream(offset: Long): InputStream {\r\n        return if (offset == 0L) {\r\n            path.newInputStream()\r\n        } else {\r\n            val channel = path.newByteChannel()\r\n            var successful = false\r\n            try {\r\n                channel.position(offset)\r\n                val inputStream = channel.newInputStream()\r\n                successful = true\r\n                inputStream\r\n            } finally {\r\n                if (!successful) {", "choices": [{"text": "\r\n                    channel.close()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/243", "ground_truth": "                    channel.close()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "!= other?.javaClass) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun hashCode(): Number {\r\n        return javaClass.hashCode()\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return javaClass.toString()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/244", "ground_truth": "            return false\r\n        }\r\n        other as ProviderFtpFile\r\n        return path == other.path\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import me.zhanghai.android.files.R\noverride fun onClick(listener: Listener) {\r\n        if (this is NavigationRoot) {\r\n            listener.navigateToRoot(path)", "choices": [{"text": "\r\n        } else {\r\n            listener.navigateToRoot(path)\r\n        }\r\n}\r\n\r\nclass NavigationRoot {\r\n    constructor(listener: Listener) {\r\n        this.listener = listener\r\n    }\r\n    navigateToRoot(path: string) {\r\n        this.listener.navigateToRoot(path)\r\n    }\r\n}\r\n\r\nclass Listener {\r\n    constructor(path: string) {\r\n        this.path = path\r\n    }\r\n    navigateToRoot(path: string)"}], "metadata": {"task_id": "MaterialFiles/258", "ground_truth": "        } else {\r\n            listener.navigateTo(path)\r\n        }\r\n        listener.closeNavigationDrawer()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\navigation\\NavigationItems.kt"}}
{"prompt": "import me.zhanghai.android.files.util.activity\nimport me.zhanghai.android.files.R\nimport androidx.core.graphics.withSave\nimport android.graphics.Color\nimport android.graphics.Canvas\noverride fun draw(canvas: Canvas) {\r\n        super.draw(canvas)\r\n\r\n        if (context.activity!!.window.statusBarColor == Color.TRANSPARENT) {\r\n            canvas.withSave {\r\n                canvas.translate(scrollX.toFloat(), scrollY.toFloat())", "choices": [{"text": "\r\n                canvas.drawColor(Color.TRANSPARENT)\r\n            }\r\n        }\r\n\r\n        if (context.activity!!.window.statusBarColor == Color.WHITE) {\r\n            canvas.withSave {\r\n                canvas.translate(scrollX.toFloat(), scrollY.toFloat())\r\n                canvas.drawColor(Color.WHITE)\r\n            }\r\n        }\r\n\r\n        if (context.activity!!.window.statusBarColor == Color.BLACK) {\r\n            canvas.withSave {\r\n               "}], "metadata": {"task_id": "MaterialFiles/267", "ground_truth": "                scrim.setBounds(0, 0, width, insetTop)\r\n                scrim.draw(canvas)\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\navigation\\NavigationRecyclerView.kt"}}
{"prompt": "fun addPassword(password: String) {\r\n        synchronized(lock) {\r\n            if (!isOpen) {", "choices": [{"text": "\r\n                isOpen = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removePassword(password: String) {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                isOpen = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        addPassword,\r\n        removePassword\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    addPassword: addPassword,\r\n    removePassword: removePassword\r\n};\r\n"}], "metadata": {"task_id": "MaterialFiles/283", "ground_truth": "                throw ClosedFileSystemException()\r\n            }\r\n            passwords += password\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "var passwords\nval defaultDirectory ArchivePath\nval rootDirectory\n fun setPasswords(passwords: List<String>) {\r\n        synchronized(lock) {\r\n            if (!isOpen) {", "choices": [{"text": "\r\n                passwords = passwords.concat(passwords);\r\n            }\r\n            else {\r\n                passwords = passwords.concat(passwords);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "MaterialFiles/284", "ground_truth": "                throw ClosedFileSystemException()\r\n            }\r\n            this.passwords = passwords\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "fun refresh() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {", "choices": [{"text": "\r\n                isOpen = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void close() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                isOpen = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean isOpen() {\r\n        synchronized(lock) {\r\n            return isOpen;\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/285", "ground_truth": "                throw ClosedFileSystemException()\r\n            }\r\n            isRefreshNeeded = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "import java8.nio.file.FileSystem\noverride fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return\r\n            }\r\n            provider.removeFileSystem(this)\r\n            isRefreshNeeded = false", "choices": [{"text": "\r\n            isOpen = false\r\n            provider.removeFileSystem(this)\r\n        }\r\n}\r\noverride fun refresh() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return\r\n            }\r\n            provider.refreshFileSystem(this)\r\n            isRefreshNeeded = true\r\n        }\r\n}\r\noverride fun exists() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return\r\n            }\r\n            return provider.existsFileSystem(this)\r\n        }\r"}], "metadata": {"task_id": "MaterialFiles/287", "ground_truth": "            entries = null\r\n            tree = null\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/291", "ground_truth": "    override fun newWatchService(): WatchService {\r\n        // TODO\r\n        throw UnsupportedOperationException()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "!= other?.javaClass) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun hashCode(): Number {\r\n        return javaClass.hashCode()\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return javaClass.toString()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/292", "ground_truth": "            return false\r\n        }\r\n        other as ArchiveFileSystem\r\n        return archiveFile == other.archiveFile\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "import java8.nio.file.attribute.FileAttributeView\nimport java8.nio.file.attribute.FileAttribute\nimport java8.nio.file.ProviderMismatchException\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\noverride fun <V : FileAttributeView> getFileAttributeView(\r\n        path: Path,\r\n        type: Class<V>,\r\n        vararg options: LinkOption\r\n    ): V? {\r\n        path as? ArchivePath ?: throw ProviderMismatchException(path.toString())\r\n        if (!supportsFileAttributeView(type)) {", "choices": [{"text": "\r\n            return null\r\n        }\r\n        return type.cast(new FileAttributeView(path, options))\r\n    }\r\noverride fun <V : FileAttribute> getFileAttribute(\r\n        path: Path,\r\n        type: Class<V>,\r\n        vararg options: LinkOption\r\n    ): V? {\r\n        path as? ArchivePath?: throw ProviderMismatchException(path.toString())\r\n        if (!supportsFileAttribute(type)) {\r\n            return null\r\n        }\r\n        return type.cast(new FileAttribute("}], "metadata": {"task_id": "MaterialFiles/312", "ground_truth": "            return null\r\n        }\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return getFileAttributeView(path) as V\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystemProvider.kt"}}
{"prompt": "import java.io.File\nimport me.zhanghai.android.files.provider.root.RootablePath\nimport java8.nio.file.Path\noverride fun isRootRequired(isAttributeAccess: Boolean): Boolean {\r\n        val archiveFile = fileSystem.archiveFile\r\n        return if (archiveFile is RootablePath) {", "choices": [{"text": "\r\n            if (isAttributeAccess) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        } else {\r\n            if (isAttributeAccess) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/318", "ground_truth": "            archiveFile.isRootRequired(isAttributeAccess)\r\n        } else {\r\n            false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchivePath.kt"}}
{"prompt": "import java.nio.charset.Charset\nimport java.io.IOException\nimport me.zhanghai.android.files.R\nimport java8.nio.file.Path\n @Throws(IOException::class)\r\n    private fun readEntries(file: Path, passwords: List<String>): List<ReadArchive.Entry> {\r\n        val charset = archiveFileNameCharset\r\n        val (archive, closeable) = openArchive(file, passwords)\r\n        return closeable.use {\r\n            buildList {\r\n                while (true) {", "choices": [{"text": "\r\n                    val entry = readArchiveEntry(archive, charset)\r\n                    if (entry == null) {\r\n                        break\r\n                    }\r\n                    yield return entry\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun readEntries(file: Path, passwords: List<String>): List<ReadArchive.Entry> {\r\n        val charset = archiveFileNameCharset\r\n        val (archive, closeable) = openArchive(file, passwords)\r\n        return closeable.use {\r\n            buildList {\r\n               "}], "metadata": {"task_id": "MaterialFiles/321", "ground_truth": "                    this += archive.readEntry(charset) ?: break\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\archiver\\ArchiveReader.kt"}}
{"prompt": "val archiveFileNameCharset Charset\nval size Long\n override fun close() {\r\n            @Suppress(\"ConvertTryFinallyToUseCall\")\r\n            try {", "choices": [{"text": "\r\n            super.close();\r\n\r\n            try {\r\n                if (archive!= null) {\r\n                    archive.close();\r\n                    archive = null;\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "MaterialFiles/323", "ground_truth": "                archive.close()\r\n            } finally {\r\n                closeable.close()\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\archiver\\ArchiveReader.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/324", "ground_truth": "        override fun close() {\r\n            super.close()\r\n\r\n            closeable.close()\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\archiver\\ArchiveReader.kt"}}
{"prompt": "import java.nio.channels.NonReadableChannelException\nimport java.nio.ByteBuffer\nimport java.io.IOException\n @Throws(IOException::class)\r\n    final override fun read(destination: ByteBuffer): Int {\r\n        ensureOpen()\r\n        if (isAppend) {\r\n            throw NonReadableChannelException()\r\n        }\r\n        val remaining = destination.remaining()\r\n        if (remaining == 0) {\r\n            return 0\r\n        }\r\n        return synchronized(ioLock) {\r\n            readBuffer.read(destination).also {\r\n                if (it != -1) {", "choices": [{"text": "\r\n                    throw new IOException()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    final override fun write(source: ByteBuffer): Int {\r\n        ensureOpen()\r\n        if (isAppend) {\r\n            throw NonWritableChannelException()\r\n        }\r\n        val remaining = source.remaining()\r\n        if (remaining == 0) {\r\n            return 0\r\n        }\r\n        return synchronized(ioLock) {\r\n            readBuffer.write(source).also {\r\n                if (it!= -1) {"}], "metadata": {"task_id": "MaterialFiles/334", "ground_truth": "                    position += it\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.util.concurrent.Future\nimport java.nio.ByteBuffer\nimport kotlinx.coroutines.withTimeout\nimport kotlinx.coroutines.runInterruptible\nimport kotlinx.coroutines.async\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nprotected open fun onReadAsync(\r\n        position: Long,\r\n        size: Int,\r\n        timeoutMillis: Long\r\n    ): Future<ByteBuffer> =\r\n        @OptIn(DelicateCoroutinesApi::class)\r\n        GlobalScope.async(Dispatchers.IO) {\r\n            withTimeout(timeoutMillis) {\r\n                runInterruptible {", "choices": [{"text": "\r\n                    @Override\r\n                    public ByteBuffer call() throws Exception {\r\n                        return ByteBuffer.allocateDirect(size);\r\n                    }\r\n                };\r\n            }\r\n\r\n            @Override\r\n            public ByteBuffer call() throws Exception {\r\n                return ByteBuffer.allocateDirect(size);\r\n            }\r\n        };\r\n    return onReadAsync(position, size);\r\n}\r\n\r\nprotected open fun onWriteAsync(\r\n        position: Long,\r\n        size: Int,\r\n        buffer: ByteBuffer\r\n    ): Future"}], "metadata": {"task_id": "MaterialFiles/335", "ground_truth": "                    onRead(position, size)\r\n                }\r\n            }\r\n        }\r\n            .asFuture()", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.IOException\n @Throws(IOException::class)\r\n    final override fun write(source: ByteBuffer): Int {\r\n        ensureOpen()\r\n        val remaining = source.remaining()\r\n        if (remaining == 0) {\r\n            return 0\r\n        }\r\n        synchronized(ioLock) {\r\n            if (isAppend) {\r\n                onAppend(source)\r\n                position = onSize()\r\n            } else {\r\n                onWrite(position, source)", "choices": [{"text": "\r\n                position += remaining\r\n            }\r\n        }\r\n        return position\r\n    }\r\n\r\n    final override fun write(source: ByteBuffer[], offset: Int, count: Int): Int {\r\n        ensureOpen()\r\n        val remaining = source.length - offset\r\n        if (remaining == 0) {\r\n            return 0\r\n        }\r\n        synchronized(ioLock) {\r\n            if (isAppend) {\r\n                onAppend(source, offset, count)\r\n                position = onSize()\r\n            } else {"}], "metadata": {"task_id": "MaterialFiles/336", "ground_truth": "                position += remaining - source.remaining()\r\n            }\r\n            return remaining\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    final override fun position(): Long {\r\n        ensureOpen()\r\n        synchronized(ioLock) {\r\n            if (isAppend) {", "choices": [{"text": "\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    final override fun length(): Long {\r\n        ensureOpen()\r\n        synchronized(ioLock) {\r\n            if (isAppend) {\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    final override fun flush(): void {\r\n        ensure"}], "metadata": {"task_id": "MaterialFiles/338", "ground_truth": "                position = onSize()\r\n            }\r\n            return position\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/340", "ground_truth": "    final override fun size(): Long {\r\n        ensureOpen()\r\n        return onSize()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.channels.SeekableByteChannel\n @Throws(IOException::class)\r\n    final override fun truncate(size: Long): SeekableByteChannel {\r\n        ensureOpen()\r\n        require(size >= 0)\r\n        synchronized(ioLock) {\r\n            val currentSize = onSize()\r\n            if (size >= currentSize) {\r\n                return this\r\n            }", "choices": [{"text": ".onTruncate(size)\r\n            return this\r\n        }\r\n    }\r\n\r\n @Throws(IOException::class)\r\n    final override fun truncate(long size: Long): SeekableByteChannel {\r\n        ensureOpen()\r\n        require(size >= 0)\r\n        synchronized(ioLock) {\r\n            val currentSize = onSize()\r\n            if (size >= currentSize) {\r\n                return this\r\n            }\r\n            onTruncate(size)\r\n            return this\r\n        }\r\n    }\r\n\r\n @"}], "metadata": {"task_id": "MaterialFiles/341", "ground_truth": "            onTruncate(size)\r\n            position = position.coerceAtMost(size)\r\n        }\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    final override fun force(metaData: Boolean) {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/342", "ground_truth": "        ensureOpen()\r\n        synchronized(ioLock) {\r\n            onForce(metaData)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.nio.channels.ClosedChannelException\n @Throws(ClosedChannelException::class)\r\n    private fun ensureOpen() {\r\n        synchronized(closeLock) {", "choices": [{"text": "\r\n            if (closed) {\r\n                throw new ClosedChannelException();\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n @Throws(ClosedChannelException::class)\r\n    private fun ensureOpen() {\r\n        synchronized (closeLock) {\r\n            if (closed) {\r\n                throw new ClosedChannelException();\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n @Throws(ClosedChannelException::class)\r\n    private fun ensureOpen() {\r\n        synchronized (closeLock) {"}], "metadata": {"task_id": "MaterialFiles/343", "ground_truth": "            if (!isOpen) {\r\n                throw ClosedChannelException()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    final override fun close() {\r\n        synchronized(closeLock) {\r\n            if (!isOpen) {\r\n                return\r\n            }\r\n            isOpen = false\r\n            synchronized(ioLock) {", "choices": [{"text": "\r\n                if (!isOpen) {\r\n                    return\r\n                }\r\n                isOpen = false\r\n            }\r\n        }\r\n        return super.close()\r\n    }\r\n @Throws(IOException::class)\r\n    final override fun flush() {\r\n        synchronized(flushLock) {\r\n            if (!isOpen) {\r\n                return\r\n            }\r\n            isOpen = false\r\n            synchronized(ioLock) {\r\n                if (!isOpen) {\r\n                    return\r\n                }\r\n                isOpen = false\r\n           "}], "metadata": {"task_id": "MaterialFiles/344", "ground_truth": "                readBuffer.closeSafe()\r\n                onClose()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "fun signal() {\r\n        synchronized(lock) {\r\n            if (!isSignaled) {\r\n                isSignaled = true", "choices": [{"text": ";\r\n                notifyAll();\r\n            }\r\n        }\r\n    }\r\n\r\n    synchronized(lock) {\r\n        if (isSignaled) {\r\n            isSignaled = false;\r\n            notifyAll();\r\n        }\r\n    }\r\n\r\n    synchronized(lock) {\r\n        if (isSignaled) {\r\n            isSignaled = false;\r\n            notifyAll();\r\n        }\r\n    }\r\n\r\n    synchronized(lock) {\r\n        if (isSignaled) {\r\n           "}], "metadata": {"task_id": "MaterialFiles/350", "ground_truth": "                @Suppress(\"UNCHECKED_CAST\")\r\n                watchService.enqueue(this as K)\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchKey.kt"}}
{"prompt": "import java8.nio.file.WatchEvent\nvar events\nval MAX_PENDING_EVENTS\nvar count\noverride fun pollEvents(): List<WatchEvent<*>> {\r\n        synchronized(lock) {", "choices": [{"text": "\r\n        if (count >= MAX_PENDING_EVENTS) {\r\n                count = 0;\r\n                events = [];\r\n                return events;\r\n        } else {\r\n                count++;\r\n                events = [];\r\n                return events;\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/351", "ground_truth": "            val events = events\r\n            this.events = mutableListOf()\r\n            return events\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchKey.kt"}}
{"prompt": "override fun reset(): Boolean {\r\n        synchronized(lock) {\r\n            val isValid = isValid\r\n            if (isValid && isSignaled) {\r\n                if (events.isEmpty()) {\r\n                    isSignaled = false\r\n                } else {\r\n                    @Suppress(\"UNCHECKED_CAST\")\r\n                    watchService.enqueue(this as K)", "choices": [{"text": "\r\n                    isSignaled = false\r\n                }\r\n            }\r\n            return isValid\r\n        }\r\n    }\r\n\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    @Override\r\n    public void onEvent(Event event) {\r\n        synchronized(lock) {\r\n            val isValid = isValid\r\n            if (isValid && isSignaled) {\r\n                events.add(event)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    @Override\r"}], "metadata": {"task_id": "MaterialFiles/352", "ground_truth": "                }\r\n            }\r\n            return isValid\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchKey.kt"}}
{"prompt": "override fun cancel() {\r\n        synchronized(lock) {\r\n            if (isValid) {", "choices": [{"text": "!= null) {\r\n                isValid = false;\r\n                lock.notifyAll();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    protected void finalize() throws Throwable {\r\n        cancel();\r\n        super.finalize();\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        synchronized(lock) {\r\n            if (isValid) {\r\n                isValid = false;\r\n                lock.notifyAll();\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/353", "ground_truth": "                @Suppress(\"UNCHECKED_CAST\")\r\n                watchService.cancel(this as K)\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchKey.kt"}}
{"prompt": "@Throws(InterruptedException::class)", "choices": [{"text": ".class ) {\n  throw new Error( 'An error has occurred.' );\n}\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError\n\n// $ExpectError"}], "metadata": {"task_id": "MaterialFiles/356", "ground_truth": "    override fun take(): WatchKey {\r\n        ensureOpen()\r\n        return checkClosedKey(queue.take())\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchService.kt"}}
{"prompt": "import java8.nio.file.WatchKey\nprivate fun <T : WatchKey?> checkClosedKey(key: T): T {\r\n        if (key == KEY_CLOSED) {\r\n            // There may be other threads still waiting for a key.", "choices": [{"text": "\r\n            return KEY_CLOSED;\r\n        } else {\r\n            return key;\r\n        }\r\n    }\r\npublic class Solution {\r\n    public static void main(String[] args) {\r\n        System.out.println(checkClosedKey(KEY_CLOSED));\r\n        System.out.println(checkClosedKey(KEY_CLOSED));\r\n        System.out.println(checkClosedKey(KEY_CLOSED));\r\n        System.out.println(checkClosedKey(KEY_CLOSED));\r\n        System.out.println(checkClosedKey("}], "metadata": {"task_id": "MaterialFiles/357", "ground_truth": "            queue.offer(key)\r\n        }\r\n        ensureOpen()\r\n        return key\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchService.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun close() {\r\n        synchronized(lock) {\r\n            if (isClosed) {\r\n                return\r\n            }\r\n            onClose()", "choices": [{"text": "\r\n            try {\r\n                super.close();\r\n            } catch (IOException e) {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    override fun flush() {\r\n        synchronized(lock) {\r\n            if (isClosed) {\r\n                return\r\n            }\r\n            try {\r\n                super.flush();\r\n            } catch (IOException e) {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n @Throws(IOException"}], "metadata": {"task_id": "MaterialFiles/359", "ground_truth": "            isClosed = true\r\n            queue.clear()\r\n            queue.offer(KEY_CLOSED)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchService.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/376", "ground_truth": "    override fun position(newPosition: Long): FileChannel {\r\n        channel.position(newPosition)\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\DelegateFileChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/377", "ground_truth": "    override fun truncate(size: Long): FileChannel {\r\n        channel.truncate(size)\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\DelegateFileChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/380", "ground_truth": "    override fun truncate(size: Long): SeekableByteChannel {\r\n        channel.truncate(size)\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\DelegateSeekableByteChannel.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\n\r\n@Throws(IOException::class)\r\nfun InputStream.readFully(buffer: ByteArray, offset: Int, length: Int): Int {\r\n    var totalReadSize = 0\r\n    while (totalReadSize < length) {\r\n        val readSize = read(buffer, offset + totalReadSize, length - totalReadSize)\r\n        if (readSize == -1) {\r\n            break", "choices": [{"text": "\r\n        }\r\n        totalReadSize += readSize\r\n    }\r\n    return totalReadSize\r\n}\r\n\r\n@Throws(IOException::class)\r\nfun InputStream.readFully(buffer: ByteArray, offset: Int, length: Int): Int {\r\n    var totalReadSize = 0\r\n    while (totalReadSize < length) {\r\n        val readSize = read(buffer, offset + totalReadSize, length - totalReadSize)\r\n        if (readSize == -1) {\r\n            break\r\n        }\r\n        total"}], "metadata": {"task_id": "MaterialFiles/388", "ground_truth": "        }\r\n        totalReadSize += readSize\r\n    }\r\n    return totalReadSize\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\InputStreamExtensions.kt"}}
{"prompt": "import java.io.InterruptedIOException\nimport java.io.IOException\n\r\n@Throws(InterruptedIOException::class)", "choices": [{"text": "throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@Throws( IOException.class )\n@"}], "metadata": {"task_id": "MaterialFiles/389", "ground_truth": "private fun throwIfInterrupted() {\r\n    if (Thread.interrupted()) {\r\n        throw InterruptedIOException()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\InputStreamExtensions.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.file.Path\nimport java8.nio.file.CopyOption\n\r\n@Throws(IOException::class)\r\nfun Path.copyTo(target: Path, vararg options: CopyOption) {\r\n    val provider = provider\r\n    if (provider == target.provider) {", "choices": [{"text": "\r\n        return\r\n    }\r\n\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }"}], "metadata": {"task_id": "MaterialFiles/407", "ground_truth": "        provider.copy(this, target, *options)\r\n    } else {\r\n        ForeignCopyMove.copy(this, target, *options)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PathExtensions.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.file.Path\nimport java8.nio.file.CopyOption\n\r\n@Throws(IOException::class)\r\nfun Path.moveTo(target: Path, vararg options: CopyOption) {\r\n    val provider = provider\r\n    if (provider == target.provider) {", "choices": [{"text": "\r\n        provider = target.provider\r\n    }\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n    if (provider == null) {\r\n        provider = target.provider\r\n    }\r\n    if (provider"}], "metadata": {"task_id": "MaterialFiles/409", "ground_truth": "        provider.move(this, target, *options)\r\n    } else {\r\n        ForeignCopyMove.move(this, target, *options)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PathExtensions.kt"}}
{"prompt": "import java8.nio.file.Path\nfun Path.resolveForeign(other: Path): Path {\r\n    asByteStringListPath()\r\n    other.asByteStringListPath()\r\n    if (javaClass == other.javaClass && provider == other.provider\r\n        && fileSystem == other.fileSystem) {\r\n        return resolve(other)\r\n    }\r\n    if (other.isAbsolute) {\r\n        return other\r\n    }\r\n    if (other.isEmpty) {\r\n        return this\r\n    }\r\n    var result: ByteStringListPath<*> = this", "choices": [{"text": ".asByteStringListPath()\r\n    other.asByteStringListPath()\r\n    if (javaClass == other.javaClass && provider == other.provider\r\n        && fileSystem == other.fileSystem) {\r\n        return resolve(other)\r\n    }\r\n    if (other.isAbsolute) {\r\n        return other\r\n    }\r\n    if (other.isEmpty) {\r\n        return this\r\n    }\r\n    var result: ByteStringListPath<*> = this.asByteStringListPath()\r\n    other.asByte"}], "metadata": {"task_id": "MaterialFiles/426", "ground_truth": "    for (name in other.nameByteStrings) {\r\n        result = result.resolve(name)\r\n    }\r\n    return result\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PathExtensions.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun close() {\r\n        synchronized(lock) {\r\n            if (isClosed) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isClosed = true;\r\n            try {\r\n                super.close();\r\n            } catch (IOException e) {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    override fun flush() {\r\n        synchronized(lock) {\r\n            if (isClosed) {\r\n                return;\r\n            }\r\n            try {\r\n                super.flush();\r\n            } catch (IOException e) {\r\n                throw e;\r\n            }"}], "metadata": {"task_id": "MaterialFiles/433", "ground_truth": "            }\r\n            closeable?.close()\r\n            isClosed = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PathIteratorDirectoryStream.kt"}}
{"prompt": "val id\nval key\nval pollers\n override fun cancel(key: PollingWatchKey) {\r\n        val poller = synchronized(pollers) { pollers.remove(key.watchable())!! }\r\n        poller.interrupt()\r\n        try {", "choices": [{"text": "() {\r\n            key.cancel()\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n}\r\n override fun watch(key: PollingWatchKey) {\r\n        val poller = synchronized(pollers) { pollers.add(key.watchable())!! }\r\n        poller.interrupt()\r\n        try {\r\n            key.watch()\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n}\r\n override fun unwatch(key: PollingWatch"}], "metadata": {"task_id": "MaterialFiles/435", "ground_truth": "            poller.join()\r\n        } catch (e: InterruptedException) {\r\n            e.printStackTrace()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PollingWatchService.kt"}}
{"prompt": "import java8.nio.file.attribute.FileAttribute\nval NAME\nval CREATE_DIRECTORY_DEFAULT\nval DIRECTORY_DEFAULT\nfun fromAttributes(attributes: Array<out FileAttribute<*>>): Set<PosixFileModeBit>? {\r\n        var mode: Set<PosixFileModeBit>? = null", "choices": [{"text": ";\r\n        for (var i = 0; i < attributes.length; i++) {\r\n            var attribute: FileAttribute<*> = attributes[i];\r\n            switch (attribute.name) {\r\n                case NAME:\r\n                    mode = new Set<PosixFileModeBit>();\r\n                    break;\r\n                case CREATE_DIRECTORY_DEFAULT:\r\n                    mode = new Set<PosixFileModeBit>();\r\n                    break;\r\n                case DIRECTORY_DEFAULT:\r\n                    mode = new Set<PosixFileModeBit>();\r\n                   "}], "metadata": {"task_id": "MaterialFiles/439", "ground_truth": "        for (attribute in attributes) {\r\n            mode = fromAttribute(attribute)\r\n        }\r\n        return mode\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PosixFileMode.kt"}}
{"prompt": "override fun toString(): String = buildString {\r\n        if (userInfo != null) {\r\n            append(userInfo)\r\n            append('@')\r\n        }\r\n        append(host)", "choices": [{"text": "\r\n        if (port!= null) {\r\n            append(':')\r\n            append(port)\r\n        }\r\n        if (protocol!= null) {\r\n            append(':')\r\n            append(protocol)\r\n        }\r\n        if (path!= null) {\r\n            append('/')\r\n            append(path)\r\n        }\r\n        if (query!= null) {\r\n            append('?')\r\n            append(query)\r\n        }\r\n        if (fragment!= null) {\r\n            append('#"}], "metadata": {"task_id": "MaterialFiles/444", "ground_truth": "        if (port != null) {\r\n            append(':')\r\n            append(port.toString())\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\UriAuthority.kt"}}
{"prompt": "import kotlin.experimental.or\nimport kotlin.experimental.and\nprivate fun encode(decoded: ByteString, charset: String): String {\r\n    val builder = StringBuilder()\r\n    for (byte in decoded) {\r\n        if (charset.indexOf(byte.toInt().toChar()) != -1) {\r\n            builder.append(byte.toInt().toChar())\r\n        } else {\r\n            builder\r\n                .append('%')\r\n                .append(encodeHexCharacter(((byte.toInt() ushr 4).toByte() and 0x0F)))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/446", "ground_truth": "                .append(encodeHexCharacter(byte and 0x0F))\r\n        }\r\n    }\r\n    return builder.toString()\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\UriByteStringExtensions.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/450", "ground_truth": "    override fun onCloseLocked() {\r\n        poller.interrupt()\r\n        watchService.close()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\WatchServicePathObservable.kt"}}
{"prompt": "import java8.nio.file.WatchService\nimport java8.nio.file.ClosedWatchServiceException\noverride fun run() {\r\n            while (true) {\r\n                val key = try {\r\n                    watchService.take()\r\n                } catch (e: ClosedWatchServiceException) {\r\n                    break\r\n                } catch (e: InterruptedException) {\r\n                    break\r\n                }\r\n                if (key.pollEvents().isNotEmpty()) {\r\n                    notifyObservers()\r\n                }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "MaterialFiles/451", "ground_truth": "                if (!key.reset()) {\r\n                    break\r\n                }\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\WatchServicePathObservable.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/457", "ground_truth": "    override fun newWatchService(): WatchService {\r\n        // TODO\r\n        throw UnsupportedOperationException()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\content\\ContentFileSystem.kt"}}
{"prompt": "import java8.nio.file.attribute.FileAttributeView\nimport java8.nio.file.attribute.FileAttribute\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\noverride fun <V : FileAttributeView> getFileAttributeView(\r\n        path: Path,\r\n        type: Class<V>,\r\n        vararg options: LinkOption\r\n    ): V? {\r\n        if (!supportsFileAttributeView(type)) {", "choices": [{"text": "\r\n            return null;\r\n        }\r\n\r\n        switch (type) {\r\n            case FileAttributeView.class:\r\n                return new FileAttributeView(path, options);\r\n            case FileAttribute.class:\r\n                return new FileAttribute(path, options);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private static boolean supportsFileAttributeView(Class<? extends FileAttributeView> type) {\r\n        return FileAttributeView.class.isAssignableFrom(type);\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/473", "ground_truth": "            return null\r\n        }\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return getFileAttributeView(path) as V\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\content\\ContentFileSystemProvider.kt"}}
{"prompt": "import java8.nio.file.Path\noverride fun toAbsolutePath(): ContentPath {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/480", "ground_truth": "        if (!isAbsolute) {\r\n            throw UnsupportedOperationException()\r\n        }\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\content\\ContentPath.kt"}}
{"prompt": "import android.net.Uri\nfun exists(uri: Uri): Boolean =\r\n        try {", "choices": [{"text": "(uri.getLastPathSegment()): Boolean =\r\n        try {\r\n            return true\r\n        } catch (Exception e) {\r\n            return false\r\n        }\r\nfun insert(uri: Uri, data: Object): Boolean =\r\n        try {\r\n            return true\r\n        } catch (Exception e) {\r\n            return false\r\n        }\r\nfun update(uri: Uri, data: Object): Boolean =\r\n        try {\r\n            return true\r\n        } catch (Exception e) {\r\n            return false\r\n        }\r"}], "metadata": {"task_id": "MaterialFiles/492", "ground_truth": "            checkExistence(uri)\r\n            true\r\n        } catch (e: ResolverException) {\r\n            false\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\content\\resolver\\Resolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.document.resolver.DocumentResolver\nimport me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport android.net.Uri\nprivate fun ((Long) -> Unit).invokeWithSize(uri: Uri) {\r\n        val size = try {\r\n            DocumentResolver.getSize(uri)\r\n        } catch (e: ResolverException) {", "choices": [{"text": "\r\n            e.printStackTrace();\r\n        }\r\n        return Unit.of(size);\r\n    }\r\n    private fun ((Long) -> Unit).invokeWithSize(uri: Uri) {\r\n        val size = try {\r\n            DocumentResolver.getSize(uri)\r\n        } catch (e: ResolverException) {\r\n            e.printStackTrace();\r\n        }\r\n        return Unit.of(size);\r\n    }\r\n    private fun ((Long) -> Unit).invokeWithSize(uri: Uri) {\r\n        val size"}], "metadata": {"task_id": "MaterialFiles/502", "ground_truth": "            e.printStackTrace()\r\n            return\r\n        } ?: return\r\n        this(size)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentCopyMove.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n}\r\n\r\noverride fun open() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isOpen = true;\r\n        }\r\n}\r\n\r\noverride fun pause() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isPaused = true;\r\n        }\r\n}\r\n\r\noverride fun resume()"}], "metadata": {"task_id": "MaterialFiles/504", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentFileSystem.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/508", "ground_truth": "    override fun newWatchService(): WatchService {\r\n        // TODO\r\n        throw UnsupportedOperationException()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "!= other?.javaClass) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun hashCode(): Number {\r\n        return javaClass.hashCode()\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return javaClass.toString()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/509", "ground_truth": "            return false\r\n        }\r\n        other as DocumentFileSystem\r\n        return treeUri == other.treeUri\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentFileSystem.kt"}}
{"prompt": "import java8.nio.file.attribute.FileAttributeView\nimport java8.nio.file.attribute.FileAttribute\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\noverride fun <V : FileAttributeView> getFileAttributeView(\r\n        path: Path,\r\n        type: Class<V>,\r\n        vararg options: LinkOption\r\n    ): V? {\r\n        if (!supportsFileAttributeView(type)) {", "choices": [{"text": "\r\n            return null;\r\n        }\r\n\r\n        switch (type) {\r\n            case FileAttributeView.class:\r\n                return new FileAttributeView(path, options);\r\n            case FileAttribute.class:\r\n                return new FileAttribute(path, options);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private static boolean supportsFileAttributeView(Class<? extends FileAttributeView> type) {\r\n        return FileAttributeView.class.isAssignableFrom(type);\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/529", "ground_truth": "            return null\r\n        }\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return getFileAttributeView(path) as V\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentFileSystemProvider.kt"}}
{"prompt": "fun exists(path: Path): Boolean =\r\n        try {", "choices": [{"text": "\r\n        fs.existsSync(path);\r\n    catch (e) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction existsSync(path: Path): Boolean =\r\n    try {\r\n        fs.existsSync(path);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nmodule.exports = {\r\n    exists,\r\n    existsSync\r\n};\r\n"}], "metadata": {"task_id": "MaterialFiles/542", "ground_truth": "            checkExistence(path)\r\n            true\r\n        } catch (e: ResolverException) {\r\n            false\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\n @Throws(ResolverException::class)", "choices": [{"text": "\nimport android.content.ContentResolver;\nimport android.content.ContentUris;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.net.Uri;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.provider.MediaStore;\nimport android.provider.MediaStore.Images;\nimport android"}], "metadata": {"task_id": "MaterialFiles/543", "ground_truth": "    fun getMimeType(path: Path): String? {\r\n        val uri = getDocumentUri(path)\r\n        return getMimeType(uri)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\n @Throws(ResolverException::class)", "choices": [{"text": "\nimport android.content.ContentResolver;\nimport android.content.ContentUris;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.net.Uri;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.provider.MediaStore;\nimport android.provider.MediaStore.Images;\nimport android"}], "metadata": {"task_id": "MaterialFiles/545", "ground_truth": "    fun getSize(path: Path): Long? {\r\n        val uri = getDocumentUri(path)\r\n        return getSize(uri)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\nimport me.zhanghai.android.files.app.contentResolver\nimport android.provider.DocumentsContract\nimport android.os.CancellationSignal\nimport android.net.Uri\nimport android.graphics.Point\nimport android.graphics.Bitmap\n @Throws(ResolverException::class)\r\n    fun getThumbnail(path: Path, width: Int, height: Int, signal: CancellationSignal): Bitmap? {\r\n        val uri = getDocumentUri(path)\r\n        return try {\r\n            DocumentsContract.getDocumentThumbnail(\r\n                contentResolver, uri, Point(width, height), signal", "choices": [{"text": ", signal);\r\n        } catch (ResolverException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    fun getDocumentUri(path: Path): Uri {\r\n        return contentResolver.insert(\r\n            DocumentsContract.Documents.CONTENT_URI, path, null);\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/547", "ground_truth": "            )\r\n        } catch (e: Exception) {\r\n            throw ResolverException(e)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\nimport android.net.Uri\nprivate fun ((Long) -> Unit).invokeWithSize(uri: Uri) {\r\n        val size = try {\r\n            getSize(uri)\r\n        } catch (e: ResolverException) {", "choices": [{"text": "\r\n            e.printStackTrace();\r\n        }\r\n        return Unit.of(size);\r\n    }\r\n    private fun ((Long) -> Unit).invokeWithSize(uri: Uri) {\r\n        val size = try {\r\n            getSize(uri)\r\n        } catch (e: ResolverException) {\r\n            e.printStackTrace();\r\n        }\r\n        return Unit.of(size);\r\n    }\r\n    private fun ((Long) -> Unit).invokeWithSize(uri: Uri) {\r\n        val size = try {\r"}], "metadata": {"task_id": "MaterialFiles/549", "ground_truth": "            e.printStackTrace()\r\n            return\r\n        } ?: return\r\n        this(size)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\nimport android.os.Build\n @Throws(ResolverException::class)\r\n    fun remove(path: Path) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && !isRemoveUnsupported(path)) {\r\n            removeApi24(path)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/554", "ground_truth": "        } else {\r\n            @Suppress(\"DEPRECATION\")\r\n            delete(path)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\nimport android.os.Build\nimport android.net.Uri\n @Throws(ResolverException::class)\r\n    fun remove(uri: Uri, parentUri: Uri) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && !isRemoveUnsupported(uri)) {", "choices": [{"text": "\r\n            return super.remove(uri, parentUri);\r\n        } else {\r\n            return super.remove(uri, parentUri);\r\n        }\r\n    }\r\n @Throws(ResolverException::class)\r\n    fun insert(uri: Uri, parentUri: Uri) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&!isInsertUnsupported(uri)) {\r\n            return super.insert(uri, parentUri);\r\n        } else {\r\n            return super.insert(uri, parentUri);\r"}], "metadata": {"task_id": "MaterialFiles/555", "ground_truth": "            removeApi24(uri, parentUri)\r\n        } else {\r\n            delete(uri)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import java8.nio.file.spi.FileSystemProvider\noperator fun get(scheme: String): FileSystemProvider {\r\n        for (provider in FileSystemProvider.installedProviders()) {\r\n            if (provider.scheme.equals(scheme, ignoreCase = true)) {", "choices": [{"text": "\r\n                return provider;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/563", "ground_truth": "                return provider\r\n            }\r\n        }\r\n        throw ProviderNotFoundException(scheme)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\FileSystemProviders.kt"}}
{"prompt": "import org.apache.commons.net.ftp.FTPClient\nprivate fun closeClient(client: FTPClient) {\r\n        try {\r\n            client.logout()", "choices": [{"text": "\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n}\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        try {\r\n            FTPClient client = new FTPClient();\r\n            client.connect(\"localhost\", 22);\r\n            closeClient(client);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/567", "ground_truth": "        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n        client.disconnect()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import org.apache.commons.net.ftp.FTPClient\nprivate inline fun <R> useClient(authority: Authority, block: (FTPClient) -> R): R {\r\n        val client = acquireClient(authority)\r\n        try {", "choices": [{"text": "\r\n            return block.apply(client);\r\n        } finally {\r\n            releaseClient(client)\r\n        }\r\n    }\r\n    private static void releaseClient(FTPClient client) {\r\n        if (client!= null) {\r\n            try {\r\n                client.disconnect();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    private static FTPClient acquireClient(Authority authority) {\r\n        try {\r\n            return new FTPClient(authority.get"}], "metadata": {"task_id": "MaterialFiles/568", "ground_truth": "            return block(client)\r\n        } finally {\r\n            releaseClient(authority, client)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/571", "ground_truth": "    fun delete(path: Path) {\r\n        val file = listFile(path, true)\r\n        delete(path, file.isDirectory)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import java8.nio.file.Path\nimport java.io.IOException\n @Throws(IOException::class)\r\n    fun delete(path: Path, isDirectory: Boolean) {\r\n        if (isDirectory) {", "choices": [{"text": "\r\n            try {\r\n                path.toFile().delete();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            try {\r\n                path.toFile().delete();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    fun delete(path: Path) {\r\n        try {\r\n            path.toFile().delete();\r\n        } catch"}], "metadata": {"task_id": "MaterialFiles/572", "ground_truth": "            deleteDirectory(path)\r\n        } else {\r\n            deleteFile(path)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n        override fun close() {\r\n            try {\r\n                super.close()\r\n                if (!client.completePendingCommand()) {\r\n                    client.throwNegativeReplyCodeException()", "choices": [{"text": "\r\n                }\r\n            } catch (IOException e) {\r\n                throw e\r\n            }\r\n            return this\r\n        }\r\n @Throws(IOException::class)\r\n        override fun flush() {\r\n            try {\r\n                super.flush()\r\n                if (!client.completePendingCommand()) {\r\n                    client.throwNegativeReplyCodeException()\r\n                }\r\n            } catch (IOException e) {\r\n                throw e\r\n            }\r\n            return this\r\n        }\r\n @Throws(IOException::class)\r\n       "}], "metadata": {"task_id": "MaterialFiles/583", "ground_truth": "                }\r\n            } finally {\r\n                releaseClient(authority, client)\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.InputStream\nimport java.io.IOException\nimport me.zhanghai.android.files.provider.common.ByteBufferInputStream\n @Throws(IOException::class)\r\n    override fun onWrite(position: Long, source: ByteBuffer) {\r\n        synchronized(clientLock) {\r\n            client.restartOffset = position\r\n            ByteBufferInputStream(source).use {\r\n                if (!client.storeFile(path, it)) {", "choices": [{"text": "\r\n                    client.restartOffset = position\r\n                    client.storeFile(path, it)\r\n                }\r\n            }\r\n        }\r\n        return super.onWrite(position, source)\r\n    }\r\n\r\n @Throws(IOException::class)\r\n    override fun onTruncate(position: Long) {\r\n        synchronized(clientLock) {\r\n            client.restartOffset = position\r\n            client.storeFile(path, it)\r\n        }\r\n        return super.onTruncate(position)\r\n    }\r\n\r\n @"}], "metadata": {"task_id": "MaterialFiles/584", "ground_truth": "                    client.throwNegativeReplyCodeException()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\FileByteChannel.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.InputStream\nimport java.io.IOException\nimport me.zhanghai.android.files.provider.common.ByteBufferInputStream\n @Throws(IOException::class)\r\n    override fun onAppend(source: ByteBuffer) {\r\n        synchronized(clientLock) {\r\n            ByteBufferInputStream(source).use {\r\n                if (!client.appendFile(path, it)) {", "choices": [{"text": "\r\n                    throw new IOException();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    override fun onAppend(source: InputStream) {\r\n        synchronized(clientLock) {\r\n            ByteBufferInputStream(source).use {\r\n                if (!client.appendFile(path, it)) {\r\n                    throw new IOException();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    override fun onAppend(source"}], "metadata": {"task_id": "MaterialFiles/585", "ground_truth": "                    client.throwNegativeReplyCodeException()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\FileByteChannel.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\nimport me.zhanghai.android.files.compat.nullInputStream\n @Throws(IOException::class)\r\n    override fun onTruncate(size: Long) {\r\n        synchronized(clientLock) {\r\n            client.restartOffset = size\r\n            InputStream::class.nullInputStream().use {\r\n                if (!client.storeFile(path, it)) {", "choices": [{"text": "\r\n                    throw new IOException()\r\n                }\r\n            }\r\n        }\r\n        return super.onTruncate(size)\r\n    }\r\n\r\n @Throws(IOException::class)\r\n    override fun onCreate(size: Long) {\r\n        synchronized(clientLock) {\r\n            client.restartOffset = size\r\n            InputStream::class.nullInputStream().use {\r\n                if (!client.storeFile(path, it)) {\r\n                    throw new IOException()\r\n                }\r\n            }\r\n        }\r\n        return super."}], "metadata": {"task_id": "MaterialFiles/586", "ground_truth": "                    client.throwNegativeReplyCodeException()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\FileByteChannel.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n}\r\n\r\noverride fun open() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isOpen = true;\r\n        }\r\n}\r\n\r\noverride fun pause() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isPaused = true;\r\n        }\r\n}\r\n\r\noverride fun resume()"}], "metadata": {"task_id": "MaterialFiles/593", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\FtpFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "!= other?.javaClass) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun hashCode(): Number {\r\n        return javaClass.hashCode()\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return javaClass.toString()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/597", "ground_truth": "            return false\r\n        }\r\n        other as FtpFileSystem\r\n        return authority == other.authority\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\FtpFileSystem.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.OpenOptions\nimport java8.nio.file.StandardOpenOption\ninternal fun OpenOptions.checkForFtp() {\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (sync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.SYNC.toString())", "choices": [{"text": ".toString())\r\n    }\r\n    if (create) {\r\n        throw UnsupportedOperationException(StandardOpenOption.CREATE.toString())\r\n    }\r\n    if (delete) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE.toString())\r\n    }\r\n    if (copy) {\r\n        throw UnsupportedOperationException(StandardOpenOption.COPY.toString())\r\n    }\r\n    if (move) {\r\n        throw UnsupportedOperationException(StandardOpenOption.MOVE.toString())\r\n    }\r\n    if (rename) {\r\n        throw UnsupportedOperationException(StandardOpenOption"}], "metadata": {"task_id": "MaterialFiles/625", "ground_truth": "    }\r\n    if (dsync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DSYNC.toString())\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\OpenOptionsFtpExtensions.kt"}}
{"prompt": "import java8.nio.file.Path\noverride fun iterator(): MutableIterator<Path> {\r\n        synchronized(lock) {\r\n            check(!isClosed) { \"This directory stream is closed\" }\r\n            check(iterator == null) { \"The iterator has already been returned\" }", "choices": [{"text": "\r\n            return iterator;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Path next() {\r\n        synchronized(lock) {\r\n            check(!isClosed) { \"This directory stream is closed\" }\r\n            check(iterator == null) { \"The iterator has already been returned\" }\r\n            return iterator.next();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean hasNext() {\r\n        synchronized(lock) {\r\n            check(!isClosed) { \"This directory stream is"}], "metadata": {"task_id": "MaterialFiles/627", "ground_truth": "            val iterator = PathIterator()\r\n            this.iterator = iterator\r\n            return iterator\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\LinuxDirectoryStream.kt"}}
{"prompt": "import java8.nio.file.Path\noverride fun next(): Path {\r\n            synchronized(lock) {\r\n                if (!hasNext()) {\r\n                    throw NoSuchElementException()\r\n                }", "choices": [{"text": "\r\n                }\r\n                return path\r\n            }\r\n        }\r\n        synchronized fun hasNext(): boolean {\r\n            synchronized(lock) {\r\n                return hasNext()\r\n            }\r\n        }\r\n        synchronized fun remove(): Path {\r\n            synchronized(lock) {\r\n                if (hasNext()) {\r\n                    throw NoSuchElementException()\r\n                }\r\n                return null\r\n            }\r\n        }\r\n        synchronized fun removeNext(): Path {\r\n            synchronized(lock) {\r\n                if (hasNext()) {\r\n                    throw"}], "metadata": {"task_id": "MaterialFiles/630", "ground_truth": "                val path = nextPath!!\r\n                nextPath = null\r\n                return path\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\LinuxDirectoryStream.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.ByteStringBuilder\nimport me.zhanghai.android.files.provider.common.ByteString\nprivate fun getFlagsFromOptions(options: ByteString): Pair<Long, ByteString> {\r\n        var flags = 0L\r\n        val builder = ByteStringBuilder()\r\n        for (option in options.split(OPTIONS_DELIMITER)) {\r\n            val flag = OPTION_FLAG_MAP[option]\r\n            if (flag != null) {\r\n                flags = flags or flag\r\n            } else {\r\n                if (!builder.isEmpty) {\r\n                    builder.append(OPTIONS_DELIMITER)\r\n                }", "choices": [{"text": ") {\r\n                    builder.append(option)\r\n                }\r\n            }\r\n        }\r\n        return new Pair<>(flags, builder.toByteString())\r\n    }\r\n    private static final String OPTIONS_DELIMITER = \",\"\r\n    private static final String[] OPTION_FLAG_MAP = new String[] {\r\n            \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \""}], "metadata": {"task_id": "MaterialFiles/648", "ground_truth": "                builder.append(option)\r\n            }\r\n        }\r\n        return flags to builder.toByteString()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\LocalLinuxFileStore.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.linux.syscall.SyscallException\nimport me.zhanghai.android.files.provider.linux.syscall.Syscall\nimport me.zhanghai.android.files.provider.linux.syscall.StructMntent\n @Throws(SyscallException::class)\r\n        private fun getMountEntries(): List<StructMntent> {\r\n            val entries = mutableListOf<StructMntent>()\r\n            val file = Syscall.setmntent(PATH_PROC_SELF_MOUNTS, MODE_R)\r\n            try {\r\n                while (true) {\r\n                    val mntent = Syscall.getmntent(file) ?: break\r\n                    entries += mntent\r\n                }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/655", "ground_truth": "            } finally {\r\n                Syscall.endmntent(file)\r\n            }\r\n            return entries\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\LocalLinuxFileStore.kt"}}
{"prompt": "import java.io.File\nimport androidx.annotation.RequiresApi\nimport android.provider.MediaStore\nimport android.os.Handler\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.Q)\r\n    private fun deleteMediaStoreEntryAsync(file: File) {\r\n        deleteMediaStoreEntryHandler.post {\r\n            try {\r\n                deleteMediaStoreEntrySync(file)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/676", "ground_truth": "            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\media\\MediaScanner.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport me.zhanghai.android.files.provider.root.isRunningAsRoot\nimport me.zhanghai.android.files.provider.common.DelegateFileChannel\nimport java8.nio.channels.FileChannel\nfun createScanOnCloseFileChannel(fileChannel: FileChannel, file: File): FileChannel =\r\n        if (isRunningAsRoot) {\r\n            fileChannel\r\n        } else {\r\n            object : DelegateFileChannel(fileChannel) {\r\n                @Throws(IOException::class)\r\n                override fun implCloseChannel() {\r\n                    super.implCloseChannel()", "choices": [{"text": "\r\n                }\r\n\r\n                @Throws(IOException::class)\r\n                override fun implRead(byte[] b) {\r\n                    super.implRead(b)\r\n                }\r\n\r\n                @Throws(IOException::class)\r\n                override fun implRead(byte[] b, int off, int len) {\r\n                    super.implRead(b, off, len)\r\n                }\r\n\r\n                @Throws(IOException::class)\r\n                override fun implWrite(byte[] b) {\r\n                    super.implWrite(b)\r"}], "metadata": {"task_id": "MaterialFiles/677", "ground_truth": "\r\n                    scan(file)\r\n                }\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\media\\MediaScanner.kt"}}
{"prompt": "import java.io.FileDescriptor\n @Throws(SyscallException::class)\r\n    fun close(fd: FileDescriptor) {\r\n        try {", "choices": [{"text": " {\r\n            fd.close();\r\n        } catch (IOException e) {\r\n            throw e;\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    fun close(fd: FileDescriptor) {\r\n        try {\r\n            fd.close();\r\n        } catch (IOException e) {\r\n            throw e;\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    fun close(fd: FileDescriptor) {\r\n        try {\r\n            fd.close();\r\n        } catch ("}], "metadata": {"task_id": "MaterialFiles/678", "ground_truth": "            Os.close(fd)\r\n        } catch (e: ErrnoException) {\r\n            throw SyscallException(e)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\syscall\\Syscall.kt"}}
{"prompt": "import java.io.FileDescriptor\nimport androidx.annotation.Size\nimport android.system.Os\n @Size(2)\r\n    @Throws(SyscallException::class)\r\n    fun socketpair(domain: Int, type: Int, protocol: Int): Array<FileDescriptor> {\r\n        val fds = arrayOf(FileDescriptor(), FileDescriptor())\r\n        try {\r\n            Os.socketpair(domain, type, protocol, fds[0], fds[1])", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/687", "ground_truth": "        } catch (e: ErrnoException) {\r\n            throw SyscallException(e)\r\n        }\r\n        return fds\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\syscall\\Syscall.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport java.io.IOException\nimport android.os.IInterface\nimport android.os.Binder\n\r\n@OptIn(ExperimentalContracts::class)\r\nfun <T, R> T.tryRun(exception: ParcelableException, block: T.() -> R): R?\r\n    where T : IInterface, T : Binder {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {\r\n        block()\r\n    } catch (e: IOException) {\r\n        exception.value = e\r\n        null", "choices": [{"text": " return null\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalContracts::class)\r\nfun <T, R> T.tryRun(exception: ParcelableException, block: T.() -> R): R?\r\n    where T : IInterface, T : Binder {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {\r\n        block()\r\n    } catch (e: IOException) {\r\n        exception.value = e\r\n       "}], "metadata": {"task_id": "MaterialFiles/693", "ground_truth": "    } catch (e: RuntimeException) {\r\n        exception.value = e\r\n        null\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\IInterfaceExtensions.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\n @Throws(IOException::class)\r\n    override fun read(buffer: ByteArray, offset: Int, length: Int): Int =\r\n        if (remoteInputStream != null) {\r\n            val remoteBuffer = ByteArray(length)\r\n            val size = remoteInputStream.call { exception -> read2(remoteBuffer, exception) }\r\n            if (size > 0) {\r\n                remoteBuffer.copyInto(buffer, offset, 0, size)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/719", "ground_truth": "            }\r\n            size\r\n        } else {\r\n            localInputStream!!.read(buffer, offset, length)\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteInputStream.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.IOException\n @Throws(IOException::class)\r\n    override fun read(destination: ByteBuffer): Int =\r\n        if (remoteChannel != null) {\r\n            val destinationBytes = ByteArray(destination.remaining())\r\n            val size = remoteChannel.call { exception -> read(destinationBytes, exception) }\r\n            if (size > 0) {\r\n                destination.put(destinationBytes, 0, size)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/729", "ground_truth": "            }\r\n            size\r\n        } else {\r\n            localChannel!!.read(destination)\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteSeekableByteChannel.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.channels.SeekableByteChannel\n @Throws(IOException::class)\r\n    override fun position(newPosition: Long): SeekableByteChannel {\r\n        if (remoteChannel != null) {\r\n            remoteChannel.call { exception -> position2(newPosition, exception) }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/732", "ground_truth": "        } else {\r\n            localChannel!!.position(newPosition)\r\n        }\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteSeekableByteChannel.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.channels.SeekableByteChannel\n @Throws(IOException::class)\r\n    override fun truncate(size: Long): SeekableByteChannel {\r\n        if (remoteChannel != null) {\r\n            remoteChannel.call { exception -> truncate(size, exception) }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/734", "ground_truth": "        } else {\r\n            return localChannel!!.truncate(size)\r\n        }\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteSeekableByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun close() {\r\n        if (remoteChannel != null) {\r\n            remoteChannel.call { exception -> close(exception) }", "choices": [{"text": "\r\n                remoteChannel.call { exception -> close(exception); }\r\n            }\r\n        }\r\n        return super.close();\r\n    }\r\n @Throws(IOException::class)\r\n    override fun flush() {\r\n        if (remoteChannel!= null) {\r\n            remoteChannel.call { exception -> flush(exception); }\r\n        }\r\n        return super.flush();\r\n    }\r\n @Throws(IOException::class)\r\n    override fun read() {\r\n        if (remoteChannel!= null) {\r\n            remoteChannel."}], "metadata": {"task_id": "MaterialFiles/737", "ground_truth": "            isRemoteClosed = true\r\n        } else {\r\n            localChannel!!.close()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteSeekableByteChannel.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.file.FileSystem\n @Throws(IOException::class)\r\n    override fun close() {\r\n        val wasOpen = localFileSystem.isOpen\r\n        localFileSystem.close()", "choices": [{"text": "\r\n        return () -> {\r\n            val wasClosed = localFileSystem.isOpen\r\n            localFileSystem.close()\r\n            return () -> {\r\n                val wasClosed2 = localFileSystem.isOpen\r\n                localFileSystem.close()\r\n                return () -> {\r\n                    val wasClosed3 = localFileSystem.isOpen\r\n                    localFileSystem.close()\r\n                    return () -> {\r\n                        val wasClosed4 = localFileSystem.isOpen\r\n                        localFileSystem.close()\r\n                        return () -> {\r\n                            val wasClosed5 = localFileSystem"}], "metadata": {"task_id": "MaterialFiles/741", "ground_truth": "        // TODO: No need for this check?\r\n        if (wasOpen) {\r\n            rootFileSystem.close()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\root\\RootableFileSystem.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.file.Path\n\r\n@Throws(IOException::class)\r\nfun <T, R> callRootable(\r\n    path: Path,\r\n    isAttributeAccess: Boolean,\r\n    localObject: T,\r\n    rootObject: T, block: T.() -> R\r\n): R {\r\n    path as? RootablePath ?: throw IllegalArgumentException(\"$path is not a RootablePath\")\r\n    return when (rootStrategy) {\r\n        RootStrategy.NEVER -> localObject.block()\r\n        RootStrategy.AUTOMATIC ->\r\n            if (path.isRootRequired(isAttributeAccess)) {\r\n                rootObject.block()\r\n            } else {", "choices": [{"text": "\r\n                localObject.block()\r\n            }\r\n    }\r\n}\r\n\r\n@Throws(IOException::class)\r\nfun <T, R> callRootable(\r\n    path: Path,\r\n    isAttributeAccess: Boolean,\r\n    localObject: T,\r\n    rootObject: T, block: T.() -> R\r\n): R {\r\n    path as? RootablePath?: throw IllegalArgumentException(\"$path is not a RootablePath\")\r\n    return when (rootStrategy) {\r\n        RootStrategy.NEVER ->"}], "metadata": {"task_id": "MaterialFiles/744", "ground_truth": "                localObject.block()\r\n            }\r\n        RootStrategy.ALWAYS -> rootObject.block()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\root\\RootablePath.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun setReadOnly(readOnly: Boolean) {\r\n        callRootable(path) {\r\n            isReadOnly = readOnly", "choices": [{"text": "\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    override fun setWritable(writable: Boolean) {\r\n        callRootable(path) {\r\n            writable = writable\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    override fun setReadable(readable: Boolean) {\r\n        callRootable(path) {\r\n            readable = readable\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    override fun setExecutable(executable: Boolean) {\r\n        callRootable"}], "metadata": {"task_id": "MaterialFiles/745", "ground_truth": "            if (this == rootFileStore) {\r\n                localFileStore.refresh()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\root\\RootablePosixFileStore.kt"}}
{"prompt": "import rikka.sui.Sui\nimport me.zhanghai.android.files.app.application\nimport androidx.annotation.ChecksSdkIntAtLeast\nimport android.os.Build\n @ChecksSdkIntAtLeast(api = Build.VERSION_CODES.M)\r\n    fun isSuiAvailable(): Boolean {\r\n        synchronized(lock) {\r\n            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\r\n                return false\r\n            }\r\n            if (!isSuiIntialized) {\r\n                Sui.init(application.packageName)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/748", "ground_truth": "                isSuiIntialized = true\r\n            }\r\n            return Sui.isSui()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\root\\SuiFileServiceLauncher.kt"}}
{"prompt": "import java8.nio.file.Path\nimport net.schmizz.sshj.sftp.OpenMode\nimport net.schmizz.sshj.sftp.FileAttributes\n @Throws(ClientException::class)\r\n    fun access(path: Path, flags: Set<OpenMode>) {\r\n        val file = open(path, flags, FileAttributes.EMPTY)\r\n        try {", "choices": [{"text": "\r\n            return file;\r\n        } finally {\r\n            close(file);\r\n        }\r\n    }\r\n\r\n @Throws(ClientException::class)\r\n    fun open(path: Path, flags: Set<OpenMode>, attributes: FileAttributes) {\r\n        val file = open(path, flags, attributes)\r\n        try {\r\n            return file;\r\n        } finally {\r\n            close(file);\r\n        }\r\n    }\r\n\r\n @Throws(ClientException::class)\r\n    fun open(path: Path,"}], "metadata": {"task_id": "MaterialFiles/752", "ground_truth": "            file.close()\r\n        } catch (e: IOException) {\r\n            throw ClientException(e)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\client\\Client.kt"}}
{"prompt": "import java8.nio.file.Path\nimport net.schmizz.sshj.sftp.FileMode\n @Throws(ClientException::class)\r\n    fun remove(path: Path) {\r\n        val attributes = lstat(path)\r\n        val isDirectory = attributes.type == FileMode.Type.DIRECTORY\r\n        if (isDirectory) {", "choices": [{"text": "\r\n            return removeDirectory(path)\r\n        } else {\r\n            return removeFile(path)\r\n        }\r\n    }\r\n @Throws(ClientException::class)\r\n    fun removeDirectory(path: Path) {\r\n        val attributes = lstat(path)\r\n        val isDirectory = attributes.type == FileMode.Type.DIRECTORY\r\n        if (isDirectory) {\r\n            return removeDirectory(path)\r\n        } else {\r\n            return removeFile(path)\r\n        }\r\n    }\r\n @Throws(ClientException::class"}], "metadata": {"task_id": "MaterialFiles/759", "ground_truth": "            rmdir(path)\r\n        } else {\r\n            unlink(path)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\client\\Client.kt"}}
{"prompt": "import java.io.IOException\nimport net.schmizz.sshj.sftp.SFTPException\n @Throws(IOException::class)\r\n    override fun onClose() {\r\n        try {\r\n            file.close()\r\n        } catch (e: SFTPException) {\r\n            // NO_SUCH_FILE is returned when canceling an in-progress copy to SFTP server.", "choices": [{"text": "\r\n        }\r\n    }\r\n\r\n @Throws(IOException::class)\r\n    override fun onError() {\r\n        try {\r\n            file.close()\r\n        } catch (e: SFTPException) {\r\n            // NO_SUCH_FILE is returned when canceling an in-progress copy to SFTP server.\r\n        }\r\n    }\r\n\r\n @Throws(IOException::class)\r\n    override fun onProgress() {\r\n        try {\r\n            file.close()\r\n        } catch (e: SFTPException)"}], "metadata": {"task_id": "MaterialFiles/769", "ground_truth": "            if (e.statusCode != Response.StatusCode.NO_SUCH_FILE) {\r\n                throw e\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\client\\FileByteChannel.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n}\r\n\r\noverride fun open() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isOpen = true;\r\n        }\r\n}\r\n\r\noverride fun pause() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isPaused = true;\r\n        }\r\n}\r\n\r\noverride fun resume()"}], "metadata": {"task_id": "MaterialFiles/773", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\SftpFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "!= other?.javaClass) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun hashCode(): Number {\r\n        return javaClass.hashCode()\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return javaClass.toString()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/777", "ground_truth": "            return false\r\n        }\r\n        other as SftpFileSystem\r\n        return authority == other.authority\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\SftpFileSystem.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun onForce(metaData: Boolean) {\r\n        try {", "choices": [{"text": "\r\n            super.onForce(metaData);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    override fun onForce(metaData: Boolean) {\r\n        try {\r\n            super.onForce(metaData);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n @Throws(IOException::class)\r\n    override fun onForce(metaData: Boolean) {\r\n       "}], "metadata": {"task_id": "MaterialFiles/813", "ground_truth": "            file.flush()\r\n        } catch (e: SMBRuntimeException) {\r\n            throw e.toIOException()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\client\\FileByteChannel.kt"}}
{"prompt": "import java.io.InterruptedIOException\n\r\n@Throws(InterruptedIOException::class)", "choices": [{"text": "\r\npublic class InterruptedIOException extends IOException {\r\n\r\n\tpublic InterruptedIOException() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tpublic InterruptedIOException( String message ) {\r\n\t\tsuper( message );\r\n\t}\r\n\r\n\tpublic InterruptedIOException( String message, Throwable cause ) {\r\n\t\tsuper( message, cause );\r\n\t}\r\n\r\n\tpublic InterruptedIOException( Throwable cause ) {\r\n\t\tsuper( cause );\r\n\t}\r\n\r\n\tpublic InterruptedIOException( String message, Throwable cause, boolean enableSuppression"}], "metadata": {"task_id": "MaterialFiles/816", "ground_truth": "private fun throwIfInterrupted() {\r\n    if (Thread.interrupted()) {\r\n        throw InterruptedIOException()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\client\\FileExtensions.kt"}}
{"prompt": "import me.zhanghai.android.files.util.enumSetOf\nimport me.zhanghai.android.files.provider.common.OpenOptions\nimport com.hierynomus.msdtyp.AccessMask\ninternal fun OpenOptions.toSmbDesiredAccess(): Set<AccessMask> =\r\n    enumSetOf<AccessMask>().apply {\r\n        if (read) {\r\n            this += AccessMask.GENERIC_READ", "choices": [{"text": ";\r\n        }\r\n        if (write) {\r\n            this += AccessMask.GENERIC_WRITE;\r\n        }\r\n        if (execute) {\r\n            this += AccessMask.GENERIC_EXECUTE;\r\n        }\r\n        if (create) {\r\n            this += AccessMask.GENERIC_CREATE;\r\n        }\r\n        if (delete) {\r\n            this += AccessMask.GENERIC_DELETE;\r\n        }\r\n        if (move) {\r\n            this += AccessMask.GENERIC_MOVE;\r"}], "metadata": {"task_id": "MaterialFiles/820", "ground_truth": "        }\r\n        if (write) {\r\n            this += AccessMask.GENERIC_WRITE\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\OpenOptionsSmbExtensions.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {\r\n            return false\r\n        }\r\n        other as SmbFileKey\r\n        return if (fileId != 0L || other.fileId != 0L) {\r\n            path.authority == other.path.authority\r\n                && path.sharePath!!.name == other.path.sharePath!!.name", "choices": [{"text": "\r\n                && path.sharePath!!.type == other.path.sharePath!!.type\r\n                && path.sharePath!!.name == other.path.sharePath!!.name\r\n                && path.sharePath!!.type == other.path.sharePath!!.type\r\n                && path.sharePath!!.name == other.path.sharePath!!.name\r\n                && path.sharePath!!.type == other.path.sharePath!!.type\r\n                && path.sharePath!!.name == other.path.sharePath!!.name\r\n"}], "metadata": {"task_id": "MaterialFiles/825", "ground_truth": "                && fileId == other.fileId\r\n        } else {\r\n            path == other.path\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\SmbFileKey.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n}\r\n\r\noverride fun open() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isOpen = true;\r\n        }\r\n}\r\n\r\noverride fun pause() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isPaused = true;\r\n        }\r\n}\r\n\r\noverride fun resume()"}], "metadata": {"task_id": "MaterialFiles/827", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\SmbFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "!= other?.javaClass) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun hashCode(): Number {\r\n        return javaClass.hashCode()\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return javaClass.toString()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/831", "ground_truth": "            return false\r\n        }\r\n        other as SmbFileSystem\r\n        return authority == other.authority\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\SmbFileSystem.kt"}}
{"prompt": "val id\nval directory Directory\nval key\n override fun cancel(key: SmbWatchKey) {\r\n        val notifier = synchronized(notifiers) { notifiers.remove(key.watchable())!! }\r\n        notifier.interrupt()\r\n        try {", "choices": [{"text": "(key.watchable()) {\r\n                notifier.cancel()\r\n        } catch (e) {\r\n                console.error(e)\r\n        }\r\n}\r\n\r\nval notifiers = new Set()\r\n\r\nval watch(key: SmbWatchKey) {\r\n        notifiers.add(key.watchable())\r\n}\r\n\r\nval unwatch(key: SmbWatchKey) {\r\n        notifiers.delete(key.watchable())\r\n}\r\n\r\nval watchable(key: SmbWatchKey)"}], "metadata": {"task_id": "MaterialFiles/857", "ground_truth": "            notifier.join()\r\n        } catch (e: InterruptedException) {\r\n            e.printStackTrace()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\SmbWatchService.kt"}}
{"prompt": "import okhttp3.Response\nimport java8.nio.file.Path\nimport at.bitfire.dav4jvm.exception.DavException\nimport at.bitfire.dav4jvm.Response\nimport at.bitfire.dav4jvm.DavResource\n @Throws(DavException::class)\r\n    fun findProperties(path: Path, noFollowLinks: Boolean): Response {\r\n        synchronized(collectionMemberCache) {\r\n            collectionMemberCache.remove(path)?.let { return it }\r\n        }\r\n        try {\r\n            return findProperties(\r\n                DavResource(getClient(path.authority), path.url), *FILE_PROPERTIES", "choices": [{"text": ", noFollowLinks\r\n            );\r\n        } catch (DavException e) {\r\n            throw e;\r\n        } catch (Exception e) {\r\n            throw new DavException(e);\r\n        }\r\n    }\r\n\r\n @Throws(DavException::class)\r\n    fun findChildren(path: Path, noFollowLinks: Boolean): Response {\r\n        synchronized(collectionMemberCache) {\r\n            collectionMemberCache.remove(path)?.let { return it }\r\n        }\r\n        try {\r\n            return find"}], "metadata": {"task_id": "MaterialFiles/865", "ground_truth": "            )\r\n        } catch (e: IOException) {\r\n            throw e.toDavException()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\client\\Client.kt"}}
{"prompt": "import java8.nio.file.Path\nimport me.zhanghai.android.files.provider.common.NotifyEntryModifiedSeekableByteChannel\nimport java8.nio.channels.SeekableByteChannel\nimport at.bitfire.dav4jvm.exception.DavException\nimport at.bitfire.dav4jvm.DavResource\n @Throws(DavException::class)\r\n    fun openByteChannel(path: Path, isAppend: Boolean): SeekableByteChannel {\r\n        try {\r\n            val client = getClient(path.authority)\r\n            val resource = DavResource(client, path.url)\r\n            val patchSupport = resource.getPatchSupport()\r\n            return NotifyEntryModifiedSeekableByteChannel(\r\n                FileByteChannel(resource, patchSupport, isAppend), path as Java8Path", "choices": [{"text": ");\r\n        } catch (DavException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n @Throws(DavException::class)\r\n    fun openByteChannel(path: Path): SeekableByteChannel {\r\n        try {\r\n            val client = getClient(path.authority)\r\n            val resource = DavResource(client, path.url)\r\n            val patchSupport = resource.getPatchSupport()\r\n            return NotifyEntryModifiedSeekableByteChannel(\r\n                FileByteChannel(resource, patch"}], "metadata": {"task_id": "MaterialFiles/866", "ground_truth": "            )\r\n        } catch (e: IOException) {\r\n            throw e.toDavException()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\client\\Client.kt"}}
{"prompt": "import java.io.IOException\nimport at.bitfire.dav4jvm.exception.DavException\nimport at.bitfire.dav4jvm.DavResource\n\r\n@Throws(DavException::class, IOException::class)\r\nfun DavResource.getPatchSupport(): PatchSupport {\r\n    lateinit var patchSupport: PatchSupport\r\n    options { davCapabilities, response ->\r\n        patchSupport = when {\r\n            response.headers[\"Server\"]?.contains(\"Apache\") == true &&\r\n                \"<http://apache.org/dav/propset/fs/1>\" in davCapabilities ->\r\n                PatchSupport.APACHE\r\n\r\n            \"sabredav-partialupdate\" in davCapabilities -> PatchSupport.SABRE", "choices": [{"text": "\r\n        }\r\n    }\r\n    return patchSupport\r\n}\r\n\r\n@Throws(DavException::class, IOException::class)\r\nfun DavResource.setPatchSupport(patchSupport: PatchSupport) {\r\n    lateinit var patchSupport: PatchSupport\r\n    options { davCapabilities, response ->\r\n        patchSupport = when {\r\n            response.headers[\"Server\"]?.contains(\"Apache\") == true &&\r\n                \"<http://apache.org/dav/propset/fs/1>\" in davCapabilities ->\r\n               "}], "metadata": {"task_id": "MaterialFiles/868", "ground_truth": "            else -> PatchSupport.NONE\r\n        }\r\n    }\r\n    return patchSupport\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\client\\DavResourceCompat.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport okio.BufferedSink\nimport okhttp3.RequestBody\nimport okhttp3.Request\nimport okhttp3.MediaType\nprivate fun ByteBuffer.toRequestBody(contentType: MediaType? = null): RequestBody {\r\n    val contentLength = remaining().toLong()\r\n    mark()\r\n    return object : RequestBody() {\r\n        override fun contentType() = contentType\r\n\r\n        override fun contentLength(): Long = contentLength\r\n\r\n        override fun writeTo(sink: BufferedSink) {", "choices": [{"text": "\r\n            sink.write(remaining())\r\n        }\r\n    }\r\n}\r\nprivate fun ByteBuffer.toRequest(contentType: MediaType? = null): Request {\r\n    val contentLength = remaining().toLong()\r\n    mark()\r\n    return object : Request() {\r\n        override fun contentType() = contentType\r\n\r\n        override fun contentLength(): Long = contentLength\r\n\r\n        override fun writeTo(sink: BufferedSink) {\r\n            sink.write(remaining())\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/869", "ground_truth": "            reset()\r\n            sink.write(this@toRequestBody)\r\n        }\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\client\\DavResourceCompat.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.OpenOptions\nimport java8.nio.file.StandardOpenOption\ninternal fun OpenOptions.checkForWebDav() {\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (sync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.SYNC.toString())", "choices": [{"text": ".toString())\r\n    }\r\n    if (create) {\r\n        throw UnsupportedOperationException(StandardOpenOption.CREATE.toString())\r\n    }\r\n    if (delete) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE.toString())\r\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (sync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.SYNC.toString())\r\n    }\r\n    if (create) {\r\n       "}], "metadata": {"task_id": "MaterialFiles/873", "ground_truth": "    }\r\n    if (dsync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DSYNC.toString())\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\OpenOptionsWebDavExtensions.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n}\r\n\r\noverride fun open() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isOpen = true;\r\n        }\r\n}\r\n\r\noverride fun pause() {\r\n        synchronized(lock) {\r\n            if (isOpen) {\r\n                return;\r\n            }\r\n            isPaused = true;\r\n        }\r\n}\r\n\r\noverride fun resume()"}], "metadata": {"task_id": "MaterialFiles/875", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\WebDavFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "!= other?.javaClass) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun hashCode(): Number {\r\n        return javaClass.hashCode()\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return javaClass.toString()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/879", "ground_truth": "            return false\r\n        }\r\n        other as WebDavFileSystem\r\n        return authority == other.authority\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\WebDavFileSystem.kt"}}
{"prompt": "import java.util.Locale\nimport me.zhanghai.android.files.app.application\noverride fun persistString(value: String?): Boolean {\r\n        applicationLocale = if (value != null && value != VALUE_SYSTEM_DEFAULT) {\r\n            Locale.forLanguageTag(value)", "choices": [{"text": ".toLowerCase());\r\n        } else {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    override fun persistInt(value: Integer?): Boolean {\r\n        return persistString(value.toString());\r\n    }\r\n\r\n    override fun persistFloat(value: Float?): Boolean {\r\n        return persistString(value.toString());\r\n    }\r\n\r\n    override fun persistBoolean(value: Boolean?): Boolean {\r\n        return persistString(value.toString());\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/923", "ground_truth": "        } else {\r\n            null\r\n        }\r\n        return true\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\LocalePreference.kt"}}
{"prompt": "override fun onClick() {\r\n        // Don't show dialog if we have an intent.\r\n        if (intent != null) {", "choices": [{"text": "\r\n            return;\r\n        }\r\n\r\n        // Show the dialog.\r\n        dialog.show();\r\n    }\r\n\r\n    /**\r\n     * Called when the dialog is closed.\r\n     */\r\n    onCancel() {\r\n        // Don't show dialog if we have an intent.\r\n        if (intent!= null) {\r\n            return;\r\n        }\r\n\r\n        // Hide the dialog.\r\n        dialog.hide();\r\n    }\r\n\r\n    /**\r\n     * Called when the dialog is"}], "metadata": {"task_id": "MaterialFiles/924", "ground_truth": "            return\r\n        }\r\n\r\n        super.onClick()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\LocalePreference.kt"}}
{"prompt": "override fun setText(text: String?) {\r\n        text ?: return\r\n        integer = try {", "choices": [{"text": "\r\n            integer = parseInt(text)\r\n        }\r\n        catch (e) {\r\n            integer = text\r\n        }\r\n        return integer\r\n    }\r\n}\r\n\r\nexport default {\r\n    setText\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/926", "ground_truth": "            text.toInt()\r\n        } catch (e: NumberFormatException) {\r\n            return\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\NonNegativeIntegerPreference.kt"}}
{"prompt": "import android.os.Parcelable\noverride fun onSaveInstanceState(): Parcelable? {\r\n        val superState = super.onSaveInstanceState()\r\n        if (isPersistent) {", "choices": [{"text": "\r\n            return superState\r\n        else {\r\n            return superState.putParcelable(\"isPersistent\", isPersistent)\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int describeContents() {\r\n        return 0\r\n    }\r\n\r\n    @Override\r\n    public void writeToParcel(Parcel dest, int flags) {\r\n        super.writeToParcel(dest, flags)\r\n        dest.writeParcelable(isPersistent, flags)\r\n    }\r\n\r\n    @Override\r\n"}], "metadata": {"task_id": "MaterialFiles/927", "ground_truth": "            return superState\r\n        }\r\n\r\n        return State(superState, integer)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\NonNegativeIntegerPreference.kt"}}
{"prompt": "import android.os.Parcelable\noverride fun onRestoreInstanceState(state: Parcelable?) {\r\n        if (state == null || state !is State) {\r\n            super.onRestoreInstanceState(state)\r\n            return", "choices": [{"text": "\r\n        }\r\n        if (state instanceof State) {\r\n            super.onRestoreInstanceState(state);\r\n            return;\r\n        }\r\n        if (state instanceof Parcelable) {\r\n            super.onRestoreInstanceState((Parcelable) state);\r\n            return;\r\n        }\r\n        super.onRestoreInstanceState(state);\r\n        return;\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/928", "ground_truth": "        }\r\n\r\n        super.onRestoreInstanceState(state.superState)\r\n        integer = state.integer\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\NonNegativeIntegerPreference.kt"}}
{"prompt": "import android.content.Intent\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        if (requestCode == this.requestCode) {\r\n            val result = pickDirectoryContract.parseResult(resultCode, data)", "choices": [{"text": "\r\n            if (resultCode == this.resultCode) {\r\n                this.onPickDirectoryResult(result);\r\n            } else {\r\n                this.onPickDirectoryError(result);\r\n            }\r\n        } else {\r\n            this.onPickDirectoryError(null);\r\n        }\r\n    }\r\n    onPickDirectoryResult(result: PickDirectoryResult) {\r\n        this.onPickDirectoryResult(result);\r\n    }\r\n    onPickDirectoryError(error: PickDirectoryError) {\r\n        this.onPickDirectory"}], "metadata": {"task_id": "MaterialFiles/931", "ground_truth": "            if (result != null) {\r\n                path = result\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\PathPreference.kt"}}
{"prompt": "import me.zhanghai.android.files.util.use\nimport me.zhanghai.android.files.util.Base64\nimport android.os.Parcel\nprivate fun T.toParcelBase64(): Base64 {\r\n        val bytes = Parcel.obtain().use { parcel ->", "choices": [{"text": "\r\n            parcel -> {\r\n                parcel.setDataPosition(0);\r\n                return parcel.readByteArray();\r\n            }\r\n        };\r\n        return bytes;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "MaterialFiles/947", "ground_truth": "            parcel.writeValue(this)\r\n            parcel.marshall()\r\n        }\r\n        return bytes.toBase64()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\SettingLiveDatas.kt"}}
{"prompt": "import android.os.Bundle\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)", "choices": [{"text": "(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        this.setContentView(R.layout.activity_main)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "MaterialFiles/971", "ground_truth": "\r\n        if (savedInstanceState == null) {\r\n            openDocumentTreeLauncher.launchSafe(null, this)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\AddDocumentTreeFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.file.asDocumentTreeUriOrNull\nimport me.zhanghai.android.files.file.DocumentTreeUri\nimport android.net.Uri\nprivate fun onOpenDocumentTreeResult(result: Uri?) {\r\n        val treeUri = result?.asDocumentTreeUriOrNull()", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/972", "ground_truth": "        if (treeUri != null) {\r\n            addDocumentTree(treeUri)\r\n        }\r\n        finish()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\AddDocumentTreeFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.provider.ftp.client.Mode\nimport me.zhanghai.android.files.R\nprivate fun connectAndAdd() {\r\n        if (!viewModel.connectState.value.isReady) {", "choices": [{"text": "\r\n                viewModel.connectState.value.isReady = true;\r\n                viewModel.connectState.value.isConnecting = true;\r\n                viewModel.connectState.value.connecting = true;\r\n                viewModel.connectState.value.connecting = true;\r\n                viewModel.connectState.value.connecting = true;\r\n                viewModel.connectState.value.connecting = true;\r\n                viewModel.connectState.value.connecting = true;\r\n                viewModel.connectState.value.connecting = true;\r\n                viewModel.connectState."}], "metadata": {"task_id": "MaterialFiles/999", "ground_truth": "            return\r\n        }\r\n        val server = getServerOrSetError() ?: return\r\n        viewModel.connect(server)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\EditFtpServerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.R\nprivate fun connectAndAdd() {\r\n        if (!viewModel.connectState.value.isReady) {", "choices": [{"text": ".isReady) {\r\n                viewModel.connectState.value.isReady = true;\r\n                viewModel.addState.value.isReady = true;\r\n        }\r\n        else {\r\n                viewModel.connectState.value.isReady = false;\r\n                viewModel.addState.value.isReady = false;\r\n        }\r\n}\r\n@Override\r\npublic void onResume() {\r\n        super.onResume();\r\n        connectAndAdd();\r\n}\r\n@Override\r\npublic void onPause() {\r\n        super."}], "metadata": {"task_id": "MaterialFiles/1009", "ground_truth": "            return\r\n        }\r\n        val server = getServerOrSetError() ?: return\r\n        viewModel.connect(server)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\EditSftpServerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.R\nprivate fun connectAndAdd() {\r\n        if (!viewModel.connectState.value.isReady) {", "choices": [{"text": ".isReady) {\r\n                viewModel.connectState.value.isReady = true;\r\n                viewModel.addState.value.isReady = true;\r\n        }\r\n        else {\r\n                viewModel.connectState.value.isReady = false;\r\n                viewModel.addState.value.isReady = false;\r\n        }\r\n}\r\n@Override\r\npublic void onResume() {\r\n        super.onResume();\r\n        connectAndAdd();\r\n}\r\n@Override\r\npublic void onPause() {\r\n        super."}], "metadata": {"task_id": "MaterialFiles/1018", "ground_truth": "            return\r\n        }\r\n        val server = getServerOrSetError() ?: return\r\n        viewModel.connect(server)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\EditSmbServerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.R\nprivate fun connectAndAdd() {\r\n        if (!viewModel.connectState.value.isReady) {", "choices": [{"text": ".isReady) {\r\n                viewModel.connectState.value.isReady = true;\r\n                viewModel.addState.value.isReady = true;\r\n        }\r\n        else {\r\n                viewModel.connectState.value.isReady = false;\r\n                viewModel.addState.value.isReady = false;\r\n        }\r\n}\r\n@Override\r\npublic void onResume() {\r\n        super.onResume();\r\n        connectAndAdd();\r\n}\r\n@Override\r\npublic void onPause() {\r\n        super."}], "metadata": {"task_id": "MaterialFiles/1026", "ground_truth": "            return\r\n        }\r\n        val server = getServerOrSetError() ?: return\r\n        viewModel.connect(server)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\EditWebDavServerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.valueCompat\nimport me.zhanghai.android.files.settings.Settings\nfun addOrReplace(storage: Storage) {\r\n        val storages = Settings.STORAGES.valueCompat.toMutableList().apply {\r\n            val index = indexOfFirst { it.id == storage.id }\r\n            if (index != -1) {\r\n                this[index] = storage\r\n            } else {", "choices": [{"text": "\r\n                this.push(storage)\r\n            }\r\n        }\r\n        return storages\r\n    }\r\nfun indexOfFirst(storage: Storage) {\r\n        val storages = Settings.STORAGES.valueCompat.toMutableList().apply {\r\n            val index = indexOfFirst { it.id == storage.id }\r\n            if (index!= -1) {\r\n                return index\r\n            } else {\r\n                return -1\r\n            }\r\n        }\r\n        return storages.indexOf(storage)\r\n    }\r"}], "metadata": {"task_id": "MaterialFiles/1043", "ground_truth": "                this += storage\r\n            }\r\n        }\r\n        Settings.STORAGES.putValue(storages)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\Storages.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport java.net.URI\nfun KClass<URI>.createOrLog(uri: String): URI? =\r\n    try {", "choices": [{"text": " {\r\n        return URI.create(uri);\r\n    } catch (URISyntaxException e) {\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "MaterialFiles/1047", "ground_truth": "        URI(uri)\r\n    } catch (e: URISyntaxException) {\r\n        e.printStackTrace()\r\n        null\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\URIExtensions.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport java.net.URI\nfun KClass<URI>.isValidHost(host: String): Boolean =\r\n    try {", "choices": [{"text": "(host: String): Boolean =\r\n    try:\r\n        URI(host)\r\n        return True\r\n    except:\r\n        return False\r\n\r\nfun KClass<URI>.isValidPath(path: String): Boolean =\r\n    try:\r\n        URI(path)\r\n        return True\r\n    except:\r\n        return False\r\n\r\nfun KClass<URI>.isValidScheme(scheme: String): Boolean =\r\n    try:\r\n        URI(scheme)\r\n        return True\r\n    except:\r\n        return False\r\n"}], "metadata": {"task_id": "MaterialFiles/1049", "ground_truth": "        URI(null, null, host, -1, null, null, null)\r\n        true\r\n    } catch (e: URISyntaxException) {\r\n        false\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\URIExtensions.kt"}}
{"prompt": "fun sync() {\r\n        for (activity in activities) {\r\n            val nightMode = nightMode\r\n            if (activity is OnNightModeChangedListener) {\r\n                if (getUiModeNight(activity.delegate.localNightMode, activity)\r\n                    != getUiModeNight(nightMode, activity)) {\r\n                    activity.onNightModeChangedFromHelper(nightMode)\r\n                }", "choices": [{"text": ") {\r\n                    activity.onNightModeChangedFromHelper(nightMode)\r\n                }\r\n            } else {\r\n                if (getUiModeNight(activity.delegate.localNightMode, activity)\r\n                   != getUiModeNight(nightMode, activity)) {\r\n                    activity.onNightModeChangedFromHelper(nightMode)\r\n                }\r\n            }\r\n        }\r\n        for (activity in activities) {\r\n            val nightMode = nightMode\r\n            if (activity is OnNightModeChangedListener"}], "metadata": {"task_id": "MaterialFiles/1055", "ground_truth": "            } else {\r\n                activity.delegate.localNightMode = nightMode\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\theme\\night\\NightModeHelper.kt"}}
{"prompt": "import android.graphics.Canvas\noverride fun draw(canvas: Canvas) {\r\n        if (needMirroring()) {\r\n            val centerX = bounds.exactCenterX()\r\n            canvas.scale(-1f, 1f, centerX, 0f)\r\n            super.draw(canvas)", "choices": [{"text": "(canvas)\r\n        } else {\r\n            super.draw(canvas)\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "MaterialFiles/1059", "ground_truth": "            canvas.scale(-1f, 1f, centerX, 0f)\r\n        } else {\r\n            super.draw(canvas)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\AutoMirrorDrawable.kt"}}
{"prompt": "import android.graphics.Rect\noverride fun getPadding(padding: Rect): Boolean {\r\n        val hasPadding = super.getPadding(padding)\r\n        if (needMirroring()) {\r\n            val paddingStart = padding.left\r\n            val paddingEnd = padding.right", "choices": [{"text": "\r\n            if (paddingStart > paddingEnd) {\r\n                hasPadding = false\r\n            }\r\n        }\r\n        return hasPadding\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/1061", "ground_truth": "            padding.left = paddingEnd\r\n            padding.right = paddingStart\r\n        }\r\n        return hasPadding\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\AutoMirrorDrawable.kt"}}
{"prompt": "import android.animation.Animator\noverride fun setSubtitle(subtitle: CharSequence?) {\r\n        if (getSubtitle() == subtitle) {\r\n            return\r\n        }\r\n        nextSubtitle = subtitle\r\n        ensureSubtitleAnimatorTarget()\r\n        if (subtitleAnimator.target == null) {\r\n            // Subtitle text view not available (yet), just delegate to super.\r\n            super.setSubtitle(subtitle)\r\n            return", "choices": [{"text": "\r\n        }\r\n        subtitleAnimator.setTarget(nextSubtitle)\r\n        ensureSubtitleAnimatorTarget()\r\n        if (subtitleAnimator.target == null) {\r\n            // Subtitle text view not available (yet), just delegate to super.\r\n            super.setSubtitle(subtitle)\r\n            return\r\n        }\r\n    }\r\n    ensureSubtitleAnimatorTarget() {\r\n        if (subtitleAnimator.target == null) {\r\n            subtitleAnimator.setTarget(nextSubtitle)\r\n        }\r\n    }\r"}], "metadata": {"task_id": "MaterialFiles/1075", "ground_truth": "        }\r\n        if (!subtitleAnimator.isRunning) {\r\n            subtitleAnimator.start()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\CrossfadeSubtitleToolbar.kt"}}
{"prompt": "import android.animation.ValueAnimator\nimport android.animation.Animator\noverride fun onAnimationUpdate(animator: ValueAnimator) {\r\n            if (animator.animatedFraction < 0.5) {", "choices": [{"text": "\r\n                return\r\n            }\r\n            if (animator.animatedFraction > 0.5) {\r\n                return\r\n            }\r\n            if (animator.animatedFraction > 0.5) {\r\n                return\r\n            }\r\n            if (animator.animatedFraction > 0.5) {\r\n                return\r\n            }\r\n            if (animator.animatedFraction > 0.5) {\r\n                return\r\n            }\r\n            if (animator.animatedFraction > 0.5) {\r\n               "}], "metadata": {"task_id": "MaterialFiles/1077", "ground_truth": "                isTextUpdated = false\r\n            } else {\r\n                ensureTextUpdated()\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\CrossfadeSubtitleToolbar.kt"}}
{"prompt": "import androidx.appcompat.widget.Toolbar\nprivate fun ensureTextUpdated() {\r\n            if (!isTextUpdated) {\r\n                if (nextSubtitle != null) {\r\n                    super@CrossfadeSubtitleToolbar.setSubtitle(nextSubtitle)", "choices": [{"text": ".getText());\r\n                }\r\n                isTextUpdated = true;\r\n            }\r\n        }\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            ensureTextUpdated();\r\n        }\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            ensureTextUpdated();\r\n        }\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            ensureTextUpdated();"}], "metadata": {"task_id": "MaterialFiles/1079", "ground_truth": "                    nextSubtitle = null\r\n                }\r\n                isTextUpdated = true\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\CrossfadeSubtitleToolbar.kt"}}
{"prompt": "val popup ListPopupWindow\nval isShowing Boolean\n override fun onDetachedFromWindow() {\r\n        super.onDetachedFromWindow()", "choices": [{"text": " {\r\n        if (this.isShowing) {\r\n                this.popup.show();\r\n        } else {\r\n                this.popup.hide();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "MaterialFiles/1083", "ground_truth": "\r\n        if (popup.isShowing) {\r\n            popup.dismiss()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\DropDownView.kt"}}
{"prompt": "import me.zhanghai.android.files.util.doOnGlobalLayout\nimport android.os.Parcelable\noverride fun onRestoreInstanceState(state: Parcelable?) {\r\n        state as State\r\n        super.onRestoreInstanceState(state.superState)\r\n        if (state.isShowing) {\r\n            doOnGlobalLayout {\r\n                if (!popup.isShowing) {", "choices": [{"text": "\r\n                    popup.show()\r\n                }\r\n            }\r\n        } else {\r\n            doOnGlobalLayout {\r\n                if (popup.isShowing) {\r\n                    popup.hide()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/1085", "ground_truth": "                    popup.show()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\DropDownView.kt"}}
{"prompt": "val listDiffer\nval list List<T>\n open fun replace(list: List<T>, clear: Boolean) {", "choices": [{"text": ": List<T>, clear: Boolean) {\n  listDiffer(list, clear)\n}\n\nval listDiffer(list: List<T>, clear: Boolean) {\n  listDiffer(list, clear)\n}\n\nval listDiffer(list: List<T>, clear: Boolean) {\n  listDiffer(list, clear)\n}\n\nval listDiffer(list: List<T>, clear: Boolean) {\n  listDiffer(list, clear)\n}\n\nval listDiffer(list: List<T>, clear: Boolean"}], "metadata": {"task_id": "MaterialFiles/1096", "ground_truth": "        if (clear) {\r\n            listDiffer.list = emptyList()\r\n        }\r\n        listDiffer.list = list\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ListAdapter.kt"}}
{"prompt": "import android.view.ViewGroup\noverride fun show(bar: ViewGroup, animate: Boolean) {\r\n        if (animate) {", "choices": [{"text": " {\r\n            bar.setVisibility(View.VISIBLE);\r\n        } else {\r\n            bar.setVisibility(View.GONE);\r\n        }\r\n    }\r\n    hide(bar: ViewGroup, animate: Boolean) {\r\n        if (animate) {\r\n            bar.setVisibility(View.GONE);\r\n        } else {\r\n            bar.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/1105", "ground_truth": "            bar.fadeInUnsafe()\r\n        } else {\r\n            bar.isVisible = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\OverlayToolbarActionMode.kt"}}
{"prompt": "import android.view.ViewGroup\noverride fun hide(bar: ViewGroup, animate: Boolean) {\r\n        if (animate) {", "choices": [{"text": "\r\n            bar.setVisibility(View.GONE);\r\n        } else {\r\n            bar.setVisibility(View.VISIBLE);\r\n        }\r\n}\r\n\r\nexport function show(bar: ViewGroup, animate: Boolean) {\r\n        if (animate) {\r\n            bar.setVisibility(View.VISIBLE);\r\n        } else {\r\n            bar.setVisibility(View.GONE);\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/1106", "ground_truth": "            bar.fadeOutUnsafe()\r\n        } else {\r\n            bar.isVisible = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\OverlayToolbarActionMode.kt"}}
{"prompt": "import android.view.View\nval ATTRS\nvar offset\nvar isShown\nfun toggleBar(barView: View) {\r\n        if (isBarShown(barView)) {", "choices": [{"text": "\r\n                hideBar(barView);\r\n        }\r\n        else {\r\n                showBar(barView);\r\n        }\r\n}\r\nfunction isBarShown(barView: View) {\r\n        return isShown(barView);\r\n}\r\nfunction isBarHidden(barView: View) {\r\n        return!isShown(barView);\r\n}\r\nfunction hideBar(barView: View) {\r\n        isShown(barView, false);\r\n}\r\nfunction showBar(barView: View) {\r\n       "}], "metadata": {"task_id": "MaterialFiles/1114", "ground_truth": "            hideBar(barView)\r\n        } else {\r\n            showBar(barView)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PersistentBarLayout.kt"}}
{"prompt": "import androidx.core.view.children\nimport android.view.View\nimport android.view.Gravity\nprivate fun findBarView(gravity: Int): View? {\r\n        val verticalGravity = gravity and Gravity.VERTICAL_GRAVITY_MASK\r\n        for (child in children) {\r\n            val childVerticalGravity = getChildVerticalGravity(child)\r\n            if (childVerticalGravity == verticalGravity) {", "choices": [{"text": "\r\n                return child\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    private fun getChildVerticalGravity(child: View): Int {\r\n        val verticalGravity = Gravity.VERTICAL_GRAVITY_MASK\r\n        for child in children) {\r\n            val childVerticalGravity = getChildVerticalGravity(child)\r\n            if (childVerticalGravity == verticalGravity) {\r\n                return childVerticalGravity\r\n            }\r\n        }\r\n        return Gravity.VERTICAL_GRAVITY_MASK"}], "metadata": {"task_id": "MaterialFiles/1116", "ground_truth": "                return child\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PersistentBarLayout.kt"}}
{"prompt": "import android.view.View\nfun toggleDrawer(drawerView: View) {\r\n        if (isDrawerOpen(drawerView)) {", "choices": [{"text": "\r\n                drawerView.closeDrawer(GravityCompat.START);\r\n        } else {\r\n                drawerView.openDrawer(GravityCompat.START);\r\n        }\r\n}\r\n\r\nfunction isDrawerOpen(drawerView: View) {\r\n        return drawerView.findViewById(R.id.drawer_open)!= null;\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/1129", "ground_truth": "            closeDrawer(drawerView)\r\n        } else {\r\n            openDrawer(drawerView)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PersistentDrawerLayout.kt"}}
{"prompt": "import androidx.core.view.children\nimport android.view.View\nimport android.view.Gravity\nprivate fun findDrawerView(gravity: Int): View? {\r\n        val horizontalGravity = (Gravity.getAbsoluteGravity(gravity, layoutDirection)\r\n            and Gravity.HORIZONTAL_GRAVITY_MASK)\r\n        for (child in children) {\r\n            val childHorizontalGravity = getChildAbsoluteHorizontalGravity(child)\r\n            if (childHorizontalGravity == horizontalGravity) {", "choices": [{"text": "\r\n                return child;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    private fun getChildAbsoluteHorizontalGravity(child: View): Int {\r\n        if (child == null) {\r\n            return Gravity.HORIZONTAL_GRAVITY_MASK;\r\n        }\r\n        return Gravity.getAbsoluteGravity(Gravity.HORIZONTAL_GRAVITY_MASK, layoutDirection)\r\n            | Gravity.HORIZONTAL_GRAVITY_MASK\r\n            | Gravity.HORIZONTAL_GRAVITY_MASK"}], "metadata": {"task_id": "MaterialFiles/1131", "ground_truth": "                return child\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PersistentDrawerLayout.kt"}}
{"prompt": "import androidx.preference.Preference\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        if (preferenceScreen == null) {\r\n            val preferenceScreen = preferenceManager.createPreferenceScreen(requireContext())", "choices": [{"text": "\n        }\r\n        super.onViewCreated(view, savedInstanceState)\r\n        if (preferenceScreen!= null) {\r\n            preferenceScreen.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {\r\n                @Override\r\n                public boolean onPreferenceClick(Preference preference) {\r\n                    preferenceManager.onPreferenceClick(requireContext(), preference.getKey())\r\n                    return true\r\n                }\r\n            })\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/1138", "ground_truth": "            setPreferenceScreen(preferenceScreen)\r\n        }\r\n\r\n        super.onViewCreated(view, savedInstanceState)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PreferenceFragmentCompat.kt"}}
{"prompt": "import android.view.View\nimport android.os.Build\noverride fun setTextIsSelectable(selectable: Boolean) {\r\n        super.setTextIsSelectable(selectable)\r\n\r\n        if (selectable) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                focusable = View.FOCUSABLE_AUTO\r\n            }\r\n        } else {", "choices": [{"text": "\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                focusable = View.FOCUSABLE_NONE\r\n            }\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/1140", "ground_truth": "            isClickable = false\r\n            isFocusable = false\r\n        }\r\n        background = background\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ReadOnlyTextInputEditText.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\noverride fun addView(child: View, index: Int, params: ViewGroup.LayoutParams) {\r\n        super.addView(child, index, params)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "MaterialFiles/1142", "ground_truth": "\r\n        if (child is EditText) {\r\n            setDropDown(!child.isTextSelectable)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ReadOnlyTextInputLayout.kt"}}
{"prompt": "import me.zhanghai.android.files.compat.getDrawableCompat\nfun setDropDown(dropDown: Boolean) {\r\n        if (dropDown) {\r\n            endIconMode = END_ICON_CUSTOM\r\n            endIconDrawable = context.getDrawableCompat(\r\n                com.google.android.material.R.drawable.mtrl_ic_arrow_drop_down", "choices": [{"text": "\r\n            )\r\n        } else {\r\n            endIconMode = END_ICON_NONE\r\n            endIconDrawable = null\r\n        }\r\n    }\r\n    setDropDown(dropDown: Boolean) {\r\n        if (dropDown) {\r\n            endIconMode = END_ICON_CUSTOM\r\n            endIconDrawable = context.getDrawableCompat(\r\n                com.google.android.material.R.drawable.mtrl_ic_arrow_drop_down\r\n            )\r\n        } else {\r\n            endIconMode ="}], "metadata": {"task_id": "MaterialFiles/1143", "ground_truth": "            )\r\n        } else {\r\n            endIconMode = END_ICON_NONE\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ReadOnlyTextInputLayout.kt"}}
{"prompt": "import androidx.annotation.MenuRes\nimport android.view.Menu\nfun setMenuResource(@MenuRes menuRes: Int) {\r\n        if (this.menuRes == menuRes) {\r\n            return\r\n        }\r\n        this.menuRes = menuRes", "choices": [{"text": "\r\n        Menu.setMenuResource(menuRes)\r\n    }\r\nfun getMenuRes() {\r\n        return this.menuRes\r\n    }\r\nfun getMenu() {\r\n        return Menu.getMenu(this.menuRes)\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/1151", "ground_truth": "        toolbar.menu.clear()\r\n        if (menuRes != 0) {\r\n            toolbar.inflateMenu(menuRes)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ToolbarActionMode.kt"}}
{"prompt": "fun AutoCloseable.closeSafe() {\r\n    try {", "choices": [{"text": "{\r\n        this.close();\r\n    } catch(e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nfunction AutoCloseable.close() {\r\n    try {\r\n        this.closeSafe();\r\n    } catch(e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nfunction AutoCloseable.closeSafe() {\r\n    try {\r\n        this.close();\r\n    } catch(e) {\r\n        console.log(e);\r\n"}], "metadata": {"task_id": "MaterialFiles/1160", "ground_truth": "        close()\r\n    } catch (e: Exception) {\r\n        e.printStackTrace()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\AutoCloseableExtensions.kt"}}
{"prompt": "import kotlin.coroutines.resume\nimport kotlinx.coroutines.suspendCancellableCoroutine\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nimport android.os.CancellationSignal\nsuspend fun <T> runWithCancellationSignal(block: (CancellationSignal) -> T): T {\r\n    val signal = CancellationSignal()\r\n    return suspendCancellableCoroutine { continuation ->\r\n        @OptIn(DelicateCoroutinesApi::class)\r\n        val job = GlobalScope.launch(Dispatchers.IO) {\r\n            continuation.resume(block(signal))\r\n        }\r\n        continuation.invokeOnCancellation {", "choices": [{"text": "\r\n            job.cancel()\r\n        }\r\n    }\r\n}\r\nsuspend fun <T> runWithCancellationSignal(block: (CancellationSignal) -> T): T {\r\n    val signal = CancellationSignal()\r\n    return suspendCancellableCoroutine { continuation ->\r\n        @OptIn(DelicateCoroutinesApi::class)\r\n        val job = GlobalScope.launch(Dispatchers.IO) {\r\n            continuation.resume(block(signal))\r\n        }\r\n        continuation.invokeOnCancellation {\r\n            job"}], "metadata": {"task_id": "MaterialFiles/1169", "ground_truth": "            signal.cancel()\r\n            job.cancel()\r\n        }\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\CancellationSignalExtensions.kt"}}
{"prompt": "import android.widget.TextView\nimport android.view.View\nimport android.text.Spannable\nval UP\nval CLICK\nval FROM_BELOW\noverride fun up(view: TextView, text: Spannable): Boolean {", "choices": [{"text": "\noverride fun down(view: TextView, text: Spannable): Boolean {\n    return false\n}\noverride fun click(view: TextView, text: Spannable): Boolean {\n    return false\n}\noverride fun from_below(view: TextView, text: Spannable): Boolean {\n    return false\n}\n"}], "metadata": {"task_id": "MaterialFiles/1172", "ground_truth": "        if (action(UP, view, text)) {\r\n            return true\r\n        }\r\n        return super.up(view, text)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ClickableArrowKeyMovementMethod.kt"}}
{"prompt": "import android.widget.TextView\nimport android.view.View\nimport android.text.Spannable\nval DOWN\nval FROM_BELOW\nval CLICK\noverride fun down(view: TextView, text: Spannable): Boolean {", "choices": [{"text": "\nval FROM_BELOW\nval CLICK\noverride fun down(view: TextView, text: Spannable): Boolean {\n    return true\n}\nval FROM_BELOW\nval CLICK\noverride fun down(view: TextView, text: Spannable): Boolean {\n    return true\n}\nval FROM_BELOW\nval CLICK\noverride fun down(view: TextView, text: Spannable): Boolean {\n    return true\n}\nval FROM_BELOW\nval CLICK\noverride fun down(view: TextView, text: Spannable): Boolean {\n   "}], "metadata": {"task_id": "MaterialFiles/1173", "ground_truth": "        if (action(DOWN, view, text)) {\r\n            return true\r\n        }\r\n        return super.down(view, text)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ClickableArrowKeyMovementMethod.kt"}}
{"prompt": "import android.widget.TextView\nimport android.view.View\nimport android.text.Spannable\nval DOWN\nval FROM_BELOW\nval CLICK\noverride fun left(view: TextView, text: Spannable): Boolean {", "choices": [{"text": "\n    return view.getVisibility() == View.VISIBLE && text.length() > 0;\n}\n\noverride fun right(view: TextView, text: Spannable): Boolean {\n    return view.getVisibility() == View.VISIBLE && text.length() > 0;\n}\n\noverride fun up(view: TextView, text: Spannable): Boolean {\n    return view.getVisibility() == View.VISIBLE && text.length() > 0;\n}\n\noverride fun down(view: TextView, text: Spannable): Boolean {\n    return view.getVisibility()"}], "metadata": {"task_id": "MaterialFiles/1174", "ground_truth": "        if (action(UP, view, text)) {\r\n            return true\r\n        }\r\n        return super.left(view, text)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ClickableArrowKeyMovementMethod.kt"}}
{"prompt": "import android.widget.TextView\nimport android.view.View\nimport android.text.Spannable\nval UP\nval CLICK\nval DOWN\noverride fun right(view: TextView, text: Spannable): Boolean {", "choices": [{"text": "\nval UP\nval CLICK\nval DOWN\noverride fun left(view: TextView, text: Spannable): Boolean {\n    return false\n}\noverride fun right(view: TextView, text: Spannable): Boolean {\n    return false\n}\noverride fun left(view: TextView, text: Spannable): Boolean {\n    return false\n}\noverride fun right(view: TextView, text: Spannable): Boolean {\n    return false\n}\noverride fun left(view: TextView, text: Spannable): Boolean {\n    return false\n}\noverride fun"}], "metadata": {"task_id": "MaterialFiles/1175", "ground_truth": "        if (action(DOWN, view, text)) {\r\n            return true\r\n        }\r\n        return super.right(view, text)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ClickableArrowKeyMovementMethod.kt"}}
{"prompt": "fun <T> MutableCollection<T>.removeFirst(): T {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "MaterialFiles/1176", "ground_truth": "    val iterator = iterator()\r\n    val element = iterator.next()\r\n    iterator.remove()\r\n    return element\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\CollectionExtensions.kt"}}
{"prompt": "fun <K, V> MutableMap<K, V>.removeFirst(): Map.Entry<K, V> {", "choices": [{"text": "> {\n  return this.map.removeFirst();\n}\n\nfun <K, V> MutableMap<K, V>.removeLast(): Map.Entry<K, V> {\n  return this.map.removeLast();\n}\n\nfun <K, V> MutableMap<K, V>.size(): int {\n  return this.map.size();\n}\n\nfun <K, V> MutableMap<K, V>.values(): Array<V> {\n  return this.map.values();\n}\n\nfun <K, V> MutableMap<K"}], "metadata": {"task_id": "MaterialFiles/1177", "ground_truth": "    val iterator = iterator()\r\n    val element = iterator.next()\r\n    iterator.remove()\r\n    return element\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\CollectionExtensions.kt"}}
{"prompt": "fun <T> MutableCollection<T>.removeFirst(predicate: (T) -> Boolean): T? {\r\n    val iterator = iterator()\r\n    while (iterator.hasNext()) {\r\n        val element = iterator.next()\r\n        if (predicate(element)) {\r\n            iterator.remove()", "choices": [{"text": "\r\n            return element\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfun <T> MutableCollection<T>.removeLast(predicate: (T) -> Boolean): T? {\r\n    val iterator = iterator()\r\n    while (iterator.hasNext()) {\r\n        val element = iterator.next()\r\n        if (predicate(element)) {\r\n            iterator.remove()\r\n            return element\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfun <T> MutableCollection<T>."}], "metadata": {"task_id": "MaterialFiles/1178", "ground_truth": "            return element\r\n        }\r\n    }\r\n    return null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\CollectionExtensions.kt"}}
{"prompt": "import androidx.annotation.Dimension\nimport android.content.Context\n\r\n@Dimension\r\nfun Context.dpToDimensionPixelSize(@Dimension(unit = Dimension.DP) dp: Float): Int {\r\n    val value = dpToDimension(dp)\r\n    val size = (if (value >= 0) value + 0.5f else value - 0.5f).toInt()\r\n    return when {\r\n        size != 0 -> size", "choices": [{"text": "\r\n    }\r\n}\r\n\r\n@Dimension\r\nfun Context.dpToDimensionPixelSize(dp: Float): Int {\r\n    val value = dpToDimension(dp)\r\n    val size = (if (value >= 0) value + 0.5f else value - 0.5f).toInt()\r\n    return when {\r\n        size!= 0 -> size\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/1182", "ground_truth": "        value == 0f -> 0\r\n        value > 0 -> 1\r\n        else -> -1\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ContextExtensions.kt"}}
{"prompt": "import androidx.lifecycle.viewmodel.CreationExtras\nimport androidx.lifecycle.ViewModelStoreOwner\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.ViewModel\nimport androidx.fragment.app.viewModels\nimport androidx.fragment.app.Fragment\ninline fun <reified VM : ViewModel> Fragment.viewModels(\r\n    noinline ownerProducer: () -> ViewModelStoreOwner = { this },\r\n    noinline extrasProducer: (() -> CreationExtras)? = null,\r\n    noinline factoryProducer: (() -> () -> VM)? = null\r\n) = viewModels<VM>(\r\n    ownerProducer,\r\n    extrasProducer,\r\n    factoryProducer?.let {\r\n        {\r\n            val factory = it()\r\n            object : ViewModelProvider.Factory {\r\n                @Suppress(\"UNCHECKED_CAST\")", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/1193", "ground_truth": "                override fun <T : ViewModel> create(modelClass: Class<T>) = factory() as T\r\n            }\r\n        }\r\n    }\r\n)", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\FragmentViewModelLazy.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport android.content.pm.PackageManager\n\r\n@OptIn(ExperimentalContracts::class)\r\nprivate inline fun <T> getPackageManagerInfoOrNull(block: () -> T): T? {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {\r\n        block()", "choices": [{"text": "\r\n    } catch (Exception e) {\r\n        return null\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalContracts::class)\r\nprivate inline fun <T> getPackageManagerInfo(block: () -> T): T {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {\r\n        block()\r\n    } catch (Exception e) {\r\n        return null\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalContracts"}], "metadata": {"task_id": "MaterialFiles/1211", "ground_truth": "    } catch (e: PackageManager.NameNotFoundException) {\r\n        e.printStackTrace()\r\n        null\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\PackageManagerExtensions.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport androidx.fragment.app.Fragment\nimport android.os.Parcelable\nfun <F : Fragment, Args : ParcelableArgs> F.putArgs(args: Args, argsClass: KClass<Args>): F {\r\n    val arguments = arguments\r\n    if (arguments != null) {\r\n        arguments.putArgs(args, argsClass)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "MaterialFiles/1213", "ground_truth": "    } else {\r\n        this.arguments = args.toBundle(argsClass)\r\n    }\r\n    return this\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ParcelableArgs.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport android.os.Parcel\n\r\n@OptIn(ExperimentalContracts::class)\r\ninline fun <R> Parcel.use(block: (Parcel) -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {", "choices": [{"text": " {\r\n        return block.use()\r\n    } catch (Exception e) {\r\n        return e\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalContracts::class)\r\ninline fun <R> Parcel.use(block: (Parcel) -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {\r\n        return block.use()\r\n    } catch (Exception e) {\r\n        return e\r\n   "}], "metadata": {"task_id": "MaterialFiles/1215", "ground_truth": "        block(this)\r\n    } finally {\r\n        recycle()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ParcelExtensions.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport android.os.Parcel\n\r\n@OptIn(ExperimentalContracts::class)\r\ninline fun <R> Parcel.withPosition(position: Int, block: Parcel.() -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    val savedPosition = dataPosition()\r\n    setDataPosition(position)\r\n    return try {", "choices": [{"text": " {\r\n        return block(savedPosition)\r\n    } finally {\r\n        setDataPosition(savedPosition)\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalContracts::class)\r\ninline fun <R> Parcel.withDataPosition(position: Int, block: Parcel.() -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    val savedPosition = dataPosition()\r\n    setDataPosition(position)\r\n    return try {\r"}], "metadata": {"task_id": "MaterialFiles/1216", "ground_truth": "        block(this)\r\n    } finally {\r\n        setDataPosition(savedPosition)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ParcelExtensions.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\ninline fun RecyclerView.addOnScrollListener(\r\n    crossinline onScrollStateChanged: (recyclerView: RecyclerView, newState: Int) -> Unit =\r\n        { _, _ -> },\r\n    crossinline onScrolled: (recyclerView: RecyclerView, dx: Int, dy: Int) -> Unit = { _, _, _ -> },\r\n): RecyclerView.OnScrollListener {\r\n    val listener = object : RecyclerView.OnScrollListener() {\r\n        override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\r\n            onScrollStateChanged(recyclerView, newState)\r\n        }\r\n\r\n        override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n            onScrolled(recyclerView, dx, dy)", "choices": [{"text": "\r\n        }\r\n    }\r\n    return listener\r\n}\r\ninline fun RecyclerView.removeOnScrollListener(\r\n    crossinline onScrollStateChanged: (recyclerView: RecyclerView, newState: Int) -> Unit = { _, _ -> },\r\n    crossinline onScrolled: (recyclerView: RecyclerView, dx: Int, dy: Int) -> Unit = { _, _, _ -> },\r\n): RecyclerView.OnScrollListener {\r\n    val listener = object : RecyclerView.OnScrollListener() {\r\n        override fun onScrollStateChanged"}], "metadata": {"task_id": "MaterialFiles/1223", "ground_truth": "        }\r\n    }\r\n    addOnScrollListener(listener)\r\n    return listener\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\RecyclerViewExtensions.kt"}}
{"prompt": "import android.os.RemoteException\nimport android.os.Bundle\nfun sendResult(result: Bundle) {\r\n        if (remoteCallback != null) {\r\n            try {\r\n                remoteCallback.sendResult(result)\r\n            } catch (e: RemoteException) {\r\n                e.printStackTrace()", "choices": [{"text": ".printStackTrace()\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "MaterialFiles/1224", "ground_truth": "            }\r\n        } else {\r\n            localCallback!!(result)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\RemoteCallback.kt"}}
{"prompt": "import android.os.Parcel\nimport android.net.Uri\noverride fun create(parcel: Parcel): Uri? {\r\n        val uriString = parcel.readString() ?: return null\r\n        // Parcel.readParcelableCreator()\r\n        return if (uriString.startsWith(Uri::class.java.name)) {", "choices": [{"text": "\r\n            if (uriString.endsWith(Uri::class.java.name)) {\r\n                return Uri.parse(uriString.substring(0, uriString.length() - Uri::class.java.name.length()))\r\n            } else {\r\n                return null\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/1226", "ground_truth": "            readUri(parcel)\r\n        } else {\r\n            Uri.parse(uriString)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\StableUriParceler.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport android.os.StrictMode\nfun <R> KClass<StrictMode>.withoutPenaltyDeathOnNetwork(block: () -> R): R {\r\n    val oldThreadPolicy = StrictMode.getThreadPolicy()\r\n    val newThreadPolicy = StrictMode.ThreadPolicy.Builder(oldThreadPolicy)\r\n        // There's no API to disable penaltyDeathOnNetwork() but still detect it.\r\n        .permitNetwork()\r\n        .build()\r\n    StrictMode.setThreadPolicy(newThreadPolicy)\r\n    return try {", "choices": [{"text": " {\r\n        return block()\r\n    } finally {\r\n        StrictMode.setThreadPolicy(oldThreadPolicy)\r\n    }\r\n}\r\nfun <R> KClass<StrictMode>.withoutPenaltyDeathOnNetwork(block: () -> R): R {\r\n    val oldThreadPolicy = StrictMode.getThreadPolicy()\r\n    val newThreadPolicy = StrictMode.ThreadPolicy.Builder(oldThreadPolicy)\r\n        // There's no API to disable penaltyDeathOnNetwork() but still detect it.\r\n       .permitNetwork()\r\n"}], "metadata": {"task_id": "MaterialFiles/1231", "ground_truth": "        block()\r\n    } finally {\r\n        StrictMode.setThreadPolicy(oldThreadPolicy)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\StrictModeExtensions.kt"}}
{"prompt": "inline fun <reified T : Throwable> Throwable.findCauseByClass(): T? {\r\n    var current: Throwable? = this\r\n    do {\r\n        if (current is T) {\r\n            return current", "choices": [{"text": "\r\n            current = current.getCause()\r\n        } else {\r\n            break\r\n        }\r\n    } while (current)\r\n    return null\r\n}\r\n\r\ninline fun <reified T : Throwable> Throwable.findCause(): T? {\r\n    var current: Throwable? = this\r\n    do {\r\n        if (current is T) {\r\n            return current\r\n        } else {\r\n            current = current.getCause()\r\n        }\r\n    } while (current)\r\n    return null\r\n}\r"}], "metadata": {"task_id": "MaterialFiles/1235", "ground_truth": "        }\r\n        current = current!!.cause\r\n    } while (current != null)\r\n    return null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ThrowableExtensions.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport android.util.TypedValue\ninline fun <T> KClass<TypedValue>.useTemp(block: (TypedValue) -> T): T {\r\n    val temp = TypedValue::class.obtainTemp()\r\n    return try {", "choices": [{"text": "{\r\n        return block(temp)\r\n    }finally{\r\n        temp.recycle()\r\n    }\r\n}\r\ninline fun <T> KClass<TypedValue>.useTemp(block: (TypedValue) -> T): T {\r\n    val temp = TypedValue::class.obtainTemp()\r\n    return try{\r\n        return block(temp)\r\n    }finally{\r\n        temp.recycle()\r\n    }\r\n}\r\ninline fun <T> KClass<TypedValue>.useTemp(block: (TypedValue"}], "metadata": {"task_id": "MaterialFiles/1236", "ground_truth": "        block(temp)\r\n    } finally {\r\n        temp.releaseTemp()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\TypedValueExtensions.kt"}}
{"prompt": "import me.zhanghai.android.files.app.contentResolver\nimport android.net.Uri\nfun Uri.takePersistablePermission(modeFlags: Int): Boolean =\r\n    try {\r\n        contentResolver.takePersistableUriPermission(this, modeFlags)", "choices": [{"text": "\n        return true;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n\r\nfun Uri.canWrite(modeFlags: Int): Boolean =\r\n    try {\r\n        contentResolver.canWriteUri(this, modeFlags);\r\n        return true;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n\r\nfun Uri.canRead(modeFlags: Int): Boolean =\r\n    try {\r\n        contentResolver.canReadUri(this, modeFlags);\r\n        return true"}], "metadata": {"task_id": "MaterialFiles/1237", "ground_truth": "        true\r\n    } catch (e: SecurityException) {\r\n        e.printStackTrace()\r\n        false\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\UriExtensions.kt"}}
{"prompt": "import me.zhanghai.android.files.app.contentResolver\nimport android.net.Uri\nfun Uri.releasePersistablePermission(modeFlags: Int): Boolean =\r\n    try {\r\n        contentResolver.releasePersistableUriPermission(this, modeFlags)", "choices": [{"text": "\r\n        return true\r\n    } catch (e) {\r\n        return false\r\n    }\r\n\r\nfun Uri.setPersistablePermission(modeFlags: Int): Boolean =\r\n    try {\r\n        contentResolver.setPersistableUriPermission(this, modeFlags)\r\n        return true\r\n    } catch (e) {\r\n        return false\r\n    }\r\n\r\nfun Uri.getPersistablePermission(modeFlags: Int): Boolean =\r\n    try {\r\n        return contentResolver.getPersistableUriPermission(this, modeFlags"}], "metadata": {"task_id": "MaterialFiles/1238", "ground_truth": "        true\r\n    } catch (e: SecurityException) {\r\n        e.printStackTrace()\r\n        false\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\UriExtensions.kt"}}
{"prompt": "import androidx.core.view.children\nimport android.view.ViewGroup\nimport android.view.View\nfun <T : View> View.findViewByClass(clazz: Class<T>): T? {\r\n    if (clazz.isInstance(this)) {\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return this as T\r\n    }\r\n    if (this is ViewGroup) {\r\n        children.forEach {", "choices": [{"text": "\r\n            if (clazz.isInstance(this)) {\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                return this as T\r\n            }\r\n            if (this instanceof ViewGroup) {\r\n                children.forEach {\r\n                    if (clazz.isInstance(this)) {\r\n                        @Suppress(\"UNCHECKED_CAST\")\r\n                        return this as T\r\n                    }\r\n                    if (this instanceof ViewGroup) {\r\n                        children.forEach {\r\n                            if (clazz.isInstance(this)) {\r\n                                @"}], "metadata": {"task_id": "MaterialFiles/1242", "ground_truth": "            it.findViewByClass(clazz)?.let { return it }\r\n        }\r\n    }\r\n    return null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import androidx.core.view.isVisible\nimport android.view.View\nsuspend fun View.fadeIn(force: Boolean = false) {\r\n    if (!isVisible) {\r\n        alpha = 0f\r\n        isVisible = true\r\n    }\r\n    animate().run {\r\n        alpha(1f)\r\n        if (!(isLaidOut || force) || (isVisible && alpha == 1f)) {\r\n            duration = 0\r\n        } else {\r\n            duration = context.shortAnimTime.toLong()\r\n            interpolator = context.getInterpolator(android.R.interpolator.fast_out_slow_in)", "choices": [{"text": "\r\n        }\r\n    }\r\n}\r\nsuspend fun View.fadeOut(force: Boolean = false) {\r\n    if (!isVisible) {\r\n        alpha = 1f\r\n        isVisible = true\r\n    }\r\n    animate().run {\r\n        alpha(0f)\r\n        if (!(isLaidOut || force) || (isVisible && alpha == 0f)) {\r\n            duration = 0\r\n        } else {\r\n            duration = context.shortAnimTime.toLong()\r\n            interpolator = context."}], "metadata": {"task_id": "MaterialFiles/1243", "ground_truth": "        }\r\n        start()\r\n        awaitEnd()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import androidx.core.view.isVisible\nimport android.view.View\nsuspend fun View.fadeOut(force: Boolean = false, gone: Boolean = false) {\r\n    animate().run {\r\n        alpha(0f)\r\n        if (!(isLaidOut || force) || (!isVisible || alpha == 0f)) {\r\n            duration = 0\r\n        } else {\r\n            duration = context.shortAnimTime.toLong()\r\n            interpolator = context.getInterpolator(android.R.interpolator.fast_out_linear_in)\r\n        }\r\n        start()\r\n        awaitEnd()\r\n    }\r\n    if (gone) {", "choices": [{"text": "\r\n        return\r\n    }\r\n    animate().run {\r\n        alpha(1f)\r\n        if (!(isLaidOut || force) || (!isVisible || alpha == 1f)) {\r\n            duration = 0\r\n        } else {\r\n            duration = context.shortAnimTime.toLong()\r\n            interpolator = context.getInterpolator(android.R.interpolator.fast_out_linear_in)\r\n        }\r\n        start()\r\n        awaitEnd()\r\n    }\r\n}\r\nsuspend fun View"}], "metadata": {"task_id": "MaterialFiles/1244", "ground_truth": "        isGone = true\r\n    } else {\r\n        isInvisible = true\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import android.view.View\nsuspend fun View.fadeToVisibility(visible: Boolean, force: Boolean = false, gone: Boolean = false) {\r\n    if (visible) {", "choices": [{"text": "\r\n        if (gone) {\r\n            View.fadeOut();\r\n        } else {\r\n            View.fadeIn();\r\n        }\r\n    } else {\r\n        if (gone) {\r\n            View.fadeOut();\r\n        } else {\r\n            View.fadeIn();\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "MaterialFiles/1245", "ground_truth": "        fadeIn(force)\r\n    } else {\r\n        fadeOut(force, gone)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import android.view.View\nsuspend fun View.slideToVisibility(\r\n    gravity: Int,\r\n    visible: Boolean,\r\n    force: Boolean = false,\r\n    gone: Boolean = false\r\n) {\r\n    if (visible) {", "choices": [{"text": "\r\n        if (force) {\r\n            View.slideToVisibility(\r\n                gravity,\r\n                visible,\r\n                force,\r\n                gone\r\n            );\r\n        } else {\r\n            View.slideToVisibility(\r\n                gravity,\r\n                visible,\r\n                gone,\r\n                force\r\n            );\r\n        }\r\n    } else {\r\n        View.slideToVisibility(\r\n            gravity,\r\n            visible,\r\n            force,\r\n            gone\r\n        );\r\n    }\r\n}\r"}], "metadata": {"task_id": "MaterialFiles/1246", "ground_truth": "        slideIn(gravity, force)\r\n    } else {\r\n        slideOut(gravity, force, gone)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import android.view.View\nfun View.slideToVisibilityUnsafe(\r\n    gravity: Int,\r\n    visible: Boolean,\r\n    force: Boolean = false,\r\n    gone: Boolean = false", "choices": [{"text": ",\r\n) {\r\n    return View.slideToVisibilityUnsafe(\r\n        gravity,\r\n        visible,\r\n        force,\r\n        gone,\r\n    )\r\n}\r\nfun View.slideToVisibility(\r\n    gravity: Int,\r\n    visible: Boolean,\r\n    force: Boolean = false,\r\n    gone: Boolean = false,\r\n) {\r\n    return View.slideToVisibility(\r\n        gravity,\r\n        visible,\r\n        force,\r\n        gone,\r\n    )\r\n}\r\nfun"}], "metadata": {"task_id": "MaterialFiles/1247", "ground_truth": ") {\r\n    GlobalScope.launch(Dispatchers.Main.immediate) {\r\n        slideToVisibility(gravity, visible, force, gone)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import android.view.View\noverride fun onViewRecycled(holder: ViewHolder) {\r\n        super.onViewRecycled(holder)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "MaterialFiles/1252", "ground_truth": "\r\n        val binding = holder.binding\r\n        binding.image.dispose()\r\n        binding.largeImage.recycle()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\image\\ImageViewerAdapter.kt"}}
{"prompt": "import me.zhanghai.android.files.util.finish\nimport me.zhanghai.android.files.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n\r\n        if (paths.isEmpty()) {\r\n            // We did finish the activity in onActivityCreated(), however we will still be called\r\n            // here before the activity is actually finished.", "choices": [{"text": "\r\n            finish();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        if (resultCode == RESULT_OK) {\r\n            paths = data.getStringArrayListExtra(\"paths\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data, Bundle savedInstanceState) {\r"}], "metadata": {"task_id": "MaterialFiles/1256", "ground_truth": "            return\r\n        }\r\n\r\n        updateTitle()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\image\\ImageViewerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.delete\nimport me.zhanghai.android.files.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean =\r\n        when (item.itemId) {\r\n            R.id.action_delete -> {\r\n                confirmDelete()\r\n                true\r\n            }\r\n            R.id.action_share -> {", "choices": [{"text": "\r\n                confirmShare()\r\n                true\r\n            }\r\n        }\r\noverride fun onCreateOptionsMenu(menu: Menu): Boolean =\r\n        when (menu.itemId) {\r\n            menu.add(R.id.action_delete)\r\n            menu.add(R.id.action_share)\r\n        }\r\noverride fun onPrepareOptionsMenu(menu: Menu): Boolean =\r\n        when (menu.itemId) {\r\n            menu.findItem(R.id.action_delete).setVisible(confirmDelete())\r\n"}], "metadata": {"task_id": "MaterialFiles/1259", "ground_truth": "                share()\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\image\\ImageViewerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nimport java8.nio.file.Path\nprivate fun updateTitle() {\r\n        val path = currentPath\r\n        requireActivity().title = path.fileName.toString()\r\n        val size = paths.size\r\n        binding.toolbar.subtitle = if (size > 1) {\r\n            getString(\r\n                R.string.image_viewer_subtitle_format, binding.viewPager.currentItem + 1, size", "choices": [{"text": ")\r\n        } else {\r\n            getString(\r\n                R.string.image_viewer_subtitle_format, binding.viewPager.currentItem + 1, size)\r\n        }\r\n        binding.toolbar.setTitle(binding.toolbar.subtitle)\r\n        binding.toolbar.setSubtitle(binding.toolbar.subtitle)\r\n        binding.toolbar.setSubtitle(binding.toolbar.subtitle)\r\n        binding.toolbar.setSubtitle(binding.toolbar.subtitle)\r\n        binding.toolbar.setSubtitle(binding."}], "metadata": {"task_id": "MaterialFiles/1260", "ground_truth": "            )\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\image\\ImageViewerFragment.kt"}}
{"prompt": "import android.view.Menu\noverride fun onPrepareOptionsMenu(menu: Menu) {", "choices": [{"text": "\n  menu.add(R.id.action_settings, R.string.action_settings)\n  menu.add(R.id.action_settings, R.string.action_settings)\n  menu.add(R.id.action_settings, R.string.action_settings)\n  menu.add(R.id.action_settings, R.string.action_settings)\n  menu.add(R.id.action_settings, R.string.action_settings)\n  menu.add(R.id.action_settings, R.string."}], "metadata": {"task_id": "MaterialFiles/1269", "ground_truth": "        super.onPrepareOptionsMenu(menu)\r\n\r\n        updateSaveMenuItem()\r\n        updateEncodingMenuItems()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorFragment.kt"}}
{"prompt": "fun onSupportNavigateUp(): Boolean {\r\n        if (onBackPressedCallback.isEnabled) {", "choices": [{"text": ") {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function onBackPressedCallback(): Boolean {\r\n        if (onSupportNavigateUp()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function onSupportNavigateDown(): Boolean {\r\n        if (onSupportNavigateUp()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function onBackPressed"}], "metadata": {"task_id": "MaterialFiles/1271", "ground_truth": "            onBackPressedCallback.handleOnBackPressed()\r\n            return true\r\n        }\r\n        return false\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nprivate fun updateTitle() {\r\n        val fileName = viewModel.file.value.fileName.toString()\r\n        val changed = viewModel.isTextChanged.value\r\n        requireActivity().title = getString(\r\n            if (changed) {\r\n                R.string.text_editor_title_changed_format", "choices": [{"text": "\r\n            } else {\r\n                R.string.text_editor_title_format\r\n            }\r\n        )\r\n        requireActivity().title = getString(\r\n            if (changed) {\r\n                R.string.text_editor_title_changed_format\r\n            } else {\r\n                R.string.text_editor_title_format\r\n            }\r\n        )\r\n        requireActivity().title = getString(\r\n            if (changed) {\r\n                R.string.text_editor_title_format\r\n            } else {"}], "metadata": {"task_id": "MaterialFiles/1274", "ground_truth": "            } else {\r\n                R.string.text_editor_title_format\r\n            }, fileName\r\n        )\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nprivate fun onReload() {\r\n        if (viewModel.isTextChanged.value) {", "choices": [{"text": "\r\n            viewModel.isTextChanged.value = false;\r\n        }\r\n        if (viewModel.isImageChanged.value) {\r\n            viewModel.isImageChanged.value = false;\r\n        }\r\n        if (viewModel.isVideoChanged.value) {\r\n            viewModel.isVideoChanged.value = false;\r\n        }\r\n        if (viewModel.isAudioChanged.value) {\r\n            viewModel.isAudioChanged.value = false;\r\n        }\r\n        if (viewModel.isMusicChanged.value)"}], "metadata": {"task_id": "MaterialFiles/1275", "ground_truth": "            ConfirmReloadDialogFragment.show(this)\r\n        } else {\r\n            reload()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorFragment.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.Job\nimport androidx.lifecycle.viewModelScope\nfun reload() {\r\n        viewModelScope.launch {\r\n            loadJob?.cancel()?.also { loadJob = null }\r\n            reloadJob?.cancel()?.also { reloadJob = null }\r\n            reloadJob = launch {\r\n                mapFileToBytesState(_file.value)\r\n                if (isActive) {", "choices": [{"text": " {\r\n                    loadJob?.cancel()?.also { loadJob = null }\r\n                    loadJob = launch {\r\n                        mapFileToBytesState(_file.value)\r\n                        if (isActive) {\r\n                            reloadJob?.cancel()?.also { reloadJob = null }\r\n                            reloadJob = launch {\r\n                                mapFileToBytesState(_file.value)\r\n                                if (isActive) {\r\n                                    loadJob?.cancel()?.also { loadJob = null }\r\n                                    loadJob = launch {\r\n                                        map"}], "metadata": {"task_id": "MaterialFiles/1280", "ground_truth": "                    reloadJob = null\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorViewModel.kt"}}
{"prompt": "import timber.log.Timber\nimport com.machiav3lli.backup.utils.CryptoSetupException\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\n @Throws(BackupFailedException::class, CryptoSetupException::class)\r\n    protected open fun backupData(\r\n        app: Package,\r\n        backupInstanceDir: StorageFile,\r\n        iv: ByteArray?,\r\n    ): Boolean {\r\n        val dataType = BACKUP_DIR_DATA\r\n        Timber.i(LOG_START_BACKUP, app.packageName, dataType)\r\n        return genericBackupData(\r\n            dataType,\r\n            backupInstanceDir,", "choices": [{"text": "\r\n            iv,\r\n        )\r\n    }\r\n\r\n    protected open fun backupData(\r\n        app: Package,\r\n        backupInstanceDir: StorageFile,\r\n        iv: ByteArray?,\r\n    ): Boolean {\r\n        val dataType = BACKUP_FILE_DATA\r\n        Timber.i(LOG_START_BACKUP, app.packageName, dataType)\r\n        return genericBackupData(\r\n            dataType,\r\n            backupInstanceDir,\r\n            iv,\r\n        )\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "Neo-Backup/1", "ground_truth": "            app.dataPath,\r\n            isCompressionEnabled(),\r\n            iv\r\n        )\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\BackupAppAction.kt"}}
{"prompt": "fun getBackupArchiveFilename(\r\n        what: String,\r\n        isCompressed: Boolean,\r\n        compressionType: String?,\r\n        isEncrypted: Boolean\r\n    ): String {\r\n        val extension = buildString {\r\n            if (isCompressed) {\r\n                append(when (compressionType) {\r\n                    \"gz\"  -> \".gz\"\r\n                    \"zst\" -> \".zst\"\r\n                    else -> \"\"\r\n                })\r\n            }\r\n            if (isEncrypted) {", "choices": [{"text": "\r\n                append(when (compressionType) {\r\n                    \"gz\"  -> \".gz\"\r\n                    \"zst\" -> \".zst\"\r\n                    else -> \"\"\r\n                })\r\n            }\r\n            if (isEncrypted) {\r\n                append(when (compressionType) {\r\n                    \"gz\"  -> \".gz\"\r\n                    \"zst\" -> \".zst\"\r\n                    else -> \"\"\r\n                })\r\n            }\r\n            append(when (compressionType) {\r\n                \"gz\"  -> \".gz"}], "metadata": {"task_id": "Neo-Backup/3", "ground_truth": "                append(\".enc\")\r\n            }\r\n        }\r\n        return \"$what.tar$extension\"\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\BaseAppAction.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.isRestoreAllPermissions\nimport com.machiav3lli.backup.utils.isAllowDowngrade\nimport com.machiav3lli.backup.preferences.pref_installationPackage\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.handler.ShellHandler.Companion.hasPmBypassLowTargetSDKBlock\nimport com.machiav3lli.backup.R\nprivate fun getSessionCreateCommand(\r\n        profileId: Int,\r\n        sumSize: Long,\r\n    ): String =\r\n        listOfNotNull(\r\n            \"pm\", \"install-create\",\r\n            if (isRestoreAllPermissions) \"-g\" else null,\r\n            if (isAllowDowngrade) \"-d\" else null,\r\n            if (hasPmBypassLowTargetSDKBlock) \"--bypass-low-target-sdk-block\" else null,\r\n            \"-i\", pref_installationPackage.value,", "choices": [{"text": "\r\n            \"-p\", profileId,\r\n            \"-s\", String.valueOf(sumSize),\r\n        );\r\n\r\n    return getSessionCreateCommand;\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/7", "ground_truth": "            \"-t\",\r\n            \"-r\",\r\n            \"-S\", sumSize,\r\n            \"--user\", profileId,\r\n        ).joinToString(\" \")", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\RestoreAppAction.kt"}}
{"prompt": "private fun getSessionCommitCommand(\r\n        sessionId: Int,", "choices": [{"text": ") {\r\n    return {\r\n        type: 'getSessionCommitCommand',\r\n        sessionId: sessionId\r\n    };\r\n}\r\n\r\nexport function getSessionCommitCommand(\r\n    sessionId: Int,\r\n    message: String\r\n) {\r\n    return {\r\n        type: 'getSessionCommitCommand',\r\n        sessionId: sessionId,\r\n        message: message\r\n    };\r\n}\r\n\r\nexport function setSessionCommitCommand(\r\n    sessionId: Int,\r\n    message: String\r\n) {\r\n    return {"}], "metadata": {"task_id": "Neo-Backup/9", "ground_truth": "    ): String =\r\n        listOfNotNull(\r\n            \"pm\", \"install-commit\", sessionId\r\n        ).joinToString(\" \")", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\RestoreAppAction.kt"}}
{"prompt": "import android.util.JsonReader\nimport android.content.Context\nprivate fun parseThread(context: Context, jsonReader: JsonReader) {\r\n        jsonReader.beginObject()\r\n        while (jsonReader.hasNext()) {\r\n            when (jsonReader.nextName()) {\r\n                \"1-SMS\" -> restoreSMS(context, jsonReader)\r\n                \"2-MMS\" -> restoreMMS(context, jsonReader)", "choices": [{"text": "\r\n                \"3-SMS\" -> restoreSMS(context, jsonReader)\r\n                \"4-MMS\" -> restoreMMS(context, jsonReader)\r\n                \"5-SMS\" -> restoreSMS(context, jsonReader)\r\n                \"6-MMS\" -> restoreMMS(context, jsonReader)\r\n                \"7-SMS\" -> restoreSMS(context, jsonReader)\r\n                \"8-MMS\" -> restoreMMS(context, jsonReader)\r\n                \"9-SMS\" -> restoreSMS(context, jsonReader)\r\n               "}], "metadata": {"task_id": "Neo-Backup/14", "ground_truth": "                else -> jsonReader.skipValue()\r\n            }\r\n        }\r\n        jsonReader.endObject()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\RestoreSMSMMSJSONAction.kt"}}
{"prompt": "import java.io.File\nimport com.machiav3lli.backup.utils.CryptoSetupException\nimport com.machiav3lli.backup.tasks.AppActionWork\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\n @Throws(CryptoSetupException::class, RestoreFailedException::class)\r\n    override fun restoreAllData(\r\n        work: AppActionWork?,\r\n        app: Package,\r\n        backup: Backup,\r\n        backupDir: StorageFile,\r\n        backupMode: Int", "choices": [{"text": "64\r\n    ) throws CryptoSetupException, RestoreFailedException;\r\n\r\n @Throws(CryptoSetupException::class, RestoreFailedException::class)\r\n    override fun restoreAllData(\r\n        work: AppActionWork?,\r\n        app: Package,\r\n        backup: Backup,\r\n        backupDir: File,\r\n        backupMode: Int64\r\n    ) throws CryptoSetupException, RestoreFailedException;\r\n\r\n @Throws(CryptoSetupException::class, RestoreFailedException::class)\r\n    override fun restoreAllData(\r\n        work: AppActionWork?"}], "metadata": {"task_id": "Neo-Backup/20", "ground_truth": "    ) {\r\n        work?.setOperation(\"dat\")\r\n        restoreData(app, backup, backupDir)\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\RestoreSpecialAction.kt"}}
{"prompt": "import timber.log.Timber\nimport com.machiav3lli.backup.utils.TraceUtils\noverride fun onResume() {\r\n        Timber.w(\r\n            \"---------------------------------------- resume ${\r\n                TraceUtils.classAndId(this)", "choices": [{"text": ".classAndId(this)\r\n            }\"\r\n        )\r\n}\r\noverride fun onPause() {\r\n        Timber.w(\r\n            \"---------------------------------------- pause ${\r\n                TraceUtils.classAndId(this)\r\n            }\"\r\n        )\r\n}\r\noverride fun onStop() {\r\n        Timber.w(\r\n            \"---------------------------------------- stop ${\r\n                TraceUtils.classAndId(this)\r\n            }\"\r\n        )\r\n}\r\noverride fun onDestroy() {\r\n        Timber.w("}], "metadata": {"task_id": "Neo-Backup/23", "ground_truth": "            }\"\r\n        )\r\n        OABX.resumeActivity(this)\r\n        super.onResume()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\activities\\BaseActivity.kt"}}
{"prompt": "import timber.log.Timber\nimport com.machiav3lli.backup.utils.TraceUtils\noverride fun onDestroy() {\r\n        Timber.w(\r\n            \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ destroy ${\r\n                TraceUtils.classAndId(this)", "choices": [{"text": "} ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\r\n            }\r\n        )\r\n        super.onDestroy()\r\n}\r\noverride fun onPause() {\r\n        Timber.w(\r\n            \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pause ${\r\n                TraceUtils.classAndId(this)\r\n            } ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\r\n        )\r\n        super.onPause()\r\n}\r\noverride fun onResume() {\r\n        Timber.w(\r\n            \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ resume ${\r\n                TraceUtils."}], "metadata": {"task_id": "Neo-Backup/24", "ground_truth": "            }\"\r\n        )\r\n        OABX.removeActivity(this)\r\n        super.onDestroy()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\activities\\BaseActivity.kt"}}
{"prompt": "import timber.log.Timber\nimport android.content.Intent\nfun doIntent(intent: Intent?): Boolean {\r\n        if (intent == null) return false\r\n        val command = intent.action\r\n        Timber.i(\"Main: command $command\")\r\n        when (command) {\r\n            null                         -> {}\r\n            \"android.intent.action.MAIN\" -> {}\r\n            else                         -> {", "choices": [{"text": "\r\n                if (command == \"android.intent.action.MAIN\") {\r\n                    null                         -> {}\r\n                    \"android.intent.action.MAIN\" -> {}\r\n                    else                         -> {}\r\n                } else {\r\n                    null                         -> {}\r\n                    \"android.intent.action.MAIN\" -> {}\r\n                    else                         -> {}\r\n                }\r\n            }\r\n        } else {\r\n            null                         -> {}\r\n            \"android.intent.action.MAIN\" -> {}\r\n            else                         -> {}\r\n       "}], "metadata": {"task_id": "Neo-Backup/28", "ground_truth": "                addInfoLogText(\"Main: command '$command'\")\r\n            }\r\n        }\r\n        return false\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\activities\\MainActivityX.kt"}}
{"prompt": "fun whileShowingSnackBar(message: String, todo: () -> Unit) {\r\n        runOnUiThread {\r\n            showSnackBar(message)\r\n        }", "choices": [{"text": "}\r\n}\r\n\r\nfunction showSnackBar(message: String) {\r\n        runOnUiThread(() => {\r\n                Snackbar.show(message);\r\n        });\r\n}\r\n\r\nfunction showSnackBar(message: String, todo: () -> Unit) {\r\n        runOnUiThread(() => {\r\n                Snackbar.show(message, todo);\r\n        });\r\n}\r\n\r\nfunction hideSnackBar() {\r\n        runOnUiThread(() => {\r\n                Snackbar"}], "metadata": {"task_id": "Neo-Backup/31", "ground_truth": "        todo()\r\n        runOnUiThread {\r\n            dismissSnackBar()\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\activities\\MainActivityX.kt"}}
{"prompt": "import androidx.room.Transaction\n @Transaction", "choices": [{"text": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}], "metadata": {"task_id": "Neo-Backup/35", "ground_truth": "    fun updateList(vararg appInfos: AppInfo) {\r\n        emptyTable()\r\n        replaceInsert(*appInfos)\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\dao\\AppInfoDao.kt"}}
{"prompt": "import androidx.room.Transaction\n @Transaction", "choices": [{"text": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}], "metadata": {"task_id": "Neo-Backup/37", "ground_truth": "    fun updateList(vararg backups: Backup) {\r\n        emptyTable()\r\n        replaceInsert(*backups)\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\dao\\BackupDao.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Blocklist\nfun updateList(blocklistId: Long, newList: Set<String>) {\r\n        deleteById(blocklistId)\r\n        newList.forEach { packageName ->\r\n            insert(\r\n                Blocklist.Builder()\r\n                    .withId(0)\r\n                    .withBlocklistId(blocklistId)", "choices": [{"text": "\r\n                   .withPackageName(packageName)\r\n                   .build()\r\n            )\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Neo-Backup/38", "ground_truth": "                    .withPackageName(packageName)\r\n                    .build()\r\n            )\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\dao\\BlocklistDao.kt"}}
{"prompt": "fun toAppInfo() = AppInfo(\r\n        packageName,\r\n        packageLabel,\r\n        versionName,\r\n        versionCode,\r\n        profileId,", "choices": [{"text": "\r\n        packageName,\r\n        packageLabel,\r\n        versionName,\r\n        versionCode,\r\n        profileId,\r\n        packageName,\r\n        packageLabel,\r\n        versionName,\r\n        versionCode,\r\n        profileId,\r\n        packageName,\r\n        packageLabel,\r\n        versionName,\r\n        versionCode,\r\n        profileId,\r\n        packageName,\r\n        packageLabel,\r\n        versionName,\r\n        versionCode,\r\n        profileId,\r\n        packageName,\r\n        packageLabel,\r\n        versionName"}], "metadata": {"task_id": "Neo-Backup/39", "ground_truth": "        sourceDir,\r\n        splitSourceDirs,\r\n        isSystem,\r\n        permissions\r\n    )", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\entity\\Backup.kt"}}
{"prompt": "import com.machiav3lli.backup.MAIN_DB_NAME\nimport androidx.room.Room\nimport androidx.room.Database\nimport android.content.Context\nfun getInstance(context: Context): ODatabase {\r\n            synchronized(this) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room\r\n                        .databaseBuilder(\r\n                            context.applicationContext, ODatabase::class.java,\r\n                            MAIN_DB_NAME\r\n                        )\r\n                        .fallbackToDestructiveMigration()", "choices": [{"text": "\r\n                       .build();\r\n                }\r\n            }\r\n            return INSTANCE;\r\n        }\r\n}"}], "metadata": {"task_id": "Neo-Backup/51", "ground_truth": "                        .build()\r\n                }\r\n                return INSTANCE!!\r\n            }\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\ODatabase.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport androidx.compose.ui.window.Dialog\nimport androidx.compose.runtime.MutableState\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun BaseDialog(\r\n    openDialogCustom: MutableState<Boolean>,\r\n    dialogUI: @Composable (() -> Unit),\r\n) {\r\n    Dialog(\r\n        onDismissRequest = { openDialogCustom.value = false },", "choices": [{"text": "\r\n        contentView = dialogUI,\r\n    );\r\n}\r\n\r\n@Composable\r\nfun BaseDialog(\r\n    openDialogCustom: MutableState<Boolean>,\r\n    dialogUI: @Composable (() -> Unit),\r\n) {\r\n    Dialog(\r\n        onDismissRequest = { openDialogCustom.value = false },\r\n        contentView = dialogUI,\r\n    );\r\n}\r\n\r\n@Composable\r\nfun BaseDialog(\r\n    openDialogCustom: MutableState<Boolean>,\r\n    dialogUI:"}], "metadata": {"task_id": "Neo-Backup/52", "ground_truth": "        properties = DialogProperties(usePlatformDefaultWidth = false)\r\n    ) {\r\n        dialogUI()\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dialogs\\ComposeDialog.kt"}}
{"prompt": "import java.io.IOException\nimport timber.log.Timber\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.R\nimport android.os.Process\nimport android.content.pm.PackageManager\nimport android.content.pm.ApplicationInfo\nimport android.content.Context\nimport android.app.usage.StorageStatsManager\nimport android.app.usage.StorageStats\n\r\n@Throws(PackageManager.NameNotFoundException::class)\r\nfun Context.getPackageStorageStats(\r\n    packageName: String,\r\n    storageUuid: UUID = packageManager.getApplicationInfo(packageName, 0).storageUuid,\r\n): StorageStats? {\r\n    val storageStatsManager =\r\n        getSystemService(Context.STORAGE_STATS_SERVICE) as StorageStatsManager\r\n    return try {\r\n        storageStatsManager.queryStatsForPackage(\r\n            storageUuid,\r\n            packageName,\r\n            Process.myUserHandle()\r\n        )\r\n    } catch (e: IOException) {\r\n        Timber.e(\"Could not retrieve storage stats of $packageName: $e\")\r\n        null", "choices": [{"text": " return null\r\n    }\r\n}\r\n\r\n@Throws(PackageManager.NameNotFoundException::class)\r\nfun Context.getPackageStorageStats(\r\n    packageName: String,\r\n    storageUuid: UUID = packageManager.getApplicationInfo(packageName, 0).storageUuid,\r\n): StorageStats? {\r\n    val storageStatsManager =\r\n        getSystemService(Context.STORAGE_STATS_SERVICE) as StorageStatsManager\r\n    return try {\r\n        storageStatsManager.queryStatsForPackage(\r\n            storageUuid,\r\n            packageName,\r\n"}], "metadata": {"task_id": "Neo-Backup/58", "ground_truth": "    } catch (e: Throwable) {\r\n        LogsHandler.unexpectedException(e, packageName)\r\n        null\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\BackendController.kt"}}
{"prompt": "import java.io.IOException\nimport com.machiav3lli.backup.items.UndeterminedStorageFile\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.dbs.entity.Backup\n @Throws(IOException::class)\r\n    protected fun saveBackupProperties(\r\n        propertiesFile: UndeterminedStorageFile,\r\n        backup: Backup,\r\n    ): StorageFile? {\r\n        propertiesFile.writeText(backup.toSerialized())?.let {", "choices": [{"text": "\r\n            return propertiesFile;\r\n        };\r\n    }\r\n\r\n    protected fun saveBackupProperties(\r\n        propertiesFile: UndeterminedStorageFile,\r\n        backup: Backup,\r\n    ): StorageFile? {\r\n        propertiesFile.writeText(backup.toSerialized())?.let {\r\n            return propertiesFile;\r\n        };\r\n    }\r\n\r\n    protected fun saveBackupProperties(\r\n        propertiesFile: UndeterminedStorageFile,\r\n        backup: Backup,\r\n    ): StorageFile"}], "metadata": {"task_id": "Neo-Backup/61", "ground_truth": "            Timber.i(\"Wrote $it for backup: $backup\")\r\n            return it\r\n        }\r\n        return null\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\BackupBuilder.kt"}}
{"prompt": "import timber.log.Timber\nimport com.machiav3lli.backup.preferences.pref_paranoidHousekeeping\nimport com.machiav3lli.backup.preferences.pref_numBackupRevisions\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\nfun housekeepingPackageBackups(app: Package) {\r\n\r\n        if (pref_paranoidHousekeeping.value)\r\n            app.refreshBackupList()\r\n\r\n        val numBackupRevisions =\r\n            pref_numBackupRevisions.value\r\n        if (numBackupRevisions == 0) {\r\n            Timber.i(\"<${app.packageName}> Infinite backup revisions configured. Not deleting any backup.\")", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Neo-Backup/63", "ground_truth": "            return\r\n        }\r\n\r\n        app.deleteOldestBackups(numBackupRevisions)\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\BackupRestoreHelper.kt"}}
{"prompt": "fun <T> catchExceptions(todo: () -> T): T? {\r\n            return try {\r\n                todo()", "choices": [{"text": ";\r\n            } catch (error) {\r\n                return error;\r\n            }\r\n        }\r\n\r\n        function tryCatch(todo: () -> T): T? {\r\n            return try {\r\n                return todo();\r\n            } catch (error) {\r\n                return error;\r\n            }\r\n        }\r\n\r\n        function tryFinally(todo: () -> T): T? {\r\n            return try {\r\n                return todo();\r\n            } finally {\r\n                return todo();\r\n            }\r\n        }\r"}], "metadata": {"task_id": "Neo-Backup/67", "ground_truth": "            } catch (e: Throwable) {\r\n                unexpectedException(e)\r\n                null\r\n            }\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\LogsHandler.kt"}}
{"prompt": "suspend fun <T> catchExceptions(todo: suspend () -> T): T? {\r\n            return try {\r\n                todo()", "choices": [{"text": ";\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/68", "ground_truth": "            } catch (e: Throwable) {\r\n                unexpectedException(e)\r\n                null\r\n            }\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\LogsHandler.kt"}}
{"prompt": "import com.machiav3lli.backup.tasks.AppActionWork\nfun cancel(tag: String? = null) {\r\n        // only cancel ActionWork, so that corresponding FinishWork will still be executed\r\n        if (tag.isNullOrEmpty()) {\r\n            AppActionWork::class.qualifiedName?.let {\r\n                manager.cancelAllWorkByTag(it)", "choices": [{"text": ";\r\n            };\r\n        } else {\r\n            AppActionWork::class.qualifiedName?.let {\r\n                manager.cancelAllWorkByTag(tag);\r\n            };\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/74", "ground_truth": "            }\r\n        } else {\r\n            manager.cancelAllWorkByTag(\"name:$tag\")\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\WorkHandler.kt"}}
{"prompt": "fun getTagVars(tags: MutableSet<String>): MutableMap<String, String> {\r\n            val vars = mutableMapOf<String, String>()\r\n            tags.forEach { tag ->\r\n                val parts = tag.toString().split(':', limit = 2)\r\n                if (parts.size > 1) {\r\n                    val (key, value) = parts", "choices": [{"text": "(key, value) = parts[1]\r\n                }\r\n                else {\r\n                    val (key, value) = parts[0]\r\n                }\r\n                vars.set(key, value)\r\n            })\r\n            return vars\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Neo-Backup/75", "ground_truth": "                    vars[key] = value\r\n                }\r\n            }\r\n            return vars\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\WorkHandler.kt"}}
{"prompt": "private fun getTagVar(tags: Set<String>, name: String): String? {\r\n            tags.forEach { tag ->\r\n                val parts = tag.split(':', limit = 2)\r\n                if (parts.size > 1) {\r\n                    val (key, value) = parts\r\n                    if (key == name)", "choices": [{"text": "\r\n                        return value\r\n                    }\r\n                }\r\n            })\r\n            return null\r\n        }\r\n\r\n        private fun getTag(tags: Set<String>, name: String): String? {\r\n            tags.forEach { tag ->\r\n                val parts = tag.split(':', limit = 2)\r\n                if (parts.size > 1) {\r\n                    val (key, value) = parts\r\n                    if (key == name) {\r\n                        return value\r\n                    }\r\n                }\r\n            })\r\n"}], "metadata": {"task_id": "Neo-Backup/76", "ground_truth": "                        return value\r\n                }\r\n            }\r\n            return null\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\WorkHandler.kt"}}
{"prompt": "fun setTagVar(tags: MutableSet<String>, name: String, value: String) {\r\n            run tags@{\r\n                tags.forEach { tag ->\r\n                    val parts = tag.toString().split(':', limit = 2)\r\n                    if (parts.size > 1) {\r\n                        val (key, oldValue) = parts\r\n                        if (key == name) {\r\n                            tags.remove(tag)\r\n                            return\r\n                        }", "choices": [{"text": ", newValue = parts[1]\r\n                        if (newValue == value) {\r\n                            tags.remove(tag)\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n                tags.add(name, value)\r\n            }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/77", "ground_truth": "                    }\r\n                }\r\n            }\r\n            tags.add(\"$name:$value\")\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\WorkHandler.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.TraceUtils\nimport com.machiav3lli.backup.traceBackups\nimport com.machiav3lli.backup.dbs.entity.Backup\nfun updateBackupList(backups: List<Backup>) {\r\n        traceBackups {\r\n            \"<$packageName> updateBackupList: ${TraceUtils.formatSortedBackups(backups)} ${\r\n                TraceUtils.methodName(\r\n                    2", "choices": [{"text": ",\r\n                    \"updateBackupList\"\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/86", "ground_truth": "                )\r\n            }\"\r\n        }\r\n        backupList = backups\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\items\\Package.kt"}}
{"prompt": "fun writeText(text: String) : Boolean {\r\n        return try {\r\n            outputStream().writer().use {\r\n                it.write(text)\r\n                true", "choices": [{"text": ";\r\n            }\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Neo-Backup/111", "ground_truth": "            }\r\n        } catch (e: Throwable) {\r\n            false\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\items\\RootFile.kt"}}
{"prompt": "import java.io.FileFilter\nimport java.io.File\noverride fun listFiles(fileFilter: FileFilter?): Array<RootFile>? {\r\n        //if (!isDirectory) return null\r\n        var files = list()?.map {\r\n            RootFile(this, it)\r\n        }\r\n        fileFilter?.let { filter ->\r\n            files = files?.filter {", "choices": [{"text": " {\r\n                return filter.test(it)\r\n            }\r\n        } }\r\n        return files\r\n    }\r\n\r\noverride fun list(): Array<RootFile>? {\r\n        //if (!isDirectory) return null\r\n        var files = list()?.map {\r\n            RootFile(this, it)\r\n        }\r\n        fileFilter?.let { filter ->\r\n            files = files?.filter {\r\n                return filter.test(it)\r\n            }\r\n        }\r\n        return files\r\n   "}], "metadata": {"task_id": "Neo-Backup/115", "ground_truth": "                filter.accept(it)\r\n            }\r\n        }\r\n        return files?.toTypedArray()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\items\\RootFile.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.scheduleAlarmsOnce\noverride fun onTerminate() {\r\n\r\n        // in case the app is terminated too early\r\n        scheduleAlarmsOnce()", "choices": [{"text": "\r\n}\r\noverride fun onResume() {\r\n\r\n        // in case the app is resumed too early\r\n        scheduleAlarmsOnce()\r\n}\r\noverride fun onPause() {\r\n\r\n        // in case the app is paused too early\r\n        scheduleAlarmsOnce()\r\n}\r\noverride fun onRestart() {\r\n\r\n        // in case the app is restarted too early\r\n        scheduleAlarmsOnce()\r\n}\r\noverride fun onStop() {\r\n\r\n        // in case the app is stopped too early\r\n       "}], "metadata": {"task_id": "Neo-Backup/117", "ground_truth": "\r\n        work = work?.release()\r\n        refNB = WeakReference(null)\r\n        super.onTerminate()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\OABX.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport com.machiav3lli.backup.ui.item.LaunchPref\nfun publicPreferences(persist: Boolean = false) =\r\n    Pref.prefGroups.map {\r\n        val (group, prefs) = it\r\n        prefs.mapNotNull { pref ->\r\n            if (pref.private ||\r\n                pref is LaunchPref ||\r\n                pref.group == \"kill\" ||\r\n                (persist && pref.group == \"persist\")\r\n            )", "choices": [{"text": "\r\n                return pref\r\n            }\r\n            return null\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Neo-Backup/141", "ground_truth": "                null\r\n            else\r\n                pref\r\n        }\r\n    }.flatten()", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\AdvancedPreferences.kt"}}
{"prompt": "import com.machiav3lli.backup.handler.usedThreadsByName\nfun threadsInfo(): List<String> {\r\n    val threads =\r\n        synchronized(usedThreadsByName) { usedThreadsByName }.toMap()\r\n    return listOf(", "choices": [{"text": "\r\n       .entrySet()\r\n       .stream()\r\n       .map(entry -> entry.getKey().toString())\r\n       .collect(toList());\r\n}\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport com.machiav3lli.backup.handler.usedThreadsByName\r\nimport com.machiav3lli.backup.handler.usedThreadsByName\r\nimport com.machiav3lli.backup.handler.usedThreadsByName\r\nimport com.m"}], "metadata": {"task_id": "Neo-Backup/146", "ground_truth": "        \"------ threads\",\r\n        \"max: ${maxThreads.get()}\",\r\n        \"used: (${threads.size})${threads.values}\",\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.compose.icons.phosphor.X\nimport com.machiav3lli.backup.OABX\nfun lastErrorCommand(): List<String> {\r\n    val cmds = OABX.lastErrorCommands\r\n    return if (cmds.isNotEmpty()) {", "choices": [{"text": "\r\n    if (cmds.size() == 1) {\r\n        return cmds.get(0)\r\n    } else {\r\n        return cmds\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Neo-Backup/148", "ground_truth": "        listOf(\"------ last error command\") + cmds\r\n    } else {\r\n        listOf(\"------ ? no last error command\")\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "fun onErrorInfo(): List<String> {\r\n    try {\r\n        val logs = logInt() + logApp()\r\n        return listOf(\"=== onError log\", \"\") +\r\n                baseInfo() +\r\n                dumpPrefs() +\r\n                dumpEnv() +\r\n                lastErrorPkg() +", "choices": [{"text": "\r\n    } catch (e) {\r\n        return listOf(\"=== onError log\", \"\") +\r\n                baseInfo() +\r\n                dumpPrefs() +\r\n                dumpEnv() +\r\n                lastErrorPkg()\r\n    }\r\n}\r\n\r\nfunction baseInfo(): List<String> {\r\n    try {\r\n        val logs = logInt() + logApp()\r\n        return listOf(\"=== base info log\", \"\") +\r\n                logs\r\n    } catch (e) {\r\n        return listOf(\"=== base info log\", \"\")"}], "metadata": {"task_id": "Neo-Backup/149", "ground_truth": "                lastErrorCommand() +\r\n                logs\r\n    } finally {\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "fun supportInfo(title: String = \"\"): List<String> {\r\n    try {\r\n        val logs = logInt() + logRel()\r\n        return listOf(\"=== ${title.ifEmpty { \"support log\" }}\", \"\") +\r\n                extendedInfo() +\r\n                dumpPrefs() +\r\n                dumpEnv() +\r\n                dumpAlarms() +\r\n                dumpTiming() +\r\n                accessTest() +\r\n                threadsInfo() +\r\n                lastErrorPkg() +", "choices": [{"text": " logs\r\n    } catch (e) {\r\n        return listOf(\"=== ${title.ifEmpty { \"support log\" }}\", \"\") +\r\n                extendedInfo() +\r\n                dumpPrefs() +\r\n                dumpEnv() +\r\n                dumpAlarms() +\r\n                dumpTiming() +\r\n                accessTest() +\r\n                threadsInfo() +\r\n                lastErrorPkg()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/150", "ground_truth": "                lastErrorCommand() +\r\n                logs\r\n    } finally {\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.compose.item.RoundButton\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun SmallButton(\r\n    icon: ImageVector,\r\n    tint: Color = MaterialTheme.colorScheme.primary,\r\n    onClick: () -> Unit,\r\n) {\r\n    RoundButton(", "choices": [{"text": "icon, tint, onClick);\r\n}\r\n\r\n@Composable\r\nfun MediumButton(\r\n    icon: ImageVector,\r\n    tint: Color = MaterialTheme.colorScheme.primary,\r\n    onClick: () -> Unit,\r\n) {\r\n    RoundButton(icon, tint, onClick);\r\n}\r\n\r\n@Composable\r\nfun LargeButton(\r\n    icon: ImageVector,\r\n    tint: Color = MaterialTheme.colorScheme.primary,\r\n    onClick: () -> Unit,\r\n) {"}], "metadata": {"task_id": "Neo-Backup/151", "ground_truth": "        icon = icon,\r\n        onClick = onClick,\r\n        tint = tint\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview\r\n@Composable\r\nfun PreviewTerminal() {\r\n    Box(\r\n        modifier = Modifier\r\n            .height(500.dp)", "choices": [{"text": "\n    );\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewTerminal2() {\r\n    Box(\r\n        modifier = Modifier\r\n           .height(500.dp)\r\n    );\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewTerminal3() {\r\n    Box(\r\n        modifier = Modifier\r\n           .height(500.dp)\r\n    );\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewTerminal4() {\r\n    Box(\r\n        modifier"}], "metadata": {"task_id": "Neo-Backup/152", "ground_truth": "        //.width(500.dp)\r\n    ) {\r\n        TerminalPage()\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport com.machiav3lli.backup.ui.compose.item.ExpandableBlock\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun PrefsGroupCollapsed(prefs: List<Pref>, heading: String) {\r\n    if (prefs.isNotEmpty())\r\n        ExpandableBlock(", "choices": [{"text": "(prefs), heading);\r\n}\r\n\r\n@Composable\r\nfun PrefsGroupExpanded(prefs: List<Pref>, heading: String) {\r\n    if (prefs.isNotEmpty())\r\n        ExpandableBlock(prefs, heading);\r\n}\r\n\r\n@Composable\r\nfun PrefsGroupCollapsed(prefs: List<Pref>, heading: String) {\r\n    if (prefs.isNotEmpty())\r\n        ExpandableBlock(prefs, heading);\r\n}\r\n\r\n@Composable\r\nfun PrefsGroup"}], "metadata": {"task_id": "Neo-Backup/153", "ground_truth": "            heading = heading,\r\n        ) {\r\n            PrefsGroup(prefs = prefs, heading = null)\r\n        }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\ui\\PrefsGroup.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.foundation.layout.Column\n\r\n@Composable\r\nfun PrefsGroup(\r\n    modifier: Modifier = Modifier,\r\n    heading: String? = null,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    PrefsGroupHeading(heading)\r\n    CompositionLocalProvider(\r\n        LocalContentColor provides MaterialTheme.colorScheme.primary\r\n    ) {\r\n        Surface(color = Color.Transparent) {\r\n            Column(modifier = modifier) {", "choices": [{"text": "\r\n                PrefsGroupContent(content)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun PrefsGroupHeading(heading: String? = null) {\r\n    CompositionLocalProvider(\r\n        LocalContentColor provides MaterialTheme.colorScheme.primary\r\n    ) {\r\n        Surface(color = Color.Transparent) {\r\n            Column(modifier = modifier) {\r\n                PrefsGroupHeading(heading)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@"}], "metadata": {"task_id": "Neo-Backup/154", "ground_truth": "                content()\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\ui\\PrefsGroup.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport androidx.core.text.HtmlCompat\nimport android.content.Context\nprivate fun Context.getUsageNotes(): String = try {\r\n    val stream = resources.openRawResource(R.raw.help)\r\n    val htmlString = convertStreamToString(stream)\r\n    stream.close()\r\n    HtmlCompat.fromHtml(htmlString, HtmlCompat.FROM_HTML_MODE_LEGACY).dropLast(2).toString()", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Neo-Backup/162", "ground_truth": "} catch (e: IOException) {\r\n    e.toString()\r\n} catch (ignored: PackageManager.NameNotFoundException) {\r\n    \"\"\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\sheets\\HelpSheet.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nfun publishProgress(vararg progress: Progress) {\r\n        //need to update main thread\r\n        GlobalScope.launch(Dispatchers.Main) {", "choices": [{"text": "\r\n            GlobalScope.launch(Dispatchers.Main) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        GlobalScope.launch(Dispatchers.Main) {\r\n                            GlobalScope.launch(Dispatchers.Main) {\r\n                                GlobalScope.launch(Dispatchers.Main) {\r\n                                    GlobalScope.launch(Dispatchers.Main) {\r\n                                        GlobalScope.launch(Dispatchers.Main) {\r\n                                            GlobalScope.launch(Dispatchers.Main)"}], "metadata": {"task_id": "Neo-Backup/168", "ground_truth": "            if (!isCancelled) {\r\n                onProgressUpdate(*progress)\r\n            }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\tasks\\CoroutinesAsyncTask.kt"}}
{"prompt": "import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun Modifier.ifThen(\r\n    boolean: Boolean,\r\n    crossinline modifier: @Composable Modifier.() -> Modifier,\r\n): Modifier {\r\n    return if (boolean) {", "choices": [{"text": ", crossinline modifier\r\n}\r\n\r\n@Composable\r\ninline fun Modifier.ifElse(\r\n    boolean: Boolean,\r\n    crossinline modifier: @Composable Modifier.() -> Modifier,\r\n): Modifier {\r\n    return if (boolean) {\r\n        return crossinline modifier\r\n    }\r\n}\r\n\r\n@Composable\r\ninline fun Modifier.ifElseThen(\r\n    boolean: Boolean,\r\n    crossinline modifier: @Composable Modifier.() -> Modifier,\r\n): Modifier {\r\n    return if (boolean) {"}], "metadata": {"task_id": "Neo-Backup/171", "ground_truth": "        modifier.invoke(this)\r\n    } else {\r\n        this\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun Modifier.ifThenElse(\r\n    boolean: Boolean,\r\n    crossinline modifier: @Composable Modifier.() -> Modifier,\r\n    crossinline elseModifier: @Composable Modifier.() -> Modifier,\r\n): Modifier {\r\n    return if (boolean) {", "choices": [{"text": " {\r\n        return modifier(elseModifier)\r\n    } else {\r\n        return modifier(modifier)\r\n    }\r\n}\r\n\r\n@Composable\r\ninline fun Modifier.ifElse(\r\n    boolean: Boolean,\r\n    crossinline modifier: @Composable Modifier.() -> Modifier,\r\n    crossinline elseModifier: @Composable Modifier.() -> Modifier,\r\n): Modifier {\r\n    return if (boolean) {\r\n        return modifier(elseModifier)\r\n    } else {\r\n        return modifier(modifier)\r\n    }"}], "metadata": {"task_id": "Neo-Backup/172", "ground_truth": "        modifier.invoke(this)\r\n    } else {\r\n        elseModifier.invoke(this)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import kotlinx.coroutines.flow.Flow\nimport androidx.lifecycle.Lifecycle\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun <T> ObservedEffect(flow: Flow<T?>, onChange: (T?) -> Unit) {\r\n    val lcOwner = LocalLifecycleOwner.current\r\n    LaunchedEffect(flow, lcOwner.lifecycle) {", "choices": [{"text": ", onChange)\r\n}\r\n\r\n@Composable\r\nfun <T> ObservedEffect(flow: Flow<T?>, onChange: (T?) -> Unit) {\r\n    val lcOwner = LocalLifecycleOwner.current\r\n    LaunchedEffect(flow, lcOwner.lifecycle) {\r\n        onChange()\r\n    }\r\n}\r\n\r\n@Composable\r\nfun <T> ObservedEffect(flow: Flow<T?>, onChange: (T?) -> Unit) {\r\n    val lcOwner = LocalLifecycleOwner.current\r\n    La"}], "metadata": {"task_id": "Neo-Backup/175", "ground_truth": "        lcOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\r\n            flow.collect(onChange)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import androidx.lifecycle.Lifecycle\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ObservedEffect(onChange: () -> Unit) {\r\n    val lcOwner = LocalLifecycleOwner.current\r\n    LaunchedEffect(lcOwner.lifecycle) {", "choices": [{"text": " {\r\n        if (onChange) {\r\n            onChange()\r\n        }\r\n    }\r\n}\r\n\r\nclass Unit {\r\n    constructor() {\r\n        this.lifecycle = new Lifecycle()\r\n    }\r\n\r\n    get lifecycle() {\r\n        return this.lifecycle\r\n    }\r\n\r\n    dispose() {\r\n        this.lifecycle.dispose()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/176", "ground_truth": "        lcOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\r\n            onChange()\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import androidx.compose.ui.layout.layout\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n\r\n@Composable\r\nfun LazyListState.isAtBottom() = remember {\r\n    derivedStateOf {\r\n        try {\r\n            layoutInfo.visibleItemsInfo.last().index >= layoutInfo.totalItemsCount - 1", "choices": [{"text": ".index;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n@Composable\r\nfun LazyListState.isAtTop() = remember {\r\n    derivedStateOf {\r\n        try {\r\n            layoutInfo.visibleItemsInfo.first().index >= layoutInfo.totalItemsCount - 1.index;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\n@Composable\r\nfun LazyListState"}], "metadata": {"task_id": "Neo-Backup/178", "ground_truth": "        } catch (_: Throwable) {\r\n            true\r\n        }\r\n    }\r\n}.value", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun AddressBookPreview() {", "choices": [{"text": ".AddressBook;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview.widget"}], "metadata": {"task_id": "Neo-Backup/179", "ground_truth": "    Image(\r\n        Phosphor.AddressBook,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\AddressBook.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun AndroidLogoPreview() {", "choices": [{"text": "\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.PorterDuffColorFilter;\nimport android.graphics.PorterDuffXfermode;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.graphics.drawable.BitmapDrawable;\nimport android.graphics.drawable.ColorDrawable;\nimport android.graphics.drawable.Drawable;\nimport android.graphics."}], "metadata": {"task_id": "Neo-Backup/180", "ground_truth": "    Image(\r\n        Phosphor.AndroidLogo,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\AndroidLogo.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArchiveTrayPreview() {", "choices": [{"text": ".ArchiveTray;\r\nimport androidx.compose.ui.tooling.preview.TrayPreview;\r\nimport androidx.compose.ui.tooling.preview.TrayPreviewListener;\r\nimport androidx.compose.ui.tooling.preview.TrayPreviewState;\r\nimport androidx.compose.ui.tooling.preview.TrayPreviewStateListener;\r\nimport androidx.compose.ui.tooling.preview.TrayPreviewView;\r\nimport androidx.compose.ui.tooling.preview.Tray"}], "metadata": {"task_id": "Neo-Backup/181", "ground_truth": "    Image(\r\n        Phosphor.ArchiveTray,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArchiveTray.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowDownPreview() {", "choices": [{"text": ".ArrowDownPreview;\nimport androidx.compose.ui.tooling.preview.ArrowUpPreview;\nimport androidx.compose.ui.tooling.preview.Preview;\nimport androidx.compose.ui.tooling.preview.PreviewListener;\nimport androidx.compose.ui.tooling.preview.PreviewState;\nimport androidx.compose.ui.tooling.preview.PreviewStateListener;\nimport androidx.compose.ui.tooling.preview.PreviewView;\nimport androidx.compose.ui.tooling.preview"}], "metadata": {"task_id": "Neo-Backup/182", "ground_truth": "    Image(\r\n        Phosphor.ArrowDown,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowDown.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowRightPreview() {", "choices": [{"text": ".ArrowRightPreview;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview."}], "metadata": {"task_id": "Neo-Backup/183", "ground_truth": "    Image(\r\n        Phosphor.ArrowRight,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowRight.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowsClockwisePreview() {", "choices": [{"text": ".ArrowsClockwisePreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport butterknife.Bind;\r\nimport butterknife.ButterKnife;\r\n\r\n"}], "metadata": {"task_id": "Neo-Backup/184", "ground_truth": "    Image(\r\n        Phosphor.ArrowsClockwise,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowsClockwise.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowsOutLineVerticalPreview() {", "choices": [{"text": ".ArrowsOutLineVerticalPreview;\r\nimport androidx.compose.ui.tooling.preview.HorizontalPreview;\r\nimport androidx.compose.ui.tooling.preview.VerticalPreview;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport static androidx.compose.ui.tooling.preview.HorizontalPreview.*;\r\nimport static androidx.compose.ui.tooling.preview.VerticalPreview.*;\r\n\r\npublic class ArrowsOut"}], "metadata": {"task_id": "Neo-Backup/185", "ground_truth": "    Image(\r\n        Phosphor.ArrowsOutLineVertical,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowsOutLineVertical.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowSquareOutPreview() {", "choices": [{"text": ".ArrowSquareOutPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowSquareInPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowSquareOutPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowSquareInPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowSquareOutPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowSquareInPreview;\r\nimport androidx.compose.ui.tooling.preview.Arrow"}], "metadata": {"task_id": "Neo-Backup/186", "ground_truth": "    Image(\r\n        Phosphor.ArrowSquareOut,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowSquareOut.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowUDownLeftPreview() {", "choices": [{"text": ".ArrowUDownLeftPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowUDownRightPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowUpLeftPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowUpRightPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowDownLeftPreview;\r\nimport androidx.compose.ui.tooling.preview.ArrowDownRightPreview;\r\nimport androidx.compose.ui.tooling.preview"}], "metadata": {"task_id": "Neo-Backup/187", "ground_truth": "    Image(\r\n        Phosphor.ArrowUDownLeft,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowUDownLeft.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowUpPreview() {", "choices": [{"text": ".ArrowUpPreview;\nimport androidx.compose.ui.tooling.preview.ArrowDownPreview;\nimport androidx.compose.ui.tooling.preview.ArrowLeftPreview;\nimport androidx.compose.ui.tooling.preview.ArrowRightPreview;\nimport androidx.compose.ui.tooling.preview.ArrowUpRightPreview;\nimport androidx.compose.ui.tooling.preview.ArrowDownLeftPreview;\nimport androidx.compose.ui.tooling.preview.ArrowDownRightPreview;\nimport androidx."}], "metadata": {"task_id": "Neo-Backup/188", "ground_truth": "    Image(\r\n        Phosphor.ArrowUp,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowUp.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowUUpLeftPreview() {", "choices": [{"text": ".ArrowUUpLeftPreview;\nimport androidx.compose.ui.tooling.preview.UUpLeftPreview;\nimport androidx.compose.ui.tooling.preview.UUpRightPreview;\nimport androidx.compose.ui.tooling.preview.UUpLeftRightPreview;\nimport androidx.compose.ui.tooling.preview.UUpRightPreview;\nimport androidx.compose.ui.tooling.preview.UUpLeftLeftPreview;\nimport androidx.compose.ui.tooling.preview.UUpLeftRight"}], "metadata": {"task_id": "Neo-Backup/189", "ground_truth": "    Image(\r\n        Phosphor.ArrowUUpLeft,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowUUpLeft.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun AsteriskSimplePreview() {", "choices": [{"text": ".AsteriskSimplePreview;\r\nimport androidx.compose.ui.tooling.preview.SimplePreview;\r\nimport androidx.compose.ui.tooling.preview.SimplePreviewListener;\r\nimport androidx.compose.ui.tooling.preview.SimplePreviewState;\r\nimport androidx.compose.ui.tooling.preview.SimplePreviewStateListener;\r\nimport androidx.compose.ui.tooling.preview.SimplePreviewView;\r\nimport androidx.compose.ui.tooling.preview.SimplePreviewViewListener;"}], "metadata": {"task_id": "Neo-Backup/190", "ground_truth": "    Image(\r\n        Phosphor.AsteriskSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\AsteriskSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun BracketsSquarePreview() {", "choices": [{"text": " {\r\n    return {\r\n        name: 'Brackets Square Preview',\r\n        description: 'This is a preview for the Brackets Square',\r\n    };\r\n}\r\n\r\nexport default BracketsSquarePreview;\r\n"}], "metadata": {"task_id": "Neo-Backup/191", "ground_truth": "    Image(\r\n        Phosphor.BracketsSquare,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\BracketsSquare.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun BugPreview() {", "choices": [{"text": "\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.PorterDuffColorFilter;\nimport android.graphics.PorterDuffXfermode;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.graphics.drawable.GradientDrawable;\nimport android.graphics.drawable.LayerDrawable;\nimport android."}], "metadata": {"task_id": "Neo-Backup/192", "ground_truth": "    Image(\r\n        Phosphor.Bug,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Bug.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CalendarPlusPreview() {", "choices": [{"text": ".CalendarPlus;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android"}], "metadata": {"task_id": "Neo-Backup/193", "ground_truth": "    Image(\r\n        Phosphor.CalendarPlus,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CalendarPlus.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CalendarXPreview() {", "choices": [{"text": "\r\nimport android.content.Context;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.PorterDuffColorFilter;\r\nimport android.graphics.PorterDuffXfermode;\r\nimport android.graphics.Rect;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.util.AttributeSet;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r"}], "metadata": {"task_id": "Neo-Backup/194", "ground_truth": "    Image(\r\n        Phosphor.CalendarX,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CalendarX.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CaretDownPreview() {", "choices": [{"text": ".CaretDown;\nimport androidx.compose.ui.tooling.preview.Preview;\nimport androidx.compose.ui.tooling.preview.PreviewListener;\nimport androidx.compose.ui.tooling.preview.PreviewState;\nimport androidx.compose.ui.tooling.preview.PreviewStateListener;\nimport androidx.compose.ui.tooling.preview.PreviewType;\nimport androidx.compose.ui.tooling.preview.PreviewView;\nimport androidx.compose.ui.tooling.preview."}], "metadata": {"task_id": "Neo-Backup/195", "ground_truth": "    Image(\r\n        Phosphor.CaretDown,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CaretDown.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CaretUpPreview() {", "choices": [{"text": ".CaretUp;\r\nimport androidx.compose.ui.tooling.preview.PreviewItem;\r\nimport androidx.compose.ui.tooling.preview.PreviewItemList;\r\nimport androidx.compose.ui.tooling.preview.PreviewItemView;\r\nimport androidx.compose.ui.tooling.preview.PreviewItemViewList;\r\nimport androidx.compose.ui.tooling.preview.PreviewView;\r\nimport androidx.compose.ui.tooling.preview.PreviewViewList;\r\nimport and"}], "metadata": {"task_id": "Neo-Backup/196", "ground_truth": "    Image(\r\n        Phosphor.CaretUp,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CaretUp.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ChatDotsPreview() {", "choices": [{"text": ".ChatDots;\nimport androidx.compose.ui.tooling.preview.PreviewItem;\nimport androidx.compose.ui.tooling.preview.PreviewView;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview"}], "metadata": {"task_id": "Neo-Backup/197", "ground_truth": "    Image(\r\n        Phosphor.ChatDots,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ChatDots.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CheckPreview() {", "choices": [{"text": "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;"}], "metadata": {"task_id": "Neo-Backup/198", "ground_truth": "    Image(\r\n        Phosphor.Check,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Check.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CheckCirclePreview() {", "choices": [{"text": ".CheckCircle;\nimport androidx.compose.ui.tooling.preview.CheckCircleView;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport"}], "metadata": {"task_id": "Neo-Backup/199", "ground_truth": "    Image(\r\n        Phosphor.CheckCircle,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CheckCircle.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ChecksPreview() {", "choices": [{"text": "\n\r\n@Preview\r\n@Composable\r\nfun ChecksPreview2() {\r\n    return true\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun ChecksPreview3() {\r\n    return true\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun ChecksPreview4() {\r\n    return true\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun ChecksPreview5() {\r\n    return true\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun ChecksPreview6() {\r\n"}], "metadata": {"task_id": "Neo-Backup/200", "ground_truth": "    Image(\r\n        Phosphor.Checks,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Checks.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CircleWavyQuestionPreview() {", "choices": [{"text": ".CircleWavyQuestion;\nimport androidx.compose.ui.tooling.preview.CircleWavyQuestionPreview;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n"}], "metadata": {"task_id": "Neo-Backup/201", "ground_truth": "    Image(\r\n        Phosphor.CircleWavyQuestion,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CircleWavyQuestion.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CircleWavyWarningPreview() {", "choices": [{"text": ".CircleWavyWarning;\nimport androidx.compose.ui.tooling.preview.CircleWavyWarning.CircleWavyWarningState;\nimport androidx.compose.ui.tooling.preview.CircleWavyWarning.CircleWavyWarningStateListener;\nimport androidx.compose.ui.tooling.preview.CircleWavyWarning.CircleWavyWarningType;\nimport androidx.compose.ui.tooling.preview.CircleWavyWarning.CircleWavyWarningTypeListener;\nimport androidx.compose.ui.tooling.preview.Circle"}], "metadata": {"task_id": "Neo-Backup/202", "ground_truth": "    Image(\r\n        Phosphor.CircleWavyWarning,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CircleWavyWarning.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ClockPreview() {", "choices": [{"text": ".Clock;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.LayoutManager;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview.widget."}], "metadata": {"task_id": "Neo-Backup/203", "ground_truth": "    Image(\r\n        Phosphor.Clock,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Clock.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ClockClockwisePreview() {", "choices": [{"text": ".ClockClockwisePreview;\nimport androidx.compose.ui.tooling.preview.ClockClockwisePreview.ClockClockwisePreviewState;\nimport androidx.compose.ui.tooling.preview.ClockClockwisePreview.ClockClockwisePreviewStateListener;\nimport androidx.compose.ui.tooling.preview.ClockClockwisePreview.ClockClockwisePreviewStateObserver;\nimport androidx.compose.ui.tooling.preview.ClockClockwisePreview.ClockClockwisePreviewStateObserverListener;\nimport androidx.compose.ui.tooling.preview"}], "metadata": {"task_id": "Neo-Backup/204", "ground_truth": "    Image(\r\n        Phosphor.ClockClockwise,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ClockClockwise.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ClockCounterClockwisePreview() {", "choices": [{"text": ".ClockCounterClockwise;\nimport androidx.compose.ui.tooling.preview.ClockCounterClockwise.ClockCounterClockwiseState;\nimport androidx.compose.ui.tooling.preview.ClockCounterClockwise.ClockCounterClockwiseStateListener;\nimport androidx.compose.ui.tooling.preview.ClockCounterClockwise.ClockCounterClockwiseStateObserver;\nimport androidx.compose.ui.tooling.preview.ClockCounterClockwise.ClockCounterClockwiseStateObserverListener;\nimport androidx.compose.ui.tooling.preview"}], "metadata": {"task_id": "Neo-Backup/205", "ground_truth": "    Image(\r\n        Phosphor.ClockCounterClockwise,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ClockCounterClockwise.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun DetectivePreview() {", "choices": [{"text": " from 'detective-preview';\r\n\r\nexport default class DetectivePreviewComponent extends DetectivePreview {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <div>\r\n              <div>\r\n                <div>\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <div>\r\n                          <div>\r\n                            <div>\r"}], "metadata": {"task_id": "Neo-Backup/206", "ground_truth": "    Image(\r\n        Phosphor.Detective,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Detective.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun DiamondsFourPreview() {", "choices": [{"text": ".DiamondsFourPreview;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.LayoutManager;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget."}], "metadata": {"task_id": "Neo-Backup/207", "ground_truth": "    Image(\r\n        Phosphor.DiamondsFour,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\DiamondsFour.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun EqualsPreview() {", "choices": [{"text": "\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;"}], "metadata": {"task_id": "Neo-Backup/208", "ground_truth": "    Image(\r\n        Phosphor.Equals,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Equals.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun EyePreview() {", "choices": [{"text": "\r\n\r\nclass EyePreview extends Composable {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div>\r\n                        <div>\r\n                            <div>\r\n                                <div>\r\n                                    <div>\r\n                                        <div>\r\n                                            <div>\r\n                                                <div>\r\n                                                    <div>\r\n                                                        <div>\r\n                                                            <div>\r\n                                "}], "metadata": {"task_id": "Neo-Backup/209", "ground_truth": "    Image(\r\n        Phosphor.Eye,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Eye.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun EyedropperSamplePreview() {", "choices": [{"text": ".EyedropperSamplePreview;\r\n\r\n@EyedropperSamplePreview\r\nclass EyedropperSamplePreviewImpl implements EyedropperSamplePreview {\r\n\r\n    @Override\r\n    public void show() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void hide() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void showPreview() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void hidePreview() {\r\n\r\n    }\r"}], "metadata": {"task_id": "Neo-Backup/210", "ground_truth": "    Image(\r\n        Phosphor.EyedropperSample,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\EyedropperSample.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun EyeSlashPreview() {", "choices": [{"text": ".EyeSlashPreview;\r\nimport androidx.compose.ui.tooling.preview.PreviewView;\r\nimport androidx.compose.ui.tooling.preview.PreviewViewFactory;\r\nimport androidx.compose.ui.tooling.preview.PreviewViewProvider;\r\nimport androidx.compose.ui.tooling.preview.PreviewViewProviderFactory;\r\nimport androidx.compose.ui.tooling.preview.PreviewViewProviderProvider;\r\nimport androidx.compose.ui.tooling.preview.PreviewViewProviderProviderFactory"}], "metadata": {"task_id": "Neo-Backup/211", "ground_truth": "    Image(\r\n        Phosphor.EyeSlash,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\EyeSlash.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FileZipPreview() {", "choices": [{"text": ".FileZip;\r\nimport androidx.compose.ui.tooling.preview.FileZipView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipException;\r\nimport java.util.zip.ZipInputStream;\r\nimport java.util.zip.Zip"}], "metadata": {"task_id": "Neo-Backup/212", "ground_truth": "    Image(\r\n        Phosphor.FileZip,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FileZip.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FingerprintSimplePreview() {", "choices": [{"text": ".SimplePreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.RecyclerView.LayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\r\nimport andro"}], "metadata": {"task_id": "Neo-Backup/213", "ground_truth": "    Image(\r\n        Phosphor.FingerprintSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FingerprintSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FlaskPreview() {", "choices": [{"text": "\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup"}], "metadata": {"task_id": "Neo-Backup/214", "ground_truth": "    Image(\r\n        Phosphor.Flask,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Flask.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FloppyDiskPreview() {", "choices": [{"text": ".FloppyDiskPreview;\r\n\r\n@FloppyDiskPreview\r\nclass FloppyDiskPreviewImpl implements FloppyDiskPreview {\r\n\r\n    @Override\r\n    public void show() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void hide() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean isShowing() {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void setShowing(boolean show) {\r\n\r\n    }"}], "metadata": {"task_id": "Neo-Backup/215", "ground_truth": "    Image(\r\n        Phosphor.FloppyDisk,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FloppyDisk.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FolderNotchPreview() {", "choices": [{"text": ".FolderNotch;\r\nimport androidx.compose.ui.tooling.preview.FolderNotch.FolderNotchListener;\r\nimport androidx.compose.ui.tooling.preview.FolderNotch.FolderNotchState;\r\nimport androidx.compose.ui.tooling.preview.FolderNotch.FolderNotchStateListener;\r\nimport androidx.compose.ui.tooling.preview.FolderNotch.FolderNotchType;\r\nimport androidx.compose.ui.tooling.preview.FolderNotch.FolderNot"}], "metadata": {"task_id": "Neo-Backup/216", "ground_truth": "    Image(\r\n        Phosphor.FolderNotch,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FolderNotch.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FunnelSimplePreview() {", "choices": [{"text": ".FunnelSimplePreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.RecyclerView.Adapter;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\r\nimport androidx.recycler"}], "metadata": {"task_id": "Neo-Backup/217", "ground_truth": "    Image(\r\n        Phosphor.FunnelSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FunnelSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun GameControllerPreview() {", "choices": [{"text": ".GameController;\nimport androidx.compose.ui.tooling.preview.PreviewComponent;\nimport androidx.compose.ui.tooling.preview.PreviewComponentFactory;\nimport androidx.compose.ui.tooling.preview.PreviewComponentProvider;\nimport androidx.compose.ui.tooling.preview.PreviewComponentProviderFactory;\nimport androidx.compose.ui.tooling.preview.PreviewComponentProviderProvider;\nimport androidx.compose.ui.tooling.preview.PreviewComponentProviderProviderFactory;\nimport androidx.compose"}], "metadata": {"task_id": "Neo-Backup/218", "ground_truth": "    Image(\r\n        Phosphor.GameController,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\GameController.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun GearSixPreview() {", "choices": [{"text": ".GearSixPreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\r\n"}], "metadata": {"task_id": "Neo-Backup/219", "ground_truth": "    Image(\r\n        Phosphor.GearSix,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\GearSix.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun HardDrivesPreview() {", "choices": [{"text": " {\r\n    return {\r\n        title: 'Hard Drives',\r\n        subtitle: 'Hard Drives',\r\n    };\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass HardDrivesPreviewComposable extends Composable {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass HardDrivesPreviewComposable2 extends Composable {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\n@"}], "metadata": {"task_id": "Neo-Backup/220", "ground_truth": "    Image(\r\n        Phosphor.HardDrives,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\HardDrives.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun HashPreview() {", "choices": [{"text": "\r\n\r\n@Preview\r\n@Composable\r\nclass HashPreview {\r\n\r\n    @Preview\r\n    @Composable\r\n    static HashPreview create() {\r\n        return new HashPreview();\r\n    }\r\n\r\n    @Preview\r\n    @Composable\r\n    static HashPreview create(int width) {\r\n        return new HashPreview(width);\r\n    }\r\n\r\n    @Preview\r\n    @Composable\r\n    static HashPreview create(int width, int height) {\r\n        return new HashPreview(width,"}], "metadata": {"task_id": "Neo-Backup/221", "ground_truth": "    Image(\r\n        Phosphor.Hash,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Hash.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun HousePreview() {", "choices": [{"text": ".HousePreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.RecyclerView.LayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\r\nimport androidx.recycler"}], "metadata": {"task_id": "Neo-Backup/222", "ground_truth": "    Image(\r\n        Phosphor.House,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\House.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun InfinityPreview() {", "choices": [{"text": "\r\n\r\n@Preview\r\n@Composable\r\nclass InfinityPreview extends Preview {\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass InfinityPreview2 extends Preview {\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass InfinityPreview3 extends Preview {\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass Infinity"}], "metadata": {"task_id": "Neo-Backup/223", "ground_truth": "    Image(\r\n        Phosphor.Infinity,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Infinity.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun InfoPreview() {", "choices": [{"text": ".Info;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview.widget."}], "metadata": {"task_id": "Neo-Backup/224", "ground_truth": "    Image(\r\n        Phosphor.Info,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Info.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun KeyPreview() {", "choices": [{"text": ".KeyPreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.SortedMap;\r\nimport java.util.TreeMap;\r\n"}], "metadata": {"task_id": "Neo-Backup/225", "ground_truth": "    Image(\r\n        Phosphor.Key,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Key.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun LeafPreview() {", "choices": [{"text": "\n\r\n@Preview\r\n@Composable\r\nclass LeafPreview2 extends LeafPreview {\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass LeafPreview3 extends LeafPreview {\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass LeafPreview4 extends LeafPreview {\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\n@Preview\r\n@Composable\r"}], "metadata": {"task_id": "Neo-Backup/226", "ground_truth": "    Image(\r\n        Phosphor.Leaf,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Leaf.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ListPreview() {", "choices": [{"text": ".List;\nimport androidx.compose.ui.tooling.preview.ListItem;\nimport androidx.compose.ui.tooling.preview.ListView;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n"}], "metadata": {"task_id": "Neo-Backup/227", "ground_truth": "    Image(\r\n        Phosphor.List,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\List.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ListNumbersPreview() {", "choices": [{"text": ".ListNumbersPreview;\r\nimport androidx.compose.ui.tooling.preview.ListNumbersPreview.ListNumbersPreviewListener;\r\nimport androidx.compose.ui.tooling.preview.ListNumbersPreview.OnListNumbersPreviewListener;\r\nimport androidx.compose.ui.tooling.preview.ListNumbersPreview.OnListNumbersPreviewListener2;\r\nimport androidx.compose.ui.tooling.preview.ListNumbersPreview.OnListNumbersPreviewListener3;\r\nimport androidx.compose.ui.tooling.preview.ListNumbers"}], "metadata": {"task_id": "Neo-Backup/228", "ground_truth": "    Image(\r\n        Phosphor.ListNumbers,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ListNumbers.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun LockPreview() {", "choices": [{"text": "\r\n\r\n@Preview\r\n@Composable\r\nclass LockPreview {\r\n\r\n    constructor() {\r\n        this.isLocked = false\r\n    }\r\n\r\n    lock() {\r\n        this.isLocked = true\r\n    }\r\n\r\n    unlock() {\r\n        this.isLocked = false\r\n    }\r\n\r\n    isLocked() {\r\n        return this.isLocked\r\n    }\r\n}\r\n\r\nexport default LockPreview\r\n"}], "metadata": {"task_id": "Neo-Backup/229", "ground_truth": "    Image(\r\n        Phosphor.Lock,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Lock.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun LockOpenPreview() {", "choices": [{"text": ".LockOpenPreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.RecyclerView.Adapter;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\r\nimport androidx.recyclerview"}], "metadata": {"task_id": "Neo-Backup/230", "ground_truth": "    Image(\r\n        Phosphor.LockOpen,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\LockOpen.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun MagnifyingGlassPreview() {", "choices": [{"text": ".MagnifyingGlass;\nimport androidx.compose.ui.tooling.preview.MagnifyingGlass.MagnifyingGlassListener;\nimport androidx.compose.ui.tooling.preview.MagnifyingGlass.MagnifyingGlassState;\nimport androidx.compose.ui.tooling.preview.MagnifyingGlass.MagnifyingGlassStateListener;\nimport androidx.compose.ui.tooling.preview.MagnifyingGlass.MagnifyingGlassState"}], "metadata": {"task_id": "Neo-Backup/231", "ground_truth": "    Image(\r\n        Phosphor.MagnifyingGlass,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\MagnifyingGlass.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun NutPreview() {", "choices": [{"text": "\r\n\r\n@Preview\r\n@Composable\r\nclass NutPreview(object):\r\n    def __init__(self):\r\n        pass\r\n\r\n@Preview\r\n@Composable\r\nclass NutPreview(object):\r\n    def __init__(self):\r\n        pass\r\n\r\n@Preview\r\n@Composable\r\nclass NutPreview(object):\r\n    def __init__(self):\r\n        pass\r\n\r\n@Preview\r\n@Composable\r\nclass NutPreview(object):\r\n    def __init"}], "metadata": {"task_id": "Neo-Backup/232", "ground_truth": "    Image(\r\n        Phosphor.Nut,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Nut.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PasswordPreview() {", "choices": [{"text": ".PasswordPreview;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.LayoutManager;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview.widget"}], "metadata": {"task_id": "Neo-Backup/233", "ground_truth": "    Image(\r\n        Phosphor.Password,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Password.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PhoneIncomingPreview() {", "choices": [{"text": ".PhoneIncomingPreview;\r\nimport androidx.compose.ui.tooling.preview.PreviewManager;\r\nimport androidx.compose.ui.tooling.preview.PreviewState;\r\nimport androidx.compose.ui.tooling.preview.PreviewStateListener;\r\nimport androidx.compose.ui.tooling.preview.PreviewStateManager;\r\nimport androidx.compose.ui.tooling.preview.PreviewView;\r\nimport androidx.compose.ui.tooling.preview.PreviewViewManager;\r\nimport androidx"}], "metadata": {"task_id": "Neo-Backup/234", "ground_truth": "    Image(\r\n        Phosphor.PhoneIncoming,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\PhoneIncoming.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PlaceholderPreview() {", "choices": [{"text": ".Placeholder;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemViewClickListener;\nimport androidx.re"}], "metadata": {"task_id": "Neo-Backup/235", "ground_truth": "    Image(\r\n        Phosphor.Placeholder,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Placeholder.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PlayPreview() {", "choices": [{"text": "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;"}], "metadata": {"task_id": "Neo-Backup/236", "ground_truth": "    Image(\r\n        Phosphor.Play,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Play.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PlayCirclePreview() {", "choices": [{"text": ".PlayCirclePreview;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview."}], "metadata": {"task_id": "Neo-Backup/237", "ground_truth": "    Image(\r\n        Phosphor.PlayCircle,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\PlayCircle.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PlusCirclePreview() {", "choices": [{"text": ".PlusCircle;\nimport androidx.compose.ui.tooling.preview.PlusCircle.PlusCircleListener;\nimport androidx.compose.ui.tooling.preview.PlusCircle.PlusCircleState;\nimport androidx.compose.ui.tooling.preview.PlusCircle.PlusCircleStateListener;\nimport androidx.compose.ui.tooling.preview.PlusCircle.PlusCircleType;\nimport androidx.compose.ui.tooling.preview.PlusCircle.PlusCircleTypeListener;\nimport androidx.compose.ui.tooling"}], "metadata": {"task_id": "Neo-Backup/238", "ground_truth": "    Image(\r\n        Phosphor.PlusCircle,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\PlusCircle.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ProhibitPreview() {", "choices": [{"text": " from 'prohibit-preview';\r\n\r\nexport default ProhibitPreview;\r\n\r\nclass ProhibitPreview {\r\n\r\n  constructor() {\r\n    this.preview = new Preview();\r\n  }\r\n\r\n  show() {\r\n    this.preview.show();\r\n  }\r\n\r\n  hide() {\r\n    this.preview.hide();\r\n  }\r\n\r\n  dispose() {\r\n    this.preview.dispose();\r\n  }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/239", "ground_truth": "    Image(\r\n        Phosphor.Prohibit,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Prohibit.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ProhibitInsetPreview() {", "choices": [{"text": "\n    return {\r\n        name: 'prohibitInsetPreview',\r\n        description: 'Prohibit inset preview',\r\n    }\r\n\r\n@Preview\r\n@Composable\r\nfun InsetPreview() {\r\n    return {\r\n        name: 'insetPreview',\r\n        description: 'Inset preview',\r\n    }\r\n\r\n@Preview\r\n@Composable\r\nfun OutsetPreview() {\r\n    return {\r\n        name: 'outsetPreview',\r\n        description: 'Outset preview',\r\n    }"}], "metadata": {"task_id": "Neo-Backup/240", "ground_truth": "    Image(\r\n        Phosphor.ProhibitInset,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ProhibitInset.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ShareNetworkPreview() {", "choices": [{"text": "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4."}], "metadata": {"task_id": "Neo-Backup/241", "ground_truth": "    Image(\r\n        Phosphor.ShareNetwork,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ShareNetwork.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ShieldCheckeredPreview() {", "choices": [{"text": ".ShieldCheckered;\nimport androidx.compose.ui.tooling.preview.ShieldCheckered.ShieldCheckeredListener;\nimport androidx.compose.ui.tooling.preview.ShieldCheckered.ShieldCheckeredState;\nimport androidx.compose.ui.tooling.preview.ShieldCheckered.ShieldCheckeredStateListener;\nimport androidx.compose.ui.tooling.preview.ShieldCheckered.ShieldCheckeredStateObserver;\nimport androidx.compose.ui.tooling.preview.Sh"}], "metadata": {"task_id": "Neo-Backup/242", "ground_truth": "    Image(\r\n        Phosphor.ShieldCheckered,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ShieldCheckered.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ShieldStarPreview() {", "choices": [{"text": ".ShieldStar;\nimport androidx.compose.ui.tooling.preview.ShieldStarView;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport butterknife.Unbinder;\n"}], "metadata": {"task_id": "Neo-Backup/243", "ground_truth": "    Image(\r\n        Phosphor.ShieldStar,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ShieldStar.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SlidersHorizontalPreview() {", "choices": [{"text": ".SlidersHorizontalPreview;\r\nimport androidx.compose.ui.tooling.preview.SlidersVerticalPreview;\r\nimport androidx.compose.ui.tooling.preview.SlidersVerticalPreview.SlidersVerticalPreviewListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class SlidersHorizontalPreviewImpl implements SlidersHorizontalPreview {\r\n\r\n    private final List<SlidersVerticalPreviewListener> listeners = new ArrayList<>();\r\n\r\n    @Override\r\n    public void addListener(Sliders"}], "metadata": {"task_id": "Neo-Backup/244", "ground_truth": "    Image(\r\n        Phosphor.SlidersHorizontal,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\SlidersHorizontal.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SortAscendingPreview() {", "choices": [{"text": ".SortAscendingPreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\r\nimport androidx.compose.ui.tooling.toolbar.ToolbarLayout;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.RecyclerView.LayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\r\nimport androidx.recyclerview.widget"}], "metadata": {"task_id": "Neo-Backup/245", "ground_truth": "    Image(\r\n        Phosphor.SortAscending,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\SortAscending.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SortDescendingPreview() {", "choices": [{"text": ".SortDescendingPreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java"}], "metadata": {"task_id": "Neo-Backup/246", "ground_truth": "    Image(\r\n        Phosphor.SortDescending,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\SortDescending.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpinnerPreview() {", "choices": [{"text": ".Spinner;\nimport androidx.compose.ui.tooling.preview.Spinner.OnItemSelectedListener;\nimport androidx.compose.ui.tooling.preview.Spinner.OnItemSelectedListener2;\nimport androidx.compose.ui.tooling.preview.Spinner.OnItemSelectedListener3;\nimport androidx.compose.ui.tooling.preview.Spinner.OnItemSelectedListener4;\nimport androidx.compose.ui.tooling.preview.Spinner.OnItemSelectedListener5;\nimport androidx.compose.ui.tool"}], "metadata": {"task_id": "Neo-Backup/247", "ground_truth": "    Image(\r\n        Phosphor.Spinner,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Spinner.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun StarPreview() {", "choices": [{"text": "\r\n\r\n@Preview\r\n@Composable\r\nclass StarPreview {\r\n\r\n    @Preview\r\n    @Composable\r\n    static StarPreview() {\r\n        return new StarPreview()\r\n    }\r\n\r\n    @Preview\r\n    @Composable\r\n    static StarPreview() {\r\n        return new StarPreview()\r\n    }\r\n\r\n    @Preview\r\n    @Composable\r\n    static StarPreview() {\r\n        return new StarPreview()\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "Neo-Backup/248", "ground_truth": "    Image(\r\n        Phosphor.Star,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Star.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SwatchesPreview() {", "choices": [{"text": ".Swatches;\nimport androidx.compose.ui.tooling.preview.Swatches.Swatch;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnScrollListener;\n"}], "metadata": {"task_id": "Neo-Backup/249", "ground_truth": "    Image(\r\n        Phosphor.Swatches,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Swatches.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TagSimplePreview() {", "choices": [{"text": ".TagSimplePreview;\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemLongClickListener;\nimport androidx.recyclerview."}], "metadata": {"task_id": "Neo-Backup/250", "ground_truth": "    Image(\r\n        Phosphor.TagSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\TagSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TelegramLogoPreview() {", "choices": [{"text": " {\r\n  return {\r\n    title: 'Telegram Logo',\r\n    subtitle: 'Telegram Logo',\r\n  };\r\n}\r\n\r\nexport default {\r\n  title: 'Telegram Logo',\r\n  subtitle: 'Telegram Logo',\r\n  preview: TelegramLogoPreview,\r\n};\r\n"}], "metadata": {"task_id": "Neo-Backup/251", "ground_truth": "    Image(\r\n        Phosphor.TelegramLogo,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\TelegramLogo.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TextAaPreview() {", "choices": [{"text": ".TextAa;\nimport androidx.compose.ui.tooling.preview.TextPreview;\nimport androidx.compose.ui.tooling.preview.TextView;\nimport androidx.core.content.ContextCompat;\nimport androidx.core.view.ViewCompat;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\nimport androidx.recyclerview.widget"}], "metadata": {"task_id": "Neo-Backup/252", "ground_truth": "    Image(\r\n        Phosphor.TextAa,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\TextAa.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TextboxPreview() {", "choices": [{"text": ".Textbox;\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.PorterDuffColorFilter;\nimport android.graphics.PorterDuffXfermode;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.graphics.drawable.Drawable;\nimport android.graphics.drawable.GradientDrawable;\nimport android"}], "metadata": {"task_id": "Neo-Backup/253", "ground_truth": "    Image(\r\n        Phosphor.Textbox,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Textbox.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TranslatePreview() {", "choices": [{"text": "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7"}], "metadata": {"task_id": "Neo-Backup/254", "ground_truth": "    Image(\r\n        Phosphor.Translate,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Translate.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TrashSimplePreview() {", "choices": [{"text": " {\r\n    return {\r\n        title: 'Simple Preview',\r\n        description: 'This is a simple preview.',\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass TrashSimplePreview2 {\r\n    title: 'Simple Preview 2',\r\n    description: 'This is a simple preview 2.',\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass TrashSimplePreview3 {\r\n    title: 'Simple Preview 3',\r\n    description: 'This is a simple preview 3.',\r\n"}], "metadata": {"task_id": "Neo-Backup/255", "ground_truth": "    Image(\r\n        Phosphor.TrashSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\TrashSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun UserPreview() {", "choices": [{"text": "\r\n\r\n@Preview\r\n@Composable\r\nclass UserPreview {\r\n\r\n    @Preview\r\n    @Composable\r\n    static UserPreview() {\r\n        return new UserPreview()\r\n    }\r\n\r\n    @Preview\r\n    @Composable\r\n    static UserPreview() {\r\n        return new UserPreview()\r\n    }\r\n\r\n    @Preview\r\n    @Composable\r\n    static UserPreview() {\r\n        return new UserPreview()\r\n    }\r\n\r\n    @Preview\r\n    @Com"}], "metadata": {"task_id": "Neo-Backup/256", "ground_truth": "    Image(\r\n        Phosphor.User,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\User.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun UserGearPreview() {", "choices": [{"text": "\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.PorterDuffColorFilter;\nimport android.graphics.PorterDuffXfermode;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.graphics.drawable.GradientDrawable;\nimport android.graphics.drawable.LayerDrawable;\nimport android."}], "metadata": {"task_id": "Neo-Backup/257", "ground_truth": "    Image(\r\n        Phosphor.UserGear,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\UserGear.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun WarningPreview() {", "choices": [{"text": "\r\n\r\n@Preview\r\n@Composable\r\nclass ErrorPreview() {\r\n\r\n    @Preview\r\n    @Composable\r\n    class Error() {\r\n\r\n        @Preview\r\n        @Composable\r\n        class Error() {\r\n\r\n            @Preview\r\n            @Composable\r\n            class Error() {\r\n\r\n                @Preview\r\n                @Composable\r\n                class Error() {\r\n\r\n                    @Preview\r\n                    @Composable\r\n                    class Error() {\r\n\r\n                        @Preview\r\n                       "}], "metadata": {"task_id": "Neo-Backup/258", "ground_truth": "    Image(\r\n        Phosphor.Warning,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Warning.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun WrenchPreview() {", "choices": [{"text": ".WrenchPreview;\r\nimport androidx.compose.ui.tooling.toolbar.Toolbar;\r\nimport androidx.compose.ui.tooling.toolbar.ToolbarItem;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.RecyclerView.Adapter;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder;\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder.OnItemClickListener;\r\nimport androidx.recyclerview"}], "metadata": {"task_id": "Neo-Backup/259", "ground_truth": "    Image(\r\n        Phosphor.Wrench,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Wrench.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun XPreview() {", "choices": [{"text": "\r\n\r\n@Preview\r\n@Composable\r\nclass XPreview2() {\r\n\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass XPreview3() {\r\n\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass XPreview4() {\r\n\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass XPreview5() {\r\n\r\n}\r\n\r\n@Preview\r\n@Composable\r\nclass XPreview6() {\r\n\r\n}\r\n\r\n@Preview\r\n"}], "metadata": {"task_id": "Neo-Backup/260", "ground_truth": "    Image(\r\n        Phosphor.X,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\X.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun XCirclePreview() {", "choices": [{"text": ".XCirclePreview;\r\nimport androidx.compose.ui.tooling.preview.PreviewItem;\r\nimport androidx.compose.ui.tooling.preview.PreviewList;\r\nimport androidx.compose.ui.tooling.preview.PreviewListItem;\r\nimport androidx.compose.ui.tooling.preview.PreviewListView;\r\nimport androidx.compose.ui.tooling.preview.PreviewText;\r\nimport androidx.compose.ui.tooling.preview.PreviewTextItem;\r\nimport androidx"}], "metadata": {"task_id": "Neo-Backup/261", "ground_truth": "    Image(\r\n        Phosphor.XCircle,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\XCircle.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\nimport androidx.compose.animation.core.updateTransition\nimport androidx.compose.animation.core.animateDp\n\r\n@Composable\r\nfun selectableChipTransition(selected: Boolean): SelectableChipTransition {\r\n    val transition = updateTransition(\r\n        targetState = if (selected) SelectionState.Selected else SelectionState.Unselected,\r\n        label = \"chip_transition\"\r\n    )\r\n    val corerRadius = transition.animateDp(label = \"chip_corner\") { state ->\r\n        when (state) {\r\n            SelectionState.Unselected -> 8.dp\r\n            SelectionState.Selected   -> 16.dp\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Neo-Backup/262", "ground_truth": "    }\r\n    return remember(transition) {\r\n        SelectableChipTransition(corerRadius)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Chip.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.ChipItem\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.SelectableChipColors\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.FilterChipDefaults\nimport androidx.compose.material3.FilterChip\nimport androidx.compose.foundation.shape.RoundedCornerShape\n\r\n@Composable\r\nfun SelectionChip(\r\n    item: ChipItem,\r\n    isSelected: Boolean,\r\n    colors: SelectableChipColors = FilterChipDefaults.filterChipColors(\r\n        containerColor = MaterialTheme.colorScheme.surfaceContainer,\r\n        selectedContainerColor = MaterialTheme.colorScheme.primaryContainer,\r\n        labelColor = MaterialTheme.colorScheme.onSurface,\r\n        selectedLabelColor = MaterialTheme.colorScheme.onPrimaryContainer,\r\n        iconColor = MaterialTheme.colorScheme.onSurface,\r\n        selectedLeadingIconColor = MaterialTheme.colorScheme.onPrimaryContainer,\r\n    ),\r\n    onClick: () -> Unit,\r\n) {\r\n    val selectableChipTransitionState = selectableChipTransition(selected = isSelected)\r\n\r\n    FilterChip(\r\n        colors = colors,\r\n        shape = RoundedCornerShape(selectableChipTransitionState.cornerRadius),\r\n        border = null,\r\n        selected = isSelected,\r\n        leadingIcon = {\r\n            ButtonIcon(item.icon, item.textId)\r\n        },\r\n        onClick = onClick,", "choices": [{"text": "\r\n    )\r\n}\r\n\r\nclass ButtonIcon {\r\n    private final Icon icon;\r\n    private final int textId;\r\n\r\n    public ButtonIcon(Icon icon, int textId) {\r\n        this.icon = icon;\r\n        this.textId = textId;\r\n    }\r\n\r\n    public Icon getIcon() {\r\n        return icon;\r\n    }\r\n\r\n    public int getTextId() {\r\n        return textId;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/263", "ground_truth": "        label = {\r\n            Text(text = stringResource(id = item.textId))\r\n        }\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Chip.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.TraceUtils.beginNanoTimer\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.R\nimport com.machiav3lli.backup.ICON_SIZE_LARGE\nimport coil.imageLoader\nimport coil.compose.AsyncImagePainter\nimport coil.ImageLoader\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.Image\n\r\n@Composable\r\nfun PackageIcon(\r\n    modifier: Modifier = Modifier,\r\n    item: Package?,\r\n    imageData: Any,\r\n    imageLoader: ImageLoader = LocalContext.current.imageLoader,\r\n) {\r\n    beginNanoTimer(\"pkgIcon.rCAIP\")\r\n    Image(\r\n        modifier = modifier\r\n            .size(ICON_SIZE_LARGE)\r\n            .clip(MaterialTheme.shapes.medium),\r\n        painter = cachedAsyncImagePainter(\r\n            model = imageData,\r\n            imageLoader = imageLoader,\r\n            altPainter = placeholderIconPainter(item, imageLoader)\r\n        ),", "choices": [{"text": "\r\n    );\r\n    endNanoTimer(\"pkgIcon.rCAIP\")\r\n}\r\n\r\n@Composable\r\nfun placeholderIconPainter(\r\n    item: Package?,\r\n    imageLoader: ImageLoader = LocalContext.current.imageLoader,\r\n) {\r\n    beginNanoTimer(\"placeholderIconPainter.rCAIP\")\r\n    Icon(\r\n        modifier = modifier\r\n           .size(ICON_SIZE_LARGE)\r\n           .clip(MaterialTheme.shapes.medium),\r\n        painter = cachedAsyncImagePainter(\r\n"}], "metadata": {"task_id": "Neo-Backup/266", "ground_truth": "        contentDescription = null,\r\n        contentScale = ContentScale.Crop\r\n    )\r\n    endNanoTimer(\"pkgIcon.rCAIP\")\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.TraceUtils.beginNanoTimer\nimport com.machiav3lli.backup.items.Package\nimport androidx.compose.material3.Icon\nfun dropAllButUsed(pkgs: List<Package>) {\r\n        val used = pkgs.map { it.iconData }.toSet()\r\n        beginNanoTimer(\"limitIconCache\")\r\n        val keys = synchronized(painterCache) { painterCache.keys.toSet() }\r\n        (keys - used).forEach {\r\n            if (it !is Int) {", "choices": [{"text": "\r\n                it.iconData = null\r\n            }\r\n        }\r\n        endNanoTimer(\"limitIconCache\")\r\n    }\r\n"}], "metadata": {"task_id": "Neo-Backup/271", "ground_truth": "                removeIcon(it)\r\n            }\r\n        }\r\n        endNanoTimer(\"limitIconCache\")\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport com.machiav3lli.backup.ICON_SIZE_SMALL\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.Image\n\r\n@Composable\r\nfun RoundButton(\r\n    modifier: Modifier = Modifier,\r\n    size: Dp = ICON_SIZE_SMALL,\r\n    icon: ImageVector,\r\n    tint: Color = MaterialTheme.colorScheme.onSurface,\r\n    description: String = \"\",\r\n    onClick: () -> Unit,\r\n) {\r\n    IconButton(\r\n        modifier = modifier,\r\n        onClick = onClick\r\n    ) {\r\n        Icon(\r\n            modifier = Modifier.size(size),\r\n            imageVector = icon,", "choices": [{"text": "\r\n            tint = tint,\r\n            description = description,\r\n        );\r\n    }\r\n}\r\n\r\n@Composable\r\nfun RoundButton(\r\n    modifier: Modifier = Modifier,\r\n    size: Dp = ICON_SIZE_SMALL,\r\n    icon: ImageVector,\r\n    tint: Color = MaterialTheme.colorScheme.onSurface,\r\n    description: String = \"\",\r\n    onClick: () -> Unit,\r\n) {\r\n    IconButton(\r\n        modifier = modifier,\r\n        onClick ="}], "metadata": {"task_id": "Neo-Backup/273", "ground_truth": "            tint = tint,\r\n            contentDescription = description\r\n        )\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Components.kt"}}
{"prompt": "import androidx.compose.runtime.Composable\nimport androidx.compose.animation.ExitTransition\nimport androidx.compose.animation.EnterTransition\nimport androidx.compose.animation.AnimatedVisibilityScope\nimport androidx.compose.animation.AnimatedVisibility\n\r\n@Composable\r\nfun StatefulAnimatedVisibility(\r\n    currentState: Boolean = false,\r\n    enterPositive: EnterTransition,\r\n    exitPositive: ExitTransition,\r\n    enterNegative: EnterTransition,\r\n    exitNegative: ExitTransition,\r\n    expandedView: @Composable (AnimatedVisibilityScope.() -> Unit),\r\n    collapsedView: @Composable (AnimatedVisibilityScope.() -> Unit),\r\n) {\r\n    AnimatedVisibility(\r\n        visible = currentState,\r\n        enter = enterPositive,\r\n        exit = exitPositive,\r\n        content = expandedView\r\n    )\r\n    AnimatedVisibility(\r\n        visible = !currentState,", "choices": [{"text": "\r\n        enter = enterNegative,\r\n        exit = exitNegative,\r\n        content = collapsedView\r\n    )\r\n    AnimatedVisibility(\r\n        visible =!currentState,\r\n        enter = enterNegative,\r\n        exit = exitNegative,\r\n        content = collapsedView\r\n    )\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/274", "ground_truth": "        enter = enterNegative,\r\n        exit = exitNegative,\r\n        content = collapsedView\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Legend\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun LegendItem(item: Legend) {\r\n    CardSubRow(\r\n        text = stringResource(id = item.nameId),\r\n        icon = item.icon,\r\n        iconColor = if (item.iconColorId != -1) colorResource(id = item.iconColorId)\r\n        else MaterialTheme.colorScheme.onSurface,", "choices": [{"text": "\r\n        title = stringResource(id = item.titleId),\r\n        subtitle = stringResource(id = item.subtitleId),\r\n        subtitleColor = if (item.subtitleColorId!= -1) colorResource(id = item.subtitleColorId)\r\n        else MaterialTheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme.colorScheme."}], "metadata": {"task_id": "Neo-Backup/279", "ground_truth": "        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable(enabled = false) {}\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\LegendItem.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport com.machiav3lli.backup.ui.item.BooleanPref\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Switch\n\r\n@Composable\r\nfun BooleanPreference(\r\n    modifier: Modifier = Modifier,\r\n    pref: BooleanPref,\r\n    index: Int = 0,\r\n    groupSize: Int = 1,\r\n    onCheckedChange: ((Boolean) -> Unit) = {},\r\n) {\r\n    SwitchPreference(\r\n        modifier = modifier,\r\n        pref = pref,", "choices": [{"text": "\r\n        index = index,\r\n        groupSize = groupSize,\r\n        onCheckedChange = onCheckedChange,\r\n    );\r\n}\r\n\r\n@Composable\r\nfun SwitchPreference(\r\n    modifier: Modifier = Modifier,\r\n    pref: Pref,\r\n    index: Int = 0,\r\n    groupSize: Int = 1,\r\n    onCheckedChange: ((Boolean) -> Unit) = {},\r\n) {\r\n    SwitchPreference(\r\n        modifier = modifier,\r\n        pref = pref,\r\n        index = index,"}], "metadata": {"task_id": "Neo-Backup/281", "ground_truth": "        index = index,\r\n        groupSize = groupSize,\r\n        onCheckedChange = onCheckedChange,\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Preference.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport com.machiav3lli.backup.ui.item.IntPref\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun IntPreference(\r\n    modifier: Modifier = Modifier,\r\n    pref: IntPref,\r\n    index: Int = 0,\r\n    groupSize: Int = 1,\r\n    onValueChange: ((Int) -> Unit) = {},\r\n) {\r\n    SeekBarPreference(\r\n        modifier = modifier,\r\n        pref = pref,", "choices": [{"text": "\r\n        index = index,\r\n        groupSize = groupSize,\r\n        onValueChange = onValueChange,\r\n    );\r\n}\r\n\r\n@Composable\r\nfun FloatPreference(\r\n    modifier: Modifier = Modifier,\r\n    pref: FloatPref,\r\n    index: Int = 0,\r\n    groupSize: Int = 1,\r\n    onValueChange: ((Float) -> Unit) = {},\r\n) {\r\n    SeekBarPreference(\r\n        modifier = modifier,\r\n        pref = pref,\r\n        index ="}], "metadata": {"task_id": "Neo-Backup/282", "ground_truth": "        index = index,\r\n        groupSize = groupSize,\r\n        onValueChange = onValueChange,\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Preference.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.compose.vertical\nimport com.machiav3lli.backup.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.draw.rotate\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.foundation.layout.Row\n\r\n@Preview\r\n@Composable\r\nfun VerticalPreview() {\r\n    Row(\r\n        modifier = Modifier.wrapContentSize()\r\n    ) {\r\n        Text(\r\n            modifier = Modifier\r\n                .vertical()\r\n                .rotate(-90f),\r\n            fontWeight = FontWeight.Bold,", "choices": [{"text": "\r\n            text = R.string.preview_vertical,\r\n        ),\r\n    };\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun HorizontalPreview() {\r\n    Row(\r\n        modifier = Modifier.wrapContentSize()\r\n    ) {\r\n        Text(\r\n            modifier = Modifier\r\n               .horizontal()\r\n               .rotate(-90f),\r\n            fontWeight = FontWeight.Bold,\r\n            text = R.string.preview_horizontal,\r\n        ),\r\n    };\r\n"}], "metadata": {"task_id": "Neo-Backup/283", "ground_truth": "            text = \"vertical text\"\r\n        )\r\n        Text(text = \"horizontal\")\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\TopBar.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.compose.vertical\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@Composable\r\nfun GlobalIndicators() {\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier", "choices": [{"text": ".Vertical,\r\n    ),\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier.Vertical,\r\n    ),\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier.Vertical,\r\n    ),\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier.Vertical,\r\n    ),\r\n    Column(\r\n        verticalArrangement = Arrang"}], "metadata": {"task_id": "Neo-Backup/285", "ground_truth": "            .fillMaxWidth()\r\n    ) {\r\n        ProgressIndicator()\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\TopBar.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.ChipItem\nimport com.machiav3lli.backup.ui.compose.item.SelectionChip\nimport com.machiav3lli.backup.R\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.FlowRow\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@OptIn(ExperimentalLayoutApi::class)\r\n@Composable\r\nfun SelectableChipGroup(\r\n    //TODO hg42 move to item/Components.kt ?\r\n    modifier: Modifier = Modifier,\r\n    list: List<ChipItem>,\r\n    selectedFlag: Int,\r\n    onClick: (Int) -> Unit,\r\n) {\r\n    FlowRow(\r\n        modifier = modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n    ) {\r\n        list.forEach { item ->\r\n            SelectionChip(\r\n                item = item,\r\n                isSelected = item.flag == selectedFlag,\r\n            ) {", "choices": [{"text": ",\r\n                flag = item.flag,\r\n                isSelected = item.flag == selectedFlag,\r\n                onClick = onClick,\r\n            },\r\n        });\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n    ) {\r\n        list.forEach { item ->\r\n            SelectionChip(\r\n                item = item,\r\n                isSelected = item.flag == selectedFlag,\r\n            ) {\r\n               "}], "metadata": {"task_id": "Neo-Backup/286", "ground_truth": "                onClick(item.flag)\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.ChipItem\nimport com.machiav3lli.backup.ui.compose.item.SelectionChip\nimport com.machiav3lli.backup.R\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.FlowRow\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@OptIn(ExperimentalLayoutApi::class)\r\n@Composable\r\nfun MultiSelectableChipGroup(\r\n    //TODO hg42 move to item/Components.kt ?\r\n    modifier: Modifier = Modifier,\r\n    list: List<ChipItem>,\r\n    selectedFlags: Int,\r\n    onClick: (Int, Int) -> Unit,\r\n) {\r\n    FlowRow(\r\n        modifier = modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n    ) {\r\n        list.forEach { item ->\r\n            SelectionChip(\r\n                item = item,\r\n                isSelected = item.flag and selectedFlags != 0,\r\n            ) {", "choices": [{"text": ",\r\n                selectedFlags = selectedFlags | item.flag,\r\n                onClick = onClick,\r\n            },\r\n        });\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n    ) {\r\n        list.forEach { item ->\r\n            Row(\r\n                modifier = modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n            ) {\r"}], "metadata": {"task_id": "Neo-Backup/287", "ground_truth": "                onClick(selectedFlags xor item.flag, item.flag)\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.items.Package\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun UpdatedPackageRecycler(\r\n    modifier: Modifier = Modifier,\r\n    productsList: List<Package>?,\r\n    onClick: (Package) -> Unit = {},\r\n) {\r\n    HorizontalItemList(\r\n        modifier = modifier,\r\n        list = productsList,", "choices": [{"text": "\r\n        onClick = onClick,\r\n    );\r\n}\r\n\r\n@Composable\r\nclass HorizontalItemList {\r\n    modifier: Modifier;\r\n    list: List<Package>;\r\n    onClick: (Package) -> Unit;\r\n\r\n    constructor(\r\n        modifier: Modifier,\r\n        list: List<Package>,\r\n        onClick: (Package) -> Unit,\r\n    ) {\r\n        this.modifier = modifier;\r\n        this.list = list;\r\n        this.onClick = onClick;\r\n    }\r"}], "metadata": {"task_id": "Neo-Backup/288", "ground_truth": "        itemKey = { it.packageName }\r\n    ) {\r\n        UpdatedPackageItem(it, onClick)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Recyclers.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Schedule\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ScheduleRecycler(\r\n    modifier: Modifier = Modifier,\r\n    productsList: List<Schedule>?,\r\n    onClick: (Schedule) -> Unit = {},\r\n    onCheckChanged: (Schedule, Boolean) -> Unit = { _: Schedule, _: Boolean -> },\r\n) {\r\n    BusyBackground(modifier) {\r\n        VerticalItemList(\r\n            list = productsList", "choices": [{"text": ",\r\n            onClick = onClick,\r\n            onCheckChanged = onCheckChanged,\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/289", "ground_truth": "        ) {\r\n            ScheduleItem(it, onClick, onCheckChanged)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Recyclers.kt"}}
{"prompt": "import com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.dbs.entity.Schedule\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ExportedScheduleRecycler(\r\n    modifier: Modifier = Modifier,\r\n    productsList: List<Pair<Schedule, StorageFile>>?,\r\n    onImport: (Schedule) -> Unit = {},\r\n    onDelete: (StorageFile) -> Unit = {},\r\n) {\r\n    BusyBackground(modifier) {\r\n        VerticalItemList(\r\n            list = productsList", "choices": [{"text": ",\r\n            onImport = onImport,\r\n            onDelete = onDelete,\r\n        );\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/290", "ground_truth": "        ) {\r\n            ExportedScheduleItem(it.first, it.second, onImport, onDelete)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Recyclers.kt"}}
{"prompt": "import com.machiav3lli.backup.items.Log\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun LogRecycler(\r\n    modifier: Modifier = Modifier,\r\n    productsList: List<Log>?,\r\n    onShare: (Log) -> Unit = {},\r\n    onDelete: (Log) -> Unit = {},\r\n) {\r\n    BusyBackground(modifier) {\r\n        VerticalItemList(\r\n            list = productsList", "choices": [{"text": ",\r\n            onShare = onShare,\r\n            onDelete = onDelete,\r\n        );\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/291", "ground_truth": "        ) {\r\n            LogItem(it, onShare, onDelete)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Recyclers.kt"}}
{"prompt": "import androidx.navigation.compose.composable\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.animation.slideOutHorizontally\nimport androidx.compose.animation.slideInHorizontally\nimport androidx.compose.animation.AnimatedVisibilityScope\nfun NavGraphBuilder.slideInComposable(\r\n    route: String,\r\n    composable: @Composable (AnimatedVisibilityScope.(NavBackStackEntry) -> Unit),\r\n) {\r\n    composable(\r\n        route,\r\n        enterTransition = { slideInHorizontally { width -> width } },\r\n        exitTransition = { slideOutHorizontally { width -> -width } },\r\n        popEnterTransition = { slideInHorizontally { width -> -width } },", "choices": [{"text": "\r\n        popExitTransition = { slideOutHorizontally { width -> width } },\r\n    )\r\n}\r\n\r\nfun NavGraphBuilder.slideOutComposable(\r\n    route: String,\r\n    composable: @Composable (AnimatedVisibilityScope.(NavBackStackEntry) -> Unit),\r\n) {\r\n    composable(\r\n        route,\r\n        enterTransition = { slideInHorizontally { width -> -width } },\r\n        exitTransition = { slideOutHorizontally { width -> width } },\r\n        pop"}], "metadata": {"task_id": "Neo-Backup/293", "ground_truth": "        popExitTransition = { slideOutHorizontally { width -> width } },\r\n    ) {\r\n        composable(it)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Host.kt"}}
{"prompt": "import androidx.navigation.compose.composable\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.animation.slideInVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.AnimatedVisibilityScope\nfun NavGraphBuilder.slideDownComposable(\r\n    route: String,\r\n    composable: @Composable (AnimatedVisibilityScope.(NavBackStackEntry) -> Unit),\r\n) {\r\n    composable(\r\n        route,\r\n        enterTransition = { slideInVertically { height -> -height } + fadeIn() },", "choices": [{"text": "\r\n        exitTransition = { slideInVertically { height -> -height } + fadeIn() },\r\n    )\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/294", "ground_truth": "        exitTransition = { slideOutVertically { height -> height } + fadeOut() }\r\n    ) {\r\n        composable(it)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Host.kt"}}
{"prompt": "import androidx.navigation.compose.composable\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.AnimatedVisibilityScope\nfun NavGraphBuilder.fadeComposable(\r\n    route: String,\r\n    composable: @Composable (AnimatedVisibilityScope.(NavBackStackEntry) -> Unit),\r\n) {\r\n    composable(\r\n        route,\r\n        enterTransition = { fadeIn(initialAlpha = 0.1f) },", "choices": [{"text": "\r\n        exitTransition = { fadeIn(initialAlpha = 1.0f) },\r\n    )\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/295", "ground_truth": "        exitTransition = { fadeOut() }\r\n    ) {\r\n        composable(it)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Host.kt"}}
{"prompt": "import androidx.navigation.compose.NavHost\nimport androidx.navigation.NavHostController\nfun NavHostController.safeNavigate(route: String) {", "choices": [{"text": "<?php\n\n/*\n * This file is part of PHPExifTool.\n *\n * (c) 2012 Romain Neutron <imprec@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace PHPExiftool\\Driver\\Tag\\DICOM;\n\nuse JMS\\Serializer\\Annotation\\ExclusionPolicy;\nuse PHPExiftool\\Driver\\AbstractTag;\n\n/**\n * @ExclusionPolicy(\"all\")\n */\nclass D"}], "metadata": {"task_id": "Neo-Backup/297", "ground_truth": "    if (currentDestination?.route != route) {\r\n        popBackStack()\r\n        navigate(route)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Host.kt"}}
{"prompt": "import androidx.navigation.NavHostController\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.pager.PagerState\nimport androidx.compose.foundation.pager.HorizontalPager\nimport androidx.compose.foundation.ExperimentalFoundationApi\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun SlidePager(\r\n    modifier: Modifier = Modifier,\r\n    pageItems: List<NavItem>,\r\n    pagerState: PagerState,\r\n    navController: NavHostController,\r\n) {\r\n    HorizontalPager(modifier = modifier, state = pagerState, beyondBoundsPageCount = 3) { page ->", "choices": [{"text": " {\r\n        navController.navigate(page);\r\n    });\r\n}\r\n\r\n@OptIn(ExperimentalFoundationApi.class)\r\n@Composable\r\nfun SlidePager(\r\n    modifier: Modifier = Modifier,\r\n    pageItems: List<NavItem>,\r\n    pagerState: PagerState,\r\n    navController: NavHostController,\r\n) {\r\n    HorizontalPager(modifier = modifier, state = pagerState, beyondBoundsPageCount = 3) { page -> {\r\n        navController.navigate(page);\r"}], "metadata": {"task_id": "Neo-Backup/298", "ground_truth": "        pageItems[page].ComposablePage(\r\n            navController = navController,\r\n        )\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Pager.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.items.RootFile\n\r\n@Throws(IOException::class)\r\nfun suCopyFileToDocument(sourcePath: String, targetDir: StorageFile) {\r\n    val sourceFile = RootFile(sourcePath)\r\n    sourceFile.inputStream().use { inputStream ->\r\n        targetDir.createFile(sourceFile.name).let { newFile ->\r\n            newFile.outputStream().use { outputStream ->", "choices": [{"text": "\r\n                inputStream.copyTo(newFile.outputStream())\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Throws(IOException::class)\r\nfun suCopyDirectoryToDocument(sourcePath: String, targetDir: StorageFile) {\r\n    val sourceFile = RootFile(sourcePath)\r\n    sourceFile.inputStream().use { inputStream ->\r\n        targetDir.createDirectory(sourceFile.name).let { newDirectory ->\r\n            newDirectory.outputStream().use { outputStream ->\r\n                sourceFile.inputStream().copyTo(newDirectory"}], "metadata": {"task_id": "Neo-Backup/303", "ground_truth": "                IOUtils.copy(inputStream, outputStream)\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\DocumentUtils.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.handler.ShellHandler.ShellCommandFailedException\nimport com.machiav3lli.backup.handler.ShellHandler.Companion.runAsRoot\nimport com.machiav3lli.backup.handler.ShellHandler.Companion.quote\n\r\n@Throws(IOException::class, ShellCommandFailedException::class)\r\nfun suRecursiveCopyFileFromDocument(sourceDir: StorageFile, targetPath: String?) {\r\n    sourceDir.listFiles().forEach {\r\n        with(it) {\r\n            if (!name.isNullOrEmpty()) {\r\n                when {\r\n                    isDirectory ->\r\n                        runAsRoot(\"mkdir -p ${quote(File(targetPath, name!!))}\")\r\n                    isFile      ->\r\n                        suCopyFileFromDocument(it, File(targetPath, name!!).absolutePath)", "choices": [{"text": "\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Throws(IOException::class, ShellCommandFailedException::class)\r\nfun suRecursiveCopyDirectoryFromDocument(sourceDir: StorageFile, targetPath: String?) {\r\n    sourceDir.listDirectories().forEach {\r\n        with(it) {\r\n            if (!name.isNullOrEmpty()) {\r\n                when {\r\n                    isDirectory ->\r\n                        runAsRoot(\"mkdir -p ${quote(File(targetPath, name!!))}\")\r\n                    isFile      ->\r"}], "metadata": {"task_id": "Neo-Backup/305", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\DocumentUtils.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport com.topjohnwu.superuser.io.SuFileOutputStream\nimport com.machiav3lli.backup.items.StorageFile\n\r\n@Throws(IOException::class)\r\nfun suCopyFileFromDocument(sourceFile: StorageFile, targetPath: String) {\r\n    SuFileOutputStream.open(targetPath).use { outputStream ->", "choices": [{"text": " { outputStream.write(sourceFile.getContent()); } };\r\n}\r\n\r\n@Throws(IOException::class)\r\nfun suCopyFileToDocument(sourceFile: StorageFile, targetPath: String) {\r\n    SuFileOutputStream.open(targetPath).use { outputStream -> { outputStream.write(sourceFile.getContent()); } };\r\n}\r\n\r\n@Throws(IOException::class)\r\nfun suDeleteFileFromDocument(sourceFile: StorageFile, targetPath: String) {\r\n    SuFileOutputStream.open(targetPath).use {"}], "metadata": {"task_id": "Neo-Backup/306", "ground_truth": "        sourceFile.inputStream().use { inputStream ->\r\n            IOUtils.copy(inputStream, outputStream)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\DocumentUtils.kt"}}
{"prompt": "import kotlinx.coroutines.flow.Flow\nfun <T1, T2, T3, T4, T5, T6, R> FlowUtils.combine(\r\n        flow: Flow<T1>,\r\n        flow2: Flow<T2>,\r\n        flow3: Flow<T3>,\r\n        flow4: Flow<T4>,\r\n        flow5: Flow<T5>,\r\n        flow6: Flow<T6>,\r\n        transform: suspend (T1, T2, T3, T4, T5, T6) -> R\r\n    ): Flow<R> = kotlinx.coroutines.flow.combine(\r\n        kotlinx.coroutines.flow.combine(flow, flow2, flow3, ::Triple),\r\n        kotlinx.coroutines.flow.combine(flow4, flow5, flow6, ::Triple)\r\n    ) { t1, t2 ->\r\n        transform(\r\n            t1.first,\r\n            t1.second,\r\n            t1.third,", "choices": [{"text": "\r\n            t1.fourth,\r\n            t1.fifth,\r\n            t2.first,\r\n            t2.second,\r\n            t2.third,\r\n            t2.fourth,\r\n            t2.fifth,\r\n            t3.first,\r\n            t3.second,\r\n            t3.third,\r\n            t3.fourth,\r\n            t3.fifth,\r\n            t4.first,\r\n            t4.second,\r\n"}], "metadata": {"task_id": "Neo-Backup/312", "ground_truth": "            t2.first,\r\n            t2.second,\r\n            t2.third\r\n        )\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\FlowUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.R\nimport android.content.pm.PackageManager\nfun PackageManager.getInstalledPackageInfosWithPermissions() =\r\n    getInstalledPackages(0).mapNotNull {\r\n        try {\r\n            getPackageInfo(it.packageName, PackageManager.GET_PERMISSIONS)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Neo-Backup/314", "ground_truth": "        } catch (e: Throwable) {\r\n            LogsHandler.unexpectedException(e)\r\n            null\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\ItemUtils.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nimport com.machiav3lli.backup.handler.ShellHandler\nimport com.machiav3lli.backup.R\nimport android.app.Activity\nfun Activity.checkRootAccess(showDialogOnError: Boolean = false): Boolean {\r\n    val isRooted = Shell.getShell().isRoot\r\n    if (!isRooted) {\r\n        if (showDialogOnError)\r\n            showFatalUiWarning(getString(R.string.noSu))\r\n        return false\r\n    }\r\n    try {\r\n        ShellHandler.runAsRoot(\"id\")\r\n    } catch (e: ShellHandler.ShellCommandFailedException) {", "choices": [{"text": "\r\n        if (showDialogOnError)\r\n            showFatalUiWarning(getString(R.string.noSu))\r\n        return false\r\n    }\r\n    return true\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/317", "ground_truth": "        showFatalUiWarning(getString(R.string.noSu))\r\n        return false\r\n    }\r\n    return true\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PermissionUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport com.machiav3lli.backup.BACKUP_DIRECTORY_INTENT\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nimport android.content.ActivityNotFoundException\nimport android.app.Activity\nfun Activity.requireStorageLocation(activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n    val intent = BACKUP_DIRECTORY_INTENT\r\n    try {\r\n        activityResultLauncher.launch(intent)\r\n    } catch (e: ActivityNotFoundException) {\r\n        showWarning(\r\n            getString(R.string.no_file_manager_title),\r\n            getString(R.string.no_file_manager_message)", "choices": [{"text": "\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/318", "ground_truth": "        ) { _: DialogInterface?, _: Int ->\r\n            finishAffinity()\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PermissionUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport com.machiav3lli.backup.OABX\nimport android.provider.Settings\nimport android.os.Build\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\nfun Activity.getStoragePermission() {\r\n    when {\r\n        OABX.minSDK(Build.VERSION_CODES.R) -> {\r\n            val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)\r\n            intent.data = Uri.parse(\"package:$packageName\")\r\n            startActivity(intent)\r\n        }\r\n\r\n        else                               -> {", "choices": [{"text": "\r\n            val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)\r\n            intent.data = Uri.parse(\"package:$packageName\")\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    else {\r\n        val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)\r\n        intent.data = Uri.parse(\"package:$packageName\")\r\n        startActivity(intent)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/319", "ground_truth": "            requireWriteStoragePermission()\r\n            requireReadStoragePermission()\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PermissionUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport androidx.core.app.ActivityCompat\nimport android.content.pm.PackageManager\nimport android.app.Activity\nimport android.Manifest\nfun Activity.requireContactsPermission() {\r\n    if (\r\n        checkSelfPermission(Manifest.permission.READ_CONTACTS) !=\r\n        PackageManager.PERMISSION_GRANTED\r\n    )\r\n        ActivityCompat.requestPermissions(", "choices": [{"text": "Activity.this, Manifest.permission.READ_CONTACTS);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Neo-Backup/323", "ground_truth": "            this,\r\n            arrayOf(Manifest.permission.READ_CONTACTS),\r\n            CONTACTS_PERMISSION\r\n        )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PermissionUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.preferences.pref_pathBackupFolder\nimport com.machiav3lli.backup.OABX\nimport android.provider.DocumentsContract\nimport android.net.Uri\nfun setBackupDir(value: Uri): String {\r\n    val fullUri = DocumentsContract\r\n        .buildDocumentUriUsingTree(value, DocumentsContract.getTreeDocumentId(value))\r\n    pref_pathBackupFolder.value = fullUri.toString()\r\n    //if (OABX.main != null) OABX.main?.refreshPackages()\r\n    //else", "choices": [{"text": "{\r\n    //    OABX.main?.refreshPackages()\r\n    //}\r\n    return fullUri.toString()\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/326", "ground_truth": "    CoroutineScope(Dispatchers.IO).launch {\r\n        invalidateBackupLocation()\r\n    }\r\n    return fullUri.toString()\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PrefUtils.kt"}}
{"prompt": "import android.content.Context\nfun Context.getLocaleOfCode(localeCode: String): Locale = when {\r\n    localeCode.isEmpty()      -> resources.configuration.locales[0]\r\n    localeCode.contains(\"-r\") -> Locale(\r\n        localeCode.substring(0, 2),\r\n        localeCode.substring(4)\r\n    )\r\n\r\n    localeCode.contains(\"_\")  -> Locale(\r\n        localeCode.substring(0, 2),", "choices": [{"text": "\r\n        localeCode.substring(2)\r\n    )\r\n\r\n    localeCode.contains(\".\")  -> Locale(\r\n        localeCode.substring(0, 2),\r\n        localeCode.substring(2)\r\n    )\r\n\r\n    localeCode.contains(\"-\")  -> Locale(\r\n        localeCode.substring(0, 2),\r\n        localeCode.substring(2)\r\n    )\r\n\r\n    localeCode.contains(\"_\")  -> Locale(\r\n        localeCode.substring(0, 2),\r\n"}], "metadata": {"task_id": "Neo-Backup/327", "ground_truth": "        localeCode.substring(3)\r\n    )\r\n\r\n    else                      -> Locale(localeCode)\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PrefUtils.kt"}}
{"prompt": "import kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.CoroutineScope\nimport com.machiav3lli.backup.dbs.entity.Schedule\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun timeLeft(\r\n    schedule: Schedule,\r\n    scope: CoroutineScope,\r\n): MutableStateFlow<Pair<String, String>> {\r\n    val state = MutableStateFlow(calcTimeLeft(schedule))\r\n\r\n    LaunchedEffect(state) {\r\n        delay(updateInterval)\r\n        state.emit(calcTimeLeft(schedule))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Neo-Backup/330", "ground_truth": "    }\r\n\r\n    //traceDebug { state.value.let { \"\u23f3 ${it[0]}  \ud83d\udd52 ${it[1]}\" } }\r\n\r\n    return state\r", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\ScheduleUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.services.AlarmReceiver\nimport com.machiav3lli.backup.R\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\n\nfun createPendingIntent(context: Context, scheduleId: Long): PendingIntent {\r\n    val alarmIntent = Intent(context, AlarmReceiver::class.java).apply {\r\n        action = \"schedule\"\r\n        putExtra(\"scheduleId\", scheduleId)\r\n        addFlags(Intent.FLAG_RECEIVER_FOREGROUND)\r\n    }\r\n    return PendingIntent.getBroadcast(", "choices": [{"text": "alarmIntent, 0, alarmIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/332", "ground_truth": "        context,\r\n        scheduleId.toInt(),\r\n        alarmIntent,\r\n        PendingIntent.FLAG_IMMUTABLE\r\n    )\r", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\ScheduleUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.traceTiming\nfun logNanoTiming(pattern: String = \"\", title: String = \"\") {\r\n        if (traceTiming.pref.value) {\r\n            traceTiming { \"\"\"$title -----\\\"\"\" }\r\n            listNanoTiming(pattern).forEach {", "choices": [{"text": "\r\n            traceTiming { \"\"\"$pattern -----\\\"\"\" }\r\n            traceTiming { \"\"\"$title -----\\\"\"\" }\r\n            traceTiming { \"\"\"$pattern -----\\\"\"\" }\r\n            traceTiming { \"\"\"$title -----\\\"\"\" }\r\n            traceTiming { \"\"\"$pattern -----\\\"\"\" }\r\n            traceTiming { \"\"\"$title -----\\\"\"\" }\r\n            traceTiming { \"\"\"$pattern -----\\\"\"\" }\r\n            traceTiming { \"\"\"$title -----\\\"\"\" }\r\n            traceTiming { \"\"\"$pattern -----\\\"\"\" }\r\n            traceTiming { \"\"\"$title -----\\\""}], "metadata": {"task_id": "Neo-Backup/344", "ground_truth": "                traceTiming { \"$title $it\" }\r\n            }\r\n            traceTiming { \"\"\"$title -----/\"\"\" }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\TraceUtils.kt"}}
{"prompt": "fun stackFrame(skip: Int = 0): StackTraceElement? {\r\n        return try {\r\n            // >= Java 9  StackWalker.getInstance().walk { stream -> stream.skip(1).findFirst().get() }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices.WindowsRuntime;\nusing Windows.Foundation;\nusing Windows.Foundation.Collections;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Controls.Primitives;\nusing Windows.UI.Xaml.Data;\nusing Windows.UI.Xaml.Input;\nusing Windows.UI.Xaml.Media;\nusing Windows.UI"}], "metadata": {"task_id": "Neo-Backup/345", "ground_truth": "            Throwable().stackTrace[skip + 1]\r\n        } catch (e: Throwable) {\r\n            null\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\TraceUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Backup\nfun formatBackups(backups: List<Backup>?): String {\r\n        return \"(${backups?.size ?: 0})${\r\n            backups?.map {\r\n                \"${\r\n                    it.backupDate\r\n                }${\r\n                    if (it.persistent) \"\ud83d\udd12\" else \"\"", "choices": [{"text": "\r\n                }\r\n            }\r\n        }\";\r\n    }\r\n"}], "metadata": {"task_id": "Neo-Backup/347", "ground_truth": "                }\"\r\n            }\r\n                ?: \"<null>\"\r\n        }\"\r\n    ", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\TraceUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Backup\n fun formatSortedBackups(backups: List<Backup>?): String {\r\n        return \"(${backups?.size ?: 0})${\r\n            backups?.map {\r\n                \"${\r\n                    it.backupDate\r\n                }${\r\n                    if (it.persistent) \"\ud83d\udd12\" else \"\"\r\n                }\"", "choices": [{"text": "\r\n            }\r\n        }\"\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Neo-Backup/348", "ground_truth": "            }\r\n                ?.sortedDescending()\r\n                ?: \"<null>\"\r\n        }\"\r\n   ", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\TraceUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport android.content.res.Resources\nfun Resources.Theme.applyAccentStyle() = applyStyle(\r\n    when (stylePrimary) {\r\n        1    -> R.style.Accent1\r\n        2    -> R.style.Accent2\r\n        3    -> R.style.Accent3\r\n        4    -> R.style.Accent4\r\n        5    -> R.style.Accent5\r\n        6    -> R.style.Accent6", "choices": [{"text": "\r\n        7    -> R.style.Accent7\r\n        8    -> R.style.Accent8\r\n        9    -> R.style.Accent9\r\n        10   -> R.style.Accent10\r\n        11   -> R.style.Accent11\r\n        12   -> R.style.Accent12\r\n        13   -> R.style.Accent13\r\n        14   -> R.style.Accent14\r\n        15   -> R.style.Accent15\r\n        16   -> R.style.Acc"}], "metadata": {"task_id": "Neo-Backup/355", "ground_truth": "        7    -> R.style.Accent7\r\n        8    -> R.style.Accent8\r\n        else -> R.style.Accent0\r\n    }, true\r\n)", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\UIUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport android.content.res.Resources\nfun Resources.Theme.applySecondaryStyle() = applyStyle(\r\n    when (styleSecondary) {\r\n        1    -> R.style.Secondary1\r\n        2    -> R.style.Secondary2\r\n        3    -> R.style.Secondary3\r\n        4    -> R.style.Secondary4\r\n        5    -> R.style.Secondary5\r\n        6    -> R.style.Secondary6", "choices": [{"text": "\r\n        7    -> R.style.Secondary7\r\n        8    -> R.style.Secondary8\r\n        9    -> R.style.Secondary9\r\n        10   -> R.style.Secondary10\r\n        11   -> R.style.Secondary11\r\n        12   -> R.style.Secondary12\r\n        13   -> R.style.Secondary13\r\n        14   -> R.style.Secondary14\r\n        15   -> R.style.Secondary15\r\n        16   -> R.style.Secondary16\r\n        17   -> R."}], "metadata": {"task_id": "Neo-Backup/356", "ground_truth": "        7    -> R.style.Secondary7\r\n        8    -> R.style.Secondary8\r\n        else -> R.style.Secondary0\r\n    }, true\r\n)", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\UIUtils.kt"}}
{"prompt": "import timber.log.Timber\nimport android.content.Context\nimport android.app.Activity\nfun Context.restartApp() {\r\n    Timber.w(\r\n        \"restarting application\"\r\n    )\r\n    startActivity(", "choices": [{"text": "Activity)\r\n}\r\n\r\ndef startActivity(activity) {\r\n    Timber.w(\r\n        \"starting activity\"\r\n    )\r\n    activity.start()\r\n}\r\n\r\ndef stopActivity(activity) {\r\n    Timber.w(\r\n        \"stopping activity\"\r\n    )\r\n    activity.stop()\r\n}\r\n\r\ndef finishActivity(activity) {\r\n    Timber.w(\r\n        \"finishing activity\"\r\n    )\r\n    activity.finish()\r\n}\r"}], "metadata": {"task_id": "Neo-Backup/357", "ground_truth": "        Intent.makeRestartActivityTask(\r\n            ComponentName(this, MainActivityX::class.java)\r\n        )\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\UIUtils.kt"}}
{"prompt": "fun uninstallApp() {", "choices": [{"text": "\n\t\tif (this.state.isLoading) {\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tisLoading: true\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-md-12\">\n\t\t\t\t\t\t<div className=\"panel panel-default\">\n\t\t\t\t\t\t\t<div className=\"panel"}], "metadata": {"task_id": "Neo-Backup/361", "ground_truth": "        viewModelScope.launch {\r\n            uninstall()\r\n            refreshNow.value = true\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\AppSheetViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\nprivate suspend fun delete(backup: Backup) {\r\n        withContext(Dispatchers.IO) {\r\n            thePackage.value?.let { pkg ->\r\n                pkg.deleteBackup(backup)\r\n                if (!pkg.isInstalled && pkg.backupList.isEmpty()) {\r\n                    database.getAppInfoDao().deleteAllOf(pkg.packageName)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Neo-Backup/365", "ground_truth": "                    dismissNow.value = true\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\AppSheetViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\nprivate suspend fun deleteAll() {\r\n        withContext(Dispatchers.IO) {\r\n            thePackage.value?.let { pkg ->\r\n                pkg.deleteAllBackups()\r\n                if (!pkg.isInstalled && pkg.backupList.isEmpty()) {\r\n                    database.getAppInfoDao().deleteAllOf(pkg.packageName)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Neo-Backup/367", "ground_truth": "                    dismissNow.value = true\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\AppSheetViewModel.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.AppExtras\nfun setExtras(appExtras: AppExtras?) {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Neo-Backup/368", "ground_truth": "        viewModelScope.launch {\r\n            replaceExtras(appExtras)\r\n            refreshNow.value = true\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\AppSheetViewModel.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Schedule\nval _exportsList\nval exportsList\nval handler\nfun exportSchedules() {", "choices": [{"text": "\nval _exportsList\nval exportsList\nval handler\nfun exportSchedules() {\n    var schedules = [];\n    for (var i = 0; i < 10; i++) {\n        schedules.push(new Schedule());\n    }\n    return schedules;\n}\nval _exportsList\nval exportsList\nval handler\nfun exportSchedules() {\n    var schedules = [];\n    for (var i = 0; i < 10; i++) {\n        schedules.push(new Schedule());\n    }\n    return schedules;\n}\nval _exportsList\nval exports"}], "metadata": {"task_id": "Neo-Backup/376", "ground_truth": "        viewModelScope.launch {\r\n            export()\r\n            refreshList()\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\ExportsViewModel.kt"}}
{"prompt": "import com.machiav3lli.backup.items.StorageFile\nfun deleteExport(exportFile: StorageFile) {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Neo-Backup/378", "ground_truth": "        viewModelScope.launch {\r\n            delete(exportFile)\r\n            refreshList()\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\ExportsViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.dbs.entity.Schedule\nprivate suspend fun import(export: Schedule) {\r\n        withContext(Dispatchers.IO) {\r\n            database.insert(\r\n                Schedule.Builder() // Set id to 0 to make the database generate a new id\r\n                    .withId(0)", "choices": [{"text": ".build()\r\n                   .build()\r\n            );\r\n        }\r\n    }\r\n    private suspend fun update(export: Schedule) {\r\n        withContext(Dispatchers.IO) {\r\n            database.update(\r\n                Schedule.Builder() // Set id to 0 to make the database generate a new id\r\n                   .withId(0)\r\n                   .build()\r\n            );\r\n        }\r\n    }\r\n    private suspend fun delete(export: Schedule) {\r\n        withContext(Dispatchers.IO) {\r\n           "}], "metadata": {"task_id": "Neo-Backup/381", "ground_truth": "                    .import(export)\r\n                    .build()\r\n            )\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\ExportsViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.machiav3lli.backup.items.Log\nimport androidx.lifecycle.viewModelScope\nfun deleteLog(log: Log) {\r\n        viewModelScope.launch {", "choices": [{"text": "\r\n            log.delete()\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Neo-Backup/385", "ground_truth": "            delete(log)\r\n            logsList.remove(log)\r\n            //refreshList()\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\LogViewModel.kt"}}
{"prompt": "import kotlin.reflect.*\nimport kotlinx.coroutines.runBlocking\nimport com.machiav3lli.backup.utils.TraceUtils.trace\nimport com.machiav3lli.backup.traceFlows\nfun retriggerFlowsForUI() {\r\n        traceFlows { \"******************** retriggerFlowsForUI\" }\r\n        runBlocking {\r\n            val saved = searchQuery.value\r\n            // in case same value isn't triggering\r\n            val retrigger = saved + \"<RETRIGGERING>\"\r\n            searchQuery.value = retrigger\r\n            // wait until we really get that value\r\n            while (searchQuery.value != retrigger)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Neo-Backup/388", "ground_truth": "                yield()\r\n            // now switch back\r\n            searchQuery.value = saved\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\MainViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.machiav3lli.backup.items.Package\nimport androidx.lifecycle.viewModelScope\nfun updatePackage(packageName: String) {\r\n        viewModelScope.launch {", "choices": [{"text": "\r\n            Package.updatePackage(packageName)\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Neo-Backup/389", "ground_truth": "            packageMap.value[packageName]?.let {\r\n                updateDataOf(packageName)\r\n            }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\MainViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.dbs.entity.Blocklist\nimport com.machiav3lli.backup.PACKAGES_LIST_GLOBAL_ID\nprivate suspend fun insertIntoBlocklistDB(packageName: String) {\r\n        withContext(Dispatchers.IO) {\r\n            db.getBlocklistDao().insert(\r\n                Blocklist.Builder()\r\n                    .withId(0)\r\n                    .withBlocklistId(PACKAGES_LIST_GLOBAL_ID)", "choices": [{"text": "\r\n                   .withPackageName(packageName)\r\n                   .build()\r\n            );\r\n        }\r\n    }\r\n\r\n    private suspend fun deleteFromBlocklistDB(packageName: String) {\r\n        withContext(Dispatchers.IO) {\r\n            db.getBlocklistDao().delete(\r\n                Blocklist.Builder()\r\n                   .withId(0)\r\n                   .withBlocklistId(PACKAGES_LIST_GLOBAL_ID)\r\n                   .withPackageName(packageName)\r\n                   .build()\r\n            );\r"}], "metadata": {"task_id": "Neo-Backup/394", "ground_truth": "                    .withPackageName(packageName)\r\n                    .build()\r\n            )\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\MainViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.dbs.entity.Schedule\nprivate suspend fun add(withSpecial: Boolean) {\r\n        withContext(Dispatchers.IO) {\r\n            database.insert(\r\n                Schedule.Builder() // Set id to 0 to make the database generate a new id\r\n                    .withId(0)", "choices": [{"text": ".withSpecial(withSpecial)\r\n                   .build()\r\n            );\r\n        }\r\n    }\r\n    private suspend fun update(withSpecial: Boolean) {\r\n        withContext(Dispatchers.IO) {\r\n            database.update(\r\n                Schedule.Builder() // Set id to 0 to make the database generate a new id\r\n                   .withId(0)\r\n                   .withSpecial(withSpecial)\r\n                   .build()\r\n            );\r\n        }\r\n    }\r\n    private suspend fun delete(withSpecial: Boolean)"}], "metadata": {"task_id": "Neo-Backup/399", "ground_truth": "                    .withSpecial(withSpecial)\r\n                    .build()\r\n            )\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\SchedulerViewModel.kt"}}
{"prompt": "var altimeter IAltimeter\nvar gps IGPS\nvar barometer IBarometer\n override fun onPause() {", "choices": [{"text": "\n$(document).ready(function() {\n\t$(\"#gps\").click(function() {\n\t\t$(\"#gps\").toggle();\n\t});\n\n\t$(\"#altimeter\").click(function() {\n\t\t$(\"#altimeter\").toggle();\n\t});\n\n\t$(\"#barometer\").click(function() {\n\t\t$(\"#barometer\").toggle();\n\t});\n\n\t$(\"#gps\").click(function() {\n\t\t$(\"#gps\").toggle();\n\t});\n\n\t$(\""}], "metadata": {"task_id": "Trail-Sense/5", "ground_truth": "        super.onPause()\r\n        stopAltimeter()\r\n        updateTimer.stop()\r\n        overridePopulationRunner.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "var altimeterStarted\nvar altimeter IAltimeter\nvar forceCalibrationPref Preference\n private fun startAltimeter() {\r\n        if (altimeterStarted) {", "choices": [{"text": "\r\n        if (!altimeterStarted) {\r\n                altimeterStarted = true;\r\n                altimeter = new IAltimeter();\r\n                altimeter.start();\r\n        }\r\n}\r\n private fun stopAltimeter() {\r\n        if (altimeterStarted) {\r\n                altimeter.stop();\r\n                altimeterStarted = false;\r\n        }\r\n}\r\n private fun startCalibration() {\r\n        if (!forceCalibrationPref) {\r\n                forceCalibrationPref = true;\r\n                altimeter.startCal"}], "metadata": {"task_id": "Trail-Sense/6", "ground_truth": "            return\r\n        }\r\n        altimeterStarted = true\r\n        altimeter.start(this::updateAltitude)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateAltitudeOverride() {\r\n        inBackground {\r\n            onDefault {\r\n                overridePopulationRunner.replace {\r\n                    altimeter.read()", "choices": [{"text": "\r\n                };\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Trail-Sense/8", "ground_truth": "                    prefs.altitudeOverride = altimeter.altitude\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.observe\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        observe(weatherSubsystem.weatherChanged) {\r\n            inBackground {\r\n                runner.replace {\r\n                    history = weatherSubsystem.getHistory()\r\n                    uncalibratedHistory = weatherSubsystem.getRawHistory()\r\n                    onMain {\r\n                        updateChart()", "choices": [{"text": "\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        observe(weatherSubsystem.weatherChanged) {\r\n            inBackground {\r\n                runner.replace {\r\n                    history = weatherSubsystem.getHistory()\r\n                    uncalibratedHistory = weatherSubsystem.getRawHistory()\r\n                    onMain {\r\n                        updateChart()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        observe(weatherSubsystem.weatherChanged) {\r\n            inBackground {\r\n                runner.replace {\r\n"}], "metadata": {"task_id": "Trail-Sense/13", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateBarometerFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(R.xml.compass_calibration, rootKey)\r\n\r\n        setIconColor(Resources.androidTextColorSecondary(requireContext()))\r\n\r\n        prefs = UserPreferences(requireContext())\r\n        sensorService = SensorService(requireContext())\r\n        hasCompass = sensorService.hasCompass()", "choices": [{"text": "\r\n    }\r\n\r\n    private UserPreferences prefs;\r\n    private SensorService sensorService;\r\n    private boolean hasCompass;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        prefs = UserPreferences(requireContext());\r\n        sensorService = SensorService(requireContext());\r\n        hasCompass = sensorService.hasCompass();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.on"}], "metadata": {"task_id": "Trail-Sense/17", "ground_truth": "\r\n        compass = sensorService.getCompass()\r\n        gps = sensorService.getGPS()\r\n        bindPreferences()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()", "choices": [{"text": "{\r\n        super.onResume();\r\n        R.drawable.ic_launcher;\r\n        R.drawable.ic_launcher2;\r\n        R.drawable.ic_launcher3;\r\n        R.drawable.ic_launcher4;\r\n        R.drawable.ic_launcher5;\r\n        R.drawable.ic_launcher6;\r\n        R.drawable.ic_launcher7;\r\n        R.drawable.ic_launcher8;\r\n        R.drawable."}], "metadata": {"task_id": "Trail-Sense/18", "ground_truth": "        startCompass()\r\n        if (!gps.hasValidReading) {\r\n            gps.start(this::onLocationUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()", "choices": [{"text": "{\r\n        super.onResume();\r\n        R.drawable.ic_launcher;\r\n        R.drawable.ic_launcher2;\r\n        R.drawable.ic_launcher3;\r\n        R.drawable.ic_launcher4;\r\n        R.drawable.ic_launcher5;\r\n        R.drawable.ic_launcher6;\r\n        R.drawable.ic_launcher7;\r\n        R.drawable.ic_launcher8;\r\n        R.drawable."}], "metadata": {"task_id": "Trail-Sense/26", "ground_truth": "        if (gps.hasValidReading) {\r\n            update()\r\n        }\r\n        startGPS()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.overrides.CachedGPS\nimport com.kylecorry.trail_sense.shared.sensors.CustomGPS\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nprivate fun getRealGPS(): IGPS {\r\n        return when {\r\n            shouldUseRealGPS() -> {\r\n                CustomGPS(requireContext())\r\n            }\r\n            shouldUseCachedGPS() -> {\r\n                CachedGPS(requireContext())\r\n            }", "choices": [{"text": "\r\n        };\r\n    }\r\n    private fun getCachedGPS(): IGPS {\r\n        return when {\r\n            shouldUseRealGPS() -> {\r\n                CustomGPS(requireContext())\r\n            }\r\n            shouldUseCachedGPS() -> {\r\n                CachedGPS(requireContext())\r\n            }\r\n        };\r\n    }\r\n    private fun getGPS(): IGPS {\r\n        return when {\r\n            shouldUseRealGPS() -> {\r\n                CustomGPS(requireContext())\r\n            }\r\n            shouldUseCachedGPS"}], "metadata": {"task_id": "Trail-Sense/31", "ground_truth": "            else -> {\r\n                OverrideGPS(requireContext())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "val loopTime\nval tMin\nvar arrowColor Int\n private fun loop() {", "choices": [{"text": "\nval tMax\nvar arrowColor Int\n private fun loop() {\n  if (tMin < tMax) {\n    arrowColor = tMin;\n  } else {\n    arrowColor = tMax;\n  }\n }\n"}], "metadata": {"task_id": "Trail-Sense/37", "ground_truth": "        noFill()\r\n        stroke(Color.BLACK)\r\n        strokeWeight(dp(5f))\r\n        path(figure8Path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CompassCalibrationView.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.content.Context\nfun sized(\r\n            context: Context,\r\n            width: Int,\r\n            height: Int\r\n        ): CompassCalibrationView {\r\n            val view = CompassCalibrationView(context)\r\n            view.layoutParams = ViewGroup.LayoutParams(", "choices": [{"text": ")\r\n            view.layoutParams.width = width\r\n            view.layoutParams.height = height\r\n            return view\r\n        }\r\nfun centered(\r\n            context: Context,\r\n            width: Int,\r\n            height: Int\r\n        ): CompassCalibrationView {\r\n            val view = CompassCalibrationView(context)\r\n            view.layoutParams = ViewGroup.LayoutParams(\r\n                ViewGroup.LayoutParams.MATCH_PARENT,\r\n                ViewGroup.LayoutParams.MATCH_PARENT\r\n            )\r\n            view.layout"}], "metadata": {"task_id": "Trail-Sense/40", "ground_truth": "                width,\r\n                height\r\n            )\r\n            return view\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CompassCalibrationView.kt"}}
{"prompt": "import androidx.core.text.bold\nimport android.text.SpannableStringBuilder\nprivate fun SpannableStringBuilder.title(title: String) {\r\n        bold {", "choices": [{"text": "\r\n            return this;\r\n        }\r\n        return this.append(title);\r\n    }\r\n    static title(title: String) {\r\n        bold {\r\n            return this;\r\n        }\r\n        return this.append(title);\r\n    }\r\n    static title(title: String) {\r\n        bold {\r\n            return this;\r\n        }\r\n        return this.append(title);\r\n    }\r\n    static title(title: String) {\r\n        bold {\r\n            return this;\r\n"}], "metadata": {"task_id": "Trail-Sense/42", "ground_truth": "            scale(titleScale) {\r\n                appendLine(title)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\ImproveAccuracyAlerter.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.accelerometer.Accelerometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.Quality\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_ACCELEROMETER)) {\r\n            return listOf(DiagnosticCode.AccelerometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {", "choices": [{"text": "\r\n            return listOf(DiagnosticCode.AccelerometerPoor)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Medium) {\r\n            return listOf(DiagnosticCode.AccelerometerMedium)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.High) {\r\n            return listOf(DiagnosticCode.AccelerometerHigh)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Low) {\r\n            return listOf(Diagnostic"}], "metadata": {"task_id": "Trail-Sense/43", "ground_truth": "            return listOf(DiagnosticCode.AccelerometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AccelerometerDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.permissions.SpecialPermission\nimport com.kylecorry.andromeda.permissions.Permissions\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Permissions.hasPermission(context, SpecialPermission.SCHEDULE_EXACT_ALARMS)) {", "choices": [{"text": "\r\n                return super.scan();\r\n        }\r\n\r\n        List<DiagnosticCode> result = new ArrayList<>();\r\n\r\n        for (int i = 0; i < 4; i++) {\r\n                for (int j = 0; j < 4; j++) {\r\n                        for (int k = 0; k < 4; k++) {\r\n                                for (int l = 0; l < 4; l++) {\r\n                                        for (int m = 0; m < 4; m++) {\r\n                                                for (int n = 0; n"}], "metadata": {"task_id": "Trail-Sense/44", "ground_truth": "            return listOf(DiagnosticCode.ExactAlarmNoPermission)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AlarmDiagnostic.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.UserPreferences\noverride fun scan(): List<DiagnosticCode> {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.altimeterMode == UserPreferences.AltimeterMode.Override) {", "choices": [{"text": "\r\n            return super.scan();\r\n        }\r\n\r\n        if (prefs.altimeterMode == UserPreferences.AltimeterMode.Override) {\r\n            return super.scan();\r\n        }\r\n\r\n        if (prefs.altimeterMode == UserPreferences.AltimeterMode.Auto) {\r\n            return super.scan();\r\n        }\r\n\r\n        if (prefs.altimeterMode == UserPreferences.AltimeterMode.None) {\r\n            return super.scan();\r\n        }\r\n\r\n       "}], "metadata": {"task_id": "Trail-Sense/45", "ground_truth": "            return listOf(DiagnosticCode.AltitudeOverridden)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AltimeterDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasBarometer(context)) {\r\n            return listOf(DiagnosticCode.BarometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {", "choices": [{"text": "\r\n            return listOf(DiagnosticCode.BarometerPoor)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Normal) {\r\n            return listOf(DiagnosticCode.BarometerNormal)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.High) {\r\n            return listOf(DiagnosticCode.BarometerHigh)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Low) {\r\n            return listOf(DiagnosticCode.Bar"}], "metadata": {"task_id": "Trail-Sense/46", "ground_truth": "            return listOf(DiagnosticCode.BarometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\BarometerDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.permissions.Permissions\nimport android.content.pm.PackageManager\nimport android.annotation.SuppressLint\n @SuppressLint(\"UnsupportedChromeOsCameraSystemFeature\")\r\n    override fun scan(): List<DiagnosticCode> {\r\n        val issues = mutableListOf<DiagnosticCode>()\r\n\r\n        if (!Permissions.isCameraEnabled(context)) {\r\n            issues.add(DiagnosticCode.CameraNoPermission)\r\n        }\r\n\r\n        if (!context.packageManager.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {", "choices": [{"text": "\r\n            issues.add(DiagnosticCode.CameraNotSupported)\r\n        }\r\n\r\n        return issues\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/47", "ground_truth": "            issues.add(DiagnosticCode.CameraUnavailable)\r\n        }\r\n\r\n        return issues\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\CameraDiagnostic.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.SpecialPermission\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.os.Build\nprivate fun alarmAndReminderAction(): Action? {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S){\r\n            Action(getString(R.string.settings)) {\r\n                Permissions.requestPermission(context, SpecialPermission.SCHEDULE_EXACT_ALARMS)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/49", "ground_truth": "            }\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.annotation.IdRes\nprivate fun navigateAction(\r\n        @IdRes to: Int,\r\n        title: String = getString(R.string.settings)", "choices": [{"text": ") {\r\n    Intent intent = new Intent();\r\n    intent.putExtra(\"to\", to);\r\n    intent.putExtra(\"title\", title);\r\n    startActivity(intent);\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/53", "ground_truth": "    ): Action {\r\n        return Action(title) {\r\n            navigation.navigate(to)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.infrastructure.FlashlightSubsystem\noverride fun scan(): List<DiagnosticCode> {\r\n        val issues = mutableListOf<DiagnosticCode>()\r\n\r\n        if (!FlashlightSubsystem.getInstance(context).isAvailable()) {", "choices": [{"text": "\r\n                issues.add(DiagnosticCode.warning(\"Flashlight subsystem is not available\"))\r\n        }\r\n\r\n        return issues\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/56", "ground_truth": "            issues.add(DiagnosticCode.FlashlightUnavailable)\r\n        }\r\n\r\n        return issues\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\FlashlightDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.Sensors\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_LIGHT)) {", "choices": [{"text": "\r\n            return ImmutableList.of();\r\n        }\r\n\r\n        return ImmutableList.of();\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"Light Sensor\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescription() {\r\n        return \"Light Sensor\";\r\n    }\r\n\r\n    @Override\r\n    public String getCategory() {\r\n        return \"Sensor\";\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/57", "ground_truth": "            return listOf(DiagnosticCode.LightSensorUnavailable)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\LightSensorDiagnostic.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport com.kylecorry.andromeda.sense.magnetometer.Magnetometer\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!SensorService(context).hasCompass()) {\r\n            return listOf(DiagnosticCode.MagnetometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {", "choices": [{"text": "\r\n            return listOf(DiagnosticCode.MagnetometerPoor)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Medium) {\r\n            return listOf(DiagnosticCode.MagnetometerMedium)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.High) {\r\n            return listOf(DiagnosticCode.MagnetometerHigh)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Low) {\r\n            return listOf(Diagnostic"}], "metadata": {"task_id": "Trail-Sense/58", "ground_truth": "            return listOf(DiagnosticCode.MagnetometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\MagnetometerDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_STEP_COUNTER)) {\r\n            return listOf(DiagnosticCode.PedometerUnavailable)\r\n        }\r\n\r\n        if (!Permissions.canRecognizeActivity(context)) {", "choices": [{"text": "\r\n            return listOf(DiagnosticCode.PedometerUnavailable)\r\n        }\r\n\r\n        return listOf(DiagnosticCode.None)\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/60", "ground_truth": "            return listOf(DiagnosticCode.PedometerNoPermission)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\PedometerDiagnostic.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.location.GPS\nimport android.hardware.Sensor\nprivate fun updateGPS() {\r\n        sensorDetailsMap[\"gps\"] = SensorDetails(\r\n            getString(R.string.gps),\r\n            \"${formatService.formatLocation(gps.location)}\\n${gps.satellites ?: 0} ${getString(R.string.satellites)}\",", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/64", "ground_truth": "            getGPSStatus(),\r\n            getGPSColor(),\r\n            R.drawable.satellite\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.Quality\nprivate fun getGPSCacheQuality(): Quality {\r\n        return if (cachedGPS.location == Coordinate.zero) {", "choices": [{"text": " {\r\n                cachedGPS = new GPS();\r\n                cachedGPS.location = Coordinate.zero;\r\n                return cachedGPS;\r\n        } else {\r\n                return cachedGPS.quality;\r\n        }\r\n}\r\npublic class GPSCache {\r\n    private GPS cachedGPS;\r\n    public GPSCache() {\r\n        cachedGPS = getGPSCacheQuality();\r\n    }\r\n    public GPS getGPS() {\r\n        return cachedGPS;\r\n    }\r\n    public void setGPS(GPS gps) {\r\n        cachedGPS = gps"}], "metadata": {"task_id": "Trail-Sense/72", "ground_truth": "            Quality.Poor\r\n        } else {\r\n            Quality.Good\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.sensors.Quality\nprivate fun getAltimeterCacheQuality(): Quality {\r\n        return if (cachedAltimeter.altitude == 0f) {", "choices": [{"text": " {\r\n                cachedAltimeter.altitude = 0f;\r\n                return cachedAltimeter.altitude;\r\n        } else {\r\n                return cachedAltimeter.altitude;\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/74", "ground_truth": "            Quality.Poor\r\n        } else {\r\n            Quality.Good\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "import androidx.core.view.updateLayoutParams\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.ViewCompat\nimport androidx.constraintlayout.widget.ConstraintLayout.LayoutParams\nimport android.view.ViewGroup\nprivate fun bindLayoutInsets() {\r\n        ViewCompat.setOnApplyWindowInsetsListener(binding.root) { v, windowInsets ->\r\n            val insets = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.updateLayoutParams<ViewGroup.MarginLayoutParams> {\r\n                topMargin = insets.top", "choices": [{"text": "Margin,\r\n                bottomMargin = insets.bottomMargin,\r\n                leftMargin = insets.leftMargin,\r\n                rightMargin = insets.rightMargin\r\n            };\r\n        }};\r\n    }\r\n    @Override\r\n    protected void onAttachedToWindow() {\r\n        super.onAttachedToWindow();\r\n        bindLayoutInsets();\r\n    }\r\n    @Override\r\n    protected void onDetachedFromWindow() {\r\n        super.onDetachedFromWindow();\r\n        unbindLayoutInsets();\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/82", "ground_truth": "                bottomMargin = insets.bottom\r\n            }\r\n            WindowInsetsCompat.CONSUMED\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putInt(\"page\", binding.bottomNavigation.selectedItemId)\r\n        navController.currentBackStackEntry?.arguments?.let {\r\n            outState.putBundle(\"navigation_arguments\", it)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/88", "ground_truth": "        }\r\n        navController.currentDestination?.id?.let {\r\n            outState.putInt(\"navigation\", it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.astronomy.domain.AstronomyService\nimport com.kylecorry.trail_sense.shared.sensors.LocationSubsystem\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.ColorTheme\nimport android.graphics.Color\nprivate fun sunriseSunsetTheme(): ColorTheme {\r\n        val astronomyService = AstronomyService()\r\n        val location = LocationSubsystem.getInstance(this).location\r\n        if (location == Coordinate.zero) {\r\n            return ColorTheme.System\r\n        }\r\n        val isSunUp = astronomyService.isSunUp(location)\r\n        return if (isSunUp) {", "choices": [{"text": "\r\n            ColorTheme.Sunrise\r\n        } else {\r\n            ColorTheme.Sunset\r\n        }\r\n    }\r\n    private fun sunsetSunsetTheme(): ColorTheme {\r\n        val astronomyService = AstronomyService()\r\n        val location = LocationSubsystem.getInstance(this).location\r\n        if (location == Coordinate.zero) {\r\n            return ColorTheme.System\r\n        }\r\n        val isSunUp = astronomyService.isSunUp(location)\r\n        return if (isSunUp) {\r"}], "metadata": {"task_id": "Trail-Sense/89", "ground_truth": "            ColorTheme.Light\r\n        } else {\r\n            ColorTheme.Dark\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "private fun onVolumePressed(isVolumeUp: Boolean, isButtonPressed: Boolean): Boolean {\r\n        if (!shouldOverrideVolumePress()) {\r\n            return false\r\n        }\r\n\r\n        val action =\r\n            (if (isVolumeUp) getVolumeUpAction() else getVolumeDownAction()) ?: return false\r\n\r\n        if (isButtonPressed) {\r\n            action.onButtonPress()\r\n        } else {", "choices": [{"text": "\r\n            action.onVolumeUp()\r\n        }\r\n\r\n        return true\r\n}\r\n\r\nprivate fun onVolumeDown(isVolumeUp: Boolean, isButtonPressed: Boolean): Boolean {\r\n        if (!shouldOverrideVolumePress()) {\r\n            return false\r\n        }\r\n\r\n        val action =\r\n            (if (isVolumeUp) getVolumeUpAction() else getVolumeDownAction())?: return false\r\n\r\n        if (isButtonPressed) {\r\n            action.onButtonPress()\r\n        } else {\r"}], "metadata": {"task_id": "Trail-Sense/92", "ground_truth": "            action.onButtonRelease()\r\n        }\r\n\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.VolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.volumeactions.FlashlightToggleVolumeAction\nimport com.kylecorry.trail_sense.tools.clinometer.volumeactions.ClinometerLockVolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.ui.FragmentToolFlashlight\nimport com.kylecorry.trail_sense.tools.clinometer.ui.ClinometerFragment\nprivate fun getVolumeDownAction(): VolumeAction? {\r\n\r\n        val fragment = getFragment()\r\n        if (userPrefs.clinometer.lockWithVolumeButtons && fragment is ClinometerFragment) {\r\n            return ClinometerLockVolumeAction(fragment)\r\n        }\r\n\r\n\r\n        if (userPrefs.flashlight.toggleWithVolumeButtons) {\r\n            return FlashlightToggleVolumeAction(\r\n                this,\r\n                if (fragment is FragmentToolFlashlight) fragment else null", "choices": [{"text": "\r\n            )\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n\r\n    private fun getFragment(): FragmentToolFlashlight? {\r\n        if (userPrefs.clinometer.lockWithVolumeButtons && fragment is ClinometerFragment) {\r\n            return (ClinometerFragment) fragment\r\n        }\r\n\r\n        if (userPrefs.flashlight.toggleWithVolumeButtons) {\r\n            return (FragmentToolFlashlight) fragment\r\n        }\r\n\r\n        return null\r\n    }\r"}], "metadata": {"task_id": "Trail-Sense/94", "ground_truth": "            )\r\n        }\r\n\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.VolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.volumeactions.FlashlightToggleVolumeAction\nimport com.kylecorry.trail_sense.tools.clinometer.volumeactions.ClinometerLockVolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.ui.FragmentToolFlashlight\nimport com.kylecorry.trail_sense.tools.clinometer.ui.ClinometerFragment\nprivate fun getVolumeUpAction(): VolumeAction? {\r\n        val fragment = getFragment()\r\n        if (userPrefs.clinometer.lockWithVolumeButtons && fragment is ClinometerFragment) {\r\n            return ClinometerLockVolumeAction(fragment)\r\n        }\r\n\r\n        if (userPrefs.flashlight.toggleWithVolumeButtons) {\r\n            return FlashlightToggleVolumeAction(\r\n                this,\r\n                if (fragment is FragmentToolFlashlight) fragment else null", "choices": [{"text": "\r\n            )\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    private fun getVolumeDownAction(): VolumeAction? {\r\n        val fragment = getFragment()\r\n        if (userPrefs.clinometer.lockWithVolumeButtons && fragment is ClinometerFragment) {\r\n            return ClinometerLockVolumeAction(fragment)\r\n        }\r\n\r\n        if (userPrefs.flashlight.toggleWithVolumeButtons) {\r\n            return FlashlightToggleVolumeAction(\r\n                this,\r\n               "}], "metadata": {"task_id": "Trail-Sense/95", "ground_truth": "            )\r\n        }\r\n\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "var instance AppDatabase?\n fun close(){", "choices": [{"text": "\n\n def initialize(name)\n   @name = name\n end\n\n def name\n   @name\n end\n\n def db\n   @db ||= AppDatabase.new(name)\n end\n\n def db=(db)\n   @db = db\n end\n\n def connection\n   @connection ||= db.connection\n end\n\n def connection=(connection)\n   @connection = connection\n end\n\n def connection_pool\n   @connection_pool ||= connection.pool\n end\n\n def connection_pool=(pool)\n   @connection_pool = pool\n end\n\n def"}], "metadata": {"task_id": "Trail-Sense/98", "ground_truth": "            synchronized(this) {\r\n                instance?.close()\r\n                instance = null\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\AppDatabase.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.weather.infrastructure.persistence.WeatherRepo\nimport com.kylecorry.trail_sense.tools.lightning.infrastructure.persistence.LightningRepo\nimport com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudRepo\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.persistence.PathService\nimport android.content.Context\noverride suspend fun doWork(): Result = withContext(Dispatchers.IO) {\r\n\r\n        val cleanables: List<ICleanable> = listOf(\r\n            PathService.getInstance(context),\r\n            WeatherRepo.getInstance(context),\r\n            CloudRepo.getInstance(context),\r\n            LightningRepo.getInstance(context)\r\n        )\r\n\r\n        for (repo in cleanables) {\r\n            repo.clean()\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/100", "ground_truth": "\r\n        DeleteTempFilesCommand(context).execute()\r\n\r\n        Result.success()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\RepoCleanupWorker.kt"}}
{"prompt": "import com.kylecorry.trail_sense.databinding.ActivityOnboardingBinding\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityOnboardingBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        load(pageIdx)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/104", "ground_truth": "        binding.nextButton.setOnClickListener {\r\n            load(pageIdx + 1)\r\n        }\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\onboarding\\OnboardingActivity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport android.os.Bundle\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n        pageIdx = savedInstanceState.getInt(\"page\", 0)", "choices": [{"text": ";\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState);\r\n        outState.putInt(\"page\", pageIdx);\r\n}\r\noverride fun onActivityResult(requestCode: int, resultCode: int, data: Bundle) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (resultCode == Activity.RESULT_OK) {\r\n            pageIdx = data.getInt(\"page\", 0);\r\n        }\r\n}\r\noverride fun"}], "metadata": {"task_id": "Trail-Sense/106", "ground_truth": "        if (pageIdx >= pages.size || pageIdx < 0) {\r\n            pageIdx = 0\r\n        }\r\n        load(pageIdx)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\onboarding\\OnboardingActivity.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.system.Package\nfun enable() {\r\n        Package.setComponentEnabled(", "choices": [{"text": "(true);\r\n    }\r\nfun disable() {\r\n        Package.setComponentEnabled(false);\r\n    }"}], "metadata": {"task_id": "Trail-Sense/112", "ground_truth": "            context,\r\n            component,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\StartOnBootController.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.system.Package\nfun disable() {\r\n        Package.setComponentEnabled(", "choices": [{"text": "(false);\r\n    }\r\n\r\n    public static void enable() {\r\n        Package.setComponentEnabled(true);\r\n    }\r\n\r\n    public static boolean isComponentEnabled() {\r\n        return Package.isComponentEnabled();\r\n    }\r\n\r\n    public static void setComponentEnabled(boolean enabled) {\r\n        Package.setComponentEnabled(enabled);\r\n    }\r\n\r\n    public static boolean isComponentDisabled() {\r\n        return Package.isComponentDisabled();\r\n    }\r\n\r\n    public static void setComponent"}], "metadata": {"task_id": "Trail-Sense/113", "ground_truth": "            context,\r\n            component,\r\n            false\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\StartOnBootController.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nprivate fun startPedometer(context: Context) {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.pedometer.isEnabled) {", "choices": [{"text": "\r\n            prefs.pedometer.start();\r\n        }\r\n    }\r\n    private fun stopPedometer(context: Context) {\r\n        val prefs = UserPreferences(context);\r\n        if (prefs.pedometer.isEnabled) {\r\n            prefs.pedometer.stop();\r\n        }\r\n    }\r\n    private fun togglePedometer(context: Context) {\r\n        val prefs = UserPreferences(context);\r\n        if (prefs.pedometer.isEnabled) {\r\n            prefs"}], "metadata": {"task_id": "Trail-Sense/118", "ground_truth": "            StepCounterService.start(context)\r\n        } else {\r\n            StepCounterService.stop(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherUpdateScheduler\nimport com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherMonitorService\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nprivate fun startWeatherMonitoring(context: Context) {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.weather.shouldMonitorWeather) {\r\n            if (!WeatherMonitorService.isRunning) {\r\n                WeatherUpdateScheduler.start(context)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/119", "ground_truth": "            }\r\n        } else {\r\n            WeatherUpdateScheduler.stop(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.infrastructure.subsystem.BacktrackSubsystem\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.services.BacktrackService\nimport com.kylecorry.trail_sense.shared.FeatureState\nimport android.content.Context\nprivate suspend fun startBacktrack(context: Context) {\r\n        val backtrack = BacktrackSubsystem.getInstance(context)\r\n        if (backtrack.getState() == FeatureState.On) {\r\n            if (!BacktrackService.isRunning) {\r\n                backtrack.enable(false)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/120", "ground_truth": "            }\r\n        } else {\r\n            backtrack.disable()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "fun getInstance(): PreferenceMigrator {\r\n            return synchronized(staticLock) {\r\n                if (instance == null) {", "choices": [{"text": " (instance == null) {\r\n                    instance = new PreferenceMigrator();\r\n                }\r\n                return instance;\r\n            };\r\n        }\r\n\r\n        class PreferenceMigrator {\r\n            constructor() {\r\n                this.migrators = new Map();\r\n            }\r\n\r\n            add(key, value) {\r\n                this.migrators.set(key, value);\r\n            }\r\n\r\n            get(key) {\r\n                return this.migrators.get(key);\r\n            }\r\n"}], "metadata": {"task_id": "Trail-Sense/122", "ground_truth": "                    instance = PreferenceMigrator()\r\n                }\r\n                instance!!\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\migrations\\PreferenceMigrator.kt"}}
{"prompt": "import com.kylecorry.andromeda.fragments.AndromedaPreferenceFragment\nimport com.kylecorry.andromeda.core.tryOrNothing\nimport androidx.preference.Preference\nimport androidx.annotation.IdRes\nfun AndromedaPreferenceFragment.navigateOnClick(pref: Preference?, @IdRes action: Int) {\r\n    pref?.setOnPreferenceClickListener {\r\n        tryOrNothing {", "choices": [{"text": " {\r\n            switch (action) {\r\n                case android.R.id.home:\r\n                case android.R.id.home2:\r\n                case android.R.id.home3:\r\n                case android.R.id.home4:\r\n                case android.R.id.home5:\r\n                case android.R.id.home6:\r\n                case android.R.id.home7:\r\n                case android.R.id.home8:\r\n                case android.R.id.home9:\r\n               "}], "metadata": {"task_id": "Trail-Sense/125", "ground_truth": "            findNavController().navigateWithAnimation(action)\r\n        }\r\n        true\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\PreferenceFragmentExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\nfun plot(\r\n        data: List<Reading<Pressure>>,\r\n        raw: List<Reading<Pressure>>? = null", "choices": [{"text": ",\r\n        title: string,\r\n        x: number = 0,\r\n        y: number = 0,\r\n        width: number = 0,\r\n        height: number = 0,\r\n        color: string = \"rgba(0,0,0,0)\",\r\n        legend: boolean = false,\r\n        legendColor: string = \"rgba(0,0,0,0)\",\r\n        titleColor: string = \"rgba(0,0,0,0)\",\r\n        legendTitleColor: string = \"rgba(0,0,"}], "metadata": {"task_id": "Trail-Sense/127", "ground_truth": "    ) {\r\n        this.data = data\r\n        this.raw = raw\r\n        chart?.plot(data, raw)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\PressureChartPreference.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.thermometer.ThermometerSource\nprivate fun displayErrors(source: ThermometerSource) {\r\n        if (source == ThermometerSource.Historic && isLocationUnset()) {", "choices": [{"text": "\r\n            return;\r\n        }\r\n        if (source == ThermometerSource.Historic && isLocationUnset()) {\r\n            return;\r\n        }\r\n        if (source == ThermometerSource.Temperature && isLocationUnset()) {\r\n            return;\r\n        }\r\n        if (source == ThermometerSource.Temperature && isLocationUnset()) {\r\n            return;\r\n        }\r\n        if (source == ThermometerSource.Temperature && isLocationUnset()) {\r\n            return;\r\n       "}], "metadata": {"task_id": "Trail-Sense/141", "ground_truth": "            showLocationUnsetError()\r\n        } else {\r\n            hideLocationUnsetError()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\ThermometerSettingsFragment.kt"}}
{"prompt": "var hasRun\n override fun show() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/148", "ground_truth": "        if (!hasRun) {\r\n            loadingIndicator.show()\r\n            hasRun = true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\alerts\\ResettableLoadingIndicator.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.SolMath\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nfun getPixelLinear(\r\n        bearing: Float,\r\n        azimuth: Float,\r\n        altitude: Float,\r\n        inclination: Float,\r\n        size: Size,\r\n        fov: Size\r\n    ): PixelCoordinate {\r\n\r\n        val newBearing = SolMath.deltaAngle(azimuth, bearing)\r\n        val newAltitude = altitude - inclination\r\n\r\n        return synchronized(rectLock) {\r\n            rect.right = size.width\r\n            rect.bottom = size.height\r\n            linear.getPixel(\r\n                newBearing,\r\n                newAltitude,\r\n                rect,", "choices": [{"text": "\r\n                fov\r\n            )\r\n        }\r\n    }\r\n\r\n    fun getPixelRadial(\r\n        bearing: Float,\r\n        azimuth: Float,\r\n        altitude: Float,\r\n        inclination: Float,\r\n        size: Size,\r\n        fov: Size\r\n    ): PixelCoordinate {\r\n\r\n        val newBearing = SolMath.deltaAngle(azimuth, bearing)\r\n        val newAltitude = altitude - inclination\r\n\r\n        return synchronized(rectLock) {\r\n            rect"}], "metadata": {"task_id": "Trail-Sense/151", "ground_truth": "                fov,\r\n                null\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.domain.mapper.CameraAnglePixelMapper\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.opengl.Matrix\nimport android.graphics.RectF\nfun getPixel(\r\n        bearing: Float,\r\n        elevation: Float,\r\n        distance: Float,\r\n        rotationMatrix: FloatArray,\r\n        rect: RectF,\r\n        fov: Size,\r\n        mapper: CameraAnglePixelMapper\r\n    ): PixelCoordinate {\r\n        val d = distance.coerceIn(minDistance, maxDistance)\r\n\r\n        return getPixel(\r\n            toEastNorthUp(bearing, elevation, d),\r\n            rotationMatrix,", "choices": [{"text": "\r\n            rect,\r\n            fov,\r\n            mapper\r\n        )\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/152", "ground_truth": "            rect,\r\n            fov,\r\n            mapper\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.domain.mapper.CameraAnglePixelMapper\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.Vector3\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.opengl.Matrix\nimport android.graphics.RectF\nfun getPixel(\r\n        enuCoordinate: Vector3,\r\n        rotationMatrix: FloatArray,\r\n        rect: RectF,\r\n        fov: Size,\r\n        mapper: CameraAnglePixelMapper\r\n    ): PixelCoordinate {\r\n        val world = enuToAr(enuCoordinate, rotationMatrix)\r\n\r\n        return mapper.getPixel(", "choices": [{"text": "world, rect, fov)\r\n    }\r\n\r\nfun enuToAr(\r\n        enuCoordinate: Coordinate,\r\n        rotationMatrix: FloatArray\r\n    ): FloatArray {\r\n        val world = new FloatArray(4)\r\n\r\n        world[0] = rotationMatrix[0]\r\n        world[1] = rotationMatrix[1]\r\n        world[2] = rotationMatrix[2]\r\n        world[3] = rotationMatrix[3]\r\n\r\n        return world\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/153", "ground_truth": "            world,\r\n            rect,\r\n            fov\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.orientation.OrientationUtils\nimport com.kylecorry.andromeda.sense.orientation.IOrientationSensor\nimport android.opengl.Matrix\nfun getOrientation(\r\n        orientationSensor: IOrientationSensor,\r\n        rotationMatrix: FloatArray,\r\n        orientation: FloatArray,\r\n        declination: Float? = null\r\n    ) {\r\n        OrientationUtils.getAROrientation(\r\n            orientationSensor,", "choices": [{"text": "\r\n            rotationMatrix,\r\n            orientation,\r\n            declination\r\n        );\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/154", "ground_truth": "            rotationMatrix,\r\n            orientation,\r\n            declination\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {", "choices": [{"text": "View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util."}], "metadata": {"task_id": "Trail-Sense/158", "ground_truth": "        if (isBound) {\r\n            binding.camera.stop()\r\n        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\PhotoImportBottomSheetFragment.kt"}}
{"prompt": "import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent?): Boolean {\r\n        if (event?.action == MotionEvent.ACTION_DOWN){\r\n            isShutterPressed = true\r\n        }\r\n\r\n        if (event?.action == MotionEvent.ACTION_UP){\r\n            isShutterPressed = false\r\n        }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/162", "ground_truth": "\r\n        invalidate()\r\n\r\n        return super.onTouchEvent(event)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\ShutterButton.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {\r\n        if (isBound) {", "choices": [{"text": "\r\n                unbinder.unbind();\r\n                unbinder = null;\r\n                isBound = false;\r\n        }\r\n        super.onDestroyView();\r\n    }\r\n\r\n    @Override\r\n    protected void onAttachedToWindow() {\r\n        super.onAttachedToWindow();\r\n        isBound = true;\r\n    }\r\n\r\n    @Override\r\n    protected void onDetachedFromWindow() {\r\n        super.onDetachedFromWindow();\r\n        isBound = false;\r\n    }\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/165", "ground_truth": "            binding.camera.stop()\r\n        }\r\n        fovRunner.cancel()\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\SightingCompassBottomSheetFragment.kt"}}
{"prompt": "import kotlin.math.min\nimport kotlin.math.max\nimport androidx.annotation.ColorInt\nimport android.graphics.Color\nfun saturation(@ColorInt value: Int): Float {\r\n        val blue = Color.blue(value)\r\n        val red = Color.red(value)\r\n        val green = Color.green(value)\r\n\r\n        val min = min(red, min(blue, green))\r\n        val max = max(red, max(blue, green))\r\n\r\n        if (min == 0 && max == 0) {", "choices": [{"text": "\r\n            return 0\r\n        else if (min > max) {\r\n            return max\r\n        else if (min < max) {\r\n            return min\r\n        }\r\n        else {\r\n            return 0\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/172", "ground_truth": "            return 0f\r\n        }\r\n\r\n        return 1 - min / max.toFloat().coerceAtLeast(1f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\colors\\ColorUtils.kt"}}
{"prompt": "import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun average(@ColorInt value: Int): Float {\r\n        val blue = Color.blue(value)", "choices": [{"text": "\r\n        val red = Color.red(value)\r\n        val green = Color.green(value)\r\n        val yellow = Color.yellow(value)\r\n        val magenta = Color.magenta(value)\r\n        val cyan = Color.cyan(value)\r\n        val white = Color.white(value)\r\n        return blue + red + green + yellow + magenta + cyan + white\r\n}"}], "metadata": {"task_id": "Trail-Sense/173", "ground_truth": "        val red = Color.red(value)\r\n        val green = Color.green(value)\r\n\r\n        return (red + blue + green) / 3f\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\colors\\ColorUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.Alerts\nimport com.google.android.material.snackbar.Snackbar\nimport androidx.fragment.app.Fragment\nimport android.view.View\nfun snackbar(\r\n        fragment: Fragment,\r\n        text: String,\r\n        duration: Int = Snackbar.LENGTH_SHORT,\r\n        action: String? = null,\r\n        onAction: () -> Unit = {}\r\n    ): Snackbar {\r\n\r\n        val playBar =\r\n            fragment.view?.findViewWithTag<View>(fragment.getString(R.string.tag_play_bar))\r\n\r\n        val view = playBar ?: fragment.requireActivity().findViewById(R.id.bottom_navigation)\r\n\r\n        return Alerts.snackbar(\r\n            fragment,\r\n            view,\r\n            text,", "choices": [{"text": "\r\n            duration,\r\n            action,\r\n            onAction\r\n        )\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/180", "ground_truth": "            duration,\r\n            action,\r\n            onAction\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestCamera\nimport com.kylecorry.trail_sense.shared.camera.PhotoImportBottomSheetFragment\nimport com.kylecorry.andromeda.fragments.AndromedaFragment\nimport androidx.fragment.app.Fragment\nimport android.util.Size\nimport android.net.Uri\nimport android.content.Context\nprivate fun takePhoto(\r\n        fragment: AndromedaFragment,\r\n        size: Size? = null,\r\n        onCapture: (uri: Uri?) -> Unit\r\n    ) {\r\n        fragment.requestCamera {\r\n            if (!it) {\r\n                onCapture(null)\r\n                return@requestCamera\r\n            }\r\n\r\n            val prefs = UserPreferences(fragment.requireContext()).camera\r\n\r\n            val sheet = PhotoImportBottomSheetFragment(size, prefs.useZeroShutterLag) { uri ->\r\n                onCapture(uri)", "choices": [{"text": "\r\n            }\r\n\r\n            return@requestCamera(sheet)\r\n        }\r\n    }\r\n\r\n    public static fun takePhoto(\r\n        fragment: AndromedaFragment,\r\n        onCapture: (uri: Uri?) -> Unit\r\n    ) {\r\n        return takePhoto(fragment, null, onCapture)\r\n    }\r\n\r\n    public static fun takePhoto(\r\n        fragment: AndromedaFragment,\r\n        size: Size? = null,\r\n        onCapture: (uri: Uri?) -> Unit\r"}], "metadata": {"task_id": "Trail-Sense/184", "ground_truth": "            }\r\n\r\n            sheet.show(fragment)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import java.time.LocalDateTime\nimport com.kylecorry.andromeda.pickers.Pickers\nimport android.content.Context\nfun pickDatetime(\r\n        context: Context,\r\n        use24Hours: Boolean,\r\n        default: LocalDateTime = LocalDateTime.now(),\r\n        onDatetimePick: (value: LocalDateTime?) -> Unit\r\n    ) {\r\n        Pickers.date(context, default.toLocalDate()) { date ->\r\n            if (date != null) {\r\n                Pickers.time(context, use24Hours, default.toLocalTime()) { time ->\r\n                    if (time != null) {\r\n                        onDatetimePick(LocalDateTime.of(date, time))\r\n                    } else {\r\n                        onDatetimePick(null)\r\n                    }\r\n                }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/185", "ground_truth": "            } else {\r\n                onDatetimePick(null)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.views.list.AndromedaListView\nimport com.kylecorry.andromeda.fragments.show\nimport com.kylecorry.andromeda.alerts.Alerts\nimport android.widget.TextView\nimport android.view.View\nimport android.content.Context\nfun showList(\r\n        context: Context,\r\n        title: String,\r\n        listItems: List<ListItem>,\r\n        emptyText: String? = null\r\n    ) {\r\n        val view = View.inflate(context, R.layout.view_list_dialog, null)\r\n        val list = view.findViewById<AndromedaListView>(R.id.list)\r\n        val empty = view.findViewById<TextView>(R.id.empty_text)\r\n\r\n        if (emptyText != null) {\r\n            empty.text = emptyText\r\n        }\r\n\r\n        list.setItems(listItems)\r\n\r\n        Alerts.dialog(\r\n            context,", "choices": [{"text": " title,\r\n            view\r\n        )\r\n\r\n        return view\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/186", "ground_truth": "            title,\r\n            contentView = view,\r\n            cancelText = null\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.ui.Colors\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.content.Context\nfun Resources.getCardinalDirectionColor(context: Context): Int {\r\n        val prefs = UserPreferences(context)\r\n        return if (prefs.useDynamicColors && prefs.useDynamicColorsOnCompass) {", "choices": [{"text": "\r\n            R.color.cardinal_direction_on_compass;\r\n        } else if (prefs.useDynamicColors) {\r\n            R.color.cardinal_direction_off_compass;\r\n        } else {\r\n            R.color.cardinal_direction_off;\r\n        }\r\n    }\r\n\r\n    public static class UserPreferences {\r\n        public static final boolean useDynamicColors = true;\r\n        public static final boolean useDynamicColorsOnCompass = true;\r\n        public static final boolean useDynamicColorsOff"}], "metadata": {"task_id": "Trail-Sense/187", "ground_truth": "            getPrimaryColor(context)\r\n        } else {\r\n            AppColor.Orange.color\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.ui.Colors\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.content.Context\nfun Resources.getPrimaryMarkerColor(context: Context): Int {\r\n        val prefs = UserPreferences(context)\r\n        return if (prefs.useDynamicColors && prefs.useDynamicColorsOnCompass) {", "choices": [{"text": "\r\n            return Colors.getPrimaryMarkerColor(context);\r\n        } else if (prefs.useDynamicColors) {\r\n            return Colors.getPrimaryMarkerColor(context);\r\n        } else {\r\n            return Colors.getPrimaryMarkerColor(context);\r\n        }\r\n    }\r\n\r\n    public static class UserPreferences {\r\n        public static final String useDynamicColors = \"useDynamicColors\";\r\n        public static final String useDynamicColorsOnCompass = \"useDynamicColorsOnCompass\";\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/188", "ground_truth": "            getPrimaryColor(context)\r\n        } else {\r\n            AppColor.Orange.color\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "fun hash(vararg values: Any?): Int {\r\n        var hash = 0", "choices": [{"text": ";\r\n\r\n        for (var i = 0; i < values.length; i++) {\r\n            hash = hash * 31 + values[i];\r\n        }\r\n\r\n        return hash;\r\n    }\r\n}\r\n\r\nmodule.exports = hash;\r\n"}], "metadata": {"task_id": "Trail-Sense/200", "ground_truth": "        for (value in values) {\r\n            hash = hash * 31 + (value?.hashCode() ?: 0)\r\n        }\r\n        return hash\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\data\\HashUtils.kt"}}
{"prompt": "override fun execute() {\r\n        ifDebug {", "choices": [{"text": "(arguments.length > 0) {\r\n\r\nif(arguments[0] instanceof Array) {\r\n\r\nfor(var i = 0; i < arguments[0].length; i++) {\r\n\r\nif(arguments[0][i] instanceof Array) {\r\n\r\nfor(var j = 0; j < arguments[0][i].length; j++) {\r\n\r\nif(arguments[0][i][j] instanceof Array) {\r\n\r\nfor(var k = 0; k < arguments[0][i][j].length; k++) {"}], "metadata": {"task_id": "Trail-Sense/203", "ground_truth": "            tryOrLog {\r\n                executeDebug()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\DebugCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.settings.infrastructure.IDeclinationPreferences\nimport com.kylecorry.andromeda.sense.location.IGPS\nfun getDeclinationStrategy(prefs: IDeclinationPreferences, gps: IGPS? = null): IDeclinationStrategy {\r\n        return if (gps == null || !prefs.useAutoDeclination) {", "choices": [{"text": "\r\n                new AutoDeclinationStrategy(prefs, gps);\r\n        } else {\r\n                return new AutoDeclinationStrategy(prefs, gps);\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/213", "ground_truth": "            OverrideDeclinationStrategy(prefs)\r\n        } else {\r\n            GPSDeclinationStrategy(gps)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\declination\\DeclinationFactory.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun Distance.toRelativeDistance(threshold: Float = 1000f): Distance {\r\n    val metric = units.isMetric()\r\n    val baseDistance =\r\n        if (metric) convertTo(DistanceUnits.Meters) else convertTo(DistanceUnits.Feet)\r\n    val newUnits = if (baseDistance.distance >= threshold) {\r\n        if (metric) DistanceUnits.Kilometers else DistanceUnits.Miles", "choices": [{"text": ";\r\n    } else {\r\n        if (metric) DistanceUnits.Kilometers else DistanceUnits.Miles;\r\n    }\r\n    return baseDistance.convertTo(newUnits);\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/215", "ground_truth": "    } else {\r\n        if (metric) DistanceUnits.Meters else DistanceUnits.Feet\r\n    }\r\n    return convertTo(newUnits)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\DistanceExtensions.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun DistanceUnits.isMetric(): Boolean {\r\n    return listOf(", "choices": [{"text": ";\r\n}\r\n\r\nfunction listOf(): Array<Number> {\r\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54"}], "metadata": {"task_id": "Trail-Sense/216", "ground_truth": "        DistanceUnits.Kilometers,\r\n        DistanceUnits.Meters,\r\n        DistanceUnits.Centimeters\r\n    ).contains(this)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\DistanceExtensions.kt"}}
{"prompt": "fun probability(chance: Float): Probability {\r\n    return when {\r\n        chance < 0.05f -> {\r\n            Probability.Never\r\n        }\r\n        chance < 0.25f -> {\r\n            Probability.Low\r\n        }\r\n        chance < 0.75f -> {\r\n            Probability.Moderate\r\n        }\r\n        chance < 0.95f -> {\r\n            Probability.High\r\n        }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/218", "ground_truth": "        else -> {\r\n            Probability.Always\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\domain\\Probability.kt"}}
{"prompt": "import com.kylecorry.andromeda.alerts.Alerts\nimport android.content.Context\ninline fun Alerts.withCancelableLoading(\r\n    context: Context,\r\n    title: String,\r\n    cancelText: CharSequence = context.getString(android.R.string.cancel),\r\n    noinline onCancel: () -> Unit,\r\n    action: () -> Unit\r\n) {\r\n    val loadingAlert = cancelableLoading(context, title, cancelText, onCancel)\r\n    try {", "choices": [{"text": "\r\n        action.call()\r\n    } finally {\r\n        loadingAlert.dismiss()\r\n    }\r\n    return loadingAlert\r\n}\r\ninline fun Alerts.withCancelableLoading(\r\n    context: Context,\r\n    title: String,\r\n    cancelText: CharSequence = context.getString(android.R.string.cancel),\r\n    noinline onCancel: () -> Unit,\r\n    action: () -> Unit\r\n) {\r\n    val loadingAlert = cancelableLoading(context, title, cancelText, onCancel)"}], "metadata": {"task_id": "Trail-Sense/219", "ground_truth": "        action()\r\n    } finally {\r\n        loadingAlert.dismiss()\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\AndromedaExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.receivers.ServiceRestartAlerter\nimport android.util.Log\nimport android.os.Build\nimport android.content.Context\nimport android.app.ForegroundServiceStartNotAllowedException\ninline fun tryStartForegroundOrNotify(context: Context, action: () -> Unit) {\r\n    try {\r\n        action()\r\n    } catch (e: Exception) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && e is ForegroundServiceStartNotAllowedException) {\r\n            ServiceRestartAlerter(context.applicationContext).alert()\r\n            Log.d(\"tryStartForegroundOrNotify\", \"Cannot start service\")", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/221", "ground_truth": "        } else {\r\n            throw e\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\AndromedaExtensions.kt"}}
{"prompt": "import com.kylecorry.andromeda.preferences.IPreferences\nfun IPreferences.putOrRemoveFloat(key: String, value: Float?) {\r\n    if (value == null) {", "choices": [{"text": "\r\n        return;\r\n    }\r\n    if (value.equals(Float.NaN)) {\r\n        return;\r\n    }\r\n    if (value.equals(Float.POSITIVE_INFINITY)) {\r\n        return;\r\n    }\r\n    if (value.equals(Float.NEGATIVE_INFINITY)) {\r\n        return;\r\n    }\r\n    if (value.equals(Float.POSITIVE_INFINITY)) {\r\n        return;\r\n    }\r\n    if (value.equals(Float.NEGATIVE_INFINITY)) {\r"}], "metadata": {"task_id": "Trail-Sense/223", "ground_truth": "        remove(key)\r\n    } else {\r\n        putFloat(key, value)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\PreferenceExtensions.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.preferences.IPreferences\nfun IPreferences.putOrRemoveCoordinate(key: String, value: Coordinate?) {\r\n    if (value == null) {", "choices": [{"text": "\r\n        return;\r\n    }\r\n    if (value instanceof Coordinate) {\r\n        return;\r\n    }\r\n    if (value instanceof String) {\r\n        return;\r\n    }\r\n    if (value instanceof Integer) {\r\n        return;\r\n    }\r\n    if (value instanceof Float) {\r\n        return;\r\n    }\r\n    if (value instanceof Double) {\r\n        return;\r\n    }\r\n    if (value instanceof Boolean) {\r\n        return;\r\n    }\r\n    if ("}], "metadata": {"task_id": "Trail-Sense/224", "ground_truth": "        remove(key)\r\n    } else {\r\n        putCoordinate(key, value)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\PreferenceExtensions.kt"}}
{"prompt": "import com.kylecorry.sol.science.geology.Geofence\nimport com.kylecorry.sol.science.geology.CoordinateBounds\nfun CoordinateBounds.Companion.from(geofences: List<Geofence>): CoordinateBounds {\r\n    val bounds = geofences.map { from(it) }\r\n    val corners = bounds.flatMap {\r\n        listOf(\r\n            it.northEast,\r\n            it.northWest,\r\n            it.southEast,\r\n            it.southWest", "choices": [{"text": ",\r\n            it.eastEast,\r\n            it.eastWest,\r\n            it.westEast,\r\n            it.westWest\r\n        )\r\n    }\r\n    return new CoordinateBounds(corners)\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/225", "ground_truth": "        )\r\n    }\r\n\r\n    return from(corners)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\SolExtensions.kt"}}
{"prompt": "import com.kylecorry.sol.math.SolMath.roundNearest\nfun getValuesBetween(min: Float, max: Float, divisor: Float): List<Float> {\r\n    val values = mutableListOf<Float>()\r\n    val start = min.roundNearest(divisor)\r\n    var i = start\r\n    while (i <= max) {\r\n        if (i >= min) {\r\n            values.add(i)", "choices": [{"text": "\r\n            start = i.roundNearest(divisor)\r\n            i = start\r\n        } else {\r\n            values.add(i)\r\n            i = i.roundNearest(divisor)\r\n        }\r\n    }\r\n    return values\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/226", "ground_truth": "        }\r\n        i += divisor\r\n    }\r\n    return values\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\SolExtensions.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.topics.generic.ITopic\nfun <T: Any> ITopic<T>.getOrNull(): T? {\r\n    val current = value\r\n    return if (current.isPresent) {", "choices": [{"text": "\r\n    } else {\r\n        return null\r\n    }\r\n}\r\nfun <T: Any> ITopic<T>.get(): T {\r\n    val current = value\r\n    return if (current.isPresent) {\r\n        return current.get()\r\n    } else {\r\n        return null\r\n    }\r\n}\r\nfun <T: Any> ITopic<T>.isPresent(): boolean {\r\n    val current = value\r\n    return if (current.isPresent) {\r\n        return true\r\n    } else {"}], "metadata": {"task_id": "Trail-Sense/228", "ground_truth": "        current.get()\r\n    } else {\r\n        null\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\TopicExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Rectangle\nimport android.view.View\nfun View.getViewBounds(rotation: Float = 0f): Rectangle {\r\n    val rectangle = Rectangle(\r\n        0f,\r\n        height.toFloat(),\r\n        width.toFloat(),\r\n        0f,\r\n    )\r\n\r\n    if (rotation != 0f) {", "choices": [{"text": "\r\n        rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Trail-Sense/233", "ground_truth": "        return rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Rectangle\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun ICanvasDrawer.getBounds(rotation: Float = 0f): Rectangle {\r\n    val rectangle = Rectangle(\r\n        0f,\r\n        canvas.height.toFloat(),\r\n        canvas.width.toFloat(),\r\n        0f,\r\n    )\r\n\r\n    if (rotation != 0f) {", "choices": [{"text": "\r\n        rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/234", "ground_truth": "        return rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun ICanvasDrawer.text(str: String, x: Float, y: Float, lineSpacing: Float) {\r\n    val lines = str.split(\"\\n\")\r\n    var lastHeight = 0f\r\n    var lastY = y\r\n    lines.forEachIndexed { index, line ->\r\n        val newY = lastY + lastHeight + if (index == 0) 0f else lineSpacing", "choices": [{"text": "\r\n        lastHeight = newY\r\n        lastY = newY\r\n        if (index == lines.length - 1) {\r\n            val newY = lastY + lastHeight + if (index == 0) 0f else lineSpacing\r\n            lastHeight = newY\r\n            lastY = newY\r\n        } else {\r\n            val newY = lastY + lastHeight + if (index == lines.length - 1) 0f else lineSpacing\r\n            lastHeight = newY\r\n            lastY = newY\r\n        }\r\n        val"}], "metadata": {"task_id": "Trail-Sense/236", "ground_truth": "        lastY = newY\r\n        lastHeight = textHeight(line)\r\n        text(line, x, newY)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.tryOrDefault\nfun Float.safeRoundToInt(default: Int = 0): Int {\r\n    return tryOrDefault(default) {\r\n        if (isNaN() || isInfinite()) {\r\n            default", "choices": [{"text": ":\r\n            return default;\r\n        }\r\n        return Math.round(this);\r\n    }\r\n}\r\n\r\nfun Float.safeRoundTo(default: Int = 0): Int {\r\n    return tryOrDefault(default) {\r\n        if (isNaN() || isInfinite()) {\r\n            default:\r\n            return default;\r\n        }\r\n        return Math.round(this);\r\n    }\r\n}\r\n\r\nfun Float.safeRoundTo(default: Int = 0): Int {\r\n    return tryOrDefault("}], "metadata": {"task_id": "Trail-Sense/241", "ground_truth": "        } else {\r\n            roundToInt()\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.tryOrDefault\nfun Double.safeRoundToInt(default: Int = 0): Int {\r\n    return tryOrDefault(default) {\r\n        if (isNaN() || isInfinite()) {\r\n            default", "choices": [{"text": ":\r\n            return default;\r\n        }\r\n        return Math.round(this);\r\n    }\r\n}\r\n\r\nfun Int.safeRoundToInt(default: Int = 0): Int {\r\n    return tryOrDefault(default) {\r\n        if (isNaN() || isInfinite()) {\r\n            default:\r\n            return default;\r\n        }\r\n        return Math.round(this);\r\n    }\r\n}\r\n\r\nfun Float.safeRoundToFloat(default: Float = 0): Float {\r\n    return tryOrDefault"}], "metadata": {"task_id": "Trail-Sense/242", "ground_truth": "        } else {\r\n            roundToInt()\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import java.time\nimport com.kylecorry.sol.units\nfun sortDistanceUnits(\r\n        units: List<DistanceUnits>,\r\n        metric: Boolean = prefs.baseDistanceUnits == DistanceUnits.Meters\r\n    ): List<DistanceUnits> {\r\n        // TODO: Secondary sort by size\r\n        val metricUnits =\r\n            listOf(DistanceUnits.Centimeters, DistanceUnits.Meters, DistanceUnits.Kilometers)\r\n        return units.sortedBy {\r\n            if (metric) {\r\n                if (metricUnits.contains(it)) 0 else 1", "choices": [{"text": ": -1\r\n            } else {\r\n                if (units.contains(it)) 0 else 1\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/264", "ground_truth": "            } else {\r\n                if (metricUnits.contains(it)) 1 else 0\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "import com.kylecorry.sol.units\nfun sortWeightUnits(\r\n        units: List<WeightUnits>,\r\n        metric: Boolean = prefs.weightUnits == WeightUnits.Kilograms\r\n    ): List<WeightUnits> {\r\n        // TODO: Secondary sort by size\r\n        val metricUnits =\r\n            listOf(WeightUnits.Grams, WeightUnits.Kilograms)\r\n        return units.sortedBy {\r\n            if (metric) {\r\n                if (metricUnits.contains(it)) 0 else 1", "choices": [{"text": " {\r\n                    return -1\r\n                }\r\n            } else {\r\n                if (units.contains(it)) 0 else 1\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/265", "ground_truth": "            } else {\r\n                if (metricUnits.contains(it)) 1 else 0\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.annotation.DrawableRes\n @DrawableRes\r\n    fun getCompassReferenceIcon(isTrueNorth: Boolean = prefs.compass.useTrueNorth): Int {\r\n        return if (isTrueNorth) {", "choices": [{"text": " {\r\n            return R.drawable.ic_compass_white_24dp;\r\n        } else {\r\n            return R.drawable.ic_compass_white_24dp;\r\n        }\r\n    }\r\n    fun getCompassReferenceIcon(isTrueEast: Boolean = prefs.compass.useTrueEast): Int {\r\n        return if (isTrueEast) {\r\n            return R.drawable.ic_compass_white_24dp;\r\n        } else {\r\n            return R.drawable."}], "metadata": {"task_id": "Trail-Sense/272", "ground_truth": "            R.drawable.ic_star\r\n        } else {\r\n            R.drawable.ic_tool_metal_detector\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nfun refresh(resetScroll: Boolean = false) {\r\n        scope.launch {\r\n            runner.replace {\r\n                val items = onIO {\r\n                    augment(loader.load(query, root?.id))\r\n                }\r\n                onMain {", "choices": [{"text": " {\r\n                    augment(items)\r\n                }\r\n            }\r\n        }\r\n        scope.launch {\r\n            runner.replace {\r\n                val items = onIO {\r\n                    loader.load(query, root?.id)\r\n                }\r\n                onMain {\r\n                    augment(items)\r\n                }\r\n            }\r\n        }\r\n        scope.launch {\r\n            runner.replace {\r\n                val items = onIO {\r\n                    loader.load(query, root?.id)\r\n                }\r"}], "metadata": {"task_id": "Trail-Sense/275", "ground_truth": "                    onChange(root, items, resetScroll)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "val root T?\nvar _root T?\nvar query String?\n fun clear(resetRoot: Boolean = true) {", "choices": [{"text": ") {\n  if (resetRoot) {\n    _root = null;\n  }\n  query = null;\n  root = null;\n  _root = null;\n  return this;\n}\n\nval _root T?\nvar root T?\nvar _root T?\nvar query String?\n fun clear(resetRoot: Boolean = true) {\n  if (resetRoot) {\n    _root = null;\n  }\n  query = null;\n  root = null;\n  _root = null;\n  return this;\n}\n\nval"}], "metadata": {"task_id": "Trail-Sense/277", "ground_truth": "        if (resetRoot) {\r\n            _root = null\r\n        }\r\n        onChange(root, emptyList(), true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "val runner\nvar query String?\nvar onChange\n private fun loadGroup(id: Long) {", "choices": [{"text": "\n function loadGroup(id: Long) {\n  return new Promise((resolve, reject) => {\n    query = id;\n    onChange = () => {\n      query = null;\n      onChange = () => {\n        query = null;\n        onChange = () => {\n          query = null;\n          onChange = () => {\n            query = null;\n            onChange = () => {\n              query = null;\n              onChange = () => {\n                query = null;\n                onChange = () => {\n                  query = null;\n                  onChange = () => {\n                   "}], "metadata": {"task_id": "Trail-Sense/278", "ground_truth": "        scope.launch {\r\n            _root = onIO { loader.getGroup(id) }\r\n            refresh(true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "fun open(groupId: Long?) {\r\n        if (groupId == null) {\r\n            _root = null", "choices": [{"text": ";\r\n            return;\r\n        }\r\n\r\n        if (_root == null) {\r\n            _root = {};\r\n        }\r\n\r\n        if (_root[groupId] == null) {\r\n            _root[groupId] = [];\r\n        }\r\n\r\n        _root[groupId].push(_root);\r\n    }\r\n\r\n    function close(groupId: Long?) {\r\n        if (groupId == null) {\r\n            _root = null;\r\n            return;\r\n        }\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/279", "ground_truth": "            refresh(true)\r\n        } else {\r\n            loadGroup(groupId)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "val root T?\nvar _root T?\nvar query String?\n fun up(): Boolean {\r\n        if (_root == null) {\r\n            return false\r\n        }\r\n        val parent = _root?.parentId\r\n        if (parent == null) {\r\n            _root = null\r\n            refresh(true)", "choices": [{"text": "\r\n            return true\r\n        }\r\n        _root = parent\r\n        refresh(true)\r\n        return false\r\n    }\r\n fun down(): Boolean {\r\n        if (_root == null) {\r\n            return false\r\n        }\r\n        val parent = _root?.parentId\r\n        if (parent == null) {\r\n            _root = null\r\n            refresh(true)\r\n            return true\r\n        }\r\n        _root = parent\r\n        refresh(true)\r\n        return false\r\n    }\r"}], "metadata": {"task_id": "Trail-Sense/280", "ground_truth": "        } else {\r\n            loadGroup(parent)\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.grouping.Groupable\nimport com.kylecorry.andromeda.views.list.ListItemMapper\nimport com.kylecorry.andromeda.views.list.AndromedaListView\nimport com.kylecorry.andromeda.core.tryOrLog\nimport android.widget.TextView\nfun <T : Groupable> GroupListManager<T>.bind(\r\n    list: AndromedaListView,\r\n    title: TextView,\r\n    mapper: ListItemMapper<T>,\r\n    titleProvider: (root: T?) -> String\r\n) {\r\n    onChange = { root, items, rootChanged ->\r\n        tryOrLog {\r\n            list.setItems(items, mapper)\r\n            if (rootChanged) {\r\n                list.scrollToPosition(0, false)", "choices": [{"text": "\r\n            }\r\n            title.setText(titleProvider.apply(root))\r\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/282", "ground_truth": "            }\r\n            title.text = titleProvider(root)\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManagerExtensions.kt"}}
{"prompt": "suspend fun delete(group: T) {\r\n        if (!group.isGroup){\r\n            deleteItems(listOf(group))\r\n            return\r\n        }\r\n\r\n        val children = loader.getChildren(group.id, 1)\r\n\r\n        // Delete items\r\n        val items = children.filterNot { it.isGroup }\r\n        deleteItems(items)\r\n\r\n        // Delete groups\r\n        val groups = children.filter { it.isGroup }", "choices": [{"text": "\r\n        deleteItems(groups)\r\n}\r\n\r\nsuspend fun deleteItems(items: T) {\r\n        items.forEach(item => {\r\n                delete(item)\r\n        })\r\n}\r\n\r\nsuspend fun deleteGroups(groups: T) {\r\n        groups.forEach(group => {\r\n                delete(group)\r\n        })\r\n}\r\n\r\nsuspend fun deleteItems(items: T) {\r\n        items.forEach(item => {\r\n                delete(item)\r\n"}], "metadata": {"task_id": "Trail-Sense/284", "ground_truth": "        groups.forEach { delete(it) }\r\n\r\n        // Delete self\r\n        deleteGroup(group)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\persistence\\GroupDeleter.kt"}}
{"prompt": "suspend fun sort(items: List<T>): List<T> {\r\n        val values = items.map { mapper.map(it) }\r\n\r\n        return if (ascending) {\r\n            items.zip(values)\r\n                .sortedBy {\r\n                    it.second\r\n                }\r\n                .map { it.first }\r\n        } else {\r\n            items.zip(values)\r\n                .sortedByDescending {", "choices": [{"text": "\r\n                    it.second\r\n                }\r\n               .map { it.first }\r\n        }\r\n}\r\n\r\nsuspend fun sort(items: List<T>): List<T> {\r\n        val values = items.map { mapper.map(it) }\r\n\r\n        return if (ascending) {\r\n            items.zip(values)\r\n               .sortedBy {\r\n                    it.second\r\n                }\r\n               .map { it.first }\r\n        } else {\r\n            items.zip(values)"}], "metadata": {"task_id": "Trail-Sense/286", "ground_truth": "                    it.second\r\n                }\r\n                .map { it.first }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\sort\\GroupSort.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nfun getValue(time: Instant, threshold: Duration): Boolean {\r\n        synchronized(lock) {\r\n            if (lastTime == null) {\r\n                lastTime = time\r\n                lastReturnValue = !lastReturnValue\r\n                return lastReturnValue\r\n            }\r\n\r\n            if (Duration.between(lastTime, time) >= threshold) {\r\n                lastTime = time\r\n                lastReturnValue = !lastReturnValue\r\n                return lastReturnValue", "choices": [{"text": "\r\n            }\r\n        }\r\n\r\n        return lastReturnValue\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/288", "ground_truth": "            }\r\n\r\n            return lastReturnValue\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\hooks\\FrequencyHookTrigger.kt"}}
{"prompt": "import java.io.OutputStream\nimport java.io.FileOutputStream\nimport java.io.File\nimport com.kylecorry.trail_sense.tools.maps.infrastructure.ImageSaver\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport android.graphics.Bitmap\nimport android.content.Context\nsuspend fun save(\r\n        path: String,\r\n        bitmap: Bitmap,\r\n        quality: Int = 90,\r\n        recycleOnSave: Boolean = false\r\n    ) = onIO {\r\n        try {\r\n            @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n            FileOutputStream(get(path, create = true)).use { out ->\r\n                ImageSaver().save(bitmap, out, quality)\r\n            }\r\n        } finally {", "choices": [{"text": "\r\n            if (recycleOnSave) {\r\n                recycle(path)\r\n            }\r\n        }\r\n    }\r\n\r\nsuspend fun get(\r\n        path: String,\r\n        create: Boolean = false\r\n    ) = onIO {\r\n        try {\r\n            return new File(path, create)\r\n        } finally {\r\n            recycle(path)\r\n        }\r\n    }\r\n\r\nsuspend fun recycle(\r\n        path: String\r\n    ) = onIO {\r\n        try {\r"}], "metadata": {"task_id": "Trail-Sense/297", "ground_truth": "            if (recycleOnSave) {\r\n                bitmap.recycle()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "val TEMP_DIR\nvar instance FileSubsystem?\nval external\n suspend fun rename(\r\n        fromPath: String,\r\n        toPath: String", "choices": [{"text": "\r\n        fromPath: String,\r\n        toPath: String\r\n    )\r\nend\r\n\r\nval TEMP_FILE\r\nvar instance FileSubsystem?\r\nval external\r\n suspend fun rename(\r\n        fromPath: String,\r\n        toPath: String\r\n    )\r\nend\r\n\r\nval TEMP_DIR\r\nvar instance FileSubsystem?\r\nval external\r\n suspend fun rename(\r\n        fromPath: String,\r\n        toPath: String\r\n    )\r\nend\r\n\r\nval TEMP_FILE\r\nvar instance FileSubsystem?"}], "metadata": {"task_id": "Trail-Sense/298", "ground_truth": "    ): Boolean = onIO {\r\n        val renamed = get(toPath)\r\n        get(fromPath).renameTo(renamed)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "import java.util\nimport com.kylecorry.andromeda.core.tryOrDefault\nimport android.util.Size\nfun imageSize(path: String): Size {\r\n        return tryOrDefault(Size(0, 0)) {", "choices": [{"text": ", () -> {\r\n                try {\r\n                        return new android.util.Size(imageSize(path).width, imageSize(path).height);\r\n                } catch (Exception e) {\r\n                        return new android.util.Size(0, 0);\r\n                }\r\n        });\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/299", "ground_truth": "            val file = get(path)\r\n            BitmapUtils.getBitmapSize(file.path) ?: Size(0, 0)\r\n        }\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "import java.io.File\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.files.FileSaver\nimport android.webkit.MimeTypeMap\nimport android.net.Uri\nsuspend fun copyToLocal(uri: Uri, directory: String): File? = onIO {\r\n        val type = context.contentResolver.getType(uri)\r\n        val extension = MimeTypeMap.getSingleton().getExtensionFromMimeType(type)\r\n        val filename = \"$directory/${UUID.randomUUID()}.$extension\"\r\n        val file = get(filename, true)\r\n        val stream = stream(uri) ?: return@onIO null\r\n\r\n        try {\r\n            val saver = FileSaver()\r\n            saver.save(stream, file)\r\n        } catch (e: Exception) {", "choices": [{"text": "\r\n            e.printStackTrace()\r\n        }\r\n\r\n        return file\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/300", "ground_truth": "            return@onIO null\r\n        }\r\n\r\n        file\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "fun from(turnOn: () -> Unit, turnOff: () -> Unit): ISignalingDevice {\r\n            return object : ISignalingDevice {\r\n                override fun on() {\r\n                    turnOn()\r\n                }", "choices": [{"text": "\r\n                }\r\n\r\n                override fun off() {\r\n                    turnOff()\r\n                }\r\n            }\r\n        }\r\n}"}], "metadata": {"task_id": "Trail-Sense/310", "ground_truth": "                override fun off() {\r\n                    turnOff()\r\n                }\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\morse\\ISignalingDevice.kt"}}
{"prompt": "fun cancel(){\r\n        synchronized(this) {\r\n            isOn = false\r\n            if (intervalometer != null) {\r\n                intervalometer?.stop()", "choices": [{"text": "\r\n                intervalometer.stop()\r\n                intervalometer = null\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Trail-Sense/311", "ground_truth": "                intervalometer = null\r\n            }\r\n            device.off()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\morse\\SignalPlayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport android.content.Context\noverride fun isSatisfiedBy(value: Context): Boolean {\r\n        val sensorService = SensorService(value)\r\n        val hasForegroundLocation = sensorService.hasLocationPermission()\r\n        val hasBackgroundLocation = sensorService.hasLocationPermission(true)\r\n\r\n        if (!hasForegroundLocation || hasBackgroundLocation) {\r\n            return false", "choices": [{"text": ";\r\n        }\r\n\r\n        return true;\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/315", "ground_truth": "        }\r\n\r\n        val prefs = UserPreferences(value)\r\n        return prefs.astronomy.sendSunsetAlerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\IsBackgroundLocationRequired.kt"}}
{"prompt": "import com.kylecorry.andromeda.camera.Camera\nimport com.kylecorry.andromeda.alerts.toast\nimport com.kylecorry.andromeda.alerts.Alerts\nimport androidx.fragment.app.Fragment\nfun Fragment.alertNoCameraPermission() {\r\n    Alerts.toast(", "choices": [{"text": "new toast(getActivity(), R.string.no_camera_permission), Toast.LENGTH_SHORT);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/317", "ground_truth": "        requireContext(),\r\n        getString(R.string.camera_permission_denied),\r\n        short = false\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.toast\nimport com.kylecorry.andromeda.alerts.Alerts\nimport androidx.fragment.app.Fragment\nfun Fragment.alertNoActivityRecognitionPermission() {\r\n    Alerts.toast(", "choices": [{"text": "new toast(R.string.no_activity_recognition_permission), Toast.LENGTH_SHORT);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/318", "ground_truth": "        requireContext(),\r\n        getString(R.string.activity_recognition_permission_denied),\r\n        short = false\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.Permissions\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.os.Build\nimport android.content.Context\nimport android.Manifest\nfun <T> T.requestActivityRecognition(action: (hasPermission: Boolean) -> Unit) where T : IPermissionRequester, T : Fragment {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        requestPermissions(listOf(Manifest.permission.ACTIVITY_RECOGNITION)) {\r\n            action(Permissions.canRecognizeActivity(requireContext()))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/319", "ground_truth": "        }\r\n    } else {\r\n        action(true)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.Permissions\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.Manifest\nfun <T> T.requestBacktrackPermission(action: (hasPermission: Boolean) -> Unit) where T : IPermissionRequester, T : Fragment {\r\n    if (Permissions.canStartLocationForgroundService(requireContext())) {\r\n        action(true)\r\n        return\r\n    }\r\n\r\n    requestPermissions(listOf(Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION)) {\r\n        val hasPermission = Permissions.canStartLocationForgroundService(requireContext())\r\n        if (!hasPermission){", "choices": [{"text": "\r\n            action(false)\r\n            return\r\n        }\r\n\r\n        action(true)\r\n    })\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/322", "ground_truth": "            toast(getString(R.string.backtrack_no_permission))\r\n        }\r\n        action(hasPermission)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "import android.content.Context\noverride fun execute() {\r\n        if (!isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(false)\r\n            return\r\n        }\r\n\r\n        if (flag.get()) {\r\n            return", "choices": [{"text": "\r\n            flag.set(false)\r\n            return\r\n        }\r\n\r\n        if (isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(true)\r\n            return\r\n        }\r\n\r\n        if (isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(true)\r\n            return\r\n        }\r\n\r\n        if (isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(true)\r\n"}], "metadata": {"task_id": "Trail-Sense/323", "ground_truth": "        }\r\n\r\n        flag.set(true)\r\n        alerter.alert()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\RequestOptionalPermissionCommand.kt"}}
{"prompt": "import android.graphics.Color\noverride fun getColor(percent: Float): Int {\r\n        if (colors.isEmpty()) {\r\n            return Color.BLACK\r\n        }\r\n\r\n        val percentPerColor = 1 / colors.size.toFloat()\r\n\r\n        for (i in colors.indices) {\r\n            if (percent <= percentPerColor * (i + 1)) {\r\n                return colors[i]", "choices": [{"text": "\r\n            }\r\n        }\r\n\r\n        return Color.BLACK\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/330", "ground_truth": "            }\r\n        }\r\n\r\n        return colors.last()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\scales\\DiscreteColorScale.kt"}}
{"prompt": "private fun onUpdate(): Boolean {\r\n        if (!barometer.hasValidReading || barometer.pressure == 0f){\r\n            return true\r\n        }\r\n\r\n        readingCount++\r\n\r\n        if (filter == null){\r\n            filter = filterProvider(barometer.pressure)\r\n        }\r\n\r\n        filteredPressure = filter?.filter(barometer.pressure)\r\n\r\n        if (readingCount < minimumReadingCount){\r\n            return true", "choices": [{"text": "\r\n        }\r\n\r\n        barometer.pressure = filteredPressure\r\n\r\n        if (readingCount > maximumReadingCount){\r\n            return true\r\n        }\r\n\r\n        return false\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/351", "ground_truth": "        }\r\n\r\n        notifyListeners()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\FilteredBarometer.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Vector2\nprivate fun getKalmanLocation(): Coordinate {\r\n        return referenceProjection.toCoordinate(\r\n            Vector2(", "choices": [{"text": ",\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n"}], "metadata": {"task_id": "Trail-Sense/355", "ground_truth": "                kalman?.currentX ?: 0f,\r\n                kalman?.currentY ?: 0f\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPS.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.sol.units.Coordinate\nprivate fun update() {\r\n        if (!gps.hasValidReading || currentLocation == Coordinate.zero || kalman == null) return\r\n\r\n        kalman?.predict(\r\n            (accelerometer?.rawAcceleration?.get(0) ?: 0f) * PROJECTION_SCALE,\r\n            (accelerometer?.rawAcceleration?.get(1) ?: 0f) * PROJECTION_SCALE,\r\n        )\r\n        lastPredictTime = Instant.now()", "choices": [{"text": "\r\n\r\n        if (lastPredictTime.isAfter(Instant.now())) {\r\n            kalman?.predict(\r\n                (accelerometer?.rawAcceleration?.get(0)?: 0f) * PROJECTION_SCALE,\r\n                (accelerometer?.rawAcceleration?.get(1)?: 0f) * PROJECTION_SCALE,\r\n            )\r\n            lastPredictTime = Instant.now()\r\n        }\r\n\r\n        if (currentLocation == Coordinate.zero) {\r\n"}], "metadata": {"task_id": "Trail-Sense/358", "ground_truth": "        updateCurrentFromKalman()\r\n        if (updateWithPrediction) {\r\n            notifyListeners()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPS.kt"}}
{"prompt": "import com.kylecorry.sol.math.algebra.columnMatrix\nimport android.os.SystemClock\nfun update(\r\n        x: Float,\r\n        y: Float,\r\n        xVel: Float,\r\n        yVel: Float,\r\n        posDev: Float,\r\n        velErr: Float\r\n    ) = synchronized(lock) {\r\n        lastUpdateTime = SystemClock.elapsedRealtimeNanos()\r\n        rebuildR(posDev, velErr)\r\n        if (useGpsSpeed) {\r\n            kalmanFilter.Zk = columnMatrix(x, y, xVel, yVel)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/360", "ground_truth": "        } else {\r\n            kalmanFilter.Zk = columnMatrix(x, y)\r\n        }\r\n        kalmanFilter.update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPSFilter.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.trail_sense.shared.sensors.overrides.OverrideGPS\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nfun getGPS(frequency: Duration = Duration.ofMillis(20)): IGPS {\r\n\r\n        val hasPermission = hasLocationPermission()\r\n\r\n        if (!userPrefs.useAutoLocation || !hasPermission) {\r\n            return OverrideGPS(context, frequency.toMillis())\r\n        }\r\n\r\n        if (GPS.isAvailable(context)) {\r\n            return CustomGPS(\r\n                context,\r\n                frequency,\r\n                frequency", "choices": [{"text": ".toMillis()\r\n            )\r\n        }\r\n\r\n        if (hasPermission) {\r\n            return CustomGPS(\r\n                context,\r\n                frequency,\r\n                frequency.toMillis()\r\n            )\r\n        }\r\n\r\n        return CustomGPS(\r\n            context,\r\n            frequency,\r\n            frequency.toMillis()\r\n        )\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/367", "ground_truth": "            )\r\n        }\r\n\r\n        return CachedGPS(context, frequency.toMillis())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.altimeter.AltimeterWrapper\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.IAltimeter\nfun getGPSFromAltimeter(altimeter: IAltimeter): IGPS? {\r\n        return if (altimeter is IGPS) {\r\n            altimeter\r\n        } else if (altimeter is AltimeterWrapper && altimeter.altimeter is IGPS) {\r\n            altimeter.altimeter as IGPS\r\n        } else if (altimeter is AltimeterWrapper && altimeter.altimeter is AltimeterWrapper) {", "choices": [{"text": "\r\n            altimeter.altimeter as AltimeterWrapper\r\n        } else if (altimeter is AltimeterWrapper && altimeter.altimeter is GPS) {\r\n            altimeter.altimeter as GPS\r\n        } else if (altimeter is GPS) {\r\n            altimeter\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/368", "ground_truth": "            getGPSFromAltimeter(altimeter.altimeter)\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.pedometer.Pedometer\nimport com.kylecorry.andromeda.sense.pedometer.IPedometer\nimport com.kylecorry.andromeda.permissions.Permissions\nfun getPedometer(): IPedometer {\r\n        return if (Permissions.canRecognizeActivity(context)) {", "choices": [{"text": "\r\n                return new Pedometer(context);\r\n        } else {\r\n                return null;\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/370", "ground_truth": "            Pedometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        } else {\r\n            MockPedometer()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.altimeter.OverrideAltimeter\nimport com.kylecorry.trail_sense.shared.sensors.altimeter.CachedAltimeter\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.IAltimeter\nprivate fun getGPSAltimeter(gps: IGPS? = null): IAltimeter {\r\n        val mode = userPrefs.altimeterMode\r\n\r\n        if (mode == UserPreferences.AltimeterMode.Override) {\r\n            return OverrideAltimeter(context)\r\n        } else {\r\n            if (!GPS.isAvailable(context)) {\r\n                return CachedAltimeter(context)", "choices": [{"text": "\r\n            } else {\r\n                return GPS.getAltimeter(context)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public IAltimeter getAltimeter() {\r\n        return getGPSAltimeter()\r\n    }\r\n\r\n    @Override\r\n    public IAltimeter getAltimeter(IGPS gps) {\r\n        return getGPSAltimeter(gps)\r\n    }\r\n\r\n    @Override\r\n    public IAltimeter getAltimeter("}], "metadata": {"task_id": "Trail-Sense/371", "ground_truth": "            }\r\n\r\n            return gps ?: getGPS()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.barometer.IBarometer\nimport com.kylecorry.andromeda.sense.barometer.Barometer\nfun getBarometer(): IBarometer {\r\n        return if (userPrefs.weather.hasBarometer) FilteredBarometer(\r\n            Barometer(\r\n                context, ENVIRONMENT_SENSOR_DELAY\r\n            ),", "choices": [{"text": " new FilteredBarometer(\r\n                Barometer(\r\n                    context, ENVIRONMENT_SENSOR_DELAY\r\n                ), new FilteredBarometer(\r\n                    Barometer(\r\n                        context, ENVIRONMENT_SENSOR_DELAY\r\n                    ), new FilteredBarometer(\r\n                        Barometer(\r\n                            context, ENVIRONMENT_SENSOR_DELAY\r\n                        ), new FilteredBarometer(\r\n                            Barometer(\r\n                                context, ENVIRONMENT_SENSOR_DELAY\r\n                            ), new FilteredBar"}], "metadata": {"task_id": "Trail-Sense/373", "ground_truth": "            3\r\n        ) {\r\n            LowPassFilter(0.1f, it)\r\n        } else MockBarometer()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.thermometer.ThermometerSource\nimport com.kylecorry.trail_sense.shared.sensors.thermometer.HistoricThermometer\nimport com.kylecorry.trail_sense.shared.sensors.thermometer.CalibratedThermometerWrapper\nimport com.kylecorry.andromeda.sense.temperature.Thermometer\nimport com.kylecorry.andromeda.core.sensors.IThermometer\nimport android.hardware.Sensor\nfun getThermometer(calibrated: Boolean = true): IThermometer {\r\n        val thermometer = when (userPrefs.thermometer.source) {\r\n            ThermometerSource.Historic -> HistoricThermometer(context)\r\n            ThermometerSource.Sensor -> getThermometerSensor()\r\n        }\r\n        return if (calibrated) {\r\n            CalibratedThermometerWrapper(\r\n                thermometer, userPrefs.thermometer.calibrator", "choices": [{"text": ")\r\n        } else {\r\n            return thermometer\r\n        }\r\n    }\r\n    fun getThermometerSensor(): Sensor {\r\n        val thermometer = when (userPrefs.thermometer.source) {\r\n            ThermometerSource.Historic -> HistoricThermometer(context)\r\n            ThermometerSource.Sensor -> getThermometerSensor()\r\n        }\r\n        return thermometer\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/374", "ground_truth": "            )\r\n        } else {\r\n            thermometer\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.temperature.Thermometer\nimport com.kylecorry.andromeda.sense.temperature.AmbientThermometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.IThermometer\nimport android.hardware.Sensor\n @Suppress(\"DEPRECATION\")\r\n    private fun getThermometerSensor(): IThermometer {\r\n        if (Sensors.hasSensor(context, Sensor.TYPE_AMBIENT_TEMPERATURE)) {\r\n            return AmbientThermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        if (Sensors.hasSensor(context, Sensor.TYPE_TEMPERATURE)) {", "choices": [{"text": "\r\n            return Thermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        if (Sensors.hasSensor(context, Sensor.TYPE_HUMIDITY)) {\r\n            return HumidityThermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        if (Sensors.hasSensor(context, Sensor.TYPE_PRESSURE)) {\r\n            return PressureThermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        if"}], "metadata": {"task_id": "Trail-Sense/375", "ground_truth": "            return Thermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        return Battery(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.hygrometer.IHygrometer\nimport com.kylecorry.andromeda.sense.hygrometer.Hygrometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.hardware.Sensor\nfun getHygrometer(): IHygrometer {\r\n        if (Sensors.hasHygrometer(context)) {", "choices": [{"text": "\r\n                return new Hygrometer(context);\r\n        } else {\r\n                return null;\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/376", "ground_truth": "            return Hygrometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        return MockHygrometer()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import java.time.ZonedDateTime\noverride suspend fun update() {\r\n        // Purposely not calibrated because there's a wrapper for that\r\n        temperature = weather.getTemperature(\r\n            ZonedDateTime.now(),\r\n            location.location,", "choices": [{"text": "\r\n            location.latitude,\r\n            location.longitude\r\n        );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/383", "ground_truth": "            location.elevation,\r\n            false\r\n        ).value.temperature\r\n        super.update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\thermometer\\HistoricThermometer.kt"}}
{"prompt": "import com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.SolMath\noverride fun calibrate(temperature: Temperature): Temperature {\r\n        return Temperature.celsius(\r\n            SolMath.map(\r\n                temperature.celsius().temperature,\r\n                sensorMinC,\r\n                sensorMaxC,", "choices": [{"text": "<?php\n\n/*\n * This file is part of PHPExifTool.\n *\n * (c) 2012 Romain Neutron <imprec@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace PHPExiftool\\Driver\\Tag\\DICOM;\n\nuse JMS\\Serializer\\Annotation\\ExclusionPolicy;\nuse PHPExiftool\\Driver\\AbstractTag;\n\n/**\n * @ExclusionPolicy(\"all\")\n */\nclass D"}], "metadata": {"task_id": "Trail-Sense/384", "ground_truth": "                calibratedMinC,\r\n                calibratedMaxC\r\n            )\r\n        ).convertTo(temperature.units)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\thermometer\\RangeTemperatureCalibrator.kt"}}
{"prompt": "import androidx.fragment.app.Fragment\nfun actions(\r\n        fragment: Fragment,\r\n        title: String,\r\n        actions: List<ActionItem>,\r\n        noActionSelected: () -> Unit\r\n    ) {\r\n        var called = false\r\n\r\n        val customOnAction = { action: ActionItem?, sheet: ActionSheet ->\r\n            if (!called) {\r\n                called = true\r\n                if (action != null) {\r\n                    sheet.dismiss()\r\n                    action.action()\r\n                } else {\r\n                    noActionSelected()\r\n                }", "choices": [{"text": "\r\n            }\r\n        }}\r\n\r\n        for (var i = 0; i < actions.length; i++) {\r\n            val action = actions[i]\r\n\r\n            if (action.action) {\r\n                customOnAction.action = action.action\r\n            }\r\n\r\n            if (action.sheet) {\r\n                customOnAction.sheet = action.sheet\r\n            }\r\n        }\r\n\r\n        if (title) {\r\n            customOnAction.title = title\r\n        }\r\n\r\n       "}], "metadata": {"task_id": "Trail-Sense/386", "ground_truth": "            }\r\n        }\r\n        val sheet = ActionSheet(title, actions, customOnAction)\r\n        sheet.show(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sharing\\Share.kt"}}
{"prompt": "fun toMarkdown(): String {\r\n            if (title == null || level == null) {", "choices": [{"text": " == null) {\r\n                return '';\r\n            }\r\n\r\n            if (level == null) {\r\n                return title;\r\n            }\r\n\r\n            if (title == null) {\r\n                return level;\r\n            }\r\n\r\n            if (level == null) {\r\n                return title;\r\n            }\r\n\r\n            if (title == level) {\r\n                return title;\r\n            }\r\n\r\n            if (level == title) {\r\n                return level;\r\n            }\r\n\r\n           "}], "metadata": {"task_id": "Trail-Sense/390", "ground_truth": "                return content\r\n            }\r\n\r\n            return \"#\".repeat(level) + \" $title\\n$content\"\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\text\\TextUtils.kt"}}
{"prompt": "override fun onClick() {\r\n        super.onClick()\r\n\r\n        when (stateTopic.value.get()) {", "choices": [{"text": "() {\r\n                if (stateTopic.value.get()) {\r\n                        stateTopic.value.set(false)\r\n                } else {\r\n                        stateTopic.value.set(true)\r\n                }\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/391", "ground_truth": "            FeatureState.On -> stop()\r\n            FeatureState.Off -> start()\r\n            else -> {}\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "private fun onSubtitleChanged(subtitle: String): Boolean {", "choices": [{"text": "): void {\n  if (subtitle!== this.subtitle) {\n    this.subtitle = subtitle;\n    this.dispatchEvent(new CustomEvent('onSubtitleChanged', {\n      detail: {\n        subtitle: subtitle,\n      },\n    }));\n  }\n}\n\nexport default {\n  onSubtitleChanged,\n};\n"}], "metadata": {"task_id": "Trail-Sense/394", "ground_truth": "        tryOrLog {\r\n            setSubtitle(subtitle)\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FeatureState\nimport com.kylecorry.andromeda.core.tryOrLog\nimport android.service.quicksettings.Tile\nprivate fun onStateChanged(state: FeatureState): Boolean {\r\n        tryOrLog {\r\n            setState(\r\n                when (state) {\r\n                    FeatureState.On -> Tile.STATE_ACTIVE\r\n                    FeatureState.Off -> Tile.STATE_INACTIVE\r\n                    FeatureState.Unavailable -> Tile.STATE_UNAVAILABLE", "choices": [{"text": "\r\n                }\r\n            );\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n    private fun setState(state: FeatureState): Boolean {\r\n        tryOrLog {\r\n            Tile.setState(\r\n                when (state) {\r\n                    FeatureState.On -> Tile.STATE_ACTIVE\r\n                    FeatureState.Off -> Tile.STATE_INACTIVE\r\n                    FeatureState.Unavailable -> Tile.STATE_UNAVAILABLE\r\n                }"}], "metadata": {"task_id": "Trail-Sense/395", "ground_truth": "                }\r\n            )\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "import com.kylecorry.sol.units.PressureUnits\nfun getDecimalPlaces(units: PressureUnits): Int {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/396", "ground_truth": "        return when (units) {\r\n            PressureUnits.Inhg, PressureUnits.Psi -> 2\r\n            else -> 1\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Units.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nfun getDecimalPlaces(units: DistanceUnits): Int {\r\n        return if (units.isLarge()){", "choices": [{"text": "\r\n        return if units.isSmall()\r\n        return if units.isMedium()\r\n        return if units.isLarge()\r\n        return if units.isXLarge()\r\n        return if units.isXSmall()\r\n        return if units.isXMedium()\r\n        return if units.isXLarge()\r\n        return if units.isXSmall()\r\n        return if units.isXMedium()\r\n        return if units.isXLarge()\r\n        return if units.isXSmall()\r\n        return if units.isXMedium"}], "metadata": {"task_id": "Trail-Sense/397", "ground_truth": "            2\r\n        } else {\r\n            0\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Units.kt"}}
{"prompt": "import androidx.annotation.StyleableRes\nimport androidx.annotation.StyleRes\nimport androidx.annotation.AttrRes\nimport android.view.View\nimport android.util.AttributeSet\nimport android.content.res.TypedArray\nfun View.parse(\r\n    attrs: AttributeSet?,\r\n    @StyleableRes res: IntArray,\r\n    @AttrRes defStyleAttr: Int = 0,\r\n    @StyleRes defStyleRes: Int = 0,\r\n    block: TypedArray.() -> Unit\r\n) {\r\n    val arr = context.theme.obtainStyledAttributes(\r\n        attrs,\r\n        res,\r\n        defStyleAttr,", "choices": [{"text": "\r\n        defStyleRes,\r\n        block\r\n    );\r\n\r\n    if (arr == null) {\r\n        return null;\r\n    }\r\n\r\n    val view = context.theme.obtainStyledView(\r\n        arr,\r\n        attrs,\r\n        res,\r\n        defStyleAttr,\r\n        defStyleRes,\r\n        block\r\n    );\r\n\r\n    if (view == null) {\r\n        return null;\r\n    }\r\n\r\n    return view;\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/398", "ground_truth": "        defStyleRes\r\n    )\r\n    arr.block()\r\n    arr.recycle()\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\AttributeExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nfun show(\r\n        location: Coordinate,\r\n        elevation: Float,\r\n        speed: Float,\r\n        destination: Beacon,\r\n        declination: Float,\r\n        usingTrueNorth: Boolean = true\r\n    ) {\r\n        destinationPanel.show(\r\n            location,\r\n            elevation,\r\n            speed,", "choices": [{"text": "\r\n            destination,\r\n            declination,\r\n            usingTrueNorth\r\n        );\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/400", "ground_truth": "            destination,\r\n            declination,\r\n            usingTrueNorth\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\BeaconDestinationView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.CustomUiUtils\nimport com.kylecorry.trail_sense.tools.beacons.domain.BeaconIcon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport androidx.core.view.setPadding\nimport android.widget.ImageButton\nprivate fun addButton(icon: BeaconIcon?) {\r\n        val button = ImageButton(context, null)\r\n        button.setImageResource(icon?.icon ?: R.drawable.bubble)\r\n        CustomUiUtils.setButtonState(button, false)\r\n        button.setPadding(Resources.dp(context, 16f).toInt())\r\n        button.setOnClickListener {", "choices": [{"text": " {\r\n            @Override\r\n            public void onClick(View v) {\r\n                CustomUiUtils.setButtonState(button, true)\r\n            }\r\n        }\r\n        return button.setOnClickListener {\r\n            @Override\r\n            public void onClick(View v) {\r\n                CustomUiUtils.setButtonState(button, false)\r\n            }\r\n        }\r\n    }\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView("}], "metadata": {"task_id": "Trail-Sense/403", "ground_truth": "            this.icon = icon\r\n            changeListener?.invoke(icon)\r\n        }\r\n        flex.addView(button)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\BeaconIconPickerView.kt"}}
{"prompt": "import com.kylecorry.andromeda.camera.Camera\nfun stop() {\r\n        camera?.stop(this::onCameraUpdate)\r\n        camera = null\r\n        keepScreenOn = false", "choices": [{"text": "\r\n}\r\n\r\nfunction onCameraUpdate(camera) {\r\n        if (keepScreenOn) {\r\n                camera.setKeepScreenOn(true)\r\n        } else {\r\n                camera.setKeepScreenOn(false)\r\n        }\r\n}\r\n\r\nfunction start() {\r\n        camera?.start(this::onCameraUpdate)\r\n        keepScreenOn = true\r\n}\r\n\r\nfunction stop() {\r\n        camera?.stop(this::onCameraUpdate)\r\n        keepScreenOn = false\r\n}"}], "metadata": {"task_id": "Trail-Sense/406", "ground_truth": "        imageListener = null\r\n        synchronized(startLock) {\r\n            isStarted = false\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CameraView.kt"}}
{"prompt": "import java.io.File\nsuspend fun capture(file: File): Boolean {\r\n        synchronized(this) {\r\n            if (isCapturing) {\r\n                return true\r\n            }\r\n            isCapturing = true\r\n        }\r\n        val success = camera?.takePhoto(file) ?: false", "choices": [{"text": "\r\n        synchronized(this) {\r\n            isCapturing = false\r\n        }\r\n        return success\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/407", "ground_truth": "        synchronized(this) {\r\n            isCapturing = false\r\n        }\r\n        return success\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CameraView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.toRelativeDistance\nimport com.kylecorry.trail_sense.shared.Units\nimport com.kylecorry.sol.units.Distance\noverride fun format(value: Float): String {\r\n        val distance = Distance(value, fromUnits).convertTo(toUnits).let {\r\n            if (relative) {\r\n                it.toRelativeDistance()\r\n            } else {\r\n                it\r\n            }\r\n        }\r\n        return formatter.formatDistance(", "choices": [{"text": "distance)\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/412", "ground_truth": "            distance,\r\n            Units.getDecimalPlaces(distance.units),\r\n            false\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\chart\\label\\DistanceChartLabelFormatter.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geography.CoordinateFormatter.parse\nprivate fun onChange() {\r\n        val locationText = locationEdit.text.toString()\r\n        _coordinate = Coordinate.parse(locationText)\r\n        errorHandler.stop()\r\n        if (_coordinate == null && locationText.isNotEmpty()) {\r\n            errorHandler.once(Duration.ofSeconds(2))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/415", "ground_truth": "        } else {\r\n            locationEdit.error = null\r\n        }\r\n        changeListener?.invoke(_coordinate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CoordinateInputView.kt"}}
{"prompt": "import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n        gestureDetector.onTouchEvent(event)\r\n        if (event.action == MotionEvent.ACTION_UP) {\r\n            scrollToOption(selected)\r\n            if (selected != lastSelection){\r\n                selectionChangeListener(selected)\r\n                lastSelection = selected", "choices": [{"text": "\r\n            }\r\n        }\r\n        return super.onTouchEvent(event);\r\n    }\r\n\r\n    @Override\r\n    public boolean onInterceptTouchEvent(MotionEvent event) {\r\n        return super.onInterceptTouchEvent(event);\r\n    }\r\n\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        return super.onTouchEvent(event);\r\n    }\r\n\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        return super.on"}], "metadata": {"task_id": "Trail-Sense/427", "ground_truth": "            }\r\n        }\r\n        invalidate()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DialSelectView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\noverride fun getAmount(value: Distance): Number {\r\n        return if (showSecondaryAmount) {", "choices": [{"text": " {\r\n            type: Number,\r\n            value: value\r\n        };\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/430", "ground_truth": "            floor(value.distance)\r\n        } else {\r\n            value.distance\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DistanceInputView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\noverride fun getSecondaryAmount(value: Distance): Number? {\r\n        return if (showSecondaryAmount) {\r\n            val inches = (value.distance % 1f) * 12\r\n            if (inches == 0f) {\r\n                null\r\n            } else {\r\n                inches", "choices": [{"text": "\r\n                return inches\r\n            }\r\n        } else {\r\n            val inches = (value.distance % 1f) * 12\r\n            if (inches == 0f) {\r\n                null\r\n            } else {\r\n                return inches\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/432", "ground_truth": "            }\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DistanceInputView.kt"}}
{"prompt": "import java.time.Duration\nprivate fun onDurationTextChanged(shouldEvent: Boolean = true) {\r\n        val h = durationText.substring(0, 2).toInt()\r\n        val m = durationText.substring(2, 4).toInt()\r\n        val s = durationText.substring(4, 6).toInt()\r\n        duration = Duration.ofHours(h.toLong()).plusMinutes(m.toLong()).plusSeconds(s.toLong())", "choices": [{"text": "(durationText.substring(6, 8).toInt())\r\n        if (shouldEvent) {\r\n                durationText = durationText.substring(0, 2).toInt() + \":\" + durationText.substring(2, 4).toInt() + \":\" + durationText.substring(4, 6).toInt() + \":\" + durationText.substring(6, 8).toInt() + \":\" + durationText.substring(8, 10).toInt() + \":\" + durationText.substring(10, 12).toInt() + \":\" + durationText.substring(12, 14).to"}], "metadata": {"task_id": "Trail-Sense/435", "ground_truth": "        updateTextView()\r\n        if (shouldEvent) {\r\n            changeListener?.invoke(duration)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DurationInputView.kt"}}
{"prompt": "private fun mySetup() {\r\n        setPanLimit(PAN_LIMIT_OUTSIDE)", "choices": [{"text": ");\r\n\r\n        myCanvas = new Canvas(width, height);\r\n        myCanvas.setBackground(Color.WHITE);\r\n        myCanvas.setBackground(Color.BLACK);\r\n        myCanvas.setBackground(Color.BLACK);\r\n        myCanvas.setBackground(Color.BLACK);\r\n        myCanvas.setBackground(Color.BLACK);\r\n        myCanvas.setBackground(Color.BLACK);\r\n        myCanvas.setBackground(Color.BLACK);\r\n        myCanvas.setBackground(Color.BLACK);\r"}], "metadata": {"task_id": "Trail-Sense/444", "ground_truth": "        maxScale = 6f\r\n        alwaysZoomDoubleTap = true\r\n        alwaysZoomDoubleTapZoomScale = 2f\r\n        setup()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "import kotlin.math.max\nimport com.kylecorry.sol.math.geometry.Size\noverride fun onImageLoaded() {\r\n        super.onImageLoaded()\r\n        val rotatedImageSize = Size(imageWidth.toFloat(), imageHeight.toFloat()).rotate(rotationOffset)\r\n        val percentIncrease = max(\r\n            rotatedImageSize.width / imageWidth,\r\n            rotatedImageSize.height / imageHeight", "choices": [{"text": ".toFloat()\r\n        )\r\n        if (percentIncrease > 1) {\r\n            imageWidth = rotatedImageSize.width * percentIncrease\r\n            imageHeight = rotatedImageSize.height * percentIncrease\r\n        } else {\r\n            imageHeight = rotatedImageSize.height * percentIncrease\r\n            imageWidth = rotatedImageSize.width * percentIncrease\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/445", "ground_truth": "        )\r\n        setMinimumScaleType(SCALE_TYPE_CUSTOM)\r\n        minScale /= percentIncrease\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "import android.graphics.PointF\nprotected fun toView(\r\n        sourceX: Float,\r\n        sourceY: Float,\r\n        withRotation: Boolean = false\r\n    ): PointF? {\r\n        val source = PointF(sourceX, sourceY)\r\n\r\n        // Apply the scale and translate\r\n        val view = sourceToViewCoord(source.x, source.y) ?: return null\r\n\r\n        // Apply the rotation\r\n        if (withRotation){\r\n            transform(view, inPlace = true){\r\n                postRotate(-imageRotation + rotationOffset, width / 2f, height / 2f)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/447", "ground_truth": "            }\r\n        }\r\n\r\n        return view\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "import android.graphics.PointF\nprotected fun toSource(\r\n        viewX: Float,\r\n        viewY: Float,\r\n        withRotation: Boolean = false\r\n    ): PointF? {\r\n        val view = PointF(viewX, viewY)\r\n\r\n        // Remove the rotation\r\n        if (withRotation) {\r\n            transform(view, invert = true, inPlace = true) {\r\n                postRotate(-imageRotation + rotationOffset, width / 2f, height / 2f)\r\n            }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/448", "ground_truth": "        }\r\n\r\n        // Remove the scale and translate\r\n        return viewToSourceCoord(view.x, view.y)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "fun report(error: UserError) {\r\n        if (!prefs.errors.canShowError(error.reason)) {\r\n            return\r\n        }\r\n        synchronized(this) {\r\n            errors.removeAll { it.reason == error.reason }\r\n            errors.add(error)", "choices": [{"text": ".reason = error.reason\r\n        }\r\n        prefs.errors.showError(error.reason)\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    report,\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/450", "ground_truth": "            errors.sortBy { it.reason.id }\r\n        }\r\n        displayNextError()\r\n        show()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "val errors MutableList<UserError>\nval prefs\nval binding ViewErrorBannerBinding\n fun dismissAll() {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/452", "ground_truth": "        synchronized(this) {\r\n            errors.clear()\r\n        }\r\n        displayNextError()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "private fun displayNextError() {\r\n        val first = synchronized(this) {\r\n            errors.firstOrNull()\r\n        }\r\n        if (first != null) {\r\n            displayError(first)", "choices": [{"text": "()\r\n        }\r\n        return () -> displayNextError()\r\n    }\r\n\r\n    private void displayError(val error) {\r\n        if (error!= null) {\r\n            errors.add(error)\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        while (true) {\r\n            displayNextError()\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return errors.toString()\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/453", "ground_truth": "        } else {\r\n            onAction = null\r\n            hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.core.view.isVisible\nprivate fun displayError(error: UserError) {\r\n        binding.errorText.text = error.title\r\n        binding.errorAction.text = error.action\r\n        binding.errorIcon.setImageResource(error.icon)\r\n        onAction = error.onAction\r\n        binding.errorAction.isVisible = !error.action.isNullOrEmpty()\r\n        overallAction = if (error.action == null) {", "choices": [{"text": "\r\n            binding.errorText.text = error.title\r\n            binding.errorAction.text = error.action\r\n            binding.errorIcon.setImageResource(error.icon)\r\n            onAction = error.onAction\r\n            binding.errorAction.isVisible =!error.action.isNullOrEmpty()\r\n            overallAction = if (error.action == null) {\r\n                binding.errorText.text = error.title\r\n                binding.errorAction.text = error.action\r\n                binding.errorIcon.setImageResource(error.icon"}], "metadata": {"task_id": "Trail-Sense/454", "ground_truth": "            error.onAction\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "import androidx.core.view.isVisible\nimport android.view.View\nfun setOverlay(overlay: View) {\r\n        this.overlay?.setOnClickListener(null)\r\n        overlay.isVisible = isVisible", "choices": [{"text": "\r\n        this.overlay = overlay\r\n}\r\n\r\nexport default {\r\n    setOverlay,\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/455", "ground_truth": "        this.overlay = overlay\r\n        this.overlay?.setOnClickListener {\r\n            hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\FloatingActionButtonMenu.kt"}}
{"prompt": "import androidx.core.view.isVisible\nvar fab FloatingActionButton?\nvar overlay View?\nvar onMenuItemClick MenuItem?.OnMenuItemClickListener?\nfun toggle() {\r\n        if (isVisible) {", "choices": [{"text": "\r\n                fab.toggle();\r\n                overlay.toggle();\r\n        } else {\r\n                fab.hide();\r\n                overlay.hide();\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/458", "ground_truth": "            hide()\r\n        } else {\r\n            show()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\FloatingActionButtonMenu.kt"}}
{"prompt": "import android.graphics.Color\nimport android.graphics.Bitmap\nprivate fun drawProgress(){\r\n        val progressBitmap = mask(backgroundBitmap){\r\n            fill(progressColor)\r\n            val w = backgroundBitmap.width.toFloat()\r\n            val h = backgroundBitmap.height.toFloat()\r\n\r\n            if (horizontal){\r\n                rect(0f, h, w * progress, h)\r\n            } else {\r\n                rect(0f, h * (1 - progress), w, h * progress)\r\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/462", "ground_truth": "        }\r\n\r\n        image(progressBitmap, width / 2f, height / 2f)\r\n        progressBitmap.recycle()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaskedProgressView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport android.widget.ArrayAdapter\nfun setItems(items: List<String>) {\r\n        val adapter = ArrayAdapter(\r\n            context,\r\n            R.layout.spinner_item_plain,", "choices": [{"text": ".layout.spinner_item_plain,\r\n            items\r\n        );\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        adapter.set"}], "metadata": {"task_id": "Trail-Sense/464", "ground_truth": "            R.id.item_name,\r\n            items\r\n        )\r\n        spinner.adapter = adapter\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaterialSpinnerView.kt"}}
{"prompt": "private fun setSelectedUnitText(unit: Units?) {\r\n        if (unit != null) {\r\n            val displayUnit = units.firstOrNull { it.unit == unit }\r\n            if (displayUnit == null) {\r\n                _unit = null\r\n                unitBtn.text = \"\"\r\n            } else {\r\n                unitBtn.text = displayUnit.shortName", "choices": [{"text": ".shortName\r\n            }\r\n        } else {\r\n            _unit = null\r\n            unitBtn.text = \"\"\r\n        }\r\n    }\r\n\r\n    private fun updateUnits() {\r\n        if (_unit!= null) {\r\n            val displayUnit = units.firstOrNull { it.unit == _unit }\r\n            if (displayUnit == null) {\r\n                _unit = null\r\n                unitBtn.text = \"\"\r\n            } else {\r\n                unitBtn.text = displayUnit.shortName\r\n            }"}], "metadata": {"task_id": "Trail-Sense/467", "ground_truth": "            }\r\n        } else {\r\n            unitBtn.text = \"\"\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MultipartUnitInputView.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.CanvasDrawer\nimport android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        if (!isSetup) {\r\n            drawer = CanvasDrawer(context, canvas)\r\n            setup()\r\n            isSetup = true", "choices": [{"text": " {\r\n                isSetup = true\r\n            }\r\n        }\r\n        drawer.onDraw(canvas)\r\n    }\r\n    private void setup() {\r\n        drawer.setDrawerListener(new CanvasDrawer.DrawerListener() {\r\n            @Override\r\n            public void onDrawerOpened(CanvasDrawer drawer) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onDrawerClosed(CanvasDrawer drawer) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onDrawerOpened(CanvasDrawer drawer) {"}], "metadata": {"task_id": "Trail-Sense/471", "ground_truth": "        }\r\n\r\n        drawer.canvas = canvas\r\n        draw()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Notepad.kt"}}
{"prompt": "import kotlin.math.max\nfun draw() {\r\n        val count = max(height / lineHeight, lineCount)\r\n        var baseline = getLineBounds(0, bounds)\r\n        for (i in 0 until count) {\r\n            drawer.line(\r\n                bounds.left.toFloat(),\r\n                baseline.toFloat() + offset,\r\n                bounds.right.toFloat(),", "choices": [{"text": "\r\n                baseline.toFloat() + lineHeight\r\n            )\r\n            baseline = getLineBounds(baseline.toFloat() + lineHeight, bounds)\r\n            i += 1\r\n        }\r\n}\r\nfunction getLineBounds(x, bounds) {\r\n        if (x < 0) {\r\n                x = 0\r\n        }\r\n        if (x > width) {\r\n                x = width\r\n        }\r\n        if (y < 0) {\r\n                y = 0\r\n        }\r\n        if (y > height) {"}], "metadata": {"task_id": "Trail-Sense/473", "ground_truth": "                baseline.toFloat() + offset\r\n            )\r\n            baseline += lineHeight\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Notepad.kt"}}
{"prompt": "private fun loadImage(path: String) {\r\n\r\n        val border = dp(48f).toInt()\r\n\r\n        val w = if (mapRotation == 0f || mapRotation == 180f) {\r\n            width\r\n        } else {\r\n            height\r\n        } - border\r\n\r\n        val h = if (mapRotation == 0f || mapRotation == 180f) {\r\n            height\r\n        } else {\r\n            width\r\n        } - border\r\n\r\n        val bitmap = files.bitmap(path, w, h) ?: return", "choices": [{"text": " null\r\n\r\n        if (bitmap == null) {\r\n\r\n                bitmap = new Bitmap(w, h, Bitmap.Config.ARGB_8888)\r\n                bitmap.eraseColor(Color.TRANSPARENT)\r\n                bitmap.eraseColor(Color.TRANSPARENT)\r\n                bitmap.eraseColor(Color.TRANSPARENT)\r\n                bitmap.eraseColor(Color.TRANSPARENT)\r\n                bitmap.eraseColor(Color.TRANSPARENT)\r\n                bitmap.eraseColor(Color"}], "metadata": {"task_id": "Trail-Sense/474", "ground_truth": "        image = bitmap.resizeToFit(w, h)\r\n        if (image != bitmap) {\r\n            bitmap.recycle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.infrastructure.fixPerspective\nimport android.graphics.Color\nprivate fun drawPreviewCanvas() {\r\n        val bitmap = image ?: return\r\n        val warped = bitmap.fixPerspective(getBounds(), false, Color.WHITE)\r\n        push()\r\n        translate(-imageX, -imageY)\r\n        val newImageX = (width - warped.width * scale) / 2f\r\n        val newImageY = (height - warped.height * scale) / 2f\r\n        translate(newImageX, newImageY)\r\n        image(warped, 0f, 0f)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/475", "ground_truth": "        pop()\r\n        if (warped != bitmap) {\r\n            warped.recycle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "fun setImage(path: String) {", "choices": [{"text": " {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nfunction saveImage(path: String, data: String) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(path, data, (err, data) => {\n      if (err) {\n        reject(err);\n"}], "metadata": {"task_id": "Trail-Sense/478", "ground_truth": "        imagePath = path\r\n        image = null\r\n        linesLoaded = false\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "fun clearImage() {\r\n        imagePath = null\r\n        val oldImage = image", "choices": [{"text": "\r\n        return oldImage\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/479", "ground_truth": "        image = null\r\n        oldImage?.recycle()\r\n        linesLoaded = false\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "private fun setSelectedUnitText(unit: Units?) {\r\n        if (unit != null) {\r\n            val displayUnit = units.firstOrNull { it.unit == unit }\r\n            if (displayUnit == null) {\r\n                _unit = null\r\n                unitBtn.text = \"\"\r\n            } else {\r\n                unitBtn.text = displayUnit.shortName", "choices": [{"text": ".shortName\r\n            }\r\n        } else {\r\n            _unit = null\r\n            unitBtn.text = \"\"\r\n        }\r\n    }\r\n\r\n    private fun updateUnits() {\r\n        if (_unit!= null) {\r\n            val displayUnit = units.firstOrNull { it.unit == _unit }\r\n            if (displayUnit == null) {\r\n                _unit = null\r\n                unitBtn.text = \"\"\r\n            } else {\r\n                unitBtn.text = displayUnit.shortName\r\n            }"}], "metadata": {"task_id": "Trail-Sense/484", "ground_truth": "            }\r\n        } else {\r\n            unitBtn.text = \"\"\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\UnitInputView.kt"}}
{"prompt": "import androidx.core.view.setPadding\nimport android.widget.LinearLayout\nimport android.view.ViewGroup\nimport android.view.View\nfun linear(\r\n        views: List<View>,\r\n        width: Int = ViewGroup.LayoutParams.MATCH_PARENT,\r\n        height: Int = ViewGroup.LayoutParams.WRAP_CONTENT,\r\n        orientation: Int = LinearLayout.VERTICAL,\r\n        padding: Int = 0\r\n    ): View {\r\n        val layout = LinearLayout(views.first().context)\r\n        layout.layoutParams = ViewGroup.LayoutParams(width, height)\r\n        layout.orientation = orientation\r\n        layout.setPadding(padding, padding, padding, padding)\r\n\r\n        views.forEach { view ->", "choices": [{"text": " layout.addView(view) }\r\n\r\n        return layout\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/486", "ground_truth": "            layout.addView(view)\r\n        }\r\n\r\n        return layout\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Views.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.RiseSetTransitTimes\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMoonTimes(location: Coordinate, date: LocalDate): RiseSetTransitTimes {\r\n        return Astronomy.getMoonEvents(\r\n            date.atStartOfDay().toZonedDateTime(),", "choices": [{"text": " location);\r\n    }\r\n    fun getMoonTimes(location: Coordinate, date: LocalDate): RiseSetTransitTimes {\r\n        return Astronomy.getMoonEvents(\r\n            date.atStartOfDay().toZonedDateTime(), location);\r\n    }\r\n    fun getMoonTimes(location: Coordinate, date: LocalDate): RiseSetTransitTimes {\r\n        return Astronomy.getMoonEvents(\r\n            date.atStartOfDay().toZonedDateTime(), location);\r\n    }\r\n    fun getMoonTimes(location: Coordinate"}], "metadata": {"task_id": "Trail-Sense/491", "ground_truth": "            location,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getCenteredMoonAltitudes(\r\n        location: Coordinate,\r\n        time: ZonedDateTime\r\n    ): List<Reading<Float>> {\r\n        val startTime = time.minusHours(12)\r\n        val endTime = time.plusHours(12)\r\n        return Time.getReadings(\r\n            startTime,\r\n            endTime,", "choices": [{"text": "\r\n            location.getLatitude(),\r\n            location.getLongitude()\r\n        )\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/492", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getMoonAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getMoonAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),", "choices": [{"text": "\r\n            location.getLatitude(),\r\n            location.getLongitude()\r\n        );\r\n    }\r\n    fun getMoonAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),\r\n            location.getLatitude(),\r\n            location.getLongitude()\r\n        );\r\n    }\r\n    fun getMoonAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time."}], "metadata": {"task_id": "Trail-Sense/493", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getMoonAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun isMoonUp(location: Coordinate, time: ZonedDateTime = ZonedDateTime.now(clock)): Boolean {\r\n        return Astronomy.isMoonUp(\r\n            time,", "choices": [{"text": " location\r\n        );\r\n    }\r\n    fun isMoonDown(location: Coordinate, time: ZonedDateTime = ZonedDateTime.now(clock)): Boolean {\r\n        return Astronomy.isMoonDown(\r\n            time,\r\n            location\r\n        );\r\n    }\r\n    fun isMoonLeft(location: Coordinate, time: ZonedDateTime = ZonedDateTime.now(clock)): Boolean {\r\n        return Astronomy.isMoonLeft(\r\n            time,\r\n            location\r\n        );\r\n    }\r\n    fun isMoon"}], "metadata": {"task_id": "Trail-Sense/494", "ground_truth": "            location,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.Astronomy\nimport com.kylecorry.sol.math.Range\nfun getMoonAboveHorizonTimes(location: Coordinate, time: ZonedDateTime): Range<ZonedDateTime>? {\r\n        return Astronomy.getMoonAboveHorizonTimes(\r\n            location,", "choices": [{"text": " time\r\n        );\r\n    }\r\n\r\n    fun getMoonBelowHorizonTimes(location: Coordinate, time: ZonedDateTime): Range<ZonedDateTime>? {\r\n        return Astronomy.getMoonBelowHorizonTimes(\r\n            location,\r\n            time\r\n        );\r\n    }\r\n\r\n    fun getHorizonTimes(location: Coordinate, time: ZonedDateTime): Range<ZonedDateTime>? {\r\n        return Astronomy.getHorizonTimes(\r\n            location,\r\n            time\r\n        );\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/495", "ground_truth": "            time,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.SunTimesMode\nimport com.kylecorry.sol.science.astronomy.RiseSetTransitTimes\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getSunTimes(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date: LocalDate\r\n    ): RiseSetTransitTimes {\r\n        return Astronomy.getSunEvents(\r\n            date.atStartOfDay().toZonedDateTime(),", "choices": [{"text": " location,\r\n            sunTimesMode\r\n        );\r\n    }\r\nfun getSunTimes(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date: ZonedDateTime\r\n    ): RiseSetTransitTimes {\r\n        return Astronomy.getSunEvents(\r\n            date.atStartOfDay().toZonedDateTime(), location,\r\n            sunTimesMode\r\n        );\r\n    }\r\nfun getSunTimes(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date"}], "metadata": {"task_id": "Trail-Sense/496", "ground_truth": "            location,\r\n            sunTimesMode,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.SunTimesMode\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getLengthOfDay(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date: LocalDate\r\n    ): Duration {\r\n        return Astronomy.getDaylightLength(\r\n            date.atStartOfDay().toZonedDateTime(),", "choices": [{"text": "\r\n            location,\r\n            sunTimesMode\r\n        );\r\n    }\r\n    fun getLengthOfDay(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date: ZonedDateTime\r\n    ): Duration {\r\n        return Astronomy.getDaylightLength(\r\n            date.atStartOfDay().toZonedDateTime(),\r\n            location,\r\n            sunTimesMode\r\n        );\r\n    }\r\n    fun getLengthOfDay(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r"}], "metadata": {"task_id": "Trail-Sense/497", "ground_truth": "            location,\r\n            sunTimesMode,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getSunAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),", "choices": [{"text": "\r\n            location\r\n        );\r\n    }\r\n\r\n    fun getSunAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),\r\n            location\r\n        );\r\n    }\r\n\r\n    fun getSunAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),\r\n            location"}], "metadata": {"task_id": "Trail-Sense/498", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getSunAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getCenteredSunAltitudes(\r\n        location: Coordinate,\r\n        time: ZonedDateTime\r\n    ): List<Reading<Float>> {\r\n        val startTime = time.minusHours(12)\r\n        val endTime = time.plusHours(12)\r\n        return Time.getReadings(\r\n            startTime,\r\n            endTime,", "choices": [{"text": "\r\n            location.getLatitude(),\r\n            location.getLongitude()\r\n        )\r\n    }\r\n    fun getSunAltitudes(\r\n        location: Coordinate,\r\n        time: ZonedDateTime\r\n    ): List<Reading<Float>> {\r\n        val startTime = time.minusHours(12)\r\n        val endTime = time.plusHours(12)\r\n        return Time.getReadings(\r\n            startTime,\r\n            endTime,\r\n            location.getLatitude(),\r\n            location.getLongitude()\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/499", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getSunAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMeteorShowerPeakAltitude(peak: MeteorShowerPeak, location: Coordinate): Float {\r\n        return Astronomy.getMeteorShowerAltitude(", "choices": [{"text": "peak, location);\r\n    }\r\n    fun getMeteorShowerPeakAltitude(peak: MeteorShowerPeak, location: Coordinate): Float {\r\n        return Astronomy.getMeteorShowerAltitude(peak, location);\r\n    }\r\n    fun getMeteorShowerPeakAltitude(peak: MeteorShowerPeak, location: Coordinate): Float {\r\n        return Astronomy.getMeteorShowerAltitude(peak, location);\r\n    }\r\n    fun getMeteorShowerPe"}], "metadata": {"task_id": "Trail-Sense/504", "ground_truth": "            peak.shower,\r\n            location,\r\n            peak.peak.toInstant()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMeteorShowerPeakAzimuth(peak: MeteorShowerPeak, location: Coordinate): Bearing {\r\n        return Astronomy.getMeteorShowerAzimuth(", "choices": [{"text": "peak, location);\r\n    }\r\n    fun getMeteorShowerPeakAzimuth(peak: MeteorShowerPeak, location: Coordinate): Bearing {\r\n        return Astronomy.getMeteorShowerAzimuth(peak, location);\r\n    }\r\n    fun getMeteorShowerPeakAzimuth(peak: MeteorShowerPeak, location: Coordinate): Bearing {\r\n        return Astronomy.getMeteorShowerAzimuth(peak, location);\r\n    }\r\n    fun"}], "metadata": {"task_id": "Trail-Sense/505", "ground_truth": "            peak.shower,\r\n            location,\r\n            peak.peak.toInstant()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.LocationSubsystem\nimport com.kylecorry.trail_sense.shared.commands.generic.ComposedCommand\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\noverride suspend fun execute() = onDefault {\r\n        val location = LocationSubsystem.getInstance(context).location\r\n\r\n        if (location == Coordinate.zero) {\r\n            return@onDefault\r\n        }\r\n\r\n        val command = ComposedCommand(\r\n            LunarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),", "choices": [{"text": "\r\n        )\r\n\r\n        command.execute(location)\r\n    }\r\n\r\n    class LunarEclipseAlertCommand extends com.kylecorry.trail_sense.shared.commands.generic.LunarEclipseAlertCommand {\r\n        public LunarEclipseAlertCommand(val context) {\r\n            super(context)\r\n        }\r\n    }\r\n\r\n    class SolarEclipseAlertCommand extends com.kylecorry.trail_sense.shared.commands.generic.SolarEclipseAlertCommand"}], "metadata": {"task_id": "Trail-Sense/512", "ground_truth": "            MeteorShowerAlertCommand(context)\r\n        )\r\n\r\n        command.execute(location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\AstronomyAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.astronomy.domain.Eclipse\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nprivate fun getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val timeSpan = formatService.formatTimeSpan(\r\n            eclipse.start,\r\n            eclipse.end,\r\n            true\r\n        )", "choices": [{"text": "\r\n\r\n        return formatService.formatTimeSpan(\r\n            eclipse.start,\r\n            eclipse.end,\r\n            timeSpan,\r\n            true\r\n        )\r\n    }\r\n\r\n    public static String getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        return getEclipseDescription(context, eclipse)\r\n    }\r\n\r\n    public static String getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        return getEclipseDescription(context, eclipse"}], "metadata": {"task_id": "Trail-Sense/513", "ground_truth": "\r\n        val eclipseAmount = EclipseFormatter.type(context, eclipse)\r\n\r\n        return \"$timeSpan\\n$eclipseAmount\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\LunarEclipseAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FormatService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport android.content.Context\nprivate fun getShowerDescription(context: Context, shower: MeteorShowerPeak): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val peak = formatService.formatRelativeDateTime(shower.peak, includeSeconds = false)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/514", "ground_truth": "\r\n        val rate = context.getString(R.string.meteors_per_hour, shower.shower.rate)\r\n\r\n        return \"$peak\\n$rate\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\MeteorShowerAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.astronomy.domain.Eclipse\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nprivate fun getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val timeSpan = formatService.formatTimeSpan(\r\n            eclipse.start,\r\n            eclipse.end,\r\n            true\r\n        )", "choices": [{"text": "\r\n\r\n        return formatService.formatTimeSpan(\r\n            eclipse.start,\r\n            eclipse.end,\r\n            timeSpan,\r\n            true\r\n        )\r\n    }\r\n\r\n    public static String getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        return getEclipseDescription(context, eclipse)\r\n    }\r\n\r\n    public static String getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        return getEclipseDescription(context, eclipse"}], "metadata": {"task_id": "Trail-Sense/515", "ground_truth": "\r\n        val eclipseAmount = EclipseFormatter.type(context, eclipse)\r\n\r\n        return \"$timeSpan\\n$eclipseAmount\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\SolarEclipseAlertCommand.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.kylecorry.trail_sense.tools.astronomy.infrastructure.commands.SunsetAlarmCommand\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        context ?: return\r\n        val shouldSend = UserPreferences(context).astronomy.sendSunsetAlerts\r\n        if (!shouldSend) {\r\n            return\r\n        }\r\n\r\n        val pendingResult = goAsync()\r\n\r\n        val command = SunsetAlarmCommand(context.applicationContext)\r\n        val scope = CoroutineScope(Dispatchers.Default)\r\n        scope.launch {\r\n            try {\r\n                command.execute()", "choices": [{"text": "\r\n            } catch (Exception e) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n\r\n        if (pendingResult!= null) {\r\n            pendingResult.cancel()\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/518", "ground_truth": "            } finally {\r\n                pendingResult.finish()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\receivers\\SunsetAlarmReceiver.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestScheduleExactAlarms\nimport com.kylecorry.trail_sense.shared.permissions.RequestBackgroundLocationCommand\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nfun <T> enable(\r\n            fragment: T,\r\n            shouldRequestPermissions: Boolean\r\n        ) where T : Fragment, T : IPermissionRequester {\r\n            UserPreferences(fragment.requireContext()).astronomy.sendSunsetAlerts = true\r\n            if (shouldRequestPermissions) {\r\n                fragment.requestScheduleExactAlarms {\r\n                    start(fragment.requireContext())\r\n                    RequestBackgroundLocationCommand(fragment).execute()", "choices": [{"text": "\n                }\r\n            }\r\n        }\r\nfun <T> disable(\r\n            fragment: T,\r\n            shouldRequestPermissions: Boolean\r\n        ) where T : Fragment, T : IPermissionRequester {\r\n            UserPreferences(fragment.requireContext()).astronomy.sendSunsetAlerts = false\r\n            if (shouldRequestPermissions) {\r\n                fragment.requestScheduleExactAlarms {\r\n                    stop(fragment.requireContext())\r\n                    RequestBackgroundLocationCommand(fragment).execute()\r\n                }\r\n            }\r\n        }\r"}], "metadata": {"task_id": "Trail-Sense/520", "ground_truth": "                }\r\n            } else {\r\n                start(fragment.requireContext())\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\receivers\\SunsetAlarmReceiver.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nprivate fun requestLocationUpdate() {\r\n        location = gps.location\r\n        if (gps.hasValidReading) {", "choices": [{"text": "\r\n            if (gps.hasValidReading) {\r\n                reading = gps.getValidReading()\r\n            } else {\r\n                reading = null\r\n            }\r\n        } else {\r\n            location = null\r\n            reading = null\r\n        }\r\n    }\r\n    @Override\r\n    public void onLocationChanged(Location location) {\r\n        this.location = location\r\n    }\r\n    @Override\r\n    public void onProviderDisabled(String provider) {\r\n\r\n    }\r\n    @Override\r\n   "}], "metadata": {"task_id": "Trail-Sense/532", "ground_truth": "            onLocationUpdate()\r\n        } else {\r\n            gps.start(this::onLocationUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "import java.time.LocalDate\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nprivate suspend fun updateMoonUI() {\r\n        if (!isBound) {\r\n            return\r\n        }\r\n\r\n        val displayDate = binding.displayDate.date\r\n\r\n        val moonPhase = withContext(Dispatchers.Default) {\r\n            if (displayDate == LocalDate.now()) {\r\n                astronomyService.getCurrentMoonPhase()\r\n            } else {\r\n                astronomyService.getMoonPhase(displayDate)\r\n            }\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/534", "ground_truth": "\r\n        withContext(Dispatchers.Main) {\r\n            chart.setMoonImage(getMoonImage(moonPhase.phase))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun updateAstronomyDetails() {\r\n        if (!isBound) {\r\n            return\r\n        }\r\n\r\n        val displayDate = binding.displayDate.date\r\n\r\n        onDefault {\r\n            val declination = if (!prefs.compass.useTrueNorth) getDeclination() else 0f\r\n\r\n            val items = producers.map { it.getListItem(displayDate, location, declination) }\r\n\r\n            onMain {", "choices": [{"text": "\r\n                for (var i = 0; i < items.length; i++) {\r\n                    val item = items[i]\r\n\r\n                    if (item!= null) {\r\n                        item.update()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private float getDeclination() {\r\n        if (!isBound) {\r\n            return 0f\r\n        }\r\n\r\n        val declination = binding.declination.value\r\n\r\n        if (declination == 0f) {\r"}], "metadata": {"task_id": "Trail-Sense/537", "ground_truth": "                binding.astronomyDetailList.setItems(items.filterNotNull())\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun restartSunsetAlerts(shouldRequestPermissions: Boolean){\r\n        if (!prefs.astronomy.sendSunsetAlerts) {", "choices": [{"text": ".sendSunsetAlerts) {\r\n                prefs.astronomy.sendSunsetAlerts = shouldRequestPermissions;\r\n                prefs.astronomy.sendSunsetAlerts = shouldRequestPermissions;\r\n                prefs.astronomy.sendSunsetAlerts = shouldRequestPermissions;\r\n                prefs.astronomy.sendSunsetAlerts = shouldRequestPermissions;\r\n                prefs.astronomy.sendSunsetAlerts = shouldRequestPermissions;\r\n                prefs.astronomy.sendSunsetAlerts = shouldRequestPermissions;\r\n                prefs.as"}], "metadata": {"task_id": "Trail-Sense/538", "ground_truth": "            return\r\n        }\r\n\r\n        SunsetAlarmReceiver.enable(this, shouldRequestPermissions)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomySettingsFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.ui.Colors.withAlpha\nimport androidx.core.text.scale\nimport androidx.core.text.color\nimport androidx.core.text.buildSpannedString\nprivate fun title(title: CharSequence, subtitle: CharSequence?): CharSequence {\r\n        return buildSpannedString {\r\n            append(title)\r\n            if (subtitle != null) {\r\n                color(secondaryColor.withAlpha(220)) {\r\n                    scale(subtitleScale) {\r\n                        append(\"  \u2022  \")\r\n                        append(subtitle)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/542", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "import java.time.ZonedDateTime\nprivate fun formatTime(time: ZonedDateTime?): String {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/543", "ground_truth": "        if (time == null) {\r\n            return \"--:--\"\r\n        }\r\n        return formatter.formatTime(time, false)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItemDataAlignment\nimport com.kylecorry.andromeda.views.list.ListItemData\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.views.list.ListIcon\nimport com.google.android.flexbox.JustifyContent\nimport com.google.android.flexbox.AlignItems\nprotected fun list(\r\n        id: Long,\r\n        title: CharSequence,\r\n        subtitle: CharSequence? = null,\r\n        icon: ListIcon? = null,\r\n        data: List<ListItemData> = listOf(),\r\n        onClick: (() -> Unit)? = null\r\n    ): ListItem {\r\n        return ListItem(\r\n            id,\r\n            title(title, subtitle),\r\n            null,\r\n            icon = icon,\r\n            trailingIcon = onClick?.let { ResourceListIcon(R.drawable.ic_keyboard_arrow_right){ onClick() } },\r\n            data = data,\r\n            dataAlignment = ListItemDataAlignment(\r\n                justifyContent = JustifyContent.SPACE_BETWEEN, alignItems = AlignItems.CENTER", "choices": [{"text": ")\r\n            )\r\n        );\r\n    }\r\n\r\n    protected List<ListItemData> listOf(): List<ListItemData> {\r\n        return new ArrayList<>();\r\n    }\r\n\r\n    protected fun title(\r\n        title: CharSequence,\r\n        subtitle: CharSequence? = null\r\n    ): ListItemTitle {\r\n        return new ListItemTitle(\r\n            title,\r\n            subtitle\r\n        );\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/545", "ground_truth": "            )\r\n        ) {\r\n            onClick?.invoke()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ListItemData\nimport com.kylecorry.andromeda.views.list.ListItem\nprotected fun time(\r\n        time: ZonedDateTime?,\r\n        displayDate: LocalDate? = time?.toLocalDate(),\r\n        todayLabel: CharSequence? = null\r\n    ): List<ListItemData> {\r\n        val label = if (time != null && time.toLocalDate() != displayDate) {\r\n            formatter.formatRelativeDate(time.toLocalDate(), true)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/549", "ground_truth": "        } else {\r\n            todayLabel\r\n        }\r\n        return listOf(datapoint(formatTime(time), label))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nsuspend fun getSunCalibrator(location: Coordinate): IARCalibrator = onDefault {\r\n        ARCenteredCalibrator(\r\n            AugmentedRealityCoordinate(\r\n                AugmentedRealityUtils.toEastNorthUp(\r\n                    astro.getSunAzimuth(location).value,\r\n                    astro.getSunAltitude(location),", "choices": [{"text": "\r\n                    astro.getSunRadius(location).value\r\n                ),\r\n                astro.getSunElevation(location).value,\r\n                astro.getSunRadius(location).value\r\n            )\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/550", "ground_truth": "                    Float.MAX_VALUE\r\n                ), true\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCalibratorFactory.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nsuspend fun getMoonCalibrator(location: Coordinate): IARCalibrator = onDefault {\r\n        ARCenteredCalibrator(\r\n            AugmentedRealityCoordinate(\r\n                AugmentedRealityUtils.toEastNorthUp(\r\n                    astro.getMoonAzimuth(location).value,\r\n                    astro.getMoonAltitude(location),", "choices": [{"text": "\r\n                    astro.getMoonHeight(location).value,\r\n                    astro.getMoonWidth(location).value,\r\n                    astro.getMoonHeight(location).value,\r\n                    astro.getMoonWidth(location).value,\r\n                    astro.getMoonHeight(location).value,\r\n                    astro.getMoonWidth(location).value,\r\n                    astro.getMoonHeight(location).value,\r\n                    astro.getMoonWidth(location).value,\r\n                    astro.getMo"}], "metadata": {"task_id": "Trail-Sense/551", "ground_truth": "                    Float.MAX_VALUE\r\n                ), true\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCalibratorFactory.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.views.CameraView\noverride suspend fun calibrateBearing(view: AugmentedRealityView, camera: CameraView): Float {\r\n        val actualReference = AugmentedRealityCoordinate(\r\n            view.getActualPoint(reference.position, true),\r\n            view.isTrueNorth\r\n        )", "choices": [{"text": ".position;\r\n        val reference = AugmentedRealityCoordinate(\r\n            camera.getActualPoint(reference.position, true),\r\n            camera.isTrueNorth\r\n        ).position;\r\n        val bearing = view.getBearing(actualReference, reference);\r\n        return bearing;\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/552", "ground_truth": "        return SolMath.deltaAngle(\r\n            view.azimuth,\r\n            actualReference.bearing\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCenteredCalibrator.kt"}}
{"prompt": "import com.kylecorry.sol.math.Vector2\nprivate fun getFocalLength(): Vector2? {", "choices": [{"text": "{\n\treturn new Vector2(0, 0);\n}\n\npublic class FocalLength {\n\tpublic static void main(String[] args) {\n\t\tFocalLength f = new FocalLength();\n\t\tVector2 v = f.getFocalLength();\n\t\tSystem.out.println(v.x);\n\t\tSystem.out.println(v.y);\n\t\tSystem.out.println(f.getFocalLength().x);\n\t\tSystem.out.println(f.getFocalLength().y);\n\t}\n}"}], "metadata": {"task_id": "Trail-Sense/554", "ground_truth": "        if (focalLength == null) {\r\n            updateCalibration()\r\n        }\r\n        return focalLength\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.sol.math.Vector2\nprivate fun getOpticalCenter(): Vector2? {", "choices": [{"text": "{\n\treturn new Vector2(0,0);\n}\npublic static void main(String[] args){\n\tVector2 center = getOpticalCenter();\n\tSystem.out.println(center);\n}\npublic static Vector2 getOpticalCenter(){\n\treturn new Vector2(0,0);\n}\npublic static Vector2 getOpticalCenter2(){\n\treturn new Vector2(0,0);\n}\npublic static Vector2 getOpticalCenter3(){\n\treturn new Vector2(0,0);\n}\npublic static Vector2 getOpticalCenter4(){"}], "metadata": {"task_id": "Trail-Sense/555", "ground_truth": "        if (opticalCenter == null) {\r\n            updateCalibration()\r\n        }\r\n        return opticalCenter\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport android.graphics.Rect\nprivate fun getPreActiveArraySize(): Rect? {\r\n        if (preActiveArray == null) {\r\n            val activeArray = camera.getActiveArraySize(true) ?: return null\r\n            val rotation = camera.sensorRotation.toInt()\r\n            this.preActiveArray = if (rotation == 90 || rotation == 270) {\r\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            } else {", "choices": [{"text": "\r\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            }\r\n        }\r\n        return preActiveArray\r\n    }\r\n    private fun getPreActiveCameraSize(): Rect? {\r\n        if (preActiveCamera == null) {\r\n            val activeCamera = camera.getActiveCameraSize(true)?: return null\r\n            val rotation = camera.sensorRotation.toInt()\r\n            this.preActiveCamera = if (rotation == 90 || rotation == 270) {\r\n                Rect("}], "metadata": {"task_id": "Trail-Sense/556", "ground_truth": "                activeArray\r\n            }\r\n        }\r\n        return preActiveArray\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport android.graphics.Rect\nprivate fun getActiveArraySize(): Rect? {\r\n        if (activeArray == null) {\r\n            val activeArray = camera.getActiveArraySize(false) ?: return null\r\n            val rotation = camera.sensorRotation.toInt()\r\n            this.activeArray = if (rotation == 90 || rotation == 270) {\r\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            } else {", "choices": [{"text": "\r\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            }\r\n        }\r\n        return activeArray\r\n    }\r\n    private fun getActiveCameraSize(): Rect? {\r\n        if (activeCamera == null) {\r\n            val activeCamera = camera.getActiveCameraSize(false)?: return null\r\n            val rotation = camera.sensorRotation.toInt()\r\n            this.activeCamera = if (rotation == 90 || rotation == 270) {\r\n                Rect(activeCamera.top"}], "metadata": {"task_id": "Trail-Sense/557", "ground_truth": "                activeArray\r\n            }\r\n        }\r\n        return activeArray\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport android.graphics.RectF\noverride fun getAngle(\r\n        x: Float,\r\n        y: Float,\r\n        imageRect: RectF,\r\n        fieldOfView: Size", "choices": [{"text": ",\r\n        imageRect: RectF,\r\n        fieldOfView: Size) {\r\n    return Math.atan2(y, x);\r\n}\r\n\r\noverride fun getAngle(\r\n        x: Float,\r\n        y: Float,\r\n        imageRect: RectF,\r\n        fieldOfView: Size) {\r\n    return Math.atan2(y, x);\r\n}\r\n\r\noverride fun getAngle(\r\n        x: Float,\r\n        y: Float,\r\n        imageRect: RectF,"}], "metadata": {"task_id": "Trail-Sense/565", "ground_truth": "    ): Vector2 {\r\n        // TODO: Inverse perspective?\r\n        return linear.getAngle(x, y, imageRect, fieldOfView)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\SimplePerspectiveCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\noverride fun getAugmentedRealityCoordinate(view: AugmentedRealityView): AugmentedRealityCoordinate {\r\n        return AugmentedRealityCoordinate(\r\n            AugmentedRealityUtils.toEastNorthUp(\r\n                view.location,\r\n                view.altitude,\r\n                location,", "choices": [{"text": "\r\n                altitude\r\n            )\r\n        );\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/570", "ground_truth": "                getActualElevation(view)\r\n            ),\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\position\\GeographicARPoint.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nprivate fun getActualElevation(view: AugmentedRealityView): Float {\r\n        return if (isElevationRelative){", "choices": [{"text": "\r\n            view.getActualElevation();\r\n        } else {\r\n            return view.getActualElevationRelative();\r\n        }\r\n    }\r\n    private fun getElevationRelative(view: AugmentedRealityView) {\r\n        return if (isElevationRelative){\r\n            view.getElevationRelative();\r\n        } else {\r\n            return view.getElevation();\r\n        }\r\n    }\r\n    private fun getElevation(view: AugmentedRealityView) {\r\n        return if (isEle"}], "metadata": {"task_id": "Trail-Sense/571", "ground_truth": "            view.altitude + (elevation ?: 0f)\r\n        } else {\r\n            elevation ?: view.altitude\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\position\\GeographicARPoint.kt"}}
{"prompt": "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding.title.rightButton.setOnClickListener {\r\n            dismiss()\r\n        }\r\n\r\n        val preferences = ARLayersBottomSheetPreferenceFragment()\r\n        preferences.astronomyOverrideDate = astronomyOverrideDate\r\n        preferences.setOnAstronomyDateChangeListener {\r\n            astronomyOverrideDate = it\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/574", "ground_truth": "        replaceChildFragment(\r\n            preferences,\r\n            binding.preferencesFragment.id\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\ARLayersBottomSheet.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.canvas.PixelCircle\nfun getViewLocation(view: AugmentedRealityView): PixelCircle {\r\n        val coordinates = point.getAugmentedRealityCoordinate(view)\r\n        val angularDiameter = point.getAngularDiameter(view)\r\n        val diameter = view.sizeToPixel(angularDiameter)", "choices": [{"text": ";\r\n        return new PixelCircle(coordinates.x, coordinates.y, diameter);\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/576", "ground_truth": "        return PixelCircle(\r\n            view.toPixel(coordinates),\r\n            diameter / 2f\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\ARMarker.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.R\nimport android.view.View\nprivate fun onSunFocused(time: ZonedDateTime): Boolean {\r\n        binding.arView.focusText =\r\n            getString(R.string.sun) + \"\\n\" + formatter.formatRelativeDateTime(", "choices": [{"text": "time);\r\n        binding.arView.focusable = true;\r\n        return true;\r\n}\r\nprivate fun onSunUnfocused(time: ZonedDateTime): Boolean {\r\n        binding.arView.focusable = false;\r\n        binding.arView.focusText =\r\n            getString(R.string.sun) + \"\\n\" + formatter.formatRelativeDateTime(time);\r\n        return true;\r\n}\r\nprivate fun onDayFocused(time: ZonedDateTime): Boolean {\r\n        binding.arView.focusable = true;\r\n        binding"}], "metadata": {"task_id": "Trail-Sense/580", "ground_truth": "                time,\r\n                includeSeconds = false\r\n            )\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.astronomy.moon.MoonPhase\nimport android.view.View\nprivate fun onMoonFocused(time: ZonedDateTime, phase: MoonPhase): Boolean {\r\n        binding.arView.focusText =\r\n            getString(R.string.moon) + \"\\n\" + formatter.formatRelativeDateTime(\r\n                time,\r\n                includeSeconds = false\r\n            ) + \"\\n${formatter.formatMoonPhase(phase.phase)} (${\r\n                formatter.formatPercentage(", "choices": [{"text": "phase.percentage)\r\n            }%)\";\r\n        return true;\r\n    }\r\n    private fun onMoonUnfocused(time: ZonedDateTime, phase: MoonPhase): Boolean {\r\n        binding.arView.focusText =\r\n            getString(R.string.moon) + \"\\n\" + formatter.formatRelativeDateTime(\r\n                time,\r\n                includeSeconds = false\r\n            ) + \"\\n${formatter.formatMoonPhase(phase.phase)} (${\r\n                formatter.formatPercentage(phase.percentage)\r\n            }"}], "metadata": {"task_id": "Trail-Sense/581", "ground_truth": "                    phase.illumination\r\n                )\r\n            })\"\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.dialog\nimport androidx.core.view.isVisible\nimport android.view.View\nprivate fun startCalibration() {\r\n        binding.calibrationPanel.isVisible = true\r\n        val isSunUp = astronomyService.isSunUp(binding.arView.location)\r\n        dialog(\r\n            getString(R.string.calibrate),\r\n            getString(\r\n                R.string.ar_calibration_instructions,\r\n                if (isSunUp) getString(R.string.sun) else getString(R.string.moon)\r\n            ),\r\n        ) { cancelled ->", "choices": [{"text": " {\r\n            binding.calibrationPanel.isVisible = false\r\n            if (binding.calibrationPanel.isVisible) {\r\n                binding.calibrationPanel.setVisibility(View.VISIBLE)\r\n            }\r\n        } }\r\n    }\r\n    private fun stopCalibration() {\r\n        binding.calibrationPanel.isVisible = false\r\n        binding.calibrationPanel.setVisibility(View.GONE)\r\n    }\r\n    @isVisible(R.id.ar_calibration_panel)\r\n    public View getCalibrationPanel() {\r\n        return"}], "metadata": {"task_id": "Trail-Sense/585", "ground_truth": "            if (cancelled) {\r\n                stopCalibration()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nprivate fun calibrate() {\r\n        inBackground {\r\n            val useGyro = userPrefs.augmentedReality.useGyroOnlyAfterCalibration\r\n            val calibrator = if (astronomyService.isSunUp(binding.arView.location)) {\r\n                calibrationFactory.getSunCalibrator(binding.arView.location)\r\n            } else {\r\n                calibrationFactory.getMoonCalibrator(binding.arView.location)", "choices": [{"text": "\r\n            }\r\n            if (useGyro) {\r\n                calibrationFactory.getGyroCalibrator(binding.arView.location)\r\n            } else {\r\n                calibrationFactory.getSunCalibrator(binding.arView.location)\r\n            }\r\n            calibrationFactory.getSunCalibrator(binding.arView.location)\r\n            calibrationFactory.getMoonCalibrator(binding.arView.location)\r\n            calibrationFactory.getMoonCalibrator(binding.arView.location"}], "metadata": {"task_id": "Trail-Sense/586", "ground_truth": "            }\r\n            binding.arView.calibrate(calibrator, useGyro)\r\n            stopCalibration()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.navigation.NavController\nimport androidx.core.os.bundleOf\nimport android.os.Bundle\nfun open(\r\n            navController: NavController,\r\n            mode: ARMode = ARMode.Normal,\r\n            extras: Bundle? = null\r\n        ) {\r\n            navController.navigate(\r\n                R.id.augmentedRealityFragment, bundleOf(", "choices": [{"text": "new Bundle())\r\n            );\r\n        }\r\nfun open(\r\n            navController: NavController,\r\n            mode: ARMode = ARMode.Normal,\r\n            extras: Bundle? = null\r\n        ) {\r\n            navController.navigate(\r\n                R.id.augmentedRealityFragment, bundleOf(new Bundle())\r\n            );\r\n        }\r\nfun open(\r\n            navController: NavController,\r\n            mode: ARMode = ARMode.Normal,\r\n            extras: Bundle? = null\r"}], "metadata": {"task_id": "Trail-Sense/589", "ground_truth": "                    \"mode\" to mode.id,\r\n                    \"extras\" to extras\r\n                )\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.layers.ARLayer\nfun setLayers(layers: List<ARLayer>) {", "choices": [{"text": ";\nimport com.kylecorry.trail_sense.tools.augmented_reality.ui.layers.ARLayer\nimport com.kylecorry.trail_sense.tools.augmented_reality.ui.layers.ARLayer\nimport com.kylecorry.trail_sense.tools.augmented_reality.ui.layers.ARLayer\nimport com.kylecorry.trail_sense.tools.augmented_reality.ui.layers.ARLayer\nimport com.kylecorry.trail_"}], "metadata": {"task_id": "Trail-Sense/592", "ground_truth": "        synchronized(layerLock) {\r\n            this.layers.clear()\r\n            this.layers.addAll(layers)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.text\nprivate fun drawFocusText() {\r\n        val textToRender = focusText ?: return\r\n\r\n        drawText(\r\n            textToRender,", "choices": [{"text": "\r\n            textToRender\r\n        );\r\n    }\r\n\r\n    private fun drawText(\r\n        val text,\r\n        val textToRender\r\n    ) {\r\n        if (textToRender == null) {\r\n            return\r\n        }\r\n\r\n        if (text == null) {\r\n            return\r\n        }\r\n\r\n        if (text.length() == 0) {\r\n            return\r\n        }\r\n\r\n        if (textToRender == null) {\r\n            return\r\n        }\r"}], "metadata": {"task_id": "Trail-Sense/596", "ground_truth": "            width / 2f,\r\n            height / 2f + reticleDiameter / 2f + dp(8f),\r\n            drawer.sp(16f)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "import com.kylecorry.sol.math.Vector3\nfun getActualPoint(point: Vector3, isPointTrueNorth: Boolean): Vector3 {\r\n        return if (isTrueNorth && !isPointTrueNorth) {\r\n            toTrueNorth.rotate(point)\r\n        } else if (!isTrueNorth && isPointTrueNorth) {", "choices": [{"text": "\r\n            toFalseNorth.rotate(point)\r\n        } else if (isTrueNorth && isPointTrueNorth) {\r\n            toTrueNorth.rotate(point)\r\n        } else if (!isTrueNorth &&!isPointTrueNorth) {\r\n            toFalseNorth.rotate(point)\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/599", "ground_truth": "            fromTrueNorth.rotate(point)\r\n        } else {\r\n            point\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "fun unbind() {\r\n        owner?.lifecycle?.removeObserver(lifecycleObserver)\r\n        syncTimer.stop()", "choices": [{"text": ".stop();\r\n    }\r\n\r\n    function lifecycleObserver() {\r\n        owner?.lifecycle?.removeObserver(lifecycleObserver);\r\n        syncTimer.stop();\r\n    }\r\n\r\n    function syncTimer() {\r\n        owner?.sync?.removeObserver(syncObserver);\r\n        syncTimer.stop();\r\n    }\r\n\r\n    function syncObserver() {\r\n        owner?.sync?.removeObserver(syncObserver);\r\n        syncTimer.stop();\r\n    }\r\n\r\n    function owner()"}], "metadata": {"task_id": "Trail-Sense/601", "ground_truth": "        fovRunner.cancel()\r\n        cameraMapper = null\r\n        camera = null\r\n        owner = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.views.CameraView\nimport androidx.lifecycle.findViewTreeLifecycleOwner\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport android.view.ViewGroup\nfun bind(\r\n        camera: CameraView,\r\n        lifecycleOwner: LifecycleOwner? = null,\r\n        defaultLayoutParams: ViewGroup.LayoutParams = ViewGroup.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n    ) {\r\n        this.camera = camera\r\n        owner = lifecycleOwner ?: this.findViewTreeLifecycleOwner() ?: return\r\n\r\n        if (layoutParams == null) {\r\n            layoutParams = defaultLayoutParams", "choices": [{"text": ";\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r\n\r\n        if (owner!= null) {\r\n            owner.onAttachedToWindow()\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDetachedFromWindow() {\r\n        super.onDetachedFromWindow()\r\n\r\n        if (owner!= null) {\r\n            owner.onDetachedFromWindow()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/602", "ground_truth": "        }\r\n\r\n        // Cancel fovRunner on pause\r\n        owner?.lifecycle?.addObserver(lifecycleObserver)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "val orientation\nvar backgroundFillColor Int\nvar hadFocus", "choices": [{"text": "\nvar backgroundColor Int\nvar borderColor Int\nvar borderWidth Int\nvar borderRadius Int\nvar borderStyle Int\nvar borderTopColor Int\nvar borderTopWidth Int\nvar borderBottomColor Int\nvar borderBottomWidth Int\nvar borderLeftColor Int\nvar borderLeftWidth Int\nvar borderRightColor Int\nvar borderRightWidth Int\nvar borderTopLeftColor Int\nvar borderTopLeftWidth Int\nvar borderTopRightColor Int\nvar borderTopRightWidth Int\nvar borderBottomLeftColor Int\nvar borderBottomLeftWidth Int\nvar borderBottomRightColor Int\nvar borderBottomRightWidth"}], "metadata": {"task_id": "Trail-Sense/603", "ground_truth": "override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\r\n        previewRect = null\r\n        syncWithCamera()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        lineLayer.draw(drawer, view)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/617", "ground_truth": "\r\n        labels.forEach {\r\n            drawLabel(drawer, view, it.second, it.first)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARGridLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun getPixel(view: AugmentedRealityView, bearing: Float): PixelCoordinate {\r\n        val offset = 2f\r\n        return view.toPixel(\r\n            AugmentedRealityCoordinate.fromSpherical(\r\n                bearing,\r\n                offset,", "choices": [{"text": "\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n                offset,\r\n               "}], "metadata": {"task_id": "Trail-Sense/618", "ground_truth": "                distance,\r\n                useTrueNorth\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARGridLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.ARLine\nfun setLines(lines: List<ARLine>) {", "choices": [{"text": "(lines: List<ARLine>) {\n  this.lines = lines;\n}\n\nsetLines(lines: List<ARLine>) {\n  this.lines = lines;\n}\n\nsetLines(lines: List<ARLine>) {\n  this.lines = lines;\n}\n\nsetLines(lines: List<ARLine>) {\n  this.lines = lines;\n}\n\nsetLines(lines: List<ARLine>) {\n  this.lines = lines;\n}\n\nsetLines(lines: List<ARLine>) {\n  this."}], "metadata": {"task_id": "Trail-Sense/620", "ground_truth": "        synchronized(lineLock) {\r\n            this.lines.clear()\r\n            this.lines.addAll(lines)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARLineLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.ARMarker\nfun setMarkers(markers: List<ARMarker>) {", "choices": [{"text": " {\n    for (var i = 0; i < markers.length; i++) {\n        if (markers[i] instanceof ARMarker) {\n            markers[i].setVisible(true);\n        } else {\n            markers[i].setVisible(false);\n        }\n    }\n}\n"}], "metadata": {"task_id": "Trail-Sense/623", "ground_truth": "        synchronized(lock) {\r\n            this.markers.clear()\r\n            this.markers.addAll(markers)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride suspend fun update(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        val minimumPixelSize = drawer.dp(minimumDpSize)\r\n        val maximumPixelSize = maximumDpSize?.let { drawer.dp(it) } ?: Float.MAX_VALUE\r\n        renderedMarkers = synchronized(lock) {\r\n            markers.mapNotNull {\r\n                val circle = getCircle(it, view, minimumPixelSize, maximumPixelSize)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/626", "ground_truth": "                    ?: return@mapNotNull null\r\n                it to circle\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.shared.canvas.PixelCircle\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        potentialFocusPoints.clear()\r\n        val center = PixelCoordinate(view.width / 2f, view.height / 2f)\r\n        val reticle = PixelCircle(center, view.reticleDiameter / 2f)\r\n        val markers = synchronized(lock) {\r\n            renderedMarkers.toList()\r\n        }\r\n        markers.forEach {\r\n            it.first.draw(view, drawer, it.second)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/627", "ground_truth": "            if (reticle.intersects(it.second)) {\r\n                potentialFocusPoints.add(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.extensions.squaredDistanceTo\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.SolMath.square\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toLocation(pixel: PixelCoordinate): Coordinate? {\r\n        val squareDistance = pixel.squaredDistanceTo(center)\r\n        if (squareDistance > squareViewDistance) {\r\n            // The point is too far away", "choices": [{"text": "\r\n            return null\r\n        } else {\r\n            return new Coordinate(center.x + squareDistance, center.y + squareDistance)\r\n        }\r\n    }\r\n    private fun toLocation(pixel: PixelCoordinate): Coordinate? {\r\n        val squareDistance = pixel.squaredDistanceTo(center)\r\n        if (squareDistance > squareViewDistance) {\r\n            // The point is too far away\r\n            return null\r\n        } else {\r\n            return new Coordinate(center.x + squareDistance, center.y + squareDistance)\r"}], "metadata": {"task_id": "Trail-Sense/634", "ground_truth": "            return null\r\n        }\r\n\r\n        return projection?.toCoordinate(Vector2(pixel.x, pixel.y))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARPathLayer.kt"}}
{"prompt": "import androidx.room.Entity\nfun from(reading: BatteryReading): BatteryReadingEntity {\r\n            return BatteryReadingEntity(\r\n                reading.percent,", "choices": [{"text": " new BatteryReading(reading.percent)\r\n            );\r\n        }\r\n\r\nexport class BatteryReadingEntity extends Entity {\r\n    constructor(percent: number, reading: BatteryReading) {\r\n        super();\r\n        this.percent = percent;\r\n        this.reading = reading;\r\n    }\r\n\r\n    get percent() {\r\n        return this._percent;\r\n    }\r\n\r\n    set percent(percent: number) {\r\n        this._percent = percent;\r\n    }\r\n\r\n    get reading()"}], "metadata": {"task_id": "Trail-Sense/637", "ground_truth": "                reading.capacity,\r\n                reading.isCharging,\r\n                reading.time\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\BatteryReadingEntity.kt"}}
{"prompt": "import java.time.Duration\nfun getTimeUntilEmpty(capacity: Float, capacityDrainPerHour: Float): Duration? {\r\n        if (capacityDrainPerHour >= 0) {\r\n            return null\r\n        }", "choices": [{"text": " {\r\n                return Duration.ofHours(capacityDrainPerHour);\r\n        } else {\r\n                return Duration.ofHours(capacity);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/638", "ground_truth": "\r\n        val hours = -(capacity / capacityDrainPerHour)\r\n\r\n        return hours(hours.toDouble())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "import java.time.Duration\nprivate fun getRate(\r\n        first: BatteryReading,\r\n        second: BatteryReading,\r\n        hasCapacity: Boolean = first.capacity != 0f\r\n    ): Float? {\r\n        val capacityDiff =\r\n            if (hasCapacity) second.capacity - first.capacity else second.percent - first.percent\r\n        val timeDiff = Duration.between(first.time, second.time).toMillis() / (1000f * 60f * 60f)\r\n\r\n        if (timeDiff == 0f) {\r\n            return null", "choices": [{"text": "\r\n        }\r\n\r\n        if (capacityDiff == 0f) {\r\n            return null\r\n        }\r\n\r\n        return capacityDiff / timeDiff\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/639", "ground_truth": "        }\r\n\r\n        return (capacityDiff / timeDiff)\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.time.Time.hours\nfun getTimeUntilFull(\r\n        capacity: Float,\r\n        maxCapacity: Float,\r\n        capacityGainPerHour: Float\r\n    ): Duration? {\r\n        if (capacityGainPerHour <= 0 && maxCapacity >= capacity) {\r\n            return null\r\n        }\r\n\r\n        val remaining = maxCapacity - capacity\r\n\r\n        val hours = remaining / capacityGainPerHour\r\n\r\n        if (hours < 0){", "choices": [{"text": "\r\n            return null\r\n        }\r\n\r\n        if (remaining < capacityGainPerHour) {\r\n            return null\r\n        }\r\n\r\n        return hours.toDuration()\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/640", "ground_truth": "            return Duration.ZERO\r\n        }\r\n\r\n        return hours(hours.toDouble())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherUpdateScheduler\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.BacktrackScheduler\nimport android.app.Activity\nfun enable(activity: Activity? = null) {\r\n        prefs.isLowPowerModeOn = true\r\n        if (prefs.lowPowerModeDisablesWeather) {\r\n            WeatherUpdateScheduler.stop(context)\r\n        }\r\n\r\n        if (prefs.lowPowerModeDisablesBacktrack) {\r\n            BacktrackScheduler.stop(context)\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/648", "ground_truth": "\r\n        StepCounterService.stop(context)\r\n\r\n        activity?.recreate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\infrastructure\\LowPowerMode.kt"}}
{"prompt": "val lowerPowerMode\nval prefs\n private fun update() {", "choices": [{"text": "\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode\n val powerMode"}], "metadata": {"task_id": "Trail-Sense/651", "ground_truth": "        CustomUiUtils.setButtonState(\r\n            button,\r\n            lowerPowerMode.isEnabled()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\quickactions\\QuickActionLowPowerMode.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onCreate() {\r\n        super.onCreate()\r\n        button.setImageResource(R.drawable.ic_tool_battery)\r\n        button.setOnClickListener {\r\n            if (lowerPowerMode.isEnabled()){\r\n                prefs.power.userEnabledLowPower = false\r\n                lowerPowerMode.disable(fragment.activity)\r\n            } else {\r\n                prefs.power.userEnabledLowPower = true", "choices": [{"text": "\r\n                lowerPowerMode.enable(fragment.activity)\r\n            }\r\n        }\r\n}\r\noverride fun onResume() {\r\n        super.onResume()\r\n        button.setImageResource(R.drawable.ic_tool_battery)\r\n        button.setOnClickListener {\r\n            if (lowerPowerMode.isEnabled()){\r\n                prefs.power.userEnabledLowPower = false\r\n                lowerPowerMode.disable(fragment.activity)\r\n            } else {\r\n                prefs.power.userEnabledLowPower = true"}], "metadata": {"task_id": "Trail-Sense/652", "ground_truth": "                lowerPowerMode.enable(fragment.activity)\r\n            }\r\n        }\r\n        update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\quickactions\\QuickActionLowPowerMode.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.battery.domain.BatteryReading\nimport com.kylecorry.trail_sense.shared.CustomUiUtils.getPrimaryColor\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.views.chart.Chart\nimport com.kylecorry.andromeda.core.system.Resources\nfun plot(readings: List<BatteryReading>, showCapacity: Boolean = false) {\r\n        val data = Chart.getDataFromReadings(readings.map {\r\n            Reading(\r\n                if (showCapacity) it.capacity else it.percent,\r\n                it.time\r\n            )\r\n        }) {\r\n            it\r\n        }\r\n\r\n        val color = Resources.getPrimaryColor(chart.context)\r\n\r\n        chart.plot(", "choices": [{"text": "data, color)\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/654", "ground_truth": "            AreaChartLayer(data, color, color.withAlpha(150)),\r\n        )\r\n\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\ui\\BatteryChart.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.sol.units.Coordinate\nimport androidx.annotation.ColorInt\nimport android.graphics.Color\nfun temporary(\r\n            coordinate: Coordinate,\r\n            id: Long = 0L,\r\n            name: String = \"\",\r\n            visible: Boolean = true,\r\n            comment: String? = null,\r\n            parentId: Long? = null,\r\n            elevation: Float? = null,\r\n            owner: BeaconOwner = BeaconOwner.User,\r\n            @ColorInt color: Int = AppColor.Orange.color,\r\n            icon: BeaconIcon? = null\r\n        ): Beacon {\r\n            return Beacon(\r\n                id,\r\n                name,\r\n                coordinate,\r\n                visible,\r\n                comment,\r\n                parentId,\r\n                elevation,\r\n                true,", "choices": [{"text": " owner,\r\n                @ColorInt color,\r\n                icon\r\n            );\r\n        }\r\n"}], "metadata": {"task_id": "Trail-Sense/659", "ground_truth": "                owner,\r\n                color,\r\n                icon\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\domain\\Beacon.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun navigateTo(beacon: Beacon) {\r\n        val id = if (beacon.id == 0L) {\r\n            onIO {\r\n                beaconService.add(beacon)\r\n            }\r\n        } else {\r\n            beacon.id\r\n        }\r\n\r\n        withContext(mainDispatcher) {\r\n            navigation.navigate(", "choices": [{"text": "id)\r\n        }\r\n    }\r\n\r\n    override resume fun navigateTo(beacon: Beacon) {\r\n        val id = if (beacon.id == 0L) {\r\n            onIO {\r\n                beaconService.remove(beacon)\r\n            }\r\n        } else {\r\n            beacon.id\r\n        }\r\n\r\n        withContext(mainDispatcher) {\r\n            navigation.navigate(id)\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/660", "ground_truth": "                R.id.action_navigation,\r\n                listOf(\"destination\" to id)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\BeaconNavigator.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.Alerts\nfun execute(beacon: Beacon) {\r\n        Alerts.dialog(\r\n            context,\r\n            context.getString(R.string.delete),\r\n            beacon.name\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                scope.launch {\r\n                    onIO {\r\n                        service.delete(beacon)\r\n                    }\r\n                    onMain {\r\n                        onDeleted()", "choices": [{"text": "\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\nfun onDeleted() {\r\n        Alerts.dialog(\r\n            context,\r\n            context.getString(R.string.deleted),\r\n            beacon.name\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                scope.launch {\r\n                    onIO {\r\n                        service.delete(beacon)\r\n                    }\r\n                    onMain {\r\n                        onDeleted()\r\n                    }\r\n                }\r\n            }\r"}], "metadata": {"task_id": "Trail-Sense/661", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\commands\\DeleteBeaconCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun load(search: String?, group: Long?): List<IBeacon> = onIO {\r\n        if (search.isNullOrBlank()) {", "choices": [{"text": "\r\n            search = \"\";\r\n        }\r\n        if (group.isNullOrBlank()) {\r\n            group = 0;\r\n        }\r\n        return Beacon.load(search, group);\r\n    };\r\n\r\noverride suspend fun load(search: String?, group: Long?): List<IBeacon> = onIO {\r\n        if (search.isNullOrBlank()) {\r\n            search = \"\";\r\n        }\r\n        if (group.isNullOrBlank()) {\r\n            group = 0;\r\n"}], "metadata": {"task_id": "Trail-Sense/662", "ground_truth": "            getBeaconsByGroup(group)\r\n        } else {\r\n            getBeaconsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\loading\\BeaconLoader.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate suspend fun getLastSignalBeacon(): Beacon? {\r\n        return if (prefs.showLastSignalBeacon) {", "choices": [{"text": ";\r\n        }\r\n        return if (prefs.lastSignalBeacon == null) {\r\n        return;\r\n        }\r\n        return prefs.lastSignalBeacon;\r\n    }\r\n    private suspend fun setLastSignalBeacon(Beacon beacon) {\r\n        return if (prefs.lastSignalBeacon == beacon) {\r\n        return;\r\n        }\r\n        prefs.lastSignalBeacon = beacon;\r\n    }\r\n    private suspend fun showLastSignalBeacon() {\r\n        return if (prefs.showLast"}], "metadata": {"task_id": "Trail-Sense/664", "ground_truth": "            beaconService.getTemporaryBeacon(BeaconOwner.CellSignal)\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\loading\\BeaconLoader.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nfun toBeacon(): Beacon {\r\n        return Beacon(\r\n            id,\r\n            name,\r\n            coordinate,\r\n            visible,\r\n            comment,\r\n            beaconGroupId,\r\n            elevation,\r\n            temporary = temporary,", "choices": [{"text": "\r\n        );\r\n    }\r\nfun toBeacons(): Array<Beacon> {\r\n        return [\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),\r\n            toBeacon(),"}], "metadata": {"task_id": "Trail-Sense/665", "ground_truth": "            color = color.color,\r\n            owner = owner,\r\n            icon = icon\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconEntity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun addBeacon(beacon: BeaconEntity): Long {\r\n        return if (beacon.id != 0L) {\r\n            beaconDao.update(beacon)", "choices": [{"text": ";\r\n            return beacon.id;\r\n        } else {\r\n            beaconDao.insert(beacon);\r\n            return beacon.id;\r\n        }\r\n    }\r\n\r\n    override suspend fun updateBeacon(beacon: BeaconEntity): Long {\r\n        return if (beacon.id!= 0L) {\r\n            beaconDao.update(beacon);\r\n            return beacon.id;\r\n        } else {\r\n            beaconDao.delete(beacon);\r\n            return beacon.id;\r\n        }\r\n"}], "metadata": {"task_id": "Trail-Sense/667", "ground_truth": "            beacon.id\r\n        } else {\r\n            beaconDao.insert(beacon)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun addBeaconGroup(group: BeaconGroupEntity): Long {\r\n        return if (group.id != 0L) {\r\n            beaconGroupDao.update(group)", "choices": [{"text": ";\r\n            return group.id;\r\n        } else {\r\n            beaconGroupDao.insert(group);\r\n            return group.id;\r\n        }\r\n    }\r\n\r\n    override suspend fun deleteBeaconGroup(group: BeaconGroupEntity): Long {\r\n        return if (group.id!= 0L) {\r\n            beaconGroupDao.delete(group);\r\n            return group.id;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    override suspend fun updateBeacon"}], "metadata": {"task_id": "Trail-Sense/668", "ground_truth": "            group.id\r\n        } else {\r\n            beaconGroupDao.insert(group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun deleteBeaconGroup(group: BeaconGroupEntity) {\r\n        // Delete beacons\r\n        beaconDao.deleteInGroup(group.id)\r\n\r\n        // Delete groups\r\n        val groups = getGroupsWithParent(group.id)\r\n        for (subGroup in groups) {\r\n            deleteBeaconGroup(subGroup)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/669", "ground_truth": "        }\r\n\r\n        // Delete self\r\n        beaconGroupDao.delete(group)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun getBeacons(\r\n        groupId: Long?,\r\n        includeGroups: Boolean,\r\n        maxDepth: Int?,\r\n        includeRoot: Boolean\r\n    ): List<IBeacon> {\r\n        return onIO {\r\n            val root = listOfNotNull(\r\n                if (includeRoot) {\r\n                    loader.getGroup(groupId)\r\n                } else {\r\n                    null\r\n                }\r\n            )\r\n\r\n            val beacons = root + loader.getChildren(groupId, maxDepth)\r\n            if (includeGroups) {\r\n                beacons", "choices": [{"text": ".addAll(loader.getGroups(groupId))\r\n            }\r\n\r\n            return beacons\r\n        }\r\n    }\r\n\r\n    override suspend fun getBeacon(\r\n        id: Long?,\r\n        includeGroups: Boolean,\r\n        maxDepth: Int?,\r\n        includeRoot: Boolean\r\n    ): Beacon {\r\n        return onIO {\r\n            val root = listOfNotNull(\r\n                if (includeRoot) {\r\n                    loader.getGroup(id)\r\n                } else {\r\n                    null"}], "metadata": {"task_id": "Trail-Sense/673", "ground_truth": "            } else {\r\n                beacons.filterNot { it.isGroup }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconService.kt"}}
{"prompt": "private fun hasValidDistanceTo(data: CreateBeaconData): Boolean {\r\n        if (!data.createAtDistance) {\r\n            return true\r\n        }\r\n\r\n        if (data.distanceTo == null) {", "choices": [{"text": ") {\r\n            return true\r\n        }\r\n\r\n        if (data.distanceTo < data.createAtDistance) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    private fun hasValidDistanceFrom(data: CreateBeaconData): Boolean {\r\n        if (!data.createAtDistance) {\r\n            return true\r\n        }\r\n\r\n        if (data.distanceFrom == null) {\r\n            return true\r\n        }\r\n\r\n        if (data.distanceFrom >"}], "metadata": {"task_id": "Trail-Sense/688", "ground_truth": "            return false\r\n        }\r\n\r\n        return data.bearingTo != null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\form\\IsBeaconFormDataComplete.kt"}}
{"prompt": "private fun setCreateMenuVisibility(isShowing: Boolean) {\r\n        if (isShowing) {", "choices": [{"text": "\r\n            document.getElementById('createMenu').style.display = 'block';\r\n        }\r\n        else {\r\n            document.getElementById('createMenu').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private fun toggleCreateMenuVisibility(isShowing: Boolean) {\r\n        if (isShowing) {\r\n            document.getElementById('createMenu').style.display = 'none';\r\n        }\r\n        else {\r\n            document.getElementById('createMenu').style.display = 'block';\r\n        }\r"}], "metadata": {"task_id": "Trail-Sense/692", "ground_truth": "            binding.createMenu.show()\r\n        } else {\r\n            binding.createMenu.hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "var sort\nval beaconLoader\nval beaconService\n override fun onPause() {\r\n        gps.stop(this::onLocationUpdate)", "choices": [{"text": ");\r\n    }\r\n\r\n    function onLocationUpdate() {\r\n        sort();\r\n    }\r\n\r\n    function sort() {\r\n        beaconLoader.loadBeacons();\r\n        beaconService.sortBeacons();\r\n    }\r\n\r\n    function loadBeacons() {\r\n        beaconLoader.loadBeacons();\r\n        beaconService.sortBeacons();\r\n    }\r\n\r\n    function sortBeacons() {\r\n        beaconLoader.sortBeacons();\r\n        beaconService.sort"}], "metadata": {"task_id": "Trail-Sense/694", "ground_truth": "        tryOrNothing {\r\n            lastRoot = manager.root\r\n        }\r\n        super.onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.infrastructure.sort.BeaconSortMethod\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = BeaconSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.beaconSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.beaconSort = sortOptions[newSort]", "choices": [{"text": "\r\n            }\r\n        }\r\n    }\r\n    private static String getSortString(val it) {\r\n        return it.name().toLowerCase();\r\n    }\r\n    private static BeaconSortMethod getSortMethod(val it) {\r\n        return BeaconSortMethod.valueOf(it.name().toLowerCase());\r\n    }\r\n    private static String getSortString(val it) {\r\n        return it.name().toLowerCase();\r\n    }\r\n    private static BeaconSortMethod getSortMethod(val it) {\r\n        return Be"}], "metadata": {"task_id": "Trail-Sense/696", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.infrastructure.commands.DeleteBeaconCommand\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport androidx.lifecycle.lifecycleScope\nprivate fun delete(beacon: Beacon) {\r\n        val command = DeleteBeaconCommand(\r\n            requireContext(),\r\n            lifecycleScope,\r\n            beaconService", "choices": [{"text": ",\r\n            beacon\r\n        );\r\n        return command.execute();\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"Delete Beacon\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescription() {\r\n        return \"Delete a beacon\";\r\n    }\r\n\r\n    @Override\r\n    public String getHelp() {\r\n        return \"Delete a beacon\";\r\n    }\r\n\r\n    @Override\r\n    public String getExample() {\r\n        return \"delete"}], "metadata": {"task_id": "Trail-Sense/702", "ground_truth": "        ) {\r\n            refresh()\r\n        }\r\n        command.execute(beacon)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.infrastructure.commands.MoveBeaconCommand\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport androidx.lifecycle.lifecycleScope\nprivate fun move(beacon: Beacon) {\r\n        val command = MoveBeaconCommand(\r\n            requireContext(),\r\n            lifecycleScope,\r\n            beaconService", "choices": [{"text": ",\r\n            beacon\r\n        );\r\n        return command.execute();\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/703", "ground_truth": "        ) {\r\n            refresh()\r\n        }\r\n        command.execute(beacon)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun toggleVisibility(beacon: Beacon) {\r\n        inBackground {\r\n            val newBeacon = beacon.copy(visible = !beacon.visible)\r\n\r\n            onIO {\r\n                beaconService.add(newBeacon)\r\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/705", "ground_truth": "            onMain {\r\n                refresh()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.Units\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: Beacon): ListItem {\r\n        return value.toListItem(\r\n            context,\r\n            prefs.baseDistanceUnits,\r\n            gps.location,", "choices": [{"text": "\r\n            prefs.baseDistanceUnits\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/709", "ground_truth": "            true\r\n        ) {\r\n            actionHandler(value, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListItemMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IBeacon): ListItem {\r\n        return if (value is Beacon) {", "choices": [{"text": "\r\n            return new Beacon(value);\r\n        } else if (value instanceof IBeacon) {\r\n            return new Beacon((IBeacon) value);\r\n        } else {\r\n            return new Beacon(value);\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/711", "ground_truth": "            beaconMapper.map(value)\r\n        } else {\r\n            groupMapper.map(value as BeaconGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\IBeaconListItemMapper.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun loadExistingBeacon() {\r\n        // TODO: Prevent interaction until loaded\r\n        editingBeaconId?.let {\r\n            inBackground {\r\n                val beacon = onIO {\r\n                    beaconService.getBeacon(it)\r\n                }\r\n\r\n                onMain {\r\n                    beacon?.let {\r\n                        setEditingBeaconValues(it)", "choices": [{"text": "\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setEditingBeaconValues(int editingBeaconId) {\r\n        editingBeaconId?.let {\r\n            inBackground {\r\n                val beacon = onIO {\r\n                    beaconService.getBeacon(editingBeaconId)\r\n                }\r\n\r\n                onMain {\r\n                    beacon?.let {\r\n                        setEditingBeaconValues(beacon)\r\n                    }\r\n                }\r\n            }\r\n"}], "metadata": {"task_id": "Trail-Sense/713", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateBeaconGroupName() {\r\n        val parent = form.data.groupId\r\n        inBackground {\r\n            val name = onIO {\r\n                if (parent == null) {\r\n                    getString(R.string.no_group)\r\n                } else {\r\n                    beaconService.getGroup(parent)?.name ?: \"\"\r\n                }\r\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/718", "ground_truth": "            onMain {\r\n                binding.beaconGroupPicker.text = name\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun onSubmit() {\r\n        val beacon = form.data.toBeacon() ?: return\r\n        inBackground {\r\n            onIO {\r\n                beaconService.add(beacon)\r\n            }\r\n\r\n            onMain {", "choices": [{"text": "\r\n                finish()\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume()\r\n        form.data.onResume()\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause()\r\n        form.data.onPause()\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy()\r\n        form.data.onDestroy()\r"}], "metadata": {"task_id": "Trail-Sense/720", "ground_truth": "                backCallback.remove()\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.CustomUiUtils\nimport com.kylecorry.trail_sense.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        CustomUiUtils.disclaimer(\r\n            requireContext(),\r\n            getString(R.string.disclaimer_message_title),\r\n            getString(R.string.tool_cliff_height_disclaimer),\r\n            \"cache_dialog_tool_cliff_height\",\r\n            considerShownIfCancelled = true,", "choices": [{"text": "\r\n            dismissOnCancel = true\r\n        );\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/724", "ground_truth": "            cancelText = null\r\n        )\r\n\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\cliffheight\\ui\\ToolCliffHeightFragment.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Temperature\noverride suspend fun calculate(time: ZonedDateTime): Temperature {\r\n        val existing = calculators.firstOrNull { it.first.contains(time) }\r\n        val calculator = if (existing == null) {\r\n            val newCalculator = createCalculator(time)\r\n            calculators.add(newCalculator)\r\n            newCalculator.second", "choices": [{"text": ".add(time)\r\n        } else {\r\n            val newCalculator = createCalculator(time)\r\n            existing.add(newCalculator)\r\n            newCalculator.second.add(time)\r\n        }\r\n        return calculator.second.get();\r\n    }\r\n\r\n    private static val createCalculator(ZonedDateTime time) {\r\n        return new Calculator(time);\r\n    }\r\n\r\n    private static class Calculator {\r\n        private final ZonedDateTime time;\r\n\r\n        private Calculator(ZonedDateTime time) {\r\n"}], "metadata": {"task_id": "Trail-Sense/728", "ground_truth": "        } else {\r\n            existing.second\r\n        }\r\n        return calculator.calculate(time)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\calculators\\DailyTemperatureCalculator.kt"}}
{"prompt": "import java.time.Month\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Coordinate\nimport android.content.Context\nprivate suspend fun load(\r\n        context: Context,\r\n        location: Coordinate,\r\n        type: String\r\n    ): Map<Month, Float> = onIO {\r\n        val loaded = mutableMapOf<Month, Float>()\r\n\r\n        for ((extension, months) in extensionMap) {\r\n            val file = \"temperatures/$type-${extension}.webp\"\r\n            val source = if (type == lowType) lowSource else highSource\r\n            val data = source.read(context, file, location)\r\n            loaded[months.first] = data[0]\r\n            loaded[months.second] = data[1]", "choices": [{"text": "\r\n            loaded[months.third] = data[2]\r\n            loaded[months.fourth] = data[3]\r\n            loaded[months.fifth] = data[4]\r\n            loaded[months.sixth] = data[5]\r\n            loaded[months.seventh] = data[6]\r\n            loaded[months.eighth] = data[7]\r\n            loaded[months.ninth] = data[8]\r\n            loaded[months.tenth] = data[9]\r"}], "metadata": {"task_id": "Trail-Sense/731", "ground_truth": "            loaded[months.third] = data[2]\r\n        }\r\n\r\n        loaded\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricMonthlyTemperatureRangeRepo.kt"}}
{"prompt": "import java.time.Month\nimport java.time.LocalDate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Range\noverride suspend fun getYearlyTemperatures(\r\n        year: Int,\r\n        location: Coordinate\r\n    ): List<Pair<LocalDate, Range<Temperature>>> = onDefault {\r\n        val monthly =\r\n            HistoricMonthlyTemperatureRangeRepo.getMonthlyTemperatureRanges(context, location)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/732", "ground_truth": "\r\n        Time.getYearlyValues(year) {\r\n            getDailyRange(location, it, monthly)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricTemperatureRepo.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.tools.climate.infrastructure.temperatures.calculators.DailyTemperatureCalculator\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatures(\r\n        location: Coordinate,\r\n        start: ZonedDateTime,\r\n        end: ZonedDateTime\r\n    ): List<Reading<Temperature>> {\r\n        val calculator = DailyTemperatureCalculator(location, this::getDailyRange)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/733", "ground_truth": "\r\n        return Time.getReadings(start, end, Duration.ofMinutes(10)) {\r\n            calculator.calculate(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricTemperatureRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Distance\noverride fun onResume() {\r\n        super.onResume()\r\n        if (distanceAway == null && knownHeight == null) {\r\n            distanceAway = prefs.clinometer.baselineDistance\r\n            CustomUiUtils.setButtonState(\r\n                binding.clinometerTitle.rightButton, distanceAway != null\r\n            )\r\n        }\r\n\r\n        if (useCamera) {", "choices": [{"text": "\r\n            if (distanceAway == null) {\r\n                distanceAway = prefs.clinometer.baselineDistance\r\n                CustomUiUtils.setButtonState(\r\n                    binding.clinometerTitle.rightButton, distanceAway!= null\r\n                )\r\n            }\r\n        }\r\n}\r\noverride fun onPause() {\r\n        super.onPause()\r\n        if (distanceAway!= null) {\r\n            CustomUiUtils.setButtonState(\r\n                binding.clinometerTitle.rightButton, distanceA"}], "metadata": {"task_id": "Trail-Sense/745", "ground_truth": "            startCameraClinometer(false)\r\n        } else {\r\n            startSideClinometer()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "val orientation\nval sensorService\nval deviceOrientation\n override fun onPause() {\r\n        super.onPause()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/746", "ground_truth": "        if (useCamera) {\r\n            binding.camera.stop()\r\n            binding.arView.stop()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "override fun draw() {\r\n        push()\r\n        drawBackground()\r\n        drawTicks()\r\n        drawNeedle(angle)\r\n\r\n        drawLabels()\r\n\r\n        push()\r\n        rotate(180f)", "choices": [{"text": "\r\n        pop()\r\n}\r\n\r\noverride fun update() {\r\n\r\n}\r\n\r\noverride fun drawBackground() {\r\n\r\n}\r\n\r\noverride fun drawTicks() {\r\n\r\n}\r\n\r\noverride fun drawNeedle(angle) {\r\n\r\n}\r\n\r\noverride fun drawLabels() {\r\n\r\n}\r\n\r\noverride fun keyPressed() {\r\n\r\n}\r\n\r\noverride fun keyReleased() {\r\n\r\n}\r\n\r\noverride fun keyTyped() {\r\n\r"}], "metadata": {"task_id": "Trail-Sense/756", "ground_truth": "        drawLabels()\r\n        pop()\r\n\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "private fun drawAvalancheZone(start: Float, stop: Float, color: Int) {\r\n        val x = width / 2f - radius\r\n        val y = height / 2f - radius\r\n        val d = radius * 2", "choices": [{"text": ";\r\n\r\n        if (color == 0) {\r\n                x = start;\r\n                y = stop;\r\n        }\r\n\r\n        if (color == 1) {\r\n                x = stop;\r\n                y = start;\r\n        }\r\n\r\n        if (color == 2) {\r\n                x = start;\r\n                y = stop;\r\n        }\r\n\r\n        if (color == 3) {\r\n                x = stop;\r\n                y = start;\r\n        }\r\n\r\n        if ("}], "metadata": {"task_id": "Trail-Sense/757", "ground_truth": "        noStroke()\r\n        fill(color)\r\n        opacity(150)\r\n        arc(x, y, d, d, start, stop)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "val tickInterval\nvar tickLength\nval needlePercent\n private fun drawTicks() {\r\n        strokeWeight(dp(2f))", "choices": [{"text": ".5);\r\n        fill(0);\r\n        for (var i = 0; i < tickLength; i++) {\r\n                if (i % tickInterval == 0) {\r\n                        fill(255);\r\n                } else {\r\n                        fill(0);\r\n                }\r\n        }\r\n        for (var i = 0; i < needlePercent; i++) {\r\n                if (i % tickInterval == 0) {\r\n                        fill(255);\r\n                } else {\r\n                        fill(0);\r\n                }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/758", "ground_truth": "        stroke(Color.WHITE)\r\n        opacity(255)\r\n        noFill()\r\n        path(tickPath)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "import kotlin.math.min\nimport android.util.TypedValue\nprivate fun initClock() {\r\n        padding = numeralSpacing + 50\r\n        fontSize = TypedValue.applyDimension(\r\n            TypedValue.COMPLEX_UNIT_SP, 13f,\r\n            resources.displayMetrics\r\n        ).toInt()\r\n        val min = min(height, width)\r\n        radius = min / 2 - padding", "choices": [{"text": "\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min / 2 - padding\r\n        numeralSpacing = min"}], "metadata": {"task_id": "Trail-Sense/761", "ground_truth": "        handTruncation = min / 20\r\n        hourHandTruncation = min / 7\r\n        paint = Paint()\r\n        isInit = true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\ui\\ClockView.kt"}}
{"prompt": "import android.graphics.Color\nimport android.graphics.Canvas\nvar paint Paint\nval numeralSpacing\nvar padding\noverride fun onDraw(canvas: Canvas) {\r\n        if (!isInit) {\r\n            initClock()\r\n        }\r\n        canvas.drawColor(Color.TRANSPARENT)\r\n        drawNumeral(canvas)", "choices": [{"text": "\r\n        super.onDraw(canvas: Canvas)\r\n    }\r\n    drawNumeral(canvas: Canvas) {\r\n        if (!isInit) {\r\n            initClock()\r\n        }\r\n        canvas.drawColor(Color.TRANSPARENT)\r\n        canvas.drawRect(padding, padding, numeralSpacing, numeralSpacing, paint)\r\n        super.drawNumeral(canvas)\r\n    }\r\n    initClock() {\r\n        if (!isInit) {\r\n            isInit = true\r\n        }\r\n"}], "metadata": {"task_id": "Trail-Sense/762", "ground_truth": "        drawHands(canvas)\r\n        drawCenter(canvas)\r\n        postInvalidateDelayed(20)\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\ui\\ClockView.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<CloudObservation>): Long = onIO {\r\n        val entity = CloudReadingEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            dao.update(entity)\r\n            entity.id\r\n        } else {", "choices": [{"text": "\r\n            dao.insert(entity)\r\n            entity.id\r\n        }\r\n\r\n        return id\r\n    }\r\n\r\n    override suspend fun remove(id: Long): Long = onIO {\r\n        val entity = dao.findById(id)\r\n\r\n        if (entity!= null) {\r\n            dao.delete(entity)\r\n        }\r\n\r\n        return id\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/773", "ground_truth": "            dao.insert(entity)\r\n        }\r\n        _readingsChanged.publish()\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\infrastructure\\persistence\\CloudRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun setupCreateMenu() {\r\n        binding.addMenu.setOverlay(binding.overlayMask)\r\n        binding.addMenu.fab = binding.addBtn\r\n        binding.addMenu.hideOnMenuOptionSelected = true\r\n        binding.addMenu.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_cloud_camera -> addFromCamera()\r\n                R.id.action_cloud_file -> addFromFile()", "choices": [{"text": "\r\n                R.id.action_cloud_video -> addFromVideo()\r\n                R.id.action_cloud_audio -> addFromAudio()\r\n            }\r\n        }\r\n        binding.addMenu.setOnMenuItemLongClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_cloud_camera -> addFromCamera()\r\n                R.id.action_cloud_file -> addFromFile()\r\n                R.id.action_cloud_video -> addFromVideo()\r\n                R.id.action"}], "metadata": {"task_id": "Trail-Sense/779", "ground_truth": "                R.id.action_cloud_manual -> addManual()\r\n            }\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.io.FragmentUriPicker\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.BackgroundMinimumState\nimport androidx.navigation.fragment.findNavController\nimport androidx.core.net.toUri\nprivate fun addFromFile() {\r\n        inBackground(BackgroundMinimumState.Created) {\r\n            val uri =\r\n                FragmentUriPicker(this@CloudFragment).open(listOf(\"image/*\"))\r\n            val temp = uri?.let { onIO { files.copyToTemp(it) }?.toUri() }\r\n            temp?.let {\r\n                findNavController().navigate(\r\n                    R.id.action_cloud_to_cloud_picker,", "choices": [{"text": "\r\n                    R.id.action_cloud_to_cloud_picker,\r\n                    null\r\n                )\r\n            }\r\n        }\r\n    }\r\n    private fun removeFromFile() {\r\n        inBackground(BackgroundMinimumState.Created) {\r\n            val uri =\r\n                FragmentUriPicker(this@CloudFragment).open(listOf(\"image/*\"))\r\n            val temp = uri?.let { onIO { files.deleteFromTemp(it) }?.toUri() }\r\n            temp?.let {\r\n                findNav"}], "metadata": {"task_id": "Trail-Sense/780", "ground_truth": "                    bundleOf(\"image\" to it)\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudObservation\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\nprivate fun delete(reading: Reading<CloudObservation>) {\r\n        inBackground {\r\n            val cancelled = onMain {\r\n                CoroutineAlerts.dialog(\r\n                    requireContext(),\r\n                    getString(R.string.delete),\r\n                    cloudDetailsService.getCloudName(reading.value.genus)\r\n                )\r\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/782", "ground_truth": "            if (!cancelled) {\r\n                repo.delete(reading)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "import com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nimport com.kylecorry.andromeda.alerts.Alerts\nval details\nfun show(cloud: CloudGenus?) {\r\n        if (cloud != null) {\r\n            Alerts.image(\r\n                context,", "choices": [{"text": " cloud.name,\r\n                cloud.description,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud.imageUrl,\r\n                cloud."}], "metadata": {"task_id": "Trail-Sense/783", "ground_truth": "                details.getCloudName(cloud),\r\n                details.getCloudImage(cloud)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudImageModal.kt"}}
{"prompt": "import com.kylecorry.sol.science.meteorology.clouds.CloudGenus\noverride fun onResume() {\r\n        super.onResume()\r\n        if (uri != null && selection.isEmpty()) {\r\n            analyze()\r\n        } else {\r\n            selection = CloudGenus.values().map { CloudSelection(it, null, false) } + listOf(\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false", "choices": [{"text": "),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    true),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false),\r"}], "metadata": {"task_id": "Trail-Sense/785", "ground_truth": "                )\r\n            )\r\n            updateItems()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudObservation\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun save() {\r\n        inBackground {\r\n            val readings =\r\n                selection.filter { it.isSelected }\r\n                    .map { Reading(CloudObservation(0, it.genus), time) }\r\n            readings.forEach {\r\n                repo.add(it)\r\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/786", "ground_truth": "            onMain {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "fun update() {\r\n        val coordinate = binding.coordinateEdit.coordinate\r\n        val to = formats[binding.toUnits.selectedItemPosition]\r\n\r\n        if (coordinate == null) {\r\n            binding.result.text = \"\"", "choices": [{"text": "\r\n            return\r\n        }\r\n\r\n        if (to == null) {\r\n            binding.result.text = \"\"\r\n            return\r\n        }\r\n\r\n        binding.result.text = to.format(coordinate)\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/795", "ground_truth": "            return\r\n        }\r\n\r\n        binding.result.text = formatService.formatLocation(coordinate, to)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\convert\\ui\\FragmentToolCoordinateConvert.kt"}}
{"prompt": "import java.time.Duration\nprivate fun off(bySystem: Boolean = false) = synchronized(modeLock) {\r\n        clearTimeout()\r\n        if (!bySystem) {\r\n            isTransitioning = true\r\n            transitionTimer.once(transitionDuration)\r\n        } else {\r\n            isTransitioning = false\r\n            transitionTimer.stop()", "choices": [{"text": "\r\n        }\r\n}\r\nprivate fun on(bySystem: Boolean = false) = synchronized(modeLock) {\r\n        clearTimeout()\r\n        if (!bySystem) {\r\n            isTransitioning = true\r\n            transitionTimer.once(transitionDuration)\r\n        } else {\r\n            isTransitioning = false\r\n            transitionTimer.stop()\r\n        }\r\n}"}], "metadata": {"task_id": "Trail-Sense/809", "ground_truth": "        }\r\n        _mode.publish(FlashlightMode.Off)\r\n        FlashlightService.stop(context)\r\n        torch?.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nimport com.kylecorry.andromeda.torch.Torch\nval _mode\nval mode ITopic<FlashlightMode>\nvar torch ITorch?\noverride fun toggle() {\r\n        if (getMode() == FlashlightMode.Torch) {", "choices": [{"text": "\r\n                setMode(FlashlightMode.Torch);\r\n        } else {\r\n                setMode(FlashlightMode.Flashlight);\r\n        }\r\n}\r\n\r\nval _torch\nval torch ITorch?\noverride fun toggle() {\r\n        if (getMode() == FlashlightMode.Torch) {\r\n                setMode(FlashlightMode.Flashlight);\r\n        } else {\r\n                setMode(FlashlightMode.Torch);\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/810", "ground_truth": "            off()\r\n        } else {\r\n            set(FlashlightMode.Torch)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\noverride fun set(mode: FlashlightMode) {", "choices": [{"text": " {\n  switch (mode) {\n    case FlashlightMode.off:\n      return;\n    case FlashlightMode.on:\n      return;\n    case FlashlightMode.auto:\n      return;\n    default:\n      return;\n  }\n}\n"}], "metadata": {"task_id": "Trail-Sense/811", "ground_truth": "        when (mode) {\r\n            FlashlightMode.Off -> off()\r\n            else -> on(mode)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.sol.math.SolMath\ninternal fun turnOn() = synchronized(torchLock) {\r\n        if (brightnessLevels > 0) {\r\n            val mapped = SolMath.map(brightness, 0f, 1f, 1f / (brightnessLevels + 1), 1f)", "choices": [{"text": ", 1f);\r\n            brightness = mapped;\r\n        }\r\n    };\r\n    internal fun turnOff() = synchronized(torchLock) {\r\n        if (brightnessLevels > 0) {\r\n            val mapped = SolMath.map(brightness, 0f, 1f, 1f / (brightnessLevels + 1), 0f);\r\n            brightness = mapped;\r\n        }\r\n    };\r\n    internal fun toggle() = synchronized(torchLock) {\r\n        if (brightnessLevels > 0) {\r\n           "}], "metadata": {"task_id": "Trail-Sense/813", "ground_truth": "            torch?.on(mapped)\r\n        } else {\r\n            torch?.on()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nimport com.kylecorry.andromeda.torch.Torch\nimport com.kylecorry.andromeda.core.tryOrLog\nprivate fun onTorchStateChanged(enabled: Boolean): Boolean {\r\n        tryOrLog {\r\n            synchronized(modeLock) {\r\n                if (isTransitioning) {\r\n                    return@tryOrLog\r\n                }\r\n            }\r\n\r\n            if (!enabled && getMode() == FlashlightMode.Torch) {\r\n                off(true)\r\n            }\r\n\r\n            if (enabled && getMode() == FlashlightMode.Off) {\r\n                setBrightness(1f)", "choices": [{"text": "\r\n            }\r\n\r\n            if (enabled && getMode() == FlashlightMode.Torch) {\r\n                on(true)\r\n            }\r\n\r\n            if (enabled && getMode() == FlashlightMode.On) {\r\n                setBrightness(0f)\r\n            }\r\n\r\n            if (enabled && getMode() == FlashlightMode.Off) {\r\n                off(false)\r\n            }\r\n\r\n            if (enabled && getMode() == FlashlightMode.On) {\r\n                on(false)\r\n            }"}], "metadata": {"task_id": "Trail-Sense/814", "ground_truth": "                on(FlashlightMode.Torch, true)\r\n            }\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "override fun setBrightness(brightness: Float) {\r\n        prefs.flashlight.brightness = brightness", "choices": [{"text": "\r\n        prefs.flashlight.brightness = brightness;\r\n    }\r\n\r\n    override fun setBrightness(brightness: String) {\r\n        prefs.flashlight.brightness = parseFloat(brightness);\r\n    }\r\n\r\n    override fun setBrightness(brightness: Number) {\r\n        prefs.flashlight.brightness = brightness;\r\n    }\r\n\r\n    override fun setBrightness(brightness: Boolean) {\r\n        prefs.flashlight.brightness = brightness;\r\n    }\r\n\r\n    override"}], "metadata": {"task_id": "Trail-Sense/815", "ground_truth": "        this.brightness = brightness\r\n        if (getMode() == FlashlightMode.Torch) {\r\n            turnOn()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.trail_sense.R\nprivate fun setTimeout() {\r\n        if (prefs.flashlight.shouldTimeout) {\r\n            cache.putInstant(\r\n                context.getString(R.string.pref_flashlight_timeout_instant),\r\n                Instant.now().plus(prefs.flashlight.timeout)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/816", "ground_truth": "            )\r\n        } else {\r\n            clearTimeout()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.safeRoundToInt\nimport com.kylecorry.trail_sense.R\nprivate fun updateBrightness(value: Float? = null) {\r\n        if (hasBrightnessControl) {\r\n            brightness = value ?: prefs.flashlight.brightness\r\n            binding.brightnessSeek.progress = (brightness * maxBrightness).safeRoundToInt()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/827", "ground_truth": "        } else {\r\n            brightness = 1f\r\n        }\r\n        flashlight.setBrightness(brightness)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolFlashlight.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nfun toggle() {\r\n        haptics.click()\r\n        if (flashlight.getMode() != FlashlightMode.Off) {", "choices": [{"text": "\r\n                flashlight.setMode(FlashlightMode.Off)\r\n        } else {\r\n                flashlight.setMode(FlashlightMode.On)\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Trail-Sense/828", "ground_truth": "            turnOff()\r\n        } else {\r\n            turnOn()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolFlashlight.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.infrastructure.FlashlightSubsystem\noverride fun onButtonPress() {\r\n        if (fragment == null) {\r\n            val flashlight = FlashlightSubsystem.getInstance(context)", "choices": [{"text": "\r\n            if (flashlight!= null) {\r\n                flashlight.onButtonPress();\r\n            }\r\n        }\r\n        super.onButtonPress();\r\n}\r\noverride fun onButtonRelease() {\r\n        if (fragment == null) {\r\n            val flashlight = FlashlightSubsystem.getInstance(context);\r\n            if (flashlight!= null) {\r\n                flashlight.onButtonRelease();\r\n            }\r\n        }\r\n        super.onButtonRelease();\r\n}\r\noverride fun onButtonDoubleClick() {\r"}], "metadata": {"task_id": "Trail-Sense/833", "ground_truth": "            flashlight.toggle()\r\n        } else {\r\n            fragment.toggle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\volumeactions\\FlashlightToggleVolumeAction.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.navigation.fragment.findNavController\nimport androidx.fragment.app.Fragment\nimport androidx.core.os.bundleOf\nimport androidx.annotation.RawRes\nimport android.content.Context\nfun openGuide(fragment: Fragment, @RawRes guideId: Int) {\r\n        val navController = fragment.findNavController()\r\n        val guides = Guides.guides(fragment.requireContext())\r\n\r\n        val guide = guides.flatMap { it.guides }.firstOrNull { it.contents == guideId }\r\n\r\n        if (guide != null) {\r\n            navController.navigate(\r\n                R.id.guideFragment, bundleOf(\r\n                    \"guide_name\" to guide.name,", "choices": [{"text": " \"guide_id\" to guide.id,\r\n                    \"guide_contents\" to guide.contents,\r\n                )\r\n            )\r\n        } else {\r\n            navController.navigate(\r\n                R.id.guideFragment, bundleOf(\r\n                    \"guide_name\" to guide.name,\r\n                    \"guide_id\" to guide.id,\r\n                    \"guide_contents\" to guide.contents,\r\n                )\r\n            )\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/836", "ground_truth": "                    \"guide_contents\" to guide.contents\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\infrastructure\\UserGuideUtils.kt"}}
{"prompt": "import androidx.preference.Preference\nprivate fun onClick(pref: Preference?, action: () -> Unit) {", "choices": [{"text": ") {\n  pref.onClick(action)\n}\nexport default onClick\n"}], "metadata": {"task_id": "Trail-Sense/842", "ground_truth": "        pref?.setOnPreferenceClickListener {\r\n            action.invoke()\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\ui\\GuideListPreferenceFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.optics.Optics\nprivate fun updateGradients(){\r\n        val intensities = (1..100).map {\r\n            val distance = if (units == DistanceUnits.Feet) it * 3 else it\r\n            Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/849", "ground_truth": "        // TODO: Calculate distance of each intensity description\r\n\r\n\r\n        gradient = getColors(intensities)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\light\\ui\\LightBarView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.lightning.domain.LightningStrike\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<LightningStrike>): Long = onIO {\r\n        val entity = LightningStrikeEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            dao.update(entity)\r\n            entity.id", "choices": [{"text": " = 0L;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    override suspend fun update(reading: Reading<LightningStrike>): Long = onIO {\r\n        val entity = LightningStrikeEntity.from(reading)\r\n\r\n        val id = if (entity.id!= 0L) {\r\n            dao.update(entity)\r\n            entity.id = 0L;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    override suspend fun delete(id: Long):"}], "metadata": {"task_id": "Trail-Sense/851", "ground_truth": "        } else {\r\n            dao.insert(entity)\r\n        }\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\infrastructure\\persistence\\LightningRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()", "choices": [{"text": "{\r\n        super.onResume();\r\n        R.drawable.ic_launcher;\r\n        R.drawable.ic_launcher2;\r\n        R.drawable.ic_launcher3;\r\n        R.drawable.ic_launcher4;\r\n        R.drawable.ic_launcher5;\r\n        R.drawable.ic_launcher6;\r\n        R.drawable.ic_launcher7;\r\n        R.drawable.ic_launcher8;\r\n        R.drawable."}], "metadata": {"task_id": "Trail-Sense/860", "ground_truth": "        units = prefs.baseDistanceUnits\r\n        reset(true)\r\n        loadLastStrike()\r\n        timer.interval(20)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\ui\\FragmentToolLightning.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nfun getMagnifierPosition(tapPosition: PixelCoordinate): PixelCoordinate {\r\n        val x = if (tapPosition.x > imageSize.width / 2) {\r\n            0f\r\n        } else {", "choices": [{"text": " {\r\n            tapPosition.x - imageSize.width / 2\r\n        }\r\n        val y = if (tapPosition.y > imageSize.height / 2) {\r\n            0f\r\n        } else {\r\n            tapPosition.y - imageSize.height / 2\r\n        }\r\n        return new PixelCoordinate(x, y)\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/864", "ground_truth": "            imageSize.width - magnifierSize.width\r\n        }\r\n\r\n        return PixelCoordinate(x, 0f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\ImageMagnifier.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.graphics.Color\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nfun magnify(\r\n        source: Bitmap,\r\n        sourceCenter: PixelCoordinate,\r\n        dest: Bitmap = Bitmap.createBitmap(\r\n            magnifierSize.width.toInt(),\r\n            magnifierSize.height.toInt(),\r\n            Bitmap.Config.ARGB_8888\r\n        )\r\n    ): Bitmap {\r\n        val canvas = Canvas(dest)\r\n        canvas.drawColor(Color.BLACK)\r\n\r\n        val leftOffset = -(sourceCenter.x - magnifierSize.width / 2f)\r\n        val topOffset = -(sourceCenter.y - magnifierSize.height / 2f)", "choices": [{"text": "\r\n        val rightOffset = sourceCenter.x + magnifierSize.width / 2f\r\n        val bottomOffset = sourceCenter.y + magnifierSize.height / 2f\r\n\r\n        canvas.drawBitmap(source, leftOffset, topOffset, null)\r\n        canvas.drawBitmap(source, rightOffset, bottomOffset, null)\r\n\r\n        return dest\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/865", "ground_truth": "\r\n        canvas.drawBitmap(source, leftOffset, topOffset, paint)\r\n\r\n        return dest\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\ImageMagnifier.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nfun calibrate(index: Int, coordinate: Coordinate?) {\r\n        points[index] =\r\n            MapCalibrationPoint(coordinate ?: Coordinate.zero, points[index].imageLocation)\r\n        if (coordinate == null) {\r\n            calibratedPoints.remove(index)", "choices": [{"text": "\r\n        } else {\r\n            calibratedPoints.add(index, coordinate)\r\n        }\r\n    }\r\nfun calibrate(index: Int) {\r\n        calibrate(index, null)\r\n    }\r\nfun calibrate(index: Int, coordinate: Coordinate) {\r\n        calibrate(index, coordinate)\r\n    }\r\nfun calibrate(index: Int) {\r\n        calibrate(index, null)\r\n    }\r\nfun calibrate(index: Int) {\r\n        calibrate(index, null)"}], "metadata": {"task_id": "Trail-Sense/868", "ground_truth": "        } else {\r\n            calibratedPoints.add(index)\r\n        }\r\n        onCalibrationChange()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\MapCalibrationManager.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geography.projections.IMapProjection\nfun IMapProjection.distancePerPixel(location1: Coordinate, location2: Coordinate): Distance? {\r\n    val meters = location1.distanceTo(location2)\r\n    val pixels = toPixels(location1).distanceTo(toPixels(location2))", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/877", "ground_truth": "    // Unable to calculate\r\n    if (meters == 0f || pixels == 0f) return null\r\n\r\n    return Distance.meters(meters / pixels)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\projections\\ProjectionExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PixelBounds\nimport com.kylecorry.andromeda.core.bitmap.BitmapUtils.fixPerspective\nimport androidx.annotation.ColorInt\nimport android.graphics.Bitmap\nfun Bitmap.fixPerspective(\r\n    bounds: PixelBounds,\r\n    shouldRecycleOriginal: Boolean = false,\r\n    @ColorInt backgroundColor: Int? = null\r\n): Bitmap {\r\n    return fixPerspective(\r\n        bounds.topLeft,\r\n        bounds.topRight,\r\n        bounds.bottomLeft,", "choices": [{"text": "\r\n        bounds.bottomRight,\r\n        shouldRecycleOriginal,\r\n        backgroundColor\r\n    );\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/882", "ground_truth": "        bounds.bottomRight,\r\n        shouldRecycleOriginal,\r\n        backgroundColor\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\BitmapExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.core.text.slugify\nsuspend fun execute(map: PhotoMap): Boolean = onIO {\r\n        onMain {\r\n            loading.show()\r\n        }\r\n        val success = exporter.export(map, \"${map.name.slugify()}.pdf\")", "choices": [{"text": "\n        if (success) {\r\n            loading.hide()\r\n        } else {\r\n            loading.hide()\r\n        }\r\n        return success\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/883", "ground_truth": "        onMain {\r\n            loading.hide()\r\n        }\r\n        success\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\commands\\ExportMapCommand.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geology.CoordinateBounds\noverride fun onBoundsChanged(bounds: CoordinateBounds?) {\r\n        if (bounds == lastBounds) {\r\n            return\r\n        }", "choices": [{"text": " {\r\n            lastBounds = bounds\r\n            return\r\n        }\r\n        lastBounds = bounds\r\n        return\r\n    }\r\n\r\noverride fun onBoundsChanged(bounds: CoordinateBounds?) {\r\n        if (bounds == lastBounds) {\r\n            return\r\n        }\r\n        lastBounds = bounds\r\n        return\r\n    }\r\n\r\noverride fun onBoundsChanged(bounds: CoordinateBounds?) {\r\n        if (bounds == lastBounds) {\r\n            return\r\n        }\r\n        lastBounds = bounds\r\n        return\r"}], "metadata": {"task_id": "Trail-Sense/888", "ground_truth": "        lastBounds = bounds\r\n        managers.forEach {\r\n            it.onBoundsChanged(bounds)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\MultiLayerManager.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.ui.Colors.withAlpha\noverride fun start() {\r\n        scope.launch {\r\n            // Load destination\r\n            navigator.destination.collect {\r\n                if (it != null) {\r\n                    val colorWithAlpha = it.color.withAlpha(127)\r\n                    layer.setColor(colorWithAlpha)\r\n                    layer.setEnd(it.coordinate)\r\n                } else {", "choices": [{"text": "\r\n                    val colorWithAlpha = it.color.withAlpha(255)\r\n                    layer.setColor(colorWithAlpha)\r\n                    layer.setEnd(it.coordinate)\r\n                }\r\n            }\r\n        }\r\n}\r\n\r\noverride fun stop() {\r\n        scope.launch {\r\n            // Unload destination\r\n            navigator.destination.collect {\r\n                if (it!= null) {\r\n                    val colorWithAlpha = it.color.withAlpha(127)\r\n                    layer.setColor(colorWithAlpha)\r"}], "metadata": {"task_id": "Trail-Sense/894", "ground_truth": "                    layer.setEnd(null)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\NavigationLayerManager.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride fun start() {\r\n        loaded = false\r\n        scope.launch {\r\n            listenerRunner.skipIfRunning {\r\n                pathService.getPaths().collect {\r\n                    paths = it.filter { path -> path.style.visible }\r\n                    loaded = false\r\n                    loadRunner.replace {\r\n                        loadPaths(true)", "choices": [{"text": "\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun stop() {\r\n        loaded = false\r\n        scope.launch {\r\n            listenerRunner.skipIfRunning {\r\n                pathService.getPaths().collect {\r\n                    paths = it.filter { path -> path.style.visible }\r\n                    loaded = false\r\n                    loadRunner.replace {\r\n                        loadPaths(false)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "Trail-Sense/896", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geology.CoordinateBounds\noverride fun onBoundsChanged(bounds: CoordinateBounds?) {\r\n        super.onBoundsChanged(bounds)\r\n        scope.launch {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/898", "ground_truth": "            loadRunner.enqueue {\r\n                loadPaths(false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.sol.units.Coordinate\noverride fun onLocationChanged(location: Coordinate, accuracy: Float?) {\r\n        super.onLocationChanged(location, accuracy)\r\n        scope.launch {", "choices": [{"text": "\r\n            if accuracy is not None:\r\n                print(accuracy)\r\n            else:\r\n                print(location)\r\n        }\r\n        scope.launch {\r\n            if accuracy is not None:\r\n                print(accuracy)\r\n            else:\r\n                print(location)\r\n        }\r\n}\r\noverride fun onAccuracyChanged(accuracy: Float?) {\r\n        super.onAccuracyChanged(accuracy)\r\n        scope.launch {\r\n            if accuracy is not None:\r\n                print(accuracy)\r\n            else:"}], "metadata": {"task_id": "Trail-Sense/899", "ground_truth": "            loadRunner.enqueue {\r\n                loadPaths(false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun loadPaths(reload: Boolean) = onDefault {\r\n        bounds?.let {\r\n            pathLoader.update(paths, it, it, reload || !loaded)\r\n            loaded = true", "choices": [{"text": ";\r\n        }\r\n    }\r\n    private suspend fun loadPaths(reload: Boolean) = onDefault {\r\n        bounds?.let {\r\n            pathLoader.update(paths, it, it, reload ||!loaded);\r\n            loaded = true;\r\n        }\r\n    }\r\n    private suspend fun loadPaths(reload: Boolean) = onDefault {\r\n        bounds?.let {\r\n            pathLoader.update(paths, it, it, reload ||!loaded);\r\n            loaded = true;\r\n        }\r\n    }\r"}], "metadata": {"task_id": "Trail-Sense/900", "ground_truth": "        }\r\n\r\n        val points = pathLoader.getPointsWithBacktrack(context)\r\n        onPathsChanged(paths, points)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun onPathsChanged(paths: List<Path>, points: Map<Long, List<PathPoint>>) {\r\n        val mappablePaths = points.mapNotNull {\r\n            val path =\r\n                paths.firstOrNull { p -> p.id == it.key } ?: return@mapNotNull null\r\n\r\n            val correctedPoints = if (shouldCorrectElevations) {\r\n                hikingService.correctElevations(it.value.sortedBy { it.id }).reversed()\r\n            } else {\r\n                it.value\r\n            }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/901", "ground_truth": "\r\n            correctedPoints.asMappable(context, path)\r\n        }\r\n        layer.setPaths(mappablePaths)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\noverride suspend fun export(data: PhotoMap, filename: String): Boolean {\r\n        val pdf = getPDFData(data)\r\n        val uri = uriPicker.create(filename, \"application/pdf\") ?: return false", "choices": [{"text": "\r\n        pdf.saveAs(uri);\r\n        return true;\r\n}\r\n\r\nfunction getPDFData(data: PhotoMap) {\r\n        return {\r\n                title: data.title,\r\n                author: data.author,\r\n                description: data.description,\r\n                keywords: data.keywords,\r\n                image: data.image\r\n        };\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/902", "ground_truth": "        uriService.outputStream(uri)?.use {\r\n            PdfConvert.toPDF(pdf, it)\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapExportService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.IMap\noverride suspend fun load(search: String?, group: Long?): List<IMap> {\r\n        return if (search.isNullOrBlank()) {", "choices": [{"text": ": List<IMap>;\r\n    }\r\n    return if (group.isNullOrBlank()) {\r\n        return if (search.isNullOrBlank()) {\r\n            return new List<IMap>();\r\n        } else {\r\n            return new List<IMap>();\r\n        }\r\n    } else {\r\n        return if (search.isNullOrBlank()) {\r\n            return new List<IMap>();\r\n        } else {\r\n            return new List<IMap>();\r\n        }\r\n    }\r"}], "metadata": {"task_id": "Trail-Sense/903", "ground_truth": "            getPathsByGroup(group)\r\n        } else {\r\n            getPathsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapGroupLoader.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.MapGroupEntity\nimport com.kylecorry.trail_sense.tools.maps.domain.MapGroup\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun addMapGroup(group: MapGroup): Long = onIO {\r\n        if (group.id != 0L) {\r\n            mapGroupDao.update(MapGroupEntity.from(group))", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/906", "ground_truth": "            group.id\r\n        } else {\r\n            mapGroupDao.insert(MapGroupEntity.from(group))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.MapEntity\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun addMap(map: PhotoMap): Long = onIO {\r\n        if (map.id == 0L) {\r\n            mapDao.insert(MapEntity.from(map))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/907", "ground_truth": "        } else {\r\n            mapDao.update(MapEntity.from(map))\r\n            map.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.IMap\nvar instance MapService?\nval loader\nval counter\nsuspend fun add(map: IMap): Long {\r\n        return if (map.isGroup) {", "choices": [{"text": "\r\n    } else {\r\n        return loader.add(map);\r\n    }\r\n}\r\nsuspend fun remove(map: IMap): Long {\r\n    return if map.isGroup {\r\n        return loader.remove(map);\r\n    } else {\r\n        return loader.remove(map);\r\n    }\r\n}\r\nsuspend fun update(map: IMap): Long {\r\n    return if map.isGroup {\r\n        return loader.update(map);\r\n    } else {\r\n        return loader.update("}], "metadata": {"task_id": "Trail-Sense/910", "ground_truth": "            repo.addMapGroup(map as MapGroup)\r\n        } else {\r\n            repo.addMap(map as PhotoMap)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapService.kt"}}
{"prompt": "import kotlin.math.min\nimport kotlin.math.max\nimport com.kylecorry.trail_sense.R\noverride fun draw() {\r\n        super.draw()\r\n        val map = map ?: return\r\n\r\n        if (!map.isCalibrated) {\r\n            return\r\n        }\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * minScale)\r\n        if (shouldRecenter && isImageLoaded) {\r\n            recenter()", "choices": [{"text": "\r\n        }\r\n    }\r\n\r\n    private void recenter() {\r\n        val map = map?: return\r\n        if (map.isCalibrated) {\r\n            return\r\n        }\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * minScale)\r\n        if (shouldRecenter && isImageLoaded) {\r\n            recenter()\r\n        }\r\n    }\r\n\r\n    private void recenter() {\r\n        val map = map?: return\r\n        if ("}], "metadata": {"task_id": "Trail-Sense/922", "ground_truth": "            shouldRecenter = false\r\n        }\r\n\r\n        layers.forEach { it.draw(drawer, this) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.SolMath\nopen fun showMap(map: PhotoMap) {\r\n        this.map = map\r\n        val rotation = map.calibration.rotation\r\n        mapRotation = SolMath.deltaAngle(rotation, map.baseRotation().toFloat())\r\n        fullMetersPerPixel = map.distancePerPixel()?.meters()?.distance ?: 1f\r\n        projection = map.projection", "choices": [{"text": ".projection\r\n        fullMetersPerPixel = fullMetersPerPixel? fullMetersPerPixel : 1f\r\n        fullMetersPerPixel = fullMetersPerPixel? fullMetersPerPixel : 1f\r\n        fullMetersPerPixel = fullMetersPerPixel? fullMetersPerPixel : 1f\r\n        fullMetersPerPixel = fullMetersPerPixel? fullMetersPerPixel : 1f\r\n        fullMetersPerPixel = fullMetersPerPixel? fullMetersPerPixel : 1f\r\n        fullMetersPerPixel = fullM"}], "metadata": {"task_id": "Trail-Sense/923", "ground_truth": "        if (keepMapUp){\r\n            mapAzimuth = 0f\r\n        }\r\n        setImage(map.filename, rotation)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.PathMetadata\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun execute(value: List<Coordinate>) = onIO {\r\n        val newPath = Path(\r\n            0,\r\n            map.name,\r\n            prefs.defaultPathStyle,\r\n            PathMetadata.empty\r\n        )\r\n\r\n        val newPathId = pathService.addPath(newPath)\r\n\r\n        val waypoints = value.map {\r\n            PathPoint(0, newPathId, it)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/928", "ground_truth": "        }\r\n\r\n        pathService.addWaypointsToPath(waypoints, newPathId)\r\n        newPathId\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\commands\\CreatePathCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\noverride suspend fun execute(value: IMap) {\r\n        val shouldDelete = onMain {\r\n            !CoroutineAlerts.dialog(\r\n                context,\r\n                context.getString(R.string.delete),\r\n                if (value is PhotoMap) value.name else context.getString(\r\n                    R.string.delete_map_group_message,\r\n                    value.name\r\n                )\r\n            )\r\n        }\r\n\r\n        if (!shouldDelete) {", "choices": [{"text": "\r\n            return\r\n        }\r\n\r\n        onMain {\r\n            value.delete()\r\n        }\r\n    }\r\nend\r\n"}], "metadata": {"task_id": "Trail-Sense/929", "ground_truth": "            return\r\n        }\r\n\r\n        mapService.delete(value)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\commands\\DeleteMapCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nval mapRepo\nvar map PhotoMap?\nvar showRotation\nfun reloadMap() {\r\n        inBackground {\r\n            map = mapRepo.getMap(mapId)", "choices": [{"text": "\r\n        }\r\n    }\r\n    val mapId = getIntent().getIntExtra(\"mapId\", 0);\r\n    val mapRepo = getIntent().getParcelableExtra(\"mapRepo\");\r\n    val map = mapRepo.getMap(mapId);\r\n    showRotation = getIntent().getBooleanExtra(\"showRotation\", false);\r\n    if (map!= null) {\r\n        map.setRotation(showRotation);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/934", "ground_truth": "            onMain {\r\n                map?.let(::onMapLoad)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nfun add(location: Coordinate) {\r\n        if (location == points.lastOrNull()) {\r\n            return", "choices": [{"text": "\r\n            points.add(location);\r\n            return;\r\n        }\r\n\r\n        points.add(location);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/946", "ground_truth": "        }\r\n        points.add(location)\r\n        onPathChanged(points.toList())\r\n        updateLayers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "fun undo() {\r\n        if (points.isNotEmpty()) {", "choices": [{"text": "points > 0) {\r\n        points--;\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction redo() {\r\n    if (points > 0) {\r\n        points++;\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/947", "ground_truth": "            points.removeLast()\r\n            onPathChanged(points.toList())\r\n            updateLayers()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.layers.IMapView\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nvar points\nval pointLayer\nval pathLayer\noverride fun draw(drawer: ICanvasDrawer, map: IMapView) {\r\n        if (!isEnabled) {\r\n            return", "choices": [{"text": ";\r\n        }\r\n        if (!points) {\r\n            return;\r\n        }\r\n        if (!pointLayer) {\r\n            return;\r\n        }\r\n        if (!pathLayer) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < points.length; i++) {\r\n            var point = points[i];\r\n            if (!point) {\r\n                continue;\r\n            }\r\n            var path = pointLayer.getPath();\r\n            if (!path) {\r\n                continue"}], "metadata": {"task_id": "Trail-Sense/949", "ground_truth": "        }\r\n\r\n        pathLayer.draw(drawer, map)\r\n        pointLayer.draw(drawer, map)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.layers.IMapView\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun onClick(drawer: ICanvasDrawer, map: IMapView, pixel: PixelCoordinate): Boolean {\r\n        if (!isEnabled) {\r\n            return false\r\n        }\r\n\r\n        val wasPointClicked = pointLayer.onClick(drawer, map, pixel)\r\n\r\n        if (wasPointClicked) {\r\n            return true", "choices": [{"text": "\r\n        }\r\n\r\n        return false\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/951", "ground_truth": "        }\r\n\r\n        add(map.toCoordinate(pixel))\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.MappablePath\nprivate fun getPath(): MappablePath {\r\n        return MappablePath(\r\n            0,", "choices": [{"text": "\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n           "}], "metadata": {"task_id": "Trail-Sense/953", "ground_truth": "            getBeacons(),\r\n            pathColor,\r\n            LineStyle.Solid\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate fun getBeacons(): List<Beacon> {\r\n        return points.mapIndexed { index, coordinate ->\r\n            Beacon(\r\n                index.toLong(),\r\n                \"\",\r\n                coordinate,", "choices": [{"text": "\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),\r\n                index.toLong(),"}], "metadata": {"task_id": "Trail-Sense/954", "ground_truth": "                color = pathColor,\r\n                temporary = true\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.sort.MapSortMethod\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = MapSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.mapSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.mapSort = sortOptions[newSort]", "choices": [{"text": "\r\n            }\r\n        }\r\n    }\r\n    private static String getSortString(val it) {\r\n        switch (it) {\r\n            case ASCENDING:\r\n                return getString(R.string.ascending);\r\n            case DESCENDING:\r\n                return getString(R.string.descending);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/956", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.sort.MostRecentMapSortStrategy\nimport com.kylecorry.trail_sense.tools.maps.domain.sort.MapSortMethod\nimport com.kylecorry.trail_sense.tools.maps.domain.sort.ClosestMapSortStrategy\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.trail_sense.R\nprivate suspend fun sortMaps(maps: List<IMap>): List<IMap> = onDefault {\r\n        val strategy = when (sort) {\r\n            MapSortMethod.Closest -> ClosestMapSortStrategy(gps.location, mapService.loader)\r\n            MapSortMethod.MostRecent -> MostRecentMapSortStrategy(mapService.loader)", "choices": [{"text": "\r\n        };\r\n        return maps.stream().sorted(strategy).collect(Collectors.toList());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/958", "ground_truth": "            MapSortMethod.Name -> NameMapSortStrategy()\r\n        }\r\n\r\n        strategy.sort(maps)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.MapGroup\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport androidx.navigation.fragment.findNavController\nprivate fun view(map: IMap) {\r\n        if (map is MapGroup) {\r\n            manager.open(map.id)\r\n        } else {\r\n            findNavController().navigate(", "choices": [{"text": "map.id)\r\n        }\r\n    }\r\n    private fun edit(map: IMap) {\r\n        if (map is MapGroup) {\r\n            manager.open(map.id)\r\n        } else {\r\n            findNavController().navigate(map.id)\r\n        }\r\n    }\r\n    private fun delete(map: IMap) {\r\n        if (map is MapGroup) {\r\n            manager.open(map.id)\r\n        } else {\r\n            findNavController().navigate(map."}], "metadata": {"task_id": "Trail-Sense/966", "ground_truth": "                R.id.action_mapList_to_maps,\r\n                bundleOf(\"mapId\" to map.id)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.infrastructure.commands.MapCleanupCommand\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\noverride fun onResume() {\r\n        super.onResume()\r\n        manager.refresh()\r\n        inBackground {\r\n            val mapsDeleted = MapCleanupCommand(requireContext()).execute()", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/968", "ground_truth": "            if (mapsDeleted) {\r\n                manager.refresh()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "val mapLoader\nvar sort\nval mapRepo\n override fun onPause() {", "choices": [{"text": "\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n val mapRepo\n\n val mapLoader\n var sort\n"}], "metadata": {"task_id": "Trail-Sense/969", "ground_truth": "        super.onPause()\r\n        tryOrNothing {\r\n            lastRoot = manager.root\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IMap): ListItem {\r\n        return if (value is PhotoMap) {", "choices": [{"text": "\r\n        case PhotoMap:\r\n            return new ListItem(value);\r\n        default:\r\n            return super.map(value);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/970", "ground_truth": "            mapMapper.map(value)\r\n        } else {\r\n            mapGroupMapper.map(value as MapGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\mappers\\IMapMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport androidx.fragment.app.Fragment\nimport androidx.core.view.isVisible\nprivate fun calibrate() {\r\n        binding.mapTitle.leftButton.isVisible = true\r\n        val fragment = MapCalibrationFragment.create(mapId, this::showRotation) {\r\n            inBackground {\r\n                autoRotate()", "choices": [{"text": " {\r\n                    binding.mapTitle.leftButton.isVisible = false\r\n                    binding.mapTitle.rightButton.isVisible = false\r\n                }\r\n            }\r\n        }\r\n        return () -> {\r\n            binding.mapTitle.leftButton.isVisible = false\r\n            binding.mapTitle.rightButton.isVisible = false\r\n            fragment.show()\r\n        }\r\n    }\r\n    private void showRotation() {\r\n        binding.mapTitle.leftButton.isVisible = false\r\n        binding.mapTitle.right"}], "metadata": {"task_id": "Trail-Sense/973", "ground_truth": "                loadMap()\r\n            }\r\n        }\r\n        setFragment(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.infrastructure.commands.PrintMapCommand\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.BackgroundMinimumState\nprivate fun print() {\r\n        val command = PrintMapCommand(requireContext())\r\n        inBackground(BackgroundMinimumState.Created) {", "choices": [{"text": " {\r\n                command.execute();\r\n        }\r\n        return command;\r\n}\r\npublic class PrintMapCommand {\r\n\r\n    private final Context context;\r\n\r\n    public PrintMapCommand(Context context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public void execute() {\r\n        context.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                print();\r\n            }\r\n        });\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/976", "ground_truth": "            map?.let {\r\n                command.execute(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun export() {\r\n        inBackground {\r\n            map?.let {\r\n                mapRepo.getMap(it.id)?.let { updated ->", "choices": [{"text": " }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/977", "ground_truth": "                    exportService.export(updated)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.ui.commands.RenameMapCommand\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun rename() {\r\n        inBackground {\r\n            map?.let {\r\n                mapRepo.getMap(it.id)?.let { updated ->\r\n                    RenameMapCommand(requireContext(), mapService).execute(updated)\r\n                    map = mapRepo.getMap(updated.id)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/979", "ground_truth": "                    binding.mapTitle.title.text = map?.name\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun recenter() {\r\n        val fragment = currentFragment\r\n        if (fragment != null && fragment is ViewMapFragment) {\r\n            fragment.recenter()\r\n        }", "choices": [{"text": "\r\n            fragment.recenter()\r\n        }\r\n}\r\npublic class ViewMapFragment extends Fragment {\r\n    private View currentView;\r\n    private View currentView2;\r\n    private View currentView3;\r\n    private View currentView4;\r\n    private View currentView5;\r\n    private View currentView6;\r\n    private View currentView7;\r\n    private View currentView8;\r\n    private View currentView9;\r\n    private View currentView10;\r\n    private View currentView11;\r\n    private View"}], "metadata": {"task_id": "Trail-Sense/980", "ground_truth": "\r\n        if (fragment != null && fragment is MapCalibrationFragment) {\r\n            fragment.recenter()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun reload() {\r\n        val fragment = currentFragment\r\n        if (fragment != null && fragment is ViewMapFragment) {\r\n            fragment.reloadMap()\r\n        }", "choices": [{"text": "\r\n            currentFragment = null\r\n        }\r\n}\r\npublic class ViewMapFragment extends Fragment {\r\n    public ViewMapFragment() {\r\n        super()\r\n    }\r\n    @Override\r\n    public void onAttach(View view) {\r\n        super.onAttach(view)\r\n    }\r\n    @Override\r\n    public void onDetach() {\r\n        super.onDetach()\r\n    }\r\n    @Override\r\n    public void onViewCreated(View view, Bundle savedInstanceState) {\r\n        super.onView"}], "metadata": {"task_id": "Trail-Sense/981", "ground_truth": "\r\n        if (fragment != null && fragment is MapCalibrationFragment) {\r\n            fragment.reloadMap()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "private suspend fun loadMap() {", "choices": [{"text": "\n\n    public static void main(String[] args) {\n        // loadMap();\n    }\n\n    public static void loadMap() {\n\n    }\n\n    public static void unloadMap() {\n\n    }\n\n    public static void unloadMap() {\n\n    }\n\n    public static void unloadMap() {\n\n    }\n\n    public static void unloadMap() {\n\n    }\n\n    public static void unloadMap() {\n\n    }\n\n    public static void unloadMap() {\n\n    }\n\n    public static void unload"}], "metadata": {"task_id": "Trail-Sense/982", "ground_truth": "        map = mapRepo.getMap(mapId)\r\n        onMain {\r\n            map?.let(::onMapLoad)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport androidx.fragment.app.Fragment\nimport androidx.core.view.isVisible\nimport androidx.core.os.bundleOf\nprivate fun warp() {\r\n        hideRotation()\r\n        val fragment = WarpMapFragment().apply {\r\n            arguments = bundleOf(\"mapId\" to mapId)\r\n        }.also {\r\n            binding.mapTitle.leftButton.isVisible = false\r\n            it.setOnCompleteListener {\r\n                inBackground {\r\n                    loadMap()\r\n                }", "choices": [{"text": " {\r\n                    binding.mapTitle.leftButton.isVisible = true\r\n                    it.setOnCompleteListener {\r\n                        inBackground {\r\n                            binding.mapTitle.leftButton.isVisible = true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }.also {\r\n            binding.mapTitle.rightButton.isVisible = false\r\n            it.setOnCompleteListener {\r\n                inBackground {\r\n                    loadMap()\r\n                }\r\n            }\r\n        }.also {\r\n            binding.map"}], "metadata": {"task_id": "Trail-Sense/984", "ground_truth": "            }\r\n        }\r\n\r\n        setFragment(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nfun reloadMap() {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                map = mapRepo.getMap(mapId)\r\n            }\r\n            withContext(Dispatchers.Main) {\r\n                map?.let {", "choices": [{"text": "} = mapRepo.getMap(mapId)\r\n            }\r\n            withContext(Dispatchers.Main) {\r\n                map?.setMap(map)\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/991", "ground_truth": "                    onMapLoad(it)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.time.Throttle\nprivate fun updateDestination() {\r\n        if (throttle.isThrottled()) {\r\n            return\r\n        }\r\n\r\n        val beacon = destination ?: return\r\n        binding.navigationSheet.show(\r\n            gps.location,\r\n            altimeter.altitude,\r\n            gps.speed.speed,", "choices": [{"text": "\r\n            beacon.latitude,\r\n            beacon.longitude,\r\n            beacon.altitude,\r\n            beacon.altitudeAccuracy,\r\n            beacon.altitudeAccuracyAccuracy,\r\n            beacon.altitudeAccuracyAccuracyAccuracy,\r\n            beacon.altitudeAccuracyAccuracyAccuracy,\r\n            beacon.altitudeAccuracyAccuracyAccuracy,\r\n            beacon.altitudeAccuracyAccuracyAccuracy,\r\n            beacon.altitudeAccuracyAccuracyAccuracy,\r\n            beacon.altitudeAccuracyAccuracyAccuracy,"}], "metadata": {"task_id": "Trail-Sense/992", "ground_truth": "            beacon,\r\n            compass.declination,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nprivate fun selectLocation(location: Coordinate?) {\r\n        selectedPointLayer.setBeacons(\r\n            listOfNotNull(\r\n                if (location == null) {\r\n                    null\r\n                } else {", "choices": [{"text": "\r\n                selectedPointLayer.getBeacons().stream()\r\n                   .filter(beacon -> beacon.getLocation().equals(location))\r\n                   .findFirst()\r\n                )\r\n            )\r\n        );\r\n    }\r\n    private fun selectBeacon(beacon: Beacon) {\r\n        selectedPointLayer.setBeacons(\r\n            listOfNotNull(\r\n                selectedPointLayer.getBeacons().stream()\r\n                   .filter(beacon -> beacon.equals(beacon))\r\n                   .findFirst()\r\n"}], "metadata": {"task_id": "Trail-Sense/993", "ground_truth": "                    Beacon(0, \"\", location)\r\n                }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.tools.beacons.domain.BeaconOwner\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.graphics.Color\nprivate fun navigateTo(location: Coordinate) {\r\n        inBackground {\r\n            // Create a temporary beacon\r\n            val beacon = Beacon(\r\n                0L,\r\n                map?.name ?: \"\",\r\n                location,\r\n                visible = false,\r\n                temporary = true,\r\n                color = AppColor.Orange.color,\r\n                owner = BeaconOwner.Maps\r\n            )\r\n            val id = onIO {\r\n                beaconService.add(beacon)", "choices": [{"text": "\r\n                return beacon.id\r\n            }\r\n            return id\r\n        }\r\n    }\r\n    private fun navigateTo(location: Coordinate) {\r\n        inBackground {\r\n            // Create a temporary beacon\r\n            val beacon = Beacon(\r\n                0L,\r\n                map?.name?: \"\",\r\n                location,\r\n                visible = false,\r\n                temporary = true,\r\n                color = AppColor.Orange.color,\r\n                owner = BeaconOwner.Maps\r\n            )\r\n            val id ="}], "metadata": {"task_id": "Trail-Sense/997", "ground_truth": "            }\r\n\r\n            navigateTo(beacon.copy(id = id))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "val mapRepo\nval altimeter\nval formatService\n override fun onPause() {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1003", "ground_truth": "        super.onPause()\r\n        layerManager?.stop()\r\n        layerManager = null\r\n        lastDistanceToast?.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "private fun getNextLockMode(mode: MapLockMode): MapLockMode {\r\n        return when (mode) {\r\n            MapLockMode.Location -> {\r\n                if (hasCompass) {\r\n                    MapLockMode.Compass\r\n                } else {\r\n                    MapLockMode.Free\r\n                }\r\n            }\r\n\r\n            MapLockMode.Compass -> {\r\n                MapLockMode.Free\r\n            }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1004", "ground_truth": "            MapLockMode.Free -> {\r\n                MapLockMode.Location\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {", "choices": [{"text": "View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util."}], "metadata": {"task_id": "Trail-Sense/1007", "ground_truth": "        if (isBound) {\r\n            binding.perspective.clearImage()\r\n        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\WarpMapFragment.kt"}}
{"prompt": "override fun onPause() {\r\n        super.onPause()\r\n        magnetometer.stop(this::onMagnetometerUpdate)\r\n        if (prefs.metalDetector.showMetalDirection) {\r\n            lowPassMagnetometer.stop(this::onLowPassMagnetometerUpdate)\r\n            orientation.stop(this::onMagnetometerUpdate)\r\n            gravity.stop(this::onMagnetometerUpdate)\r\n        }", "choices": [{"text": ".stop(this::onMagnetometerUpdate)\r\n}\r\n\r\noverride fun onResume() {\r\n        super.onResume()\r\n        magnetometer.start(this::onMagnetometerUpdate)\r\n        if (prefs.metalDetector.showMetalDirection) {\r\n            lowPassMagnetometer.start(this::onLowPassMagnetometerUpdate)\r\n            orientation.start(this::onMagnetometerUpdate)\r\n            gravity.start(this::onMagnetometerUpdate)\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1010", "ground_truth": "        calibrateTimer.stop()\r\n        haptics.off()\r\n        isVibrating = false\r\n        audio?.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "import kotlin.math.absoluteValue\nimport com.kylecorry.sol.math.SolMath\nprivate fun updateMetalSoundIntensity(reading: Float) {\r\n        if (!isMetalDetected.value || !prefs.metalDetector.isMetalAudioEnabled) {\r\n            audio?.off()\r\n            return\r\n        }\r\n        val delta = (reading - referenceMagnitude).absoluteValue\r\n        val volume = SolMath.map(delta - threshold, 0f, 30f, 0f, 1f, true)", "choices": [{"text": "\r\n        audio?.on()\r\n        audio?.setVolume(volume)\r\n        audio?.play()\r\n        audio?.setVolume(1f)\r\n        audio?.setVolume(1f)\r\n        audio?.setVolume(1f)\r\n        audio?.setVolume(1f)\r\n        audio?.setVolume(1f)\r\n        audio?.setVolume(1f)\r\n        audio?.setVolume(1f)\r\n        audio?.setVolume(1f)\r\n        audio?"}], "metadata": {"task_id": "Trail-Sense/1014", "ground_truth": "        audio?.setVolume(volume)\r\n        if (audio?.isOn() != true) {\r\n            audio?.on()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "private fun getCurrentMagneticFieldStrength(): Float {\r\n        val filtered = filter.filter(magnetometer.magneticField.magnitude())\r\n        return if (isHighSensitivity) {", "choices": [{"text": " {\r\n                magnetometer.magneticField.strength(filtered);\r\n        } else {\r\n                magnetometer.magneticField.strength(magnetometer.magneticField.strength() + filtered);\r\n        }\r\n}\r\n\r\nprivate fun getCurrentMagneticFieldAcceleration(): Float {\r\n        val filtered = filter.filter(magnetometer.magneticField.acceleration())\r\n        return if (isHighSensitivity) {\r\n                magnetometer.magneticField.acceleration(filtered);"}], "metadata": {"task_id": "Trail-Sense/1015", "ground_truth": "            magnetometer.magneticField.magnitude()\r\n        } else {\r\n            filtered\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.orientation.DeviceOrientation\nfun getStyle(orientation: DeviceOrientation.Orientation): CompassStyle {\r\n        if (!isCompassAvailable){\r\n            return CompassStyle.Radar\r\n        }\r\n\r\n        return if (useLinearCompass && orientation == DeviceOrientation.Orientation.Portrait) {\r\n            CompassStyle.Linear\r\n        } else if (useRadarCompass) {", "choices": [{"text": "\r\n            CompassStyle.Radar\r\n        } else if (orientation == DeviceOrientation.Orientation.Landscape) {\r\n            CompassStyle.Radar\r\n        } else {\r\n            CompassStyle.Linear\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1025", "ground_truth": "            CompassStyle.Radar\r\n        } else {\r\n            CompassStyle.Round\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\CompassStyleChooser.kt"}}
{"prompt": "import kotlin.math.max\nimport com.kylecorry.sol.units.Coordinate\nprivate fun scarfsDistance(\r\n        from: Coordinate,\r\n        to: Coordinate,\r\n        fromAltitude: Float? = null,\r\n        toAltitude: Float? = null\r\n    ): Float {\r\n        val distance = from.distanceTo(to)\r\n        val elevationGain =\r\n            max(\r\n                if (toAltitude == null || fromAltitude == null) 0f else (toAltitude - fromAltitude),", "choices": [{"text": "\r\n                0f\r\n            ) / distance\r\n        return elevationGain\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1028", "ground_truth": "                0f\r\n            )\r\n\r\n        return distance + 7.92f * elevationGain\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\NavigationService.kt"}}
{"prompt": "import kotlin.math.max\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nfun getNearbyBeacons(\r\n        location: Coordinate,\r\n        beacons: Collection<Beacon>,\r\n        numNearby: Int,\r\n        minDistance: Float = 0f,\r\n        maxDistance: Float = Float.POSITIVE_INFINITY\r\n    ): Collection<Beacon> {\r\n        return beacons.asSequence()\r\n            .filter { it.visible }\r\n            .map { Pair(it, location.distanceTo(it.coordinate)) }\r\n            .filter { it.second in minDistance..maxDistance }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1029", "ground_truth": "            .sortedBy { it.second }\r\n            .take(numNearby)\r\n            .map { it.first }\r\n            .toList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\NavigationService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nimport androidx.lifecycle.LiveData\nprivate fun getWeatherReadings(): LiveData<List<Reading<Float>>> {\r\n        return weatherRepo.getAllLive().map { readings ->\r\n            readings.mapNotNull { reading ->\r\n                if (reading.value.altitude == 0f) {\r\n                    return@mapNotNull null", "choices": [{"text": ";\r\n                }\r\n                return reading;\r\n            } }\r\n        };\r\n    }\r\n\r\n    private fun getWeatherData(): LiveData<List<Reading<Float>>> {\r\n        return weatherRepo.getAllLive().map { readings ->\r\n            readings.mapNotNull { reading ->\r\n                if (reading.value.altitude == 0f) {\r\n                    return@mapNotNull null;\r\n                }\r\n                return reading;\r\n            } }\r\n        };\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "Trail-Sense/1040", "ground_truth": "                }\r\n                Reading(reading.value.altitude, reading.time)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\AltitudeBottomSheet.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.system.Resources\nimport androidx.core.graphics.drawable.toBitmap\nimport androidx.annotation.DrawableRes\nimport android.graphics.Bitmap\nfun load(@DrawableRes id: Int, size: Int): Bitmap {\r\n        val bitmap = if (icons.containsKey(id)) {\r\n            icons[id]\r\n        } else {\r\n            val drawable = Resources.drawable(context, id)\r\n            val bm = drawable?.toBitmap(size, size)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1043", "ground_truth": "            icons[id] = bm!!\r\n            icons[id]\r\n        }\r\n        return bitmap!!\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\BitmapLoader.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.tryOrNothing\nfun clear() {\r\n        tryOrNothing {\r\n            for (icon in icons) {", "choices": [{"text": " {\r\n                icon.clear();\r\n            }\r\n        }\r\n        finally {\r\n            icons.clear();\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1045", "ground_truth": "                icon.value.recycle()\r\n            }\r\n            icons.clear()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\BitmapLoader.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun draw(drawer: ICanvasDrawer, drawTicks: Boolean = true) {\r\n        drawer.opacity(255)\r\n        drawer.noStroke()\r\n        drawer.fill(backgroundColor)\r\n        drawer.circle(center.x, center.y, radius * 2)\r\n\r\n        if (!drawTicks) return\r\n\r\n        drawer.strokeWeight(drawer.dp(tickThicknessDp))\r\n        drawer.noFill()\r\n        drawer.stroke(tickColor)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1046", "ground_truth": "        drawer.path(ticks)\r\n\r\n        drawer.stroke(cardinalTickColor)\r\n        drawer.path(cardinalTicks)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\CompassDial.kt"}}
{"prompt": "import androidx.annotation.DrawableRes\nimport android.graphics.Bitmap\nfun load(@DrawableRes id: Int, size: Int): Bitmap {\r\n        return synchronized(lock) {\r\n            val bitmap = if (icons.containsKey(id)) {\r\n                icons[id]\r\n            } else {\r\n                val bm = drawer.loadImage(id, size, size)\r\n                icons[id] = bm", "choices": [{"text": "[id] = bm\r\n            }\r\n            return bitmap\r\n        }\r\n    }\r\nfun save(id: Int, bitmap: Bitmap): void {\r\n        return synchronized(lock) {\r\n            if (icons.containsKey(id)) {\r\n                icons[id] = bitmap\r\n            } else {\r\n                val bm = drawer.saveImage(id, bitmap, bitmap)\r\n                icons[id] = bm\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1052", "ground_truth": "                icons[id]\r\n            }\r\n            bitmap!!\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\DrawerBitmapLoader.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.tryOrNothing\nfun clear() {\r\n        tryOrNothing {\r\n            synchronized(lock) {\r\n                for (icon in icons) {\r\n                    icon.value.recycle()", "choices": [{"text": ".recycle();\r\n                }\r\n                icons.clear();\r\n            }\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void finalize() throws Throwable {\r\n        tryOrNothing {\r\n            synchronized(lock) {\r\n                for (icon in icons) {\r\n                    icon.value.recycle();\r\n                }\r\n                icons.clear();\r\n            }\r\n        } catch (Exception e) {\r\n            throw new"}], "metadata": {"task_id": "Trail-Sense/1053", "ground_truth": "                }\r\n                icons.clear()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\DrawerBitmapLoader.kt"}}
{"prompt": "val formatter\nvar isTimedOut\nval banner\n fun reset() {\r\n        isTimedOut = false\r\n        isGPSErrorShown = false\r\n        isCompassErrorShown = false", "choices": [{"text": " = false\r\n        isGPSErrorShown = false\r\n        isCompassErrorShown = false\r\n}\r\n\r\n fun showGPSError() {\r\n        isGPSErrorShown = true\r\n}\r\n\r\n fun hideGPSError() {\r\n        isGPSErrorShown = false\r\n}\r\n\r\n fun showCompassError() {\r\n        isCompassErrorShown = true\r\n}\r\n\r\n fun hideCompassError() {\r\n        isCompassErrorShown = false\r\n}\r\n\r\n fun showTimedOut() {\r\n       "}], "metadata": {"task_id": "Trail-Sense/1054", "ground_truth": "        isPoorCompassShown = false\r\n        possibleErrors.forEach {\r\n            banner.dismiss(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\errors\\NavigatorUserErrors.kt"}}
{"prompt": "import com.kylecorry.trail_sense.diagnostics.DiagnosticCode\nprivate fun show(code: DiagnosticCode) {", "choices": [{"text": ") {\n    if (code == null) {\n        return;\n    }\n    switch (code) {\n        case ERROR:\n            System.out.println(\"Error\");\n            break;\n        case WARNING:\n            System.out.println(\"Warning\");\n            break;\n        case INFO:\n            System.out.println(\"Info\");\n            break;\n        case DEBUG:\n            System.out.println(\"Debug\");\n            break;\n        default:\n            System.out.println(\"Unknown\");\n            break;\n    }\n}\n"}], "metadata": {"task_id": "Trail-Sense/1055", "ground_truth": "        val error = errorMap[code]\r\n        if (error != null) {\r\n            banner.report(error)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\errors\\NavigatorUserErrors.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nfun setBeacons(beacons: List<Beacon>) {\r\n        synchronized(lock) {", "choices": [{"text": "\r\n                for (int i = 0; i < beacons.size(); i++) {\r\n                        beacons.set(i, new Beacon(beacons.get(i)));\r\n                }\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1060", "ground_truth": "            _beacons.clear()\r\n            _beacons.addAll(beacons)\r\n        }\r\n        updateMarkers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nprivate fun updateMarkers() {\r\n        scope.launch {\r\n            runner.replace {\r\n                synchronized(lock) {\r\n                    val markers = convertToMarkers(_beacons)\r\n                    clearMarkers()\r\n                    for (marker in markers) {\r\n                        addMarker(marker)", "choices": [{"text": "\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private fun convertToMarkers(_beacons) {\r\n        scope.launch {\r\n            runner.replace {\r\n                synchronized(lock) {\r\n                    val markers = []\r\n                    for (marker in _beacons) {\r\n                        markers.push(marker)\r\n                    }\r\n                    return markers\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private fun clearMarkers() {\r\n        scope.launch {\r\n           "}], "metadata": {"task_id": "Trail-Sense/1065", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        var shouldUpdate = false\r\n\r\n        if (_compass == null) {\r\n            _compass = compass\r\n            shouldUpdate = true\r\n        }\r\n\r\n        if (shouldUpdate) {", "choices": [{"text": "\r\n            _compass.draw(drawer)\r\n            shouldUpdate = true\r\n        }\r\n\r\n        if (shouldUpdate) {\r\n            _compass.update(drawer)\r\n            shouldUpdate = true\r\n        }\r\n\r\n        if (shouldUpdate) {\r\n            _compass.draw(drawer)\r\n            shouldUpdate = true\r\n        }\r\n\r\n        if (shouldUpdate) {\r\n            _compass.draw(drawer)\r\n            shouldUpdate = true\r\n        }\r\n\r"}], "metadata": {"task_id": "Trail-Sense/1067", "ground_truth": "            updateMarkers(compass)\r\n        }\r\n\r\n        markerLayer.draw(drawer, compass)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BeaconCompassLayer.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nprivate fun updateMarkers(compass: ICompassView) {\r\n        scope.launch {\r\n            runner.replace {\r\n                synchronized(lock) {\r\n                    val markers = convertToMarkers(_beacons, compass)\r\n                    markerLayer.clearMarkers()\r\n                    for (marker in markers) {\r\n                        markerLayer.addMarker(marker.first, marker.second)", "choices": [{"text": "\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private fun convertToMarkers(beacons: List<Beacon>, compass: ICompassView) {\r\n        scope.launch {\r\n            runner.replace {\r\n                synchronized(lock) {\r\n                    val markers = []\r\n                    for (beacon in beacons) {\r\n                        markers.append(new Marker(beacon, compass))\r\n                    }\r\n                    return markers\r\n                }\r\n            }\r\n        }\r\n   "}], "metadata": {"task_id": "Trail-Sense/1069", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BeaconCompassLayer.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nval bearings\nval lock\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        val bearings = synchronized(lock) {\r\n            bearings.toList()", "choices": [{"text": " {\r\n                return bearings;\r\n            }\r\n        }\r\n        if (bearings == null) {\r\n            bearings = new ArrayList<>();\r\n            lock.lock();\r\n        }\r\n        bearings.addAll(drawer.getBearings());\r\n        lock.unlock();\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1072", "ground_truth": "        }\r\n        bearings.forEach {\r\n            compass.draw(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BearingCompassLayer.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nval markers\nval lock\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        val markers = synchronized(lock) {\r\n            markers.toList()", "choices": [{"text": "\n        }\r\n        if (markers == null) {\r\n            markers = new ArrayList<Marker>();\r\n            lock.lock();\r\n        }\r\n        for (Marker marker : markers) {\r\n            marker.draw(drawer, compass);\r\n        }\r\n        lock.unlock();\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1077", "ground_truth": "        }\r\n        markers.forEach {\r\n            compass.draw(it.first, it.second)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\MarkerCompassLayer.kt"}}
{"prompt": "import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun setColors(@ColorInt fillColor: Int, @ColorInt strokeColor: Int, opacity: Int = 50) {", "choices": [{"text": " {\n  if (fillColor > strokeColor) {\n    fillColor = strokeColor\n  }\n  if (fillColor < strokeColor) {\n    fillColor = strokeColor\n  }\n  if (fillColor > strokeColor) {\n    fillColor = strokeColor\n  }\n  if (fillColor < strokeColor) {\n    fillColor = strokeColor\n  }\n  if (fillColor > strokeColor) {\n    fillColor = strokeColor\n  }\n  if (fillColor < strokeColor) {\n    fillColor = strokeColor\n  }\n"}], "metadata": {"task_id": "Trail-Sense/1081", "ground_truth": "        _fillColor = fillColor\r\n        _strokeColor = strokeColor\r\n        _opacity = opacity\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyAccuracyLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.markers.CircleMapMarker\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport android.graphics.Color\nprivate fun updateMarker(drawer: ICanvasDrawer, map: IMapView){\r\n        val accuracy = _accuracy ?: return\r\n        val location = _location ?: return\r\n        if (map.metersPerPixel <= 0) return\r\n\r\n        val sizePixels = 2 * accuracy / map.metersPerPixel * map.layerScale\r\n        val sizeDp = sizePixels / drawer.dp(1f)\r\n\r\n        clearMarkers()\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fillColor,\r\n                _strokeColor,", "choices": [{"text": "\r\n                sizeDp\r\n            )\r\n        )\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fillColor,\r\n                _strokeColor,\r\n                sizeDp\r\n            )\r\n        )\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fillColor,\r\n                _strokeColor,\r\n                sizeDp\r\n            )\r\n        )\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _"}], "metadata": {"task_id": "Trail-Sense/1083", "ground_truth": "                _opacity,\r\n                sizeDp\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyAccuracyLayer.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nvar _path Path?\nvar _azimuth Float?\nvar _location Coordinate?\noverride fun draw(drawer: ICanvasDrawer, map: IMapView) {\r\n        if (_showDirection) {\r\n            drawArrow(drawer, map)", "choices": [{"text": "\r\n        }\r\n        if (_showPath) {\r\n            drawPath(drawer, map);\r\n        }\r\n        if (_showLocation) {\r\n            drawLocation(drawer, map);\r\n        }\r\n        if (_showAzimuth) {\r\n            drawAzimuth(drawer, map);\r\n        }\r\n        if (_showDirection) {\r\n            drawDirection(drawer, map);\r\n        }\r\n}\r\nfunction drawPath(drawer: ICanvasDrawer, map: IMap"}], "metadata": {"task_id": "Trail-Sense/1088", "ground_truth": "        } else {\r\n            drawCircle(map)\r\n        }\r\n        super.draw(drawer, map)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.markers.CircleMapMarker\nimport android.graphics.Color\nprivate fun drawCircle(map: IMapView) {\r\n        clearMarkers()\r\n        addMarker(\r\n            CircleMapMarker(\r\n                _location ?: map.mapCenter,\r\n                color = _color,\r\n                strokeColor = Color.WHITE,", "choices": [{"text": "\r\n                fillColor = Color.WHITE,\r\n                radius = _radius,\r\n                strokeWidth = _strokeWidth,\r\n                strokeColor = _strokeColor,\r\n                fillColor = _fillColor,\r\n                strokeColor = _strokeColor,\r\n                strokeWidth = _strokeWidth,\r\n                fillColor = _fillColor,\r\n                strokeColor = _strokeColor,\r\n                strokeWidth = _strokeWidth,\r\n                fillColor = _fillColor,\r\n                strokeColor = _strokeColor,\r\n                strokeWidth = _strokeWidth,"}], "metadata": {"task_id": "Trail-Sense/1089", "ground_truth": "                strokeWeight = 2f,\r\n                size = 16f\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.IMappablePath\nimport android.graphics.Path\noverride fun setPaths(paths: List<IMappablePath>) {\r\n        synchronized(lock) {", "choices": [{"text": "\r\n            for (var i = 0; i < paths.length; i++) {\r\n                paths[i].setPath(paths[i].getPath());\r\n            }\r\n        }\r\n    }\r\n    setPaths(paths: List<IMappablePath>) {\r\n        synchronized(lock) {\r\n            for (var i = 0; i < paths.length; i++) {\r\n                paths[i].setPath(paths[i].getPath());\r\n            }\r\n        }\r\n    }\r\n    setPaths(paths:"}], "metadata": {"task_id": "Trail-Sense/1095", "ground_truth": "            _paths.clear()\r\n            _paths.addAll(paths)\r\n            invalidate()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\PathLayer.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.trail_sense.tools.paths.ui.drawing.RenderedPath\nimport com.kylecorry.trail_sense.tools.paths.ui.drawing.IRenderedPathFactory\nimport android.graphics.Path\nprivate fun renderInBackground(renderer: IRenderedPathFactory) {\r\n        renderInProgress = true\r\n        scope.launch {", "choices": [{"text": "\r\n                renderer.render(path)\r\n                renderInProgress = false\r\n            }\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "Trail-Sense/1096", "ground_truth": "            runner.replace {\r\n                render(renderer)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\PathLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.science.oceanography.TideType\nfun setTides(tides: List<Pair<TideTable, TideType?>>) {\r\n        synchronized(lock) {", "choices": [{"text": "\r\n                for (Pair<TideTable, TideType?> tide : tides) {\r\n                        TideTable tideTable = tide.getLeft();\r\n                        TideType tideType = tide.getRight();\r\n                        if (tideTable!= null && tideType!= null) {\r\n                                tideTable.setTideType(tideType);\r\n                        }\r\n                }\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1100", "ground_truth": "            _tides.clear()\r\n            _tides.addAll(tides)\r\n        }\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\TideLayer.kt"}}
{"prompt": "protected fun finalize() {\r\n        _halfTideImg?.recycle()\r\n        _highTideImg?.recycle()", "choices": [{"text": ".recycle()\r\n        super.finalize()\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(this);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        getMenuInflater().in"}], "metadata": {"task_id": "Trail-Sense/1103", "ground_truth": "        _lowTideImg?.recycle()\r\n        _halfTideImg = null\r\n        _highTideImg = null\r\n        _lowTideImg = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\TideLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.system.Resources\nimport com.kylecorry.andromeda.canvas.ImageMode\nprivate fun drawAzimuth() {\r\n        tint(Resources.androidTextColorPrimary(context))\r\n        imageMode(ImageMode.Corner)\r\n        image(\r\n            getBitmap(R.drawable.ic_arrow_target, iconSize),", "choices": [{"text": "\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n"}], "metadata": {"task_id": "Trail-Sense/1104", "ground_truth": "            width / 2f - iconSize / 2f,\r\n            0f\r\n        )\r\n        noTint()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": "import androidx.core.view.isVisible\nvar range\nval west\nval south\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }", "choices": [{"text": "\r\n        }\r\n\r\n        if (range === 0) {\r\n            return\r\n        }\r\n\r\n        if (west === 0) {\r\n            return\r\n        }\r\n\r\n        if (south === 0) {\r\n            return\r\n        }\r\n\r\n        if (range === 1) {\r\n            return\r\n        }\r\n\r\n        if (west === 1) {\r\n            return\r\n        }\r\n\r\n        if (south === 1) {\r\n            return\r\n        }\r\n"}], "metadata": {"task_id": "Trail-Sense/1106", "ground_truth": "        clear()\r\n        drawAzimuth()\r\n        drawCompass()\r\n        drawCompassLayers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.trail_sense.R\nprivate fun toPixel(bearing: Float): Float {\r\n        return AugmentedRealityUtils.getPixelLinear(\r\n            bearing,\r\n            azimuth.value,\r\n            0f,", "choices": [{"text": " 0f\r\n        );\r\n    }\r\n    private fun toPixel(azimuth: Float): Float {\r\n        return AugmentedRealityUtils.getPixelLinear(\r\n            azimuth.value,\r\n            bearing.value,\r\n            0f,\r\n            0f\r\n        );\r\n    }\r\n    private fun toPixel(pitch: Float): Float {\r\n        return AugmentedRealityUtils.getPixelLinear(\r\n            pitch.value,\r\n            azimuth.value,\r\n            0f,\r\n            0f\r\n"}], "metadata": {"task_id": "Trail-Sense/1108", "ground_truth": "            0f,\r\n            Size(width.toFloat(), height.toFloat()),\r\n            Size(range, 0f)\r\n        ).x\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun resume() {\r\n        synchronized(lock) {\r\n            if (isResumed) {\r\n                return\r\n            }\r\n            isResumed = true\r\n            showSightingCompass = false\r\n            viewTreeObserver.addOnGlobalLayoutListener(globalLayoutListener)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1109", "ground_truth": "        }\r\n        if (isVisible) {\r\n            start()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearSightingCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun onCurrentPaceSpeedometerSelected() {\r\n        requestActivityRecognition { hasPermission ->", "choices": [{"text": "\r\n                if (currentPaceSpeedometer!= null) {\r\n                        currentPaceSpeedometer.stop();\r\n                        currentPaceSpeedometer = null;\r\n                }\r\n        }\r\n        requestActivityRecognition { hasPermission ->\r\n                if (currentPaceSpeedometer!= null) {\r\n                        currentPaceSpeedometer.start();\r\n                        currentPaceSpeedometer = null;\r\n                }\r\n        }\r\n        requestActivityRecognition { hasPermission ->\r\n                if (currentPaceSpeedometer!= null)"}], "metadata": {"task_id": "Trail-Sense/1117", "ground_truth": "            if (!hasPermission) {\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigationSettingsFragment.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n        activity?.let {", "choices": [{"text": "\r\n        activity = null\r\n}\r\n\r\nlet activity = null\r\n\r\nexport default class extends View {\r\n    constructor(context) {\r\n        super(context)\r\n    }\r\n\r\n    onCreate() {\r\n        super.onCreate()\r\n        activity = this\r\n    }\r\n\r\n    onResume() {\r\n        super.onResume()\r\n        activity = this\r\n    }\r\n\r\n    onPause() {\r\n        super.onPause()\r\n        activity = this\r\n    }\r"}], "metadata": {"task_id": "Trail-Sense/1118", "ground_truth": "            tryOrNothing {\r\n                Screen.setShowWhenLocked(it, false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Bearing\nimport com.kylecorry.andromeda.core.system.Screen\nprivate fun handleShowWhenLocked() {\r\n        activity?.let {\r\n            val shouldShow =\r\n                isBound && lockScreenPresence && (destination != null || destinationBearing != null)", "choices": [{"text": ");\r\n            if (shouldShow) {\r\n                screen?.show();\r\n            } else {\r\n                screen?.hide();\r\n            }\r\n        }\r\n}\r\nprivate fun handleHideWhenLocked() {\r\n        activity?.let {\r\n            val shouldHide =\r\n                isBound && lockScreenPresence && (destination!= null || destinationBearing!= null);\r\n            if (shouldHide) {\r\n                screen?.hide();\r\n            } else {\r\n                screen?.show();\r\n            }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1120", "ground_truth": "            tryOrNothing {\r\n                Screen.setShowWhenLocked(it, shouldShow)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateAstronomyData() {\r\n        inBackground {\r\n            if (gps.location == Coordinate.zero) {\r\n                return@inBackground", "choices": [{"text": ";\r\n            }\r\n            if (gps.location == Coordinate.one) {\r\n                return@inBackground;\r\n            }\r\n            if (gps.location == Coordinate.two) {\r\n                return@inBackground;\r\n            }\r\n            if (gps.location == Coordinate.three) {\r\n                return@inBackground;\r\n            }\r\n            if (gps.location == Coordinate.four) {\r\n                return@inBackground;\r\n            }\r\n            if (gps.location == Coordinate.f"}], "metadata": {"task_id": "Trail-Sense/1122", "ground_truth": "            }\r\n\r\n            updateAstronomyLayerCommand.execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Bearing\nprivate fun getDestinationBearing(): Float? {\r\n        val destLocation = destination?.coordinate\r\n        return when {\r\n            destLocation != null -> {\r\n                fromTrueNorth(gps.location.bearingTo(destLocation).value)\r\n            }\r\n\r\n            destinationBearing != null -> {\r\n                destinationBearing\r\n            }", "choices": [{"text": "\r\n        }\r\n    }\r\n\r\n    private fun getDestinationDistance(): Float? {\r\n        val destLocation = destination?.coordinate\r\n        return when {\r\n            destLocation!= null -> {\r\n                fromTrueNorth(gps.location.distanceTo(destLocation).value)\r\n            }\r\n\r\n            destinationDistance!= null -> {\r\n                destinationDistance\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getDestinationSpeed(): Float? {\r\n        val destLocation = destination?.coordinate\r\n        return"}], "metadata": {"task_id": "Trail-Sense/1124", "ground_truth": "            else -> {\r\n                null\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Bearing\nprivate fun getFacingBeacon(nearby: Collection<Beacon>): Beacon? {\r\n        return navigationService.getFacingBeacon(\r\n            gps.location,\r\n            compass.rawBearing,", "choices": [{"text": "\r\n            nearby\r\n        );\r\n    }\r\n    private fun getFacingBeacon(nearby: Collection<Beacon>): Beacon? {\r\n        return navigationService.getFacingBeacon(\r\n            gps.location,\r\n            compass.rawBearing,\r\n            nearby\r\n        );\r\n    }\r\n    private fun getFacingBeacon(nearby: Collection<Beacon>): Beacon? {\r\n        return navigationService.getFacingBeacon(\r\n            gps.location,\r\n            compass."}], "metadata": {"task_id": "Trail-Sense/1126", "ground_truth": "            nearby,\r\n            declination,\r\n            useTrueNorth\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.diagnostics.status.StatusBadge\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateSensorStatus() {\r\n        inBackground {\r\n            compassStatusBadge = compassStatusBadgeProvider.getBadge()\r\n            gpsStatusBadge = gpsStatusBadgeProvider.getBadge()\r\n\r\n            val codes = onDefault {\r\n                diagnostics.flatMap { it.scan() }\r\n            }\r\n\r\n            onMain {", "choices": [{"text": "\r\n                compassStatusBadge.setBadge(codes.compass)\r\n                gpsStatusBadge.setBadge(codes.gps)\r\n            }\r\n        }\r\n        return () -> {\r\n            compassStatusBadge.setBadge(compassStatusBadgeProvider.getBadge())\r\n            gpsStatusBadge.setBadge(gpsStatusBadgeProvider.getBadge())\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1127", "ground_truth": "                errors.update(codes)\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun updateNavigationButton() {\r\n        binding.beaconBtn.setImageResource(\r\n            if (destination != null) {\r\n                R.drawable.ic_cancel", "choices": [{"text": "\r\n                    R.drawable.ic_beacon\r\n                );\r\n            } else {\r\n                R.drawable.ic_beacon\r\n            }\r\n        );\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        updateNavigationButton();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        updateNavigationButton();\r\n    }\r\n\r\n    @Override\r\n    protected void"}], "metadata": {"task_id": "Trail-Sense/1128", "ground_truth": "            } else {\r\n                R.drawable.ic_beacon\r\n            }\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "var compassCircle Circle\nval formatService\nvar directionSize\n private fun drawLayers() {\r\n        // TODO: Handle beacon highlighting", "choices": [{"text": "\r\n}\r\n\r\nfunction init() {\r\n\r\n}\r\n\r\nfunction update() {\r\n\r\n}\r\n\r\nfunction draw() {\r\n\r\n}\r\n\r\nfunction keyPressed() {\r\n\r\n}\r\n\r\nfunction keyReleased() {\r\n\r\n}\r\n\r\nfunction mouseMoved() {\r\n\r\n}\r\n\r\nfunction mouseDragged() {\r\n\r\n}\r\n\r\nfunction mousePressed() {\r\n\r\n}\r\n\r\nfunction mouseReleased() {\r\n\r\n}\r"}], "metadata": {"task_id": "Trail-Sense/1129", "ground_truth": "        push()\r\n        clip(compassPath)\r\n        layers.forEach { it.draw(this, this) }\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "import android.graphics.Color\nprivate fun drawDirection(degrees: Float, text: String) {\r\n        push()\r\n        rotate(degrees)\r\n        fill(Color.WHITE)\r\n        text(\r\n            text,", "choices": [{"text": "\r\n        )\r\n        pop()\r\n}\r\nexport function drawDirection(degrees: Float, text: String) {\r\n        return drawDirection(degrees, text)\r\n}\r\nexport function drawDirection(text: String) {\r\n        return drawDirection(0, text)\r\n}\r\nexport function drawDirection(text: String) {\r\n        return drawDirection(0, text)\r\n}\r\nexport function drawDirection(text: String) {\r\n        return drawDirection(0, text)\r\n}\r\nexport function drawDirection(text"}], "metadata": {"task_id": "Trail-Sense/1131", "ground_truth": "            width / 2f,\r\n            height / 2f - compassSize / 4f\r\n        )\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "import androidx.core.view.isVisible\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }\r\n        clear()\r\n        push()\r\n        rotate(-azimuth.value)", "choices": [{"text": "\r\n        rotate(azimuth.value)\r\n        translate(x.value, y.value)\r\n        rotate(azimuth.value)\r\n        translate(x.value, y.value)\r\n        rotate(azimuth.value)\r\n        translate(x.value, y.value)\r\n        rotate(azimuth.value)\r\n        translate(x.value, y.value)\r\n        rotate(azimuth.value)\r\n        translate(x.value, y.value)\r\n        rotate(azimuth.value)\r\n        translate(x.value,"}], "metadata": {"task_id": "Trail-Sense/1132", "ground_truth": "        drawCompass()\r\n        drawLayers()\r\n        drawCompassLayers()\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport com.kylecorry.andromeda.canvas.ImageMode\nimport android.graphics.Color\nprivate fun drawAzimuth() {\r\n        tint(Resources.androidTextColorPrimary(context))\r\n        imageMode(ImageMode.Corner)\r\n        image(\r\n            getBitmap(R.drawable.ic_arrow_target, iconSize),", "choices": [{"text": "\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n            iconSize,\r\n"}], "metadata": {"task_id": "Trail-Sense/1136", "ground_truth": "            width / 2f - iconSize / 2f,\r\n            0f\r\n        )\r\n        noTint()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "import androidx.core.view.isVisible\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }\r\n        clear()\r\n        drawAzimuth()\r\n        push()", "choices": [{"text": "\r\n    }\r\n\r\n    drawAzimuth() {\r\n        if (!isVisible) {\r\n            return\r\n        }\r\n\r\n        let angle = Math.atan2(this.y, this.x)\r\n        if (angle > Math.PI) {\r\n            angle -= Math.PI\r\n        }\r\n\r\n        if (angle < -Math.PI) {\r\n            angle += Math.PI\r\n        }\r\n\r\n        this.ctx.beginPath()\r\n        this.ctx.arc(this."}], "metadata": {"task_id": "Trail-Sense/1137", "ground_truth": "        rotate(-azimuth.value)\r\n        drawCompass()\r\n        drawCompassLayers()\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.SolMath.deltaAngle\noverride fun draw(bearing: IMappableBearing, stopAt: Coordinate?) {\r\n        push()\r\n        fill(bearing.color)\r\n        opacity(100)\r\n        val dp2 = dp(2f)\r\n        arc(\r\n            iconSize.toFloat() + dp2,\r\n            iconSize.toFloat() + dp2,\r\n            compassSize.toFloat(),\r\n            compassSize.toFloat(),\r\n            azimuth.value - 90,\r\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),", "choices": [{"text": "\r\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),\r\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),\r\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),\r\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),\r\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),\r\n            azimuth.value - 90 + deltaAngle(azimuth"}], "metadata": {"task_id": "Trail-Sense/1138", "ground_truth": "            ArcMode.Pie\r\n        )\r\n        opacity(255)\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.notes.domain.Note\noverride suspend fun addNote(note: Note): Long {\r\n        return if (note.id != 0L){\r\n            noteDao.update(note)", "choices": [{"text": ".id = note.id;\r\n            noteDao.save(note);\r\n            return note.id;\r\n        } else {\r\n            return noteDao.save(note);\r\n        }\r\n    }\r\n\r\noverride suspend fun deleteNote(id: Long) {\r\n        return noteDao.delete(id);\r\n    }\r\n\r\noverride suspend fun getNotes() {\r\n        return noteDao.findAll();\r\n    }\r\n\r\noverride suspend fun getNote(id: Long) {\r\n        return noteDao.find"}], "metadata": {"task_id": "Trail-Sense/1140", "ground_truth": "            note.id\r\n        } else {\r\n            noteDao.insert(note)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\notes\\infrastructure\\NoteRepo.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.notes.domain.Note\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun loadEditingNote(id: Long) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                editingNote = notesRepo.getNote(id)\r\n            }\r\n\r\n            withContext(Dispatchers.Main) {\r\n                if (isBound) {\r\n                    editingNote?.let {\r\n                        binding.titleEdit.setText(it.title ?: \"\")\r\n                        binding.contentEdit.setText(it.contents ?: \"\")\r\n                    }", "choices": [{"text": ";\r\n                } else {\r\n                    binding.titleEdit.setText(it.title?: \"\")\r\n                    binding.contentEdit.setText(it.contents?: \"\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onAttach() {\r\n        super.onAttach();\r\n        isBound = true;\r\n    }\r\n\r\n    @Override\r\n    public void onDetach() {\r\n        super.onDetach();\r\n        isBound = false;\r"}], "metadata": {"task_id": "Trail-Sense/1150", "ground_truth": "                }\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\notes\\ui\\FragmentToolNotesCreate.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\noverride fun sort(items: List<PackItem>): List<PackItem> {\r\n        return items.sortedWith(\r\n            compareBy(\r\n                { it.category.name },", "choices": [{"text": "\r\n                { it.category.name }\r\n            )\r\n        );\r\n    }\r\n\r\n    override fun compareBy(items: List<PackItem>): List<PackItem> {\r\n        return items.sortedWith(\r\n            compareBy(\r\n                { it.name },\r\n                { it.category.name }\r\n            )\r\n        );\r\n    }\r\n\r\n    override fun compareBy(items: List<PackItem>): List<PackItem> {\r\n        return items.sortedWith(\r\n            compare"}], "metadata": {"task_id": "Trail-Sense/1153", "ground_truth": "                { it.name },\r\n                { it.id }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\domain\\sort\\CategoryPackItemSort.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\noverride fun sort(items: List<PackItem>): List<PackItem> {\r\n        return items.sortedWith(\r\n            compareBy(\r\n                { if (ascending) it.percentPacked else -it.percentPacked },\r\n                { it.category.name },", "choices": [{"text": "\r\n                { it.percentPacked },\r\n                { it.category.name }\r\n            )\r\n        );\r\n    }\r\n\r\n    override fun compareBy(\r\n        compare: (a: PackItem, b: PackItem) => number,\r\n        compareBy: (a: PackItem, b: PackItem) => number,\r\n        compareBy: (a: PackItem, b: PackItem) => number,\r\n        compareBy: (a: PackItem, b: PackItem) => number,\r\n        compareBy: ("}], "metadata": {"task_id": "Trail-Sense/1154", "ground_truth": "                { it.name },\r\n                { it.id }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\domain\\sort\\PackedPercentPackItemSort.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.sol.units.Weight\nfun mapToPackItem(item: PackItemEntity): PackItem {\r\n        val weight = if (item.weight != null && item.weightUnits != null) {\r\n            Weight(item.weight, item.weightUnits)\r\n        } else {\r\n            null\r\n        }\r\n        return PackItem(\r\n            item.id,\r\n            item.packId,\r\n            item.name,\r\n            item.category,", "choices": [{"text": " weight\r\n        )\r\n    }\r\nfun mapToPack(item: PackEntity): Pack {\r\n        val weight = if (item.weight!= null && item.weightUnits!= null) {\r\n            Weight(item.weight, item.weightUnits)\r\n        } else {\r\n            null\r\n        }\r\n        return Pack(\r\n            item.id,\r\n            item.packId,\r\n            item.name,\r\n            item.category,\r\n            weight\r\n        )\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1155", "ground_truth": "            item.amount,\r\n            item.desiredAmount,\r\n            weight\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nfun mapToItemEntity(item: PackItem): PackItemEntity {\r\n        return PackItemEntity(\r\n            item.name,\r\n            item.packId,\r\n            item.category,\r\n            item.amount,\r\n            item.desiredAmount,\r\n            item.weight?.weight,", "choices": [{"text": "\r\n            mapToPackEntity(item.pack)\r\n        );\r\n    }\r\n    fun mapToPackEntity(pack: Pack): PackEntity {\r\n        return PackEntity(\r\n            pack.name,\r\n            pack.packId,\r\n            mapToItemEntity(pack.items.get(0)),\r\n            mapToItemEntity(pack.items.get(1)),\r\n            mapToItemEntity(pack.items.get(2)),\r\n            mapToItemEntity(pack.items.get(3)),\r\n            mapToItemEntity(pack"}], "metadata": {"task_id": "Trail-Sense/1156", "ground_truth": "            item.weight?.units\r\n        ).also {\r\n            it.id = item.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport androidx.lifecycle.map\noverride suspend fun addPack(pack: Pack): Long {\r\n        return if (pack.id == 0L) {\r\n            packDao.insert(mapper.mapToPackEntity(pack))", "choices": [{"text": ".id;\r\n        } else {\r\n            return packDao.update(mapper.mapToPackEntity(pack));\r\n        }\r\n    }\r\n\r\n    override suspend fun deletePack(id: Long): Long {\r\n        return if (id == 0L) {\r\n            return packDao.delete(mapper.mapToPackEntity(id));\r\n        } else {\r\n            return packDao.delete(mapper.mapToPackEntity(id));\r\n        }\r\n    }\r\n\r\n    override suspend fun getPack(id: Long):"}], "metadata": {"task_id": "Trail-Sense/1162", "ground_truth": "        } else {\r\n            packDao.update(mapper.mapToPackEntity(pack))\r\n            pack.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport androidx.lifecycle.map\noverride suspend fun copyPack(fromPack: Pack, toPack: Pack): Long {\r\n        val newId = addPack(toPack)\r\n        val items = getItemsFromPackAsync(fromPack.id)\r\n        val toItems = items.map { it.copy(id = 0, packId = newId) }", "choices": [{"text": ".map { it.copy(id = 0, packId = newId) }\r\n        return toItems\r\n    }\r\n\r\n    override suspend fun deletePack(packId: Long): Void {\r\n        val items = getItemsFromPackAsync(packId)\r\n        val toItems = items.map { it.delete(id = 0) }\r\n        return toItems\r\n    }\r\n\r\n    override suspend fun updatePack(fromPack: Pack, toPack: Pack): Void {\r\n        val items = getItemsFromPackAsync(fromPack.id)"}], "metadata": {"task_id": "Trail-Sense/1163", "ground_truth": "        toItems.forEach {\r\n            addItem(it)\r\n        }\r\n        return newId\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "import com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        inBackground {", "choices": [{"text": " {\r\n            super.onViewCreated(view, savedInstanceState);\r\n            inBackground {\r\n                super.onViewCreated(view, savedInstanceState);\r\n                inBackground {\r\n                    super.onViewCreated(view, savedInstanceState);\r\n                    inBackground {\r\n                        super.onViewCreated(view, savedInstanceState);\r\n                        inBackground {\r\n                            super.onViewCreated(view, savedInstanceState);\r\n                            inBackground {\r\n                                super.onViewCreated(view, savedInstanceState);\r\n                                inBackground {\r\n                                    super.on"}], "metadata": {"task_id": "Trail-Sense/1168", "ground_truth": "            withContext(Dispatchers.IO) {\r\n                loadPack(packId)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nprivate fun onItemCheckboxClicked(item: PackItem) {\r\n        if (!item.isFullyPacked) {\r\n            if (item.desiredAmount == 0.0) {\r\n                setAmount(item, 1.0)\r\n            } else {\r\n                setAmount(item, item.desiredAmount)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1171", "ground_truth": "            }\r\n        } else {\r\n            setAmount(item, 0.0)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun deleteItem(item: PackItem) {\r\n        inBackground {", "choices": [{"text": "\r\n            item.delete();\r\n        }\r\n    }\r\n    private fun deletePack(pack: Pack) {\r\n        inBackground {\r\n            pack.delete();\r\n        }\r\n    }\r\n    private fun deletePackItem(item: PackItem) {\r\n        inBackground {\r\n            item.delete();\r\n        }\r\n    }\r\n    private fun updatePack(pack: Pack) {\r\n        inBackground {\r\n            pack.update();\r\n        }\r\n    }\r\n    private fun updatePackItem("}], "metadata": {"task_id": "Trail-Sense/1172", "ground_truth": "            withContext(Dispatchers.IO) {\r\n                itemRepo.deleteItem(item)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun add(item: PackItem) {\r\n        Pickers.number(\r\n            requireContext(),\r\n            getString(R.string.add),\r\n            null,\r\n            null,\r\n            allowNegative = false,\r\n            hint = getString(R.string.dialog_item_amount)\r\n        ) {", "choices": [{"text": " {\r\n            item.amount++;\r\n        }\r\n    }\r\n    private fun subtract(item: PackItem) {\r\n        Pickers.number(\r\n            requireContext(),\r\n            getString(R.string.subtract),\r\n            null,\r\n            null,\r\n            allowNegative = false,\r\n            hint = getString(R.string.dialog_item_amount)\r\n        ) {\r\n            item.amount--;\r\n        }\r\n    }\r\n    private fun multiply(item: PackItem) {\r\n       "}], "metadata": {"task_id": "Trail-Sense/1175", "ground_truth": "            if (it != null) {\r\n                addAmount(item, it.toDouble())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun subtract(item: PackItem) {\r\n        Pickers.number(\r\n            requireContext(),\r\n            getString(R.string.subtract),\r\n            null,\r\n            null,\r\n            allowNegative = false,\r\n            hint = getString(R.string.dialog_item_amount)\r\n        ) {", "choices": [{"text": " {\r\n            item.setAmount(item.getAmount() - item.getQuantity());\r\n        }\r\n    }\r\nprivate fun add(item: PackItem) {\r\n        Pickers.number(\r\n            requireContext(),\r\n            getString(R.string.add),\r\n            null,\r\n            null,\r\n            allowNegative = false,\r\n            hint = getString(R.string.dialog_item_amount)\r\n        ) {\r\n            item.setAmount(item.getAmount() + item.getQuantity());\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1176", "ground_truth": "            if (it != null) {\r\n                addAmount(item, -it.toDouble())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun addAmount(item: PackItem, amount: Double) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                itemRepo.addItem(", "choices": [{"text": "item, amount);\r\n            }\r\n        }\r\n    }\r\n    private fun removeAmount(item: PackItem, amount: Double) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                itemRepo.removeItem(item, amount);\r\n            }\r\n        }\r\n    }\r\n    private fun updateAmount(item: PackItem, amount: Double) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                itemRepo.updateItem(item, amount);\r\n"}], "metadata": {"task_id": "Trail-Sense/1177", "ground_truth": "                    item.copy(amount = max(0.0, item.amount + amount))\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun setAmount(item: PackItem, amount: Double) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                itemRepo.addItem(", "choices": [{"text": "item, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_packs);\r\n        itemRepo = new ItemRepo(this);\r\n        packRepo = new PackRepo(this);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this adds items to the action bar"}], "metadata": {"task_id": "Trail-Sense/1178", "ground_truth": "                    item.copy(amount = amount)\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val options = listOf(\"category\", \"percent_asc\", \"percent_desc\", \"weight_asc\", \"weight_desc\")\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            options.map { getSortTitle(it) },\r\n            options.indexOf(prefs.packs.packSort)\r\n        ) {", "choices": [{"text": "\r\n            prefs.packs.packSort = it;\r\n        }\r\n        return null;\r\n    }\r\n    private static String getSortTitle(val it) {\r\n        switch (it) {\r\n            case \"category\":\r\n                return getString(R.string.category);\r\n            case \"percent_asc\":\r\n                return getString(R.string.percent_asc);\r\n            case \"percent_desc\":\r\n                return getString(R.string.percent_desc);\r\n            case \"weight_asc\":\r\n                return getString("}], "metadata": {"task_id": "Trail-Sense/1179", "ground_truth": "            if (it != null) {\r\n                onSortChange(options[it])\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun renamePack(pack: Pack) {\r\n        Pickers.text(\r\n            requireContext(),\r\n            getString(R.string.rename),\r\n            null,\r\n            pack.name,\r\n            hint = getString(R.string.name)\r\n        ) {\r\n            if (it != null) {\r\n                inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        packRepo.addPack(pack.copy(name = it))", "choices": [{"text": "\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private fun deletePack(pack: Pack) {\r\n        Pickers.text(\r\n            requireContext(),\r\n            getString(R.string.delete),\r\n            null,\r\n            pack.name,\r\n            hint = getString(R.string.name)\r\n        ) {\r\n            if (it!= null) {\r\n                inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        packRepo.removePack(pack.copy"}], "metadata": {"task_id": "Trail-Sense/1184", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackListFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nprivate fun deletePack(pack: Pack) {\r\n        Alerts.dialog(\r\n            requireContext(),\r\n            getString(R.string.delete_pack),\r\n            pack.name\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        packRepo.deletePack(pack)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1185", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride fun toBeacon(path: Path, point: PathPoint): Beacon {\r\n        return Beacon(\r\n            0L,\r\n            path.name ?: defaultName,\r\n            point.coordinate,\r\n            visible = false,\r\n            elevation = point.elevation,", "choices": [{"text": "\r\n        );\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1187", "ground_truth": "            temporary = true,\r\n            color = path.style.color,\r\n            owner = BeaconOwner.Path\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\beacon\\TemporaryPathPointBeaconConverter.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.IPointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport android.util.Range\noverride fun createColoringStrategy(path: List<PathPoint>): IPointColoringStrategy {\r\n        val altitudeRange = getAltitudeRange(path)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1188", "ground_truth": "        return AltitudePointColoringStrategy(\r\n            altitudeRange,\r\n            createColorScale(path)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\AltitudePointDisplayFactory.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.scales.IColorScale\nimport com.kylecorry.trail_sense.shared.scales.DiscreteColorScale\nimport com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun createColorScale(path: List<PathPoint>): IColorScale {\r\n        return DiscreteColorScale(\r\n            listOf(\r\n                AppColor.Green.color,", "choices": [{"text": "\r\n                AppColor.Red.color,\r\n                AppColor.Yellow.color,\r\n                AppColor.Blue.color,\r\n                AppColor.Magenta.color,\r\n                AppColor.Cyan.color,\r\n                AppColor.White.color\r\n            ),\r\n            path\r\n        );\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1192", "ground_truth": "                AppColor.Yellow.color,\r\n                AppColor.Red.color\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\SlopePointDisplayFactory.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.IPointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.rangeOrNull\nimport android.util.Range\nimport android.graphics.Color\noverride fun createColoringStrategy(path: List<PathPoint>): IPointColoringStrategy {\r\n        val timeRange = path.mapNotNull { it.time }.rangeOrNull() ?: Range(\r\n            Instant.now(),\r\n            Instant.now()\r\n        )", "choices": [{"text": ";\r\n        if (timeRange == null) {\r\n            return null;\r\n        }\r\n        return new PathPointColoringStrategy(\r\n            path,\r\n            path.mapNotNull { it.time }.rangeOrNull(),\r\n            path.mapNotNull { it.time }.rangeOrNull(),\r\n            path.mapNotNull { it.time }.rangeOrNull(),\r\n            path.mapNotNull { it.time }.rangeOrNull(),\r\n            path.mapNotNull { it.time }.rangeOrNull(),\r\n            path.mapNotNull { it.time"}], "metadata": {"task_id": "Trail-Sense/1194", "ground_truth": "        return TimePointColoringStrategy(\r\n            timeRange,\r\n            createColorScale(path)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\TimePointDisplayFactory.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.TimeUnits\nimport com.kylecorry.sol.units.Speed\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.geology.Geology\noverride fun getHikingDuration(\r\n        path: List<PathPoint>,\r\n        pace: Speed\r\n    ): Duration {\r\n        val speed = pace.convertTo(DistanceUnits.Meters, TimeUnits.Seconds).speed\r\n        val gain = getElevationGain(path).meters().distance\r\n\r\n        val distance = Geology.getPathDistance(path.map { it.coordinate }).meters().distance", "choices": [{"text": "\r\n        return Duration.ofSeconds(speed * gain)\r\n    }\r\n\r\noverride fun getElevationGain(\r\n        path: List<PathPoint>\r\n    ): Distance {\r\n        if (path.isEmpty()) {\r\n            return Distance.Zero\r\n        }\r\n\r\n        return path.get(0).distance\r\n    }\r\n\r\noverride fun getElevationDuration(\r\n        path: List<PathPoint>\r\n    ): Duration {\r\n        if (path.isEmpty()) {\r\n            return"}], "metadata": {"task_id": "Trail-Sense/1203", "ground_truth": "        val scarfs = distance + 7.92f * gain\r\n\r\n        return Duration.ofSeconds((scarfs / speed).toLong())\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\hiking\\HikingService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\noverride suspend fun map(item: IPath): String? {\r\n        return if (item is Path) {", "choices": [{"text": "\r\n            case Path:\r\n                return item.getPath();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/1211", "ground_truth": "            item.name\r\n        } else {\r\n            (item as PathGroup).name\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\pathsort\\mappers\\PathNameMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.Coordinate\noverride suspend fun getNextPoint(path: List<PathPoint>, location: Coordinate): PathPoint? {\r\n        // TODO: This doesn't take into consideration which points you've already reached - if the path is a out and back type, it will not work properly\r\n        val line = NearestPathLineCalculator().calculate(location, path) ?: return null\r\n        return if (isAtPoint(location, line.second)) {\r\n            line.second", "choices": [{"text": ".first = location\r\n            return line.second\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    private static boolean isAtPoint(Coordinate location, PathPoint point) {\r\n        return location.x == point.x && location.y == point.y\r\n    }\r\n\r\n    private static NearestPathLineCalculator NearestPathLineCalculator() {\r\n        return new NearestPathLineCalculator()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1216", "ground_truth": "        } else {\r\n            val idx = path.indexOf(line.second)\r\n            path.getOrNull(idx + 1)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\point_finder\\NextPathPointNavigator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.specifications.InGeofenceSpecification\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nprivate fun isAtPoint(location: Coordinate, point: PathPoint): Boolean {\r\n        val specification = InGeofenceSpecification(\r\n            point.coordinate, Distance.meters(", "choices": [{"text": "location)\r\n        );\r\n        return specification.isSatisfied();\r\n    }\r\n    private fun isAtPoint(location: Coordinate, point: PathPoint): Boolean {\r\n        val specification = InGeofenceSpecification(\r\n            point.coordinate, Distance.meters(location)\r\n        );\r\n        return specification.isSatisfied();\r\n    }\r\n    private fun isAtPoint(location: Coordinate, point: PathPoint): Boolean {\r\n        val specification = InGeofenceSpecification(\r\n            point.coordinate, Distance.meters("}], "metadata": {"task_id": "Trail-Sense/1217", "ground_truth": "                AT_LOCATION_RADIUS\r\n            )\r\n        )\r\n        return specification.isSatisfiedBy(location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\point_finder\\NextPathPointNavigator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun getColor(point: PathPoint): Int? {\r\n        val pct = when (point.cellSignal?.quality) {\r\n            Quality.Poor -> 0f\r\n            Quality.Moderate -> 0.5f", "choices": [{"text": "\r\n            Quality.High -> 1f\r\n            Quality.Medium -> 2f\r\n            Quality.Low -> 3f\r\n        } else {\r\n            Quality.Poor -> 0f\r\n            Quality.Moderate -> 0.5f\r\n            Quality.High -> 1f\r\n            Quality.Medium -> 2f\r\n            Quality.Low -> 3f\r\n        }\r\n        return pct\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1219", "ground_truth": "            Quality.Good -> 1f\r\n            else -> return null\r\n        }\r\n        return colorScale.getColor(pct)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\waypointcolors\\CellSignalPointColoringStrategy.kt"}}
{"prompt": "import kotlin.math.absoluteValue\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun getColor(point: PathPoint): Int {\r\n        val pct = if (point.slope.absoluteValue <= 10f) {\r\n            0f\r\n        } else if (point.slope.absoluteValue <= 25f) {\r\n            0.5f", "choices": [{"text": "\r\n        } else if (point.slope.absoluteValue <= 50f) {\r\n            1f\r\n        } else if (point.slope.absoluteValue <= 75f) {\r\n            2f\r\n        } else if (point.slope.absoluteValue <= 100f) {\r\n            3f\r\n        } else if (point.slope.absoluteValue <= 150f) {\r\n            4f\r\n        } else if (point.slope.absoluteValue <= 200f) {\r\n            5f\r\n        } else if (point.slope.absoluteValue"}], "metadata": {"task_id": "Trail-Sense/1221", "ground_truth": "        } else {\r\n            1f\r\n        }\r\n        return colorScale.getColor(pct)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\waypointcolors\\SlopePointColoringStrategy.kt"}}
{"prompt": "import androidx.room.Entity\nfun from(point: PathPoint): WaypointEntity {\r\n            return WaypointEntity(\r\n                point.coordinate.latitude,\r\n                point.coordinate.longitude,\r\n                point.elevation,\r\n                point.time?.toEpochMilli() ?: 0L,\r\n                point.cellSignal?.network?.id,\r\n                point.cellSignal?.quality?.ordinal,", "choices": [{"text": "\r\n                point.cellSignal?.network?.name,\r\n                point.cellSignal?.quality?.name,\r\n                point.cellSignal?.network?.id,\r\n                point.cellSignal?.quality?.ordinal,\r\n                point.cellSignal?.network?.name,\r\n                point.cellSignal?.quality?.name,\r\n                point.cellSignal?.network?.id,\r\n                point.cellSignal?.quality?.ordinal,\r\n                point.cellSignal?.network?.name,"}], "metadata": {"task_id": "Trail-Sense/1224", "ground_truth": "                point.pathId\r\n            ).also {\r\n                it.id = point.id\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\WaypointEntity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nsuspend fun restart(context: Context) {\r\n        val prefs = UserPreferences(context)", "choices": [{"text": ".get();\r\n        if (prefs!= null) {\r\n            prefs.restart();\r\n        }\r\n    }\r\n\r\nsuspend fun pause(context: Context) {\r\n        val prefs = UserPreferences(context);\r\n        if (prefs!= null) {\r\n            prefs.pause();\r\n        }\r\n    }\r\n\r\nsuspend fun resume(context: Context) {\r\n        val prefs = UserPreferences(context);\r\n        if (prefs!= null) {\r\n            prefs.resume();\r\n        }\r"}], "metadata": {"task_id": "Trail-Sense/1227", "ground_truth": "        if (prefs.backtrackEnabled) {\r\n            stop(context)\r\n            start(context, false)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\BacktrackScheduler.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.infrastructure.persistence.PathService\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport android.content.Context\nsuspend fun start(context: Context, startNewPath: Boolean) = onDefault {\r\n        if (startNewPath) {\r\n            PathService.getInstance(context).endBacktrackPath()\r\n        }\r\n\r\n        if (!BacktrackIsAvailable().isSatisfiedBy(context)) {", "choices": [{"text": "\r\n            PathService.getInstance(context).beginBacktrackPath()\r\n        }\r\n    }\r\n}\r\nsuspend fun stop(context: Context) = onDefault {\r\n    if (BacktrackIsAvailable().isSatisfiedBy(context)) {\r\n        PathService.getInstance(context).endBacktrackPath()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1228", "ground_truth": "            return@onDefault\r\n        }\r\n\r\n        BacktrackService.start(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\BacktrackScheduler.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.trail_sense.shared.networkQuality\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nprivate suspend fun recordWaypoint(): PathPoint {\r\n        return onIO {\r\n            val waypoint = PathPoint(\r\n                0,\r\n                pathId,\r\n                gps.location,\r\n                altimeter.altitude,\r\n                Instant.now(),\r\n                cellSignalSensor.networkQuality()\r\n            )\r\n\r\n            if (pathId == 0L) {\r\n                pathService.addBacktrackPoint(waypoint)\r\n            } else {", "choices": [{"text": "\r\n                pathService.addPathPoint(waypoint)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        recordWaypoint().start();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        recordWaypoint().resume();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        recordWay"}], "metadata": {"task_id": "Trail-Sense/1233", "ground_truth": "                pathService.addWaypoint(waypoint)\r\n            }\r\n            waypoint\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\commands\\BacktrackCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\noverride suspend fun load(search: String?, group: Long?): List<IPath> = onIO {\r\n        if (search.isNullOrBlank()) {", "choices": [{"text": "\r\n            search = \"\";\r\n        }\r\n        if (group.isNullOrBlank()) {\r\n            group = 0;\r\n        }\r\n        return Path.load(search, group);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super."}], "metadata": {"task_id": "Trail-Sense/1235", "ground_truth": "            getPathsByGroup(group)\r\n        } else {\r\n            getPathsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\PathGroupLoader.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun add(value: Path): Long {\r\n        return if (value.id != 0L) {\r\n            pathDao.update(PathEntity.from(value))", "choices": [{"text": ");\r\n            return value.id;\r\n        } else {\r\n            pathDao.insert(PathEntity.from(value));\r\n            return value.id;\r\n        }\r\n    }\r\noverride suspend fun update(value: Path): Long {\r\n        return if (value.id!= 0L) {\r\n            pathDao.update(PathEntity.from(value));\r\n            return value.id;\r\n        } else {\r\n            pathDao.delete(PathEntity.from(value));\r\n            return value.id;\r\n       "}], "metadata": {"task_id": "Trail-Sense/1238", "ground_truth": "            value.id\r\n        } else {\r\n            pathDao.insert(PathEntity.from(value))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun addGroup(group: PathGroup): Long {\r\n        return if (group.id != 0L) {\r\n            groupDao.update(PathGroupEntity.from(group))", "choices": [{"text": ");\r\n            return group.id;\r\n        } else {\r\n            groupDao.insert(PathGroupEntity.from(group));\r\n            return group.id;\r\n        }\r\n    }\r\n\r\n    override suspend fun removeGroup(group: PathGroup): Long {\r\n        return if (group.id!= 0L) {\r\n            groupDao.delete(PathGroupEntity.from(group));\r\n            return group.id;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "Trail-Sense/1239", "ground_truth": "            group.id\r\n        } else {\r\n            groupDao.insert(PathGroupEntity.from(group))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathRepo.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun addBacktrackPoint(point: PathPoint) {\r\n        backtrackLock.withLock {\r\n            val id = cache.getLong(BACKTRACK_PATH_KEY)\r\n            val backtrackId = if (id == null || getPath(id) == null) {\r\n                val newId = createBacktrackPath()\r\n                cache.putLong(BACKTRACK_PATH_KEY, newId)\r\n                newId\r\n            } else {\r\n                id", "choices": [{"text": " = getPath(id).addBacktrackPoint(point)\r\n                backtrackId\r\n            }\r\n            return backtrackId\r\n        }\r\n    }\r\n    override suspend fun removeBacktrackPoint(id: long) {\r\n        backtrackLock.withLock {\r\n            val id = cache.getLong(BACKTRACK_PATH_KEY)\r\n            val backtrackId = getPath(id).removeBacktrackPoint(id)\r\n            cache.putLong(BACKTRACK_PATH_KEY, backtrackId)\r\n            backtrackId\r\n       "}], "metadata": {"task_id": "Trail-Sense/1241", "ground_truth": "            }\r\n\r\n            addWaypoint(point.copy(pathId = backtrackId))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun deletePath(path: Path) {\r\n        backtrackLock.withLock {\r\n            val backtrackId = cache.getLong(BACKTRACK_PATH_KEY)\r\n            if (backtrackId == path.id) {\r\n                cache.remove(BACKTRACK_PATH_KEY)\r\n            }", "choices": [{"text": " {\r\n                cache.put(BACKTRACK_PATH_KEY, path.id)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        backtrackLock.withLock {\r\n            val backtrackId = cache.getLong(BACKTRACK_PATH_KEY)\r\n            if (backtrackId!= null) {\r\n                cache.remove(BACKTRACK_PATH_KEY)\r\n            }\r\n        }\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "Trail-Sense/1246", "ground_truth": "        }\r\n\r\n        waypointRepo.deleteInPath(path.id)\r\n        pathRepo.delete(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport androidx.lifecycle.map\noverride suspend fun getWaypoints(paths: List<Long>?): Map<Long, List<PathPoint>> {\r\n        if (paths?.isEmpty() == true) {\r\n            return mapOf()\r\n        }\r\n\r\n        val points = if (paths != null) {\r\n            waypointRepo.getAllInPaths(paths)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1247", "ground_truth": "        } else {\r\n            waypointRepo.getAll()\r\n        }\r\n        return points.groupBy { it.pathId }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport androidx.lifecycle.map\noverride suspend fun moveWaypointsToPath(points: List<PathPoint>, pathId: Long) {\r\n        val oldPaths =\r\n            points.filter { it.pathId != 0L && it.pathId != pathId }.map { it.pathId }.distinct()\r\n        waypointRepo.addAll(points.map { it.copy(pathId = pathId) })", "choices": [{"text": ".map(it -> it.copy(pathId = oldPaths.get(it.pathId))))\r\n    }\r\n\r\n    @Override\r\n    protected void onPostExecute(List<Path> paths) {\r\n        super.onPostExecute(paths)\r\n        waypointRepo.addAll(paths.map(it -> it.copy(pathId = 0L)))\r\n    }\r\n\r\n    @Override\r\n    protected void onPreExecute() {\r\n        super.onPreExecute()\r\n        waypointRepo.addAll(paths"}], "metadata": {"task_id": "Trail-Sense/1251", "ground_truth": "        updatePathMetadata(pathId)\r\n        for (path in oldPaths) {\r\n            updatePathMetadata(pathId)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.WaypointEntity\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride suspend fun add(value: PathPoint): Long {\r\n        return if (value.id != 0L) {\r\n            waypointDao.update(WaypointEntity.from(value))", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1259", "ground_truth": "            value.id\r\n        } else {\r\n            waypointDao.insert(WaypointEntity.from(value))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.WaypointEntity\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport androidx.lifecycle.map\noverride suspend fun addAll(value: List<PathPoint>) {\r\n        val toAdd = value.filter { it.id == 0L }.map { WaypointEntity.from(it) }\r\n        val toUpdate = value.filter { it.id != 0L }.map { WaypointEntity.from(it) }\r\n\r\n        if (toAdd.isNotEmpty()) {\r\n            waypointDao.bulkInsert(toAdd)\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1260", "ground_truth": "\r\n        if (toUpdate.isNotEmpty()) {\r\n            waypointDao.bulkUpdate(toUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport androidx.lifecycle.LiveData\noverride fun getAllLive(since: Instant?): LiveData<List<PathPoint>> {\r\n        return if (since == null) {\r\n            waypointDao.getAll()\r\n        } else {\r\n            waypointDao.getAllSince(\r\n                since.toEpochMilli()", "choices": [{"text": " )\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<PathPoint> getAll() {\r\n        return waypointDao.getAll()\r\n    }\r\n\r\n    @Override\r\n    public List<PathPoint> getAllSince(Instant since) {\r\n        return waypointDao.getAllSince(since.toEpochMilli())\r\n    }\r\n\r\n    @Override\r\n    public void deleteAll() {\r\n        waypointDao.deleteAll()\r\n    }\r\n\r\n    @Override\r\n    public"}], "metadata": {"task_id": "Trail-Sense/1262", "ground_truth": "            )\r\n        }.map {\r\n            it.map { waypoint -> waypoint.toPathPoint() }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n\t\tif (this.game.data.player == null) {\n\t\t\tthis.game.data.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t\tthis.game.data.player.anchor.setTo(0.5, 0.5);\n\t\t} else {\n\t\t\tthis.game.data.player.destroy();\n\t\t"}], "metadata": {"task_id": "Trail-Sense/1271", "ground_truth": "        isRunning = false\r\n        runner.cancel()\r\n        stopService(true)\r\n        super.onDestroy()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\services\\BacktrackService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FeatureState\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.BacktrackScheduler\nprivate fun calculateBacktrackState(): FeatureState {\r\n        return if (BacktrackScheduler.isDisabled(context)) {\r\n            FeatureState.Unavailable\r\n        } else if (BacktrackScheduler.isOn(context)) {", "choices": [{"text": "\r\n            FeatureState.On\r\n        } else if (BacktrackScheduler.isOff(context)) {\r\n            FeatureState.Off\r\n        } else {\r\n            FeatureState.Unavailable\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1274", "ground_truth": "            FeatureState.On\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\subsystem\\BacktrackSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.SolMath.roundPlaces\noverride fun execute(path: Path, point: PathPoint) {\r\n        val params = mutableMapOf(\r\n            \"label\" to (path.name ?: context.getString(R.string.waypoint))\r\n        )\r\n\r\n        if (point.elevation != null) {\r\n            params[\"ele\"] = point.elevation.roundPlaces(2).toString()\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1278", "ground_truth": "        AppUtils.placeBeacon(\r\n            context,\r\n            GeoUri(point.coordinate, null, params)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\CreateBeaconFromPointCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.CoroutinePickers\nsuspend fun execute(parentId: Long?) {\r\n        val name = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.group),\r\n                hint = context.getString(R.string.name)\r\n            )\r\n        } ?: return", "choices": [{"text": ";\r\n        val group = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.group),\r\n                hint = context.getString(R.string.group)\r\n            )\r\n        }?: return;\r\n        val description = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.description),\r\n                hint = context.getString(R.string.description)\r\n            )\r\n       "}], "metadata": {"task_id": "Trail-Sense/1279", "ground_truth": "\r\n        onIO {\r\n            pathService.addGroup(PathGroup(0, name, parentId))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\CreatePathGroupCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\noverride suspend fun execute(group: PathGroup) {\r\n        val cancelled = onMain {\r\n            CoroutineAlerts.dialog(\r\n                context,\r\n                context.getString(R.string.delete),\r\n                context.getString(R.string.delete_path_group_message, group.name)\r\n            )\r\n        }\r\n\r\n        if (cancelled) {\r\n            return\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1280", "ground_truth": "\r\n        onIO {\r\n            pathService.deleteGroup(group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\DeletePathGroupGroupCommand.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nimport android.content.Context\noverride fun execute(path: Path, point: PathPoint) {\r\n        Alerts.dialog(\r\n            context,\r\n            context.getString(R.string.delete_waypoint_prompt)\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                lifecycleOwner.inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        pathService.deleteWaypoint(point)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1281", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\DeletePointCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathMetadata\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.FullPath\nimport com.kylecorry.andromeda.gpx.GPXData\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun getTracks(gpx: GPXData): List<FullPath> = onDefault {\r\n        val paths = mutableListOf<FullPath>()\r\n        for (track in gpx.tracks) {\r\n            for ((points) in track.segments) {\r\n                val path = Path(0, track.name, style, PathMetadata.empty)\r\n                val parent = track.group?.let {\r\n                    PathGroup(0, it)\r\n                }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1284", "ground_truth": "                paths.add(FullPath(path, points.toPathPoints(), parent))\r\n            }\r\n        }\r\n        paths\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\ImportPathsCommand.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.content.Context\noverride fun execute(path: Path) {\r\n        Pickers.text(\r\n            context,\r\n            context.getString(R.string.rename),\r\n            default = path.name,\r\n            hint = context.getString(R.string.name)\r\n        ) {\r\n            if (it != null) {\r\n                lifecycleOwner.inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        pathService.addPath(path.copy(name = it.ifBlank { null }))\r\n                    }", "choices": [{"text": " }\r\n                }\r\n            } else {\r\n                lifecycleOwner.inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        pathService.removePath(path.copy(name = it.ifBlank { null }))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1289", "ground_truth": "                }\r\n\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\RenamePathCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.CoroutinePickers\noverride suspend fun execute(group: PathGroup) {\r\n        val newName = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.rename),\r\n                default = group.name,\r\n                hint = context.getString(R.string.name)\r\n            )\r\n        } ?: return", "choices": [{"text": ";\r\n        group.name = newName;\r\n        onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.ok),\r\n                default = context.getString(R.string.ok),\r\n                hint = context.getString(R.string.ok)\r\n            )\r\n        }?: return;\r\n        onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.cancel),\r\n                default"}], "metadata": {"task_id": "Trail-Sense/1290", "ground_truth": "\r\n        onIO {\r\n            pathService.addGroup(group.copy(name = newName))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\RenamePathGroupGroupCommand.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun getScaleDistance(\r\n        units: DistanceUnits,\r\n        maxLength: Float,\r\n        metersPerPixel: Float\r\n    ): Distance {\r\n        val intervals = if (units == DistanceUnits.Meters) {\r\n            metricScaleIntervals\r\n        } else {\r\n            imperialScaleIntervals\r\n        }\r\n\r\n        for (i in 1..intervals.lastIndex) {\r\n            val current = intervals[i]\r\n            val length = current.meters().distance / metersPerPixel\r\n            if (length > maxLength) {\r\n                return intervals[i - 1]", "choices": [{"text": "\r\n            }\r\n        }\r\n\r\n        return intervals[intervals.lastIndex]\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1292", "ground_truth": "            }\r\n        }\r\n\r\n        return intervals.last()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\DistanceScale.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\nimport android.graphics.Path\nfun getScaleBar(distance: Distance, metersPerPixel: Float, path: Path = Path()): Path {\r\n        val length = distance.meters().distance / metersPerPixel\r\n        val height = 12f\r\n\r\n        // Horizontal\r\n        path.moveTo(0f, 0f)\r\n        path.lineTo(length, 0f)\r\n\r\n        // Start\r\n        path.moveTo(0f, -height / 2)\r\n        path.lineTo(0f, height / 2)\r\n\r\n        // End\r\n        path.moveTo(length, -height / 2)\r\n        path.lineTo(length, height / 2)\r\n\r\n        // Middle\r\n        path.moveTo(length / 2, height / 2)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1293", "ground_truth": "        path.lineTo(length / 2, 0f)\r\n\r\n\r\n        return path\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\DistanceScale.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport com.kylecorry.andromeda.canvas.ArrowPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val arrow = ArrowPathEffect(6f / strokeScale, 10f / strokeScale)\r\n        canvasDrawer.apply {\r\n            pathEffect(arrow)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1294", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\ArrowPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 12f / strokeScale\r\n        val effect = CrossPathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(effect)\r\n            noFill()", "choices": [{"text": "\r\n            fillColor(color)\r\n            strokeColor(color)\r\n            strokeScale(strokeScale)\r\n            block(effect)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/1296", "ground_truth": "            strokeWeight(4f / strokeScale)\r\n            stroke(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\CrossPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport android.graphics.DashPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val dotted = DashPathEffect(\r\n            floatArrayOf(3f / strokeScale, 10f / strokeScale), 0f\r\n        )\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n            noFill()", "choices": [{"text": "\r\n            fillColor(color)\r\n            strokeColor(color)\r\n            strokeScale(strokeScale)\r\n            block(block)\r\n        }\r\n    }\r\n\r\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val dotted = DashPathEffect(\r\n            floatArrayOf(3f / strokeScale, 10f / strokeScale), 0f\r\n        )\r\n"}], "metadata": {"task_id": "Trail-Sense/1297", "ground_truth": "            strokeWeight(4f / strokeScale)\r\n            stroke(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DashedPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 12f / strokeScale\r\n        val dotted = DiamondPathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1299", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DiamondPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport com.kylecorry.andromeda.canvas.DottedPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val dotted = DottedPathEffect(3f / strokeScale, 10f / strokeScale)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1300", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DottedPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        canvasDrawer.apply {\r\n            noPathEffect()\r\n            noFill()", "choices": [{"text": "\r\n            strokeColor(color)\r\n            strokeScale(strokeScale)\r\n            block(block)\r\n        }\r\n    }\r\n\r\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        canvasDrawer.apply {\r\n            noPathEffect()\r\n            noFill()\r\n            strokeColor(color)\r\n            strokeScale(strokeScale)\r\n            block(block)\r"}], "metadata": {"task_id": "Trail-Sense/1302", "ground_truth": "            stroke(color)\r\n            strokeWeight(6f / strokeScale)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\SolidPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 8f / strokeScale\r\n        val dotted = SquarePathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1304", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\SquarePathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IPath): ListItem {\r\n        return if (value is Path) {", "choices": [{"text": "\r\n        case Path:\r\n            return new ListItem(value);\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default map;\r\n"}], "metadata": {"task_id": "Trail-Sense/1305", "ground_truth": "            pathMapper.map(value)\r\n        } else {\r\n            groupMapper.map(value as PathGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\IPathListItemMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.andromeda.core.tryOrNothing\nfun highlight(point: PathPoint) {\r\n        val idx = _path.indexOf(point)\r\n        if (idx == -1) {\r\n            return\r\n        }\r\n        val pointIndex = _elevationIndex.indexOf(idx)\r\n        if (pointIndex == -1) {\r\n            return\r\n        }\r\n        tryOrNothing {", "choices": [{"text": "\r\n            _elevationIndex.splice(pointIndex, 1)\r\n        } catch (e) {\r\n            return\r\n        }\r\n        tryOrNothing {\r\n            _path.splice(idx, 1)\r\n        } catch (e) {\r\n            return\r\n        }\r\n        tryOrNothing {\r\n            _elevationIndex.splice(pointIndex, 1)\r\n        } catch (e) {\r\n            return\r\n        }\r\n        tryOrNothing {\r\n            _path.splice(idx, 1)\r\n"}], "metadata": {"task_id": "Trail-Sense/1306", "ground_truth": "            highlight.data = listOf(_elevations[pointIndex])\r\n        }\r\n\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "import com.kylecorry.sol.math.Vector2\nimport com.kylecorry.andromeda.views.chart.data.ChartLayer\nimport com.kylecorry.andromeda.views.chart.data.AreaChartLayer\nimport com.kylecorry.andromeda.views.chart.Chart\nprivate fun getSlopeChart(\r\n        data: List<Vector2>,\r\n        steepness: Steepness,\r\n        bottom: Float\r\n    ): ChartLayer {\r\n        return AreaChartLayer(\r\n            data,", "choices": [{"text": "\r\n            steepness,\r\n            bottom\r\n        );\r\n    }\r\npublic class SlopeChart extends Chart {\r\n    public SlopeChart(\r\n        data: List<Vector2>,\r\n        steepness: Steepness,\r\n        bottom: Float\r\n    ) {\r\n        super(\r\n            getSlopeChart(\r\n                data,\r\n                steepness,\r\n                bottom\r\n            )\r\n        );\r\n    }\r\n    public SlopeChart(\r\n        data: List<Vector2>,\r"}], "metadata": {"task_id": "Trail-Sense/1308", "ground_truth": "            Color.TRANSPARENT,\r\n            getColor(steepness),\r\n            initialFillTo = bottom\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "import kotlin.math.absoluteValue\nprivate fun getSteepness(slope: Float): Steepness {\r\n        return if (slope.absoluteValue <= 10f) {\r\n            Steepness.Low\r\n        } else if (slope.absoluteValue <= 25f) {", "choices": [{"text": "\r\n            Steepness.Medium\r\n        } else if (slope.absoluteValue <= 50f) {\r\n            Steepness.High\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1310", "ground_truth": "            Steepness.Medium\r\n        } else {\r\n            Steepness.High\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.MappableLocation\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPointColoringStyle\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport android.graphics.Color\nimport android.content.Context\nfun List<PathPoint>.toMappableLocations(\r\n    context: Context,\r\n    coloringStyle: PathPointColoringStyle = PathPointColoringStyle.None\r\n): List<MappableLocation> {\r\n    val colorFactory = getPointFactory(context, coloringStyle)\r\n    val strategy = colorFactory.createColoringStrategy(this)\r\n    return this.map { point ->\r\n        MappableLocation(\r\n            point.id,\r\n            point.coordinate,\r\n            strategy.getColor(point) ?: Color.TRANSPARENT,", "choices": [{"text": "\r\n            strategy.getStrokeColor(point)?: Color.TRANSPARENT,\r\n            strategy.getStrokeWidth(point)?: 1\r\n        )\r\n    } }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1311", "ground_truth": "            null,\r\n            point.elevation\r\n        )\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.ExportPathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun exportPath(path: Path) {\r\n        val command = ExportPathCommand(\r\n            requireContext(),\r\n            this,", "choices": [{"text": " path\r\n        );\r\n        return command.execute();\r\n    }\r\n    exportPath(path: Path) {\r\n        val command = ExportPathCommand(\r\n            requireContext(),\r\n            this,\r\n            path\r\n        );\r\n        return command.execute();\r\n    }\r\n    exportPath(path: Path) {\r\n        val command = ExportPathCommand(\r\n            requireContext(),\r\n            this,\r\n            path\r\n        );\r\n        return command.execute();\r\n    }\r\n    exportPath(path"}], "metadata": {"task_id": "Trail-Sense/1321", "ground_truth": "            IOFactory().createGpxService(this),\r\n            pathService\r\n        )\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.databinding.ListItemWaypointBinding\nprivate fun drawWaypointListItem(itemBinding: ListItemWaypointBinding, item: PathPoint) {\r\n        val itemStrategy = WaypointListItem(\r\n            requireContext(),\r\n            formatService,\r\n            { createBeacon(it) },\r\n            { deleteWaypoint(it) },\r\n            { navigateToWaypoint(it) },", "choices": [{"text": "\r\n            { navigateToPath(it) }\r\n        );\r\n        itemStrategy.bind(itemBinding);\r\n        return itemStrategy;\r\n    }\r\n    private fun createBeacon(it: PathPoint) {\r\n        return new Beacon(\r\n            requireContext(),\r\n            formatService,\r\n            it\r\n        );\r\n    }\r\n    private fun deleteWaypoint(it: PathPoint) {\r\n        return new DeleteWaypoint(\r\n            requireContext(),\r\n            formatService,\r\n            it\r\n        );"}], "metadata": {"task_id": "Trail-Sense/1328", "ground_truth": "            { /* Do nothing */ }\r\n        )\r\n\r\n        itemStrategy.display(itemBinding, item)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.NavigateToPointCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun navigateToWaypoint(point: PathPoint) {\r\n        val path = path ?: return\r\n        val command = NavigateToPointCommand(\r\n            this,\r\n            converter,\r\n            beaconNavigator", "choices": [{"text": ",\r\n            path,\r\n            point\r\n        )\r\n        command.execute()\r\n    }\r\n    private fun navigateToPoint(point: PathPoint) {\r\n        val path = path?: return\r\n        val command = NavigateToPointCommand(\r\n            this,\r\n            converter,\r\n            beaconNavigator,\r\n            path,\r\n            point\r\n        )\r\n        command.execute()\r\n    }\r\n    private fun navigateToPath(path: Path) {\r\n        val command = NavigateToPointCommand("}], "metadata": {"task_id": "Trail-Sense/1330", "ground_truth": "        )\r\n        tryOrNothing {\r\n            command.execute(path, point)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.NavigateToPathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.point_finder.NearestPathPointNavigator\nimport com.kylecorry.trail_sense.tools.paths.domain.point_finder.NearestPathLineNavigator\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.toast\nprivate fun navigateToNearestPathPoint() {\r\n        val path = path ?: return\r\n        val points = waypoints\r\n        val command = NavigateToPathCommand(\r\n            if (prefs.navigation.onlyNavigateToPoints) NearestPathPointNavigator() else NearestPathLineNavigator(),\r\n            gps,\r\n            converter,\r\n            beaconNavigator\r\n        )\r\n\r\n        toast(getString(R.string.navigating_to_nearest_path_point))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1331", "ground_truth": "\r\n        inBackground {\r\n            command.execute(path, points)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "val backtrack\nvar sort\nval pathLoader\n override fun onPause() {", "choices": [{"text": "\n function onPause() {\n  console.log('onPause');\n }\n \n function onResume() {\n  console.log('onResume');\n }\n \n function onDestroy() {\n  console.log('onDestroy');\n }\n \n function onLoad() {\n  console.log('onLoad');\n }\n \n function onLoadComplete() {\n  console.log('onLoadComplete');\n }\n \n function onLoadError() {\n  console.log('onLoadError');\n }\n \n function onUnload() {\n  console.log('onUnload"}], "metadata": {"task_id": "Trail-Sense/1336", "ground_truth": "        super.onPause()\r\n        tryOrNothing {\r\n            lastRoot = manager.root\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.grouping.lists.bind\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nprivate fun setupCreateMenu() {\r\n        binding.addMenu.setOverlay(binding.overlayMask)\r\n        binding.addMenu.fab = binding.addBtn\r\n        binding.addMenu.hideOnMenuOptionSelected = true\r\n        binding.addMenu.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_import_path_gpx -> importPaths()\r\n                R.id.action_create_path_group -> createGroup()", "choices": [{"text": "\r\n            }\r\n        }\r\n}\r\nprivate fun setupGroup() {\r\n        binding.group.setOverlay(binding.overlayMask)\r\n        binding.group.fab = binding.addBtn\r\n        binding.group.hideOnMenuOptionSelected = true\r\n        binding.group.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_import_path_gpx -> importPaths()\r\n                R.id.action_create_path_group -> createGroup()\r\n           "}], "metadata": {"task_id": "Trail-Sense/1338", "ground_truth": "                R.id.action_create_path -> createPath()\r\n            }\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = PathSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.pathSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.pathSort = sortOptions[newSort]", "choices": [{"text": "\r\n            }\r\n        } }\r\n    }\r\n    private static String getSortString(PathSortMethod it) {\r\n        switch (it) {\r\n            case ASC:\r\n                return getString(R.string.asc);\r\n            case DESC:\r\n                return getString(R.string.desc);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    private enum PathSortMethod {\r\n        ASC, DESC\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1339", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.ImportPathsCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun importPaths() {\r\n        val command = ImportPathsCommand(\r\n            requireContext(),\r\n            this,\r\n            gpxService,", "choices": [{"text": "\r\n            pathService\r\n        );\r\n        return () -> command.execute();\r\n    }\r\n    @Override\r\n    public String name() {\r\n        return \"Import Paths\";\r\n    }\r\n    @Override\r\n    public String description() {\r\n        return \"Import Paths\";\r\n    }\r\n    @Override\r\n    public String help() {\r\n        return \"Import Paths\";\r\n    }\r\n    @Override\r\n    public String code() {\r\n        return importPaths();\r\n    }\r\n    @Override\r"}], "metadata": {"task_id": "Trail-Sense/1349", "ground_truth": "            pathService,\r\n            prefs.navigation\r\n        )\r\n        command.execute(manager.root?.id)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.CreatePathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun createPath() {\r\n        val command = CreatePathCommand(requireContext(), pathService, prefs.navigation)\r\n        inBackground {", "choices": [{"text": " {\r\n            command.execute();\r\n        }\r\n        return command;\r\n    }\r\n\r\n    @Override\r\n    public void onAttach(Context context) {\r\n        super.onAttach(context);\r\n        pathService = (PathService) context.getSystemService(Context.PATH_SERVICE);\r\n    }\r\n\r\n    @Override\r\n    public void onDetach() {\r\n        super.onDetach();\r\n        pathService = null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1353", "ground_truth": "            command.execute(manager.root?.id)?.let {\r\n                showPath(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.DeletePathGroupGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun deleteGroup(group: PathGroup) {\r\n        val command = DeletePathGroupGroupCommand(requireContext(), pathService)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1354", "ground_truth": "        inBackground {\r\n            command.execute(group)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.RenamePathGroupGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nprivate fun renameGroup(group: PathGroup) {\r\n        val command = RenamePathGroupGroupCommand(requireContext(), pathService)", "choices": [{"text": " {\r\n            @Override\r\n            protected void execute(Path path) {\r\n                pathService.renameGroup(group, path);\r\n            }\r\n        };\r\n        command.execute(group);\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"Rename Path Group\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescription() {\r\n        return \"Rename a path group\";\r\n    }\r\n\r\n    @Override\r\n    public String getHelp() {\r\n       "}], "metadata": {"task_id": "Trail-Sense/1355", "ground_truth": "        inBackground {\r\n            command.execute(group)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.CreatePathGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun createGroup() {\r\n        val command = CreatePathGroupCommand(requireContext(), pathService)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1356", "ground_truth": "        inBackground {\r\n            command.execute(manager.root?.id)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import kotlin.math.min\nimport kotlin.math.max\noverride fun draw() {\r\n        clear()\r\n\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * minScale)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1360", "ground_truth": "        zoomTo(clampScale(scale))\r\n\r\n        drawLayers()\r\n        drawScale()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "private fun drawLayers() {\r\n        val bounds = bounds ?: return\r\n        center = bounds.center\r\n\r\n        if (scale != lastScale) {\r\n            lastScale = scale\r\n            layers.forEach { it.invalidate() }\r\n        }\r\n\r\n        if (translateX != lastTranslateX || translateY != lastTranslateY) {\r\n            lastTranslateX = translateX\r\n            lastTranslateY = translateY", "choices": [{"text": "\r\n            layers.forEach { it.invalidate() }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void draw() {\r\n        drawLayers()\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n        drawLayers()\r\n    }\r\n\r\n    @Override\r\n    public void render() {\r\n        drawLayers()\r\n    }\r\n\r\n    @Override\r\n    public void resize(int width, int height) {\r\n        drawLayers()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1361", "ground_truth": "            layers.forEach { it.invalidate() }\r\n        }\r\n\r\n        layers.forEach { it.draw(this, this) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "@Suppress(\"MemberVisibilityCanBePrivate\")\r\n    fun zoomTo(newScale: Float){", "choices": [{"text": ") {\n        super.zoomTo(newFloat);\n    }\n\n    @Suppress(\"MemberVisibilityCanBePrivate\")\n    fun zoomIn() {\n        super.zoomIn();\n    }\n\n    @Suppress(\"MemberVisibilityCanBePrivate\")\n    fun zoomOut() {\n        super.zoomOut();\n    }\n\n    @Suppress(\"MemberVisibilityCanBePrivate\")\n    fun panTo(newX: Float, newY: Float) {\n        super.panTo(newX, newY);\n    }\n\n    @Suppress(\"MemberVisibilityCanBe"}], "metadata": {"task_id": "Trail-Sense/1367", "ground_truth": "        if (newScale == scale){\r\n            return\r\n        }\r\n        zoom(newScale / scale)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toView(source: PixelCoordinate): PixelCoordinate {", "choices": [{"text": ", target: PixelCoordinate): PixelCoordinate {\n    return new PixelCoordinate(source.getX() + target.getX(), source.getY() + target.getY());\n}\npublic class Main {\n    public static void main(String[] args) {\n        Coordinate source = new Coordinate(0, 0);\n        Coordinate target = new Coordinate(0, 0);\n        PixelCoordinate sourceView = toView(source, target);\n        PixelCoordinate targetView = toView(target, source);\n        System.out.println(sourceView);\n        System.out.println("}], "metadata": {"task_id": "Trail-Sense/1370", "ground_truth": "        return PixelCoordinate(\r\n            source.x + translateX,\r\n            source.y + translateY\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toSource(screen: PixelCoordinate): PixelCoordinate {", "choices": [{"text": "screen: PixelCoordinate): Coordinate {\n    return new Coordinate(screen.x, screen.y);\n}\npublic class Solution {\n    public static void main(String[] args) {\n        System.out.println(toSource(new PixelCoordinate(0, 0)));\n        System.out.println(toSource(new PixelCoordinate(1, 1)));\n        System.out.println(toSource(new PixelCoordinate(2, 2)));\n        System.out.println(toSource(new PixelCoordinate(3, 3)));\n        System.out.println("}], "metadata": {"task_id": "Trail-Sense/1371", "ground_truth": "        return PixelCoordinate(\r\n            screen.x - translateX,\r\n            screen.y - translateY\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.units.Speed\noverride fun speed(steps: Long, time: Duration): Speed {\r\n        val d = distance(steps)\r\n        val seconds = time.seconds\r\n        if (seconds <= 0) {", "choices": [{"text": "\r\n                seconds = 0\r\n        }\r\n        return new Speed(d, seconds)\r\n}\r\n\r\noverride fun distance(steps: Long): Long {\r\n        val d = 0\r\n        for (val i = 0; i < steps; i++) {\r\n                d += i\r\n        }\r\n        return d\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1374", "ground_truth": "            return ZERO_SPEED\r\n        }\r\n\r\n        return Speed(d.distance / seconds, d.units, TimeUnits.Seconds)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\domain\\StrideLengthPaceCalculator.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.sol.units.Speed\nprivate fun updateSpeed(){\r\n        if (lastTime == Instant.MIN) {\r\n            lastSteps = pedometer.steps\r\n            lastTime = Instant.now()\r\n            return\r\n        }\r\n\r\n        val steps = pedometer.steps - lastSteps\r\n        val duration = Duration.between(lastTime, Instant.now())\r\n        speed = paceCalculator.speed(steps.toLong(), duration)\r\n        hasValidReading = true", "choices": [{"text": "\r\n        lastSteps = pedometer.steps\r\n        lastTime = Instant.now()\r\n    }\r\n\r\n    public Speed getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public void setSpeed(Speed speed) {\r\n        this.speed = speed;\r\n    }\r\n\r\n    public boolean hasValidReading() {\r\n        return hasValidReading;\r\n    }\r\n\r\n    public void setHasValidReading(boolean hasValidReading) {\r\n        this.hasValidReading = hasValidReading;"}], "metadata": {"task_id": "Trail-Sense/1378", "ground_truth": "        lastTime = Instant.now()\r\n        lastSteps = pedometer.steps\r\n\r\n        notifyListeners()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\CurrentPaceSpeedometer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.pedometer.domain.DistanceAlertCommand\nimport com.kylecorry.trail_sense.shared.commands.Command\nfun getDistanceAlert(): Command {\r\n        return DistanceAlertCommand(\r\n            prefs.pedometer,", "choices": [{"text": "\r\n            prefs.pedometer.distance_alert,\r\n            prefs.pedometer.distance_alert_max,\r\n            prefs.pedometer.distance_alert_min,\r\n            prefs.pedometer.distance_alert_step,\r\n            prefs.pedometer.distance_alert_step_max,\r\n            prefs.pedometer.distance_alert_step_min,\r\n            prefs.pedometer.distance_alert_step_step,\r\n            prefs.pedometer.distance_alert_step_step_max,"}], "metadata": {"task_id": "Trail-Sense/1379", "ground_truth": "            counter,\r\n            paceCalculator,\r\n            DistanceAlerter(context)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\PedometerCommandFactory.kt"}}
{"prompt": "private fun onGPS(): Boolean {\r\n        if (startLocation == null) {", "choices": [{"text": "\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nprivate fun onStop(): Boolean {\r\n\r\n    if (stopLocation == null) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nprivate fun onStart(): Boolean {\r\n\r\n    if (startLocation == null) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nprivate fun onStop(): Boolean {\r\n\r\n    if"}], "metadata": {"task_id": "Trail-Sense/1389", "ground_truth": "            startLocation = gps.location\r\n        }\r\n        updateStrideLength()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "private fun onPedometer(): Boolean {\r\n        if (startSteps == null) {", "choices": [{"text": "\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    private fun onPedometer2(): Boolean {\r\n        if (startSteps == null)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    private fun onPedometer3(): Boolean {\r\n        if (startSteps == null)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n\r\n    private fun onPedometer4(): Boolean {"}], "metadata": {"task_id": "Trail-Sense/1390", "ground_truth": "            startSteps = pedometer.steps.toLong()\r\n        }\r\n        updateStrideLength()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\nprivate fun updateStrideLength() {\r\n        val startLocation = startLocation\r\n        val startSteps = startSteps\r\n\r\n        if (startLocation == null || startSteps == null) {\r\n            strideLength = null\r\n            return\r\n        }\r\n\r\n        val distance = gps.location.distanceTo(startLocation)\r\n        val steps = pedometer.steps - startSteps\r\n\r\n        strideLength = if (steps == 0L) {\r\n            Distance.meters(0f)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1392", "ground_truth": "        } else {\r\n            Distance.meters(distance / steps)\r\n        }\r\n        notifyListeners()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FeatureState\nprivate fun calculateState(): FeatureState {\r\n        return if (isDisabled()) {\r\n            FeatureState.Unavailable\r\n        } else if (prefs.pedometer.isEnabled) {", "choices": [{"text": " {\r\n            FeatureState.Enabled\r\n        } else {\r\n            FeatureState.Disabled\r\n        }\r\n    }\r\n    private boolean isDisabled(): boolean {\r\n        return prefs.pedometer.isDisabled\r\n    }\r\n    private boolean isEnabled(): boolean {\r\n        return prefs.pedometer.isEnabled\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1395", "ground_truth": "            FeatureState.On\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\subsystem\\PedometerSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {", "choices": [{"text": "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ListView;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\n"}], "metadata": {"task_id": "Trail-Sense/1403", "ground_truth": "        super.onResume()\r\n        if (isRunning) {\r\n            estimator.start(this::onStrideLengthChanged)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentStrideLengthEstimation.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun start(){\r\n        requestActivityRecognition { hasPermission ->\r\n            if (hasPermission){\r\n                isRunning = true\r\n                estimator.start(this::onStrideLengthChanged)\r\n            } else {", "choices": [{"text": "\r\n                isRunning = false\r\n                estimator.stop(this::onStrideLengthChanged)\r\n            }\r\n        }\r\n}\r\nprivate fun stop(){\r\n        estimator.stop(this::onStrideLengthChanged)\r\n}\r\nprivate fun onStrideLengthChanged(float strideLength){\r\n        if (isRunning){\r\n            estimator.setStrideLength(strideLength)\r\n        } else {\r\n            estimator.setStrideLength(0)\r\n        }\r\n}"}], "metadata": {"task_id": "Trail-Sense/1404", "ground_truth": "                isRunning = false\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentStrideLengthEstimation.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun updateAverageSpeed() {\r\n        val speed = averageSpeedometer.speed\r\n        binding.pedometerAverageSpeed.title = if (averageSpeedometer.hasValidReading) {", "choices": [{"text": " {\r\n                if (averageSpeedometer.hasValidReading) {\r\n                        binding.pedometerAverageSpeed.text = speed\r\n                } else {\r\n                        binding.pedometerAverageSpeed.text = \"\"\r\n                }\r\n        } else {\r\n                binding.pedometerAverageSpeed.text = \"\"\r\n        }\r\n        binding.pedometerAverageSpeed.value = speed\r\n        binding.pedometerAverageSpeed.min = speed\r\n        binding.pedometerAverageSpeed.max = speed\r\n        binding.pedometer"}], "metadata": {"task_id": "Trail-Sense/1406", "ground_truth": "            formatService.formatSpeed(speed.speed)\r\n        } else {\r\n            getString(R.string.dash)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun updateCurrentSpeed() {\r\n        val speed = instantSpeedometer.speed\r\n        binding.pedometerSpeed.title = if (averageSpeedometer.hasValidReading) {", "choices": [{"text": " {\r\n                binding.pedometerSpeed.text = speed.toFixed(2)\r\n        } else {\r\n                binding.pedometerSpeed.text = speed.toFixed(1)\r\n        }\r\n}\r\nprivate fun updateSpeed() {\r\n        val speed = averageSpeedometer.speed\r\n        binding.pedometerSpeed.title = if (averageSpeedometer.hasValidReading) {\r\n                binding.pedometerSpeed.text = speed.toFixed(2)\r\n        } else {\r\n                binding.pedom"}], "metadata": {"task_id": "Trail-Sense/1407", "ground_truth": "            formatService.formatSpeed(speed.speed)\r\n        } else {\r\n            getString(R.string.dash)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.pedometer.infrastructure.StepCounter\nimport com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun startStepCounter() {\r\n        requestActivityRecognition { hasPermission ->\r\n            if (hasPermission) {\r\n                pedometer.enable()\r\n            } else {", "choices": [{"text": "\r\n                pedometer.disable()\r\n            }\r\n        }\r\n}\r\nprivate fun stopStepCounter() {\r\n        requestActivityRecognition { hasPermission ->\r\n            if (hasPermission) {\r\n                pedometer.disable()\r\n            } else {\r\n                pedometer.enable()\r\n            }\r\n        }\r\n}\r\nprivate fun incrementStepCounter() {\r\n        requestActivityRecognition { hasPermission ->\r\n            if (hasPermission) {\r\n                pedometer.increment()\r\n            } else {\r\n"}], "metadata": {"task_id": "Trail-Sense/1409", "ground_truth": "                pedometer.disable()\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.notes.domain.Note\noverride fun encode(value: Note): String {\r\n        val title = if (value.title != null) {\r\n            \"${value.title}\\n\\n\\n\"\r\n        } else {\r\n            \"\"\r\n        }", "choices": [{"text": "\r\n        val content = if (value.content!= null) {\r\n            \"${value.content}\\n\\n\\n\"\r\n        } else {\r\n            \"\"\r\n        }\r\n        return title + content\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1414", "ground_truth": "\r\n        val contents = value.contents ?: \"\"\r\n\r\n        return \"$title$contents\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\infrastructure\\NoteQREncoder.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {", "choices": [{"text": "View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util."}], "metadata": {"task_id": "Trail-Sense/1417", "ground_truth": "        if (isBound) {\r\n            binding.camera.stop()\r\n        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRBottomSheet.kt"}}
{"prompt": "import com.kylecorry.andromeda.qr.QR\nimport com.kylecorry.andromeda.core.tryOrNothing\nimport android.graphics.Bitmap\nprivate fun onCameraUpdate(bitmap: Bitmap) {\r\n        if (!isBound) {\r\n            bitmap.recycle()\r\n            return\r\n        }\r\n        var message: String? = null\r\n        tryOrNothing {\r\n            message = QR.decode(bitmap)\r\n            bitmap.recycle()\r\n        }\r\n        if (message != null && lastMessage != message) {\r\n            haptics.click()\r\n            lastMessage = message", "choices": [{"text": "\r\n        }\r\n    }\r\n    private fun onCameraFocus(bitmap: Bitmap) {\r\n        if (!isBound) {\r\n            bitmap.recycle()\r\n            return\r\n        }\r\n        var message: String? = null\r\n        tryOrNothing {\r\n            message = QR.decode(bitmap)\r\n            bitmap.recycle()\r\n        }\r\n        if (message!= null && lastMessage!= message) {\r\n            haptics.click()\r\n            lastMessage = message\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1418", "ground_truth": "            if (!onTextScanned(message)) {\r\n                dismiss()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRBottomSheet.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestCamera\nimport com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r\n        updateHistoryList()\r\n        requestCamera { hasPermission ->\r\n            if (hasPermission) {\r\n                startCamera()", "choices": [{"text": "\r\n            }\r\n        }\r\n}\r\n\r\noverride fun onPause() {\r\n        super.onPause()\r\n        updateHistoryList()\r\n        requestCamera { hasPermission ->\r\n            if (hasPermission) {\r\n                stopCamera()\r\n            }\r\n        }\r\n}\r\n\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        updateHistoryList()\r\n        requestCamera { hasPermission ->\r\n            if (hasPermission) {\r\n                stopCamera()\r\n            }\r\n        }\r\n"}], "metadata": {"task_id": "Trail-Sense/1422", "ground_truth": "            } else {\r\n                alertNoCameraPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "val pickMediaLoadingIndicator\nvar qrHistoryList ListView<String>\nval cameraSize\n private fun startCamera() {", "choices": [{"text": "() {\n  if (pickMediaLoadingIndicator) {\n    pickMediaLoadingIndicator.setVisibility(View.VISIBLE);\n  } else {\n    pickMediaLoadingIndicator = Ti.UI.createActivityIndicator({\n      style: Ti.UI.iPhone.ActivityIndicatorStyle.BIG,\n      message: 'Loading...'\n    });\n    pickMediaLoadingIndicator.show();\n  }\n}\n\nvar cameraSize = Ti.UI.createActivityIndicator({\n  style: Ti.UI.iPhone.ActivityIndicatorStyle.BIG,\n  message: 'Camera"}], "metadata": {"task_id": "Trail-Sense/1423", "ground_truth": "        if (!isBound) return\r\n        binding.camera.start(cameraSize) {\r\n            onCameraUpdate(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun addReading(text: String) {\r\n        if (history.contains(text)) {\r\n            history.remove(text)\r\n        }\r\n\r\n        history.add(0, text)\r\n\r\n        while (history.size > 10) {", "choices": [{"text": "\r\n            history.remove(history.size - 1)\r\n        }\r\n\r\n        history.add(history.size - 1, text)\r\n    }\r\n\r\n    private fun removeReading(text: String) {\r\n        if (history.contains(text)) {\r\n            history.remove(text)\r\n        }\r\n\r\n        history.add(0, text)\r\n\r\n        while (history.size > 10) {\r\n            history.remove(history.size - 1)\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1424", "ground_truth": "            history.removeLast()\r\n        }\r\n\r\n        updateHistoryList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.CustomUiUtils.getPrimaryColor\nimport com.kylecorry.andromeda.core.system.Screen\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.graphics.Color\noverride fun setup() {\r\n        dpi = Screen.ydpi(context)\r\n        scale = prefs.navigation.rulerScale\r\n        lineColor = Resources.androidTextColorPrimary(context)\r\n        highlightColor = Resources.getPrimaryColor(context)\r\n        offset = dp(8f)\r\n        wholeSize = dp(40f)\r\n        halfSize = dp(24f)\r\n        quarterSize = dp(12f)\r\n        eighthSize = dp(6f)\r\n        tenthSize = dp(12f)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1436", "ground_truth": "        lineThickness = dp(1f)\r\n        highlightLineThickness = dp(2f)\r\n\r\n        textSize(sp(12f))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\ui\\RulerView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\nimport android.annotation.SuppressLint\n @SuppressLint(\"ClickableViewAccessibility\")\r\n    fun setOnTouchListener(listener: (Distance) -> Unit) {\r\n        setOnTouchListener { _, event ->", "choices": [{"text": " }\r\n    }\r\n    fun setOnLongClickListener(listener: (Distance) -> Unit) {\r\n        setOnLongClickListener { _, event -> }\r\n    }\r\n    fun setOnClickListener(listener: (Distance) -> Unit) {\r\n        setOnClickListener { _, event -> }\r\n    }\r\n    fun setOnDoubleClickListener(listener: (Distance) -> Unit) {\r\n        setOnDoubleClickListener { _, event -> }\r\n    }\r\n    fun setOnFocusChangeListener(listener: (Distance) -> Unit) {\r\n        setOnFocusChangeListener { _,"}], "metadata": {"task_id": "Trail-Sense/1437", "ground_truth": "            val distance = getDistance(event.y)\r\n            listener.invoke(distance)\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\ui\\RulerView.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nimport com.kylecorry.sol.time.Time.atEndOfDay\nimport com.kylecorry.sol.time.Time\nfun getSolarEnergy(\r\n        location: Coordinate,\r\n        tilt: Float,\r\n        azimuth: Bearing,\r\n        duration: Duration = Duration.ofDays(1),\r\n        restrictToToday: Boolean = false\r\n    ): Float {\r\n        val time = timeProvider.getTime()\r\n        var end = time.plus(duration)\r\n        if (end.toLocalDate() != time.toLocalDate() && restrictToToday) {\r\n            end = time.atEndOfDay()\r\n        }\r\n        return getSolarRadiation(\r\n            time,\r\n            end,", "choices": [{"text": "\r\n            location,\r\n            tilt,\r\n            azimuth\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1445", "ground_truth": "            location,\r\n            tilt,\r\n            azimuth\r\n        ).toFloat()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\domain\\SolarPanelService.kt"}}
{"prompt": "import kotlin.math.max\nimport java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nfun getBestPosition(\r\n        location: Coordinate,\r\n        maxDuration: Duration,\r\n        restrictToToday: Boolean = false\r\n    ): Pair<Float, Bearing> {\r\n        val duration = if (maxDuration <= Duration.ofMinutes(15).plusSeconds(5)) {\r\n            Duration.ofMinutes(15).plusSeconds(15)\r\n        } else {\r\n            maxDuration\r\n        }\r\n\r\n        return getBestPosition(\r\n            location,\r\n            maxDuration = duration,\r\n            energyResolution = if (duration < Duration.ofHours(6)) Duration.ofMinutes(15) else Duration.ofMinutes(", "choices": [{"text": "15),\r\n            restrictToToday = true\r\n        )\r\n    }\r\n\r\nfun getBestPosition(\r\n        location: Coordinate,\r\n        maxDuration: Duration,\r\n        energyResolution: Duration,\r\n        restrictToToday: Boolean = false\r\n    ): Pair<Float, Bearing> {\r\n        val duration = if (maxDuration <= Duration.ofMinutes(15).plusSeconds(5)) {\r\n            Duration.ofMinutes(15).plusSeconds(15)\r\n        } else {\r\n            maxDuration\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1446", "ground_truth": "                30\r\n            ),\r\n            restrictToToday = restrictToToday\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\domain\\SolarPanelService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {", "choices": [{"text": "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ListView;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\n"}], "metadata": {"task_id": "Trail-Sense/1448", "ground_truth": "        super.onResume()\r\n        if (position == null) {\r\n            gps.start(this::onGPSUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\ui\\FragmentToolSolarPanel.kt"}}
{"prompt": "import java.time.Duration\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updatePosition() {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                position = solarPanelService.getBestPosition(\r\n                    gps.location,\r\n                    if (alignToRestOfDay) Duration.ofDays(1) else nowDuration,", "choices": [{"text": "\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) nowDuration,\r\n                    if (alignToRestOfDay) now"}], "metadata": {"task_id": "Trail-Sense/1451", "ground_truth": "                    restrictToToday = alignToRestOfDay\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\ui\\FragmentToolSolarPanel.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nsuspend fun execute(table: TideTable): TideTable {\r\n        val newTable = table.copy(isVisible = !table.isVisible)", "choices": [{"text": ");\r\n        return newTable;\r\n}\r\n\r\nimport com.kylecorry.trail_sense.tools.tides.domain.Tide;\r\nsuspend fun execute(tide: Tide) {\r\n        val newTide = tide.copy(isVisible =!tide.isVisible);\r\n        return newTide;\r\n}\r\n\r\nimport com.kylecorry.trail_sense.tools.tides.domain.TideTable;\r\nimport com.kylecorry.trail_sense"}], "metadata": {"task_id": "Trail-Sense/1466", "ground_truth": "        onIO {\r\n            repo.addTideTable(newTable)\r\n        }\r\n        return newTable\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\commands\\ToggleTideTableVisibilityCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.math.Range\noverride fun getRange(table: TideTable): Range<Float> {\r\n        val lows = table.tides.filter { !it.isHigh }.mapNotNull { it.height }\r\n        val highs = table.tides.filter { it.isHigh }.mapNotNull { it.height }\r\n        var min = lows.minByOrNull { it }\r\n        var max = highs.maxByOrNull { it }\r\n\r\n        if (min == null){\r\n            min = (max ?: 1f) - 1f\r\n        }\r\n\r\n        if (max == null){", "choices": [{"text": "\r\n            max = (min?: 1f) + 1f\r\n        }\r\n\r\n        return new Range<Float>(min, max)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1468", "ground_truth": "            max = min + 1f\r\n        }\r\n\r\n        return Range(min, max)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\range\\TideTableRangeCalculator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\noverride suspend fun getTide(tides: List<TideTable>): TideTable? {\r\n        for (strategy in strategies) {\r\n            val tide = strategy.getTide(tides)\r\n            if (tide != null) {", "choices": [{"text": "\r\n                return tide;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1469", "ground_truth": "                return tide\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\selection\\FallbackTideSelectionStrategy.kt"}}
{"prompt": "import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.oceanography.Tide\noverride fun getWaterLevels(table: TideTable, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),", "choices": [{"text": "\r\n            table\r\n        );\r\n    }\r\n\r\n    override fun getWaterLevels(table: TideTable, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),\r\n            table\r\n        );\r\n    }\r\n\r\n    override fun getWaterLevels(table: TideTable, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),"}], "metadata": {"task_id": "Trail-Sense/1474", "ground_truth": "            Duration.ofMinutes(10)\r\n        ) {\r\n            getWaterLevel(table, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\TideService.kt"}}
{"prompt": "import com.kylecorry.sol.science.oceanography.waterlevel.TideClockWaterLevelCalculator\nimport com.kylecorry.sol.science.oceanography.waterlevel.IWaterLevelCalculator\nimport com.kylecorry.sol.science.oceanography.Tide\nprivate fun getPastFutureCalculator(tide: Tide): IWaterLevelCalculator {\r\n        val amplitude = (if (!tide.isHigh) -1 else 1) * getAmplitude()\r\n        val z0 = tide.height!! - amplitude\r\n        return TideClockWaterLevelCalculator(\r\n            tide,", "choices": [{"text": " z0\r\n        )\r\n    }\r\n    private fun getAmplitude() {\r\n        return (if (!tide.isHigh) -1 else 1)\r\n    }\r\n    public static void main(String[] args) {\r\n        Tide tide = new Tide()\r\n        tide.isHigh = true\r\n        tide.height = 100\r\n        tide.isHigh = true\r\n        tide.height = 100\r\n        tide.isHigh = true\r\n        tide.height = 100\r\n        t"}], "metadata": {"task_id": "Trail-Sense/1478", "ground_truth": "            table.principalFrequency,\r\n            getAmplitude(),\r\n            z0\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\waterlevel\\TideTableWaterLevelCalculator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.science.oceanography.Tide\noverride suspend fun getTideTables(): List<TideTable> {\r\n        val tableEntities = dao.getTideTables()\r\n        val tables = mutableListOf<TideTable>()\r\n\r\n        for (entity in tableEntities) {\r\n            val rows = dao.getTideTableRows(entity.id).map { it.toTide() }.sortedBy { it.time }", "choices": [{"text": ".toList()\r\n            tables.add(new TideTable(entity.id, rows))\r\n        }\r\n\r\n        return tables\r\n    }\r\n\r\n    override suspend fun getTideTable(id: int): TideTable {\r\n        val entity = dao.getTideTable(id)\r\n        val rows = dao.getTideTableRows(entity.id).map { it.toTide() }.sortedBy { it.time }\r\n\r\n        return new TideTable(entity.id, rows)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1481", "ground_truth": "            tables.add(entity.toTable(rows))\r\n        }\r\n\r\n        return tables\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRepo.kt"}}
{"prompt": "import com.kylecorry.sol.science.oceanography.Tide\nfun toTide(): Tide {\r\n        return Tide(", "choices": [{"text": ";\r\n}\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.kylecorry.sol.science.oceanography.Tide.*;\r\n\r\nimport com.kylecorry.sol.science.oceanography.*;\r\nimport com.kylecorry.sol.science.oceanography.Tide.*;\r\nimport com.kylecorry.sol.science.oceanography.Tide.*;\r\nimport com.kylecorry."}], "metadata": {"task_id": "Trail-Sense/1486", "ground_truth": "            time.atZone(ZoneId.systemDefault()),\r\n            isHigh,\r\n            heightMeters\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRowEntity.kt"}}
{"prompt": "import com.kylecorry.sol.science.oceanography.Tide\nimport androidx.room.Entity\nfun from(id: Long, tableId: Long, tide: Tide): TideTableRowEntity {\r\n            return TideTableRowEntity(\r\n                id,\r\n                tableId,", "choices": [{"text": "\r\n                tide\r\n            );\r\n        }\r\n\r\n        class TideTableRowEntity extends Entity {\r\n            private final Long id;\r\n            private final Long tableId;\r\n            private final Tide tide;\r\n\r\n            TideTableRowEntity(\r\n                Long id,\r\n                Long tableId,\r\n                Tide tide\r\n            ) {\r\n                this.id = id;\r\n                this.tableId = tableId;\r\n                this.tide = tide;\r\n            }\r\n\r\n           "}], "metadata": {"task_id": "Trail-Sense/1487", "ground_truth": "                tide.time.toInstant(),\r\n                tide.isHigh,\r\n                tide.height\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRowEntity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nprivate fun getDescription(tide: TideTable): String {\r\n        return context.resources.getQuantityString(", "choices": [{"text": ".getString(R.string.tide_description, tide.getDescription());\r\n    }\r\n    private fun getDescription(tide: TideTable) {\r\n        return context.getString(R.string.tide_description, tide.getDescription());\r\n    }\r\n    private fun getDescription(tide: TideTable) {\r\n        return context.getString(R.string.tide_description, tide.getDescription());\r\n    }\r\n    private fun getDescription(tide: TideTable) {\r\n        return"}], "metadata": {"task_id": "Trail-Sense/1494", "ground_truth": "            R.plurals.tides_entered_count,\r\n            tide.tides.size,\r\n            tide.tides.size\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\mappers\\TideTableListItemMapper.kt"}}
{"prompt": "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding.tideList.emptyView = binding.tidesEmptyText\r\n\r\n        refreshTides()", "choices": [{"text": "\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume()\r\n\r\n        binding.tideList.onResume()\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause()\r\n\r\n        binding.tideList.onPause()\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy()\r\n\r\n        binding.tideList.onDestroy()\r\n"}], "metadata": {"task_id": "Trail-Sense/1500", "ground_truth": "\r\n        binding.addBtn.setOnClickListener {\r\n            createTide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nprivate fun deleteTide(tide: TideTable) {\r\n        Alerts.dialog(\r\n            requireContext(),\r\n            getString(R.string.delete_tide_prompt),\r\n            getTideTitle(tide)\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                inBackground {\r\n                    onIO {\r\n                        tideRepo.deleteTideTable(tide)\r\n                    }", "choices": [{"text": " {\r\n                        deleteTide(tide)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private fun getTideTitle(tide: TideTable) {\r\n        return getString(R.string.delete_tide_title, tide.getTitle())\r\n    }\r\n    public void deleteTide(TideTable tide) {\r\n        deleteTide(tide)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1501", "ground_truth": "                    refreshTides()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.oceanography.Tide\nimport androidx.navigation.fragment.findNavController\nimport androidx.core.view.isVisible\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        chart = TideChart(binding.chart)\r\n\r\n        binding.tideTitle.rightButton.setOnClickListener {\r\n            findNavController().navigate(R.id.action_tides_to_tideList)\r\n        }\r\n\r\n        binding.loading.isVisible = true\r\n\r\n        binding.tideListDate.setOnDateChangeListener {", "choices": [{"text": "\r\n            @Override\r\n            public void onDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth) {\r\n                binding.loading.isVisible = false\r\n            }\r\n        }\r\n\r\n        binding.tideListDate.setOnDateSetListener {\r\n            @Override\r\n            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {\r\n                binding.loading.isVisible = false\r\n            }\r\n        }\r\n\r\n        binding.tideListDate.setOn"}], "metadata": {"task_id": "Trail-Sense/1507", "ground_truth": "            onDisplayDateChanged()\r\n        }\r\n\r\n        scheduleUpdates(20)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.oceanography.Tide\nprivate fun onTideLoaded() {\r\n        if (!isBound) return\r\n        val tide = table ?: return\r\n        binding.tideTitle.subtitle.text = tide.name\r\n            ?: if (tide.location != null) formatService.formatLocation(tide.location) else getString(\r\n                android.R.string.untitled\r\n            )", "choices": [{"text": ".toString()\r\n           ?: if (tide.description!= null) formatService.formatDescription(tide.description) else getString(\r\n                android.R.string.untitled\r\n            )\r\n           ?: if (tide.image!= null) formatService.formatImage(tide.image) else getString(\r\n                android.R.string.untitled\r\n            )\r\n           ?: if (tide.location!= null) formatService.formatLocation(tide.location) else getString(\r\n                android.R.string."}], "metadata": {"task_id": "Trail-Sense/1508", "ground_truth": "        inBackground {\r\n            refreshDaily()\r\n            refreshCurrent()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "private fun onDisplayDateChanged() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1509", "ground_truth": "        if (!isBound) return\r\n        inBackground {\r\n            refreshDaily()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "import com.kylecorry.sol.science.oceanography.Tide\nprivate fun updateTideList(tides: List<Tide>) {\r\n        val updatedTides = tides.map {\r\n            val isEstimated = this.table?.tides?.firstOrNull { t -> t.time == it.time } == null\r\n\r\n            if (isEstimated) {\r\n                it.copy(height = null)\r\n            } else {\r\n                it", "choices": [{"text": ".copy(width = null)\r\n            }\r\n\r\n            return it\r\n        }\r\n\r\n        return updatedTides\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1511", "ground_truth": "            }\r\n        }\r\n\r\n        binding.tideList.setItems(updatedTides, mapper)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "private suspend fun refreshCurrent() {", "choices": [{"text": "\n\t\t$.ajax({\n\t\t\ttype: \"POST\",\n\t\t\turl: \"refreshCurrent\",\n\t\t\tdataType: \"json\",\n\t\t\tsuccess: function(data) {\n\t\t\t\t$.each(data, function(key, value) {\n\t\t\t\t\t$(\"#current\").html(value);\n\t\t\t\t});\n\t\t\t},\n\t\t\terror: function(data) {\n\t\t\t\t$.each(data, function(key, value) {\n\t\t\t\t\t$(\"#current\").html(value);\n\t\t\t\t});\n\t\t\t}\n\t"}], "metadata": {"task_id": "Trail-Sense/1515", "ground_truth": "        current = getCurrentTideData()\r\n        onMain {\r\n            updateCurrent()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "private suspend fun refreshDaily() {", "choices": [{"text": "\n\t\treturn;\n\t}\n\n\tif (!is_admin() ) {\n\t\treturn;\n\t}\n\n\tglobal $wpdb;\n\n\tif (!is_admin() ) {\n\t\treturn;\n\t}\n\n\tglobal $wpdb;\n\n\tif (!is_admin() ) {\n\t\treturn;\n\t}\n\n\tglobal $wpdb;\n\n\tif (!is_admin() ) {\n\t\treturn;\n\t}\n\n\tglobal $wpdb;\n\n\tif (!is"}], "metadata": {"task_id": "Trail-Sense/1516", "ground_truth": "        daily = getDailyTideData(binding.tideListDate.date)\r\n        onMain {\r\n            updateDaily()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateTools() {\r\n        inBackground {\r\n            onDefault {\r\n                val filteredTools = filterTools(tools)\r\n                val sorter = toolSortFactory.getToolSort(prefs.toolSort)\r\n                toolListItems = listOf(toolHeader) + getToolItemList(sorter.sort(filteredTools))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1529", "ground_truth": "            }\r\n\r\n            updateList()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "private fun filterTools(tools: List<Tool>): List<Tool> {\r\n        val filter = binding.searchbox.query\r\n        return if (filter.isNullOrBlank()) {\r\n            tools\r\n        } else {\r\n            tools.filter {\r\n                it.name.contains(filter, true) || it.description?.contains(\r\n                    filter,", "choices": [{"text": " true\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun filterTool(tool: Tool): Tool {\r\n        val filter = binding.searchbox.query\r\n        return if (filter.isNullOrBlank()) {\r\n            tool\r\n        } else {\r\n            tool.filter {\r\n                it.name.contains(filter, true) || it.description?.contains(\r\n                    filter, true\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1530", "ground_truth": "                    true\r\n                ) == true\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import android.view.View\nprivate fun updateList() {\r\n        val filter = binding.searchbox.query\r\n\r\n        // Hide pinned when searching\r\n        synchronized(listLock) {\r\n            if (filter.isNullOrBlank()) {\r\n                toolListView.setSpannedData(pinnedListItems + toolListItems)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1531", "ground_truth": "            } else {\r\n                toolListView.setSpannedData(toolListItems)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItemStyle\nimport com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItem\nimport com.kylecorry.andromeda.list.GridView\nimport android.view.View\nprivate fun getToolHeaderListItem(\r\n        name: String,\r\n        icon: Int,\r\n        action: () -> Unit\r\n    ): GridView.SpannedItem<ToolListItem> {\r\n        return GridView.SpannedItem(\r\n            ToolListItem(\r\n                name,\r\n                ToolListItemStyle.Header,", "choices": [{"text": "\r\n                icon,\r\n                action\r\n            )\r\n        );\r\n    }\r\n    private fun getToolFooterListItem(\r\n        name: String,\r\n        icon: Int,\r\n        action: () -> Unit\r\n    ): GridView.SpannedItem<ToolListItem> {\r\n        return GridView.SpannedItem(\r\n            ToolListItem(\r\n                name,\r\n                ToolListItemStyle.Footer,\r\n                icon,\r\n                action\r\n            )\r\n        );\r\n    }\r\n    private fun getTool"}], "metadata": {"task_id": "Trail-Sense/1532", "ground_truth": "                icon,\r\n                onClick = { action() }\r\n            ), 2\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updatePinnedTools() {\r\n        inBackground {\r\n            onDefault {\r\n                val pinned = tools.filter {\r\n                    pinnedToolManager.isPinned(it.id)\r\n                }\r\n\r\n                pinnedListItems = listOf(pinnedHeader) + getToolItemList(pinnedSorter.sort(pinned))", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1533", "ground_truth": "            }\r\n\r\n            updateList()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tools.ui.sort.CategorizedTools\nimport com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItem\nimport com.kylecorry.andromeda.list.GridView\nimport android.view.View\nprivate fun getToolItemList(tools: List<CategorizedTools>): List<GridView.SpannedItem<ToolListItem>> {\r\n        return if (tools.size == 1) {\r\n            tools.first().tools.map { tool ->\r\n                getToolListItem(tool)\r\n            }\r\n        } else {\r\n            tools.flatMap {\r\n                listOf(getToolCategoryListItem(it.categoryName)) +\r\n                        it.tools.map { tool ->", "choices": [{"text": "\r\n                                getToolListItem(tool)\r\n                        }\r\n            }\r\n        }\r\n    }\r\n    private fun getToolCategoryListItem(categoryName: String): GridView.SpannedItem<ToolListItem> {\r\n        return new GridView.SpannedItem<ToolListItem>() {\r\n            @Override\r\n            public ToolListItem getItem() {\r\n                return new ToolListItem(categoryName);\r\n            }\r\n        };\r\n    }\r\n    private fun getToolListItem(CategorizedTools tool): ToolListItem {\r\n        return"}], "metadata": {"task_id": "Trail-Sense/1534", "ground_truth": "                            getToolListItem(tool)\r\n                        }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {", "choices": [{"text": "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ListView;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\n"}], "metadata": {"task_id": "Trail-Sense/1537", "ground_truth": "        super.onResume()\r\n        binding.bearing1.start()\r\n        binding.bearing2.start()\r\n        restoreState()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\triangulate\\ui\\FragmentToolTriangulate.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\noverride fun getPurificationTime(altitude: Distance?): Duration {\r\n        if (altitude == null || altitude.convertTo(DistanceUnits.Meters).distance >= 1000f){", "choices": [{"text": "\r\n            return Duration.ofSeconds(1);\r\n        }\r\n        return Duration.ofSeconds(1);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1540", "ground_truth": "            return Duration.ofMinutes(3)\r\n        }\r\n\r\n        return Duration.ofMinutes(1)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\domain\\WaterService.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateSelectedDuration() {\r\n        duration = null\r\n        inBackground {\r\n            runner.replace {\r\n                val duration = getSelectedDuration()\r\n\r\n                onMain {", "choices": [{"text": "\r\n                }\r\n            }\r\n        }\r\n        return () -> {\r\n            duration = duration\r\n        }\r\n    }\r\n    public Duration getSelectedDuration() {\r\n        return duration\r\n    }\r\n    public void setSelectedDuration(Duration duration) {\r\n        this.duration = duration\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "Trail-Sense/1547", "ground_truth": "                    setBoilTime(duration)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\ui\\WaterPurificationFragment.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nprivate fun getRemainingTime(): Duration? {\r\n        val lastEndTime =\r\n            cache.getInstant(WATER_PURIFICATION_END_TIME_KEY) ?: return null\r\n        val oldDuration = Duration.between(Instant.now(), lastEndTime)\r\n        return if (!oldDuration.isNegative && !oldDuration.isZero) {", "choices": [{"text": "\r\n            cache.put(WATER_PURIFICATION_END_TIME_KEY, Instant.now())\r\n            return oldDuration\r\n        } else {\r\n            cache.remove(WATER_PURIFICATION_END_TIME_KEY)\r\n            return null\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1548", "ground_truth": "            oldDuration\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\ui\\WaterPurificationFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.sol.science.meteorology.WeatherCondition\noverride fun getAlerts(weather: CurrentWeather): List<WeatherAlert> {\r\n        val alerts = mutableListOf<WeatherAlert>()\r\n\r\n        if (weather.prediction.hourly.contains(WeatherCondition.Storm)) {\r\n            alerts.add(WeatherAlert.Storm)\r\n        }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1549", "ground_truth": "\r\n        alerts.addAll(getTemperatureAlerts(weather))\r\n\r\n        return alerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\alerts\\WeatherAlertGenerator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.infrastructure.subsystem.WeatherSubsystem\nimport com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nprivate fun getTemperatureAlerts(weather: CurrentWeather): List<WeatherAlert> {\r\n        weather.prediction.temperature ?: return emptyList()\r\n\r\n        val alerts = mutableListOf<WeatherAlert>()\r\n\r\n        if (weather.prediction.temperature.low.celsius().temperature <= WeatherSubsystem.COLD) {\r\n            alerts.add(WeatherAlert.Cold)\r\n        }\r\n\r\n        if (weather.prediction.temperature.high.celsius().temperature >= WeatherSubsystem.HOT) {", "choices": [{"text": "\r\n            alerts.add(WeatherAlert.Hot)\r\n        }\r\n\r\n        if (weather.prediction.temperature.low.celsius().temperature >= WeatherSubsystem.LOW) {\r\n            alerts.add(WeatherAlert.Low)\r\n        }\r\n\r\n        if (weather.prediction.temperature.high.celsius().temperature <= WeatherSubsystem.HIGH) {\r\n            alerts.add(WeatherAlert.High)\r\n        }\r\n\r\n        return alerts\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1550", "ground_truth": "            alerts.add(WeatherAlert.Hot)\r\n        }\r\n\r\n        return alerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\alerts\\WeatherAlertGenerator.kt"}}
{"prompt": "import java.time.LocalDate\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRanges(year: Int): List<Pair<LocalDate, Range<Temperature>>> {\r\n        return service.getTemperatureRanges(year).map {\r\n            it.copy(\r\n                second = Range(\r\n                    calibrator.calibrate(it.second.start),", "choices": [{"text": "\r\n                    calibrator.calibrate(it.second.end)\r\n                )\r\n            ),\r\n            third = Range(\r\n                calibrator.calibrate(it.third.start),\r\n                calibrator.calibrate(it.third.end)\r\n            ),\r\n            fourth = Range(\r\n                calibrator.calibrate(it.fourth.start),\r\n                calibrator.calibrate(it.fourth.end)\r\n            )\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1556", "ground_truth": "                    calibrator.calibrate(it.second.end),\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\CalibratedTemperatureService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.science.meteorology.Meteorology\noverride suspend fun getTemperature(time: ZonedDateTime): Temperature = onDefault {\r\n        val temperature = repo.getTemperature(location, time)\r\n        Meteorology.getTemperatureAtElevation(", "choices": [{"text": "location, time, temperature)\r\n        return temperature\r\n}\r\n\r\noverride suspend fun getTemperature(time: ZonedDateTime): Temperature = onDefault {\r\n        val temperature = repo.getTemperature(location, time)\r\n        Meteorology.getTemperatureAtElevation(location, time, temperature)\r\n        return temperature\r\n}\r\n\r\noverride suspend fun getTemperature(time: ZonedDateTime): Temperature = onDefault {\r\n        val temperature = repo.getTemperature(location, time)\r\n        Meteorology.getTemperature"}], "metadata": {"task_id": "Trail-Sense/1557", "ground_truth": "            temperature,\r\n            Distance.meters(0f),\r\n            elevation\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.meteorology.Meteorology\noverride suspend fun getTemperatures(\r\n        start: ZonedDateTime,\r\n        end: ZonedDateTime\r\n    ): List<Reading<Temperature>> = onDefault {\r\n        val temperatures = repo.getTemperatures(location, start, end)\r\n        temperatures.map {\r\n            it.copy(\r\n                value = Meteorology.getTemperatureAtElevation(\r\n                    it.value,\r\n                    Distance.meters(0f),", "choices": [{"text": "\r\n                    Distance.meters(0f)\r\n                )\r\n            )\r\n        }\r\n        return temperatures\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1558", "ground_truth": "                    elevation\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "import java.time.LocalDate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.meteorology.Meteorology\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRange(date: LocalDate): Range<Temperature> = onDefault {\r\n        val temperatures = repo.getDailyTemperatureRange(location, date)\r\n        Range(\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.start,\r\n                Distance.meters(0f),\r\n                elevation\r\n            ),\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.end,", "choices": [{"text": "\r\n                Distance.meters(0f),\r\n                elevation\r\n            ),\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.start,\r\n                Distance.meters(0f),\r\n                elevation\r\n            ),\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.end,\r\n                Distance.meters(0f),\r\n                elevation\r\n            )\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1559", "ground_truth": "                Distance.meters(0f),\r\n                elevation\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "import com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\nimport com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nimport com.kylecorry.sol.science.meteorology.WeatherForecast\nimport com.kylecorry.sol.science.meteorology.Meteorology\nimport com.kylecorry.sol.math.Range\nprivate fun getForecast(\r\n        pressures: List<Reading<Pressure>>,\r\n        clouds: List<Reading<CloudGenus?>>,\r\n        temperatureRange: Range<Temperature>?\r\n    ): List<WeatherForecast> {\r\n        return Meteorology.forecast(\r\n            pressures,\r\n            clouds,\r\n            temperatureRange,", "choices": [{"text": "\r\n        );\r\n    }\r\n    public static List<WeatherForecast> forecast(\r\n        pressures: List<Reading<Pressure>>,\r\n        clouds: List<Reading<CloudGenus?>>,\r\n        temperatureRange: Range<Temperature>?\r\n    ): List<WeatherForecast> {\r\n        return getForecast(pressures, clouds, temperatureRange);\r\n    }\r\n    public static List<WeatherForecast> forecast(\r\n        pressures: List<Reading<Pressure>>,\r\n        cloud"}], "metadata": {"task_id": "Trail-Sense/1562", "ground_truth": "            hourlyForecastChangeThreshold / 3f,\r\n            stormThreshold / 3f,\r\n            Instant.now()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\WeatherForecaster.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.trail_sense.shared.data.DataUtils\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\noverride fun calibrate(readings: List<Reading<RawWeatherObservation>>): List<Reading<Pressure>> {\r\n        val seaLevel = baseStrategy.calibrate(readings)\r\n        return DataUtils.smoothTemporal(\r\n            seaLevel,\r\n            smoothing,", "choices": [{"text": " true\r\n        )\r\n    }\r\n\r\n    override fun calibrate(readings: List<Reading<RawWeatherObservation>>): List<Reading<Pressure>> {\r\n        val seaLevel = baseStrategy.calibrate(readings)\r\n        return DataUtils.smoothTemporal(\r\n            seaLevel,\r\n            smoothing,\r\n            false\r\n        )\r\n    }\r\n\r\n    override fun calibrate(readings: List<Reading<Pressure>>): List<Reading<RawWeatherObservation>> {\r\n        val se"}], "metadata": {"task_id": "Trail-Sense/1565", "ground_truth": "            { it.pressure }\r\n        ) { reading, value ->\r\n            reading.copy(pressure = value)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\sealevel\\LoessSeaLevelCalibrationStrategy.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\noverride fun calibrate(readings: List<Reading<RawWeatherObservation>>): List<Reading<Pressure>> {\r\n        return readings.map {\r\n            Reading(", "choices": [{"text": "new RawWeatherObservation(readings.get(0).rawWeatherObservation)),\r\n            Reading(new Pressure(readings.get(0).pressure))\r\n        };\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1567", "ground_truth": "                it.value.seaLevel(useTemperature),\r\n                it.time\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\sealevel\\SimpleSeaLevelCalibrationStrategy.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nfun List<Reading<CloudGenus?>>.getLastCloud(\r\n    maxTime: Duration,\r\n    now: Instant = Instant.now()\r\n): Reading<CloudGenus?>? {\r\n    val lastCloud = lastOrNull() ?: return null", "choices": [{"text": ";\r\n    if (lastCloud == null) {\r\n        return null;\r\n    }\r\n    return lastCloud.getReading();\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1569", "ground_truth": "    if (Duration.between(lastCloud.time, now).abs() > maxTime) {\r\n        return null\r\n    }\r\n    return lastCloud\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\WeatherExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.infrastructure.alerts.CurrentWeatherAlerter\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.trail_sense.shared.commands.generic.Command\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nfun create(context: Context): CurrentWeatherAlertCommand {\r\n            val prefs = UserPreferences(context)\r\n            return CurrentWeatherAlertCommand(\r\n                prefs.weather,\r\n                CurrentWeatherAlerter(\r\n                    context,\r\n                    FormatService.getInstance(context),\r\n                    prefs.pressureUnits,", "choices": [{"text": "\r\n                    prefs.temperatureUnits,\r\n                    prefs.humidityUnits\r\n                )\r\n            )\r\n        }\r\n\r\nclass CurrentWeatherAlertCommand extends Command {\r\n    private final CurrentWeather weather;\r\n    private final CurrentWeatherAlerter alerter;\r\n\r\n    CurrentWeatherAlertCommand(CurrentWeather weather, CurrentWeatherAlerter alerter) {\r\n        this.weather = weather;\r\n        this.alerter = alerter;\r\n    }\r\n\r\n    @Override\r"}], "metadata": {"task_id": "Trail-Sense/1575", "ground_truth": "                    prefs.temperatureUnits,\r\n                    prefs.weather\r\n                )\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\CurrentWeatherAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.trail_sense.shared.preferences.Flag\noverride fun execute(weather: CurrentWeather) {\r\n        val sentAlert = justShownFlag.get()\r\n\r\n        if (weather.prediction.alerts.contains(WeatherAlert.Storm)) {\r\n            val shouldSend = prefs.sendStormAlerts && prefs.shouldMonitorWeather\r\n            if (shouldSend && !sentAlert) {\r\n                alerter.alert()\r\n                justShownFlag.set(true)\r\n            }", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "Trail-Sense/1583", "ground_truth": "        } else {\r\n            alerter.dismiss()\r\n            justShownFlag.set(false)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\StormAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.sol.units.Reading\nfun toWeatherObservation(): Reading<RawWeatherObservation> {\r\n        return Reading(\r\n            RawWeatherObservation(\r\n                id,\r\n                pressure,\r\n                altitude,\r\n                temperature,\r\n                altitudeAccuracy,\r\n                humidity,", "choices": [{"text": "\r\n                pressureAccuracy,\r\n                temperatureAccuracy,\r\n                altitudeAccuracyAccuracy,\r\n                humidityAccuracy,\r\n                pressureAccuracyAccuracy,\r\n                temperatureAccuracyAccuracy,\r\n                altitudeAccuracyAccuracyAccuracy,\r\n                humidityAccuracyAccuracyAccuracy,\r\n                pressureAccuracyAccuracyAccuracy,\r\n                temperatureAccuracyAccuracyAccuracy,\r\n                altitudeAccuracyAccuracyAccuracy,\r\n                humidityAccuracyAccuracyAccuracy,\r\n                pressureAccuracyAccuracyAccuracy,"}], "metadata": {"task_id": "Trail-Sense/1585", "ground_truth": "                Coordinate(latitude, longitude)\r\n            ),\r\n            Instant.ofEpochMilli(time)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\PressureReadingEntity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<RawWeatherObservation>): Long = onIO {\r\n        val entity = PressureReadingEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            pressureDao.update(entity)\r\n            entity.id\r\n        } else {", "choices": [{"text": "\r\n            pressureDao.insert(entity)\r\n            entity.id\r\n        }\r\n\r\n        return id\r\n    }\r\n\r\n    override suspend fun remove(id: Long): Long = onIO {\r\n        val entity = pressureDao.findById(id)\r\n\r\n        if (entity!= null) {\r\n            pressureDao.delete(entity)\r\n        }\r\n\r\n        return id\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1587", "ground_truth": "            pressureDao.insert(entity)\r\n        }\r\n        _readingsChanged.publish()\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nsuspend fun addAll(value: List<Reading<RawWeatherObservation>>) = onIO {\r\n        val entities = value.map { PressureReadingEntity.from(it) }\r\n        val toAdd = entities.filter { it.id == 0L }\r\n        val toUpdate = entities.filter { it.id != 0L }\r\n\r\n        if (toAdd.isNotEmpty()) {\r\n            pressureDao.bulkInsert(toAdd)\r\n        }\r\n\r\n        if (toUpdate.isNotEmpty()) {", "choices": [{"text": "\r\n            pressureDao.bulkUpdate(toUpdate)\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1590", "ground_truth": "            pressureDao.bulkUpdate(toUpdate)\r\n        }\r\n\r\n        _readingsChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun getWeather(): CurrentWeather = onIO {", "choices": [{"text": "; }\noverride suspend fun setWeather(weather: CurrentWeather): CurrentWeather = onIO {\n  CurrentWeather = weather;\n}\noverride suspend fun updateWeather(weather: CurrentWeather): CurrentWeather = onIO {\n  CurrentWeather = weather;\n}\noverride suspend fun updateWeather(weather: CurrentWeather): CurrentWeather = onIO {\n  CurrentWeather = weather;\n}\noverride suspend fun updateWeather(weather: CurrentWeather): CurrentWeather = onIO {\n  CurrentWeather = weather;"}], "metadata": {"task_id": "Trail-Sense/1594", "ground_truth": "        if (!isValid) {\r\n            refresh()\r\n        }\r\n        cachedValue.getOrPut { populateCache() }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "private fun invalidate() {", "choices": [{"text": "\n\n    public static void main(String[] args) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n"}], "metadata": {"task_id": "Trail-Sense/1604", "ground_truth": "        synchronized(validLock) {\r\n            isValid = false\r\n        }\r\n        _weatherChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "var cachedValue\nval location\nval sharedPrefs\n private suspend fun refresh() {\r\n        cachedValue.reset()", "choices": [{"text": "\r\n        if (cachedValue) {\r\n            return cachedValue;\r\n        }\r\n\r\n        var url = location.search.substring(1);\r\n        if (url) {\r\n            url = url.split('&');\r\n            for (var i = 0; i < url.length; i++) {\r\n                var pair = url[i].split('=');\r\n                if (pair.length == 2) {\r\n                    cachedValue = pair[0];\r\n                    break;\r\n                }\r\n            }\r\n        }\r"}], "metadata": {"task_id": "Trail-Sense/1605", "ground_truth": "        delay(50)\r\n        synchronized(validLock) {\r\n            isValid = true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FeatureState\nprivate fun calculateWeatherMonitorState(): FeatureState {\r\n        return if (WeatherMonitorIsEnabled().isSatisfiedBy(context)) {\r\n            FeatureState.On\r\n        } else if (WeatherMonitorIsAvailable().not().isSatisfiedBy(context)) {", "choices": [{"text": "\r\n            FeatureState.Off\r\n        } else if (WeatherMonitorIsAvailable().isSatisfiedBy(context)) {\r\n            FeatureState.On\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1608", "ground_truth": "            FeatureState.Unavailable\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.receivers.ServiceRestartAlerter\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.util.Log\nimport android.content.Context\nfun start(context: Context) {\r\n        if (!WeatherMonitorIsAvailable().isSatisfiedBy(context)) {\r\n            return\r\n        }\r\n\r\n        if (!hasPermissions(context)) {\r\n            ServiceRestartAlerter(context).alert()\r\n            Log.d(\"WeatherUpdateScheduler\", \"Cannot start weather monitoring\")\r\n            return\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1619", "ground_truth": "\r\n        tryStartForegroundOrNotify(context) {\r\n            WeatherMonitorService.start(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherUpdateScheduler.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.clouds.infrastructure.CloudDetailsService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItem\nimport android.content.Context\noverride fun getListItem(context: Context): ListItem? {\r\n        cloud ?: return null\r\n        val cloudDetailsService = CloudDetailsService(context)\r\n        val name = cloudDetailsService.getCloudName(cloud.value)\r\n\r\n        return ListItem(\r\n            7,\r\n            context.getString(R.string.clouds),\r\n            icon = ResourceListIcon(R.drawable.cloudy),", "choices": [{"text": "\r\n            title = name\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1633", "ground_truth": "            trailingText = name\r\n        ) {\r\n            CloudDetailsModal(context).show(cloud.value)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\fields\\CloudWeatherField.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.shared.FormatService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.content.Context\noverride fun getListItem(context: Context): ListItem? {\r\n        humidity ?: return null\r\n        if (!Sensors.hasHygrometer(context)) {\r\n            return null\r\n        }\r\n\r\n        val formatter = FormatService.getInstance(context)\r\n        val value = formatter.formatPercentage(humidity)\r\n\r\n        return ListItem(\r\n            6,\r\n            context.getString(R.string.humidity),\r\n            icon = ResourceListIcon(R.drawable.ic_category_water, AppColor.Blue.color),", "choices": [{"text": "\r\n            value = value\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1634", "ground_truth": "            trailingText = value\r\n        ) {\r\n            onClick()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\fields\\HumidityWeatherField.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onIO\nprivate fun updateWeather() {\r\n        inBackground {\r\n            onIO {\r\n                history = weatherSubsystem.getHistory().filter {\r\n                    Duration.between(it.time, Instant.now()) <= prefs.weather.pressureHistory\r\n                }\r\n\r\n                loadRawWeatherReadings()", "choices": [{"text": "\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private fun loadRawWeatherReadings() {\r\n        inBackground {\r\n            onIO {\r\n                history = weatherSubsystem.getHistory().filter {\r\n                    Duration.between(it.time, Instant.now()) <= prefs.weather.pressureHistory\r\n                }\r\n\r\n                history.forEach(it -> {\r\n                    Reading reading = weatherSubsystem.getReading(it.id);\r\n                    if (reading!= null) {\r\n                        prefs"}], "metadata": {"task_id": "Trail-Sense/1639", "ground_truth": "\r\n                weather = weatherSubsystem.getWeather()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.ui.charts.PressureChart\nimport com.kylecorry.sol.units.Pressure\noverride fun onUpdate() {\r\n        super.onUpdate()\r\n\r\n        effect(\"chart\", history, rawHistory) {\r\n            displayPressureChart(history, rawHistory)\r\n        }\r\n\r\n        effect(\"list\", weather) {\r\n            updateList()\r\n        }\r\n\r\n        effect(\"forecast\", weather) {", "choices": [{"text": "\r\n            updateForecast()\r\n        }\r\n\r\n        effect(\"weather\", weather) {\r\n            updateWeather()\r\n        }\r\n}"}], "metadata": {"task_id": "Trail-Sense/1640", "ground_truth": "            inBackground {\r\n                updateForecast()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nimport android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        super.onStartCommand(intent, flags, startId)\r\n        acquireWakelock()\r\n        isRunning = true\r\n        val stopAt = cache.getInstant(CACHE_KEY_OFF_TIME)\r\n        if (stopAt != null && Instant.now() < stopAt) {\r\n            offTimer.once(Duration.between(Instant.now(), stopAt))\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "Trail-Sense/1651", "ground_truth": "\r\n        whiteNoise = PinkNoise()\r\n        whiteNoise?.fadeOn()\r\n        return START_STICKY\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\infrastructure\\WhiteNoiseService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onDestroy() {\r\n        releaseWakelock()\r\n        offTimer.stop()\r\n        isRunning = false", "choices": [{"text": "\r\n        super.onDestroy()\r\n}\r\noverride fun onResume() {\r\n        super.onResume()\r\n}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onStart() {\r\n        super.onStart()\r\n}\r\noverride fun onStop() {\r\n        super.onStop()\r\n}\r\noverride fun onResume() {\r\n        super.onResume()\r\n}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride"}], "metadata": {"task_id": "Trail-Sense/1653", "ground_truth": "        whiteNoise?.fadeOff(true)\r\n        stopService(true)\r\n        clearSleepTimer(this)\r\n        super.onDestroy()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\infrastructure\\WhiteNoiseService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {", "choices": [{"text": "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ListView;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\n"}], "metadata": {"task_id": "Trail-Sense/1656", "ground_truth": "        super.onResume()\r\n        if (!intervalometer.isRunning()) {\r\n            intervalometer.interval(20)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\quickactions\\QuickActionWhiteNoise.kt"}}
{"prompt": "val hasReviews Boolean\nval mainUrl String\nval iconId Int?\n suspend fun loadHtml(url: String): String? {\r\n        return try {\r\n            api.loadHtml(api.fixUrl(url))?.removeAds()", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/2", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\APIRepository.kt"}}
{"prompt": "import androidx.core.app.ActivityCompat\nimport android.app.Activity\nimport android.Manifest.permission.WRITE_EXTERNAL_STORAGE\nfun Activity.requestRW() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(\r\n                WRITE_EXTERNAL_STORAGE,", "choices": [{"text": "\n                WRITE_EXTERNAL_STORAGE,\r\n            )\r\n        )\r\n    }\r\n\r\nfun Activity.requestWrite() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(\r\n                WRITE_EXTERNAL_STORAGE,\r\n            )\r\n        )\r\n    }\r\n\r\nfun Activity.requestRead() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(\r\n                WRITE_EXTERNAL_STORAGE,\r\n            )\r\n        )\r\n    }\r"}], "metadata": {"task_id": "QuickNovel/10", "ground_truth": "                READ_EXTERNAL_STORAGE\r\n            ),\r\n            1337\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import java.io.File\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.net.Uri\nimport android.content.ContentResolver\n @RequiresApi(Build.VERSION_CODES.Q)\r\n    fun ContentResolver.getFileLength(fileUri: Uri): Long? {\r\n        return try {\r\n            this.openFileDescriptor(fileUri, \"r\")", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/11", "ground_truth": "                .use { it?.statSize ?: 0 }\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun stream(res: LoadResponse, apiName: String) {\r\n        when (res) {\r\n            is StreamResponse -> {\r\n                stream(res, apiName)\r\n            }", "choices": [{"text": "\r\n            }\r\n        } else {\r\n            is StreamResponse -> {\r\n                stream(res, apiName)\r\n            }\r\n        }\r\n    }\r\n @WorkerThread\r\n    resume fun stream(res: LoadResponse, apiName: String) {\r\n        when (res) {\r\n            is StreamResponse -> {\r\n                stream(res, apiName)\r\n            }\r\n        } else {\r\n            is StreamResponse -> {\r\n                stream(res, apiName)\r\n            }\r\n        }\r\n   "}], "metadata": {"task_id": "QuickNovel/16", "ground_truth": "            is EpubResponse -> {\r\n                stream(res, apiName)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import com.lagradost.quicknovel.CommonActivity.showToast\nimport android.widget.Toast\nprivate fun generateAndReadEpub(author: String?, name: String, apiName: String) {\r\n        showToast(R.string.generating_epub)\r\n        if (!turnToEpub(author, name, apiName)) {", "choices": [{"text": "\r\n            Toast.makeText(this, R.string.failed_to_generate_epub, Toast.LENGTH_SHORT).show();\r\n        } else {\r\n            Toast.makeText(this, R.string.epub_generated, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n    private fun turnToEpub(author: String?, name: String, apiName: String) {\r\n        showToast(R.string.turning_epub_to_epub)\r\n        if (!"}], "metadata": {"task_id": "QuickNovel/19", "ground_truth": "            showToast(R.string.error_loading_novel)\r\n            return\r\n        }\r\n        openEpub(name)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "val readEpubMutex\nval CHANNEL_ID\nval LOCAL_EPUB_MIN_SIZE Long\n private fun readEpub(author: String?, name: String, apiName: String) {\r\n        if (hasEpub(name)) {", "choices": [{"text": "\r\n        readEpubMutex.lock();\r\n        CHANNEL_ID = name;\r\n        LOCAL_EPUB_MIN_SIZE = LOCAL_EPUB_MIN_SIZE * 2;\r\n        readEpubMutex.unlock();\r\n    }\r\n\r\n    private fun hasEpub(name: String) {\r\n        if (name == CHANNEL_ID) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private fun writeEpub(author: String?, name:"}], "metadata": {"task_id": "QuickNovel/20", "ground_truth": "            openEpub(name)\r\n        } else {\r\n            generateAndReadEpub(author, name, apiName)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun readEpub(\r\n        id: Int,\r\n        downloadedCount: Int,\r\n        author: String?,\r\n        name: String,\r\n        apiName: String\r\n    ) {\r\n        if (readEpubMutex.isLocked) return\r\n        readEpubMutex.withLock {\r\n            val downloaded = getKey(DOWNLOAD_EPUB_SIZE, id.toString(), 0)!!\r\n            val shouldUpdate = downloadedCount - downloaded != 0\r\n            if (shouldUpdate) {\r\n                generateAndReadEpub(author, name, apiName)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/21", "ground_truth": "            } else {\r\n                readEpub(author, name, apiName)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun addPendingActionAsync(id: Int, action: DownloadActionType) {\r\n        currentDownloadsMutex.withLock {\r\n            if (!currentDownloads.contains(id)) {\r\n                return\r\n            }\r\n        }", "choices": [{"text": " }\r\n        currentDownloadsMutex.withLock {\r\n            if (currentDownloads.contains(id)) {\r\n                return\r\n            }\r\n        }\r\n        currentDownloadsMutex.withLock {\r\n            currentDownloads.add(id)\r\n        }\r\n        currentDownloadsMutex.withLock {\r\n            currentDownloadsMutex.withLock {\r\n                currentDownloadsMutex.withLock {\r\n                    currentDownloadsMutex.withLock {\r\n                        currentDownloadsMutex.withLock {\r\n                            currentDownloadsMutex.withLock {\r\n                                currentDownloadsMutex.with"}], "metadata": {"task_id": "QuickNovel/23", "ground_truth": "\r\n        pendingActionMutex.withLock {\r\n            pendingAction[id] = action\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun consumeAction(id: Int): DownloadActionType? {\r\n        pendingActionMutex.withLock {\r\n            pendingAction[id]?.let { action ->\r\n                pendingAction -= id", "choices": [{"text": "\r\n            }\r\n        }\r\n        return pendingAction[id]\r\n    }\r\n    private suspend fun cancelAction(id: Int): DownloadActionType? {\r\n        pendingActionMutex.withLock {\r\n            pendingAction[id]?.let { action ->\r\n                pendingAction -= id\r\n            }\r\n        }\r\n        return pendingAction[id]\r\n    }\r\n    private suspend fun cancelAllActions(): DownloadActionType? {\r\n        pendingActionMutex.withLock {\r\n            pendingAction[0]?.let { action ->\r\n"}], "metadata": {"task_id": "QuickNovel/25", "ground_truth": "                return action\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun changeDownload(\r\n        id: Int,\r\n        action: DownloadProgressState.() -> Unit\r\n    ): DownloadProgressState? {\r\n        val data = downloadInfoMutex.withLock {\r\n            downloadProgress[id]?.apply {\r\n                action()\r\n                lastUpdatedMs = System.currentTimeMillis()\r\n            }", "choices": [{"text": " {\r\n                return downloadProgress[id]\r\n            }\r\n        }\r\n        return data\r\n    }\r\nprivate suspend fun updateDownload(\r\n        id: Int,\r\n        action: DownloadProgressState.() -> Unit\r\n    ): DownloadProgressState? {\r\n        val data = downloadInfoMutex.withLock {\r\n            downloadProgress[id]?.apply {\r\n                action()\r\n                lastUpdatedMs = System.currentTimeMillis()\r\n            }\r\n            return downloadProgress[id]\r\n        }\r\n        return data\r"}], "metadata": {"task_id": "QuickNovel/26", "ground_truth": "        }\r\n\r\n        downloadProgressChanged.invoke(Pair(id, data ?: return null))\r\n        return data\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "fun download(load: LoadResponse, api: APIRepository) {\r\n        when (load) {\r\n            is StreamResponse -> {\r\n                download(load, api, 0 until load.data.size)\r\n            }\r\n\r\n            is EpubResponse -> {\r\n                download(load, api)", "choices": [{"text": "(load, api, load.data.size)\r\n            }\r\n        }\r\n\r\n        else {\r\n            is EpubResponse -> {\r\n                download(load, api, 0 until load.data.size)\r\n            }\r\n\r\n            is StreamResponse -> {\r\n                download(load, api, 0 until load.data.size)\r\n            }\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/27", "ground_truth": "            }\r\n\r\n            else -> throw NotImplementedError()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import android.content.SharedPreferences\nimport android.content.Context\nfun Context.removeKey(path: String) {\r\n        try {\r\n            val prefs = getSharedPrefs()\r\n            if (prefs.contains(path)) {\r\n                val editor: SharedPreferences.Editor = prefs.edit()\r\n                editor.remove(path)\r\n                editor.apply()", "choices": [{"text": ".apply()\r\n            }\r\n        } catch (e) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n    fun Context.getSharedPrefs() {\r\n        try {\r\n            val context: Context = this\r\n            return context.getApplicationContext().getSharedPreferences(context.getPackageName(), Context.MODE_PRIVATE)\r\n        } catch (e) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n    fun Context.setSharedPrefs(prefs: SharedPreferences) {\r\n       "}], "metadata": {"task_id": "QuickNovel/31", "ground_truth": "            }\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "import android.content.Context\nfun Context.removeKeys(folder: String): Int {\r\n        val keys = getKeys(folder)", "choices": [{"text": "\r\n        if (keys!= null) {\r\n            for (var i = 0; i < keys.length; i++) {\r\n                var key = keys[i]\r\n                if (key.folder == folder) {\r\n                    keys.splice(i, 1)\r\n                }\r\n            }\r\n            return keys.length\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    function getKeys(folder: String) {\r\n        var keys = []\r\n        if (folder!= null) {\r\n"}], "metadata": {"task_id": "QuickNovel/32", "ground_truth": "        keys.forEach { value ->\r\n            removeKey(value)\r\n        }\r\n        return keys.size\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "import android.content.SharedPreferences\nimport android.content.Context\nfun <T> Context.setKey(path: String, value: T) {\r\n        try {\r\n            val editor: SharedPreferences.Editor = getSharedPrefs().edit()\r\n            editor.putString(path, mapper.writeValueAsString(value))", "choices": [{"text": "(value))\r\n            editor.commit()\r\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\nfun <T> T Context.getKey(path: String) {\r\n        try {\r\n            val editor: SharedPreferences.Editor = getSharedPrefs().edit()\r\n            return mapper.readValue(editor.getString(path, null), T)\r\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n        }\r\n        return null\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/33", "ground_truth": "            editor.apply()\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "import android.content.Context\ninline fun <reified T : Any> Context.getKey(path: String, defVal: T?): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null) ?: return defVal", "choices": [{"text": "\r\n            if (json == null) {\r\n                return defVal;\r\n            }\r\n            return JSON.parse(json);\r\n        } catch (e) {\r\n            return defVal;\r\n        }\r\n    }\r\ninline fun <reified T : Any> Context.setKey(path: String, val: T): void {\r\n        try {\r\n            val json: String = JSON.stringify(val);\r\n            getSharedPrefs().edit().putString(path, json).commit();\r\n        } catch (e) {\r"}], "metadata": {"task_id": "QuickNovel/34", "ground_truth": "            return json.toKotlinObject()\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "import android.content.Context\nfun <T> Context.getKey(path: String, valueType: Class<T>): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null) ?: return null", "choices": [{"text": "\r\n            return valueType.cast(json);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/35", "ground_truth": "            return json.toKotlinObject(valueType)\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "fun ExtractorApi.fixUrl(url: String): String {\r\n    if (url.startsWith(\"http\") ||\r\n        // Do not fix JSON objects when passed as urls.\r\n        url.startsWith(\"{\\\"\")\r\n    ) {\r\n        return url\r\n    }\r\n    if (url.isEmpty()) {\r\n        return \"\"\r\n    }\r\n\r\n    val startsWithNoHttp = url.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$url\"\r\n    } else {\r\n        if (url.startsWith('/')) {", "choices": [{"text": "\r\n            return \"https://$url\"\r\n        } else {\r\n            return \"http://$url\"\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/36", "ground_truth": "            return mainUrl + url\r\n        }\r\n        return \"$mainUrl/$url\"\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\ExtractorApi.kt"}}
{"prompt": "import com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun getSafeUrl(\r\n        link: DownloadExtractLink\r\n    ): List<DownloadLinkType> {\r\n        return try {\r\n            getUrl(link) ?: emptyList()", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/37", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            emptyList()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\ExtractorApi.kt"}}
{"prompt": "import com.lagradost.quicknovel.get\nimport com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    override suspend fun getUrl(link : DownloadExtractLink): List<DownloadLinkType>? {\r\n        val document = link.get().document\r\n        val url = fixUrlNull(document.selectFirst(\"tbody>tr>td>a\")?.attr(\"href\"))\r\n        return listOf(\r\n            DownloadLink(\r\n                url = url ?: return null,", "choices": [{"text": "\r\n                title = document.selectFirst(\"tbody>tr>td>a\")?.text()\r\n            )\r\n        )\r\n    }\r\n @WorkerThread\r\n    override suspend fun getUrl(link : DownloadExtractLink): List<DownloadLinkType>? {\r\n        val document = link.get().document\r\n        val url = fixUrlNull(document.selectFirst(\"tbody>tr>td>a\")?.attr(\"href\"))\r\n        return listOf(\r\n            DownloadLink(\r\n                url = url?: return null,\r\n               "}], "metadata": {"task_id": "QuickNovel/38", "ground_truth": "                name = name,\r\n                kbPerSec = 200\r\n            )\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\LibgenLi.kt"}}
{"prompt": "import java.io.File\nimport com.lagradost.quicknovel.util.UIHelper.parseFontFileName\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup?): View {\r\n        val view =\r\n            (convertView ?: LayoutInflater.from(context)\r\n                .inflate(R.layout.sort_bottom_single_choice, parent, false)) as TextView\r\n\r\n        val font = fonts[position]\r\n        view.text = parseFontFileName(font?.name)\r\n        view.isSelected = position == checked", "choices": [{"text": ";\r\n\r\n        return view;\r\n    }\r\n\r\noverride fun getItemCount(): Int {\r\n        return fonts.length;\r\n    }\r\n\r\noverride fun getItem(position: Int): Font {\r\n        return fonts[position];\r\n    }\r\n\r\noverride fun getItem(position: Int, convertView: View?, parent: ViewGroup?): View {\r\n        val view =\r\n            (convertView?: LayoutInflater.from(context)\r\n               .inflate(R.layout.sort_bottom_single_choice"}], "metadata": {"task_id": "QuickNovel/39", "ground_truth": "        if (font != null) {\r\n            view.typeface = Typeface.createFromFile(font)\r\n        }\r\n        return view\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\FontAdapter.kt"}}
{"prompt": "import androidx.navigation.fragment.NavHostFragment\nimport androidx.fragment.app.FragmentActivity\nimport androidx.annotation.IdRes\nimport android.os.Bundle\nimport android.app.Activity\nfun Activity?.navigate(@IdRes navigation: Int, arguments: Bundle? = null) {\r\n            try {\r\n                if (this is FragmentActivity) {\r\n                    val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as? NavHostFragment?\r\n                    navHostFragment?.navController?.navigate(navigation, arguments)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/40", "ground_truth": "                }\r\n            } catch (t: Throwable) {\r\n                logError(t)\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.Coroutines.main\nimport androidx.navigation.NavDestination\nprivate fun updateNavBar(destination: NavDestination) {\r\n        //this.hideKeyboard()\r\n\r\n        val isNavVisible = listOf(\r\n            R.id.navigation_mainpage,\r\n            R.id.navigation_homepage,\r\n            R.id.navigation_history,\r\n            R.id.navigation_download,\r\n            R.id.navigation_search,\r\n            R.id.navigation_settings,\r\n        ).contains(destination.id)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/44", "ground_truth": "\r\n        binding?.apply {\r\n            navView.isVisible = isNavVisible\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": "fun MainAPI.fixUrlNull(url: String?): String? {", "choices": [{"text": ": String? {\n  if (url === null) {\n    return null;\n  }\n  return url;\n}\n\nfunction MainAPI.fixUrl(url: String?): String? {\n  if (url === null) {\n    return null;\n  }\n  return url;\n}\n\nfunction MainAPI.fixUrl(url: String?): String? {\n  if (url === null) {\n    return null;\n  }\n  return url;\n}\n\nfunction MainAPI.fixUrl(url: String?): String? {"}], "metadata": {"task_id": "QuickNovel/46", "ground_truth": "    if (url.isNullOrEmpty()) {\r\n        return null\r\n    }\r\n    return fixUrl(url)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainAPI.kt"}}
{"prompt": "fun MainAPI.fixUrl(url: String): String {\r\n    if (url.startsWith(\"http\")) {\r\n        return url\r\n    }\r\n\r\n    val startsWithNoHttp = url.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$url\"\r\n    } else {\r\n        if (url.startsWith('/')) {", "choices": [{"text": "\r\n            return \"http://$url\"\r\n        } else {\r\n            return \"https://$url\"\r\n        }\r\n    }\r\n}\r\n\r\nfun MainAPI.fixPath(path: String): String {\r\n    if (path.startsWith(\"http\")) {\r\n        return path\r\n    }\r\n\r\n    val startsWithNoHttp = path.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$path\"\r\n    } else {\r\n        if (path.starts"}], "metadata": {"task_id": "QuickNovel/47", "ground_truth": "            return mainUrl + url\r\n        }\r\n        return \"$mainUrl/$url\"\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainAPI.kt"}}
{"prompt": "inline fun <reified T : Any> some(value: T?): Some<T> {\r\n    return if (value == null) {", "choices": [{"text": ";\r\n}\r\n\r\ninline fun <reified T : Any> none(value: T?): None<T> {\r\n    return if (value == null) {\r\n        return None<T>;\r\n    }\r\n    return Some<T>(value);\r\n}\r\n\r\ninline fun <reified T : Any> all(value: T?): All<T> {\r\n    return if (value == null) {\r\n        return All<T>;\r\n    }\r\n    return All<T>(value);\r"}], "metadata": {"task_id": "QuickNovel/52", "ground_truth": "        Some.None\r\n    } else {\r\n        Some.Success(value)\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "fun <T> normalSafeApiCall(apiCall: () -> T): T? {\r\n    return try {\r\n        apiCall.invoke()", "choices": [{"text": "{\r\n            return apiCall();\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/55", "ground_truth": "    } catch (throwable: Throwable) {\r\n        logError(throwable)\r\n        return null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "suspend fun <T> suspendSafeApiCall(apiCall: suspend () -> T): T? {\r\n    return try {\r\n        apiCall.invoke()", "choices": [{"text": ".invoke();\r\n        return null;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nsuspend fun <T> suspendSafeApiCall2(apiCall: suspend () -> T): T? {\r\n    return try {\r\n        apiCall.invoke();\r\n        return null;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nsuspend fun <T> suspendSafeApiCall3(apiCall: suspend () -> T): T? {\r"}], "metadata": {"task_id": "QuickNovel/56", "ground_truth": "    } catch (throwable: Throwable) {\r\n        logError(throwable)\r\n        return null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "import kotlin.coroutines.EmptyCoroutineContext\nimport kotlin.coroutines.CoroutineContext\nfun CoroutineScope.launchSafe(\r\n    context: CoroutineContext = EmptyCoroutineContext,\r\n    start: CoroutineStart = CoroutineStart.DEFAULT,\r\n    block: suspend CoroutineScope.() -> Unit\r\n): Job {\r\n    val obj: suspend CoroutineScope.() -> Unit = {\r\n        try {\r\n            block()\r\n        } catch (e: Exception) {\r\n            logError(e)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/58", "ground_truth": "        }\r\n    }\r\n\r\n    return this.launch(context, start, obj)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "suspend fun <T, V> Resource<T>.map(transform : suspend (T) -> V) : Resource<V> {\r\n    return when(this) {\r\n        is Resource.Failure -> Resource.Failure(this.isNetworkError,this.errorCode,this.errorResponse,this.errorString)\r\n        is Resource.Loading -> Resource.Loading(this.url)", "choices": [{"text": "\r\n        is Resource.Success -> Resource.Success(this.isNetworkError,this.errorCode,this.errorResponse,this.errorString)\r\n    }\r\n}\r\n\r\nsuspend fun <T, V> Resource<T>.map(transform : resume (T) -> V) : Resource<V> {\r\n    return when(this) {\r\n        is Resource.Failure -> Resource.Failure(this.isNetworkError,this.errorCode,this.errorResponse,this.errorString)\r\n        is Resource.Loading -> Resource.Loading(this.url"}], "metadata": {"task_id": "QuickNovel/59", "ground_truth": "        is Resource.Success -> {\r\n            Resource.Success(transform(this.value))\r\n        }\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "fun <T, V> Resource<T>?.letInner(transform : (T) -> V) : V? {\r\n    return when(this) {\r\n        is Resource.Success -> {", "choices": [{"text": ".transform(transform);\r\n    };\r\n}\r\n\r\nfun <T, V> Resource<T>?.letInner(transform : (T) -> V) : V? {\r\n    return when(this) {\r\n        is Resource.Success -> {\r\n            return transform(this);\r\n        };\r\n    };\r\n}\r\n\r\nfun <T, V> Resource<T>?.letInner(transform : (T) -> V) : V? {\r\n    return when(this) {\r\n        is Resource"}], "metadata": {"task_id": "QuickNovel/60", "ground_truth": "            transform(this.value)\r\n        }\r\n        else -> null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "import com.lagradost.quicknovel.MainActivity.Companion.app\nimport com.lagradost.nicehttp.getHeaders\nimport com.lagradost.nicehttp.cookies\nprivate suspend fun proceed(request: Request, cookies: Map<String, String>): Response {\r\n        val userAgentMap = WebViewResolver.getWebViewUserAgent()?.let {\r\n            mapOf(\"user-agent\" to it)\r\n        } ?: emptyMap()\r\n\r\n        val headers =\r\n            getHeaders(request.headers.toMap() + userAgentMap, null, cookies + request.cookies)\r\n        return app.baseClient.newCall(", "choices": [{"text": "request.method, request.url, headers, request.body)\r\n    }\r\n\r\n    private static Map<String, String> getHeaders(\r\n        Map<String, String> userAgentMap,\r\n        String userAgent,\r\n        Map<String, String> cookies): Map<String, String> {\r\n        val headers = new HashMap<>()\r\n        headers.put(\"User-Agent\", userAgent)\r\n        if (cookies!= null) {\r\n            headers.putAll(cookies)\r\n        }\r\n        return headers\r\n    }\r\n\r"}], "metadata": {"task_id": "QuickNovel/64", "ground_truth": "            request.newBuilder()\r\n                .headers(headers)\r\n                .build()\r\n        ).await()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\CloudflareKiller.kt"}}
{"prompt": "import kotlinx.coroutines.runBlocking\nimport com.lagradost.quicknovel.BaseApplication.Companion.context\nimport com.lagradost.quicknovel.util.Coroutines.mainWork\nimport com.lagradost.quicknovel.util.Coroutines.main\n @JvmName(\"getWebViewUserAgent1\")\r\n        fun getWebViewUserAgent(): String? {\r\n            return webViewUserAgent ?: context?.let { ctx ->\r\n                runBlocking {\r\n                    mainWork {\r\n                        WebView(ctx).settings.userAgentString.also { userAgent ->\r\n                            webViewUserAgent = userAgent", "choices": [{"text": "\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n @JvmName(\"getWebViewUserAgent2\")\r\n        fun getWebViewUserAgent(): String? {\r\n            return webViewUserAgent?: context?.let { ctx ->\r\n                runBlocking {\r\n                    mainWork {\r\n                        WebView(ctx).settings.userAgentString.also { userAgent ->\r\n                            webViewUserAgent = userAgent\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n @JvmName(\"getWebViewUserAgent3\")"}], "metadata": {"task_id": "QuickNovel/65", "ground_truth": "                        }\r\n                    }\r\n                }\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\WebViewResolver.kt"}}
{"prompt": "import okhttp3.Request\nimport com.lagradost.nicehttp.requestCreator\nfun WebResourceRequest.toRequest(): Request {\r\n    val webViewUrl = this.url.toString()\r\n\r\n    return requestCreator(", "choices": [{"text": "(webViewUrl)\r\n}\r\n\r\nclass WebResourceRequest(object):\r\n    def __init__(self, url):\r\n        self.url = url\r\n\r\n    def toRequest(self):\r\n        return WebResourceRequest.toRequest(self.url)\r\n\r\n    def __str__(self):\r\n        return self.url.toString()\r\n\r\n    def __eq__(self, other):\r\n        return self.url == other.url\r\n\r\n    def __ne__(self, other):\r\n        return"}], "metadata": {"task_id": "QuickNovel/68", "ground_truth": "        this.method,\r\n        webViewUrl,\r\n        this.requestHeaders,\r\n    )\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\WebViewResolver.kt"}}
{"prompt": "import com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nprivate fun extract(url: String, name: String): DownloadLinkType {\r\n        return if (url.contains(\".epub\")) {\r\n            DownloadLink(\r\n                url = url,\r\n                name = name,\r\n                kbPerSec = 2\r\n            )\r\n        } else {\r\n            DownloadExtractLink(", "choices": [{"text": "\r\n                url = url,\r\n                name = name,\r\n                kbPerSec = 2\r\n            )\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        System.out.println(extract(\"http://www.google.com\", \"Google\"));\r\n        System.out.println(extract(\"http://www.yahoo.com\", \"Yahoo\"));\r\n        System.out.println(extract(\"http://www.youtube.com\", \"YouTube\"));\r\n        System.out."}], "metadata": {"task_id": "QuickNovel/70", "ground_truth": "                url = url,\r\n                name = name\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\AnnasArchive.kt"}}
{"prompt": "import org.jsoup.Jsoup\nimport com.lagradost.quicknovel.MainActivity.Companion.app\nprivate suspend fun getChapterData(url: String): List<ChapterData> {\r\n        val container = app.get(url).text\r\n        val doc = Jsoup.parse(container)\r\n        val root = doc.select(\"rootfile[full-path]\")\r\n\r\n        val rootPath = root.attr(\"full-path\")", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/84", "ground_truth": "\r\n        val mainUrl = url.removeSuffix(containerUrl)\r\n\r\n        return scrapeOPFList(mainUrl + rootPath)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\ReadAnyBookProvider.kt"}}
{"prompt": "private fun findComment(url: String): String? {\r\n        val str = Regex(\"comment/(\\\\w*?)/\").find(url)?.groupValues?.get(1)\r\n            ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/\").find(url)?.groupValues?.get(1)", "choices": [{"text": "\r\n           ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/(\\\\w*?)/\").find(url)?.groupValues?.get(1)\r\n           ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/(\\\\w*?)/\").find(url)?.groupValues?.get(2)\r\n           ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/(\\\\w*?)/\").find(url)?.groupValues?.get(3"}], "metadata": {"task_id": "QuickNovel/88", "ground_truth": "        if(str.isNullOrBlank() || str.length < 4) {\r\n            return null\r\n        }\r\n        return str\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\RedditProvider.kt"}}
{"prompt": "import android.graphics.Color\noverride fun onColorSelected(dialog: Int, color: Int) {", "choices": [{"text": ") {\n  dialog.dismiss()\n  dialog.setColor(Color.parseColor(color))\n}\n\nexport function onDialogColorSelected(dialog: Int, color: Int) {\n  dialog.dismiss()\n  dialog.setColor(Color.parseColor(color))\n}\n\nexport function onDialogTitleSelected(dialog: Int, title: Int) {\n  dialog.dismiss()\n  dialog.setTitle(title)\n}\n\nexport function onDialogMessageSelected(dialog: Int, message: Int) {\n  dialog.dismiss()\n"}], "metadata": {"task_id": "QuickNovel/93", "ground_truth": "        when (dialog) {\r\n            0 -> setBackgroundColor(color)\r\n            1 -> setTextColor(color)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.toPx\nprivate fun updatePadding() {\r\n        val h = viewModel.paddingHorizontal.toPx\r\n        val v = viewModel.paddingVertical.toPx\r\n        binding.realText.apply {\r\n            if (paddingLeft == h && paddingRight == h && paddingBottom == v && paddingTop == v) return\r\n            setPadding(\r\n                h,\r\n                v,\r\n                h,", "choices": [{"text": "\r\n                v\r\n            )\r\n        }\r\n}\r\nprivate fun setPadding(\r\n        val h,\r\n        val v,\r\n        val h2,\r\n        val v2,\r\n        val h3,\r\n        val v3,\r\n        val h4,\r\n        val v4,\r\n        val h5,\r\n        val v5,\r\n        val h6,\r\n        val v6,\r\n        val h7,\r\n        val v7,\r\n        val h8,\r\n       "}], "metadata": {"task_id": "QuickNovel/102", "ground_truth": "                v\r\n            )\r\n            scrollToDesired()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": "import kotlin.reflect.KProperty\nvar _context WeakReference<ReadActivity2>?\nvar cache T?\nvar cache T\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        cache = t\r\n        if (t == null) {", "choices": [{"text": "\r\n            _context = new WeakReference<ReadActivity2>(self)\r\n        } else {\r\n            _context = new WeakReference<ReadActivity2>(self, t)\r\n        }\r\n    }\r\n    operator fun getValue(\r\n        self: Any?,\r\n        property: KProperty<*>\r\n    ) {\r\n        if (cache!= null) {\r\n            return cache\r\n        }\r\n        if (_context!= null) {\r\n            return _context.get()\r\n        }\r\n        return null"}], "metadata": {"task_id": "QuickNovel/105", "ground_truth": "            removeKey(key)\r\n        } else {\r\n            setKeyClass(key, t)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "import kotlin.reflect.KProperty\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        cache = t ?: default\r\n        _liveData.postValue(cache)\r\n        if (t == null) {", "choices": [{"text": "\r\n            _liveData.postValue(null)\r\n        } else {\r\n            _liveData.postValue(t)\r\n        }\r\n    }\r\n\r\noperator fun getValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n    cache = t?: default\r\n    _liveData.postValue(cache)\r\n    if (t == null) {\r\n        _liveData.postValue(null)\r\n    } else {\r\n       "}], "metadata": {"task_id": "QuickNovel/106", "ground_truth": "            removeKey(key)\r\n        } else {\r\n            setKeyClass(key, t)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "override suspend fun posterBytes(): ByteArray? {\r\n        val poster = data.poster\r\n        if (poster != null) {\r\n            try {\r\n                return MainActivity.app.get(poster).okhttpResponse.body.bytes()\r\n            } catch (t: Throwable) {", "choices": [{"text": "\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    override suspend fun posterUrl(): String? {\r\n        val poster = data.poster\r\n        if (poster!= null) {\r\n            try {\r\n                return MainActivity.app.get(poster).okhttpResponse.body.url()\r\n            } catch (t: Throwable) {\r\n                return null\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    override"}], "metadata": {"task_id": "QuickNovel/108", "ground_truth": "                logError(t)\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "private fun updateIndex(index: Int) {\r\n        var alreadyRequested = false\r\n        for (idx in index - chapterPaddingBottom..index + chapterPaddingTop) {\r\n            if (!requested.contains(index)) {\r\n                alreadyRequested = true\r\n            }\r\n            requested += index\r\n        }\r\n\r\n        if (alreadyRequested) return", "choices": [{"text": " {\r\n            return\r\n        }\r\n\r\n        for (idx in index - chapterPaddingBottom..index + chapterPaddingTop) {\r\n            if (!requested.contains(idx)) {\r\n                requested.add(idx)\r\n            }\r\n        }\r\n\r\n        for (idx in index - chapterPaddingBottom..index + chapterPaddingTop) {\r\n            if (requested.contains(idx)) {\r\n                requested.remove(idx)\r\n            }\r\n        }\r\n\r\n        for (idx in index - chapterPaddingBottom..index +"}], "metadata": {"task_id": "QuickNovel/113", "ground_truth": "\r\n        ioSafe {\r\n            updateIndexAsync(index)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "var _context WeakReference<ReadActivity2>?\nvar markwon Markwon\nval ttsLines", "choices": [{"text": ";\n(function (_context) {\n  \"use strict\";\n\n  _context.__esModule = true;\n\n  var _react = require(\"react\");\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _reactAddonsPureRenderMixin = require(\"react-addons-pure-render-mixin\");\n\n  var _reactAddonsPureRenderMixin2 = _interopRequireDefault(_reactAddonsPureRenderMixin);\n\n  var _svgIcon = require(\"../../svg-icon\");\n\n  var _svgIcon2 ="}], "metadata": {"task_id": "QuickNovel/127", "ground_truth": "override fun onCleared() {\r\n        ttsSession.release()\r\n\r\n        super.onCleared()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "import org.jsoup.nodes.Document\nimport com.lagradost.quicknovel.MainActivity.Companion.app\nsuspend fun jConnect(\r\n    url: String,\r\n    params: Map<String, String> = mapOf(),\r\n    method: String = \"GET\"\r\n): Document? {\r\n    val head = mapOf(\r\n        \"Accept\" to \"*/*\",\r\n        \"Accept-Encoding\" to \"gzip, deflate\",\r\n        \"User-Agent\" to USER_AGENT\r\n    )\r\n    return try {\r\n        val res = app.custom(method, url = url, headers = head, params = params)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/129", "ground_truth": "        if (res.code == 200) Jsoup.parse(res.text) else null\r\n    } catch (e: Exception) {\r\n        null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "fun String.toRate(maxRate: Int = 10): Int {\r\n    return this", "choices": [{"text": ";\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "QuickNovel/130", "ground_truth": "        .replace(Regex(\"[^.0-9]\"), \"\")\r\n        .toFloatOrNull()\r\n        ?.times(1000 / maxRate)\r\n        ?.toInt() ?: 0\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "fun String.toStatus(): Int {\r\n    return this\r\n        .clean()\r\n        .lowercase(Locale.getDefault())\r\n        .let {\r\n            when (it) {\r\n                \"completed\" -> STATUS_COMPLETE", "choices": [{"text": ";\r\n            }\r\n        };\r\n}\r\n\r\nfun String.toDate(): Date {\r\n    return this\r\n       .clean()\r\n       .lowercase(Locale.getDefault())\r\n       .let {\r\n            when (it) {\r\n                return new Date(it);\r\n            }\r\n        };\r\n}\r\n\r\nfun String.toTime(): Time {\r\n    return this\r\n       .clean()\r\n       .lowercase(Locale.getDefault())\r\n       .let {\r\n            when"}], "metadata": {"task_id": "QuickNovel/132", "ground_truth": "                \"ongoing\" -> STATUS_ONGOING\r\n                else -> STATUS_NULL\r\n            }\r\n        }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "import com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport com.lagradost.quicknovel.BaseApplication.Companion.removeKey\nimport android.speech.tts.Voice\nfun setVoice(voice: Voice?) {\r\n        if (voice == null) {\r\n            removeKey(EPUB_VOICE)\r\n        } else {\r\n            setKey(EPUB_VOICE, voice.name)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/140", "ground_truth": "        }\r\n        val tts = tts ?: return\r\n        clearTTS(tts)\r\n        tts.voice = voice ?: tts.defaultVoice\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "import kotlinx.coroutines.delay\nsuspend fun waitForOr(id: Int?, action: () -> Boolean, then: () -> Unit) {\r\n        if (id == null) return\r\n        while (id > TTSEndSpeakId) {\r\n            delay(50)\r\n            if (action()) {\r\n                interruptTTS()", "choices": [{"text": "\r\n                id = TTSEndSpeakId\r\n            } else {\r\n                sleep(50)\r\n            }\r\n        }\r\n        if (then!= null) {\r\n            then()\r\n        }\r\n}\r\nsuspend fun interruptTTS() {\r\n        TTSEndSpeakId = TTSEndSpeakId + 1\r\n        delay(50)\r\n        TTSEndSpeakId = TTSEndSpeakId + 2\r\n        delay(50)\r\n        TTSEndSpeakId = TTSEndSpeakId + 3\r\n       "}], "metadata": {"task_id": "QuickNovel/142", "ground_truth": "                then()\r\n                break\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "fun release() {\r\n        tts?.stop()", "choices": [{"text": "}\r\n\r\nfunction setup() {\r\n    createCanvas(720, 400);\r\n    background(0);\r\n}\r\n\r\nfunction draw() {\r\n    background(255);\r\n\r\n    for (var i = 0; i < tts.length; i++) {\r\n        tts[i].draw();\r\n    }\r\n}\r\n\r\nfunction update() {\r\n    for (var i = 0; i < tts.length; i++) {\r\n        tts[i].update();\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/144", "ground_truth": "        tts?.shutdown()\r\n        tts = null\r\n\r\n        unregister()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "import java.util.Stack\nimport android.text.Spanned\nprivate fun getNewLineLocations(unsegmented: Spanned): Stack<Int> {\r\n        val loc = Stack<Int>()\r\n        val string = unsegmented.toString()\r\n\r\n\r\n        var next = string.indexOf('\\n')\r\n        while (next > 0) {\r\n            //avoid chains of newline characters\r\n            next = if (string[next - 1] != '\\n') {\r\n                loc.push(next)\r\n                string.indexOf('\\n', loc.peek() + 1)\r\n            } else {\r\n                string.indexOf('\\n', next + 1)", "choices": [{"text": "\r\n            }\r\n        }\r\n\r\n        return loc\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/147", "ground_truth": "            }\r\n            if (next >= string.length) next = -1\r\n        }\r\n        return loc\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "import io.noties.markwon.Markwon\nimport android.text.Spanned\nfun render(html: String, markwon: Markwon): Spanned {\r\n        return markwon.render(\r\n            markwon.parse(\r\n                html\r\n                /*.replaceAfterIndex( // because markwon is fucked we have to replace newlines with breaklines and becausse I dont want 3 br on top I start after body\r\n                \"\\n\",\r\n                \"<br>\",", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/148", "ground_truth": "                startIndex = index + 7\r\n            )*/\r\n            )\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.ui.ReadType\nimport com.lagradost.quicknovel.R\nimport androidx.lifecycle.viewModelScope\nprivate fun loadData() = viewModelScope.launch {\r\n        currentReadType.postValue(null)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/157", "ground_truth": "        isOnDownloads.postValue(true)\r\n        cardsDataMutex.withLock {\r\n            postCards()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "var currentTab MutableLiveData<Int>\nvar currentSortingMethod MutableLiveData<Int>\nval cards MutableLiveData<ArrayList<DownloadFragment.DownloadDataLoaded>>\n fun selectTab(index: Int) {\r\n        currentTab.postValue(index)\r\n        if (index == 0) {", "choices": [{"text": "\r\n                currentTab.postValue(0)\r\n                currentSortingMethod.postValue(0)\r\n                cards.postValue(new ArrayList<DownloadFragment.DownloadDataLoaded>())\r\n        } else {\r\n                currentTab.postValue(index)\r\n                currentSortingMethod.postValue(1)\r\n                cards.postValue(new ArrayList<DownloadFragment.DownloadDataLoaded>())\r\n        }\r\n}\r\n fun selectSortingMethod(index: Int) {\r\n        currentSortingMethod.postValue(index)\r\n        cards.postValue"}], "metadata": {"task_id": "QuickNovel/158", "ground_truth": "            loadData()\r\n        } else {\r\n            loadNormalData(readList[index - 1])\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.DownloadProgressState\nimport com.lagradost.quicknovel.BaseApplication.Companion.context\nprivate fun progressChanged(data: Pair<Int, DownloadProgressState>) =\r\n        ioSafe {\r\n            cardsDataMutex.withLock {\r\n                val (id, state) = data\r\n                cardsData[id]?.apply {\r\n                    downloadedCount = state.progress\r\n                    downloadedTotal = state.total\r\n                    this.state = state.state\r\n                    context?.let { ctx ->\r\n                        this.ETA = state.eta(ctx)", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/161", "ground_truth": "                    }\r\n                }\r\n                postCards()\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.R\nval isOnDownloads MutableLiveData<Boolean>\nval currentReadType MutableLiveData<ReadType?>\nval cards MutableLiveData<ArrayList<DownloadFragment.DownloadDataLoaded>>\nprivate fun downloadRemoved(id: Int) = ioSafe {", "choices": [{"text": "(id: Int) => {\n\tonOnDownloads.set(false);\n\tcurrentReadType.set(null);\n\tcards.set(new ArrayList<DownloadFragment.DownloadDataLoaded>());\n}\nprivate fun downloadAdded(id: Int) = ioSafe {\n\tonOnDownloads.set(true);\n\tcurrentReadType.set(ReadType.DOWNLOAD);\n\tcards.set(new ArrayList<DownloadFragment.DownloadDataLoaded>());\n}\nprivate fun downloadUpdated(id: Int) = ioSafe {\n\tonOnDownloads.set(true"}], "metadata": {"task_id": "QuickNovel/162", "ground_truth": "        cardsDataMutex.withLock {\r\n            cardsData -= id\r\n            postCards()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/167", "ground_truth": "    ): View {\r\n        binding = FragmentHistoryBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryFragment.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.ResultCached\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.HISTORY_FOLDER\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKeys\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nprivate fun updateHistory() {\r\n        ioSafe {\r\n            val list = ArrayList<ResultCached>()\r\n            val keys = getKeys(HISTORY_FOLDER) ?: return@ioSafe\r\n            for (k in keys) {\r\n                val res =\r\n                    getKey<ResultCached>(k) ?: continue\r\n                list.add(res)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/168", "ground_truth": "            }\r\n            list.sortBy { -it.cachedTime }\r\n            cards.postValue(list)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryViewModel.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/173", "ground_truth": "    ): View {\r\n        binding = FragmentHomeBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\home\\HomeFragment.kt"}}
{"prompt": "import com.lagradost.quicknovel.mvvm.observe\nimport androidx.recyclerview.widget.GridLayoutManager\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        val browseAdapter = BrowseAdapter2()\r\n        binding.homeBrowselist.apply {\r\n            adapter = browseAdapter\r\n            layoutManager = GridLayoutManager(context, 1)\r\n            setHasFixedSize(true)\r\n        }\r\n\r\n        observe(viewModel.homeApis) { list ->", "choices": [{"text": " {\r\n            binding.homeApis.apply {\r\n                adapter = browseAdapter\r\n                layoutManager = GridLayoutManager(context, 1)\r\n                setHasFixedSize(true)\r\n            }\r\n        } }\r\n\r\n        observe(viewModel.homeBrowselist) { list -> {\r\n            binding.homeBrowselist.apply {\r\n                adapter = browseAdapter\r\n                layoutManager = GridLayoutManager(context, 1)\r\n                setHasFixedSize(true)\r\n            }\r\n        } }\r\n\r"}], "metadata": {"task_id": "QuickNovel/174", "ground_truth": "            browseAdapter.submitList(list)\r\n        }\r\n\r\n        activity?.fixPaddingStatusbar(binding.homeToolbar)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\home\\HomeFragment.kt"}}
{"prompt": "import com.lagradost.quicknovel.databinding.SearchResultGridBinding\nimport com.lagradost.quicknovel.databinding.LoadingBottomBinding\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return when (viewType) { // Use 'when' to create the correct holder for any position\r\n            REGULAR_VIEW_TYPE -> MainAdapter2Holder(SearchResultGridBinding.inflate(LayoutInflater.from(parent.context),parent,false))\r\n            FOOTER_VIEW_TYPE -> LoadingHolder(LoadingBottomBinding.inflate(LayoutInflater.from(parent.context),parent,false))", "choices": [{"text": "\r\n        }\r\n    }\r\n\r\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int): void {\r\n    if (holder instanceof MainAdapter2Holder) {\r\n        ((MainAdapter2Holder) holder).bind(position);\r\n    } else if (holder instanceof LoadingHolder) {\r\n        ((LoadingHolder) holder).bind(position);\r\n    }\r\n}\r\n\r\noverride fun onUnbindViewHolder(holder: RecyclerView.ViewHolder): void {\r\n    if (holder instanceof MainAdapter2Holder"}], "metadata": {"task_id": "QuickNovel/175", "ground_truth": "            else -> {\r\n                throw NotImplementedError()\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainAdapter2.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when(holder) {\r\n            is MainAdapter2Holder -> {\r\n                val currentItem = getItem(position)\r\n                holder.bind(currentItem, resView)\r\n            }", "choices": [{"text": "\r\n        }\r\n    }\r\n}\r\noverride fun onUnbindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when(holder) {\r\n            is MainAdapter2Holder -> {\r\n                val currentItem = getItem(position)\r\n                holder.unbind()\r\n            }\r\n        }\r\n}\r\noverride fun getItem(position: Int) {\r\n    is MainAdapter2 -> {\r\n        return MainAdapter2.items[position]\r\n    }\r\n}\r\noverride fun getItemCount() {"}], "metadata": {"task_id": "QuickNovel/176", "ground_truth": "            is LoadingHolder -> {\r\n                holder.bind()\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainAdapter2.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/177", "ground_truth": "    ): View {\r\n        binding = FragmentMainpageBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageFragment.kt"}}
{"prompt": "import com.lagradost.quicknovel.CommonActivity.activity\nimport android.net.Uri\nimport android.content.Intent\nfun openInBrowser() {\r\n        try {\r\n            val url = currentUrl.value\r\n            if (url != null) {\r\n                val i = Intent(Intent.ACTION_VIEW)\r\n                i.data = Uri.parse(url)\r\n                activity?.startActivity(i)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/182", "ground_truth": "            }\r\n        } catch (_ : Throwable) {\r\n\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageViewModel.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.Apis\nfun init(apiName : String, mainCategory: Int?,\r\n             orderBy: Int?,\r\n             tag: Int?) {\r\n        if (hasInit) return\r\n        hasInit = true\r\n        repo = MainPageRepository(Apis.getApiFromName(apiName))\r\n        load(\r\n            0,", "choices": [{"text": "\r\n            mainCategory,\r\n            orderBy,\r\n            tag\r\n        )\r\n    }\r\nfun load(pageIndex: Int,\r\n         mainCategory: Int?,\r\n         orderBy: Int?,\r\n         tag: Int?) {\r\n        if (hasInit) return\r\n        hasInit = true\r\n        repo.load(\r\n            pageIndex,\r\n            mainCategory,\r\n            orderBy,\r\n            tag\r\n        )\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/185", "ground_truth": "            mainCategory,\r\n            orderBy,\r\n            tag\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageViewModel.kt"}}
{"prompt": "private fun updateScrollHeight() {\r\n        val displayMetrics = context?.resources?.displayMetrics ?: return\r\n        val height = binding.resultDownloadCard.height\r\n        val total = displayMetrics.heightPixels - height\r\n\r\n        binding.resultNovelHolder.apply {\r\n            setPadding(\r\n                paddingLeft,\r\n                paddingTop,", "choices": [{"text": "\r\n                paddingRight,\r\n                total\r\n            )\r\n        }\r\n\r\n        binding.resultDownloadCard.apply {\r\n            binding.resultNovelHolder.apply {\r\n                binding.resultNovelHolder.apply {\r\n                    binding.resultNovelHolder.apply {\r\n                        binding.resultNovelHolder.apply {\r\n                            binding.resultNovelHolder.apply {\r\n                                binding.resultNovelHolder.apply {\r\n                                    binding.resultNovelHolder.apply {\r\n                                        binding.resultNovelHolder.apply"}], "metadata": {"task_id": "QuickNovel/189", "ground_truth": "                paddingRight,\r\n                maxOf(0, total)\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultFragment.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.BookDownloader2\nimport androidx.lifecycle.viewModelScope\nfun readEpub() = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r\n            addToHistory()\r\n            BookDownloader2.readEpub(\r\n                loadId,\r\n                downloadState.value?.progress ?: return@launch,\r\n                load.author,", "choices": [{"text": " load.title\r\n            )\r\n        }\r\n        return@launch\r\n    }\r\n}\r\nfun addToHistory() = viewModelScope.launch {\r\n    loadMutex.withLock {\r\n        if (!hasLoaded) return@launch\r\n        BookDownloader2.addToHistory(\r\n            loadId,\r\n            downloadState.value?.progress?: return@launch,\r\n            load.author,\r\n            load.title\r\n        )\r\n    }\r\n    return@launch\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/193", "ground_truth": "                load.name,\r\n                apiName\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.RESULT_BOOKMARK_STATE\nimport com.lagradost.quicknovel.RESULT_BOOKMARK\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport androidx.lifecycle.viewModelScope\nfun bookmark(state: Int) = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r\n            setKey(\r\n                RESULT_BOOKMARK_STATE, loadId.toString(), state\r\n            )", "choices": [{"text": " {\r\n                if (!hasLoaded) return@launch\r\n                setKey(\r\n                    RESULT_BOOKMARK, loadId.toString(), state\r\n                )\r\n            }\r\n        }\r\n        return@launch\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/196", "ground_truth": "            updateBookmarkData()\r\n        }\r\n\r\n        readState.postValue(ReadType.fromSpinner(state))\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "import com.lagradost.quicknovel.ui.ReadType\nimport com.lagradost.quicknovel.RESULT_BOOKMARK_STATE\nimport com.lagradost.quicknovel.RESULT_BOOKMARK\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.DataStore.getKey\nimport com.lagradost.quicknovel.DOWNLOAD_EPUB_LAST_ACCESS\nimport com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nprivate fun setState(tid: Int) {\r\n        loadId = tid\r\n\r\n        readState.postValue(\r\n            ReadType.fromSpinner(\r\n                getKey(\r\n                    RESULT_BOOKMARK_STATE, tid.toString()\r\n                )\r\n            )\r\n        )\r\n\r\n        setKey(\r\n            DOWNLOAD_EPUB_LAST_ACCESS, tid.toString(), System.currentTimeMillis()\r\n        )\r\n\r\n        updateBookmarkData()", "choices": [{"text": "\r\n    }\r\n\r\n    private fun updateBookmarkData() {\r\n        readState.postValue(\r\n            ReadType.fromSpinner(\r\n                getKey(\r\n                    RESULT_BOOKMARK, loadId.toString()\r\n                )\r\n            )\r\n        )\r\n\r\n        setKey(\r\n            DOWNLOAD_EPUB_LAST_ACCESS, loadId.toString(), System.currentTimeMillis()\r\n        )\r\n\r\n        readBookmark.postValue(\r\n            ReadType.fromSpinner(\r\n                getKey(\r\n                    RESULT_"}], "metadata": {"task_id": "QuickNovel/202", "ground_truth": "        hasLoaded = true\r\n\r\n        // insert a download progress if not found\r\n        insertZeroData()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "import android.text.Layout\nfun Layout.getLineTopWithoutPadding(line: Int): Int {\r\n    var lineTop = getLineTop(line)", "choices": [{"text": ";\r\n    if (lineTop < 0) {\r\n        lineTop = 0;\r\n    }\r\n    return lineTop;\r\n}\r\n\r\nfunction getLineTop(line: Int): Int {\r\n    if (line < 0) {\r\n        line = 0;\r\n    }\r\n    return line;\r\n}\r\n\r\nfunction getLineTopWithoutPadding(line: Int): Int {\r\n    if (line < 0) {\r\n        line = 0;\r\n    }\r\n    return line;\r\n}\r\n\r\n"}], "metadata": {"task_id": "QuickNovel/205", "ground_truth": "    if (line == 0) {\r\n        lineTop -= topPadding\r\n    }\r\n    return lineTop\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\roundedbg\\LayoutExtensions.kt"}}
{"prompt": "import android.text.Layout\nfun Layout.getLineBottomWithoutPadding(line: Int): Int {\r\n    var lineBottom = getLineBottomWithoutSpacing(line)", "choices": [{"text": ";\r\n    if (lineBottom < 0) {\r\n        lineBottom = 0;\r\n    }\r\n    return lineBottom;\r\n}\r\n\r\nfunction getLineBottomWithoutSpacing(line: Int): Int {\r\n    if (line < 0) {\r\n        line = 0;\r\n    }\r\n    return line;\r\n}\r\n\r\nfunction getLineBottomWithoutPadding(line: Int): Int {\r\n    if (line < 0) {\r\n        line = 0;\r\n    }\r\n    return line;\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/206", "ground_truth": "    if (line == lineCount - 1) {\r\n        lineBottom -= bottomPadding\r\n    }\r\n    return lineBottom\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\roundedbg\\LayoutExtensions.kt"}}
{"prompt": "import com.lagradost.quicknovel.CommonActivity.activity\nimport android.view.WindowManager\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r\n        activity?.window?.setSoftInputMode(\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE", "choices": [{"text": ",\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE\r\n        );\r\n        activity?.window?.setSoftInputMode(\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN,\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN\r\n        );\r\n        activity?.window?.setSoftInputMode(\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE,\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE\r\n"}], "metadata": {"task_id": "QuickNovel/217", "ground_truth": "        )\r\n\r\n        binding = FragmentSearchBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\search\\SearchFragment.kt"}}
{"prompt": "import androidx.preference.PreferenceFragmentCompat\nimport androidx.preference.Preference\nprivate fun PreferenceFragmentCompat?.getPref(id: Int): Preference? {\r\n        if (this == null) return null\r\n\r\n        return try {\r\n            findPreference(getString(id))", "choices": [{"text": "\r\n            return findPreference(getString(id))\r\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n    }\r\nprivate fun PreferenceFragmentCompat?.getString(id: Int): String {\r\n        if (this == null) return null\r\n\r\n        return try {\r\n            findPreference(getString(id))\r\n            return getString(id)\r\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n"}], "metadata": {"task_id": "QuickNovel/220", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "import android.content.Context\nfun asStringNull(context: Context?): String? {\r\n        try {\r\n            return asString(context ?: return null)\r\n        } catch (e: Exception) {", "choices": [{"text": "\r\n            return null\r\n        }\r\n    }\r\nfun asString(context: Context?): String? {\r\n        try {\r\n            return asString(context?: return null)\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }\r\nfun asString(context: Context?): String? {\r\n        try {\r\n            return asString(context?: return null)\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/236", "ground_truth": "            Log.e(TAG, \"Got invalid data from $this\")\r\n            logError(e)\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.UIHelper.setImage\nimport android.widget.ImageView\nfun ImageView?.setImage(value: UiImage?, fadeIn: Boolean = true) {\r\n    when (value) {\r\n        is UiImage.Image -> setImageImage(value, fadeIn)\r\n        is UiImage.Drawable -> setImageDrawable(value)", "choices": [{"text": ".Image -> setImageImage(value, fadeIn)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r\n        is Ui"}], "metadata": {"task_id": "QuickNovel/237", "ground_truth": "        null -> {\r\n            this?.isVisible = false\r\n        }\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "import androidx.annotation.DrawableRes\n\r\n@JvmName(\"imgNull\")\r\nfun img(\r\n    url: String?,\r\n    headers: Map<String, String>? = null,\r\n    @DrawableRes errorDrawable: Int? = null", "choices": [{"text": ",\r\n) {\r\n    return null\r\n}\r\n\r\n@JvmName(\"imgNull\")\r\nfun img(\r\n    url: String?,\r\n    headers: Map<String, String>? = null,\r\n    @DrawableRes errorDrawable: Int? = null,\r\n) {\r\n    return null\r\n}\r\n\r\n@JvmName(\"imgNull\")\r\nfun img(\r\n    url: String?,\r\n    headers: Map<String, String>? = null,\r\n    @DrawableRes errorDrawable: Int?"}], "metadata": {"task_id": "QuickNovel/240", "ground_truth": "): UiImage? {\r\n    if (url.isNullOrBlank()) return null\r\n    return UiImage.Image(url, headers, errorDrawable)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "import androidx.core.view.isVisible\nimport android.widget.TextView\nfun TextView?.setText(text: UiText?) {\r\n    if (this == null) return\r\n    if (text == null) {\r\n        this.isVisible = false\r\n    } else {\r\n        val str = text.asStringNull(context)?.let {\r\n            if (this.maxLines == 1) {\r\n                it.replace(\"\\n\", \" \")\r\n            } else {\r\n                it\r\n            }\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/242", "ground_truth": "\r\n        this.isGone = str.isNullOrBlank()\r\n        this.text = str\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "import com.lagradost.quicknovel.MainAPI\nval apis Array<MainAPI>\nfun getApiFromNameNull(apiName: String?): MainAPI? {\r\n            for (api in apis) {", "choices": [{"text": " {\r\n                if (api.getName().equals(apiName)) {\r\n                    return api;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n}"}], "metadata": {"task_id": "QuickNovel/244", "ground_truth": "                if (apiName == api.name)\r\n                    return api\r\n            }\r\n            return null\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Apis.kt"}}
{"prompt": "import com.lagradost.quicknovel.R\nimport androidx.preference.PreferenceManager\nimport android.content.Context\nfun Context.getApiProviderLangSettings(): HashSet<String> {\r\n            val settingsManager = PreferenceManager.getDefaultSharedPreferences(this)\r\n            val hashSet = HashSet<String>()\r\n            hashSet.add(\"en\") // def is only en\r\n            val list = settingsManager.getStringSet(\r\n                this.getString(R.string.provider_lang_key),\r\n                hashSet.toMutableSet()", "choices": [{"text": "\r\n            )\r\n            return list\r\n        }\r\n\r\nfun Context.getApiProviderLanguageSettings(): HashSet<String> {\r\n            val settingsManager = PreferenceManager.getDefaultSharedPreferences(this)\r\n            val hashSet = HashSet<String>()\r\n            hashSet.add(\"en\") // def is only en\r\n            val list = settingsManager.getStringSet(\r\n                this.getString(R.string.provider_lang_key),\r\n                hashSet.toMutableSet()\r\n            )\r\n            return list\r\n       "}], "metadata": {"task_id": "QuickNovel/247", "ground_truth": "            )\r\n\r\n            if (list.isNullOrEmpty()) return hashSet\r\n            return list.toHashSet()\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Apis.kt"}}
{"prompt": "import android.content.Context\nprivate fun <T> Context.restoreMap(\r\n        map: Map<String, T>?,\r\n        isEditingAppSettings: Boolean = false", "choices": [{"text": ") {\r\n    if (map == null) {\r\n        return null\r\n    }\r\n    for (String key in map.keySet()) {\r\n        T value = map.get(key)\r\n        if (value == null) {\r\n            map.remove(key)\r\n        } else {\r\n            map.put(key, value)\r\n        }\r\n    }\r\n    return map\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/248", "ground_truth": "    ) {\r\n        map?.forEach {\r\n            setKeyRaw(it.key, it.value, isEditingAppSettings)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\BackupUtils.kt"}}
{"prompt": "fun <T> T.ioSafe(work: suspend (CoroutineScope.(T) -> Unit)): Job {\r\n        val value = this", "choices": [{"text": ": T;\r\n\r\n        if (typeof value === 'object') {\r\n            return value;\r\n        }\r\n\r\n        if (value === null) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof value ==='string') {\r\n            return value;\r\n        }\r\n\r\n        if (typeof value === 'number') {\r\n            return value;\r\n        }\r\n\r\n        if (typeof value === 'boolean') {\r\n            return value;\r\n        }\r\n\r\n        if ("}], "metadata": {"task_id": "QuickNovel/250", "ground_truth": "\r\n        return CoroutineScope(Dispatchers.IO).launchSafe {\r\n            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "suspend fun <T, V> V.ioWorkSafe(work: suspend (CoroutineScope.(V) -> T)): T? {\r\n        val value = this\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                work(value)\r\n            } catch (e: Exception) {", "choices": [{"text": "\r\n        }\r\n    }\r\n\r\nsuspend fun <T, V> V.ioWork(work: suspend (CoroutineScope.(V) -> T)): T? {\r\n        val value = this\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                work(value)\r\n            } catch (e: Exception) {\r\n                throw e\r\n            }\r\n        }\r\n    }\r\n\r\nsuspend fun <T, V> V.ioWorkSafe(work: suspend (CoroutineScope"}], "metadata": {"task_id": "QuickNovel/251", "ground_truth": "                logError(e)\r\n                null\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "suspend fun <T, V> V.ioWork(work: suspend (CoroutineScope.(V) -> T)): T {", "choices": [{"text": ")\n\n// This file was generated based on 'C:\\ProgramData\\Uno\\Packages\\UnoCore\\0.13.2\\Source\\Uno\\Collections\\$.uno'.\n// WARNING: Changes might be lost if you edit this file directly.\n\n#pragma once\n#include <Uno.Object.h>\nnamespace g{namespace Uno{struct Float2;}}\nnamespace g{namespace Uno{struct Float3;}}\nnamespace g{namespace Uno{struct Float4;}}\nnamespace g{namespace Uno{struct Float5;}}\nnamespace"}], "metadata": {"task_id": "QuickNovel/252", "ground_truth": "        val value = this\r\n        return withContext(Dispatchers.IO) {\r\n            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "suspend fun <T, V> V.mainWork(work: suspend (CoroutineScope.(V) -> T)): T {", "choices": [{"text": ")\n\n// This file was generated based on 'C:\\ProgramData\\Uno\\Packages\\UnoCore\\0.13.2\\Source\\Uno\\Collections\\$.uno'.\n// WARNING: Changes might be lost if you edit this file directly.\n\n#pragma once\n#include <Uno.Object.h>\nnamespace g{namespace Uno{struct Float2;}}\nnamespace g{namespace Uno{struct Float3;}}\nnamespace g{namespace Uno{struct Float4;}}\nnamespace g{namespace Uno{struct Float5;}}\nnamespace"}], "metadata": {"task_id": "QuickNovel/253", "ground_truth": "        val value = this\r\n        return withContext(Dispatchers.Main) {\r\n            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "fun runOnMainThread(work: (() -> Unit)) {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "QuickNovel/254", "ground_truth": "        val mainHandler = Handler(Looper.getMainLooper())\r\n        mainHandler.post {\r\n            work()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "import kotlin.collections.ArrayList\nimport java.util.concurrent.Executors\nimport java.util.concurrent.ExecutorService\nimport java.util.*\nfun <T, R> Iterable<T>.pmap(\r\n    numThreads: Int = maxOf(Runtime.getRuntime().availableProcessors() - 2, 1),\r\n    exec: ExecutorService = Executors.newFixedThreadPool(numThreads),\r\n    transform: (T) -> R,\r\n): List<R> {\r\n\r\n    // default size is just an inlined version of kotlin.collections.collectionSizeOrDefault\r\n    val defaultSize = if (this is Collection<*>) this.size else 10\r\n    val destination = Collections.synchronizedList(ArrayList<R>(defaultSize))\r\n\r\n    for (item in this) {\r\n        exec.submit { destination.add(transform(item)) }\r\n    }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/256", "ground_truth": "    exec.shutdown()\r\n    exec.awaitTermination(1, TimeUnit.DAYS)\r\n\r\n    return ArrayList<R>(destination)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\ParCollections.kt"}}
{"prompt": "import com.lagradost.quicknovel.R\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.content.Context\nimport android.app.Dialog\nfun Context.showBottomDialog(\r\n        items: List<String>,\r\n        selectedIndex: Int,\r\n        name: String,\r\n        showApply: Boolean,\r\n        dismissCallback: () -> Unit,\r\n        callback: (Int) -> Unit,\r\n    ) {\r\n        val builder =\r\n            BottomSheetDialog(this)\r\n        builder.setContentView(R.layout.bottom_selection_dialog)\r\n\r\n        builder.show()\r\n        showDialog(\r\n            builder,\r\n            items,\r\n            listOf(selectedIndex),\r\n            name,\r\n            showApply,", "choices": [{"text": "\r\n            dismissCallback,\r\n            callback,\r\n        )\r\n    }\r\n\r\n    val builder =\r\n        BottomSheetDialog(this)\r\n    builder.setContentView(R.layout.bottom_selection_dialog)\r\n\r\n    builder.show()\r\n    showDialog(\r\n        builder,\r\n        items,\r\n        listOf(selectedIndex),\r\n        name,\r\n        showApply,\r\n        dismissCallback,\r\n        callback,\r\n    )\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/264", "ground_truth": "            false,\r\n            { callback.invoke(it.first()) },\r\n            dismissCallback\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SingleSelectionHelper.kt"}}
{"prompt": "fun fromLanguageToTwoLetters(input: String): String? {\r\n        for (lang in languages) {\r\n            if (lang.languageName == input || lang.nativeName == input) {", "choices": [{"text": ") {\r\n                return lang.languageName;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/265", "ground_truth": "                return lang.ISO_639_1\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "fun fromTwoLettersToLanguage(input: String): String? {\r\n        if (input.length != 2) return null\r\n        val comparison = input.lowercase(Locale.ROOT)\r\n        for (lang in languages) {\r\n            if (lang.ISO_639_1 == comparison) {", "choices": [{"text": "\r\n                return lang\r\n            }\r\n        }\r\n        return null\r\n}\r\n\r\nconst languages = [\r\n    {\r\n        code: 'en',\r\n        name: 'English'\r\n    },\r\n    {\r\n        code: 'de',\r\n        name: 'German'\r\n    },\r\n    {\r\n        code: 'fr',\r\n        name: 'French'\r\n    },\r\n    {\r\n        code: 'it',\r\n        name: 'Italian'\r\n"}], "metadata": {"task_id": "QuickNovel/266", "ground_truth": "                return lang.languageName\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "fun fromLanguageToThreeLetters(input: String): String? {\r\n        for (lang in languages) {\r\n            if (lang.languageName == input || lang.nativeName == input) {", "choices": [{"text": ") {\r\n                return lang.languageName;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default fromLanguageToThreeLetters;\r\n"}], "metadata": {"task_id": "QuickNovel/267", "ground_truth": "                return lang.ISO_639_2_T\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "import com.lagradost.quicknovel.R\nimport androidx.core.text.HtmlCompat\nimport android.text.Spanned\nprivate fun getHtmlText(text: String): Spanned {\r\n        return try {\r\n            // I have no idea if this can throw any error, but I dont want to try\r\n            HtmlCompat.fromHtml(\r\n                text, HtmlCompat.FROM_HTML_MODE_LEGACY\r\n            )", "choices": [{"text": ", HtmlCompat.FROM_HTML_MODE_LEGACY\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static Spanned getHtmlText(String text) {\r\n        return getHtmlText(text);\r\n    }\r\n\r\n    public static Spanned getHtmlText(int resId) {\r\n        return getHtmlText(getString(resId));\r\n    }\r\n\r\n    public static Spanned getHtmlText(int resId, String text) {"}], "metadata": {"task_id": "QuickNovel/268", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            text.toSpanned()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.UIHelper.setImage\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.ui.UiImage\nimport androidx.annotation.DrawableRes\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun ImageView?.setImage(\r\n        url: String?,\r\n        headers: Map<String, String>? = null,\r\n        @DrawableRes\r\n        errorImageDrawable: Int? = null,\r\n        fadeIn: Boolean = true,\r\n        radius: Int = 0,\r\n        sample: Int = 3,\r\n        //colorCallback: ((Palette) -> Unit)? = null\r\n    ): Boolean {\r\n        if (url.isNullOrBlank()) return false\r\n        this.setImage(\r\n            UiImage.Image(url, headers, errorImageDrawable),\r\n            errorImageDrawable,\r\n            fadeIn,\r\n            radius,", "choices": [{"text": " sample\r\n        )\r\n        return true\r\n    }\r\nfun ImageView?.setImage(\r\n        url: String?,\r\n        headers: Map<String, String>? = null,\r\n        @DrawableRes\r\n        errorImageDrawable: Int? = null,\r\n        fadeIn: Boolean = true,\r\n        radius: Int = 0,\r\n        sample: Int = 3,\r\n        //colorCallback: ((Palette) -> Unit)? = null\r\n    ): Boolean {\r\n        if (url.isNullOrBlank()) return"}], "metadata": {"task_id": "QuickNovel/275", "ground_truth": "            sample,\r\n            //colorCallback\r\n        )\r\n        return true\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import java.io.File\nprivate fun getAllFonts(): Array<File> {\r\n        return try {\r\n            val path = \"/system/fonts\"\r\n            val file = File(path)\r\n            file.listFiles() ?: emptyArray()", "choices": [{"text": "\r\n            return file.listFiles();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return emptyArray();\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/276", "ground_truth": "        } catch (t: Throwable) {\r\n            logError(t)\r\n            emptyArray()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import android.view.View\nimport android.app.Activity\nfun Activity.fixPaddingStatusbar(v: View) {\r\n        v.setPadding(\r\n            v.paddingLeft,", "choices": [{"text": "\r\n            v.paddingTop,\r\n            v.paddingRight,\r\n            v.paddingBottom\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "QuickNovel/278", "ground_truth": "            v.paddingTop + getStatusBarHeight(),\r\n            v.paddingRight,\r\n            v.paddingBottom\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import kotlin.math.roundToInt\nimport com.lagradost.quicknovel.R\nimport androidx.core.graphics.alpha\nimport androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.graphics.Color\nimport android.content.Context\n @ColorInt\r\n    fun Context.getResourceColor(@AttrRes resource: Int, alphaFactor: Float = 1f): Int {\r\n        val typedArray = obtainStyledAttributes(intArrayOf(resource))\r\n        val color = typedArray.getColor(0, 0)\r\n        typedArray.recycle()\r\n\r\n        if (alphaFactor < 1f) {\r\n            val alpha = (color.alpha * alphaFactor).roundToInt()", "choices": [{"text": "\r\n            alpha = kotlin.math.roundToInt(alpha)\r\n            color.alpha = alpha\r\n        }\r\n\r\n        return color\r\n    }\r\n\r\n @ColorInt\r\n    fun Context.getResourcesColor(@AttrRes resource: Int, alphaFactor: Float = 1f): Int {\r\n        val typedArray = obtainStyledAttributes(intArrayOf(resource))\r\n        val color = typedArray.getColor(0, 0)\r\n        typedArray.recycle()\r\n\r\n        if (alphaFactor < 1f) {\r\n"}], "metadata": {"task_id": "QuickNovel/279", "ground_truth": "            return Color.argb(alpha, color.red, color.green, color.blue)\r\n        }\r\n\r\n        return color\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import com.lagradost.quicknovel.R\nimport androidx.appcompat.widget.PopupMenu\nimport androidx.annotation.MenuRes\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.view.Gravity\ninline fun View.popupMenu(\r\n        @MenuRes menuRes: Int,\r\n        noinline initMenu: (Menu.() -> Unit)? = null,\r\n        noinline onMenuItemClick: MenuItem.() -> Unit,\r\n    ): PopupMenu {\r\n        val popup = PopupMenu(context, this, Gravity.NO_GRAVITY, R.attr.actionOverflowMenuStyle, 0)\r\n        popup.menuInflater.inflate(menuRes, popup.menu)\r\n\r\n        if (initMenu != null) {\r\n            popup.menu.initMenu()\r\n        }\r\n        popup.setOnMenuItemClickListener {\r\n            it.onMenuItemClick()\r\n            true", "choices": [{"text": "\r\n        }\r\n        return popup\r\n    }\r\ninline fun View.popupMenu(\r\n        @MenuRes int menuRes: Int,\r\n        noinline initMenu: (Menu.() -> Unit)? = null,\r\n        noinline onMenuItemClick: MenuItem.() -> Unit,\r\n    ): PopupMenu {\r\n        val popup = PopupMenu(context, this, Gravity.NO_GRAVITY, R.attr.actionOverflowMenuStyle, 0)\r\n        popup.menuInflater.inflate(menuRes,"}], "metadata": {"task_id": "QuickNovel/281", "ground_truth": "        }\r\n\r\n        popup.show()\r\n        return popup\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import androidx.fragment.app.Fragment\nfun Fragment.hideKeyboard() {\r\n        view.let {", "choices": [{"text": "Fragment.hideKeyboard();\r\n    }\r\n    Fragment.showKeyboard() {\r\n        view.let {\r\n            Fragment.showKeyboard();\r\n        }\r\n    }\r\n    Fragment.onAttach(context) {\r\n        view.let {\r\n            Fragment.onAttach(context);\r\n        }\r\n    }\r\n    Fragment.onDetach() {\r\n        view.let {\r\n            Fragment.onDetach();\r\n        }\r\n    }\r\n    Fragment.onResume() {\r\n        view.let {\r\n           "}], "metadata": {"task_id": "QuickNovel/282", "ground_truth": "            if (it != null) {\r\n                activity?.hideKeyboard(it)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onFocusSearchFailed(\r\n        focused: View,\r\n        focusDirection: Int,\r\n        recycler: RecyclerView.Recycler,\r\n        state: RecyclerView.State\r\n    ): View? {\r\n        return try {\r\n            val fromPos = getPosition(focused)\r\n            println(\"Search failed $fromPos\")\r\n            val nextPos = getNextViewPos(fromPos, focusDirection)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "QuickNovel/284", "ground_truth": "            findViewByPosition(nextPos)\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "import android.view.View\noverride fun onInterceptFocusSearch(focused: View, direction: Int): View? {\r\n        return try {\r\n            val fromPos = getPosition(focused)\r\n            val nextPos = getNextViewPos(fromPos, direction)", "choices": [{"text": "\r\n            if (nextPos == null) {\r\n                return null\r\n            }\r\n            return focused.findViewAt(nextPos)\r\n        } catch (e) {\r\n            return null\r\n        }\r\n    }\r\n\r\n    static getPosition(view: View): Int {\r\n        return view.getLeft() + view.getWidth() / 2\r\n    }\r\n\r\n    static getNextViewPos(fromPos: Int, direction: Int): Int {\r\n        return fromPos + direction\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "QuickNovel/286", "ground_truth": "            findViewByPosition(nextPos)\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "import android.view.View\nprivate fun getNextViewPos(fromPos: Int, direction: Int): Int {\r\n        val offset = calcOffsetToNextView(direction)\r\n\r\n        if (hitBorder(fromPos, offset)) {", "choices": [{"text": "\r\n                return fromPos + offset\r\n        } else {\r\n                return fromPos\r\n        }\r\n}\r\n\r\nfunction hitBorder(fromPos: Int, offset: Int) {\r\n        if (fromPos < 0) {\r\n                return false\r\n        }\r\n\r\n        if (offset < 0) {\r\n                return false\r\n        }\r\n\r\n        return true\r\n}\r\n\r\nfunction calcOffsetToNextView(direction: Int) {\r\n        switch (direction) {\r\n                case 1:\r\n"}], "metadata": {"task_id": "QuickNovel/287", "ground_truth": "            return fromPos\r\n        }\r\n\r\n        return fromPos + offset\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "import kotlin.math.abs\nprivate fun hitBorder(from: Int, offset: Int): Boolean {\r\n        val spanCount = spanCount\r\n\r\n        return if (abs(offset) == 1) {\r\n            val spanIndex = from % spanCount\r\n            val newSpanIndex = spanIndex + offset\r\n            newSpanIndex < 0 || newSpanIndex >= spanCount", "choices": [{"text": "\r\n        } else if (abs(offset) == 2) {\r\n            val spanIndex = from % spanCount\r\n            val newSpanIndex = spanIndex + offset\r\n            newSpanIndex < 0 || newSpanIndex >= spanCount\r\n        } else if (abs(offset) == 3) {\r\n            val spanIndex = from % spanCount\r\n            val newSpanIndex = spanIndex + offset\r\n            newSpanIndex < 0 || newSpanIndex >= spanCount\r\n        } else if (abs(offset) == 4) {\r\n            val spanIndex ="}], "metadata": {"task_id": "QuickNovel/288", "ground_truth": "        } else {\r\n            val newPos = from + offset\r\n            newPos in spanCount..-1\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\n@Override\r\npublic void onColorReady(int color) {", "choices": [{"text": ";\r\nimport com.poupa.vinylmusicplayer.R.drawable;\r\nimport com.poupa.vinylmusicplayer.R.id;\r\nimport com.poupa.vinylmusicplayer.R.layout;\r\nimport com.poupa.vinylmusicplayer.R.menu;\r\nimport com.poupa.vinylmusicplayer.R.menuitem;\r\nimport com.poupa.vinylmusicplayer.R.string;\r\nimport com.poupa.viny"}], "metadata": {"task_id": "VinylMusicPlayer/4", "ground_truth": "    if (usePalette)\r\n        setColors(color, holder);\r\n    else\r\n        setColors(getDefaultFooterColor(), holder);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\album\\AlbumAdapter.java"}}
{"prompt": "@Override\r\npublic void onColorReady(int color) {", "choices": [{"text": "\n\tpublic void onBackPressed() {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tsuper.onBackPressed();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\r\n\t\t// Inflate the menu; this adds items to the action bar if it is present.\r\n\t\tgetMenuInflater().inflate(R.menu.main, menu);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean onOptionsItemSelected("}], "metadata": {"task_id": "VinylMusicPlayer/12", "ground_truth": "    if (usePalette)\r\n        setColors(color, holder);\r\n    else\r\n        setColors(getAlbumArtistFooterColor(), holder);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\album\\HorizontalAlbumAdapter.java"}}
{"prompt": "import androidx.fragment.app.Fragment\n/**\r\n * Only the latest passed {@link AlbumCoverFragment.ColorReceiver} is guaranteed to receive a response\r\n */\r\npublic void receiveColor(AlbumCoverFragment.ColorReceiver colorReceiver, int position) {\r\n    AlbumCoverFragment fragment = (AlbumCoverFragment) getFragment(position);\r\n    if (fragment != null) {\r\n        currentColorReceiver = null;\r\n        currentColorReceiverPosition = -1;\r\n        fragment.receiveColor(colorReceiver, position);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/14", "ground_truth": "    } else {\r\n        currentColorReceiver = colorReceiver;\r\n        currentColorReceiverPosition = position;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "private static final String SONG_ARG = \"song\";\nprivate Song song;\nImageView albumCover;\n @Override", "choices": [{"text": ";\n\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_song);\n song = (Song) getIntent().getSerializableExtra(SONG_ARG);\n albumCover = (ImageView) findViewById(R.id.album_cover);\n }\n\n @Override\n public boolean onCreateOptionsMenu(Menu menu) {\n getMenuInflater().inflate(R.menu.menu_song, menu);\n return true;\n }\n\n @Override\n public boolean on"}], "metadata": {"task_id": "VinylMusicPlayer/19", "ground_truth": "public void onDestroyView() {\r\n    super.onDestroyView();\r\n    colorReceiver = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.glide.VinylGlideExtension\nimport com.poupa.vinylmusicplayer.glide.VinylColoredTarget\nimport com.poupa.vinylmusicplayer.glide.GlideApp\nprivate void loadAlbumCover() {\r\n    GlideApp.with(this).asBitmapPalette().load(VinylGlideExtension.getSongModel(song)).transition(VinylGlideExtension.getDefaultTransition()).songOptions(song).into(new VinylColoredTarget(albumCover) {\r\n\r\n        @Override", "choices": [{"text": "\r\n        protected void onDraw(Canvas canvas) {\r\n            super.onDraw(canvas);\r\n            canvas.drawBitmap(albumCover, 0, 0, null);\r\n        }\r\n    });\r\n}\r\nprivate void loadSong() {\r\n    GlideApp.with(this).asBitmapPalette().load(VinylGlideExtension.getSongModel(song)).transition(VinylGlideExtension.getDefaultTransition()).songOptions(song).into(new VinylColoredTarget(song) {\r"}], "metadata": {"task_id": "VinylMusicPlayer/20", "ground_truth": "        public void onColorReady(int color) {\r\n            setColor(color);\r\n        }\r\n    });\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "private boolean isColorReady;\nprivate int color;\nprivate ColorReceiver colorReceiver;\n void setColor(int color) {\r\n    this.color = color;\r\n    isColorReady = true;", "choices": [{"text": ";\r\n }\r\n void setColorReceiver(ColorReceiver colorReceiver) {\r\n    this.colorReceiver = colorReceiver;\r\n    isColorReady = true;\r\n }\r\n boolean isColorReady() {\r\n    return isColorReady;\r\n }\r\n int getColor() {\r\n    return color;\r\n }\r\n void setColorReceiver(ColorReceiver colorReceiver) {\r\n    this.colorReceiver = colorReceiver;\r\n    isColorReady = true;\r\n }\r\n ColorReceiver getColorReceiver() {\r\n    return colorReceiver;\r\n }\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/21", "ground_truth": "    if (colorReceiver != null) {\r\n        colorReceiver.onColorReady(color, request);\r\n        colorReceiver = null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "public void receiveColor(ColorReceiver colorReceiver, int request) {\r\n    if (isColorReady) {\r\n        colorReceiver.onColorReady(color, request);", "choices": [{"text": ";\r\n    } else {\r\n        isColorReady = true;\r\n        colorReceiver.onColorReady(color, request);\r\n    }\r\n}\r\n\r\npublic void receiveColor(ColorReceiver colorReceiver, int request) {\r\n    if (isColorReady) {\r\n        colorReceiver.onColorReady(color, request);\r\n    } else {\r\n        isColorReady = true;\r\n        colorReceiver.onColorReady(color, request);\r\n    }\r\n}\r\n\r\npublic void receiveColor(ColorReceiver colorReceiver"}], "metadata": {"task_id": "VinylMusicPlayer/22", "ground_truth": "    } else {\r\n        this.colorReceiver = colorReceiver;\r\n        this.request = request;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\n@Override\r\npublic void onColorReady(int color) {", "choices": [{"text": ";\r\nimport com.poupa.vinylmusicplayer.R.drawable;\r\nimport com.poupa.vinylmusicplayer.R.id;\r\nimport com.poupa.vinylmusicplayer.R.layout;\r\nimport com.poupa.vinylmusicplayer.R.menu;\r\nimport com.poupa.vinylmusicplayer.R.menuitem;\r\nimport com.poupa.vinylmusicplayer.R.string;\r\nimport com.poupa.viny"}], "metadata": {"task_id": "VinylMusicPlayer/27", "ground_truth": "    if (usePalette)\r\n        setColors(color, holder);\r\n    else\r\n        setColors(getDefaultFooterColor(), holder);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\artist\\ArtistAdapter.java"}}
{"prompt": "protected boolean toggleChecked(final int position) {\r\n    final I identifier = getIdentifier(position);\r\n    if (identifier == null) {\r\n        return false;\r\n    }\r\n    if (checked.containsKey(position)) {\r\n        checked.remove(position);\r\n    } else {\r\n        checked.put(position, identifier);", "choices": [{"text": ".put(position, identifier);\r\n    }\r\n    return true;\r\n}\r\n\r\nprotected boolean toggleUnchecked(final int position) {\r\n    final I identifier = getIdentifier(position);\r\n    if (identifier == null) {\r\n        return false;\r\n    }\r\n    if (unchecked.containsKey(position)) {\r\n        unchecked.remove(position);\r\n    } else {\r\n        unchecked.put(position, identifier);\r\n    }\r\n    return true;\r\n}\r\n\r\nprotected I getIdentifier(final int"}], "metadata": {"task_id": "VinylMusicPlayer/32", "ground_truth": "    }\r\n    notifyItemChanged(position);\r\n    updateCab();\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\base\\AbsMultiSelectAdapter.java"}}
{"prompt": "private void checkAll() {\r\n    checked.clear();\r\n    final int itemCount = getItemCount();\r\n    for (int i = 0; i < itemCount; i++) {\r\n        final I identifier = getIdentifier(i);\r\n        if (identifier != null) {\r\n            checked.put(i, identifier);", "choices": [{"text": "\r\n        }\r\n    }\r\n}\r\n\r\n@Override\r\npublic boolean equals(final Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass()!= obj.getClass()) {\r\n        return false;\r\n    }\r\n    final CheckAll other = (CheckAll) obj;\r\n    if (!checked.equals(other.checked)) {\r\n        return false;\r"}], "metadata": {"task_id": "VinylMusicPlayer/33", "ground_truth": "        }\r\n    }\r\n    notifyDataSetChanged();\r\n    updateCab();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\base\\AbsMultiSelectAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onCabSelection(@NonNull final MenuItem menuItem) {\r\n    if (menuItem.getItemId() == R.id.action_multi_select_adapter_check_all) {\r\n        checkAll();\r\n    } else {\r\n        onMultipleItemAction(menuItem, checked);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/36", "ground_truth": "        AttachedCabKt.destroy(cab);\r\n        clearChecked();\r\n    }\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\base\\AbsMultiSelectAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.CategoryInfo\nprivate boolean isLastCheckedCategory(CategoryInfo categoryInfo) {\r\n    if (categoryInfo.visible) {\r\n        for (CategoryInfo c : categoryInfos) {\r\n            if (c != categoryInfo && c.visible)", "choices": [{"text": " {\r\n                return true;\r\n            }\r\n        }\r\n    } else {\r\n        for (CategoryInfo c : categoryInfos) {\r\n            if (c!= categoryInfo &&!c.visible) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/42", "ground_truth": "                return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\CategoryInfoAdapter.java"}}
{"prompt": "import java.util.List\nimport androidx.annotation.NonNull\n@Override\r\npublic int getItemPosition(@NonNull Object fragment) {\r\n    for (int i = 0, size = mHolderList.size(); i < size; i++) {\r\n        Holder holder = mHolderList.get(i);\r\n        if (holder.mClassName.equals(fragment.getClass().getName())) {", "choices": [{"text": "\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\n@Override\r\npublic long getItemId(@NonNull Object fragment) {\r\n    for (int i = 0, size = mHolderList.size(); i < size; i++) {\r\n        Holder holder = mHolderList.get(i);\r\n        if (holder.mClassName.equals(fragment.getClass().getName())) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r"}], "metadata": {"task_id": "VinylMusicPlayer/48", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return POSITION_NONE;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\MusicLibraryPagerAdapter.java"}}
{"prompt": "@Override\r\nprotected void onPostExecute(String string) {\r\n    super.onPostExecute(string);", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onPreExecute() {\r\n    super.onPreExecute();\r\n}\r\n\r\n@Override\r\nprotected void onProgressUpdate(Integer... values) {\r\n    super.onProgressUpdate(values);\r\n}\r\n\r\n@Override\r\nprotected void onPostExecute(Integer... values) {\r\n    super.onPostExecute(values);\r\n}\r\n\r\n@Override\r\nprotected void onCancelled() {\r\n    super.onCancelled();\r\n}\r\n\r\n@Override\r\nprotected"}], "metadata": {"task_id": "VinylMusicPlayer/57", "ground_truth": "    Context context = getContext();\r\n    if (context != null) {\r\n        SafeToast.show(context, string);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\PlaylistAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.model.Album\nimport android.view.View\n@Override\r\npublic int getItemViewType(int position) {\r\n    if (dataSet.get(position) instanceof Album)\r\n        return ALBUM;\r\n    if (dataSet.get(position) instanceof Artist)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/62", "ground_truth": "        return ARTIST;\r\n    if (dataSet.get(position) instanceof Song)\r\n        return SONG;\r\n    return HEADER;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\SearchAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.core.util.Pair\nimport android.view.View\nimport android.view.MenuItem\nprotected boolean onSongMenuItemClick(MenuItem item, long albumId) {\r\n    if ((image != null) && (image.getVisibility() == View.VISIBLE) && (item.getItemId() == R.id.action_go_to_album)) {\r\n        Pair[] albumPairs = new Pair[] { Pair.create(image, activity.getResources().getString(R.string.transition_album_art)) };", "choices": [{"text": "\r\n        for (int i = 0; i < albumPairs.length; i++) {\r\n            if (albumId == albumPairs[i].first) {\r\n                image = albumPairs[i].second;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/64", "ground_truth": "        NavigationUtil.goToAlbum(activity, albumId, albumPairs);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\SearchAdapter.java"}}
{"prompt": "@Override\r\npublic long getItemId(final int position) {\r\n    // Shifting by -1, since the very first item is the OFFSET_ITEM\r\n    final int adjustedPosition = position - 1;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/66", "ground_truth": "    if (adjustedPosition < 0) {\r\n        return OFFSET_ITEM_ID;\r\n    }\r\n    return super.getItemId(adjustedPosition);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\AbsOffsetSongAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\n@Nullable\r\n@Override\r\nprotected Song getIdentifier(int position) {\r\n    // Shifting by -1, since the very first item is the OFFSET_ITEM\r\n    final int adjustedPosition = position - 1;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/67", "ground_truth": "    if (adjustedPosition < 0) {\r\n        return null;\r\n    }\r\n    return super.getIdentifier(adjustedPosition);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\AbsOffsetSongAdapter.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\n@Override\r\npublic String getSectionName(int position) {", "choices": [{"text": "\r\n{\r\n\tswitch (position) {\r\n\t\tcase 0:\r\n\t\t\treturn getString(R.string.title_section1);\r\n\t\tcase 1:\r\n\t\t\treturn getString(R.string.title_section2);\r\n\t\tcase 2:\r\n\t\t\treturn getString(R.string.title_section3);\r\n\t\tcase 3:\r\n\t\t\treturn getString(R.string.title_section4);\r\n\t\tcase 4:\r\n\t\t\treturn getString(R.string.title_section5);\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/69", "ground_truth": "    position--;\r\n    if (position < 0)\r\n        return \"\";\r\n    return super.getSectionName(position);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\AbsOffsetSongAdapter.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\npublic void swapDataSet(ArrayList<Song> dataSet) {", "choices": [{"text": "\n\tfor (int i = 0; i < dataSet.size(); i++) {\n\t\tSong song = dataSet.get(i);\n\t\tdataSet.set(i, song.getPrevious());\n\t\tdataSet.set(i, song.getNext());\n\t}\n}\npublic void swapDataSet(ArrayList<Song> dataSet) {\n\tfor (int i = 0; i < dataSet.size(); i++) {\n\t\tSong song = dataSet.get(i);\n\t\tdataSet.set(i, song.getPrevious());\n\t"}], "metadata": {"task_id": "VinylMusicPlayer/75", "ground_truth": "    this.dataSet = dataSet;\r\n    clear();\r\n    addAll(dataSet);\r\n    notifyDataSetChanged();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\ArtistSongAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PlayingSongDecorationUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.misc.queue.IndexedSong\nimport com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(@NonNull SongAdapter.ViewHolder holder, int position) {\r\n    super.onBindViewHolder(holder, position);\r\n    PlayingSongDecorationUtil.decorate(this, holder, MusicPlayerRemote.getIndexedSongAt(position), activity);\r\n    if (holder.imageText != null) {\r\n        holder.imageText.setText(String.valueOf(position - current));", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/86", "ground_truth": "    }\r\n    if (holder.getItemViewType() == HISTORY) {\r\n        setAlpha(holder);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\PlayingQueueAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.view.View\n@Override\r\npublic int getItemViewType(int position) {\r\n    if (position < current) {\r\n        return HISTORY;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/87", "ground_truth": "    } else if (position > current) {\r\n        return UP_NEXT;\r\n    }\r\n    return CURRENT;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\PlayingQueueAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport android.view.View\nprotected void setAlpha(SongAdapter.ViewHolder holder) {\r\n    final float alpha = 0.5f;\r\n    if (holder.image != null) {\r\n        holder.image.setAlpha(alpha);\r\n    }\r\n    if (holder.title != null) {\r\n        holder.title.setAlpha(alpha);\r\n    }\r\n    if (holder.text != null) {\r\n        holder.text.setAlpha(alpha);\r\n    }\r\n    if (holder.imageText != null) {\r\n        holder.imageText.setAlpha(alpha);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/90", "ground_truth": "    }\r\n    if (holder.paletteColorContainer != null) {\r\n        holder.paletteColorContainer.setAlpha(alpha);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\PlayingQueueAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.appcompat.app.AppCompatActivity\nimport android.view.View\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.ColorDrawable\nimport android.graphics.Color\nprivate static Integer getBackgroundColor(AppCompatActivity activity) {\r\n    // cardPlayerFragment\r\n    View view = activity.findViewById(R.id.color_background);\r\n    if (view == null) {\r\n        // flatPlayerFragment\r\n        view = activity.findViewById(R.id.player_status_bar);\r\n    }\r\n    Drawable background = view.getBackground();\r\n    if (background instanceof ColorDrawable) {", "choices": [{"text": "\r\n        return ((ColorDrawable) background).getColor();\r\n    }\r\n    return Color.TRANSPARENT;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/95", "ground_truth": "        return ((ColorDrawable) background).getColor();\r\n    } else {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\PlayingQueueAdapter.java"}}
{"prompt": "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (getItemViewType() == OFFSET_ITEM) {", "choices": [{"text": "\r\n        super.onClick(v);\r\n    }\r\n}\r\n@Override\r\npublic void onLongClick(View v) {\r\n    if (getItemViewType() == OFFSET_ITEM) {\r\n        super.onLongClick(v);\r\n    }\r\n}\r\n@Override\r\npublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n    if (getItemViewType() == OFFSET_ITEM) {\r\n        super.onItemClick(parent, view, position, id);"}], "metadata": {"task_id": "VinylMusicPlayer/97", "ground_truth": "        MusicPlayerRemote.openAndShuffleQueue(dataSet, true);\r\n        return;\r\n    }\r\n    super.onClick(v);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\ShuffleButtonSongAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.core.util.Pair\nimport android.view.View\nimport android.view.MenuItem\nprotected boolean onSongMenuItemClick(MenuItem item) {\r\n    if ((image != null) && (image.getVisibility() == View.VISIBLE) && (item.getItemId() == R.id.action_go_to_album)) {\r\n        Pair<View, String>[] albumPairs = new Pair[] { Pair.create(image, activity.getResources().getString(R.string.transition_album_art)) };", "choices": [{"text": ";\r\n        for (int i = 0; i < albumPairs.length; i++) {\r\n            image.startAnimation(albumPairs[i].first);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/105", "ground_truth": "        NavigationUtil.goToAlbum(activity, getSong().albumId, albumPairs);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\SongAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.view.View\n@Override\r\npublic void onClick(final View v) {\r\n    final int position = getAdapterPosition();\r\n    if (isPositionInRange(position)) {\r\n        if (isInQuickSelectMode()) {\r\n            toggleChecked(position);\r\n        } else {\r\n            if (callbacks != null) {", "choices": [{"text": " {\r\n                callbacks.onItemClick(position);\r\n            }\r\n        }\r\n    }\r\n}\r\n@Override\r\npublic void onLongClick(final View v) {\r\n    final int position = getAdapterPosition();\r\n    if (isPositionInRange(position)) {\r\n        if (isInQuickSelectMode()) {\r\n            toggleChecked(position);\r\n        } else {\r\n            if (callbacks!= null) {\r\n                callbacks.onItemLongClick(position);\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/112", "ground_truth": "                callbacks.onFileSelected(position, dataSet.get(position));\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\SongFileAdapter.java"}}
{"prompt": "public static synchronized AppWidgetBig getInstance() {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/120", "ground_truth": "    if (mInstance == null) {\r\n        mInstance = new AppWidgetBig();\r\n    }\r\n    return mInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\AppWidgetBig.java"}}
{"prompt": "public static synchronized AppWidgetCard getInstance() {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/122", "ground_truth": "    if (mInstance == null) {\r\n        mInstance = new AppWidgetCard();\r\n    }\r\n    return mInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\AppWidgetCard.java"}}
{"prompt": "public static synchronized AppWidgetClassic getInstance() {", "choices": [{"text": " {\n        if (instance == null) {\n            instance = new AppWidgetClassic();\n        }\n        return instance;\n    }\n\n    private AppWidgetClassic() {\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_widget_classic);\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        if (getSupportActionBar()!= null) {\n            getSupport"}], "metadata": {"task_id": "VinylMusicPlayer/124", "ground_truth": "    if (mInstance == null) {\r\n        mInstance = new AppWidgetClassic();\r\n    }\r\n    return mInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\AppWidgetClassic.java"}}
{"prompt": "public static synchronized AppWidgetSmall getInstance() {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/126", "ground_truth": "    if (mInstance == null) {\r\n        mInstance = new AppWidgetSmall();\r\n    }\r\n    return mInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\AppWidgetSmall.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.core.content.res.ResourcesCompat\nimport android.graphics.drawable.Drawable\nimport android.graphics.Bitmap\nimport android.content.res.Resources\nprotected Drawable getAlbumArtDrawable(final Resources resources, final Bitmap bitmap) {\r\n    Drawable image;\r\n    if (bitmap == null) {\r\n        image = ResourcesCompat.getDrawable(resources, R.drawable.default_album_art, null);", "choices": [{"text": ";\r\n    } else {\r\n        image = ResourcesCompat.getDrawable(resources, bitmap, null);\r\n    }\r\n    return image;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/133", "ground_truth": "    } else {\r\n        image = new BitmapDrawable(resources, bitmap);\r\n    }\r\n    return image;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\base\\BaseAppWidget.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.PlaylistsUtil\nimport com.poupa.vinylmusicplayer.model.Song\nprivate static boolean hasDuplicates(long playlistId, ArrayList<Song> songs) {\r\n    for (Song song : songs) {\r\n        if (PlaylistsUtil.doesPlaylistContain(playlistId, song.id)) {", "choices": [{"text": "\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\npublic static void main(String[] args) {\r\n    ArrayList<Song> songs = new ArrayList<Song>();\r\n    songs.add(new Song(1, \"Song 1\"));\r\n    songs.add(new Song(2, \"Song 2\"));\r\n    songs.add(new Song(3, \"Song 3\"));\r\n    songs.add(new Song(4, \""}], "metadata": {"task_id": "VinylMusicPlayer/142", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\AddToPlaylistDialog.java"}}
{"prompt": "import com.google.android.material.bottomsheet.BottomSheetBehavior\nimport android.view.View\nimport android.content.DialogInterface\nimport android.app.Dialog\n@Override\r\npublic void onShow(DialogInterface dialog) {\r\n    com.google.android.material.bottomsheet.BottomSheetDialog d = (com.google.android.material.bottomsheet.BottomSheetDialog) dialog;\r\n    bottomSheet = d.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n    BottomSheetBehavior behaviour = BottomSheetBehavior.from(bottomSheet);\r\n    behaviour.setState(BottomSheetBehavior.STATE_COLLAPSED);", "choices": [{"text": ";\r\n}\r\n@Override\r\npublic void onHide(DialogInterface dialog) {\r\n    com.google.android.material.bottomsheet.BottomSheetDialog d = (com.google.android.material.bottomsheet.BottomSheetDialog) dialog;\r\n    bottomSheet = d.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n    BottomSheetBehavior behaviour = BottomSheetBehavior.from(bottomSheet);\r\n    behaviour.setState(BottomSheetBehavior.STATE_NORMAL);\r\n}\r\n@Override\r"}], "metadata": {"task_id": "VinylMusicPlayer/148", "ground_truth": "    behaviour.setDraggable(false);\r\n    for (Runnable code : onBottomSheetCreated) {\r\n        code.run();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\BottomSheetDialog\\BottomSheetDialog.java"}}
{"prompt": "import com.google.android.material.bottomsheet.BottomSheetBehavior\npublic void expand() {\r\n    Runnable code = () -> {\r\n        BottomSheetBehavior behaviour = BottomSheetBehavior.from(bottomSheet);\r\n        if (behaviour.getState() == BottomSheetBehavior.STATE_EXPANDED)\r\n            return;\r\n        behaviour.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n    };", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/149", "ground_truth": "    if (bottomSheet != null)\r\n        code.run();\r\n    else\r\n        onBottomSheetCreated.add(code);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\BottomSheetDialog\\BottomSheetDialog.java"}}
{"prompt": "import com.google.android.material.bottomsheet.BottomSheetBehavior\npublic void collapse() {\r\n    Runnable code = () -> {\r\n        BottomSheetBehavior behaviour = BottomSheetBehavior.from(bottomSheet);\r\n        if (behaviour.getState() == BottomSheetBehavior.STATE_COLLAPSED)\r\n            return;\r\n        behaviour.setState(BottomSheetBehavior.STATE_COLLAPSED);\r\n    };", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/150", "ground_truth": "    if (bottomSheet != null)\r\n        code.run();\r\n    else\r\n        onBottomSheetCreated.add(code);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\BottomSheetDialog\\BottomSheetDialog.java"}}
{"prompt": "import androidx.annotation.UiThread\n@Override\r\n@UiThread", "choices": [{"text": "Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    ButterKnife.bind(this);\r\n}\r\n\r\n@UiThread\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n}\r\n\r\n@UiThread\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n}\r\n\r\n@UiThread\r\n@Override\r\npublic"}], "metadata": {"task_id": "VinylMusicPlayer/156", "ground_truth": "public ChangelogDialog build() {\r\n    super.build();\r\n    return new ChangelogDialog(this);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\ChangelogDialog.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n@NonNull\r\npublic static CreatePlaylistDialog create(@Nullable Song song) {", "choices": [{"text": ".model.Playlist;\nimport android.app.Dialog;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.DialogFragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android."}], "metadata": {"task_id": "VinylMusicPlayer/158", "ground_truth": "    ArrayList<Song> list = new ArrayList<>();\r\n    if (song != null)\r\n        list.add(song);\r\n    return create(list);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\CreatePlaylistDialog.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport android.net.Uri\nimport android.app.Dialog\n@Override\r\nprotected Void doInBackground(Uri... uris) {\r\n    try {\r\n        DeleteSongsDialogApi19 dialog = this.dialog.get();\r\n        if (dialog != null) {\r\n            dialog.deleteSongs(List.of(dialog.currentSong), List.of(uris[0]));\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/165", "ground_truth": "    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\helper\\DeleteSongsDialogApi19.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.SAFUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.fragment.app.FragmentActivity\nimport android.net.Uri\nimport android.app.Dialog\nimport android.app.Activity\n@Override\r\nprotected Void doInBackground(Uri... uris) {\r\n    try {\r\n        DeleteSongsDialogApi19 dialog = this.dialog.get();\r\n        FragmentActivity activity = this.activity.get();\r\n        if (dialog == null || activity == null) {\r\n            return null;\r\n        }\r\n        SAFUtil.saveTreeUri(activity, uris[0]);\r\n        dialog.deleteSongs(dialog.songsToRemove, null);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/166", "ground_truth": "    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\helper\\DeleteSongsDialogApi19.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.SAFUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport android.net.Uri\nimport android.app.Activity\n@Override\r\nprotected Void doInBackground(Uri... uris) {\r\n    try {\r\n        DeleteSongsDialogApi30 fragment = this.fragment.get();\r\n        FragmentActivity activity = this.activity.get();\r\n        if (fragment == null || activity == null) {\r\n            return null;\r\n        }\r\n        SAFUtil.saveTreeUri(activity, uris[0]);\r\n        fragment.deleteSongs(fragment.songsToRemove);", "choices": [{"text": "\r\n        return null;\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}\r\n@Override\r\nprotected void onPostExecute(Void result) {\r\n    super.onPostExecute(result);\r\n    if (this.fragment!= null) {\r\n        this.fragment.dismiss();\r\n    }\r\n    if (this.activity!= null) {\r\n        this.activity.dismiss();\r\n    }\r\n}\r\n@Override\r\nprotected void on"}], "metadata": {"task_id": "VinylMusicPlayer/170", "ground_truth": "    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\helper\\DeleteSongsDialogApi30.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/178", "ground_truth": "public Builder title(@NonNull final CharSequence title) {\r\n    super.title(title);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\MarkdownViewDialog.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/183", "ground_truth": "public void onDismiss(@NonNull DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    timerUpdater.cancel();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\SleepTimerDialog.java"}}
{"prompt": "import com.triggertrap.seekarc.SeekArc\nimport androidx.annotation.NonNull\n@Override\r\npublic void onProgressChanged(@NonNull SeekArc seekArc, int i, boolean b) {\r\n    if (i < 1) {\r\n        seekArc.setProgress(1);\r\n        return;\r\n    }", "choices": [{"text": ";\r\n    seekArc.setProgress(i);\r\n}\r\n\r\n@Override\r\npublic void onStartTrackingTouch(@NonNull SeekArc seekArc) {\r\n    seekArc.setProgress(1);\r\n}\r\n\r\n@Override\r\npublic void onStopTrackingTouch(@NonNull SeekArc seekArc) {\r\n    seekArc.setProgress(1);\r\n}\r\n\r\n@Override\r\npublic void onStartTrackingDrag(@NonNull SeekArc seekArc) {\r\n    seekArc.setProgress(1);\r\n}\r\n\r\n@"}], "metadata": {"task_id": "VinylMusicPlayer/185", "ground_truth": "    seekArcProgress = i;\r\n    if (!changingText.get()) {\r\n        updateTimeDisplayTime();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\SleepTimerDialog.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n@NonNull\r\npublic static SongDetailDialog create(@NonNull Song song) {\r\n    SongDetailDialog dialog = new SongDetailDialog();", "choices": [{"text": "(song);\r\n    dialog.show();\r\n    return dialog;\r\n}\r\n\r\npublic static class SongDetailDialog extends Dialog {\r\n\r\n    private Song song;\r\n\r\n    public SongDetailDialog(@NonNull Song song) {\r\n        this.song = song;\r\n    }\r\n\r\n    @NonNull\r\n    public Song getSong() {\r\n        return song;\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super."}], "metadata": {"task_id": "VinylMusicPlayer/188", "ground_truth": "    Bundle args = new Bundle();\r\n    args.putParcelable(\"song\", song);\r\n    dialog.setArguments(args);\r\n    return dialog;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\SongDetailDialog.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.StringRes\nimport androidx.annotation.NonNull\nimport android.text.Html\nHtmlBuilder appendLine(@StringRes int labelStringId, @NonNull final String... texts) {\r\n    append(labelStringId).append(\": \").append(\"<b>\");", "choices": [{"text": ".append(texts[0]).append(\"</b>\");\r\n    for (int i = 1; i < texts.length; i++) {\r\n        append(texts[i]);\r\n    }\r\n    return this;\r\n}\r\n\r\nHtmlBuilder appendLine(@StringRes int labelStringId, @NonNull final String... texts) {\r\n    return appendLine(labelStringId, texts[0], texts[1]);\r\n}\r\n\r\nHtmlBuilder appendLine(@StringRes int labelStringId, @NonNull final String... texts) {\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/191", "ground_truth": "    for (String text : texts) {\r\n        append(text);\r\n    }\r\n    return append(\"</b>\").append(\"<br/>\");\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\SongDetailDialog.java"}}
{"prompt": "import android.database.sqlite.SQLiteDatabase\nsynchronized void clear() {\r\n    try (final SQLiteDatabase db = getWritableDatabase()) {", "choices": [{"text": " {\r\n        if (db!= null) {\r\n            db.deleteAll();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/194", "ground_truth": "        db.delete(SongColumns.NAME, null, null);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\DB.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\n@NonNull\r\npublic Song getSongByPath(@NonNull final String path) {\r\n    synchronized (cache) {\r\n        Song matchingSong = Song.EMPTY_SONG;\r\n        for (Song song : cache.songsById.values()) {\r\n            if (song.data.equals(path)) {\r\n                matchingSong = song;\r\n                break;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/200", "ground_truth": "            }\r\n        }\r\n        return matchingSong;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.List\nimport java.util.Comparator\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic ArrayList<Song> getAllSongs(@Nullable Comparator<Song> sortOrder) {\r\n    synchronized (cache) {\r\n        // Make a copy here, to avoid error while the caller is iterating on the result\r\n        ArrayList<Song> copy = new ArrayList<>(cache.songsById.values());\r\n        // Perform sort inside the critical section, to avoid data race\r\n        // (artist or album being modified while sorting)\r\n        if (sortOrder != null) {", "choices": [{"text": "\r\n            copy.sort(sortOrder);\r\n        }\r\n        return copy;\r\n    }\r\n}\r\n\r\n@NonNull\r\npublic Song getSongById(@NonNull String id) {\r\n    synchronized (cache) {\r\n        return cache.songsById.get(id);\r\n    }\r\n}\r\n\r\n@NonNull\r\npublic Song addSong(@NonNull Song song) {\r\n    synchronized (cache) {\r\n        cache.songsById.put(song.getId(), song);\r\n        return song"}], "metadata": {"task_id": "VinylMusicPlayer/201", "ground_truth": "            Collections.sort(copy, sortOrder);\r\n        }\r\n        return copy;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import androidx.annotation.Nullable\n@Nullable", "choices": [{"text": "import android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.Toolbar;"}], "metadata": {"task_id": "VinylMusicPlayer/203", "ground_truth": "public Artist getArtist(long artistId) {\r\n    synchronized (cache) {\r\n        return cache.artistsById.get(artistId);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic void removeSongByPath(@NonNull String... paths) {\r\n    synchronized (cache) {\r\n        ArrayList<Long> matchingSongIds = new ArrayList<>();\r\n        for (String path : paths) {\r\n            for (Song song : cache.songsById.values()) {\r\n                if (song.data.equals(path)) {\r\n                    matchingSongIds.add(song.id);\r\n                    break;\r\n                }", "choices": [{"text": ";\r\n            }\r\n        }\r\n        for (Long id : matchingSongIds) {\r\n            cache.songsById.remove(id);\r\n        }\r\n    }\r\n}\r\n\r\npublic void removeSongsByPath(@NonNull String... paths) {\r\n    synchronized (cache) {\r\n        ArrayList<Long> matchingSongIds = new ArrayList<>();\r\n        for (String path : paths) {\r\n            for (Song song : cache.songsById.values()) {\r\n                if (song.data.equals"}], "metadata": {"task_id": "VinylMusicPlayer/212", "ground_truth": "            }\r\n        }\r\n        removeSongsById(matchingSongIds);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\nprivate void removeSongsById(@NonNull final Collection<Long> songIds) {\r\n    if (songIds.isEmpty())\r\n        return;\r\n    for (final long songId : songIds) {", "choices": [{"text": "\r\n        final Song song = Song.findById(songId);\r\n        if (song!= null) {\r\n            song.delete();\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/213", "ground_truth": "        cache.removeSongById(songId);\r\n        database.removeSongById(songId);\r\n    }\r\n    notifyDiscographyChanged();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\nprivate void fetchAllSongs() {\r\n    setCacheState(MemCache.ConsistencyState.REFRESHING);\r\n    Collection<Song> songs = database.fetchAllSongs();", "choices": [{"text": "(Song.class);\r\n    setCacheState(MemCache.ConsistencyState.REFRESHED);\r\n    setSongs(songs);\r\n}\r\nprivate void updateSong(Song song) {\r\n    setCacheState(MemCache.ConsistencyState.REFRESHING);\r\n    database.updateSong(song);\r\n    setCacheState(MemCache.ConsistencyState.REFRESHED);\r\n}\r\nprivate void deleteSong(Song song) {\r\n    setCacheState(MemCache.ConsistencyState.REFRESHING);\r\n    database."}], "metadata": {"task_id": "VinylMusicPlayer/215", "ground_truth": "    for (Song song : songs) {\r\n        addSong(song, true);\r\n    }\r\n    setCacheState(MemCache.ConsistencyState.OK);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\nprivate static ArrayList<Song> getSongs(@Nullable final Cursor cursor) {\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        do {", "choices": [{"text": "\r\n            Song song = new Song();\r\n            song.setId(cursor.getInt(cursor.getColumnIndex(\"id\")));\r\n            song.setTitle(cursor.getString(cursor.getColumnIndex(\"title\")));\r\n            song.setArtist(cursor.getString(cursor.getColumnIndex(\"artist\")));\r\n            song.setAlbum(cursor.getString(cursor.getColumnIndex(\"album\")));\r\n            song.setYear(cursor.getInt(cursor.getColumnIndex(\"year\")));\r\n            song.set"}], "metadata": {"task_id": "VinylMusicPlayer/217", "ground_truth": "            songs.add(getSongFromCursorImpl(cursor));\r\n        } while (cursor.moveToNext());\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\MediaStoreBridge.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.provider.MediaStore\nimport android.database.Cursor\nimport android.content.Context\n@Nullable\r\nprivate static Cursor makeSongCursor(@NonNull final Context context) {\r\n    try {\r\n        return context.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, BASE_PROJECTION, BASE_SELECTION, null, PreferenceUtil.getInstance().getSongSortOrder());", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/218", "ground_truth": "    } catch (SecurityException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\MediaStoreBridge.java"}}
{"prompt": "ConsistencyState consistencyState = ConsistencyState.UNINITIALIZED;\nfinal Map<String, Genre> genresByName = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\nfinal Map<String, Artist> artistsByName = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n synchronized void clear() {\r\n    songsById.clear();\r\n    artistsByName.clear();\r\n    artistsById.clear();", "choices": [{"text": ".clear();\r\n    genresByName.clear();\r\n    genresById.clear();\r\n    songsByName.clear();\r\n    songsById.clear();\r\n    songsById.clear();\r\n    songsByName.clear();\r\n    songsById.clear();\r\n    songsByName.clear();\r\n    songsById.clear();\r\n    songsByName.clear();\r\n    songsById.clear();\r\n    songsByName.clear();\r\n    songsById.clear();\r\n    songsByName.clear"}], "metadata": {"task_id": "VinylMusicPlayer/219", "ground_truth": "    albumsByAlbumIdAndArtistId.clear();\r\n    albumsByName.clear();\r\n    genresByName.clear();\r\n    songsByGenreId.clear();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\MemCache.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Genre\nimport androidx.annotation.NonNull\nprivate synchronized void addSongToGenreAndUpdateCount(@NonNull final Song song, @NonNull final Genre genre) {\r\n    ArrayList<Song> songs = songsByGenreId.get(genre.id);", "choices": [{"text": ".get(song.getGenreId());\r\n    if (songs == null) {\r\n        songs = new ArrayList<>();\r\n        songs.add(song);\r\n        songsByGenreId.put(genre.id, songs);\r\n    } else {\r\n        songs.add(song);\r\n        songsByGenreId.put(genre.id, songs);\r\n    }\r\n    songs.add(song);\r\n    songs.add(song);\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/223", "ground_truth": "    if (songs != null) {\r\n        songs.add(song);\r\n        genre.songCount = songs.size();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\MemCache.java"}}
{"prompt": "import com.google.android.material.snackbar.Snackbar\nimport com.google.android.material.snackbar.BaseTransientBottomBar\nimport androidx.annotation.NonNull\nvoid showProgress(@NonNull final CharSequence text) {\r\n    if (progressBar == null) {\r\n        progressBar = Snackbar.make(viewContainer, \"\", BaseTransientBottomBar.LENGTH_LONG);\r\n    }\r\n    progressBar.setText(buildMessageWithIcon(text, progressBar));", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/228", "ground_truth": "    if (!progressBar.isShownOrQueued()) {\r\n        adjustPosition(progressBar);\r\n        progressBar.show();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\SnackbarUtil.java"}}
{"prompt": "import androidx.annotation.Nullable\nprivate void onTermination(@Nullable final Progress value) {\r\n    discography.setCacheState(MemCache.ConsistencyState.OK);\r\n    if (isUIFeedbackNeeded()) {\r\n        if (value == null || value.isEmpty()) {\r\n            snackbar.dismiss();", "choices": [{"text": ".dismiss();\r\n        } else {\r\n            snackbar.show();\r\n        }\r\n    } else {\r\n        snackbar.dismiss();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/234", "ground_truth": "        } else {\r\n            snackbar.showProgress(value.buildInfoString(context));\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\SyncWithMediaStoreAsyncTask.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.NonNull\n@NonNull\r\nstatic List<String> splitIfNeeded(@NonNull final List<String> names) {\r\n    if (names.isEmpty()) {\r\n        return new ArrayList<>(0);\r\n    }\r\n    // If the argument has multiple elements, or empty, dont split further", "choices": [{"text": ".\r\n    final List<String> result = new ArrayList<>(names.size());\r\n    for (final String name : names) {\r\n        if (name.isEmpty()) {\r\n            continue;\r\n        }\r\n        result.add(name);\r\n    }\r\n    return result;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/236", "ground_truth": "    if (names.size() > 1) {\r\n        return names;\r\n    }\r\n    return split(names.get(0));\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\tagging\\MultiValuesTagUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.text.TextUtils\n@NonNull\r\nprivate static List<String> splitImpl(@Nullable final String names, @NonNull final String separator) {\r\n    final List<String> result = new ArrayList<>();\r\n    if (!TextUtils.isEmpty(names)) {\r\n        final String[] namesSplit = names.split(separator);\r\n        for (final String name : namesSplit) {", "choices": [{"text": "\r\n            result.add(name);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/237", "ground_truth": "            result.add(name.trim());\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\tagging\\MultiValuesTagUtil.java"}}
{"prompt": "private static int b2le32(byte[] b) {\r\n    int r = 0;", "choices": [{"text": "\r\n    for (int i = 0; i < b.length; i++) {\r\n      r |= b[i] << (32 - i);\r\n    }\r\n    return r;\r\n  }\r\n\r\n  private static int b2le64(byte[] b) {\r\n    int r = 0;\r\n    for (int i = 0; i < b.length; i++) {\r\n      r |= b[i] << (64 - i);\r\n    }\r\n    return r;\r\n  }\r\n\r\n  private"}], "metadata": {"task_id": "VinylMusicPlayer/239", "ground_truth": "    for (int i = 0; i < 4; i++) {\r\n        r |= (b2u(b[i]) << (8 * i));\r\n    }\r\n    return r;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\tagging\\ReplayGainTagExtractor.java"}}
{"prompt": "private static float parseFloat(String s) {\r\n    float result = 0.0f;\r\n    try {\r\n        s = s.replaceAll(\"[^0-9.-]\", \"\");\r\n        result = Float.parseFloat(s);", "choices": [{"text": ";\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return result;\r\n}\r\n\r\nprivate static int parseInt(String s) {\r\n    int result = 0;\r\n    try {\r\n        s = s.replaceAll(\"[^0-9-]\", \"\");\r\n        result = Integer.parseInt(s);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return result;\r\n}\r\n\r\nprivate static"}], "metadata": {"task_id": "VinylMusicPlayer/240", "ground_truth": "    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\tagging\\ReplayGainTagExtractor.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/242", "ground_truth": "public void cleanup() {\r\n    if (streamFetcher != null) {\r\n        streamFetcher.cleanup();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\artistimage\\ArtistImageFetcher.java"}}
{"prompt": "@Override\r\npublic void cancel() {\r\n    isCancelled = true;\r\n    if (call != null) {\r\n        call.cancel();", "choices": [{"text": "\r\n        call.cancel();\r\n    }\r\n}\r\n\r\n@Override\r\npublic boolean isCancelled() {\r\n    return isCancelled;\r\n}\r\n\r\n@Override\r\npublic boolean isFinished() {\r\n    return call.isFinished();\r\n}\r\n\r\n@Override\r\npublic boolean isFailed() {\r\n    return call.isFailed();\r\n}\r\n\r\n@Override\r\npublic Object getResult() {\r\n    return call.getResult();\r\n}\r\n\r\n@Override\r\npublic String toString() {"}], "metadata": {"task_id": "VinylMusicPlayer/243", "ground_truth": "    }\r\n    if (streamFetcher != null) {\r\n        streamFetcher.cancel();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\artistimage\\ArtistImageFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.File\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.util.Util\nimport com.poupa.vinylmusicplayer.util.SAFUtil\nimport com.poupa.vinylmusicplayer.util.AutoCloseAudioFile\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.App\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.content.Context\n@Nullable\r\nInputStream loadCoverFromAudioTags(@NonNull final Song song) {\r\n    try (final AutoCloseAudioFile audio = SAFUtil.loadReadOnlyAudioFile(App.getStaticContext(), song)) {\r\n        if (audio == null) {\r\n            return null;\r\n        }\r\n        stream = loadCoverFromAudioTags(audio.get());\r\n        return stream;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/244", "ground_truth": "    } catch (final Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.File\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.util.Util\nimport com.poupa.vinylmusicplayer.util.SAFUtil\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nInputStream loadCoverFromAudioTags(@NonNull final File file) {\r\n    try {\r\n        final AudioFile audio = SAFUtil.loadAudioFile(file);\r\n        if (audio == null) {\r\n            return null;\r\n        }\r\n        stream = loadCoverFromAudioTags(audio);\r\n        return stream;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/245", "ground_truth": "    } catch (final Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.provider.MediaStore\nimport android.os.Build\n@Nullable\r\nInputStream loadCoverFromMediaStore(@NonNull final Song song) {\r\n    try {\r\n        final long albumId = song.albumId;\r\n        stream = (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) ? loadCoverFromMediaStoreApi29(albumId) : loadCoverFromMediaStoreApi19(albumId);\r\n        return stream;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/247", "ground_truth": "    } catch (final Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.util.List\nimport java.io.InputStream\nimport java.io.File\nimport com.poupa.vinylmusicplayer.util.Util\nimport com.poupa.vinylmusicplayer.util.FileUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.provider.MediaStore\n@Nullable\r\nInputStream loadCoverFromMediaStore(@NonNull final File file) {\r\n    final List<Song> matchingSongs = FileUtil.matchFilesWithMediaStore(List.of(file));\r\n    // non unique, abandon\r\n    if (matchingSongs.size() != 1) {\r\n        return null;\r\n    }\r\n    final Song song = matchingSongs.get(0);\r\n    // not found, abandon\r\n    if (song.id == Song.EMPTY_SONG.id) {", "choices": [{"text": "\r\n        return null;\r\n    }\r\n    return Util.loadSongCover(song);\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/248", "ground_truth": "        return null;\r\n    }\r\n    stream = loadCoverFromMediaStore(song);\r\n    return stream;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.FileInputStream\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nInputStream loadCoverFromFolderImage(@NonNull final File file) {\r\n    // Look for album art in external files\r\n    try {\r\n        final File parent = file.getParentFile();\r\n        for (final String fallback : FOLDER_IMAGE_FALLBACKS) {\r\n            final File cover = new File(parent, fallback);\r\n            if (cover.exists()) {\r\n                stream = new FileInputStream(cover);\r\n                return stream;\r\n            }", "choices": [{"text": " }\r\n        }\r\n    } catch (final Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/250", "ground_truth": "        }\r\n    } catch (final FileNotFoundException ignored) {\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.ByteArrayInputStream\n@Override\r\npublic void cleanup() {\r\n    // already cleaned up in loadData and ByteArrayInputStream will be GC'd\r\n    if (stream != null) {\r\n        try {\r\n            stream.close();", "choices": [{"text": "\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    stream = null;\r\n}\r\n\r\n@Override\r\npublic InputStream loadData() {\r\n    if (stream == null) {\r\n        try {\r\n            stream = new ByteArrayInputStream(new byte[0]);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return stream;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/251", "ground_truth": "        } catch (final IOException ignore) {\r\n            // can't do much about it\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.File\nimport androidx.annotation.Nullable\n@Override\r\npublic boolean equals(@Nullable Object object) {\r\n    if (object instanceof FileCover) {", "choices": [{"text": " {\r\n        FileCover fileCover = (FileCover) object;\r\n        return fileCover.file.equals(this.file);\r\n    }\r\n    return false;\r\n}\r\n@Override\r\npublic int hashCode() {\r\n    return file.hashCode();\r\n}\r\n@Override\r\npublic String toString() {\r\n    return file.toString();\r\n}\r\npublic class FileCover {\r\n    private File file;\r\n    public FileCover(File file) {\r\n        this.file = file;\r\n    }\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/252", "ground_truth": "        FileCover other = (FileCover) object;\r\n        return file.equals(other.file);\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\FileCover.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\n@Override\r\npublic boolean equals(@Nullable Object object) {\r\n    if (object instanceof SongCover) {", "choices": [{"text": " {\r\n        return ((SongCover) object).getSong().equals(((SongCover) object).getSong());\r\n    }\r\n    return false;\r\n}\r\n\r\n@Override\r\npublic int hashCode() {\r\n    return ((SongCover) object).getSong().hashCode();\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\n    return ((SongCover) object).getSong().toString();\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/253", "ground_truth": "        SongCover other = (SongCover) object;\r\n        return song.equals(other.song);\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\SongCover.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\nimport com.bumptech.glide.Priority\nimport androidx.annotation.NonNull\n@Override\r\npublic void loadData(@NonNull final Priority priority, @NonNull final DataCallback<? super InputStream> callback) {\r\n    try {\r\n        final InputStream input = loadData();\r\n        if (input == null) {\r\n            callback.onLoadFailed(new IOException(\"Cannot load cover for song\"));\r\n        } else {\r\n            callback.onDataReady(input);\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/254", "ground_truth": "    } catch (final Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n        callback.onLoadFailed(e);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\SongCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport androidx.annotation.Nullable\n@Nullable\r\npublic InputStream loadData() {\r\n    InputStream input = loadCoverFromAudioTags(model.song);\r\n    if (input == null) {\r\n        input = loadCoverFromMediaStore(model.song);\r\n    }", "choices": [{"text": "(model.song);\r\n    }\r\n    return input;\r\n}\r\n\r\nprivate InputStream loadCoverFromMediaStore(Song song) {\r\n    try {\r\n        return song.getCover();\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}\r\n\r\nprivate InputStream loadCoverFromAudioTags(Song song) {\r\n    try {\r\n        return song.getCover();\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}\r"}], "metadata": {"task_id": "VinylMusicPlayer/255", "ground_truth": "    if (input == null) {\r\n        input = loadCoverFromFolderImage(new File(model.song.data));\r\n    }\r\n    return input;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\SongCoverFetcher.java"}}
{"prompt": "/**\r\n * @param sampling The inSampleSize to use. Must be a power of 2, or 1 for no down sampling or 0 for auto detect sampling. Default is 0.\r\n * @return the same Builder\r\n */", "choices": [{"text": ".\r\n */\r\nexport default function (sampling) {\r\n  if (typeof sampling!== 'number') {\r\n    sampling = 0;\r\n  }\r\n\r\n  if (sampling < 1) {\r\n    sampling = 1;\r\n  }\r\n\r\n  if (sampling > 2) {\r\n    sampling = 2;\r\n  }\r\n\r\n  return {\r\n    sampling: sampling\r\n  };\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/258", "ground_truth": "public Builder sampling(int sampling) {\r\n    this.sampling = sampling;\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\BlurTransformation.java"}}
{"prompt": "import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool\nimport android.graphics.Bitmap\n/**\r\n * @param bitmapPool The BitmapPool to use.\r\n * @return the same Builder\r\n */", "choices": [{"text": "\r\n */\r\npublic class Builder {\r\n\r\n    private BitmapPool bitmapPool;\r\n\r\n    public Builder bitmapPool(BitmapPool bitmapPool) {\r\n        this.bitmapPool = bitmapPool;\r\n        return this;\r\n    }\r\n\r\n    public BitmapPool getBitmapPool() {\r\n        return bitmapPool;\r\n    }\r\n\r\n    public Builder bitmapPool(Bitmap bitmap) {\r\n        this.bitmapPool = new BitmapPool(bitmap);\r\n        return this;\r\n    }\r\n\r\n    public"}], "metadata": {"task_id": "VinylMusicPlayer/259", "ground_truth": "public Builder bitmapPool(BitmapPool bitmapPool) {\r\n    this.bitmapPool = bitmapPool;\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\BlurTransformation.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\npublic static int getItemViewtype(int position, int itemCount) {\r\n    if (position == 0) {\r\n        return TYPE_FIRST;", "choices": [{"text": "}\r\n    if (position == itemCount - 1) {\r\n        return TYPE_LAST;\r\n    }\r\n    return TYPE_DIVIDER;\r\n}\r\npublic static int getItemViewType(int position) {\r\n    return getItemViewtype(position, 1);\r\n}\r\npublic static int getItemViewType(int position, int itemCount) {\r\n    if (position == 0) {\r\n        return TYPE_FIRST;\r\n    }\r\n    if (position == itemCount - 1) {\r\n        return TYPE_LAST;\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/270", "ground_truth": "    } else if (position == itemCount - 1) {\r\n        return TYPE_LAST;\r\n    } else\r\n        return TYPE_MIDDLE;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\HorizontalAdapterHelper.java"}}
{"prompt": "@Override\r\nprotected void onPostExecute(String string) {\r\n    super.onPostExecute(string);", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onPreExecute() {\r\n    super.onPreExecute();\r\n}\r\n\r\n@Override\r\nprotected void onProgressUpdate(Integer... values) {\r\n    super.onProgressUpdate(values);\r\n}\r\n\r\n@Override\r\nprotected void onPostExecute(Integer... values) {\r\n    super.onPostExecute(values);\r\n}\r\n\r\n@Override\r\nprotected void onCancelled() {\r\n    super.onCancelled();\r\n}\r\n\r\n@Override\r\nprotected"}], "metadata": {"task_id": "VinylMusicPlayer/272", "ground_truth": "    Context context = getContext();\r\n    if (context != null) {\r\n        SafeToast.show(context, string);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\menu\\PlaylistMenuHelper.java"}}
{"prompt": "import androidx.annotation.Nullable\nimport android.content.ContextWrapper\nimport android.content.Context\npublic static void unbindFromService(@Nullable final ServiceToken token) {\r\n    if (token == null) {\r\n        return;\r\n    }\r\n    final ContextWrapper mContextWrapper = token.mWrappedContext;\r\n    final ServiceBinder mBinder = mConnectionMap.remove(mContextWrapper);\r\n    if (mBinder == null) {\r\n        return;\r\n    }\r\n    mContextWrapper.unbindService(mBinder);\r\n    if (mConnectionMap.isEmpty() && musicService != null) {\r\n        if (!musicService.isPlaying()) {", "choices": [{"text": "\r\n            musicService.stop();\r\n        }\r\n    }\r\n}\r\npublic static void bindToService(@Nullable final ServiceToken token) {\r\n    if (token == null) {\r\n        return;\r\n    }\r\n    final ContextWrapper mContextWrapper = token.mWrappedContext;\r\n    final ServiceBinder mBinder = mConnectionMap.get(mContextWrapper);\r\n    if (mBinder == null) {\r\n        mBinder = new ServiceBinder(mContextWrapper);\r\n        mConnectionMap.put(mContextWrapper, m"}], "metadata": {"task_id": "VinylMusicPlayer/274", "ground_truth": "            musicService.quit();\r\n        }\r\n        musicService = null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import android.content.ComponentName\nprivate final ServiceConnection mCallback;\npublic static MusicService musicService;\nprivate static final WeakHashMap<Context, ServiceBinder> mConnectionMap = new WeakHashMap<>();\n@Override\r\npublic void onServiceDisconnected(final ComponentName className) {", "choices": [{"text": ";\r\n@Override\r\npublic void onServiceConnected(final ComponentName className, final IBinder service) {\r\n\tmCallback = new ServiceConnection() {\r\n\t\t@Override\r\n\t\tpublic void onServiceConnected(final ComponentName className, final IBinder service) {\r\n\t\t\tmusicService = (MusicService) service;\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void onServiceDisconnected(final ComponentName className) {\r\n\t\t\tmusicService = null;\r\n\t\t}\r\n\t};\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/276", "ground_truth": "    if (mCallback != null) {\r\n        mCallback.onServiceDisconnected(className);\r\n    }\r\n    musicService = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\nprivate static boolean tryToHandleOpenPlayingQueue(final Collection<? extends Song> queue, final int startPosition, final boolean startPlaying) {\r\n    if (getPlayingQueue() == queue) {\r\n        if (startPlaying) {\r\n            playSongAt(startPosition, isPlaying());\r\n        } else {\r\n            setPosition(startPosition);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/286", "ground_truth": "        }\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static Song getCurrentSong() {", "choices": [{"text": "\r\n{\r\n\treturn Song.getCurrentSong();\r\n}\r\n\r\npublic static void setCurrentSong(@NonNull Song song)\r\n{\r\n\tSong.setCurrentSong(song);\r\n}\r\n\r\npublic static boolean isPlaying()\r\n{\r\n\treturn Song.isPlaying();\r\n}\r\n\r\npublic static void play()\r\n{\r\n\tSong.play();\r\n}\r\n\r\npublic static void pause()\r\n{\r\n\tSong.pause();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/287", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getCurrentSong();\r\n    }\r\n    return Song.EMPTY_SONG;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "public final ContextWrapper mWrappedContext;\npublic static final String TAG = MusicPlayerRemote.class.getSimpleName();\nprivate final ServiceConnection mCallback;\n public static int getPosition() {", "choices": [{"text": "\n public MusicPlayerRemote(Context context) {\n  mWrappedContext = new ContextWrapper(context);\n  mCallback = mWrappedContext.getServiceConnection();\n }\n\n public MusicPlayerRemote(Context context, ServiceConnection connection) {\n  mWrappedContext = new ContextWrapper(context);\n  mCallback = connection;\n }\n\n public MusicPlayerRemote() {\n  mWrappedContext = new ContextWrapper(mWrappedContext.getApplicationContext());\n  mCallback = mWrappedContext.getServiceConnection();\n }\n\n public MusicPlayerRemote(Context context, Service"}], "metadata": {"task_id": "VinylMusicPlayer/288", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getPosition();\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\npublic static List<? extends Song> getPlayingQueue() {", "choices": [{"text": " {\n\treturn playingQueue;\n}\npublic static void setPlayingQueue(List<? extends Song> playingQueue) {\n\tVinylMusicPlayer.playingQueue = playingQueue;\n}\npublic static List<? extends Song> getPlayingSongs() {\n\treturn playingSongs;\n}\npublic static void setPlayingSongs(List<? extends Song> playingSongs) {\n\tVinylMusicPlayer.playingSongs = playingSongs;\n}\npublic static boolean isPlaying() {\n\treturn playing;\n}"}], "metadata": {"task_id": "VinylMusicPlayer/289", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getPlayingQueue();\r\n    }\r\n    return new ArrayList<>();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic static int getSongProgressMillis() {", "choices": [{"text": "(Song song) {\n\treturn song.getProgressMillis();\n}\npublic static int getSongDurationMillis(Song song) {\n\treturn song.getDurationMillis();\n}\npublic static String getSongTitle(Song song) {\n\treturn song.getTitle();\n}\npublic static String getSongArtist(Song song) {\n\treturn song.getArtist();\n}\npublic static String getSongAlbum(Song song) {\n\treturn song.getAlbum();\n}\npublic static String getSongGenre(Song song) {\n"}], "metadata": {"task_id": "VinylMusicPlayer/290", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getSongProgressMillis();\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic static int getSongDurationMillis() {", "choices": [{"text": "(Song song) {\n\treturn song.getDurationMillis();\n}\npublic static String getSongTitle(Song song) {\n\treturn song.getTitle();\n}\npublic static String getSongArtist(Song song) {\n\treturn song.getArtist();\n}\npublic static String getSongAlbum(Song song) {\n\treturn song.getAlbum();\n}\npublic static String getSongGenre(Song song) {\n\treturn song.getGenre();\n}\npublic static String getSongYear(Song song) {\n\t"}], "metadata": {"task_id": "VinylMusicPlayer/291", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getSongDurationMillis();\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "public static int getAudioSessionId() {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/306", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getAudioSessionId();\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic static String getQueueInfoString() {", "choices": [{"text": "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,"}], "metadata": {"task_id": "VinylMusicPlayer/307", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getQueueInfoString();\r\n    }\r\n    return \"\";\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (MusicPlayerRemote.isPlaying()) {", "choices": [{"text": "\r\n        if (MusicPlayerRemote.isPlaying()) {\r\n            MusicPlayerRemote.pause();\r\n        } else {\r\n            MusicPlayerRemote.play();\r\n        }\r\n    } else {\r\n        if (MusicPlayerRemote.isPlaying()) {\r\n            MusicPlayerRemote.pause();\r\n        } else {\r\n            MusicPlayerRemote.play();\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/314", "ground_truth": "        MusicPlayerRemote.pauseSong();\r\n    } else {\r\n        MusicPlayerRemote.resumePlaying();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\PlayPauseButtonOnClickHandler.java"}}
{"prompt": "import java.util.List\nimport java.util.Collections\nimport androidx.annotation.NonNull\npublic static <T> void makeShuffleList(@NonNull List<T> listToShuffle, final int current) {\r\n    if (listToShuffle.isEmpty())\r\n        return;\r\n    if (current >= 0) {\r\n        T song = listToShuffle.remove(current);\r\n        Collections.shuffle(listToShuffle);", "choices": [{"text": ", current);\r\n        makeShuffleList(listToShuffle, current + 1);\r\n    } else {\r\n        Collections.shuffle(listToShuffle);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "VinylMusicPlayer/315", "ground_truth": "        listToShuffle.add(0, song);\r\n    } else {\r\n        Collections.shuffle(listToShuffle);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\ShuffleHelper.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/316", "ground_truth": "public Void call() {\r\n    blurIteration(_src, _w, _h, _radius, _totalCores, _coreIndex, _round);\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\StackBlur.java"}}
{"prompt": "/**\r\n * Starts or continues the stop watch.\r\n *\r\n * @see #pause()\r\n * @see #reset()\r\n */\r\npublic void start() {", "choices": [{"text": ".\r\n *\r\n * @see #resume()\r\n * @see #stop()\r\n * @see #reset()\r\n */\r\nexport function start() {\r\n  return new StopWatch();\r\n}\r\n\r\n/**\r\n * Pauses the stop watch.\r\n */\r\nexport function pause() {\r\n  return new StopWatch().pause();\r\n}\r\n\r\n/**\r\n * Resumes the stop watch.\r\n */\r\nexport function resume() {\r\n  return new StopWatch().resume();\r\n}\r\n\r\n/**"}], "metadata": {"task_id": "VinylMusicPlayer/317", "ground_truth": "    synchronized (this) {\r\n        startTime = System.currentTimeMillis();\r\n        isRunning = true;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\StopWatch.java"}}
{"prompt": "/**\r\n * Stops and resets the stop watch to zero milliseconds.\r\n *\r\n * @see #start()\r\n * @see #pause()\r\n */\r\npublic void reset() {\r\n    synchronized (this) {", "choices": [{"text": ".\r\n *\r\n * @see #start()\r\n * @see #pause()\r\n */\r\npublic void stop() {\r\n    synchronized (this) {\r\n        this.start();\r\n        this.pause();\r\n    }\r\n}\r\n\r\n/**\r\n * Stops and resets the stop watch to zero milliseconds.\r\n *\r\n * @see #start()\r\n * @see #pause()\r\n */\r\npublic void pause() {\r\n    synchronized (this) {\r\n        this.start();\r\n        this.pause"}], "metadata": {"task_id": "VinylMusicPlayer/319", "ground_truth": "        startTime = 0;\r\n        previousElapsedTime = 0;\r\n        isRunning = false;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\StopWatch.java"}}
{"prompt": "private final WeakReference<T> weakReference;\nprivate final Consumer<T> consumer;\n public void run() {", "choices": [{"text": "<T> get() {\n return weakReference.get();\n }\n private void set(T value) {\n weakReference.set(value);\n consumer.accept(value);\n }\n public WeakReference<T> getWeakReference() {\n return weakReference;\n }\n private void setWeakReference(WeakReference<T> weakReference) {\n this.weakReference = weakReference;\n }\n private Consumer<T> getConsumer() {\n return consumer;\n }\n private void setConsumer(Consumer<T> consumer) {\n this.consumer = consumer;\n }\n"}], "metadata": {"task_id": "VinylMusicPlayer/321", "ground_truth": "    T obj = weakReference.get();\r\n    if (obj != null) {\r\n        consumer.accept(obj);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\WeakMethodReference.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.sort.SortOrder\nimport com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Album> getAlbums(String query) {\r\n    final String strippedQuery = StringUtil.stripAccent(query.toLowerCase());\r\n    ArrayList<Album> albums = new ArrayList<>();\r\n    for (Album album : Discography.getInstance().getAllAlbums(getSortOrder())) {\r\n        final String strippedAlbum = StringUtil.stripAccent(album.getTitle().toLowerCase());\r\n        if (strippedAlbum.contains(strippedQuery)) {", "choices": [{"text": "\r\n            albums.add(album);\r\n        }\r\n    }\r\n    return albums;\r\n}\r\n\r\n@NonNull\r\npublic static SortOrder getSortOrder() {\r\n    return SortOrder.ASCENDING;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/325", "ground_truth": "            albums.add(album);\r\n        }\r\n    }\r\n    return albums;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\AlbumLoader.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static Album getAlbum(long albumId) {\r\n    Album album = Discography.getInstance().getAlbum(albumId);\r\n    if (album != null) {", "choices": [{"text": "\r\n        return album;\r\n    }\r\n    return null;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/326", "ground_truth": "        return album;\r\n    } else {\r\n        return new Album();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\AlbumLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.sort.SortOrder\nimport com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Artist> getArtists(String query) {\r\n    final String strippedQuery = StringUtil.stripAccent(query.toLowerCase());\r\n    ArrayList<Artist> artists = new ArrayList<>();\r\n    for (Artist artist : Discography.getInstance().getAllArtists(getSortOrder())) {\r\n        final String strippedArtist = StringUtil.stripAccent(artist.getName().toLowerCase());\r\n        if (strippedArtist.contains(strippedQuery)) {", "choices": [{"text": "\r\n            artists.add(artist);\r\n        }\r\n    }\r\n    return artists;\r\n}\r\n\r\n@NonNull\r\npublic static SortOrder getSortOrder() {\r\n    return SortOrder.ASCENDING;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/328", "ground_truth": "            artists.add(artist);\r\n        }\r\n    }\r\n    return artists;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\ArtistLoader.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static Artist getArtist(long artistId) {\r\n    Artist artist = Discography.getInstance().getArtist(artistId);\r\n    if (artist != null) {", "choices": [{"text": "\r\n        return artist;\r\n    }\r\n    return null;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/329", "ground_truth": "        return artist;\r\n    } else {\r\n        return Artist.EMPTY;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\ArtistLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.sort.SongSortOrder\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Genre\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Song> getSongs(final long genreId) {\r\n    ArrayList<Song> songs = Discography.getInstance().getSongsForGenre(genreId, SongSortOrder.BY_ALBUM);", "choices": [{"text": "\r\n    return songs;\r\n}\r\n\r\n@NonNull\r\npublic static ArrayList<Genre> getGenres() {\r\n    ArrayList<Genre> genres = Discography.getInstance().getGenres();\r\n    return genres;\r\n}\r\n\r\n@NonNull\r\npublic static ArrayList<Song> getSongsForGenre(final long genreId) {\r\n    ArrayList<Song> songs = Discography.getInstance().getSongsForGenre(genreId, SongSortOrder.BY_ALBUM"}], "metadata": {"task_id": "VinylMusicPlayer/331", "ground_truth": "    if (songs == null) {\r\n        return new ArrayList<>();\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\GenreLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Genre\nimport androidx.annotation.NonNull\n/**\r\n * Gets all songs contained in the *closestMatch* genre to contain the genreNameSearchTerm.\r\n *\r\n * Genre name is checked to contain the search term in a case insensitive way.\r\n *\r\n * Match closeness defined by StringUtil.closestOfMatches\r\n *\r\n * For instance \"Punk\" might return songs from the genre named \"punk rock\", but would prefer\r\n * to use a genre named \"punk\" if it exists.\r\n * @param genreNameSearchTerm A partial genre name.\r\n * @return song list from the found genre by search term\r\n */\r\n@NonNull\r\npublic static ArrayList<Song> getGenreSongsByName(final String genreNameSearchTerm) {\r\n    final Genre genre = getGenreByName(genreNameSearchTerm);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/332", "ground_truth": "    if (genre == null) {\r\n        return new ArrayList<>();\r\n    }\r\n    return getSongs(genre.id);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\GenreLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Genre\nimport androidx.annotation.Nullable\n@Nullable\r\nprivate static Genre getGenreByName(final String genreNameSearchTerm) {\r\n    final String lowercaseSearchTerm = genreNameSearchTerm.toLowerCase();\r\n    final ArrayList<Genre> genres = getAllGenres();\r\n    Genre match = null;\r\n    for (Genre genre : genres) {\r\n        if (genre.name.toLowerCase().contains(lowercaseSearchTerm)) {\r\n            if (match == null) {\r\n                match = genre;\r\n            } else {\r\n                match = closerMatch(lowercaseSearchTerm, match, genre);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/333", "ground_truth": "            }\r\n        }\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\GenreLoader.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.model.Genre\nimport androidx.annotation.NonNull\n/**\r\n * This can be sped up by passing in indexOfs and lowerCaseOfs.\r\n * Users probably wont complain though, should be fast enough as is.\r\n */\r\n@NonNull\r\nprivate static Genre closerMatch(@NonNull final String genreNameSearchTerm, @NonNull final Genre first, @NonNull final Genre second) {\r\n    final StringUtil.ClosestMatch match = StringUtil.closestOfMatches(genreNameSearchTerm, first.name.toLowerCase(), second.name.toLowerCase());\r\n    // if equal, go with first, respect pre established order.\r\n    if (match != StringUtil.ClosestMatch.SECOND) {", "choices": [{"text": "\r\n        return first;\r\n    }\r\n    return second;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/334", "ground_truth": "        return first;\r\n    } else {\r\n        return second;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\GenreLoader.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.PlaylistSong\nimport androidx.annotation.NonNull\nimport android.database.Cursor\nimport android.content.Context\n@NonNull\r\npublic static ArrayList<Song> getPlaylistSongList(@NonNull final Context context, final long playlistId) {\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    try (Cursor cursor = makePlaylistSongCursor(context, playlistId)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            do {\r\n                PlaylistSong song = getPlaylistSongFromCursorImpl(cursor, playlistId);\r\n                if (!song.equals(Song.EMPTY_SONG)) {\r\n                    songs.add(song);\r\n                }", "choices": [{"text": ";\r\n            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return songs;\r\n}\r\n\r\n@NonNull\r\npublic static List<Song> getPlaylistSongList(@NonNull final Context context, final long playlistId) {\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    try (Cursor cursor = makePlaylistSongCursor(context, playlistId)) {\r\n        if (cursor!= null && cursor.moveToFirst()) {\r\n            do {\r\n                PlaylistSong song"}], "metadata": {"task_id": "VinylMusicPlayer/335", "ground_truth": "            } while (cursor.moveToNext());\r\n        }\r\n        return songs;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\PlaylistSongLoader.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.PlaylistSong\nimport androidx.annotation.NonNull\n/**\r\n * Gets all songs contained in the *closestMatch* playlist to contain the playlistNameSearchTerm.\r\n *\r\n * Match closeness defined by StringUtil.closestOfMatches\r\n *\r\n * For instance \"Punk\" might return songs from the playlist named \"punk rock\", but would prefer\r\n * to use a playlist named \"punk\" if it exists.\r\n * @param playlistNameSearchTerm A partial playlist name.\r\n * @return Song list from the playlist found by search term\r\n */\r\n@NonNull\r\npublic static List<? extends Song> getPlaylistSongList(@NonNull final String playlistNameSearchTerm) {\r\n    // Find closest match\r\n    final String lowercaseSearchTerm = playlistNameSearchTerm.toLowerCase();\r\n    StaticPlaylist match = null;\r\n    for (StaticPlaylist playlist : StaticPlaylist.getAllPlaylists()) {\r\n        if (match == null) {\r\n            match = playlist;\r\n        } else {\r\n            match = closerMatch(lowercaseSearchTerm, match, playlist);\r\n        }\r\n    }", "choices": [{"text": "();\r\n    return match.getSongList();\r\n}\r\n\r\n/**\r\n * Finds the closest match in the *playlist* to contain the playlistNameSearchTerm.\r\n *\r\n * Match closeness defined by StringUtil.closestOfMatches\r\n *\r\n * For instance \"Punk\" might return songs from the playlist named \"punk rock\", but would prefer\r\n * to use a playlist named \"punk\" if it exists.\r\n * @param playlistNameSearchTerm A partial playlist name.\r\n * @param playlist The playlist to find"}], "metadata": {"task_id": "VinylMusicPlayer/336", "ground_truth": "    if (match == null) {\r\n        return new ArrayList<>();\r\n    }\r\n    return match.asSongs();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\PlaylistSongLoader.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport androidx.annotation.NonNull\n/**\r\n * This can be sped up by passing in indexOfs and lowerCaseOfs.\r\n * Users probably wont complain though, should be fast enough as is.\r\n */\r\n@NonNull\r\nprivate static StaticPlaylist closerMatch(@NonNull final String playlistNameSearchTerm, @NonNull final StaticPlaylist first, @NonNull final StaticPlaylist second) {\r\n    final StringUtil.ClosestMatch match = StringUtil.closestOfMatches(playlistNameSearchTerm, first.name.toLowerCase(), second.name.toLowerCase());\r\n    // if equal, go with first, respect pre established order.\r\n    if (match != StringUtil.ClosestMatch.SECOND) {", "choices": [{"text": "\r\n        return first;\r\n    } else {\r\n        return second;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/337", "ground_truth": "        return first;\r\n    } else {\r\n        return second;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\PlaylistSongLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.sort.SortOrder\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Song> getSongs(@NonNull final String query) {\r\n    final String strippedQuery = StringUtil.stripAccent(query.toLowerCase());\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    for (Song song : Discography.getInstance().getAllSongs(getSortOrder())) {\r\n        final String strippedTitle = StringUtil.stripAccent(song.title.toLowerCase());\r\n        if (strippedTitle.contains(strippedQuery)) {", "choices": [{"text": "\r\n            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n}\r\n\r\n@NonNull\r\npublic static SortOrder getSortOrder() {\r\n    return SortOrder.ASCENDING;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/339", "ground_truth": "            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\SongLoader.java"}}
{"prompt": "import androidx.fragment.app.Fragment\npublic Fragment getFragment(int position) {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/344", "ground_truth": "    if (position < mFragments.size() && position >= 0) {\r\n        return mFragments.get(position);\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\CustomFragmentStatePagerAdapter.java"}}
{"prompt": "@Override\r\nprotected void onPreExecute() {\r\n    super.onPreExecute();\r\n    if (delay > 0) {", "choices": [{"text": "\r\n        delay--;\r\n    }\r\n}\r\n\r\n@Override\r\nprotected void onPostExecute(Void result) {\r\n    super.onPostExecute(result);\r\n    if (delay > 0) {\r\n        delay--;\r\n    }\r\n}\r\n\r\n@Override\r\nprotected void onProgressUpdate(Void... values) {\r\n    super.onProgressUpdate(values);\r\n    if (delay > 0) {\r\n        delay--;\r\n    }\r\n}\r\n\r\n@Override\r\nprotected void"}], "metadata": {"task_id": "VinylMusicPlayer/345", "ground_truth": "        new Handler().postDelayed(this::initAndShowDialog, delay);\r\n    } else {\r\n        initAndShowDialog();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "@SuppressWarnings(\"unchecked\")\r\n@Override\r\nprotected void onProgressUpdate(Progress... values) {\r\n    super.onProgressUpdate(values);", "choices": [{"text": "(values);\r\n    if (values.length == 1) {\r\n        if (values[0] instanceof Progress) {\r\n            ((Progress) values[0]).setProgress((Integer) values[1]);\r\n        }\r\n    } else if (values.length == 2) {\r\n        if (values[0] instanceof Progress) {\r\n            ((Progress) values[0]).setProgress((Integer) values[1]);\r\n            ((Progress) values[1]).setProgress((Integer) values[2]);\r\n        }\r\n    }\r"}], "metadata": {"task_id": "VinylMusicPlayer/347", "ground_truth": "    Dialog dialog = getDialog();\r\n    if (dialog != null) {\r\n        onProgressUpdate(dialog, values);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/348", "ground_truth": "protected void onCancelled(Result result) {\r\n    super.onCancelled(result);\r\n    tryToDismiss();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/349", "ground_truth": "protected void onPostExecute(Result result) {\r\n    super.onPostExecute(result);\r\n    tryToDismiss();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "import android.app.Dialog\nprivate void tryToDismiss() {\r\n    supposedToBeDismissed = true;\r\n    try {\r\n        Dialog dialog = getDialog();\r\n        if (dialog != null)", "choices": [{"text": ") {\r\n            dialog.dismiss();\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        supposedToBeDismissed = false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/350", "ground_truth": "            dialog.dismiss();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())", "choices": [{"text": "!= o.getClass())\r\n        return false;\r\n\r\n    return true;\r\n}\r\n\r\n@Override\r\npublic int hashCode() {\r\n    return getClass().hashCode();\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\n    return getClass().getSimpleName();\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/352", "ground_truth": "        return false;\r\n    if (!super.equals(o))\r\n        return false;\r\n    return (index == ((IndexedSong) o).index);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\IndexedSong.java"}}
{"prompt": "private void restoreUniqueId() {\r\n    nextUniqueId = 0;\r\n    for (int i = 0; i < queue.size(); i++) {\r\n        long uniqueId = getNextUniqueId();\r\n        queue.get(i).setUniqueId(uniqueId);\r\n        int index = queue.get(i).index;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/354", "ground_truth": "        if (index < originalQueue.size()) {\r\n            originalQueue.get(index).setUniqueId(uniqueId);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nprivate void updateQueueIndexesAfterSongsModification(int position, int occurrence, int previousPosition, int direction) {\r\n    for (int i = 0; i < queue.size(); i++) {\r\n        originalQueue.get(i).index = i;\r\n        if (!(i >= position && i <= position + occurrence) && queue.get(i).index >= previousPosition) {\r\n            queue.get(i).index = queue.get(i).index + direction * (occurrence + 1);\r\n            int index = queue.get(i).index;\r\n            if (index < 0) {", "choices": [{"text": "\r\n                index = 0;\r\n            }\r\n            originalQueue.get(i).index = index;\r\n        }\r\n    }\r\n}\r\nprivate void updateQueueIndexesAfterSongModification(int position, int occurrence, int previousPosition, int direction) {\r\n    for (int i = 0; i < queue.size(); i++) {\r\n        originalQueue.get(i).index = i;\r\n        if (!(i >= position && i <= position + occurrence) && queue.get(i).index >= previousPosition) {\r\n            queue"}], "metadata": {"task_id": "VinylMusicPlayer/357", "ground_truth": "                throw new IllegalArgumentException(\"Bad index=\" + index);\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "private int rePosition(int deletedPosition) {\r\n    int position = this.currentPosition;\r\n    if (deletedPosition < position) {\r\n        this.currentPosition = position - 1;\r\n    } else if (deletedPosition == position) {\r\n        //the current position was deleted\r\n        if (queue.size() > deletedPosition) {\r\n            return position;\r\n        } else {", "choices": [{"text": "\r\n            return deletedPosition;\r\n        } else {\r\n            return deletedPosition;\r\n        }\r\n    } else {\r\n        return deletedPosition;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/361", "ground_truth": "            return position - 1;\r\n        }\r\n    }\r\n    return INVALID_POSITION;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nprivate int removeAllOccurrences(Song song) {\r\n    int hasPositionChanged = INVALID_POSITION;\r\n    for (int i = queue.size() - 1; i >= 0; i--) {\r\n        if (queue.get(i).id == song.id) {\r\n            int temp = remove(i);\r\n            if (temp != INVALID_POSITION) {\r\n                hasPositionChanged = temp;", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/363", "ground_truth": "            }\r\n        }\r\n    }\r\n    return hasPositionChanged;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic int removeSongs(@NonNull List<Song> songs) {\r\n    int hasPositionChanged = INVALID_POSITION;\r\n    for (Song song : songs) {\r\n        int temp = removeAllOccurrences(song);\r\n        if (temp != INVALID_POSITION) {", "choices": [{"text": "\r\n            hasPositionChanged |= temp;\r\n        }\r\n    }\r\n    return hasPositionChanged;\r\n}\r\npublic int removeAllOccurrences(@NonNull Song song) {\r\n    int hasPositionChanged = INVALID_POSITION;\r\n    for (int i = 0; i < songs.size(); i++) {\r\n        if (songs.get(i).equals(song)) {\r\n            songs.remove(i);\r\n            hasPositionChanged |= i;\r\n        }\r\n    }\r\n    return hasPositionChanged;\r"}], "metadata": {"task_id": "VinylMusicPlayer/364", "ground_truth": "            hasPositionChanged = temp;\r\n        }\r\n    }\r\n    return hasPositionChanged;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\n/* -------------------- queue getter info -------------------- */\r\npublic boolean openQueue(@Nullable final Collection<? extends Song> playingQueue, final int startPosition, int shuffleMode) {\r\n    if (playingQueue == null || playingQueue.isEmpty() || startPosition < 0 || startPosition >= playingQueue.size()) {\r\n        return false;\r\n    }\r\n    clear();\r\n    this.shuffleMode = SHUFFLE_MODE_NONE;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/366", "ground_truth": "    addAll(playingQueue);\r\n    this.currentPosition = startPosition;\r\n    setShuffle(shuffleMode);\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.helper.ShuffleHelper\n/* -------------------- shuffle method -------------------- */\r\npublic void setShuffle(int shuffleMode) {\r\n    if (this.shuffleMode == shuffleMode)\r\n        return;\r\n    switch(shuffleMode) {\r\n        case SHUFFLE_MODE_NONE:\r\n            currentPosition = queue.isEmpty() ? -1 : queue.get(currentPosition).index;\r\n            revert();\r\n            break;\r\n        case SHUFFLE_MODE_SHUFFLE:\r\n            ShuffleHelper.makeShuffleList(queue, currentPosition);", "choices": [{"text": "\r\n            break;\r\n        case SHUFFLE_MODE_RANDOM:\r\n            ShuffleHelper.makeRandomList(queue, currentPosition);\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException(\"Invalid shuffle mode: \" + shuffleMode);\r\n    }\r\n    this.shuffleMode = shuffleMode;\r\n}\r\n/* -------------------- shuffle method -------------------- */\r\npublic void revert() {\r\n    if (this.shuffleMode == SHUFFLE_MODE_NONE)\r\n        return;\r\n    switch(shuffleMode) {"}], "metadata": {"task_id": "VinylMusicPlayer/370", "ground_truth": "            currentPosition = 0;\r\n            break;\r\n    }\r\n    this.shuffleMode = shuffleMode;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "public void toggleShuffle() {\r\n    switch(shuffleMode) {\r\n        case SHUFFLE_MODE_NONE:\r\n            setShuffle(SHUFFLE_MODE_SHUFFLE);\r\n            break;", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/371", "ground_truth": "        case SHUFFLE_MODE_SHUFFLE:\r\n            setShuffle(SHUFFLE_MODE_NONE);\r\n            break;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "/* -------------------- repeat method -------------------- */\r\npublic void setRepeatMode(final int repeatMode) {\r\n    if (this.repeatMode == repeatMode)\r\n        return;\r\n    switch(repeatMode) {\r\n        case REPEAT_MODE_NONE:\r\n        case REPEAT_MODE_ALL:", "choices": [{"text": ":\r\n            break;\r\n        case REPEAT_MODE_ONE:\r\n            this.repeatMode = REPEAT_MODE_ONE;\r\n            break;\r\n        case REPEAT_MODE_TWO:\r\n            this.repeatMode = REPEAT_MODE_TWO;\r\n            break;\r\n        case REPEAT_MODE_THREE:\r\n            this.repeatMode = REPEAT_MODE_THREE;\r\n            break;\r\n        case REPEAT_MODE_FOUR:\r\n            this.repeatMode = REPEAT_MODE_"}], "metadata": {"task_id": "VinylMusicPlayer/372", "ground_truth": "        case REPEAT_MODE_THIS:\r\n            this.repeatMode = repeatMode;\r\n            break;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "public void cycleRepeatMode() {\r\n    switch(getRepeatMode()) {\r\n        case REPEAT_MODE_NONE:\r\n            setRepeatMode(REPEAT_MODE_ALL);\r\n            break;\r\n        case REPEAT_MODE_ALL:\r\n            setRepeatMode(REPEAT_MODE_THIS);\r\n            break;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/373", "ground_truth": "        default:\r\n            setRepeatMode(REPEAT_MODE_NONE);\r\n            break;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "private D mData;\n /**\r\n * {@inheritDoc}\r\n */\r\n@Override\r\nprotected void onReset() {", "choices": [{"text": "\r\n/**\r\n * {@inheritDoc}\r\n */\r\n@Override\r\nprotected void onStart() {\r\n\tsuper.onStart();\r\n\tmData = new D();\r\n}\r\n\r\n/**\r\n * {@inheritDoc}\r\n */\r\n@Override\r\nprotected void onStop() {\r\n\tsuper.onStop();\r\n\tmData = null;\r\n}\r\n\r\n/**\r\n * {@inheritDoc}\r\n */\r\n@Override\r\nprotected void onDestroy() {\r\n\tsuper.onDestroy();\r\n\tmData"}], "metadata": {"task_id": "VinylMusicPlayer/378", "ground_truth": "    super.onReset();\r\n    // Ensure the loader is stopped\r\n    onStopLoading();\r\n    this.mData = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\WrappedAsyncTaskLoader.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic static String getTitle(@NonNull final String albumName) {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/379", "ground_truth": "    if (MusicUtil.isAlbumNameUnknown(albumName)) {\r\n        return UNKNOWN_ALBUM_DISPLAY_NAME;\r\n    }\r\n    return albumName;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Album.java"}}
{"prompt": "public String getName() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/384", "ground_truth": "    if (MusicUtil.isArtistNameUnknown(name)) {\r\n        return Artist.UNKNOWN_ARTIST_DISPLAY_NAME;\r\n    }\r\n    return name;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Artist.java"}}
{"prompt": "public final ArrayList<Album> albums;\npublic final String name;\npublic final long id;\n public int getSongCount() {\r\n    int songCount = 0;", "choices": [{"text": ";\r\n    for (Album album : albums) {\r\n        songCount += album.getSongCount();\r\n    }\r\n    return songCount;\r\n }\r\n public ArrayList<Song> getSongs() {\r\n    ArrayList<Song> songs = new ArrayList<Song>();\r\n    for (Album album : albums) {\r\n        for (Song song : album.getSongs()) {\r\n            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n }\r"}], "metadata": {"task_id": "VinylMusicPlayer/385", "ground_truth": "    for (Album album : albums) {\r\n        songCount += album.getSongCount();\r\n    }\r\n    return songCount;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Artist.java"}}
{"prompt": "import java.util.ArrayList\npublic ArrayList<Song> getSongs() {\r\n    ArrayList<Song> songs = new ArrayList<>();", "choices": [{"text": "\r\n    songs.add(new Song(\"Song 1\"));\r\n    songs.add(new Song(\"Song 2\"));\r\n    songs.add(new Song(\"Song 3\"));\r\n    songs.add(new Song(\"Song 4\"));\r\n    songs.add(new Song(\"Song 5\"));\r\n    songs.add(new Song(\"Song 6\"));\r\n    songs.add(new Song(\"Song 7\"));\r\n    songs.add(new"}], "metadata": {"task_id": "VinylMusicPlayer/386", "ground_truth": "    for (Album album : albums) {\r\n        songs.addAll(album.songs);\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Artist.java"}}
{"prompt": "public String getName() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/392", "ground_truth": "    if (MusicUtil.isGenreNameUnknown(name)) {\r\n        return UNKNOWN_GENRE_DISPLAY_NAME;\r\n    }\r\n    return name;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Genre.java"}}
{"prompt": "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    Genre genre = (Genre) o;\r\n    if (id != genre.id)", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/393", "ground_truth": "        return false;\r\n    if (!name.equals(genre.name))\r\n        return false;\r\n    return songCount == genre.songCount;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Genre.java"}}
{"prompt": "public String getLine(int time) {\r\n    time += offset + AbsSynchronizedLyrics.TIME_OFFSET_MS;\r\n    int lastLineTime = lines.keyAt(0);\r\n    for (int i = 0; i < lines.size(); i++) {\r\n        int lineTime = lines.keyAt(i);\r\n        if (time >= lineTime) {\r\n            lastLineTime = lineTime;\r\n        } else {", "choices": [{"text": "\n            break;\r\n        }\r\n    }\r\n    return lines.get(lastLineTime);\r\n}\r\n\r\npublic void addLine(String line) {\r\n    int time = System.currentTimeMillis();\r\n    lines.put(time, line);\r\n    offset += AbsSynchronizedLyrics.TIME_OFFSET_MS;\r\n}\r\n\r\npublic void removeLine(String line) {\r\n    int time = System.currentTimeMillis();\r\n    lines.remove(time);\r\n    offset -= AbsSynchronizedLyrics"}], "metadata": {"task_id": "VinylMusicPlayer/396", "ground_truth": "            break;\r\n        }\r\n    }\r\n    return lines.get(lastLineTime);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\lyrics\\AbsSynchronizedLyrics.java"}}
{"prompt": "@Override\r\npublic String getText() {\r\n    parse(false);\r\n    if (valid) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < lines.size(); i++) {\r\n            String line = lines.valueAt(i);\r\n            sb.append(line).append(\"\\r\\n\");", "choices": [{"text": ".append(line);\r\n        }\r\n        return sb.toString();\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n@Override\r\npublic void setText(String text) {\r\n    parse(false);\r\n    if (valid) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < lines.size(); i++) {\r\n            String line = lines.valueAt(i);\r\n            sb.append(line).append(\"\\r\\n\");\r\n        }\r"}], "metadata": {"task_id": "VinylMusicPlayer/398", "ground_truth": "        }\r\n        return sb.toString().trim().replaceAll(\"(\\r?\\n){3,}\", \"\\r\\n\\r\\n\");\r\n    }\r\n    return super.getText();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\lyrics\\AbsSynchronizedLyrics.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic static Lyrics parse(Song song, String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(song, data);\r\n            if (lyrics.isValid())\r\n                return lyrics.parse(false);\r\n        } catch (Exception e) {", "choices": [{"text": "\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/400", "ground_truth": "            e.printStackTrace();\r\n        }\r\n    }\r\n    return new Lyrics().setData(song, data).parse(false);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\lyrics\\Lyrics.java"}}
{"prompt": "public static boolean isSynchronized(String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(null, data);\r\n            if (lyrics.isValid())\r\n                return true;\r\n        } catch (Exception e) {", "choices": [{"text": "\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/401", "ground_truth": "            e.printStackTrace();\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\lyrics\\Lyrics.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/408", "ground_truth": "public void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeLong(this.id);\r\n    dest.writeString(this.name);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Playlist.java"}}
{"prompt": "@DrawableRes\r\npublic final int iconRes;\n @Override\r\npublic int hashCode() {", "choices": [{"text": "\r\npublic ImageView(Context context, @DrawableRes int iconRes) {\r\n\tsuper(context);\r\n\tthis.iconRes = iconRes;\r\n}\r\n\r\npublic ImageView(Context context) {\r\n\tsuper(context);\r\n}\r\n\r\npublic ImageView(Context context, AttributeSet attrs) {\r\n\tsuper(context, attrs);\r\n}\r\n\r\npublic ImageView(Context context, AttributeSet attrs, int defStyle) {\r\n\tsuper(context, attrs, defStyle);\r\n}\r\n\r\n@"}], "metadata": {"task_id": "VinylMusicPlayer/414", "ground_truth": "    final int prime = 31;\r\n    int result = super.hashCode();\r\n    result = prime * result + iconRes;\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\smartplaylist\\AbsSmartPlaylist.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/416", "ground_truth": "public void writeToParcel(Parcel dest, int flags) {\r\n    super.writeToParcel(dest, flags);\r\n    dest.writeInt(this.iconRes);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\smartplaylist\\AbsSmartPlaylist.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/418", "ground_truth": "public void clear(@NonNull Context context) {\r\n    HistoryStore.getInstance(context).clear();\r\n    super.clear(context);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\smartplaylist\\HistoryPlaylist.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.NonNull\n@NonNull\r\npublic List<String> getArtistNames() {\r\n    final List<String> result = new ArrayList<>(artistNames);\r\n    for (final String name : albumArtistNames) {\r\n        if (!result.contains(name)) {", "choices": [{"text": "\r\n            result.add(name);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\npublic List<String> getAlbumArtistNames() {\r\n    final List<String> result = new ArrayList<>(albumArtistNames);\r\n    for (final String name : artistNames) {\r\n        if (!result.contains(name)) {\r\n            result.add(name);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/423", "ground_truth": "            result.add(name);\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Song.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.CategoryInfo\nprivate int getSelected(ArrayList<CategoryInfo> categories) {\r\n    int selected = 0;\r\n    for (CategoryInfo categoryInfo : categories) {", "choices": [{"text": "\r\n        if (categoryInfo.getId().equals(selected)) {\r\n            selected++;\r\n        }\r\n    }\r\n    return selected;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/429", "ground_truth": "        if (categoryInfo.visible)\r\n            selected++;\r\n    }\r\n    return selected;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\preferences\\LibraryPreferenceDialog.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.widget.SeekBar\n@Override\r\npublic void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\r\n    if (fromUser) {\r\n        if (seekBar.getId() == R.id.seekbar_with_rg) {\r\n            withRgValue = progress * 0.2f - 15.0f;\r\n            updateLabelWithRg();\r\n        } else if (seekBar.getId() == R.id.seekbar_without_rg) {", "choices": [{"text": "\r\n            withoutRgValue = progress * 0.2f - 15.0f;\r\n            updateLabelWithoutRg();\r\n        }\r\n    } else {\r\n        if (seekBar.getId() == R.id.seekbar_with_rg) {\r\n            withRgValue = progress * 0.2f - 15.0f;\r\n            updateLabelWithRg();\r\n        } else if (seekBar.getId() == R.id.seekbar_without_rg) {\r\n            withoutRgValue = progress * 0."}], "metadata": {"task_id": "VinylMusicPlayer/432", "ground_truth": "            withoutRgValue = progress * 0.2f - 15.0f;\r\n            updateLabelWitouthRg();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\preferences\\PreAmpPreferenceDialog.java"}}
{"prompt": "import java.util.ArrayList\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\npublic ArrayList<String> getPaths() {\r\n    Cursor cursor = getReadableDatabase().query(BlacklistStoreColumns.NAME, new String[] { BlacklistStoreColumns.PATH }, null, null, null, null, null);\r\n    ArrayList<String> paths = new ArrayList<>();\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        do {\r\n            paths.add(cursor.getString(0));\r\n        } while (cursor.moveToNext());", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/438", "ground_truth": "    }\r\n    if (cursor != null)\r\n        cursor.close();\r\n    return paths;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\BlacklistStore.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic void addSongId(final long songId) {", "choices": [{"text": "{\n\tSong song = new Song();\n\tsong.setId(songId);\n\tthis.songs.add(song);\n}\npublic void addSong(final Song song) {\n\tthis.songs.add(song);\n}\npublic void removeSongId(final long songId) {\n\tthis.songs.remove(songId);\n}\npublic void removeSong(final Song song) {\n\tthis.songs.remove(song);\n}\npublic List<Song> getS"}], "metadata": {"task_id": "VinylMusicPlayer/442", "ground_truth": "    if (songId == Song.EMPTY_SONG.id) {\r\n        return;\r\n    }\r\n    addSongIds(List.of(songId));\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\HistoryStore.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\nimport android.database.sqlite.SQLiteDatabase\npublic void removeSongIds(@NonNull List<Long> missingIds) {\r\n    if (missingIds.isEmpty())\r\n        return;\r\n    final SQLiteDatabase database = getWritableDatabase();\r\n    database.beginTransaction();\r\n    try {\r\n        for (long id : missingIds) {\r\n            removeSongId(database, id);\r\n        }", "choices": [{"text": " }\r\n        database.setTransactionSuccessful();\r\n    } finally {\r\n        database.endTransaction();\r\n    }\r\n}\r\npublic void removeSongId(@NonNull SQLiteDatabase database, long id) {\r\n    database.beginTransaction();\r\n    try {\r\n        database.delete(Song.TABLE_NAME, \"id =?\", new String[]{String.valueOf(id)});\r\n        database.setTransactionSuccessful();\r\n    } finally {\r\n        database.endTransaction();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/443", "ground_truth": "        database.setTransactionSuccessful();\r\n    } finally {\r\n        database.endTransaction();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\HistoryStore.java"}}
{"prompt": "import android.database.sqlite.SQLiteDatabase\nimport android.database.Cursor\npublic boolean contains(long id) {\r\n    final SQLiteDatabase database = getReadableDatabase();\r\n    Cursor cursor = database.query(RecentStoreColumns.NAME, new String[] { RecentStoreColumns.ID }, RecentStoreColumns.ID + \"=?\", new String[] { String.valueOf(id) }, null, null, null, null);\r\n    boolean containsId = cursor != null && cursor.moveToFirst();", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/445", "ground_truth": "    if (cursor != null) {\r\n        cursor.close();\r\n    }\r\n    return containsId;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\HistoryStore.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic void addSongs(@NonNull List<Song> songs) {", "choices": [{"text": ".Song;\n\npublic class Songs {\n\tprivate List<Song> songs;\n\n\tpublic Songs() {\n\t\tsongs = new java.util.ArrayList<Song>();\n\t}\n\n\tpublic void addSong(@NonNull Song song) {\n\t\tsongs.add(song);\n\t}\n\n\tpublic List<Song> getSongs() {\n\t\treturn songs;\n\t}\n\n\tpublic void setSongs(List<Song> songs) {\n\t\tthis.songs = s"}], "metadata": {"task_id": "VinylMusicPlayer/450", "ground_truth": "    for (Song song : songs) {\r\n        songIds.add(song.id);\r\n    }\r\n    save(null);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\SongList.java"}}
{"prompt": "import java.util.List\nimport java.util.Comparator\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic void removeSongsAtPosition(@NonNull final List<Integer> positions) {\r\n    final List<Integer> reversedPositions = new ArrayList<>(positions);\r\n    reversedPositions.sort(Comparator.reverseOrder());\r\n    for (final int position : reversedPositions) {\r\n        if (position >= 0 && position < songIds.size()) {", "choices": [{"text": "\r\n            removeSong(songIds.get(position));\r\n            songIds.remove(position);\r\n        }\r\n    }\r\n}\r\npublic void removeSong(@NonNull final int songId) {\r\n    if (songId >= 0 && songId < songIds.size()) {\r\n        removeSong(songIds.get(songId));\r\n        songIds.remove(songId);\r\n    }\r\n}\r\npublic void removeSong(@NonNull final Song song) {\r\n    if (son"}], "metadata": {"task_id": "VinylMusicPlayer/452", "ground_truth": "            songIds.remove(position);\r\n        }\r\n    }\r\n    save(null);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\SongList.java"}}
{"prompt": "import android.content.SharedPreferences\n@Override\r\nvoid load() {\r\n    final SharedPreferences preferences = getPreferences();\r\n    String values = preferences.getString(PREF_NAME_PREFIX + name, \"\");\r\n    songIds.clear();\r\n    try {\r\n        for (String id : values.split(SEPARATOR)) {", "choices": [{"text": "\r\n            songIds.add(id);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n@Override\r\nvoid save() {\r\n    final SharedPreferences preferences = getPreferences();\r\n    String values = \"\";\r\n    try {\r\n        for (String id : songIds) {\r\n            values += id + SEPARATOR;\r\n        }\r\n        preferences.edit().putString(PREF_NAME_PREFIX + name, values).commit();\r\n    } catch (Exception"}], "metadata": {"task_id": "VinylMusicPlayer/455", "ground_truth": "            songIds.add(Long.valueOf(id));\r\n        }\r\n    } catch (NumberFormatException ignored) {\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\SongList.java"}}
{"prompt": "/**\r\n * For some performance gain, return a static value for the column index for a week\r\n * WARNING: This function assumes you have selected all columns for it to work\r\n *\r\n * @param week number\r\n * @return column index of that week\r\n */", "choices": [{"text": " the week\r\n */\r\nfunction getWeekColumnIndex(week) {\r\n    return week % 7;\r\n}\r\n\r\n/**\r\n * For some performance gain, return a static value for the row index for a week\r\n * WARNING: This function assumes you have selected all rows for it to work\r\n *\r\n * @param week number\r\n * @return row index of that week\r\n */\r\nfunction getWeekRowIndex(week) {\r\n    return week / 7;\r\n}\r\n\r\n/**\r\n * For some performance gain, return a static"}], "metadata": {"task_id": "VinylMusicPlayer/464", "ground_truth": "private static int getColumnIndexForWeek(final int week) {\r\n    // ID, followed by the weeks columns\r\n    return 1 + week;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\SongPlayCountStore.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.Nullable\n@Nullable\r\npublic static StaticPlaylist getPlaylist(final long id) {\r\n    List<StaticPlaylist> all = getAllPlaylists();\r\n    for (StaticPlaylist item : all) {\r\n        Playlist playlist = item.asPlaylist();\r\n        if (playlist.id == id) {", "choices": [{"text": "\r\n            return item;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\npublic static List<StaticPlaylist> getAllPlaylists() {\r\n    List<StaticPlaylist> all = new ArrayList<>();\r\n    for (Playlist playlist : Playlist.values()) {\r\n        all.add(new StaticPlaylist(playlist));\r\n    }\r\n    return all;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/465", "ground_truth": "            return item;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\StaticPlaylist.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.text.TextUtils\n@Nullable\r\npublic static StaticPlaylist getPlaylist(@NonNull final String playlistName) {\r\n    List<StaticPlaylist> all = getAllPlaylists();\r\n    for (StaticPlaylist item : all) {\r\n        Playlist playlist = item.asPlaylist();\r\n        if (TextUtils.equals(playlist.name, playlistName)) {", "choices": [{"text": "\r\n            return item;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n@NonNull\r\npublic static List<StaticPlaylist> getAllPlaylists() {\r\n    List<StaticPlaylist> all = new ArrayList<>();\r\n    for (Playlist playlist : Playlist.values()) {\r\n        all.add(new StaticPlaylist(playlist));\r\n    }\r\n    return all;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/466", "ground_truth": "            return item;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\StaticPlaylist.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static StaticPlaylist getOrCreatePlaylist(@NonNull final String name) {\r\n    StaticPlaylist result = getPlaylist(name);\r\n    if (result == null) {", "choices": [{"text": " {\r\n      result = new StaticPlaylist(name);\r\n      addPlaylist(result);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  @NonNull\r\n  public static StaticPlaylist getPlaylist(@NonNull final String name) {\r\n    StaticPlaylist result = getPlaylists().get(name);\r\n    if (result == null) {\r\n      result = new StaticPlaylist(name);\r\n      addPlaylist(result);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  @NonNull\r\n  public static"}], "metadata": {"task_id": "VinylMusicPlayer/467", "ground_truth": "        result = new StaticPlaylist(name);\r\n        result.save(null);\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\StaticPlaylist.java"}}
{"prompt": "import java.util.ArrayList\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\npublic static ArrayList<Long> getIdsFromCursor(@Nullable Cursor cursor, @NonNull final String columnName) {\r\n    ArrayList<Long> ids = new ArrayList<>();\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        int idColumn = cursor.getColumnIndex(columnName);\r\n        do {", "choices": [{"text": " {\r\n            ids.add(cursor.getLong(idColumn));\r\n            idColumn++;\r\n        } while (cursor.moveToNext());\r\n    }\r\n    return ids;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/469", "ground_truth": "            ids.add(cursor.getLong(idColumn));\r\n        } while (cursor.moveToNext());\r\n    }\r\n    return ids;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\StoreLoader.java"}}
{"prompt": "import androidx.annotation.NonNull\nstatic String extractCategory(@NonNull String mediaID) {\r\n    int pos = mediaID.indexOf(LEAF_SEPARATOR);", "choices": [{"text": ";\r\n    if (pos == -1) {\r\n        return null;\r\n    }\r\n    return mediaID.substring(0, pos);\r\n}\r\n\r\nstatic String extractTitle(@NonNull String mediaID) {\r\n    int pos = mediaID.indexOf(LEAF_SEPARATOR);\r\n    if (pos == -1) {\r\n        return null;\r\n    }\r\n    return mediaID.substring(pos + LEAF_SEPARATOR.length());\r\n}\r\n\r\nstatic String extractArtist(@NonNull String mediaID) {\r"}], "metadata": {"task_id": "VinylMusicPlayer/470", "ground_truth": "    if (pos >= 0) {\r\n        return mediaID.substring(0, pos);\r\n    }\r\n    return mediaID;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaIDHelper.java"}}
{"prompt": "import androidx.annotation.NonNull\nstatic String extractSubCategoryFromCategory(@NonNull String category) {\r\n    int pos = category.indexOf(CATEGORY_SEPARATOR);", "choices": [{"text": ";\r\n    if (pos > 0) {\r\n        return category.substring(0, pos);\r\n    } else {\r\n        return category;\r\n    }\r\n}\r\n\r\nimport android.content.Context;\r\nimport android.content.res.TypedArray;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.PorterDuffColorFilter;\r\nimport android.graphics.PorterD"}], "metadata": {"task_id": "VinylMusicPlayer/471", "ground_truth": "    if (pos >= 0) {\r\n        return category.substring(pos + CATEGORY_SEPARATOR.length());\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaIDHelper.java"}}
{"prompt": "import androidx.annotation.NonNull\nstatic String extractMusicID(@NonNull String mediaID) {\r\n    int pos = mediaID.indexOf(LEAF_SEPARATOR);", "choices": [{"text": ";\r\n    if (pos > 0) {\r\n        return mediaID.substring(0, pos);\r\n    } else {\r\n        return mediaID;\r\n    }\r\n}\r\n\r\nimport android.os.Bundle;\r\nimport android.support.v4.app.Fragment;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.ListView"}], "metadata": {"task_id": "VinylMusicPlayer/472", "ground_truth": "    if (pos >= 0) {\r\n        return mediaID.substring(pos + LEAF_SEPARATOR.length());\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaIDHelper.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "import React, { Component } from'react';\nimport PropTypes from 'prop-types';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { Link } from'react-router-dom';\nimport { LinkContainer } from'react-router-dom';\nimport { Link } from'react-router-dom';\nimport { LinkList } from'react-router-dom';\nimport { LinkListItem } from'react-router-dom';\nimport { LinkItem } from'react-router-dom';"}], "metadata": {"task_id": "VinylMusicPlayer/473", "ground_truth": "Builder path(@NonNull String fullPath) {\r\n    mBuilder.setMediaId(fullPath);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "import React, { Component } from'react';\nimport PropTypes from 'prop-types';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { Link } from'react-router-dom';\nimport { LinkContainer } from'react-router-dom';\nimport { Link } from'react-router-dom';\nimport { LinkList } from'react-router-dom';\nimport { LinkListItem } from'react-router-dom';\nimport { LinkItem } from'react-router-dom';"}], "metadata": {"task_id": "VinylMusicPlayer/474", "ground_truth": "Builder title(@NonNull String title) {\r\n    mBuilder.setTitle(title);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "import React, { Component } from'react';\nimport PropTypes from 'prop-types';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { Link } from'react-router-dom';\nimport { LinkContainer } from'react-router-dom';\nimport { Link } from'react-router-dom';\nimport { LinkList } from'react-router-dom';\nimport { LinkListItem } from'react-router-dom';\nimport { LinkItem } from'react-router-dom';"}], "metadata": {"task_id": "VinylMusicPlayer/475", "ground_truth": "Builder subTitle(@NonNull String subTitle) {\r\n    mBuilder.setSubtitle(subTitle);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "import React, { Component } from'react';\nimport PropTypes from 'prop-types';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { Link } from'react-router-dom';\nimport { LinkContainer } from'react-router-dom';\nimport { Link } from'react-router-dom';\nimport { LinkList } from'react-router-dom';\nimport { LinkListItem } from'react-router-dom';\nimport { LinkItem } from'react-router-dom';"}], "metadata": {"task_id": "VinylMusicPlayer/476", "ground_truth": "Builder icon(@NonNull Bitmap bitmap) {\r\n    mBuilder.setIconBitmap(bitmap);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "import React, { Component } from'react';\nimport PropTypes from 'prop-types';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { Link } from'react-router-dom';\nimport { LinkContainer } from'react-router-dom';\nimport { Link } from'react-router-dom';\nimport { LinkList } from'react-router-dom';\nimport { LinkListItem } from'react-router-dom';\nimport { LinkItem } from'react-router-dom';"}], "metadata": {"task_id": "VinylMusicPlayer/477", "ground_truth": "Builder asBrowsable() {\r\n    mFlags |= MediaBrowserCompat.MediaItem.FLAG_BROWSABLE;\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "import React, { Component } from'react';\nimport PropTypes from 'prop-types';\nimport { connect } from'react-redux';\nimport { bindActionCreators } from'redux';\nimport { Link } from'react-router-dom';\nimport { LinkContainer } from'react-router-dom';\nimport { Link } from'react-router-dom';\nimport { LinkList } from'react-router-dom';\nimport { LinkListItem } from'react-router-dom';\nimport { LinkItem } from'react-router-dom';"}], "metadata": {"task_id": "VinylMusicPlayer/478", "ground_truth": "Builder asPlayable() {\r\n    mFlags |= MediaBrowserCompat.MediaItem.FLAG_PLAYABLE;\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import android.util.Log\nimport android.os.PowerManager.WakeLock\nimport android.os.Message\nimport android.os.Handler\nstatic void releaseWakeLockIfHandlerIdle() {\r\n    if (mHandler.hasMessages(MSG_HEADSET_DOUBLE_CLICK_TIMEOUT)) {\r\n        if (DEBUG)\r\n            Log.v(TAG, \"Handler still has messages pending, not releasing wake lock\");\r\n        return;\r\n    }\r\n    if (mWakeLock != null) {\r\n        if (DEBUG)", "choices": [{"text": "\r\n            Log.v(TAG, \"Handler still has messages pending, releasing wake lock\");\r\n        mWakeLock.release();\r\n        mWakeLock = null;\r\n    }\r\n}\r\nstatic void releaseWakeLock() {\r\n    if (mWakeLock!= null) {\r\n        if (DEBUG)\r\n            Log.v(TAG, \"Handler still has messages pending, releasing wake lock\");\r\n        mWakeLock.release();\r\n        mWakeLock = null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/485", "ground_truth": "            Log.v(TAG, \"Releasing wake lock\");\r\n        mWakeLock.release();\r\n        mWakeLock = null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MediaButtonIntentReceiver.java"}}
{"prompt": "import android.os.Handler\n@Override\r\npublic void onChange(boolean selfChange) {\r\n    // if a change is detected, remove any scheduled callback\r\n    // then post a new one. This is intended to prevent closely\r\n    // spaced events from generating multiple refresh calls\r\n    synchronized (mMusicService) {\r\n        if (mHandler.getLooper().getThread().isAlive()) {", "choices": [{"text": "\r\n            mHandler.removeCallbacksAndMessages(null);\r\n        }\r\n        mMusicService.onChange(selfChange);\r\n        mHandler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                mMusicService.onChange(selfChange);\r\n            }\r\n        }, 1000);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/486", "ground_truth": "            mHandler.removeCallbacks(this);\r\n            mHandler.postDelayed(this, REFRESH_DELAY);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MediaStoreObserver.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.media.MediaPlayer\n/**\r\n * @param path The path of the file, or the http/rtsp URL of the stream\r\n *             you want to play\r\n * @return True if the <code>player</code> has been prepared and is\r\n * ready to play, false otherwise\r\n */\r\n@Override\r\npublic boolean setDataSource(@NonNull final String path) {\r\n    mIsInitialized = false;\r\n    mIsInitialized = setDataSourceImpl(mCurrentMediaPlayer, path);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/488", "ground_truth": "    if (mIsInitialized) {\r\n        setNextDataSource(null);\r\n    }\r\n    return mIsInitialized;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "private boolean mIsInitialized = false;\nprivate final Context context;\npublic static final String TAG = MultiPlayer.class.getSimpleName();\n /**\r\n * Starts or resumes playback.\r\n */\r\n@Override\r\npublic void start() {\r\n    try {", "choices": [{"text": ".\r\n */\r\npublic MultiPlayer(Context context) {\r\n\tthis.context = context;\r\n\tmIsInitialized = true;\r\n}\r\n\r\n/**\r\n * Stops playback.\r\n */\r\n@Override\r\npublic void stop() {\r\n\tif (!mIsInitialized) {\r\n\t\treturn;\r\n\t}\r\n\tmIsInitialized = false;\r\n}\r\n\r\n@Override\r\npublic void pause() {\r\n\tif (!mIsInitialized) {\r\n\t\treturn;\r\n\t}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/489", "ground_truth": "        mCurrentMediaPlayer.start();\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.media.MediaPlayer\n/**\r\n * Resets the MediaPlayer to its uninitialized state.\r\n */\r\n@Override", "choices": [{"text": ".media.MediaPlayer;\r\nimport android.os.Bundle;\r\nimport android.support.v4.app.Fragment;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;"}], "metadata": {"task_id": "VinylMusicPlayer/490", "ground_truth": "public void stop() {\r\n    mCurrentMediaPlayer.reset();\r\n    mIsInitialized = false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.media.MediaPlayer\n/**\r\n * Releases resources associated with this MediaPlayer object.\r\n */\r\n@Override\r\npublic void release() {\r\n    stop();\r\n    mCurrentMediaPlayer.release();\r\n    if (mNextMediaPlayer != null) {\r\n        mNextMediaPlayer.release();\r\n    }", "choices": [{"text": ";\r\n    mNextMediaPlayer = null;\r\n    mCurrentMediaPlayer = null;\r\n}\r\n\r\n@Override\r\npublic void pause() {\r\n    if (mCurrentMediaPlayer!= null) {\r\n        mCurrentMediaPlayer.pause();\r\n    }\r\n    if (mNextMediaPlayer!= null) {\r\n        mNextMediaPlayer.pause();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void play() {\r\n    if (mCurrentMediaPlayer!= null) {\r\n        mCurrentMediaPlayer.start();\r"}], "metadata": {"task_id": "VinylMusicPlayer/491", "ground_truth": "    if (mDynamicsProcessing != null) {\r\n        mDynamicsProcessing.release();\r\n        mDynamicsProcessing = null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "/**\r\n * Pauses playback. Call start() to resume.\r\n */\r\n@Override\r\npublic void pause() {\r\n    try {", "choices": [{"text": "{\r\n\t\tthis.play();\r\n\t}catch(Exception e){\r\n\t\te.printStackTrace();\r\n\t}\r\n}\r\n\r\n/**\r\n * Resumes playback. Call pause() to pause.\r\n */\r\n@Override\r\npublic void resume() {\r\n\ttry{\r\n\t\tthis.pause();\r\n\t}catch(Exception e){\r\n\t\te.printStackTrace();\r\n\t}\r\n}\r\n\r\n/**\r\n * Stops playback. Call pause() to pause.\r\n */\r\n@"}], "metadata": {"task_id": "VinylMusicPlayer/492", "ground_truth": "        mCurrentMediaPlayer.pause();\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import android.media.MediaPlayer\n/**\r\n * Gets the duration of the file.\r\n *\r\n * @return The duration in milliseconds\r\n */\r\n@Override\r\npublic int duration() {\r\n    if (!mIsInitialized) {\r\n        return -1;\r\n    }\r\n    try {\r\n        return mCurrentMediaPlayer.getDuration();", "choices": [{"text": "\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n}\r\n/**\r\n * Gets the duration of the file in milliseconds.\r\n *\r\n * @return The duration in milliseconds\r\n */\r\n@Override\r\npublic long durationInMillis() {\r\n    if (!mIsInitialized) {\r\n        return -1;\r\n    }\r\n    try {\r\n        return mCurrentMediaPlayer.getDurationInMillis();\r\n    } catch (Exception e) {\r\n        e.print"}], "metadata": {"task_id": "VinylMusicPlayer/493", "ground_truth": "    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import android.media.MediaPlayer\n/**\r\n * Gets the current playback position.\r\n *\r\n * @return The current position in milliseconds\r\n */\r\n@Override\r\npublic int position() {\r\n    if (!mIsInitialized) {\r\n        return -1;\r\n    }\r\n    try {\r\n        return mCurrentMediaPlayer.getCurrentPosition();", "choices": [{"text": "\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n}\r\n/**\r\n * Sets the current playback position.\r\n *\r\n * @param position The new position in milliseconds\r\n */\r\n@Override\r\npublic void position(int position) {\r\n    if (!mIsInitialized) {\r\n        return;\r\n    }\r\n    try {\r\n        mCurrentMediaPlayer.seekTo(position);\r\n    } catch (Exception e) {\r\n        e.printStackTrace"}], "metadata": {"task_id": "VinylMusicPlayer/494", "ground_truth": "    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "/**\r\n * Gets the current playback position.\r\n *\r\n * @param whereto The offset in milliseconds from the start to seek to\r\n */\r\n@Override\r\npublic void seek(final int whereto) {\r\n    try {", "choices": [{"text": ".\r\n     *\r\n     * @param whereto The offset in milliseconds from the start to seek to\r\n     */\r\n    @Override\r\n    public void seekTo(final int whereto) {\r\n        try {\r\n            this.currentTime = whereto;\r\n        } catch (final Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current playback position.\r\n     *\r\n     * @return The current playback position\r\n     */\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/495", "ground_truth": "        mCurrentMediaPlayer.seekTo(whereto);\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "/**\r\n * Set the replay gain to be applied immediately. It should match the tags of the current song.\r\n *\r\n * @param replaygain gain in dB, or NaN for no replay gain (equivalent to 0dB)\r\n */\r\n@Override", "choices": [{"text": "\ufeffusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\n\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/498", "ground_truth": "public void setReplayGain(float replaygain) {\r\n    this.replaygain = replaygain;\r\n    updateVolume();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "/**\r\n * Set the ducking factor to be applied immediately.\r\n *\r\n * @param duckingFactor gain as a linear factor, between 0.0 and 1.0.\r\n */\r\n@Override", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/499", "ground_truth": "public void setDuckingFactor(float duckingFactor) {\r\n    this.duckingFactor = duckingFactor;\r\n    updateVolume();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import android.media.MediaPlayer\n@Override\r\npublic void onCompletion(final MediaPlayer mp) {\r\n    if (mp == mCurrentMediaPlayer && mNextMediaPlayer != null) {\r\n        mIsInitialized = false;\r\n        mCurrentMediaPlayer.release();\r\n        mCurrentMediaPlayer = mNextMediaPlayer;\r\n        mIsInitialized = true;\r\n        mNextMediaPlayer = null;\r\n        if (callbacks != null)\r\n            callbacks.onTrackWentToNext();", "choices": [{"text": "\r\n    }\r\n}\r\n@Override\r\npublic void onError(final MediaPlayer mp, final int what, final int extra) {\r\n    if (mp == mCurrentMediaPlayer && mNextMediaPlayer!= null) {\r\n        mIsInitialized = false;\r\n        mCurrentMediaPlayer.release();\r\n        mCurrentMediaPlayer = mNextMediaPlayer;\r\n        mIsInitialized = true;\r\n        mNextMediaPlayer = null;\r\n        if (callbacks!= null)\r\n            callbacks.onTrackWentToNext();\r\n    }\r\n}\r"}], "metadata": {"task_id": "VinylMusicPlayer/500", "ground_truth": "    } else {\r\n        if (callbacks != null)\r\n            callbacks.onTrackEnded();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.os.HandlerThread\nimport android.os.Handler\nprivate void releaseResources() {\r\n    queueSaveHandler.removeCallbacksAndMessages(null);\r\n    queueSaveHandlerThread.quitSafely();\r\n    synchronized (this) {\r\n        playbackHandler.removeCallbacksAndMessages(null);\r\n        playbackHandlerThread.quitSafely();", "choices": [{"text": "\r\n    }\r\n}\r\nprivate Handler queueSaveHandler;\r\nprivate HandlerThread queueSaveHandlerThread;\r\nprivate Handler playbackHandler;\r\nprivate HandlerThread playbackHandlerThread;\r\nprivate Handler queueLoadHandler;\r\nprivate HandlerThread queueLoadHandlerThread;\r\nprivate Handler playbackHandler;\r\nprivate HandlerThread playbackHandlerThread;\r\nprivate Handler queuePlayHandler;\r\nprivate HandlerThread queuePlayHandlerThread;\r\nprivate Handler playbackHandler;\r\nprivate HandlerThread playbackHandlerThread;\r\nprivate Handler queuePauseHandler;\r\nprivate HandlerThread queuePauseHandlerThread;\r"}], "metadata": {"task_id": "VinylMusicPlayer/509", "ground_truth": "        playback.release();\r\n        playback = null;\r\n    }\r\n    mediaSession.release();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic boolean isPlaying(@NonNull Song song) {\r\n    synchronized (this) {\r\n        if (!isPlaying()) {", "choices": [{"text": "\r\n            return false;\r\n        }\r\n\r\n        if (song == null) {\r\n            return false;\r\n        }\r\n\r\n        if (song.getArtist() == null) {\r\n            return false;\r\n        }\r\n\r\n        if (song.getAlbum() == null) {\r\n            return false;\r\n        }\r\n\r\n        if (song.getTitle() == null) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r"}], "metadata": {"task_id": "VinylMusicPlayer/511", "ground_truth": "            return false;\r\n        }\r\n        return getCurrentSong().isQuickEqual(song);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "boolean openTrackAndPrepareNextAt(int position) {\r\n    synchronized (this) {\r\n        playingQueue.setCurrentPosition(position);\r\n        boolean prepared = openCurrent();\r\n        if (prepared)\r\n            prepareNextImpl();", "choices": [{"text": "(position);\r\n        return prepared;\r\n    }\r\n}\r\n\r\nboolean openTrack(int position) {\r\n    synchronized (this) {\r\n        playingQueue.setCurrentPosition(position);\r\n        boolean prepared = openCurrent();\r\n        if (prepared)\r\n            prepareNextImpl();\r\n        return prepared;\r\n    }\r\n}\r\n\r\nboolean openTrack() {\r\n    synchronized (this) {\r\n        playingQueue.setCurrentPosition(0);\r\n        boolean prepared = openCurrent();\r\n        if ("}], "metadata": {"task_id": "VinylMusicPlayer/514", "ground_truth": "        notifyChange(META_CHANGED);\r\n        notHandledMetaChangedForCurrentTrack = false;\r\n        return prepared;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nprivate boolean openCurrent() {\r\n    synchronized (this) {\r\n        try {\r\n            return (playback != null) && playback.setDataSource(getTrackUri(getCurrentSong()));\r\n        } catch (Exception e) {", "choices": [{"text": "\r\n            return false;\r\n        }\r\n    }\r\n}\r\nprivate String getTrackUri(Song song) {\r\n    return song.getTrackUri();\r\n}\r\nprivate Song getCurrentSong() {\r\n    synchronized (this) {\r\n        return currentSong;\r\n    }\r\n}\r\nprivate void setCurrentSong(Song song) {\r\n    synchronized (this) {\r\n        currentSong = song;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/515", "ground_truth": "            OopsHandler.collectStackTrace(e);\r\n            return false;\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "private void updateNotification() {\r\n    if (!getPlayingQueue().isEmpty()) {\r\n        idleNotification.stop();\r\n        playingNotification.update();", "choices": [{"text": "\r\n    } else {\r\n        idleNotification.start();\r\n        playingNotification.update();\r\n    }\r\n}\r\n\r\nprivate List<String> getPlayingQueue() {\r\n    return playingQueue;\r\n}\r\n\r\nprivate void setPlayingQueue(List<String> playingQueue) {\r\n    this.playingQueue = playingQueue;\r\n}\r\n\r\nprivate List<String> getIdleQueue() {\r\n    return idleQueue;\r\n}\r\n\r\nprivate void setIdleQueue(List<String> idleQueue"}], "metadata": {"task_id": "VinylMusicPlayer/518", "ground_truth": "    } else {\r\n        playingNotification.stop();\r\n        idleNotification.update();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport com.poupa.vinylmusicplayer.util.OopsHandler\nimport com.poupa.vinylmusicplayer.service.notification.CrashNotification\nimport com.poupa.vinylmusicplayer.R\nimport android.os.Handler\nprivate void updateCrashNotification() {\r\n    final List<String> crashReports = PreferenceUtil.getInstance().getOopsHandlerReports();\r\n    if (crashReports != null && !crashReports.isEmpty()) {", "choices": [{"text": "\r\n        final Handler handler = new Handler();\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                final CrashNotification.Builder builder = new CrashNotification.Builder(R.drawable.ic_launcher);\r\n                for (final String crashReport : crashReports) {\r\n                    builder.addCrashReport(crashReport);\r\n                }\r\n                CrashNotification notification = builder.build();\r\n                notification.show();\r\n            }\r\n        }, 1000);\r\n    }"}], "metadata": {"task_id": "VinylMusicPlayer/519", "ground_truth": "        crashNotification.update();\r\n    } else {\r\n        crashNotification.stop();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.misc.queue.IndexedSong\npublic IndexedSong getIndexedSongAt(int position) {\r\n    synchronized (this) {\r\n        if (position >= 0 && position < playingQueue.size()) {\r\n            return playingQueue.getPlayingQueue().get(position);", "choices": [{"text": ";\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\npublic Song getSongAt(int position) {\r\n    synchronized (this) {\r\n        if (position >= 0 && position < playingQueue.size()) {\r\n            return playingQueue.getPlayingQueue().get(position).getSong();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/521", "ground_truth": "        } else {\r\n            return IndexedSong.EMPTY_INDEXED_SONG;\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\npublic void cycleRepeatMode() {", "choices": [{"text": ".cycleRepeatMode;\nimport com.poupa.vinylmusicplayer.R.drawable;\nimport com.poupa.vinylmusicplayer.R.id;\nimport com.poupa.vinylmusicplayer.R.layout;\nimport com.poupa.vinylmusicplayer.R.menu;\nimport com.poupa.vinylmusicplayer.R.menuitem;\nimport com.poupa.vinylmusicplayer.R.string;\nimport com.poupa.vinylmusicplayer"}], "metadata": {"task_id": "VinylMusicPlayer/525", "ground_truth": "    synchronized (this) {\r\n        playingQueue.cycleRepeatMode();\r\n    }\r\n    propagateRepeatChange();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void toggleShuffle() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/529", "ground_truth": "    synchronized (this) {\r\n        playingQueue.toggleShuffle();\r\n    }\r\n    propagateShuffleChange();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void setShuffleMode(final int shuffleMode) {", "choices": [{"text": "\n\t\tthis.shuffleMode = shuffleMode;\n\t}\n\n\tpublic int getShuffleMode() {\n\t\treturn shuffleMode;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"ShuffleMode [shuffleMode=\" + shuffleMode + \"]\";\n\t}\n}\n"}], "metadata": {"task_id": "VinylMusicPlayer/530", "ground_truth": "    synchronized (this) {\r\n        playingQueue.setShuffle(shuffleMode);\r\n    }\r\n    propagateShuffleChange();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic void addSongAfter(int position, Song song) {", "choices": [{"text": ".Song song) {\n\tfor (int i = 0; i < position; i++) {\n\t\taddSongAfter(i, song);\n\t}\n}\npublic void addSongAfter(int position, Song song) {\n\tfor (int i = 0; i < position; i++) {\n\t\taddSongAfter(i, song);\n\t}\n}\npublic void addSongBefore(int position, Song song) {\n\tfor (int i = 0; i < position; i++) {\n\t\taddSongBefore("}], "metadata": {"task_id": "VinylMusicPlayer/532", "ground_truth": "    synchronized (this) {\r\n        playingQueue.addAfter(position, song);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.misc.queue.IndexedSong\npublic void addSongBackTo(int position, IndexedSong song) {", "choices": [{"text": ".Song;\nimport com.poupa.vinylmusicplayer.misc.queue.IndexedSong;\nimport com.poupa.vinylmusicplayer.misc.queue.IndexedSongList;\nimport com.poupa.vinylmusicplayer.misc.queue.SongList;\nimport com.poupa.vinylmusicplayer.misc.queue.SongListBuilder;\nimport com.poupa.vinylmusicplayer.misc.queue.SongListIterator;\nimport com.poupa.vinylm"}], "metadata": {"task_id": "VinylMusicPlayer/533", "ground_truth": "    synchronized (this) {\r\n        playingQueue.addSongBackTo(position, song);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\npublic void addSongsAfter(int position, Collection<? extends Song> songs) {", "choices": [{"text": "\n\tfor (Song song : songs) {\n\t\tif (song.getPosition() > position) {\n\t\t\tsong.setPosition(song.getPosition() + 1);\n\t\t}\n\t}\n}\npublic void addSongsBefore(int position, Collection<? extends Song> songs) {\n\tfor (Song song : songs) {\n\t\tif (song.getPosition() < position) {\n\t\t\tsong.setPosition(song.getPosition() - 1);\n\t\t}\n\t}\n"}], "metadata": {"task_id": "VinylMusicPlayer/534", "ground_truth": "    synchronized (this) {\r\n        playingQueue.addAllAfter(position, songs);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic void addSong(Song song) {", "choices": [{"text": "{\n\tthis.songs.add(song);\n}\npublic void removeSong(Song song) {\n\tthis.songs.remove(song);\n}\npublic Song getSong(int index) {\n\treturn this.songs.get(index);\n}\npublic void setSong(int index, Song song) {\n\tthis.songs.set(index, song);\n}\npublic Song[] getSongs() {\n\treturn this.songs.toArray(new Song[this.songs.size()]);\n}"}], "metadata": {"task_id": "VinylMusicPlayer/535", "ground_truth": "    synchronized (this) {\r\n        playingQueue.add(song);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\npublic void addSongs(Collection<? extends Song> songs) {", "choices": [{"text": "[][] songs) {\n\tfor (int i = 0; i < songs.length; i++) {\n\t\tfor (int j = 0; j < songs[i].length; j++) {\n\t\t\taddSong(songs[i][j]);\n\t\t}\n\t}\n}\npublic void addSong(Song song) {\n\tsongs.add(song);\n}\npublic void addSongs(Collection<Song> songs) {\n\tfor (Song song : songs) {\n\t\taddS"}], "metadata": {"task_id": "VinylMusicPlayer/536", "ground_truth": "    synchronized (this) {\r\n        playingQueue.addAll(songs);\r\n        notifyChange(QUEUE_CHANGED);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic void removeSongs(@NonNull List<Song> songs) {\r\n    synchronized (this) {\r\n        int newPosition = playingQueue.removeSongs(songs);\r\n        if (newPosition != -1) {", "choices": [{"text": " return;\r\n        }\r\n    }\r\n    for (Song song : songs) {\r\n        playingQueue.addSong(song);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "VinylMusicPlayer/537", "ground_truth": "            setPosition(newPosition);\r\n        }\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic void moveSong(int from, int to) {", "choices": [{"text": ") {\n\tSong song = new Song();\n\tsong.setId(from);\n\tsong.setTitle(to);\n\tsong.setArtist(from);\n\tsong.setAlbum(from);\n\tsong.setYear(from);\n\tsong.setGenre(from);\n\tsong.setRating(from);\n\tsong.setGenre(to);\n\tsong.setGenre(to);\n\tsong.setGenre(to);\n\tsong.setGenre(to);"}], "metadata": {"task_id": "VinylMusicPlayer/538", "ground_truth": "    synchronized (this) {\r\n        playingQueue.move(from, to);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void clearQueue() {\r\n    synchronized (this) {", "choices": [{"text": "\r\n    if (queue.size() > 0) {\r\n      queue.clear();\r\n    }\r\n  }\r\n\r\n  public void enqueue(Object item) {\r\n\r\n    synchronized (this) {\r\n      queue.add(item);\r\n    }\r\n  }\r\n\r\n  public Object dequeue() {\r\n\r\n    synchronized (this) {\r\n      if (queue.size() > 0) {\r\n        return queue.remove();\r\n      } else {\r\n        return null;\r\n      }\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/539", "ground_truth": "        playingQueue.clear();\r\n        setPosition(-1);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nstatic final String VINYL_MUSIC_PLAYER_PACKAGE_NAME = \"com.poupa.vinylmusicplayer\";\npublic static final String ACTION_PLAY_PLAYLIST = VINYL_MUSIC_PLAYER_PACKAGE_NAME + \".play.playlist\";\nHandlerThread playbackHandlerThread;\nvoid playSongAtImpl(int position) {\r\n    if (openTrackAndPrepareNextAt(position)) {", "choices": [{"text": "\r\n        playbackHandlerThread.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                playSongAt(position);\r\n            }\r\n        }, 1000);\r\n    }\r\n}\r\nvoid playSongAt(int position) {\r\n    if (openTrackAndPrepareNextAt(position)) {\r\n        playbackHandlerThread.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                playSongAt(position);\r\n            }\r\n        }, 1000);"}], "metadata": {"task_id": "VinylMusicPlayer/542", "ground_truth": "        play();\r\n    } else {\r\n        SafeToast.show(this, getResources().getString(R.string.unplayable_file));\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void pause() {\r\n    synchronized (this) {\r\n        pausedByTransientLossOfFocus = false;\r\n        if (playback.isPlaying()) {", "choices": [{"text": "\r\n            playback.pause();\r\n        }\r\n    }\r\n}\r\n\r\npublic void resume() {\r\n    synchronized (this) {\r\n        pausedByTransientLossOfFocus = true;\r\n        if (playback.isPlaying()) {\r\n            playback.resume();\r\n        }\r\n    }\r\n}\r\n\r\npublic void stop() {\r\n    synchronized (this) {\r\n        pausedByTransientLossOfFocus = true;\r\n        if (playback.isPlaying()) {\r\n            playback.stop();\r"}], "metadata": {"task_id": "VinylMusicPlayer/543", "ground_truth": "            playback.pause();\r\n            notifyChange(PLAY_STATE_CHANGED);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\npublic void back(boolean skippedLast) {\r\n    if (getSongProgressMillis() > SKIP_THRESHOLD_MS) {", "choices": [{"text": "\r\n        return;\r\n    }\r\n    if (skippedLast) {\r\n        if (getSongProgressMillis() > SKIP_THRESHOLD_MS) {\r\n            return;\r\n        }\r\n    } else {\r\n        if (getSongProgressMillis() > SKIP_THRESHOLD_MS) {\r\n            return;\r\n        }\r\n    }\r\n    if (getSongProgressMillis() > SKIP_THRESHOLD_MS) {\r\n        return;\r\n    }\r\n    if (getSongProgressMillis() > SKIP_THRESHOLD_"}], "metadata": {"task_id": "VinylMusicPlayer/545", "ground_truth": "        seek(0);\r\n    } else {\r\n        playPreviousSong(skippedLast);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void seek(int millis) {\r\n    synchronized (this) {\r\n        if (playback != null) {", "choices": [{"text": "\r\n            playback.seek(millis);\r\n        }\r\n    }\r\n}\r\n\r\npublic void pause() {\r\n    synchronized (this) {\r\n        if (playback!= null) {\r\n            playback.pause();\r\n        }\r\n    }\r\n}\r\n\r\npublic void play() {\r\n    synchronized (this) {\r\n        if (playback!= null) {\r\n            playback.play();\r\n        }\r\n    }\r\n}\r\n\r\npublic void stop() {\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/549", "ground_truth": "            playback.seek(millis);\r\n        }\r\n    }\r\n    throttledSeekHandler.notifySeek();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "@Override\r\npublic void onTrackEnded() {\r\n    acquireWakeLock(30000);\r\n    synchronized (this) {", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onTrackStarted() {\r\n    acquireWakeLock(30000);\r\n}\r\n\r\n@Override\r\npublic void onTrackPaused() {\r\n    acquireWakeLock(30000);\r\n}\r\n\r\n@Override\r\npublic void onTrackResumed() {\r\n    acquireWakeLock(30000);\r\n}\r\n\r\n@Override\r\npublic void onTrackStopped() {\r\n    acquireWakeLock(30000);\r\n}\r\n\r\n@Override\r\npublic"}], "metadata": {"task_id": "VinylMusicPlayer/556", "ground_truth": "        if (playbackHandlerThread.isAlive()) {\r\n            playbackHandler.sendEmptyMessage(TRACK_ENDED);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport android.provider.MediaStore\nprivate void onDiscographyChanged() {\r\n    final boolean resync = PreferenceUtil.getInstance().isQueueSyncWithMediaStoreEnabled();\r\n    if (resync) {\r\n        // If a song is removed from the MediaStore, or updated (tags edited)", "choices": [{"text": ",\r\n        // we need to remove the song from the MediaStore.\r\n        final Discography discography = PreferenceUtil.getInstance().getDiscography();\r\n        if (discography!= null) {\r\n            discography.getSongs().remove(discography.getSongs().indexOf(discography.getSong()));\r\n            if (discography.getSongs().isEmpty()) {\r\n                PreferenceUtil.getInstance().setDiscography(null);\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/561", "ground_truth": "        // reload the queues so that they reflects the latest change\r\n        saveState();\r\n        restoreState();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nvoid notifySongChanged(Song song) {", "choices": [{"text": ".model.Song;\nimport com.poupa.vinylmusicplayer.model.SongList;\nimport com.poupa.vinylmusicplayer.model.User;\nimport com.poupa.vinylmusicplayer.model.UserList;\nimport com.poupa.vinylmusicplayer.model.UserSong;\nimport com.poupa.vinylmusicplayer.model.UserSongList;\nimport com.poupa.vinylmusicplayer.service.SongService;\nimport com."}], "metadata": {"task_id": "VinylMusicPlayer/572", "ground_truth": "    synchronized (this) {\r\n        stopWatch.reset();\r\n        this.song = song;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\SongPlayCountHelper.java"}}
{"prompt": "void notifyPlayStateChanged(boolean isPlaying) {\r\n    synchronized (this) {\r\n        if (isPlaying) {\r\n            stopWatch.start();", "choices": [{"text": "\r\n        }\r\n        else {\r\n            stopWatch.stop();\r\n        }\r\n    }\r\n}\r\n\r\nvoid notifyStopStateChanged(boolean isStopping) {\r\n    synchronized (this) {\r\n        if (isStopping) {\r\n            stopWatch.start();\r\n        }\r\n        else {\r\n            stopWatch.stop();\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/573", "ground_truth": "        } else {\r\n            stopWatch.pause();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\SongPlayCountHelper.java"}}
{"prompt": "import android.os.Handler\nprivate final MusicService mMusicService;\nprivate final Handler mHandler;\npublic void notifySeek() {\r\n    synchronized (mMusicService) {\r\n        if (mHandler.getLooper().getThread().isAlive()) {", "choices": [{"text": "\r\n            mMusicService.notifySeek();\r\n        }\r\n    }\r\n}\r\npublic void notifyPlay() {\r\n    synchronized (mMusicService) {\r\n        if (mHandler.getLooper().getThread().isAlive()) {\r\n            mMusicService.notifyPlay();\r\n        }\r\n    }\r\n}\r\npublic void notifyStop() {\r\n    synchronized (mMusicService) {\r\n        if (mHandler.getLooper().getThread().isAlive()) {\r\n            mMusicService."}], "metadata": {"task_id": "VinylMusicPlayer/574", "ground_truth": "            mHandler.removeCallbacks(this);\r\n            mHandler.postDelayed(this, THROTTLE);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\ThrottledSeekHandler.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static SortOrder<Album> fromPreference(@NonNull String preferenceValue) {\r\n    SortOrder<Album> match = Utils.collectionSearch(SUPPORTED_ORDERS, preferenceValue, x -> x.preferenceValue);", "choices": [{"text": ".SUPPORTED_ORDERS);\r\n    if (match!= null) {\r\n        return match;\r\n    } else {\r\n        return new SortOrder<>(preferenceValue);\r\n    }\r\n}\r\n\r\npublic static class SortOrder<T> {\r\n    private final String preferenceValue;\r\n\r\n    public SortOrder(@NonNull String preferenceValue) {\r\n        this.preferenceValue = preferenceValue;\r\n    }\r\n\r\n    @NonNull\r\n    public String preferenceValue() {\r\n        return preferenceValue;\r\n    }\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/576", "ground_truth": "    if (match == null) {\r\n        match = SUPPORTED_ORDERS.get(0);\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\AlbumSortOrder.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static SortOrder<Artist> fromPreference(@NonNull String preferenceValue) {\r\n    SortOrder<Artist> match = Utils.collectionSearch(SUPPORTED_ORDERS, preferenceValue, x -> x.preferenceValue);", "choices": [{"text": ".values());\r\n    if (match!= null) {\r\n        return match;\r\n    }\r\n    throw new IllegalArgumentException(preferenceValue);\r\n}\r\n\r\n@NonNull\r\npublic static String toPreference(@NonNull SortOrder<Artist> order) {\r\n    return order.preferenceValue;\r\n}\r\n\r\n@NonNull\r\npublic static SortOrder<Artist>[] getSupportedOrders() {\r\n    return SUPPORTED_ORDERS;\r\n}\r\n\r\n@NonNull\r\npublic static class SortOrder<Artist> {\r\n\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/578", "ground_truth": "    if (match == null) {\r\n        match = SUPPORTED_ORDERS.get(0);\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\ArtistSortOrder.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static SortOrder<File> fromPreference(@NonNull final String preferenceValue) {\r\n    SortOrder<File> match = Utils.collectionSearch(SUPPORTED_ORDERS, preferenceValue, x -> x.preferenceValue);", "choices": [{"text": ");\r\n    if (match!= null) {\r\n        return match;\r\n    }\r\n    return new SortOrder<>(preferenceValue);\r\n}\r\n\r\npublic static class SortOrder<T> {\r\n\r\n    private final String preferenceValue;\r\n\r\n    public SortOrder(@NonNull final String preferenceValue) {\r\n        this.preferenceValue = preferenceValue;\r\n    }\r\n\r\n    @NonNull\r\n    public String preferenceValue() {\r\n        return preferenceValue;\r\n    }\r\n\r\n    @NonNull\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/580", "ground_truth": "    if (match == null) {\r\n        match = SUPPORTED_ORDERS.get(0);\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\FileSortOrder.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static SortOrder<Song> fromPreference(@NonNull String preferenceValue) {\r\n    SortOrder<Song> match = Utils.collectionSearch(SUPPORTED_ORDERS, preferenceValue, x -> x.preferenceValue);", "choices": [{"text": ".values());\r\n    if (match!= null) {\r\n        return match;\r\n    } else {\r\n        return new SortOrder<>(preferenceValue);\r\n    }\r\n}\r\n\r\npublic static class SortOrder<Song> {\r\n    private final String preferenceValue;\r\n\r\n    public SortOrder(@NonNull String preferenceValue) {\r\n        this.preferenceValue = preferenceValue;\r\n    }\r\n\r\n    @NonNull\r\n    public String preferenceValue() {\r\n        return preferenceValue;\r\n    }\r\n\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/582", "ground_truth": "    if (match == null) {\r\n        match = SUPPORTED_ORDERS.get(0);\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\SongSortOrder.java"}}
{"prompt": "import java.util.Date\nimport androidx.annotation.NonNull\n@NonNull\r\nstatic String getSectionName(long seconds) {\r\n    final Date date = new Date(1000L * seconds);\r\n    final long millisOneDay = 1000L * 60L * 60L * 24L;\r\n    final long daysSinceToday = ((new Date()).getTime() - date.getTime()) / millisOneDay;\r\n    String format = \"yyyy\";\r\n    if (daysSinceToday >= 0) {\r\n        if (daysSinceToday < 7) {\r\n            format = \"EEE\";\r\n        } else if (daysSinceToday < 365) {", "choices": [{"text": "\r\n            format = \"EEEE\";\r\n        } else if (daysSinceToday < 365 * 7) {\r\n            format = \"EEEEE\";\r\n        } else if (daysSinceToday < 365 * 365 * 7) {\r\n            format = \"EEEEEE\";\r\n        } else if (daysSinceToday < 365 * 365 * 365 * 7) {\r\n            format = \"EEEEEEE\";\r\n        } else if (daysSinceToday < 365 * 365 * 365 * 365 * 7) {\r\n            format = \"EEEE"}], "metadata": {"task_id": "VinylMusicPlayer/585", "ground_truth": "            format = \"MMM\";\r\n        }\r\n    }\r\n    return android.text.format.DateFormat.format(format, date).toString();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\SortOrder.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\nstatic String getSectionName(@NonNull final String name) {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/586", "ground_truth": "    if (TextUtils.isEmpty(name)) {\r\n        return \"\";\r\n    }\r\n    return String.valueOf(name.charAt(0)).toUpperCase();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\SortOrder.java"}}
{"prompt": "import java.util.function.Function\nimport androidx.annotation.NonNull\nstatic <T, U> T collectionSearch(@NonNull final Iterable<? extends T> collection, final U searchValue, @NonNull final Function<T, U> valueExtractor) {\r\n    T match = null;\r\n    for (final T item : collection) {\r\n        if (valueExtractor.apply(item).equals(searchValue)) {\r\n            match = item;", "choices": [{"text": ";\r\n            break;\r\n        }\r\n    }\r\n    return match;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/587", "ground_truth": "            break;\r\n        }\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\SortOrder.java"}}
{"prompt": "import android.view.View\nprivate void setUpViews() {", "choices": [{"text": "View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.ListView;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport butterknife.Unbinder;\n\npublic class"}], "metadata": {"task_id": "VinylMusicPlayer/589", "ground_truth": "    setUpToolbar();\r\n    setUpAppVersion();\r\n    setUpContributorsView();\r\n    setUpOnClickListeners();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AboutActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {", "choices": [{"text": "\r\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/594", "ground_truth": "        onBackPressed();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AboutActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.adapter.song.AlbumSongAdapter\nimport com.poupa.vinylmusicplayer.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.GridLayoutManager\nimport android.view.View\nprivate void setUpSongsAdapter() {\r\n    adapter = new AlbumSongAdapter(this, getAlbum().songs, false, this);\r\n    layoutBinding.list.setLayoutManager(new GridLayoutManager(this, 1));\r\n    layoutBinding.list.setAdapter(adapter);\r\n    adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\r\n\r\n        @Override\r\n        public void onChanged() {\r\n            super.onChanged();\r\n            if (adapter.getItemCount() == 0) {", "choices": [{"text": "\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onItemRangeInserted(int positionStart, int itemCount) {\r\n            super.onItemRangeInserted(positionStart, itemCount);\r\n            if (adapter.getItemCount() == 0) {\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onItemRangeRemoved(int positionStart, int itemCount) {\r\n            super.onItemRangeRemoved(positionStart"}], "metadata": {"task_id": "VinylMusicPlayer/602", "ground_truth": "                finish();\r\n            }\r\n        }\r\n    });\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "public static final String EXTRA_ALBUM_ID = \"extra_album_id\";\nAlbumSongAdapter adapter;\nprivate static final int TAG_EDITOR_REQUEST = 2001;\n @Override\r\npublic void onChanged() {", "choices": [{"text": "\r\npublic void onCreate(Bundle savedInstanceState) {\r\n\tsuper.onCreate(savedInstanceState);\r\n\tsetContentView(R.layout.activity_album_song);\r\n\tadapter = new AlbumSongAdapter(this, R.layout.item_album_song);\r\n\tgetListView().setAdapter(adapter);\r\n\tgetListView().setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n\t\t@Override\r\n\t\tpublic void onItemClick(AdapterView<?> parent, View view, int position, long"}], "metadata": {"task_id": "VinylMusicPlayer/603", "ground_truth": "    super.onChanged();\r\n    if (adapter.getItemCount() == 0) {\r\n        finish();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, final Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);", "choices": [{"text": "(requestCode, resultCode, data);\r\n    switch (requestCode) {\r\n        case R.id.action_play:\r\n            Intent intent = new Intent(this, PlayActivity.class);\r\n            startActivityForResult(intent, R.id.action_play);\r\n            break;\r\n        case R.id.action_pause:\r\n            Intent intent = new Intent(this, PauseActivity.class);\r\n            startActivityForResult(intent, R.id.action_pause);\r\n            break;\r\n        case R."}], "metadata": {"task_id": "VinylMusicPlayer/605", "ground_truth": "    if (requestCode == TAG_EDITOR_REQUEST) {\r\n        reload();\r\n        setResult(RESULT_OK);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic void onBackPressed() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);", "choices": [{"text": "\r\n        cab = null;\r\n    }\r\n    super.onBackPressed();\r\n}\r\n@Override\r\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\r\n    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n        if (cab!= null && AttachedCabKt.isActive(cab)) {\r\n            AttachedCabKt.destroy(cab);\r\n            cab = null;\r\n        }\r\n        return true;\r\n    }\r\n    return super.onKey"}], "metadata": {"task_id": "VinylMusicPlayer/607", "ground_truth": "    } else {\r\n        layoutBinding.list.stopScroll();\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/610", "ground_truth": "public void setStatusbarColor(int color) {\r\n    super.setStatusbarColor(color);\r\n    setLightStatusbar(false);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Album\nprivate Album getAlbum() {", "choices": [{"text": "Album() {\n\treturn album;\n}\npublic void setAlbum(Album album) {\n\tthis.album = album;\n}\npublic String getArtist() {\n\treturn artist;\n}\npublic void setArtist(String artist) {\n\tthis.artist = artist;\n}\npublic String getTitle() {\n\treturn title;\n}\npublic void setTitle(String title) {\n\tthis.title = title;\n}\npublic String getDescription() {\n\treturn description;\n}\npublic void setDescription(String description) {\n\tthis.description = description;"}], "metadata": {"task_id": "VinylMusicPlayer/611", "ground_truth": "    if (album == null) {\r\n        album = new Album();\r\n    }\r\n    return album;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "public static final String EXTRA_ARTIST_ID = \"extra_artist_id\";\nprivate static final int REQUEST_CODE_SELECT_IMAGE = 1000;\nprivate static final int LOADER_ID = LoaderIds.ARTIST_DETAIL_ACTIVITY;\n @Override\r\npublic void onChanged() {", "choices": [{"text": "\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        switch (requestCode) {\r\n            case REQUEST_CODE_SELECT_IMAGE:\r\n                if (resultCode == RESULT_OK) {\r\n                    Uri imageUri = data.getData();\r\n                    if (imageUri!= null) {\r\n                        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\r\n                        intent.setType(\"image/*\""}], "metadata": {"task_id": "VinylMusicPlayer/618", "ground_truth": "    super.onChanged();\r\n    if (albumAdapter.getItemCount() == 0) {\r\n        finish();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.CustomArtistImageUtil\nimport com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.R\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, final Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    if (requestCode == REQUEST_CODE_SELECT_IMAGE) {\r\n        if (resultCode == RESULT_OK) {\r\n            CustomArtistImageUtil.getInstance(this).setCustomArtistImage(artist, data.getData(), this::loadArtistImage);\r\n        }\r\n    } else {", "choices": [{"text": "\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n}\r\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    if (requestCode == REQUEST_CODE_SELECT_IMAGE) {\r\n        if (resultCode == RESULT_OK) {\r\n            CustomArtistImageUtil.getInstance(this).setCustomArtistImage(artist, data.getData(), this::loadArtistImage"}], "metadata": {"task_id": "VinylMusicPlayer/621", "ground_truth": "        if (resultCode == RESULT_OK) {\r\n            reload();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic void onBackPressed() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);", "choices": [{"text": "\r\n        cab = null;\r\n    }\r\n    super.onBackPressed();\r\n}\r\n@Override\r\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\r\n    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n        if (cab!= null && AttachedCabKt.isActive(cab)) {\r\n            AttachedCabKt.destroy(cab);\r\n            cab = null;\r\n        }\r\n        return true;\r\n    }\r\n    return super.onKey"}], "metadata": {"task_id": "VinylMusicPlayer/625", "ground_truth": "    } else {\r\n        albumRecyclerView.stopScroll();\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/626", "ground_truth": "public void setStatusbarColor(int color) {\r\n    super.setStatusbarColor(color);\r\n    setLightStatusbar(false);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Artist\nprivate Artist getArtist() {", "choices": [{"text": ".getArtist() {\n\treturn artist;\n}\npublic void setArtist(Artist artist) {\n\tthis.artist = artist;\n}\npublic String getArtistName() {\n\treturn artistName;\n}\npublic void setArtistName(String artistName) {\n\tthis.artistName = artistName;\n}\npublic String getArtistArtist() {\n\treturn artistArtist;\n}\npublic void setArtistArtist(String artistArtist) {\n\tthis.artistArtist = artistArtist;\n}\npublic String"}], "metadata": {"task_id": "VinylMusicPlayer/627", "ground_truth": "    if (artist == null) {\r\n        artist = Artist.EMPTY;\r\n    }\r\n    return artist;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "import androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\nprotected void onPostCreate(@Nullable Bundle savedInstanceState) {", "choices": [{"text": "\r\n        super.onPostCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(this);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        getMenuInflater().inflate(R.menu.menu_main, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public"}], "metadata": {"task_id": "VinylMusicPlayer/632", "ground_truth": "    super.onPostCreate(savedInstanceState);\r\n    if (!hasPermissions()) {\r\n        requestPermissions();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsBaseActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.os.Build\nimport android.content.pm.PackageManager\nprotected boolean hasPermissions() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && permissions != null) {\r\n        for (String permission : permissions) {\r\n            if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r\n                return false;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/635", "ground_truth": "            }\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsBaseActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport com.poupa.vinylmusicplayer.R\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    final Discography discog = Discography.getInstance();\r\n    discog.removeActivity(this);\r\n    MusicPlayerRemote.unbindFromService(serviceToken);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/636", "ground_truth": "    if (receiverRegistered) {\r\n        unregisterReceiver(musicStateReceiver);\r\n        receiverRegistered = false;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nimport com.poupa.vinylmusicplayer.R\n@Override\r\npublic void onServiceDisconnected() {\r\n    if (receiverRegistered) {\r\n        unregisterReceiver(musicStateReceiver);\r\n        receiverRegistered = false;\r\n    }\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\r\n        listener.onServiceDisconnected();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onServiceConnected() {\r\n    if (receiverRegistered) {\r\n        unregisterReceiver(musicStateReceiver);\r\n        receiverRegistered = false;\r\n    }\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onServiceConnected();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/639", "ground_truth": "        if (listener != null) {\r\n            listener.onServiceDisconnected();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nprivate MusicStateReceiver musicStateReceiver;\nprivate final ArrayList<MusicServiceEventListener> mMusicServiceEventListeners = new ArrayList<>();\nprivate MusicPlayerRemote.ServiceToken serviceToken;\n@Override\r\npublic void onPlayingMetaChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\r\n        listener.onPlayingMetaChanged();\r\n    }\r\n}\r\n@Override\r\npublic void onPausedMetaChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onPausedMetaChanged();\r\n    }\r\n}\r\n@Override\r\npublic void onVolumeChanged(float volume) {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onVolumeChanged(volume);\r\n    }\r\n}\r\n@Override\r\npublic void on"}], "metadata": {"task_id": "VinylMusicPlayer/640", "ground_truth": "        if (listener != null) {\r\n            listener.onPlayingMetaChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\n@Override\r\npublic void onQueueChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\r\n        listener.onQueueChanged();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onPlaying() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onPlaying();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onPaused() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onPaused();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onStopped() {\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/641", "ground_truth": "        if (listener != null) {\r\n            listener.onQueueChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nprivate MusicStateReceiver musicStateReceiver;\nprivate boolean receiverRegistered;\nprivate final ArrayList<MusicServiceEventListener> mMusicServiceEventListeners = new ArrayList<>();\n@Override\r\npublic void onPlayStateChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\r\n        listener.onPlayStateChanged();\r\n    }\r\n}\r\n@Override\r\npublic void onPause() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onPause();\r\n    }\r\n}\r\n@Override\r\npublic void onResume() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onResume();\r\n    }\r\n}\r\n@Override\r\npublic void onStop() {\r\n    for (MusicServiceEventListener"}], "metadata": {"task_id": "VinylMusicPlayer/642", "ground_truth": "        if (listener != null) {\r\n            listener.onPlayStateChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\n@Override\r\npublic void onMediaStoreChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\r\n        listener.onMediaStoreChanged();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onMediaControllerChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onMediaControllerChanged();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onMediaPlayerChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onMediaPlayerChanged();\r\n    }\r\n}\r\n\r\n@Override\r\npublic"}], "metadata": {"task_id": "VinylMusicPlayer/643", "ground_truth": "        if (listener != null) {\r\n            listener.onMediaStoreChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nimport com.poupa.vinylmusicplayer.R\n@Override\r\npublic void onRepeatModeChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\r\n        listener.onRepeatModeChanged();\r\n    }\r\n}\r\n@Override\r\npublic void onPause() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onPause();\r\n    }\r\n}\r\n@Override\r\npublic void onResume() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onResume();\r\n    }\r\n}\r\n@Override\r\npublic void onStop() {\r\n    for (MusicServiceEventListener"}], "metadata": {"task_id": "VinylMusicPlayer/644", "ground_truth": "        if (listener != null) {\r\n            listener.onRepeatModeChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nprivate MusicStateReceiver musicStateReceiver;\nprivate final ArrayList<MusicServiceEventListener> mMusicServiceEventListeners = new ArrayList<>();\nprivate boolean receiverRegistered;\n@Override\r\npublic void onShuffleModeChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\r\n        listener.onShuffleModeChanged();\r\n    }\r\n}\r\n@Override\r\npublic void onPlayStateChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onPlayStateChanged();\r\n    }\r\n}\r\n@Override\r\npublic void onPauseStateChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {\r\n        listener.onPauseStateChanged();\r\n    }\r\n}\r\n@Override\r\npublic void onResumeStateChanged"}], "metadata": {"task_id": "VinylMusicPlayer/645", "ground_truth": "        if (listener != null) {\r\n            listener.onShuffleModeChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import android.view.ViewTreeObserver\nimport android.view.View\n@Override\r\npublic void onGlobalLayout() {\r\n    slidingUpPanelLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);\r\n    switch(getPanelState()) {\r\n        case EXPANDED:\r\n            onPanelSlide(slidingUpPanelLayout, 1);\r\n            onPanelExpanded(slidingUpPanelLayout);\r\n            break;\r\n        case COLLAPSED:\r\n            onPanelCollapsed(slidingUpPanelLayout);\r\n            break;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/647", "ground_truth": "        default:\r\n            playerFragment.onHide();\r\n            break;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "private ValueAnimator navigationBarColorAnimator;\nprivate int taskColor;\nAbsPlayerFragment playerFragment;\n @Override", "choices": [{"text": ";\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    navigationBarColorAnimator = ValueAnimator.ofInt(0, 255);\n    navigationBarColorAnimator.setDuration(1000);\n    navigationBarColorAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            taskColor = (Integer) animation.getAnimatedValue();\n        }\n    });\n"}], "metadata": {"task_id": "VinylMusicPlayer/648", "ground_truth": "protected void onStart() {\r\n    super.onStart();\r\n    Discography.getInstance().addChangedListener(onDiscographyChanged);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "AbsPlayerFragment playerFragment;\nprivate int taskColor;\nprivate boolean lightStatusbar;\n @Override", "choices": [{"text": "\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.activity_main);\n\tplayerFragment = (AbsPlayerFragment) getSupportFragmentManager().findFragmentById(R.id.playerFragment);\n\ttaskColor = getResources().getColor(R.color.taskColor);\n\tlightStatusbar = getResources().getBoolean(R.bool.lightStatusbar);\n}\n\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n\t// Inflate the menu; this"}], "metadata": {"task_id": "VinylMusicPlayer/649", "ground_truth": "protected void onStop() {\r\n    Discography.getInstance().removeChangedListener(onDiscographyChanged);\r\n    super.onStop();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "private int taskColor;\nAbsPlayerFragment playerFragment;\nprivate int navigationbarColor;\n @Override", "choices": [{"text": "\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n\n taskColor = getResources().getColor(R.color.task_color);\n navigationbarColor = getResources().getColor(R.color.navigationbar_color);\n playerFragment = (AbsPlayerFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_player);\n }\n\n @Override\n protected void onResume() {\n super.onResume();\n }\n\n @Override\n protected void onPause"}], "metadata": {"task_id": "VinylMusicPlayer/660", "ground_truth": "public void onBackPressed() {\r\n    if (!handleBackPress())\r\n        super.onBackPressed();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "import com.sothree.slidinguppanel.SlidingUpPanelLayout\nimport androidx.fragment.app.Fragment\npublic boolean handleBackPress() {\r\n    if (slidingUpPanelLayout.getPanelHeight() != 0 && playerFragment.onBackPressed())\r\n        return true;\r\n    if (getPanelState() == SlidingUpPanelLayout.PanelState.EXPANDED) {", "choices": [{"text": "\r\n        if (slidingUpPanelLayout.getPanelHeight()!= 0 && playerFragment.onBackPressed())\r\n            return true;\r\n        if (getPanelState() == SlidingUpPanelLayout.PanelState.COLLAPSED) {\r\n            if (slidingUpPanelLayout.getPanelHeight()!= 0 && playerFragment.onBackPressed())\r\n                return true;\r\n            if (getPanelState() == SlidingUpPanelLayout.PanelState.EXPANDED) {\r\n                if (slidingUpPanelLayout.getPanelHeight()!= 0"}], "metadata": {"task_id": "VinylMusicPlayer/661", "ground_truth": "        collapsePanel();\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/668", "ground_truth": "protected void onDestroy() {\r\n    Thread.setDefaultUncaughtExceptionHandler(null);\r\n    super.onDestroy();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsThemeActivity.java"}}
{"prompt": "import com.kabouzeid.appthemehelper.ThemeStore\nimport android.graphics.Color\npublic void setNavigationbarColor(int color) {\r\n    if (ThemeStore.coloredNavigationBar(this)) {", "choices": [{"text": "\r\n        this.setStatusBarColor(color);\r\n    } else {\r\n        this.setNavigationBarColor(Color.TRANSPARENT);\r\n    }\r\n}\r\npublic void setStatusBarColor(int color) {\r\n    if (ThemeStore.coloredStatusBar(this)) {\r\n        this.setStatusBarColor(color);\r\n    } else {\r\n        this.setNavigationBarColor(Color.TRANSPARENT);\r\n    }\r\n}\r\npublic void setNavigationBarColor(int color) {\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/671", "ground_truth": "        ATH.setNavigationbarColor(this, color);\r\n    } else {\r\n        ATH.setNavigationbarColor(this, Color.BLACK);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsThemeActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {", "choices": [{"text": "\r\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/672", "ground_truth": "        onBackPressed();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\bugreport\\BugReportActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/679", "ground_truth": "public void onChanged() {\r\n    super.onChanged();\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\GenreDetailActivity.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic void onBackPressed() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);", "choices": [{"text": "\r\n        cab = null;\r\n    }\r\n    super.onBackPressed();\r\n}\r\n@Override\r\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\r\n    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n        if (cab!= null && AttachedCabKt.isActive(cab)) {\r\n            AttachedCabKt.destroy(cab);\r\n            cab = null;\r\n        }\r\n        return true;\r\n    }\r\n    return super.onKey"}], "metadata": {"task_id": "VinylMusicPlayer/683", "ground_truth": "    } else {\r\n        layoutBinding.recyclerView.stopScroll();\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\GenreDetailActivity.java"}}
{"prompt": "import com.h6ah4i.android.widget.advrecyclerview.utils.WrapperAdapterUtils\nimport android.view.View\n@Override\r\nprotected void onDestroy() {\r\n    layoutBinding.recyclerView.setAdapter(null);\r\n    if (wrappedAdapter != null) {\r\n        WrapperAdapterUtils.releaseAll(wrappedAdapter);", "choices": [{"text": "View);\r\n        wrappedAdapter = null;\r\n    }\r\n    super.onDestroy();\r\n}\r\n@Override\r\nprotected void onLayout(boolean changed, int l, int t, int r, int b) {\r\n    super.onLayout(changed, l, t, r, b);\r\n    layoutBinding.recyclerView.layout(l, t, r, b);\r\n}\r\n@Override\r\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n    super.onMeasure(widthMeasureSpec, heightMeasure"}], "metadata": {"task_id": "VinylMusicPlayer/686", "ground_truth": "        wrappedAdapter = null;\r\n    }\r\n    adapter = null;\r\n    super.onDestroy();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\GenreDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    if (requestCode == APP_INTRO_REQUEST) {\r\n        blockRequestPermissions = false;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/690", "ground_truth": "        if (!hasPermissions()) {\r\n            requestPermissions();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/691", "ground_truth": "protected void requestPermissions() {\r\n    if (!blockRequestPermissions)\r\n        super.requestPermissions();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "NavigationView navigationView;\nMainActivityFragmentCallbacks currentFragment;\nprivate View navigationDrawerHeader;\n @Override", "choices": [{"text": ";\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    navigationView = (NavigationView) findViewById(R.id.navigationView);\n    navigationDrawerHeader = findViewById(R.id.navigationDrawerHeader);\n    navigationDrawerHeader.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            drawerLayout.closeDrawer(GravityCompat.START);\n        }\n    });\n   "}], "metadata": {"task_id": "VinylMusicPlayer/692", "ground_truth": "public void onPlayingMetaChanged() {\r\n    super.onPlayingMetaChanged();\r\n    updateNavigationDrawerHeader();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        if (drawerLayout.isDrawerOpen(navigationView)) {\r\n            drawerLayout.closeDrawer(navigationView);\r\n        } else {\r\n            drawerLayout.openDrawer(navigationView);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/694", "ground_truth": "        }\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "import androidx.annotation.NonNull\nimport android.util.Log\nimport android.content.Intent\nprivate long parseIdFromIntent(@NonNull Intent intent, String longKey, String stringKey) {\r\n    long id = intent.getLongExtra(longKey, -1);\r\n    if (id < 0) {\r\n        String idString = intent.getStringExtra(stringKey);\r\n        if (idString != null) {\r\n            try {\r\n                id = Long.parseLong(idString);\r\n            } catch (NumberFormatException e) {\r\n                Log.e(TAG, e.getMessage());", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/696", "ground_truth": "            }\r\n        }\r\n    }\r\n    return id;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport com.poupa.vinylmusicplayer.dialogs.ChangelogDialog\nimport android.os.Build\nimport android.content.pm.PackageManager\nimport android.content.pm.PackageInfo\nprivate void showChangelog() {\r\n    try {\r\n        PackageInfo pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);\r\n        int currentVersion = pInfo.versionCode;\r\n        if (currentVersion != PreferenceUtil.getInstance().getLastChangelogVersion()) {\r\n            new ChangelogDialog.Builder(this).show();", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/700", "ground_truth": "        }\r\n    } catch (PackageManager.NameNotFoundException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/703", "ground_truth": "public void onChanged() {\r\n    super.onChanged();\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\PlaylistDetailActivity.java"}}
{"prompt": "private AttachedCab cab;\nprivate SongAdapter adapter;\nprivate ActivityPlaylistDetailBinding layoutBinding;\n @Override\r\npublic void onBackPressed() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);", "choices": [{"text": "\r\n    }\r\n    super.onBackPressed();\r\n}\r\n @Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_playlist_detail);\r\n    layoutBinding = (ActivityPlaylistDetailBinding) findViewById(R.id.activity_playlist_detail_binding);\r\n    cab = AttachedCabKt.getActive(this);\r\n    if (cab!= null) {\r\n        adapter = new SongAdapter(this"}], "metadata": {"task_id": "VinylMusicPlayer/707", "ground_truth": "    } else {\r\n        layoutBinding.recyclerView.stopScroll();\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\PlaylistDetailActivity.java"}}
{"prompt": "@Override\r\nprotected void onDestroy() {\r\n    if (recyclerViewDragDropManager != null) {\r\n        recyclerViewDragDropManager.release();\r\n        recyclerViewDragDropManager = null;\r\n    }\r\n    layoutBinding.recyclerView.setItemAnimator(null);\r\n    layoutBinding.recyclerView.setAdapter(null);\r\n    if (wrappedAdapter != null) {\r\n        WrapperAdapterUtils.releaseAll(wrappedAdapter);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/711", "ground_truth": "        wrappedAdapter = null;\r\n    }\r\n    adapter = null;\r\n    super.onDestroy();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\PlaylistDetailActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/717", "ground_truth": "public boolean onMenuItemActionCollapse(MenuItem item) {\r\n    onBackPressed();\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SearchActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/723", "ground_truth": "public boolean onQueryTextSubmit(String query) {\r\n    hideSoftKeyboard();\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SearchActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/724", "ground_truth": "public boolean onQueryTextChange(String newText) {\r\n    search(newText);\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SearchActivity.java"}}
{"prompt": "private void hideSoftKeyboard() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/725", "ground_truth": "    Util.hideSoftKeyboard(SearchActivity.this);\r\n    if (searchView != null) {\r\n        searchView.clearFocus();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SearchActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {", "choices": [{"text": " {\r\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\r\n\r\npublic class MainActivity extends android.app.Activity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this"}], "metadata": {"task_id": "VinylMusicPlayer/727", "ground_truth": "        onBackPressed();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SettingsActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.media.audiofx.AudioEffect\nimport android.content.pm.PackageManager\nimport android.content.Intent\nimport android.app.Activity\nprivate boolean hasEqualizer() {\r\n    final Intent effects = new Intent(AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL);\r\n    if (getActivity() != null) {\r\n        PackageManager pm = getActivity().getPackageManager();", "choices": [{"text": ".getApplicationInfo(getActivity().getPackageName(), 0);\r\n        if (pm.hasSystemFeature(PackageManager.FEATURE_AUDIO_EFFECT_CONTROL_PANEL)) {\r\n            effects.setFlags(effects.getFlags() | AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL);\r\n        }\r\n    }\r\n    return effects.hasFlags(AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL);\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/731", "ground_truth": "        ResolveInfo ri = pm.resolveActivity(effects, 0);\r\n        return ri != null;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SettingsActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == android.R.id.home) {", "choices": [{"text": " {\r\n        Intent intent = new Intent(this, MainActivity.class);\r\n        startActivity(intent);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/738", "ground_truth": "        super.onBackPressed();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport android.graphics.Bitmap\nvoid setImageBitmap(@Nullable final Bitmap bitmap, int bgColor) {\r\n    if (bitmap == null) {\r\n        image.setImageResource(R.drawable.default_album_art);", "choices": [{"text": ".setImageResource(R.drawable.default_album_art);\r\n    } else {\r\n        image.setImageBitmap(bitmap);\r\n        image.setBackgroundColor(bgColor);\r\n    }\r\n}\r\n\r\nvoid setImageDrawable(@Nullable final Drawable drawable, int bgColor) {\r\n    if (drawable == null) {\r\n        image.setImageResource(R.drawable.default_album_art);\r\n    } else {\r\n        image.setImageDrawable(drawable);\r\n        image.setBackgroundColor(bg"}], "metadata": {"task_id": "VinylMusicPlayer/742", "ground_truth": "    } else {\r\n        image.setImageBitmap(bitmap);\r\n    }\r\n    setColors(bgColor);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/745", "ground_truth": "protected void onPostExecute(String[] toBeScanned) {\r\n    super.onPostExecute(toBeScanned);\r\n    scan(toBeScanned);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/746", "ground_truth": "protected void onCancelled(String[] toBeScanned) {\r\n    super.onCancelled(toBeScanned);\r\n    scan(toBeScanned);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import java.util.List\nimport org.jaudiotagger.tag.Tag\nimport org.jaudiotagger.tag.FieldKey\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nstatic String getArtistName(@NonNull final AudioFile audio) {\r\n    try {\r\n        List<String> tags = audio.getTagOrCreateAndSetDefault().getAll(FieldKey.ARTIST);", "choices": [{"text": ";\r\n        if (tags!= null && tags.size() > 0) {\r\n            return tags.get(0);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}\r\n\r\nstatic String getAlbumName(@NonNull final AudioFile audio) {\r\n    try {\r\n        List<String> tags = audio.getTagOrCreateAndSetDefault().getAll(FieldKey.ALBUM);\r\n        if (tags!= null && tags.size() > 0)"}], "metadata": {"task_id": "VinylMusicPlayer/751", "ground_truth": "        return MultiValuesTagUtil.tagEditorMerge(tags);\r\n    } catch (Exception ignored) {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import java.util.List\nimport org.jaudiotagger.tag.Tag\nimport org.jaudiotagger.tag.FieldKey\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nstatic String getAlbumArtistName(@NonNull final AudioFile audio) {\r\n    try {\r\n        List<String> tags = audio.getTagOrCreateAndSetDefault().getAll(FieldKey.ALBUM_ARTIST);", "choices": [{"text": ".get();\r\n        if (tags!= null && tags.size() > 0) {\r\n            return tags.get(0);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}\r\n\r\nstatic String getArtistName(@NonNull final AudioFile audio) {\r\n    try {\r\n        List<String> tags = audio.getTagOrCreateAndSetDefault().getAll(FieldKey.ARTIST);\r\n        if (tags!= null && tags.size() >"}], "metadata": {"task_id": "VinylMusicPlayer/752", "ground_truth": "        return MultiValuesTagUtil.tagEditorMerge(tags);\r\n    } catch (Exception ignored) {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import java.util.List\nimport org.jaudiotagger.tag.Tag\nimport org.jaudiotagger.tag.FieldKey\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.util.Util\nimport com.poupa.vinylmusicplayer.discog.tagging.MultiValuesTagUtil\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nstatic String getGenreName(@NonNull final AudioFile audio) {\r\n    try {\r\n        String tag = audio.getTagOrCreateAndSetDefault().getFirst(FieldKey.GENRE);\r\n        List<String> genres = MultiValuesTagUtil.split(tag);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/753", "ground_truth": "        return MultiValuesTagUtil.tagEditorMerge(genres);\r\n    } catch (Exception ignored) {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.AutoCloseAudioFile\nimport com.poupa.vinylmusicplayer.model.Song\nprivate void fillViewsWithFileTags() {\r\n    try (AutoCloseAudioFile audio = getAudioFile()) {\r\n        if (audio != null) {\r\n            albumTitle.setText(getAlbumTitle(audio.get()));\r\n            albumArtist.setText(getAlbumArtistName(audio.get()));\r\n            genre.setText(getGenreName(audio.get()));\r\n            year.setText(getSongYear(audio.get()));", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/760", "ground_truth": "        }\r\n    } catch (Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AlbumTagEditorActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.VinylMusicPlayerColorUtil\nimport com.poupa.vinylmusicplayer.util.MusicUtil\nimport com.poupa.vinylmusicplayer.util.AutoCloseAudioFile\nimport com.poupa.vinylmusicplayer.R\nimport com.kabouzeid.appthemehelper.util.ATHUtil\nimport android.graphics.Color\nimport android.graphics.Bitmap\n@Override\r\nprotected void loadCurrentImage() {\r\n    try (AutoCloseAudioFile audio = getAudioFile()) {\r\n        Bitmap bitmap = MusicUtil.getMediaStoreAlbumCover(audio);\r\n        setImageBitmap(bitmap, VinylMusicPlayerColorUtil.getColor(VinylMusicPlayerColorUtil.generatePalette(bitmap), ATHUtil.resolveColor(this, R.attr.defaultFooterColor)));", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/761", "ground_truth": "        deleteAlbumArt = false;\r\n    } catch (Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AlbumTagEditorActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.databinding.ActivityAlbumTagEditorBinding\nimport androidx.viewbinding.ViewBinding\nimport androidx.annotation.NonNull\nimport android.view.LayoutInflater\n@Override\r\n@NonNull\r\nprotected ViewBinding getViewBinding() {\r\n    ActivityAlbumTagEditorBinding binding = ActivityAlbumTagEditorBinding.inflate(LayoutInflater.from(this));\r\n    albumTitle = binding.title;\r\n    albumArtist = binding.albumArtist;\r\n    genre = binding.genre;\r\n    year = binding.year;\r\n    fab = binding.playPauseFab;\r\n    observableScrollView = binding.observableScrollView;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/764", "ground_truth": "    toolbar = binding.toolbar;\r\n    image = binding.image;\r\n    header = binding.header;\r\n    return binding;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AlbumTagEditorActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/771", "ground_truth": "public void onDetach() {\r\n    super.onDetach();\r\n    activity = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\AbsMusicServiceFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/773", "ground_truth": "public void onDestroyView() {\r\n    super.onDestroyView();\r\n    activity.removeMusicServiceEventListener(this);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\AbsMusicServiceFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/774", "ground_truth": "public void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setHasOptionsMenu(true);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\AbsMainActivityFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.ui.activities.MainActivity\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.os.Bundle\nimport android.app.Activity\n@Override\r\npublic void onViewCreated(@NonNull final View view, @Nullable final Bundle savedInstanceState) {\r\n    getMainActivity().setStatusbarColorAuto();\r\n    getMainActivity().setNavigationbarColorAuto();\r\n    getMainActivity().setTaskDescriptionColorAuto();\r\n    setUpAppbarColor();", "choices": [{"text": "}\r\n\r\nprivate void setUpAppbarColor() {\r\n    getMainActivity().setAppbarColor(getResources().getColor(R.color.appbar_color));\r\n    getMainActivity().setStatusbarColor(getResources().getColor(R.color.statusbar_color));\r\n    getMainActivity().setNavigationbarColor(getResources().getColor(R.color.navigationbar_color));\r\n    getMainActivity().setTaskDescriptionColor(getResources().getColor(R.color.task_description_color));\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/781", "ground_truth": "    setUpToolbar();\r\n    setUpBreadCrumbs();\r\n    setUpRecyclerView();\r\n    setUpAdapter();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import java.util.List\nimport java.util.LinkedList\nimport java.io.File\nimport com.poupa.vinylmusicplayer.ui.activities.MainActivity\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.adapter.SongFileAdapter\nimport com.poupa.vinylmusicplayer.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.app.Activity\nprivate void setUpAdapter() {\r\n    adapter = new SongFileAdapter(getMainActivity(), new LinkedList<>(), this, this);\r\n    adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\r\n\r\n        @Override\r\n        public void onChanged() {\r\n            super.onChanged();\r\n            checkIsEmpty();", "choices": [{"text": "\r\n        }\r\n\r\n        @Override\r\n        public void onItemRangeInserted(int positionStart, int itemCount) {\r\n            super.onItemRangeInserted(positionStart, itemCount);\r\n            checkIsEmpty();\r\n        }\r\n\r\n        @Override\r\n        public void onItemRangeRemoved(int positionStart, int itemCount) {\r\n            super.onItemRangeRemoved(positionStart, itemCount);\r\n            checkIsEmpty();\r\n        }\r\n\r\n        @Override\r\n        public void onItemRangeMoved(int"}], "metadata": {"task_id": "VinylMusicPlayer/784", "ground_truth": "        }\r\n    });\r\n    layoutBinding.recyclerView.setAdapter(adapter);\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/785", "ground_truth": "public void onChanged() {\r\n    super.onChanged();\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/786", "ground_truth": "public void onPause() {\r\n    super.onPause();\r\n    saveScrollPosition();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/787", "ground_truth": "public void onDestroyView() {\r\n    layoutBinding.appbar.removeOnOffsetChangedListener(this);\r\n    super.onDestroyView();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic boolean handleBackPress() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);\r\n        return true;\r\n    }\r\n    if (layoutBinding.breadCrumbs.popHistory()) {", "choices": [{"text": "\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n@Override\r\npublic boolean handleTabPress() {\r\n    if (cab!= null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);\r\n        return true;\r\n    }\r\n    if (layoutBinding.breadCrumbs.popHistory()) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/788", "ground_truth": "        setCrumb(layoutBinding.breadCrumbs.lastHistory(), false);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.sort.SortOrder\npublic final String getSortOrder() {", "choices": [{"text": ";\nimport com.poupa.vinylmusicplayer.sort.SortOrderListener;\nimport com.poupa.vinylmusicplayer.sort.SortOrderManager;\nimport com.poupa.vinylmusicplayer.sort.SortOrderManager.SortOrderListener;\nimport com.poupa.vinylmusicplayer.sort.SortOrderManager.SortOrderManagerListener;\nimport com.poupa.vinylmusicplayer.sort.SortOrderManager.SortOrderManagerState;\nimport com.poupa.vinylmusicplayer.sort.SortOrderManager.SortOrderManager"}], "metadata": {"task_id": "VinylMusicPlayer/795", "ground_truth": "    if (sortOrder == null) {\r\n        sortOrder = loadSortOrder();\r\n    }\r\n    return sortOrder;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.sort.SortOrder\nimport com.poupa.vinylmusicplayer.sort.FileSortOrder\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\nprivate boolean handleSortOrderMenuItem(@NonNull final MenuItem item) {\r\n    String sortOrderStr = null;\r\n    final int itemId = item.getItemId();\r\n    final SortOrder<File> sorter = FileSortOrder.fromMenuResourceId(itemId);\r\n    if (sorter != null) {\r\n        sortOrderStr = sorter.preferenceValue;\r\n    }\r\n    if (sortOrderStr != null) {\r\n        item.setChecked(true);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/798", "ground_truth": "        setAndSaveSortOrder(sortOrderStr);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/799", "ground_truth": "protected void onPreExecute() {\r\n    super.onPreExecute();\r\n    checkCallbackReference();\r\n    checkContextReference();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import java.lang.ref.WeakReference\nimport com.poupa.vinylmusicplayer.R\nimport android.content.Context\nprivate Context checkContextReference() {\r\n    final Context context = contextWeakReference.get();", "choices": [{"text": ";\r\n    if (context == null) {\r\n        context = contextWeakReference.get();\r\n        if (context == null) {\r\n            context = R.layout.activity_main;\r\n            contextWeakReference.set(context);\r\n        }\r\n    }\r\n    return context;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r"}], "metadata": {"task_id": "VinylMusicPlayer/801", "ground_truth": "    if (context == null) {\r\n        cancel(false);\r\n    }\r\n    return context;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import java.util.List\nimport java.lang.ref.WeakReference\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nprivate final OnPathsListedCallback onPathsListedCallback;\nprivate FragmentFolderBinding layoutBinding;\nprivate static final String PATH = \"path\";\nprivate OnSongsListedCallback checkCallbackReference() {\r\n    final OnSongsListedCallback callback = callbackWeakReference.get();", "choices": [{"text": "\r\n    if (callback == null) {\r\n      callback = new OnSongsListedCallback() {\r\n        @Override\r\n        public void onSongsListed(List<Song> songs) {\r\n          onSongsListed(songs);\r\n        }\r\n      };\r\n      callbackWeakReference.set(callback);\r\n    }\r\n    return callback;\r\n  }\r\nprivate void onSongsListed(List<Song> songs) {\r\n    final OnSongsListedCallback callback = check"}], "metadata": {"task_id": "VinylMusicPlayer/802", "ground_truth": "    if (callback == null) {\r\n        cancel(false);\r\n    }\r\n    return callback;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import android.content.Context\n@Override\r\nprotected void onPreExecute() {\r\n    super.onPreExecute();\r\n    if (!isContextStillInMemory()) {\r\n        return;", "choices": [{"text": "\r\n    }\r\n}\r\n@Override\r\nprotected void onPostExecute(Void result) {\r\n    super.onPostExecute(result);\r\n    if (!isContextStillInMemory()) {\r\n        return;\r\n    }\r\n}\r\n@Override\r\nprotected void onCancelled() {\r\n    super.onCancelled();\r\n    if (!isContextStillInMemory()) {\r\n        return;\r\n    }\r\n}\r\n@Override\r\nprotected void onCancelled(Void result) {\r\n    super.onCancelled(result"}], "metadata": {"task_id": "VinylMusicPlayer/803", "ground_truth": "    }\r\n    if (!checkAndSetScanningGuard(true)) {\r\n        cancel(false);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/804", "ground_truth": "protected void onCancelled(final String[] result) {\r\n    checkAndSetScanningGuard(false);\r\n    super.onCancelled(result);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "private synchronized boolean checkAndSetScanningGuard(boolean value) {\r\n    if (value && !scanningGuard) {\r\n        scanningGuard = true;\r\n        // success\r\n        return true;\r\n    } else if (!value) {\r\n        scanningGuard = false;\r\n        // success", "choices": [{"text": ";\r\n        // success\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nprivate synchronized boolean checkAndSetScanning(boolean value) {\r\n    if (value &&!scanning) {\r\n        scanning = true;\r\n        // success\r\n        return true;\r\n    } else if (!value) {\r\n        scanning = false;\r\n        // success\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/806", "ground_truth": "        return true;\r\n    }\r\n    // failure\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import android.content.Context\nprivate boolean isContextStillInMemory() {\r\n    if (getContext() == null) {\r\n        cancel(false);", "choices": [{"text": "\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\npublic class MainActivity extends android.app.Activity {\r\n    @Override\r\n    protected void onCreate(android.os.Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        if (isContextStillInMemory()) {\r\n            cancel(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void on"}], "metadata": {"task_id": "VinylMusicPlayer/807", "ground_truth": "        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic boolean handleBackPress() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {", "choices": [{"text": "\r\n        cab = null;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n@Override\r\npublic boolean handleKeyPress() {\r\n    if (cab!= null && AttachedCabKt.isActive(cab)) {\r\n        cab = null;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n@Override\r\npublic boolean handleKeyRelease() {\r\n    if (cab!= null && AttachedCabKt.isActive(cab)) {"}], "metadata": {"task_id": "VinylMusicPlayer/815", "ground_truth": "        AttachedCabKt.destroy(cab);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\LibraryFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/816", "ground_truth": "public void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setHasOptionsMenu(true);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerFragment.java"}}
{"prompt": "private int gridSize;\nprivate int currentLayoutRes;\nprivate String sortOrder;\n public final int getGridSize() {\r\n    if (gridSize == 0) {\r\n        if (isLandscape()) {\r\n            gridSize = loadGridSizeLand();\r\n        } else {", "choices": [{"text": "\r\n        if (isPortrait()) {\r\n            gridSize = loadGridSizePortrait();\r\n        }\r\n    }\r\n    return gridSize;\r\n }\r\n public final int getCurrentLayoutRes() {\r\n    if (currentLayoutRes == 0) {\r\n        if (isLandscape()) {\r\n            currentLayoutRes = loadCurrentLayoutResLand();\r\n        } else {\r\n            currentLayoutRes = loadCurrentLayoutResPortrait();\r\n        }\r\n    }\r\n    return currentLayoutRes;\r\n }\r"}], "metadata": {"task_id": "VinylMusicPlayer/817", "ground_truth": "            gridSize = loadGridSize();\r\n        }\r\n    }\r\n    return gridSize;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "/**\r\n * @return whether the palette should be used at all or not\r\n */\r\npublic final boolean usePalette() {\r\n    if (!usePaletteInitialized) {", "choices": [{"text": "\r\n        usePaletteInitialized = true;\r\n    }\r\n    return usePalette;\r\n}\r\n\r\n/**\r\n * Sets whether the palette should be used at all or not\r\n *\r\n * @param usePalette whether the palette should be used at all or not\r\n */\r\npublic final void usePalette(boolean usePalette) {\r\n    if (usePaletteInitialized) {\r\n        usePaletteInitialized = false;\r\n    }\r\n    this.usePalette = usePalette;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/819", "ground_truth": "        usePalette = loadUsePalette();\r\n        usePaletteInitialized = true;\r\n    }\r\n    return usePalette;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "private String sortOrder;\nprivate int currentLayoutRes;\nprivate boolean usePaletteInitialized;\n public final String getSortOrder() {", "choices": [{"text": "\n public final void setSortOrder(String sortOrder) {\n  this.sortOrder = sortOrder;\n }\n public final int getCurrentLayoutRes() {\n  return currentLayoutRes;\n }\n public final void setCurrentLayoutRes(int currentLayoutRes) {\n  this.currentLayoutRes = currentLayoutRes;\n }\n public final boolean isUsePaletteInitialized() {\n  return usePaletteInitialized;\n }\n public final void setUsePaletteInitialized(boolean usePaletteInitialized) {\n  this.usePaletteInitialized = usePaletteInitialized;\n }\n}\n"}], "metadata": {"task_id": "VinylMusicPlayer/820", "ground_truth": "    if (sortOrder == null) {\r\n        sortOrder = loadSortOrder();\r\n    }\r\n    return sortOrder;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.LayoutRes\npublic void setAndSaveGridSize(final int gridSize) {\r\n    int oldLayoutRes = getItemLayoutRes();\r\n    this.gridSize = gridSize;\r\n    if (isLandscape()) {\r\n        saveGridSizeLand(gridSize);\r\n    } else {\r\n        saveGridSize(gridSize);\r\n    }\r\n    // only recreate the adapter and layout manager if the layout currentLayoutRes has changed\r\n    if (oldLayoutRes != getItemLayoutRes()) {\r\n        invalidateLayoutManager();", "choices": [{"text": "();\r\n    }\r\n}\r\n@LayoutRes\r\npublic int getGridSize() {\r\n    return gridSize;\r\n}\r\npublic void setGridSize(final int gridSize) {\r\n    this.gridSize = gridSize;\r\n    if (isLandscape()) {\r\n        saveGridSizeLand(gridSize);\r\n    } else {\r\n        saveGridSize(gridSize);\r\n    }\r\n    // only recreate the adapter and layout manager if the layout currentLayoutRes has changed\r\n    if (getItemLayoutRes()!="}], "metadata": {"task_id": "VinylMusicPlayer/821", "ground_truth": "        invalidateAdapter();\r\n    } else {\r\n        setGridSize(gridSize);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport androidx.annotation.LayoutRes\nimport android.view.View\nprotected void applyRecyclerViewPaddingForLayoutRes(@NonNull RecyclerView recyclerView, @LayoutRes int res) {\r\n    int padding;\r\n    if (res == R.layout.item_grid) {\r\n        padding = (int) (getResources().getDisplayMetrics().density * 2);", "choices": [{"text": ";\r\n    } else if (res == R.layout.item_list) {\r\n        padding = (int) (getResources().getDisplayMetrics().density * 2);\r\n    } else {\r\n        padding = (int) (getResources().getDisplayMetrics().density * 2);\r\n    }\r\n    recyclerView.setPadding(padding, padding, padding, padding);\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/827", "ground_truth": "    } else {\r\n        padding = 0;\r\n    }\r\n    recyclerView.setPadding(padding, padding, padding, padding);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/832", "ground_truth": "public void onDetach() {\r\n    super.onDetach();\r\n    Discography.getInstance().removeChangedListener(onDiscographyChanged);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nprivate void initAdapter() {\r\n    adapter = createAdapter();\r\n    adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\r\n\r\n        @Override\r\n        public void onChanged() {", "choices": [{"text": "\r\n            @Override\r\n            public void onItemRangeInserted(int positionStart, int itemCount) {\r\n                adapter.notifyItemRangeInserted(positionStart, itemCount);\r\n            }\r\n\r\n            @Override\r\n            public void onItemRangeRemoved(int positionStart, int itemCount) {\r\n                adapter.notifyItemRangeRemoved(positionStart, itemCount);\r\n            }\r\n\r\n            @Override\r\n            public void onItemRangeChanged(int positionStart, int itemCount) {\r\n                adapter.notifyItemRangeChanged(positionStart"}], "metadata": {"task_id": "VinylMusicPlayer/836", "ground_truth": "            super.onChanged();\r\n            checkIsEmpty();\r\n        }\r\n    });\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/837", "ground_truth": "public void onChanged() {\r\n    super.onChanged();\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewFragment.java"}}
{"prompt": "private static final int LOADER_ID = LoaderIds.PLAYLISTS_FRAGMENT;\n @Override", "choices": [{"text": "\n @Override\n public Loader<Cursor> onCreateLoader(int id, Bundle args) {\n return new CursorLoader(getActivity(), PLAYLISTS_URI, PLAYLISTS_PROJECTION, null, null, null);\n }\n\n @Override\n public void onLoadFinished(Loader<Cursor> loader, Cursor data) {\n super.onLoadFinished(loader, data);\n if (data!= null && data.moveToFirst()) {\n PlaylistsAdapter adapter = new PlaylistsAdapter(getActivity(), data);\n adapter.notifyDataSetChanged();\n }\n }\n\n"}], "metadata": {"task_id": "VinylMusicPlayer/854", "ground_truth": "public void onPlayingMetaChanged() {\r\n    // Update the smart playlists (played, not played, etc)\r\n    reload();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\PlaylistsFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/862", "ground_truth": "public void onDetach() {\r\n    super.onDetach();\r\n    callbacks = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import androidx.appcompat.widget.Toolbar\nimport androidx.annotation.Nullable\nimport android.view.View\nprivate static void toggleToolbar(@Nullable final View toolbar) {\r\n    if (isToolbarShown) {", "choices": [{"text": "\r\n        isToolbarShown = false;\r\n        if (toolbar!= null) {\r\n            toolbar.setVisibility(View.GONE);\r\n        }\r\n    } else {\r\n        isToolbarShown = true;\r\n        if (toolbar!= null) {\r\n            toolbar.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/865", "ground_truth": "        hideToolbar(toolbar);\r\n    } else {\r\n        showToolbar(toolbar);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/870", "ground_truth": "public void onColorChanged(int color) {\r\n    if (callbacks != null) {\r\n        callbacks.onPaletteColorChanged();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.MusicUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.R\nimport android.app.Activity\nprivate void toggleFavorite(Song song) {\r\n    MusicUtil.toggleFavorite(requireActivity(), song);\r\n    if (song.id == MusicPlayerRemote.getCurrentSong().id) {\r\n        if (MusicUtil.isFavorite(requireActivity(), song)) {", "choices": [{"text": "\r\n            MusicPlayerRemote.setCurrentSong(MusicPlayerRemote.getCurrentSong().withFavorite(false));\r\n        } else {\r\n            MusicPlayerRemote.setCurrentSong(MusicPlayerRemote.getCurrentSong().withFavorite(true));\r\n        }\r\n    } else {\r\n        MusicPlayerRemote.setCurrentSong(song);\r\n    }\r\n}\r\nprivate void playSong(Song song) {\r\n    MusicUtil.playSong(requireActivity(), song);\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/872", "ground_truth": "            playerAlbumCoverFragment.showHeartAnimation();\r\n        }\r\n        updateIsFavorite();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.MusicUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport android.app.Activity\n@Override\r\nprotected Boolean doInBackground(Song... params) {\r\n    Activity activity = getActivity();\r\n    if (activity != null) {\r\n        return MusicUtil.isFavorite(getActivity(), params[0]);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/873", "ground_truth": "    } else {\r\n        cancel(false);\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.MusicUtil\nimport com.poupa.vinylmusicplayer.model.lyrics.Lyrics\nimport android.content.Context\n@Override\r\nprotected Lyrics doInBackground(Void... params) {\r\n    final Context context = getContext();\r\n    if (context == null) {\r\n        return null;\r\n    }\r\n    String data = MusicUtil.getLyrics(context, song);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/875", "ground_truth": "    if (TextUtils.isEmpty(data)) {\r\n        return null;\r\n    }\r\n    return Lyrics.parse(song, data);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import android.view.View\nimport android.animation.Animator\n@Override\r\npublic void onDestroyView() {\r\n    if (slidingUpPanelLayout != null) {\r\n        slidingUpPanelLayout.removePanelSlideListener(this);\r\n    }\r\n    if (recyclerView != null) {\r\n        recyclerView.setItemAnimator(null);", "choices": [{"text": "ViewAnimator(null);\r\n    }\r\n    super.onDestroyView();\r\n}\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    if (slidingUpPanelLayout!= null) {\r\n        slidingUpPanelLayout.addPanelSlideListener(this);\r\n    }\r\n}\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    if (slidingUpPanelLayout!= null) {\r\n        slidingUpPanelLayout.removePanelSlideListener(this);"}], "metadata": {"task_id": "VinylMusicPlayer/877", "ground_truth": "        recyclerView.setAdapter(null);\r\n        recyclerView = null;\r\n    }\r\n    super.onDestroyView();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/879", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    checkToggleToolbar(toolbarContainer);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "@Override\r\npublic void onServiceConnected() {", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n\tsuper.onDestroy();\r\n\tif (mConnection!= null) {\r\n\t\tmConnection.disconnect();\r\n\t}\r\n}\r\n\r\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n\t// Inflate the menu; this adds items to the action bar if it is present.\r\n\tgetMenuInflater().inflate(R.menu.main, menu);\r\n\treturn true;\r\n}\r\n\r\n@Override\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/880", "ground_truth": "    updateQueue();\r\n    updateCurrentSong();\r\n    updateIsFavorite();\r\n    updateLyrics();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "private CardPlayerPlaybackControlsFragment playbackControlsFragment;\nprivate SlidingUpPanelLayout slidingUpPanelLayout;\nprivate TextView playerQueueSubHeader;\n @Override\r\npublic void onPlayingMetaChanged() {", "choices": [{"text": ";\r\n\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n\tsuper.onCreate(savedInstanceState);\r\n\tsetContentView(R.layout.fragment_playback_controls);\r\n\tplaybackControlsFragment = (CardPlayerPlaybackControlsFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_playback_controls);\r\n\tslidingUpPanelLayout = (SlidingUpPanelLayout) findViewById(R.id.slidingUpPanelLayout);\r\n\tplayerQueueSubHeader = (TextView) findViewById(R"}], "metadata": {"task_id": "VinylMusicPlayer/881", "ground_truth": "    updateCurrentSong();\r\n    updateIsFavorite();\r\n    updateQueuePosition();\r\n    updateLyrics();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/888", "ground_truth": "public void onHide() {\r\n    playbackControlsFragment.hide();\r\n    onBackPressed();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/900", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    progressViewUpdateHelper.start();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerPlaybackControlsFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/901", "ground_truth": "public void onPause() {\r\n    super.onPause();\r\n    progressViewUpdateHelper.stop();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerPlaybackControlsFragment.java"}}
{"prompt": "private PlayPauseDrawable playerFabPlayPauseDrawable;\nImageButton shuffleButton;\nFloatingActionButton playPauseFab;\n private void setUpMusicControllers() {\r\n    setUpPlayPauseFab();", "choices": [{"text": "\r\n    playerFabPlayPauseDrawable = new PlayPauseDrawable();\r\n    shuffleButton = new ImageButton();\r\n    playPauseFab = new FloatingActionButton();\r\n    shuffleButton.setImageDrawable(playerFabPlayPauseDrawable);\r\n    playPauseFab.setImageDrawable(playerFabPlayPauseDrawable);\r\n    shuffleButton.setOnClickListener(new View.OnClickListener() {\r\n        @Override\r\n        public void onClick(View v) {\r\n            shuffle();\r\n        }\r\n    });\r\n    playPauseFab"}], "metadata": {"task_id": "VinylMusicPlayer/904", "ground_truth": "    setUpPrevNext();\r\n    setUpRepeatButton();\r\n    setUpShuffleButton();\r\n    setUpProgressSlider();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerPlaybackControlsFragment.java"}}
{"prompt": "public void hide() {\r\n    if (playPauseFab != null) {", "choices": [{"text": "\r\n        playPauseFab.hide();\r\n    }\r\n}\r\n\r\npublic void show() {\r\n    if (playPauseFab!= null) {\r\n        playPauseFab.show();\r\n    }\r\n}\r\n\r\npublic void play() {\r\n    if (playPauseFab!= null) {\r\n        playPauseFab.play();\r\n    }\r\n}\r\n\r\npublic void pause() {\r\n    if (playPauseFab!= null) {\r\n        playPauseFab.pause();\r"}], "metadata": {"task_id": "VinylMusicPlayer/909", "ground_truth": "        playPauseFab.setScaleX(0f);\r\n        playPauseFab.setScaleY(0f);\r\n        playPauseFab.setRotation(0f);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerPlaybackControlsFragment.java"}}
{"prompt": "import android.view.View\nimport android.animation.Animator\n@Override\r\npublic void onDestroyView() {\r\n    if (slidingUpPanelLayout != null) {\r\n        slidingUpPanelLayout.removePanelSlideListener(this);\r\n    }\r\n    if (recyclerView != null) {\r\n        recyclerView.setItemAnimator(null);", "choices": [{"text": "ViewAnimator(null);\r\n    }\r\n    super.onDestroyView();\r\n}\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    if (slidingUpPanelLayout!= null) {\r\n        slidingUpPanelLayout.addPanelSlideListener(this);\r\n    }\r\n}\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    if (slidingUpPanelLayout!= null) {\r\n        slidingUpPanelLayout.removePanelSlideListener(this);"}], "metadata": {"task_id": "VinylMusicPlayer/913", "ground_truth": "        recyclerView.setAdapter(null);\r\n        recyclerView = null;\r\n    }\r\n    super.onDestroyView();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/915", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    checkToggleToolbar(toolbarContainer);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "@Override\r\npublic void onServiceConnected() {", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n\tsuper.onDestroy();\r\n\tif (mConnection!= null) {\r\n\t\tmConnection.disconnect();\r\n\t}\r\n}\r\n\r\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n\t// Inflate the menu; this adds items to the action bar if it is present.\r\n\tgetMenuInflater().inflate(R.menu.main, menu);\r\n\treturn true;\r\n}\r\n\r\n@Override\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/916", "ground_truth": "    updateQueue();\r\n    updateCurrentSong();\r\n    updateIsFavorite();\r\n    updateLyrics();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "private FlatPlayerPlaybackControlsFragment playbackControlsFragment;\nprivate SlidingUpPanelLayout slidingUpPanelLayout;\nMediaEntryViewHolder currentSongViewHolder;\n @Override\r\npublic void onPlayingMetaChanged() {", "choices": [{"text": ";\r\n\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n\tsuper.onCreate(savedInstanceState);\r\n\tsetContentView(R.layout.fragment_playback_controls);\r\n\tplaybackControlsFragment = (FlatPlayerPlaybackControlsFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_playback_controls);\r\n\tslidingUpPanelLayout = (SlidingUpPanelLayout) findViewById(R.id.sliding_up_panel_layout);\r\n\tcurrentSongViewHolder = (MediaEntryView"}], "metadata": {"task_id": "VinylMusicPlayer/917", "ground_truth": "    updateCurrentSong();\r\n    updateIsFavorite();\r\n    updateQueuePosition();\r\n    updateLyrics();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/924", "ground_truth": "public void onHide() {\r\n    playbackControlsFragment.hide();\r\n    onBackPressed();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/934", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    progressViewUpdateHelper.start();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/935", "ground_truth": "public void onPause() {\r\n    super.onPause();\r\n    progressViewUpdateHelper.stop();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.views.PlayPauseDrawable\nimport com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.R\nprotected void updatePlayPauseDrawableState(boolean animate) {\r\n    if (MusicPlayerRemote.isPlaying()) {", "choices": [{"text": "\r\n        PlayPauseDrawable.setPlaying(animate);\r\n    } else {\r\n        PlayPauseDrawable.setPaused(animate);\r\n    }\r\n}\r\n\r\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    updatePlayPauseDrawableState(true);\r\n}\r\n\r\n@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n    updatePlayPauseDrawableState(false);\r\n}\r\n\r\n@Override\r\nprotected void onDestroy() {\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/938", "ground_truth": "        playPauseDrawable.setPause(animate);\r\n    } else {\r\n        playPauseDrawable.setPlay(animate);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "private AnimatorSet musicControllerAnimationSet;\nImageButton shuffleButton;\nImageButton playPauseButton;\n private void setUpMusicControllers() {\r\n    setUpPlayPauseButton();", "choices": [{"text": "\r\n\tmusicControllerAnimationSet = new AnimatorSet();\r\n\tshuffleButton = (ImageButton)gameObject.Find(\"shuffleButton\");\r\n\tplayPauseButton = (ImageButton)gameObject.Find(\"playPauseButton\");\r\n\tshuffleButton.onClick.AddListener(shuffle);\r\n\tplayPauseButton.onClick.AddListener(playPause);\r\n}\r\n private void shuffle() {\r\n\tmusicControllerAnimationSet.Play(musicControllerAnimationSet.Find(\"shuffle\"));\r\n }\r\n private void playPause() {\r\n\t"}], "metadata": {"task_id": "VinylMusicPlayer/939", "ground_truth": "    setUpPrevNext();\r\n    setUpRepeatButton();\r\n    setUpShuffleButton();\r\n    setUpProgressSlider();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "import android.view.View\nprivate static void prepareForAnimation(View view) {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices.WindowsRuntime;\nusing Windows.ApplicationModel;\nusing Windows.ApplicationModel.Activation;\nusing Windows.Foundation;\nusing Windows.Foundation.Collections;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Controls.Primitives;\nusing Windows.UI.Xaml.Data;\nusing Windows.UI.Xaml.Input;"}], "metadata": {"task_id": "VinylMusicPlayer/946", "ground_truth": "    if (view != null) {\r\n        view.setScaleX(0f);\r\n        view.setScaleY(0f);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/954", "ground_truth": "public void onServiceConnected() {\r\n    updateSongTitle();\r\n    updatePlayPauseDrawableState(false);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\MiniPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/956", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    progressViewUpdateHelper.start();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\MiniPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/957", "ground_truth": "public void onPause() {\r\n    super.onPause();\r\n    progressViewUpdateHelper.stop();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\MiniPlayerFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.R\nimport android.view.MotionEvent\n@Override\r\npublic boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n    if (Math.abs(velocityX) > Math.abs(velocityY)) {\r\n        if (velocityX < 0) {\r\n            MusicPlayerRemote.playNextSong(true);\r\n            return true;\r\n        } else if (velocityX > 0) {\r\n            MusicPlayerRemote.playPreviousSong(true);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/958", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\MiniPlayerFragment.java"}}
{"prompt": "import android.view.MotionEvent\n@Override\r\npublic boolean onSingleTapConfirmed(MotionEvent e) {\r\n    if (callbacks != null) {", "choices": [{"text": " {\r\n        callbacks.onSingleTapConfirmed(e);\r\n    }\r\n    return true;\r\n}\r\n@Override\r\npublic boolean onDoubleTap(MotionEvent e) {\r\n    if (callbacks!= null) {\r\n        callbacks.onDoubleTap(e);\r\n    }\r\n    return true;\r\n}\r\n@Override\r\npublic boolean onLongPress(MotionEvent e) {\r\n    if (callbacks!= null) {\r\n        callbacks.onLongPress(e);\r\n    }\r\n    return true;\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/961", "ground_truth": "        callbacks.onToolbarToggled();\r\n        return true;\r\n    }\r\n    return super.onSingleTapConfirmed(e);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\PlayerAlbumCoverFragment.java"}}
{"prompt": "public static ArtistSignatureUtil getInstance() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/969", "ground_truth": "    if (sInstance == null) {\r\n        sInstance = new ArtistSignatureUtil();\r\n    }\r\n    return sInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\ArtistSignatureUtil.java"}}
{"prompt": "import java.util.Calendar\n/**\r\n * Returns the time elapsed so far this week in milliseconds.\r\n *\r\n * @return Time elapsed this week in milliseconds.\r\n */\r\npublic long getElapsedWeek() {\r\n    // Today + days passed this week\r\n    long elapsed = getElapsedToday();\r\n    final int passedWeekdays = calendar.get(Calendar.DAY_OF_WEEK) - 1 - calendar.getFirstDayOfWeek();", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/974", "ground_truth": "    if (passedWeekdays > 0) {\r\n        elapsed += passedWeekdays * MS_PER_DAY;\r\n    }\r\n    return elapsed;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CalendarUtil.java"}}
{"prompt": "import java.util.Calendar\nimport androidx.annotation.IntRange\n/**\r\n * Returns the time elapsed so far this month and the last numMonths months in milliseconds.\r\n *\r\n * @param numMonths Additional number of months prior to the current month to calculate.\r\n * @return Time elapsed this month and the last numMonths months in milliseconds.\r\n */\r\npublic long getElapsedMonths(@IntRange(from = 1) int numMonths) {\r\n    // Today + rest of this month\r\n    long elapsed = getElapsedMonth();\r\n    // Previous numMonths months\r\n    int month = calendar.get(Calendar.MONTH);\r\n    int year = calendar.get(Calendar.YEAR);\r\n    for (int i = 0; i < numMonths; i++) {\r\n        month--;\r\n        if (month < Calendar.JANUARY) {\r\n            month = Calendar.DECEMBER;\r\n            year--;", "choices": [{"text": "\r\n        }\r\n        if (month < Calendar.FEBRUARY) {\r\n            month = Calendar.MARCH;\r\n            year--;\r\n        }\r\n        if (month < Calendar.APRIL) {\r\n            month = Calendar.MAY;\r\n            year--;\r\n        }\r\n        if (month < Calendar.JUNE) {\r\n            month = Calendar.JULY;\r\n            year--;\r\n        }\r\n        if (month < Calendar.AUGUST) {\r\n            month = Calendar"}], "metadata": {"task_id": "VinylMusicPlayer/977", "ground_truth": "        }\r\n        elapsed += getDaysInMonth(year, month) * MS_PER_DAY;\r\n    }\r\n    return elapsed;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CalendarUtil.java"}}
{"prompt": "import java.util.Calendar\n/**\r\n * Returns the time elapsed so far this year in milliseconds.\r\n *\r\n * @return Time elapsed this year in milliseconds.\r\n */\r\npublic long getElapsedYear() {\r\n    // Today + rest of this month + previous months until January\r\n    long elapsed = getElapsedMonth();\r\n    int month = calendar.get(Calendar.MONTH) - 1;\r\n    int year = calendar.get(Calendar.YEAR);\r\n    while (month > Calendar.JANUARY) {", "choices": [{"text": "\r\n        elapsed += getElapsedMonth();\r\n        month--;\r\n        year++;\r\n    }\r\n    return elapsed;\r\n}\r\n/**\r\n * Returns the time elapsed so far this month in milliseconds.\r\n *\r\n * @return Time elapsed this month in milliseconds\r\n */\r\npublic long getElapsedMonth() {\r\n    long elapsed = calendar.getTimeInMillis();\r\n    calendar.add(Calendar.MONTH, -1);\r\n    return elapsed;\r\n}\r\n/**\r\n * Returns the time elapsed so far this year in milliseconds"}], "metadata": {"task_id": "VinylMusicPlayer/978", "ground_truth": "        elapsed += getDaysInMonth(year, month) * MS_PER_DAY;\r\n        month--;\r\n    }\r\n    return elapsed;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CalendarUtil.java"}}
{"prompt": "import androidx.annotation.MainThread\n@MainThread", "choices": [{"text": "()\n\n\n@androidx.annotation.MainThread\n@androidx.annotation.UiThread\n@androidx.annotation.Eager\n@androidx.annotation.RequiresApi(21)\n@androidx.annotation.RestrictTo(RestrictTo.Scope.LIBRARY)\n@androidx.annotation.RestrictTo(RestrictTo.Scope.LIBRARY)\n@androidx.annotation.RestrictTo(RestrictTo.Scope.LIBRARY)\n@androidx.annotation.RestrictTo(RestrictTo.Scope.LIBRARY)\n@androidx."}], "metadata": {"task_id": "VinylMusicPlayer/983", "ground_truth": "protected void onPostExecute(Void result) {\r\n    if (postExec != null) {\r\n        postExec.run();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CustomArtistImageUtil.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.App\nimport android.net.Uri\n@Override\r\nprotected Void doInBackground(Void... params) {\r\n    mPreferences.edit().putBoolean(getFileName(artist), false).apply();\r\n    ArtistSignatureUtil.getInstance().updateArtistSignature(artist.getName());\r\n    // trigger media store changed to force artist image reload\r\n    App.getInstance().getContentResolver().notifyChange(Uri.parse(\"content://media\"), null);\r\n    File file = getFile(artist);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/984", "ground_truth": "    if (file.exists()) {\r\n        file.delete();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CustomArtistImageUtil.java"}}
{"prompt": "import androidx.annotation.MainThread\n@MainThread", "choices": [{"text": "()\n\n\n@androidx.annotation.MainThread\n@androidx.annotation.UiThread\n@androidx.annotation.Eager\n@androidx.annotation.RequiresApi(21)\n@androidx.annotation.RestrictTo(RestrictTo.Scope.LIBRARY)\n@androidx.annotation.RestrictTo(RestrictTo.Scope.LIBRARY)\n@androidx.annotation.RestrictTo(RestrictTo.Scope.LIBRARY)\n@androidx.annotation.RestrictTo(RestrictTo.Scope.LIBRARY)\n@androidx."}], "metadata": {"task_id": "VinylMusicPlayer/985", "ground_truth": "protected void onPostExecute(Void result) {\r\n    if (postExec != null) {\r\n        postExec.run();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CustomArtistImageUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport java.io.File\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Song> matchFilesWithMediaStore(@NonNull List<File> files) {\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    for (File file : files) {\r\n        String path = safeGetCanonicalPath(file);\r\n        Song song = Discography.getInstance().getSongByPath(path);\r\n        if (!song.equals(Song.EMPTY_SONG)) {", "choices": [{"text": "\r\n            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n}\r\n\r\n@NonNull\r\npublic static String safeGetCanonicalPath(@NonNull File file) {\r\n    return file.getCanonicalPath();\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/988", "ground_truth": "            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.LinkedList\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<File> listFiles(@NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    List<File> fileList = new LinkedList<>();\r\n    File[] found = directory.listFiles(fileFilter);", "choices": [{"text": ";\r\n    for (File file : found) {\r\n      fileList.add(file);\r\n    }\r\n    return fileList;\r\n  }\r\n\r\n  @NonNull\r\n  public static List<File> listFiles(@NonNull File directory) {\r\n    return listFiles(directory, null);\r\n  }\r\n\r\n  @NonNull\r\n  public static List<File> listFiles(@NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    List<File> fileList = new LinkedList<>();\r\n    File[] found = directory.listFiles(file"}], "metadata": {"task_id": "VinylMusicPlayer/989", "ground_truth": "    if (found != null) {\r\n        Collections.addAll(fileList, found);\r\n    }\r\n    return fileList;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.LinkedList\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<File> listFilesDeep(@NonNull Collection<File> files, @Nullable FileFilter fileFilter) {\r\n    List<File> resFiles = new LinkedList<>();\r\n    for (File file : files) {\r\n        if (file.isDirectory()) {\r\n            internalListFilesDeep(resFiles, file, fileFilter);\r\n        } else if (fileFilter == null || fileFilter.accept(file)) {", "choices": [{"text": "\r\n            resFiles.add(file);\r\n        }\r\n    }\r\n    return resFiles;\r\n}\r\n\r\n@NonNull\r\npublic static List<File> listFilesDeep(@NonNull File file, @Nullable FileFilter fileFilter) {\r\n    List<File> resFiles = new LinkedList<>();\r\n    if (file.isDirectory()) {\r\n        internalListFilesDeep(resFiles, file, fileFilter);\r\n    } else if (fileFilter == null || fileFilter.accept(file)) {\r\n        resFiles.add(file);"}], "metadata": {"task_id": "VinylMusicPlayer/991", "ground_truth": "            resFiles.add(file);\r\n        }\r\n    }\r\n    return resFiles;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nprivate static void internalListFilesDeep(@NonNull Collection<File> files, @NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        for (File file : found) {\r\n            if (file.isDirectory()) {\r\n                internalListFilesDeep(files, file, fileFilter);\r\n            } else {", "choices": [{"text": "\r\n                files.add(file);\r\n            }\r\n        }\r\n    }\r\n}\r\nprivate static void internalListFiles(@NonNull Collection<File> files, @NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found!= null) {\r\n        for (File file : found) {\r\n            if (file.isDirectory()) {\r\n                internalListFilesDeep(files, file, fileFilter);\r\n            } else {\r\n                files.add("}], "metadata": {"task_id": "VinylMusicPlayer/992", "ground_truth": "                files.add(file);\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "public static String stripExtension(String str) {\r\n    if (str == null)\r\n        return null;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/993", "ground_truth": "    int pos = str.lastIndexOf('.');\r\n    if (pos == -1)\r\n        return str;\r\n    return str.substring(0, pos);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.io.InputStreamReader\nimport java.io.InputStream\nimport java.io.BufferedReader\npublic static String readFromStream(InputStream is) throws Exception {\r\n    BufferedReader reader = new BufferedReader(new InputStreamReader(is));\r\n    StringBuilder sb = new StringBuilder();\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        if (sb.length() > 0)\r\n            sb.append(\"\\n\");", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/994", "ground_truth": "        sb.append(line);\r\n    }\r\n    reader.close();\r\n    return sb.toString();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.io.File\npublic static String safeGetCanonicalPath(File file) {\r\n    try {\r\n        return file.getCanonicalPath();", "choices": [{"text": "} catch (Exception e) {\r\n        return file.getAbsolutePath();\r\n    }\r\n}\r\npublic static void main(String[] args) {\r\n    System.out.println(safeGetCanonicalPath(new File(\".\")));\r\n    System.out.println(safeGetCanonicalPath(new File(\".\")));\r\n    System.out.println(safeGetCanonicalPath(new File(\".\")));\r\n    System.out.println(safeGetCanonicalPath(new File(\".\")));\r\n    System.out.println(safeGetCanonical"}], "metadata": {"task_id": "VinylMusicPlayer/996", "ground_truth": "    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return file.getAbsolutePath();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.io.File\npublic static File safeGetCanonicalFile(File file) {\r\n    try {\r\n        return file.getCanonicalFile();", "choices": [{"text": "} catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\r\npublic static void main(String[] args) {\r\n    File file = new File(\"D:\\\\test.txt\");\r\n    try {\r\n        System.out.println(safeGetCanonicalFile(file));\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    try {\r\n        System.out.println(file.getCanonicalPath());\r\n    } catch (Exception e) {\r\n        e."}], "metadata": {"task_id": "VinylMusicPlayer/997", "ground_truth": "    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return file.getAbsoluteFile();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\nimport java.io.ByteArrayOutputStream\npublic static byte[] readBytes(InputStream stream) throws IOException {\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    byte[] buffer = new byte[4096];\r\n    int count;\r\n    while ((count = stream.read(buffer)) != -1) {", "choices": [{"text": "\r\n        baos.write(buffer, 0, count);\r\n    }\r\n    return baos.toByteArray();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/998", "ground_truth": "        baos.write(buffer, 0, count);\r\n    }\r\n    stream.close();\r\n    return baos.toByteArray();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport androidx.annotation.NonNull\npublic static ThemeStyle updateInstance(@NonNull final String themeName) {\r\n    synchronized (ThemeStyleUtil.class) {\r\n        if (themeName.equals(PreferenceUtil.ROUNDED_THEME)) {\r\n            sInstance = new MaterialTheme();\r\n        } else {", "choices": [{"text": " if (themeName.equals(PreferenceUtil.LIGHT_THEME)) {\r\n            sInstance = new LightTheme();\r\n        } else if (themeName.equals(PreferenceUtil.DARK_THEME)) {\r\n            sInstance = new DarkTheme();\r\n        }\r\n    }\r\n    return sInstance;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1004", "ground_truth": "            sInstance = new FlatTheme();\r\n        }\r\n        return sInstance;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\ImageTheme\\ThemeStyleUtil.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.R\nimport com.poupa.vinylmusicplayer.App\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.provider.MediaStore\nimport android.graphics.Bitmap\nimport android.content.Context\n@Nullable\r\npublic static Bitmap getMediaStoreAlbumCover(@NonNull final Song song) {\r\n    final Context context = App.getStaticContext();\r\n    try (AutoCloseAudioFile audio = SAFUtil.loadReadOnlyAudioFile(context, song)) {\r\n        return getMediaStoreAlbumCover(audio);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1008", "ground_truth": "    } catch (Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import java.io.File\nimport org.jaudiotagger.tag.images.Artwork\nimport com.poupa.vinylmusicplayer.model.Album\nimport androidx.annotation.Nullable\nimport android.provider.MediaStore\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\n@Nullable\r\npublic static Bitmap getMediaStoreAlbumCover(@Nullable final AutoCloseAudioFile audio) {\r\n    try {\r\n        if (audio == null) {\r\n            return null;\r\n        }\r\n        final Artwork artworkTag = audio.get().getTagOrCreateAndSetDefault().getFirstArtwork();\r\n        if (artworkTag != null) {\r\n            final byte[] artworkBinaryData = artworkTag.getBinaryData();\r\n            return BitmapFactory.decodeByteArray(artworkBinaryData, 0, artworkBinaryData.length);\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1009", "ground_truth": "        return null;\r\n    } catch (Exception ignored) {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic static long getTotalDuration(@NonNull List<? extends Song> songs) {\r\n    long duration = 0;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1016", "ground_truth": "    for (int i = 0; i < songs.size(); i++) {\r\n        duration += songs.get(i).duration;\r\n    }\r\n    return duration;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.text.TextUtils\nimport android.os.Build\n@NonNull\r\npublic static String buildInfoString(@NonNull final String separator, @NonNull final String[] values, @Nullable final String unknownReplacement) {\r\n    final StringBuilder result = new StringBuilder();\r\n    for (final String value : values) {\r\n        if (!TextUtils.isEmpty(value)) {\r\n            if (result.length() > 0)\r\n                result.append(separator);\r\n            final String valueOrReplacement = (unknownReplacement != null) && isNameUnknown(value, unknownReplacement) ? unknownReplacement : value;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1018", "ground_truth": "            result.append(valueOrReplacement);\r\n        }\r\n    }\r\n    return result.toString();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static String getTrackNumberInfoString(@NonNull final Song song) {\r\n    String result = \"\";\r\n    if (song.discNumber > 0) {\r\n        result = song.discNumber + \"-\";\r\n    }\r\n    if (song.trackNumber > 0) {\r\n        result += String.valueOf(song.trackNumber);", "choices": [{"text": ";\r\n    }\r\n    return result;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1019", "ground_truth": "    } else if (result.isEmpty()) {\r\n        result = \"-\";\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.content.Context\n@Nullable\r\npublic static Playlist getFavoritesPlaylist(@NonNull final Context context) {\r\n    StaticPlaylist playlist = StaticPlaylist.getPlaylist(context.getString(R.string.favorites));", "choices": [{"text": "(context.getString(R.string.favorites));\r\n    if (playlist!= null) {\r\n        return playlist;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n@Nullable\r\npublic static Playlist getPlaylistsPlaylist(@NonNull final Context context) {\r\n    StaticPlaylist playlist = StaticPlaylist.getPlaylist(context.getString(R.string.playlists));\r\n    if (playlist!= null) {\r\n        return playlist;\r\n    } else {\r\n        return null;\r"}], "metadata": {"task_id": "VinylMusicPlayer/1020", "ground_truth": "    if (playlist != null) {\r\n        return playlist.asPlaylist();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\npublic static int indexOfSongInList(List<Song> songs, long songId) {\r\n    for (int i = 0; i < songs.size(); i++) {\r\n        if (songs.get(i).id == songId) {", "choices": [{"text": "\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\npublic static int indexOfSongInList(List<Song> songs, String songName) {\r\n    for (int i = 0; i < songs.size(); i++) {\r\n        if (songs.get(i).name.equals(songName)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\npublic static int indexOfSongInList(List<Song> s"}], "metadata": {"task_id": "VinylMusicPlayer/1024", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import androidx.annotation.NonNull\npublic void uncaughtException(@NonNull final Thread t, @NonNull final Throwable e) {", "choices": [{"text": "\n    if (e instanceof RuntimeException) {\n        throw (RuntimeException) e;\n    }\n    if (e instanceof Error) {\n        throw (Error) e;\n    }\n    if (e instanceof Error) {\n        throw (Error) e;\n    }\n    if (e instanceof Error) {\n        throw (Error) e;\n    }\n    if (e instanceof Error) {\n        throw (Error) e;\n    }\n    if (e instanceof Error) {\n        throw (Error) e;\n    }\n    if (e instanceof Error)"}], "metadata": {"task_id": "VinylMusicPlayer/1031", "ground_truth": "    try {\r\n        sendBugReport(getStackTraceWithTime(e, null));\r\n    } catch (final Throwable ignore) {\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\OopsHandler.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static void removeFromPlaylist(@NonNull final Context context, @NonNull final Song song, long playlistId) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);\r\n    if (list == null) {", "choices": [{"text": " {\r\n        return;\r\n    }\r\n    list.removeSong(song);\r\n}\r\n\r\npublic static void addToPlaylist(@NonNull final Context context, @NonNull final Song song, long playlistId) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);\r\n    if (list == null) {\r\n        return;\r\n    }\r\n    list.addSong(song);\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1041", "ground_truth": "        return;\r\n    }\r\n    list.removeSong(song.id);\r\n    notifyChange(context);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static void removeFromPlaylist(@NonNull final Context context, @NonNull final List<Integer> songPositions, long playlistId) {\r\n    if (songPositions.isEmpty()) {\r\n        return;\r\n    }\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);\r\n    if (list == null) {", "choices": [{"text": "\r\n        return;\r\n    }\r\n    for (int i = 0; i < songPositions.size(); i++) {\r\n        int position = songPositions.get(i);\r\n        if (list.getSong(position)!= null) {\r\n            list.removeSong(position);\r\n        }\r\n    }\r\n    list.save();\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1042", "ground_truth": "        return;\r\n    }\r\n    list.removeSongsAtPosition(songPositions);\r\n    notifyChange(context);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\npublic static boolean doesPlaylistContain(final long playlistId, final long songId) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);", "choices": [{"text": ";\r\n    return list.getSongs().contains(new Song(songId));\r\n}\r\npublic static boolean doesPlaylistContain(final long playlistId, final String songName) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);\r\n    return list.getSongs().contains(new Song(songName));\r\n}\r\npublic static boolean doesPlaylistContain(final long playlistId, final long songId) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);\r\n    return list.get"}], "metadata": {"task_id": "VinylMusicPlayer/1043", "ground_truth": "    if (list == null) {\r\n        return false;\r\n    }\r\n    return list.contains(songId);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\npublic static boolean moveItem(long playlistId, int from, int to) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);", "choices": [{"text": ";\r\n    if (list == null) {\r\n        return false;\r\n    }\r\n    Playlist playlist = list.getPlaylist(playlistId);\r\n    if (playlist == null) {\r\n        return false;\r\n    }\r\n    playlist.moveItem(from, to);\r\n    return true;\r\n}\r\npublic static boolean moveItem(long playlistId, int from, int to) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);\r\n    if (list == null) {\r\n       "}], "metadata": {"task_id": "VinylMusicPlayer/1044", "ground_truth": "    if (list == null) {\r\n        return false;\r\n    }\r\n    return list.moveSong(from, to);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static void renamePlaylist(@NonNull final Context context, final long id, final String newName) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(id);\r\n    if (list == null) {", "choices": [{"text": " {\r\n        return;\r\n    }\r\n    list.setName(newName);\r\n    StaticPlaylist.updatePlaylist(list);\r\n}\r\n\r\npublic static void deletePlaylist(@NonNull final Context context, final long id) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(id);\r\n    if (list == null) {\r\n        return;\r\n    }\r\n    StaticPlaylist.deletePlaylist(id);\r\n}\r\n\r\npublic static void updatePlaylist(@NonNull final Context context, final long id, final Playlist playlist) {"}], "metadata": {"task_id": "VinylMusicPlayer/1045", "ground_truth": "        return;\r\n    }\r\n    list.rename(newName);\r\n    notifyChange(context);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static String getNameForPlaylist(final long id) {\r\n    StaticPlaylist playlist = StaticPlaylist.getPlaylist(id);", "choices": [{"text": ";\r\n    if (playlist!= null) {\r\n        return playlist.getName();\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n@NonNull\r\npublic static Playlist getPlaylist(final long id) {\r\n    StaticPlaylist playlist = StaticPlaylist.getPlaylist(id);\r\n    if (playlist!= null) {\r\n        return playlist;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1046", "ground_truth": "    if (playlist == null) {\r\n        return \"\";\r\n    }\r\n    return playlist.getName();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "public static PreferenceUtil getInstance() {", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1049", "ground_truth": "    if (sInstance == null) {\r\n        sInstance = new PreferenceUtil();\r\n    }\r\n    return sInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PreferenceUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.ui.fragments.player.NowPlayingScreen\nimport com.poupa.vinylmusicplayer.R\npublic NowPlayingScreen getNowPlayingScreen() {\r\n    final int id = mPreferences.getInt(NOW_PLAYING_SCREEN_ID, 0);\r\n    for (final NowPlayingScreen nowPlayingScreen : NowPlayingScreen.values()) {\r\n        if (nowPlayingScreen.id == id) {", "choices": [{"text": "\r\n            return nowPlayingScreen;\r\n        }\r\n    }\r\n    return null;\r\n}\r\npublic void setNowPlayingScreen(final NowPlayingScreen nowPlayingScreen) {\r\n    mPreferences.edit().putInt(NOW_PLAYING_SCREEN_ID, nowPlayingScreen.id).commit();\r\n}\r\npublic int getNowPlayingScreenId() {\r\n    return mPreferences.getInt(NOW_PLAYING_SCREEN_ID, 0);\r\n}\r\npublic void setNowPlayingScreenId("}], "metadata": {"task_id": "VinylMusicPlayer/1053", "ground_truth": "            return nowPlayingScreen;\r\n        }\r\n    }\r\n    return NowPlayingScreen.CARD;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PreferenceUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport java.lang.reflect.Type\nimport com.poupa.vinylmusicplayer.model.CategoryInfo\nimport com.poupa.vinylmusicplayer.R\nimport com.google.gson.reflect.TypeToken\nimport com.google.gson.JsonSyntaxException\nimport com.google.gson.Gson\npublic ArrayList<CategoryInfo> getLibraryCategoryInfos() {\r\n    String data = mPreferences.getString(LIBRARY_CATEGORIES, null);\r\n    if (data != null) {\r\n        final Gson gson = new Gson();\r\n        final Type collectionType = new TypeToken<ArrayList<CategoryInfo>>() {\r\n        }.getType();\r\n        try {\r\n            return gson.fromJson(data, collectionType);\r\n        } catch (final JsonSyntaxException e) {", "choices": [{"text": "\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return new ArrayList<CategoryInfo>();\r\n}\r\npublic void saveLibraryCategoryInfos(ArrayList<CategoryInfo> categoryInfos) {\r\n    String data = mPreferences.getString(LIBRARY_CATEGORIES, null);\r\n    if (data!= null) {\r\n        final Gson gson = new Gson();\r\n        final Type collectionType = new TypeToken<ArrayList<CategoryInfo>>() {\r\n        }.getType();\r\n        try {\r\n            gson.toJson("}], "metadata": {"task_id": "VinylMusicPlayer/1055", "ground_truth": "            e.printStackTrace();\r\n        }\r\n    }\r\n    return getDefaultLibraryCategoryInfos();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PreferenceUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\npublic byte getReplayGainSourceMode() {\r\n    byte sourceMode = RG_SOURCE_MODE_NONE;\r\n    switch(mPreferences.getString(RG_SOURCE_MODE_V2, \"none\")) {\r\n        case \"track\":\r\n            sourceMode = RG_SOURCE_MODE_TRACK;\r\n            break;\r\n        case \"album\":", "choices": [{"text": "\r\n            sourceMode = RG_SOURCE_MODE_ALBUM;\r\n            break;\r\n        default:\r\n            sourceMode = RG_SOURCE_MODE_NONE;\r\n            break;\r\n    }\r\n    return sourceMode;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1056", "ground_truth": "            sourceMode = RG_SOURCE_MODE_ALBUM;\r\n            break;\r\n    }\r\n    return sourceMode;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PreferenceUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\npublic static boolean isSAFRequired(List<Song> songs) {\r\n    for (Song song : songs) {", "choices": [{"text": "\r\n        if (song.isSAFRequired()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\npublic static boolean isSAFRequired(List<Song> songs) {\r\n    for (Song song : songs) {\r\n        if (song.isSAFRequired()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\npublic static boolean isSAFRequired(Song song) {\r\n    if ("}], "metadata": {"task_id": "VinylMusicPlayer/1061", "ground_truth": "        if (isSAFRequired(song.data))\r\n            return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\SAFUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.R\nimport android.os.Build\nimport android.net.Uri\nimport android.content.UriPermission\nimport android.content.Context\nimport android.annotation.TargetApi\n@TargetApi(Build.VERSION_CODES.LOLLIPOP)\r\npublic static boolean isSDCardAccessGranted(Context context) {\r\n    if (!isTreeUriSaved())\r\n        return false;\r\n    String sdcardUri = PreferenceUtil.getInstance().getSAFSDCardUri();\r\n    List<UriPermission> perms = context.getContentResolver().getPersistedUriPermissions();\r\n    for (UriPermission perm : perms) {\r\n        if (perm.getUri().toString().equals(sdcardUri) && perm.isWritePermission()) {", "choices": [{"text": "\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\npublic static boolean isSDCardAccessDenied(Context context) {\r\n    if (!isTreeUriSaved())\r\n        return false;\r\n    String sdcardUri = PreferenceUtil.getInstance().getSAFSDCardUri();\r\n    List<UriPermission> perms = context.getContentResolver().getPersistedUriPermissions();\r\n    for (UriPermission perm : perms) {\r\n        if (perm.getUri().toString().equals(sdcardUri"}], "metadata": {"task_id": "VinylMusicPlayer/1063", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\SAFUtil.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.R\nimport android.util.Log\nimport android.net.Uri\nimport android.content.Context\npublic static void delete(Context context, String path, Uri safUri) {\r\n    if (isSAFRequired(path)) {\r\n        deleteSAF(context, path, safUri);\r\n    } else {\r\n        try {\r\n            deleteFile(path);\r\n        } catch (NullPointerException e) {\r\n            Log.e(\"MusicUtils\", \"Failed to find file \" + path);", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1064", "ground_truth": "        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\SAFUtil.java"}}
{"prompt": "import androidx.annotation.Nullable\npublic static int compareIgnoreAccent(@Nullable final String s1, @Nullable final String s2) {\r\n    // Null-proof comparison\r\n    if (s1 == null) {\r\n        return s2 == null ? 0 : -1;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1066", "ground_truth": "    } else if (s2 == null) {\r\n        return 1;\r\n    }\r\n    return collator.compare(s1, s2);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\StringUtil.java"}}
{"prompt": "import java.util.Comparator\nstatic SwatchComparator getInstance() {", "choices": [{"text": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Controls;\nusing Microsoft.Phone.Shell;\n"}], "metadata": {"task_id": "VinylMusicPlayer/1079", "ground_truth": "    if (sInstance == null) {\r\n        sInstance = new SwatchComparator();\r\n    }\r\n    return sInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\VinylMusicPlayerColorUtil.java"}}
{"prompt": "import android.os.Build\npublic static boolean isSystemThemeSupported() {\r\n    // Inspired from https://stackoverflow.com/questions/55787035/is-there-an-api-to-detect-which-theme-the-os-is-using-dark-or-light-or-other\r\n    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.O) {\r\n        // OS theme not supported\r\n        return false;\r\n    } else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.P) {\r\n        // Not clear, might depend on wallpaper hinting\r\n        return true;", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1081", "ground_truth": "    } else {\r\n        // Supported, use Configuration.uiMode\r\n        return true;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\VinylMusicPlayerColorUtil.java"}}
{"prompt": "import org.jetbrains.annotations.NotNull\nimport com.poupa.vinylmusicplayer.R\nimport android.view.ViewParent\nimport android.view.View\npublic ViewParent findParentRecursively(@NotNull View view, int targetId) {\r\n    if (view.getId() == targetId) {\r\n        return (ViewParent) view;\r\n    }\r\n    ViewParent viewParent = view.getParent();\r\n    if (viewParent instanceof View) {\r\n        View parent = (View) view.getParent();\r\n        if (parent == null) {\r\n            return null;\r\n        }", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1085", "ground_truth": "        return findParentRecursively(parent, targetId);\r\n    } else {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\AutoTruncateTextView.java"}}
{"prompt": "/**\r\n * Untruncates and sets the text.\r\n */", "choices": [{"text": ".\r\n *\r\n * @param {string} text\r\n * @returns {string}\r\n */\r\nexport function untruncate(text) {\r\n  return text.replace(/\\u00a0/g,'');\r\n}\r\n\r\n/**\r\n * Sets the text.\r\n *\r\n * @param {string} text\r\n * @returns {string}\r\n */\r\nexport function setText(text) {\r\n  return text.replace(/\\u00a0/g,'');\r\n}\r\n\r\n/**\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1086", "ground_truth": "public void untruncateText() {\r\n    String untruncatedText = text + MARKER_UNTRUNCATED;\r\n    setText(untruncatedText);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\AutoTruncateTextView.java"}}
{"prompt": "public static final String TAG = AutoTruncateTextView.class.getSimpleName();\nprivate static final int RETRUNCATE_DELAY = 600;\nprivate String text;\n @Override", "choices": [{"text": "\npublic AutoTruncateTextView(Context context) {\n\tsuper(context);\n}\n\npublic AutoTruncateTextView(Context context, AttributeSet attrs) {\n\tsuper(context, attrs);\n}\n\npublic AutoTruncateTextView(Context context, AttributeSet attrs, int defStyle) {\n\tsuper(context, attrs, defStyle);\n}\n\npublic AutoTruncateTextView(Context context, AttributeSet attrs, int defStyle, int defStyleRes) {\n\tsuper(context, attrs, defStyle, defStyleRes);\n}\n\npublic AutoTruncateTextView("}], "metadata": {"task_id": "VinylMusicPlayer/1087", "ground_truth": "public void onAnimationEnd(Animator animator) {\r\n    if (isUntruncated()) {\r\n        setText(truncatedText);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\AutoTruncateTextView.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\npublic void clearCrumbs() {\r\n    try {\r\n        mOldCrumbs = new ArrayList<>(mCrumbs);\r\n        mCrumbs.clear();", "choices": [{"text": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable l"}], "metadata": {"task_id": "VinylMusicPlayer/1092", "ground_truth": "        mChildFrame.removeAllViews();\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\BreadCrumbLayout.java"}}
{"prompt": "private boolean setActive(Crumb newActive) {\r\n    mActive = mCrumbs.indexOf(newActive);\r\n    invalidateActivatedAll();", "choices": [{"text": "();\r\n    return true;\r\n}\r\n\r\nprivate void invalidateActivatedAll() {\r\n    for (int i = 0; i < mCrumbs.size(); i++) {\r\n        if (mCrumbs.get(i).isActivated()) {\r\n            mCrumbs.get(i).setActivated(false);\r\n        }\r\n    }\r\n}\r\n\r\nprivate void invalidateInactiveAll() {\r\n    for (int i = 0; i < mCrumbs.size(); i++) {\r\n        if (!mCrumbs.get"}], "metadata": {"task_id": "VinylMusicPlayer/1093", "ground_truth": "    boolean success = mActive > -1;\r\n    if (success)\r\n        requestLayout();\r\n    return success;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\BreadCrumbLayout.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.widget.TextView\nimport android.widget.LinearLayout\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.PorterDuff\nprivate TextView invalidateActivated(View view, final boolean isActive, final boolean allowArrowVisible) {\r\n    int contentColor = isActive ? contentColorActivated : contentColorDeactivated;\r\n    LinearLayout child = (LinearLayout) view;\r\n    TextView tv = (TextView) child.getChildAt(0);\r\n    tv.setTextColor(contentColor);\r\n    ImageView iv = (ImageView) child.getChildAt(1);\r\n    iv.setColorFilter(contentColor, PorterDuff.Mode.SRC_IN);\r\n    if (allowArrowVisible)", "choices": [{"text": " {\r\n        iv.setVisibility(View.VISIBLE);\r\n    } else {\r\n        iv.setVisibility(View.GONE);\r\n    }\r\n    return tv;\r\n}\r\nprivate TextView invalidateDeactivated(View view, final boolean isActive, final boolean allowArrowVisible) {\r\n    int contentColor = isActive? contentColorDeactivated : contentColorActivated;\r\n    LinearLayout child = (LinearLayout) view;\r\n    TextView tv = (TextView) child.getChildAt(0);\r\n    tv.setTextColor(contentColor);\r"}], "metadata": {"task_id": "VinylMusicPlayer/1096", "ground_truth": "        iv.setVisibility(View.VISIBLE);\r\n    else\r\n        iv.setVisibility(View.GONE);\r\n    return tv;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\BreadCrumbLayout.java"}}
{"prompt": "public void restoreFromStateWrapper(SavedStateWrapper mSavedState) {\r\n    if (mSavedState != null) {\r\n        mActive = mSavedState.mActive;\r\n        for (Crumb c : mSavedState.mCrumbs) {\r\n            addCrumb(c, false);", "choices": [{"text": ";\r\n        }\r\n    }\r\n}\r\n\r\npublic void saveToStateWrapper(SavedStateWrapper mSavedState) {\r\n    if (mSavedState!= null) {\r\n        mSavedState.mActive = mActive;\r\n        for (Crumb c : mCrumbs) {\r\n            c.saveToStateWrapper(mSavedState);\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1099", "ground_truth": "        }\r\n        requestLayout();\r\n        setVisibility(mSavedState.mVisibility);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\BreadCrumbLayout.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.animation.ObjectAnimator\nimport android.animation.AnimatorListenerAdapter\nimport android.animation.Animator\n@NonNull\r\nprivate Animator getPausePlayAnimator() {\r\n    isPlaySet = !isPlaySet;\r\n    final Animator anim = ObjectAnimator.ofFloat(this, PROGRESS, isPlay ? 1f : 0f, isPlay ? 0f : 1f);\r\n    anim.addListener(new AnimatorListenerAdapter() {\r\n\r\n        @Override\r\n        public void onAnimationEnd(Animator animation) {", "choices": [{"text": "\r\n            super.onAnimationEnd(animation);\r\n            isPlaySet = false;\r\n        }\r\n\r\n        @Override\r\n        public void onAnimationCancel(Animator animation) {\r\n            super.onAnimationCancel(animation);\r\n            isPlaySet = false;\r\n        }\r\n\r\n        @Override\r\n        public void onAnimationRepeat(Animator animation) {\r\n            super.onAnimationRepeat(animation);\r\n            isPlaySet = false;\r\n        }\r\n    });\r\n    return anim;\r\n}\r\n\r"}], "metadata": {"task_id": "VinylMusicPlayer/1102", "ground_truth": "            isPlay = !isPlay;\r\n        }\r\n    });\r\n    return anim;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/1104", "ground_truth": "public void setAlpha(int alpha) {\r\n    paint.setAlpha(alpha);\r\n    invalidateSelf();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "@Override", "choices": [{"text": "\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @return array\n     */\n    public function getUser()\n    {\n        return $this->user;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n     *\n     * @param array $user\n     */\n    public function setUser"}], "metadata": {"task_id": "VinylMusicPlayer/1105", "ground_truth": "public void setColorFilter(ColorFilter cf) {\r\n    paint.setColorFilter(cf);\r\n    invalidateSelf();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "private static final long PLAY_PAUSE_ANIMATION_DURATION = 250;\n public void setPlay(boolean animate) {\r\n    if (animate) {\r\n        if (!isPlaySet) {\r\n            togglePlayPause();\r\n        }\r\n    } else {", "choices": [{"text": ") {\r\n        if (isPlaySet) {\r\n            togglePlayPause();\r\n        }\r\n    }\r\n}\r\n\r\nprivate void togglePlayPause() {\r\n    isPlaySet =!isPlaySet;\r\n    if (isPlaySet) {\r\n        playPause.setVisibility(View.VISIBLE);\r\n    } else {\r\n        playPause.setVisibility(View.GONE);\r\n    }\r\n}\r\n\r\n@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/1106", "ground_truth": "        isPlaySet = true;\r\n        isPlay = true;\r\n        setProgress(1f);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "public void setPause(boolean animate) {\r\n    if (animate) {\r\n        if (isPlaySet) {\r\n            togglePlayPause();\r\n        }\r\n    } else {", "choices": [{"text": " if (!animate) {\r\n        if (isPlaySet) {\r\n            togglePlayPause();\r\n        }\r\n    }\r\n}\r\n\r\npublic void play() {\r\n    if (isPlaySet) {\r\n        togglePlayPause();\r\n    }\r\n}\r\n\r\npublic void pause() {\r\n    if (!isPlaySet) {\r\n        togglePlayPause();\r\n    }\r\n}\r\n\r\npublic void stop() {\r\n    if (isPlaySet) {\r\n        togglePlayPause();\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1107", "ground_truth": "        isPlaySet = false;\r\n        isPlay = false;\r\n        setProgress(0f);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "import android.widget.HorizontalScrollView\nimport android.view.View\n/**\r\n * Intercept the touch event here, we arrive here since this is a HorizontalScrollView\r\n * Force onTouchEvent to be fired\r\n */\r\n@Override", "choices": [{"text": "\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.View.OnTouchListener;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.Animation.AnimationListener;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.view.animation.DecelerateInterpolator;\r\nimport android.view.animation.Interpolator;\r\nimport android.view.animation.LinearInterpolator;\r\nimport android.view.animation.OvershootInterpolator;\r\nimport"}], "metadata": {"task_id": "VinylMusicPlayer/1113", "ground_truth": "public boolean onInterceptTouchEvent(MotionEvent e) {\r\n    onTouchEvent(e);\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\TouchInterceptHorizontalScrollView.java"}}
{"prompt": "@Override\r\npublic void run() {\r\n    if (!cancel) {\r\n        // Hasn't been touched for some time\r\n        long currentTime = System.currentTimeMillis();\r\n        if ((currentTime - lastScrollUpdate) > ON_END_SCROLL_DELAY) {\r\n            lastScrollUpdate = -1;\r\n            if (onEndScrollListener != null) {\r\n                onEndScrollListener.onEndScroll();\r\n            }", "choices": [{"text": "\r\n            if (onEndScrollListener!= null) {\r\n                onEndScrollListener.onEndScroll();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Override\r\npublic void cancel() {\r\n    cancel = true;\r\n}\r\n\r\n@Override\r\npublic boolean isCancelled() {\r\n    return cancel;\r\n}\r\n\r\n@Override\r\npublic boolean isDone() {\r\n    return!cancel;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1116", "ground_truth": "        } else {\r\n            postDelayed(this, ON_END_SCROLL_DELAY);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\TouchInterceptHorizontalScrollView.java"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.MotionEvent\n/**\r\n * Tapping the scrollview\r\n * Here we go back all the way up to the framelayout that contains the song,\r\n * and we click manually to play it\r\n */\r\n@Override\r\npublic boolean onSingleTapUp(MotionEvent e) {\r\n    ViewGroup viewGroup = getViewGroup();", "choices": [{"text": ".findViewById(R.id.framelayout);\r\n    View view = viewGroup.getChildAt(viewGroup.getChildCount() - 1);\r\n    if (view instanceof View) {\r\n        ((View) view).performClick();\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1118", "ground_truth": "    if (viewGroup != null) {\r\n        viewGroup.performClick();\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\TouchInterceptHorizontalScrollView.java"}}
{"prompt": "import android.view.MotionEvent\n/**\r\n * Pass back long presses (adding to playlist, etc)\r\n */\r\n@Override\r\npublic void onLongPress(MotionEvent e) {", "choices": [{"text": "\r\n    public void onLongPress(MotionEvent e) {\r\n        switch (e.getAction()) {\r\n            case MotionEvent.ACTION_DOWN:\r\n                break;\r\n            case MotionEvent.ACTION_UP:\r\n                break;\r\n            case MotionEvent.ACTION_CANCEL:\r\n                break;\r\n            case MotionEvent.ACTION_POINTER_DOWN:\r\n                break;\r\n            case MotionEvent.ACTION_POINTER_UP:\r\n                break;\r\n            case MotionEvent.ACTION_MOVE:\r\n                break;\r"}], "metadata": {"task_id": "VinylMusicPlayer/1119", "ground_truth": "    ViewGroup viewGroup = getViewGroup();\r\n    if (viewGroup != null) {\r\n        viewGroup.performLongClick();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\TouchInterceptHorizontalScrollView.java"}}
