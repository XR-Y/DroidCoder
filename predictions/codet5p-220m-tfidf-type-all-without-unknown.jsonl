{"prompt": "import app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.util.extensions.getString\nprivate fun setNightMode() {\r\n    setDefaultNightMode(\r\n      when (prefs.getString(PreferenceKeys.APP_THEME) ?: getString(R.string.app_theme_def)) {\r\n        \"light\" -> MODE_NIGHT_NO\r\n        \"dark\" -> MODE_NIGHT_YES", "choices": [{"text": "_NIGHT_NO\r\n        \"light\" -> MODE_NIGHT_YES\r\n      }\r\n    );\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/2", "ground_truth": "        \"follow_system\" -> MODE_NIGHT_FOLLOW_SYSTEM\r\n        else -> MODE_NIGHT_AUTO_BATTERY\r\n      }\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\Application.kt"}}
{"prompt": "import java.io.ByteArrayOutputStream\nimport java.io.ByteArrayInputStream\nimport com.github.michaelbull.result.filterValues\nimport com.github.michaelbull.result.Result\nimport app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.crypto.errors.CryptoHandlerException\nimport app.passwordstore.crypto.PGPIdentifier\nimport app.passwordstore.crypto.PGPEncryptOptions\nprivate suspend fun encryptPgp(\r\n    identities: List<PGPIdentifier>,\r\n    content: ByteArrayInputStream,\r\n    out: ByteArrayOutputStream,\r\n  ): Result<Unit, CryptoHandlerException> {\r\n    val encryptionOptions =\r\n      PGPEncryptOptions.Builder()\r\n        .withAsciiArmor(settings.getBoolean(PreferenceKeys.ASCII_ARMOR, false))\r\n        .build()\r\n    val keys = identities.map { id -> pgpKeyManager.getKeyById(id) }.filterValues()\r\n    return pgpCryptoHandler.encrypt(\r\n      keys,", "choices": [{"text": "\n      content,\r\n      encryptionOptions,\r\n      out,\r\n    )\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/5", "ground_truth": "      content,\r\n      out,\r\n      encryptionOptions,\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\crypto\\CryptoRepository.kt"}}
{"prompt": "import org.eclipse.jgit.storage.file.FileRepositoryBuilder\nimport org.eclipse.jgit.lib.Repository\nimport org.eclipse.jgit.api.Git\nimport java.io.File\nimport com.github.michaelbull.result.runCatching\nprivate fun initializeRepository(repositoryDir: File) {\r\n    val builder = FileRepositoryBuilder()\r\n    repository =\r\n      runCatching { builder.setGitDir(repositoryDir).build() }", "choices": [{"text": "\n    Git.init(repository)\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/13", "ground_truth": "        .getOrElse { e ->\r\n          e.printStackTrace()\r\n          null\r\n        }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "import org.eclipse.jgit.lib.Constants\nfun getCurrentBranch(): String? {\r\n    val repository = repository ?: return null\r\n    val headRef = repository.findRef(Constants.HEAD) ?: return null\r\n    return if (headRef.isSymbolic) {\r\n      val branchName = headRef.target.name", "choices": [{"text": "\n      return branchName.substring(0, branchName.length - 1)\r\n    } else {\r\n      return null\r\n    }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/16", "ground_truth": "      Repository.shortenRefName(branchName)\r\n    } else {\r\n      null\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "import java.io.File\nprivate fun getFilesList(path: File): ArrayList<File> {\r\n    if (!path.exists()) return ArrayList()\r\n    val files =\r\n      (path.listFiles { file -> file.isDirectory || file.extension == \"gpg\" } ?: emptyArray())", "choices": [{"text": "\n    return files.filter(file -> file.isDirectory || file.extension == \"gpg\")\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/17", "ground_truth": "        .toList()\r\n    val items = ArrayList<File>()\r\n    items.addAll(files)\r\n    return items\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "import dagger.Reusable\nimport dagger.Provides\nimport app.passwordstore.util.autofill.AutofillResponseBuilder\nimport android.os.Build\n @Provides\r\n  @Reusable\r\n  fun provideAutofillResponseBuilder(): AutofillResponseBuilder.Factory {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {", "choices": [{"text": "\n      return new AutofillResponseBuilder.Factory() {\r\n        @Override\r\n        public AutofillResponse buildAutofillResponse() {\r\n          return new AutofillResponse()\r\n        }\r\n      }\r\n    } else {\r\n      return new AutofillResponse() {\r\n        @Override\r\n        public AutofillResponse buildAutofillResponse() {\r\n          return new AutofillResponse()\r\n        }\r\n      }\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/18", "ground_truth": "      Api30AutofillResponseBuilder.Factory\r\n    } else {\r\n      Api26AutofillResponseBuilder.Factory\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\injection\\AutofillResponseBuilderModule.kt"}}
{"prompt": "import dagger.Provides\nimport app.passwordstore.util.coroutines.DispatcherProvider\nimport app.passwordstore.crypto.PGPKeyManager\n @Provides\r\n  fun providePGPKeyManager(\r\n    @PGPKeyDir keyDir: String,\r\n    dispatcherProvider: DispatcherProvider,\r\n  ): PGPKeyManager {", "choices": [{"text": "\n    return new PGPKeyManager(keyDir, dispatcherProvider);\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/19", "ground_truth": "    return PGPKeyManager(\r\n      keyDir,\r\n      dispatcherProvider.io(),\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\injection\\crypto\\KeyManagerModule.kt"}}
{"prompt": "import app.passwordstore.data.password.FieldItem\nimport app.passwordstore.data.passfile.Totp\nfun updateOTPCode(totp: Totp) {\r\n    var otpItemPosition = -1\r\n    fieldItemList =\r\n      fieldItemList.mapIndexed { position, item ->\r\n        if (item.key.startsWith(FieldItem.ItemType.OTP.type, true)) {\r\n          otpItemPosition = position\r\n          return@mapIndexed FieldItem.createOtpField(totp)\r\n        }", "choices": [{"text": "\n      }\r\n    if (otpItemPosition >= 0) {\r\n      fieldItemList.splice(otpItemPosition, 1)\r\n    }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/23", "ground_truth": "        return@mapIndexed item\r\n      }\r\n\r\n    notifyItemChanged(otpItemPosition)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\adapters\\FieldItemAdapter.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.github.androidpasswordstore.autofillparser.AutofillAction\nimport app.passwordstore.util.auth.BiometricAuthenticator.Result\nimport app.passwordstore.ui.crypto.PasswordDialog\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.fragment.app.setFragmentResultListener\nimport android.os.Bundle\nprivate fun askPassphrase(filePath: String, clientState: Bundle, action: AutofillAction) {\r\n    val dialog = PasswordDialog()\r\n    dialog.show(supportFragmentManager, \"PASSWORD_DIALOG\")\r\n    dialog.setFragmentResultListener(PasswordDialog.PASSWORD_RESULT_KEY) { key, bundle ->\r\n      if (key == PasswordDialog.PASSWORD_RESULT_KEY) {\r\n        val value = bundle.getString(PasswordDialog.PASSWORD_RESULT_KEY)!!\r\n        lifecycleScope.launch(dispatcherProvider.main()) {", "choices": [{"text": "\n          if (value!= null) {\r\n            action.setPassphrase(value)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    dialog.show(supportFragmentManager, \"PASSWORD_DIALOG\")\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/25", "ground_truth": "          decryptWithPassphrase(File(filePath), clientState, action, value)\r\n        }\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\autofill\\AutofillDecryptActivity.kt"}}
{"prompt": "import java.io.File\nimport app.passwordstore.R\n @Suppress(\"ReturnCount\")\r\n  private fun File.findTillRoot(fileName: String, rootPath: File): File? {\r\n    val gpgFile = File(this, fileName)\r\n    if (gpgFile.exists()) return gpgFile\r\n\r\n    if (this.absolutePath == rootPath.absolutePath) {\r\n      return null\r\n    }\r\n    val parent = parentFile\r\n    return if (parent != null && parent.exists()) {", "choices": [{"text": "\n      return parent.findTillRoot(fileName, rootPath)\r\n    } else {\r\n      return null\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/32", "ground_truth": "      parent.findTillRoot(fileName, rootPath)\r\n    } else {\r\n      null\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\BasePGPActivity.kt"}}
{"prompt": "import app.passwordstore.R\n @JvmStatic\r\n    fun getLongName(fullPath: String, repositoryPath: String, basename: String): String {\r\n      var relativePath = getRelativePath(fullPath, repositoryPath)\r\n      return if (relativePath.isNotEmpty() && relativePath != \"/\") {\r\n        // remove preceding '/'\r\n        relativePath = relativePath.substring(1)\r\n        if (relativePath.endsWith('/')) {\r\n          relativePath + basename\r\n        } else {\r\n          \"$relativePath/$basename\"", "choices": [{"text": "\n        }\r\n      } else {\r\n        relativePath + basename\r\n      }\r\n    }"}], "metadata": {"task_id": "Android-Password-Store/34", "ground_truth": "        }\r\n      } else {\r\n        basename\r\n      }\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\BasePGPActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n    menuInflater.inflate(R.menu.pgp_handler, menu)\r\n    passwordEntry?.let { entry ->\r\n      menu.findItem(R.id.edit_password).isVisible = true\r\n      if (!entry.password.isNullOrBlank()) {\r\n        menu.findItem(R.id.share_password_as_plaintext).isVisible = true", "choices": [{"text": "\n      } else {\r\n        menu.findItem(R.id.edit_password).isVisible = false\r\n        menu.findItem(R.id.share_password_as_plaintext).isVisible = false\r\n      }\r\n    }\r\n    return true\r\n}"}], "metadata": {"task_id": "Android-Password-Store/35", "ground_truth": "        menu.findItem(R.id.copy_password).isVisible = true\r\n      }\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.util.settings.Constants\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun startAutoDismissTimer() {\r\n    lifecycleScope.launch {\r\n      val timeout =\r\n        settings.getString(PreferenceKeys.GENERAL_SHOW_TIME)?.toIntOrNull()\r\n          ?: Constants.DEFAULT_DECRYPTION_TIMEOUT\r\n      if (timeout != 0) {", "choices": [{"text": "\n        settings.setString(PreferenceKeys.GENERAL_SHOW_TIME, String.valueOf(timeout));\r\n      }\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/37", "ground_truth": "        delay(timeout.seconds)\r\n        finish()\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport java.io.File\nimport java.io.ByteArrayOutputStream\nimport com.github.michaelbull.result.runCatching\nimport app.passwordstore.crypto.PGPIdentifier\nprivate suspend fun decryptPGPStream(\r\n    passphrase: String,\r\n    gpgIdentifiers: List<PGPIdentifier>,\r\n  ) = runCatching {\r\n    val message = withContext(dispatcherProvider.io()) { File(fullPath).readBytes().inputStream() }\r\n    val outputStream = ByteArrayOutputStream()\r\n    val result =\r\n      repository.decrypt(\r\n        passphrase,\r\n        gpgIdentifiers,", "choices": [{"text": "\n        message,\r\n        outputStream,\r\n      )\r\n    if (result!= null) {\r\n      return result\r\n    }\r\n    return null\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/40", "ground_truth": "        message,\r\n        outputStream,\r\n      )\r\n    if (result.isOk) outputStream else throw result.error\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "import app.passwordstore.data.passfile.PasswordEntry\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.Text\n\r\n@Composable\r\nprivate fun ExtraContent(\r\n  entry: PasswordEntry,\r\n  modifier: Modifier = Modifier,\r\n) {\r\n  TextField(\r\n    value = entry.extraContentString,", "choices": [{"text": ",\r\n    modifier = modifier,\r\n  )\r\n}"}], "metadata": {"task_id": "Android-Password-Store/41", "ground_truth": "    onValueChange = {},\r\n    label = { Text(\"Extra content\") },\r\n    modifier = modifier.fillMaxWidth(),\r\n  )\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": "import app.passwordstore.ui.compose.theme.APSThemePreview\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun EditPasswordScreenPreview() {\r\n  APSThemePreview {\r\n    EditPasswordScreen(\r\n      entryName = \"Test Entry\",\r\n      entry = createTestEntry(),", "choices": [{"text": "(\r\n        entryName = \"Test Entry\",\r\n        entry = createTestEntry()\r\n      )\r\n    )\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/42", "ground_truth": "      onNavigateUp = {},\r\n      onSave = {},\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": "import app.passwordstore.util.totp.UriTotpFinder\nimport app.passwordstore.util.time.UserClock\nimport app.passwordstore.data.passfile.PasswordEntry\nimport app.passwordstore.R\nprivate fun createTestEntry() =\r\n  PasswordEntry(\r\n    UserClock(),\r\n    UriTotpFinder(),\r\n    \"\"\"\r\n    |My Password\r\n    |otpauth://totp/ACME%20Co:john@example.com?secret=HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ&issuer=ACME%20Co&algorithm=SHA1&digits=6&period=30\r\n    |login: msfjarvis", "choices": [{"text": "\n    |email: john@example.com\r\n    |password: HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ\r\n    |password_confirmation: HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ\r\n    |password_confirmation_confirmation: HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ\r\n    |password_confirmation_confirmation_confirmation: HXDMVJECJJWSRB3H"}], "metadata": {"task_id": "Android-Password-Store/43", "ground_truth": "    |URL: example.com\r\n  \"\"\"\r\n      .trimMargin()\r\n      .encodeToByteArray()\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        setResult(RESULT_CANCELED)\r\n        onBackPressedDispatcher.onBackPressed()\r\n      }\r\n      R.id.save_password -> {\r\n        copy = false\r\n        requireKeysExist { encrypt() }\r\n      }\r\n      R.id.save_and_copy_password -> {\r\n        copy = true\r\n        requireKeysExist { encrypt() }", "choices": [{"text": "\n        onBackPressedDispatcher.onBackPressed()\r\n      }\r\n    }\r\n    return super.onOptionsItemSelected(item)\r\n}"}], "metadata": {"task_id": "Android-Password-Store/45", "ground_truth": "      }\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\PasswordCreationActivity.kt"}}
{"prompt": "import app.passwordstore.ui.compose.theme.APSThemePreview\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun ViewPasswordScreenPreview() {\r\n  APSThemePreview {\r\n    ViewPasswordScreen(\r\n      entryName = \"Test Entry\",", "choices": [{"text": "\r\n      description = \"Test Description\",\r\n    ),\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/49", "ground_truth": "      entry = createTestEntry(),\r\n      onNavigateUp = {},\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\ViewPasswordScreen.kt"}}
{"prompt": "import app.passwordstore.util.totp.UriTotpFinder\nimport app.passwordstore.util.time.UserClock\nimport app.passwordstore.data.passfile.PasswordEntry\nimport app.passwordstore.R\nprivate fun createTestEntry() =\r\n  PasswordEntry(\r\n    UserClock(),\r\n    UriTotpFinder(),\r\n    \"\"\"\r\n    |My Password\r\n    |otpauth://totp/ACME%20Co:john@example.com?secret=HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ&issuer=ACME%20Co&algorithm=SHA1&digits=6&period=30\r\n    |login: msfjarvis", "choices": [{"text": "\n    |email: john@example.com\r\n    |password: HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ\r\n    |password_confirmation: HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ\r\n    |password_confirmation_confirmation: HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ\r\n    |password_confirmation_confirmation_confirmation: HXDMVJECJJWSRB3H"}], "metadata": {"task_id": "Android-Password-Store/50", "ground_truth": "    |URL: example.com\r\n  \"\"\"\r\n      .trimMargin()\r\n      .encodeToByteArray()\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\ViewPasswordScreen.kt"}}
{"prompt": "fun build(): BasicBottomSheet {\r\n      require(message != null) { \"Message needs to be set\" }\r\n      return BasicBottomSheet(\r\n        title,\r\n        message!!,\r\n        positiveButtonLabel,", "choices": [{"text": ",\r\n        negativeButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r\n        positiveButtonLabel,\r"}], "metadata": {"task_id": "Android-Password-Store/59", "ground_truth": "        negativeButtonLabel,\r\n        positiveButtonClickListener,\r\n        negativeButtonClickListener\r\n      )\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "private fun setPreferences(length: Int, separator: Char) {", "choices": [{"text": "\n    mPreferences = new ArrayList<>();\n    for (int i = 0; i < mPreferences.size(); i++) {\n        mPreferences.add(new Preference(i, mPreferences.get(i)));\n    }\n}"}], "metadata": {"task_id": "Android-Password-Store/61", "ground_truth": "    prefs.edit {\r\n      putInt(DICEWARE_LENGTH, length)\r\n      putString(DICEWARE_SEPARATOR, separator.toString())\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\DicewarePasswordGeneratorDialogFragment.kt"}}
{"prompt": "import app.passwordstore.passgen.random.PasswordOption\nimport app.passwordstore.passgen.random.PasswordGenerator\nimport app.passwordstore.R\nimport androidx.core.content.edit\nimport android.content.Context\nprivate fun setPrefs(ctx: Context, options: List<PasswordOption>, targetLength: Int): Boolean {\r\n    ctx.getSharedPreferences(\"PasswordGenerator\", Context.MODE_PRIVATE).edit {\r\n      for (possibleOption in PasswordOption.entries) {\r\n        putBoolean(possibleOption.key, possibleOption in options)", "choices": [{"text": "\n      }\r\n      return true\r\n    }\r\n    return false\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/68", "ground_truth": "      }\r\n      putInt(\"length\", targetLength)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\PasswordGeneratorDialogFragment.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        setResult(RESULT_CANCELED)\r\n        onBackPressedDispatcher.onBackPressed()\r\n      }", "choices": [{"text": "\n    } else {\r\n      setResult(RESULT_CANCELED)\r\n      onBackPressedDispatcher.onBackPressed()\r\n    }\r\n    return true\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/72", "ground_truth": "      R.id.crypto_select -> selectFolder()\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\folderselect\\SelectFolderActivity.kt"}}
{"prompt": "import net.schmizz.sshj.common.SSHException\nimport net.schmizz.sshj.common.DisconnectReason\nimport com.github.michaelbull.result.Err\nimport app.passwordstore.R\nprivate fun isExplicitlyUserInitiatedError(throwable: Throwable): Boolean {\r\n    var cause: Throwable? = throwable\r\n    while (cause != null) {\r\n      if (\r\n        cause is SSHException && cause.disconnectReason == DisconnectReason.AUTH_CANCELLED_BY_USER\r\n      )", "choices": [{"text": " {\r\n        return true\r\n      }\r\n      cause = cause.getCause()\r\n    }\r\n    return false\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/74", "ground_truth": "        return true\r\n      cause = cause.cause\r\n    }\r\n    return false\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\base\\BaseGitActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "_onOptionsItemSelected(item.itemId)\r\n      }\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/75", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\config\\GitConfigActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "_onOptionsItemSelected(item.itemId)\r\n      }\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/76", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\config\\GitServerConfigActivity.kt"}}
{"prompt": "import android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        finish()", "choices": [{"text": "\n        finish()\r\n      }\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/80", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\log\\GitLogActivity.kt"}}
{"prompt": "import androidx.activity.addCallback\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    supportActionBar?.hide()\r\n    val callback = onBackPressedDispatcher.addCallback(enabled = false) { finishAffinity() }\r\n    supportFragmentManager.addOnBackStackChangedListener {", "choices": [{"text": "\n        super.onCreate(savedInstanceState)\r\n        supportFragmentManager.addOnBackStackChangedListener(callback)\r\n    } else {\r\n        super.onCreate(savedInstanceState)\r\n        supportFragmentManager.removeOnBackStackChangedListener(callback)\r\n    }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/86", "ground_truth": "      if (supportFragmentManager.backStackEntryCount == 0) {\r\n        callback.isEnabled = true\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\onboarding\\activity\\OnboardingActivity.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport java.io.File\nimport app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.flowWithLifecycle\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    setContentView(R.layout.activity_pwdstore)\r\n\r\n    lifecycleScope.launch {\r\n      model.currentDir.flowWithLifecycle(lifecycle).collect { dir ->\r\n        val basePath = PasswordRepository.getRepositoryDirectory().absoluteFile\r\n        supportActionBar?.apply {", "choices": [{"text": "\n          getSupportActionBar().setDisplayHomeAsUpEnabled(true)\r\n        }\r\n      }\r\n    }"}], "metadata": {"task_id": "Android-Password-Store/94", "ground_truth": "          if (dir != basePath) title = dir.name else setTitle(R.string.app_name)\r\n        }\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.R\noverride fun onResume() {\r\n    super.onResume()\r\n    checkLocalRepository()\r\n    if (settings.getBoolean(PreferenceKeys.SEARCH_ON_START, false) && ::searchItem.isInitialized) {", "choices": [{"text": "_onResume()\r\n    if (settings.getBoolean(PreferenceKeys.SEARCH_ON_STOP, false) && ::searchItem.isInitialized) {\r\n        ::searchItem.onResume()\r\n    }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/96", "ground_truth": "      if (!searchItem.isActionViewExpanded) {\r\n        searchItem.expandActionView()\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import app.passwordstore.ui.crypto.DecryptActivity\nimport app.passwordstore.data.password.PasswordItem\nimport android.content.Intent\nimport android.content.ComponentName\nfun decryptPassword(item: PasswordItem) {\r\n    val authDecryptIntent = item.createAuthEnabledIntent(this)\r\n    val decryptIntent =\r\n      Intent(authDecryptIntent).setComponent(ComponentName(this, DecryptActivity::class.java))", "choices": [{"text": "\n    super.onActivityResult(decryptIntent, RESULT_OK)\r\n}"}], "metadata": {"task_id": "Android-Password-Store/100", "ground_truth": "    startActivity(decryptIntent)\r\n\r\n    // Adds shortcut\r\n    shortcutHandler.addDynamicShortcut(item, authDecryptIntent)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.R\nprivate fun validateState(): Boolean {\r\n    if (!PasswordRepository.isInitialized) {\r\n      MaterialAlertDialogBuilder(this)\r\n        .setMessage(resources.getString(R.string.creation_dialog_text))\r\n        .setPositiveButton(resources.getString(R.string.dialog_ok), null)", "choices": [{"text": "\n       .setNegativeButton(resources.getString(R.string.dialog_cancel), null)\r\n       .show();\r\n    }\r\n    return PasswordRepository.isInitialized;\r\n}"}], "metadata": {"task_id": "Android-Password-Store/101", "ground_truth": "        .show()\r\n      return false\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.data.password.PasswordItem\nimport app.passwordstore.R\nfun matchPasswordWithApp(item: PasswordItem) {\r\n    val path =\r\n      item.file.absolutePath\r\n        .replace(PasswordRepository.getRepositoryDirectory().toString() + \"/\", \"\")\r\n        .replace(\".gpg\", \"\")", "choices": [{"text": "\n    if (path.endsWith(\".gpg\")) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/106", "ground_truth": "    val data = Intent()\r\n    data.putExtra(\"path\", path)\r\n    setResult(RESULT_OK, data)\r\n    finish()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "import kotlinx.coroutines.runBlocking\nimport app.passwordstore.crypto.PGPKey\nprivate fun importKey(bytes: ByteArray, replace: Boolean): PGPKey? {\r\n    lastBytes = bytes\r\n    val (key, error) = runBlocking { keyManager.addKey(PGPKey(bytes), replace = replace) }\r\n    if (replace) {", "choices": [{"text": "\n        keyManager.replaceKey(PGPKey(bytes), replace = false)\r\n    } else {\r\n        keyManager.addKey(PGPKey(bytes))\r\n    }\r\n    return key\r\n}"}], "metadata": {"task_id": "Android-Password-Store/110", "ground_truth": "      lastBytes = null\r\n    }\r\n    if (error != null) throw error\r\n    return key\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyImportActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.AlertDialog\n\r\n@Suppress(\"NOTHING_TO_INLINE\")\r\n@Composable\r\nprivate inline fun DeleteConfirmationDialog(\r\n  isDeleting: Boolean,\r\n  noinline onDismiss: () -> Unit,\r\n  noinline onConfirm: () -> Unit,\r\n) {\r\n  if (isDeleting) {\r\n    AlertDialog(\r\n      onDismissRequest = onDismiss,\r\n      title = {\r\n        Text(text = stringResource(R.string.pgp_key_manager_delete_confirmation_dialog_title))\r\n      },\r\n      confirmButton = {\r\n        TextButton(onClick = onConfirm) { Text(text = stringResource(R.string.dialog_yes)) }\r\n      },\r\n      dismissButton = {", "choices": [{"text": "\r\n        TextButton(onClick = onDismiss) { Text(text = stringResource(R.string.dialog_no)) }\r\n      }\r\n    ).show();\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/111", "ground_truth": "        TextButton(onClick = onDismiss) { Text(text = stringResource(R.string.dialog_no)) }\r\n      },\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyList.kt"}}
{"prompt": "import kotlinx.collections.immutable.toPersistentList\nimport app.passwordstore.ui.compose.theme.APSThemePreview\nimport app.passwordstore.crypto.PGPIdentifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.background\n\r\n@Preview\r\n@Composable\r\nprivate fun KeyListPreview() {\r\n  APSThemePreview {\r\n    Box(modifier = Modifier.background(MaterialTheme.colorScheme.background)) {\r\n      KeyList(\r\n        identifiers =\r\n          listOfNotNull(\r\n              PGPIdentifier.fromString(\"ultramicroscopicsilicovolcanoconiosis@example.com\"),\r\n              PGPIdentifier.fromString(\"0xB950AE2813841585\"),\r\n            )\r\n            .toPersistentList(),", "choices": [{"text": "\n      )\r\n    }\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/112", "ground_truth": "        onItemClick = {}\r\n      )\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyList.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "\n        return true\r\n      }\r\n    }\r\n    return super.onOptionsItemSelected(item)\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/115", "ground_truth": "      }\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\proxy\\ProxySelectorActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home ->\r\n        if (!preferencesAdapter.goBack()) {\r\n          super.onOptionsItemSelected(item)\r\n        } else {", "choices": [{"text": "\n      if (item.getItemId() == android.R.id.home) {\r\n        preferencesAdapter.goBack()\r\n      } else {\r\n        super.onOptionsItemSelected(item)\r\n      }\r\n    }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/119", "ground_truth": "          true\r\n        }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\settings\\SettingsActivity.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "_onOptionsItemSelected(item.itemId)\r\n      }\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/120", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\sshkeygen\\SshKeyGenActivity.kt"}}
{"prompt": "import androidx.core.content.getSystemService\nimport android.view.inputmethod.InputMethodManager\nprivate fun hideKeyboard() {\r\n    val imm = getSystemService<InputMethodManager>() ?: return\r\n    var view = currentFocus", "choices": [{"text": "\n    imm.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS)\r\n    imm.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS)\r\n    imm.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS)\r\n    imm.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS)\r\n}"}], "metadata": {"task_id": "Android-Password-Store/121", "ground_truth": "    if (view == null) {\r\n      view = View(this)\r\n    }\r\n    imm.hideSoftInputFromWindow(view.windowToken, 0)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\sshkeygen\\SshKeyGenActivity.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\noverride fun animateChange(\r\n    oldHolder: RecyclerView.ViewHolder,\r\n    newHolder: RecyclerView.ViewHolder,\r\n    preInfo: ItemHolderInfo,\r\n    postInfo: ItemHolderInfo\r\n  ): Boolean {\r\n    return if (isEnabled) {", "choices": [{"text": " {\r\n      animateChange(oldHolder, newHolder, preInfo, postInfo);\r\n    } else {\r\n      animateChange(oldHolder, newHolder, null, null);\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/124", "ground_truth": "      super.animateChange(oldHolder, newHolder, preInfo, postInfo)\r\n    } else {\r\n      dontAnimate(oldHolder)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\util\\OnOffItemAnimator.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\noverride fun animatePersistence(\r\n    viewHolder: RecyclerView.ViewHolder,\r\n    preInfo: ItemHolderInfo,\r\n    postInfo: ItemHolderInfo\r\n  ): Boolean {\r\n    return if (isEnabled) {", "choices": [{"text": "\n      viewHolder.animatePersistence(true);\r\n    } else {\r\n      viewHolder.animatePersistence(false);\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/126", "ground_truth": "      super.animatePersistence(viewHolder, preInfo, postInfo)\r\n    } else {\r\n      dontAnimate(viewHolder)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\util\\OnOffItemAnimator.kt"}}
{"prompt": "import com.github.androidpasswordstore.autofillparser.AutofillAction\nimport android.service.autofill.Dataset\nimport android.os.Build\nimport android.content.IntentSender\nimport android.content.Context\n @Suppress(\"DEPRECATION\")\r\n  private fun makeIntentDataset(\r\n    context: Context,\r\n    action: AutofillAction,\r\n    intentSender: IntentSender,\r\n    metadata: DatasetMetadata,\r\n  ): Dataset {\r\n    return Dataset.Builder(makeRemoteView(context, metadata)).run {", "choices": [{"text": "\n      super.makeIntentDataset(context, action, intentSender, metadata)\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/128", "ground_truth": "      fillWith(scenario, action, credentials = null)\r\n      setAuthentication(intentSender)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api26AutofillResponseBuilder.kt"}}
{"prompt": "import android.service.autofill.SaveInfo\nprivate fun makeSaveInfo(): SaveInfo? {\r\n    if (!canBeSaved) return null\r\n    check(saveFlags != null) { \"saveFlags must not be null\" }\r\n    val idsToSave = scenario.fieldsToSave.toTypedArray()\r\n    if (idsToSave.isEmpty()) return null\r\n    var saveDataTypes = SaveInfo.SAVE_DATA_TYPE_PASSWORD\r\n    if (scenario.hasUsername) {\r\n      saveDataTypes = saveDataTypes or SaveInfo.SAVE_DATA_TYPE_USERNAME\r\n    }", "choices": [{"text": "\n    return new SaveInfo(idsToSave, saveDataTypes)\r\n}"}], "metadata": {"task_id": "Android-Password-Store/134", "ground_truth": "    return SaveInfo.Builder(saveDataTypes, idsToSave).run {\r\n      setFlags(saveFlags)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api26AutofillResponseBuilder.kt"}}
{"prompt": "import com.github.androidpasswordstore.autofillparser.fillWith\nimport com.github.androidpasswordstore.autofillparser.AutofillAction\nimport android.widget.inline.InlinePresentationSpec\nimport android.service.autofill.Dataset\nimport android.os.Build\nimport android.content.IntentSender\nimport android.content.Context\n @Suppress(\"DEPRECATION\")\r\n  private fun makeIntentDataSetR(\r\n    context: Context,\r\n    action: AutofillAction,\r\n    intentSender: IntentSender,\r\n    metadata: DatasetMetadata,\r\n    imeSpec: InlinePresentationSpec?,\r\n  ): Dataset {\r\n    return Dataset.Builder(makeRemoteView(context, metadata)).run {\r\n      fillWith(scenario, action, credentials = null)\r\n      setAuthentication(intentSender)\r\n      if (imeSpec != null) {\r\n        val inlinePresentation = makeInlinePresentation(context, imeSpec, metadata)\r\n        if (inlinePresentation != null) {\r\n          setInlinePresentation(inlinePresentation)", "choices": [{"text": "\n        }\r\n      }\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/137", "ground_truth": "        }\r\n      }\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "import com.github.androidpasswordstore.autofillparser.AutofillAction\nimport app.passwordstore.autofill.oreo.ui.AutofillSmsActivity\nimport android.widget.inline.InlinePresentationSpec\nimport android.service.autofill.Dataset\nimport android.content.IntentSender\nimport android.content.Context\nprivate fun makeFillOtpFromSmsDataset(\r\n    context: Context,\r\n    imeSpec: InlinePresentationSpec?\r\n  ): Dataset? {\r\n    if (!scenario.hasFieldsToFillOn(AutofillAction.FillOtpFromSms)) return null\r\n    if (!AutofillSmsActivity.shouldOfferFillFromSms(context)) return null\r\n    val metadata = makeFillOtpFromSmsMetadata(context)\r\n    val intentSender = AutofillSmsActivity.makeFillOtpFromSmsIntentSender(context)\r\n    return makeIntentDataset(\r\n      context,\r\n      AutofillAction.FillOtpFromSms,", "choices": [{"text": "      metadata,\r\n      intentSender\r\n    )\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/141", "ground_truth": "      intentSender,\r\n      metadata,\r\n      imeSpec\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "import android.service.autofill.SaveInfo\nprivate fun makeSaveInfo(): SaveInfo? {\r\n    if (!canBeSaved) return null\r\n    check(saveFlags != null) { \"saveFlags must not be null\" }\r\n    val idsToSave = scenario.fieldsToSave.toTypedArray()\r\n    if (idsToSave.isEmpty()) return null\r\n    var saveDataTypes = SaveInfo.SAVE_DATA_TYPE_PASSWORD\r\n    if (scenario.hasUsername) {\r\n      saveDataTypes = saveDataTypes or SaveInfo.SAVE_DATA_TYPE_USERNAME\r\n    }", "choices": [{"text": "\n    return new SaveInfo(idsToSave, saveDataTypes)\r\n}"}], "metadata": {"task_id": "Android-Password-Store/143", "ground_truth": "    return SaveInfo.Builder(saveDataTypes, idsToSave).run {\r\n      setFlags(saveFlags)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "import com.github.androidpasswordstore.autofillparser.FormOrigin\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate fun Context.matchPreferences(formOrigin: FormOrigin): SharedPreferences {", "choices": [{"text": "\n    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\n    return sharedPreferences.getBoolean(formOrigin.getKey(), false);\n}"}], "metadata": {"task_id": "Android-Password-Store/145", "ground_truth": "  return when (formOrigin) {\r\n    is FormOrigin.App -> autofillAppMatches\r\n    is FormOrigin.Web -> autofillWebMatches\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillMatcher.kt"}}
{"prompt": "import app.passwordstore.R\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.content.res.Resources\nimport android.content.Context\nfun makeRemoteView(context: Context, metadata: DatasetMetadata): RemoteViews {\r\n  return RemoteViews(context.packageName, R.layout.oreo_autofill_dataset).apply {\r\n    setTextViewText(R.id.title, metadata.title)\r\n    if (metadata.subtitle != null) {\r\n      setTextViewText(R.id.summary, metadata.subtitle)\r\n    } else {\r\n      setViewVisibility(R.id.summary, View.GONE)\r\n    }\r\n    if (metadata.iconRes != Resources.ID_NULL) {\r\n      setImageViewResource(R.id.icon, metadata.iconRes)", "choices": [{"text": "\n    } else {\r\n      setViewVisibility(R.id.summary, View.VISIBLE)\r\n    }\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/150", "ground_truth": "    } else {\r\n      setViewVisibility(R.id.icon, View.GONE)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillViewUtils.kt"}}
{"prompt": "import androidx.compose.ui.Modifier\nfun Modifier.conditional(isEnabled: Boolean, modifier: Modifier.() -> Modifier): Modifier {\r\n  return if (isEnabled) {", "choices": [{"text": "\n    modifier.setEnabled(true)\r\n  } else {\r\n    modifier.setDisabled(false)\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/161", "ground_truth": "    then(modifier())\r\n  } else {\r\n    this\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\AndroidExtensions.kt"}}
{"prompt": "import app.passwordstore.R\nimport androidx.fragment.app.commit\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.IdRes\nfun FragmentManager.performTransactionWithBackStack(\r\n  destinationFragment: Fragment,\r\n  @IdRes containerViewId: Int = android.R.id.content\r\n) {\r\n  commit {\r\n    addToBackStack(destinationFragment.tag)\r\n    setCustomAnimations(\r\n      R.animator.slide_in_left,\r\n      R.animator.slide_out_left,\r\n      R.animator.slide_in_right,", "choices": [{"text": "\n      R.animator.slide_out_right,\r\n      R.animator.slide_in_bottom,\r\n      R.animator.slide_out_bottom\r\n    )\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/163", "ground_truth": "      R.animator.slide_out_right\r\n    )\r\n    replace(containerViewId, destinationFragment)\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\FragmentExtensions.kt"}}
{"prompt": "import kotlin.reflect.KProperty\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport androidx.fragment.app.Fragment\noverride fun getValue(thisRef: Fragment, property: KProperty<*>): T {\r\n    val binding = binding\r\n    if (binding != null) {\r\n      return binding\r\n    }\r\n\r\n    val lifecycle = fragment.viewLifecycleOwner.lifecycle\r\n    if (!lifecycle.currentState.isAtLeast(Lifecycle.State.INITIALIZED)) {\r\n      throw IllegalStateException(\r\n        \"Should not attempt to get bindings when Fragment views are destroyed.\"", "choices": [{"text": "\n      )\r\n    }\r\n\r\n    if (lifecycle.currentState.isAtLeast(Lifecycle.State.DESTROYED)) {\r\n      throw IllegalStateException(\r\n        \"Should not attempt to get bindings when Fragment views are destroyed.\"\r\n      )\r\n    }\r\n\r\n    return null\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/164", "ground_truth": "      )\r\n    }\r\n\r\n    return viewBindingFactory(thisRef.requireView()).also { this.binding = it }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\FragmentViewBindingDelegate.kt"}}
{"prompt": "private fun rootCause(throwable: Throwable): Throwable {\r\n    var cause = throwable\r\n    while (cause.cause != null) {\r\n      if (cause is GitException) break\r\n      val nextCause = cause.cause!!", "choices": [{"text": "\n      if (nextCause!= null) {\r\n        throw nextCause\r\n      }\r\n      cause = nextCause\r\n    }\r\n    return throwable\r\n}"}], "metadata": {"task_id": "Android-Password-Store/166", "ground_truth": "      if (nextCause is RemoteException) break\r\n      cause = nextCause\r\n    }\r\n    return cause\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\ErrorMessages.kt"}}
{"prompt": "import org.eclipse.jgit.revwalk.RevCommit\nimport org.eclipse.jgit.api.Git\nimport logcat.logcat\nimport logcat.LogPriority.ERROR\nimport com.github.michaelbull.result.runCatching\nimport app.passwordstore.data.repo.PasswordRepository\nprivate fun commits(): Iterable<RevCommit> {\r\n  val repo = PasswordRepository.repository\r\n  if (repo == null) {\r\n    logcat(TAG, ERROR) { \"Could not access git repository\" }\r\n    return listOf()\r\n  }\r\n  return runCatching { Git(repo).log().call() }", "choices": [{"text": "\n  } else {\r\n    return runCatching { Git(repo).log().call() }\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/167", "ground_truth": "    .getOrElse { e ->\r\n      logcat(TAG, ERROR) { e.asLog(\"Failed to obtain git commits\") }\r\n      listOf()\r\n    }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\GitLogModel.kt"}}
{"prompt": "import org.eclipse.jgit.transport.URIish\nimport org.eclipse.jgit.transport.CredentialItem\nimport app.passwordstore.R\noverride fun get(uri: URIish?, vararg items: CredentialItem): Boolean {\r\n      for (item in items) {\r\n        when (item) {\r\n          is CredentialItem.Username -> item.value = uri?.user\r\n          is CredentialItem.Password -> {\r\n            item.value =\r\n              cachedPassword?.clone()\r\n                ?: passwordFinder.reqPassword(null).also { cachedPassword = it.clone() }\r\n          }", "choices": [{"text": "\n        }\r\n      }\r\n      return false\r\n    }"}], "metadata": {"task_id": "Android-Password-Store/169", "ground_truth": "          else -> UnsupportedCredentialItem(uri, item.javaClass.name)\r\n        }\r\n      }\r\n      return true\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\operation\\GitOperation.kt"}}
{"prompt": "import org.eclipse.jgit.api.GitCommand\nimport org.eclipse.jgit.api.Git\nimport com.github.michaelbull.result.Result\nimport com.github.michaelbull.result.Ok\nimport app.passwordstore.util.git.GitCommandExecutor\nimport app.passwordstore.R\nsuspend fun execute(): Result<Unit, Throwable> {\r\n    if (!preExecute()) {\r\n      return Ok(Unit)\r\n    }\r\n    val operationResult =\r\n      GitCommandExecutor(\r\n          callingActivity,\r\n          this,", "choices": [{"text": "          new GitCommandExecutor.ResultCallback() {\r\n            @Override\r\n            public void onSuccess(Result<Unit, Throwable> result) {\r\n              super.onSuccess(result)\r\n            }\r\n          }\r\n    )\r\n    return operationResult\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/173", "ground_truth": "        )\r\n        .execute()\r\n    postExecute()\r\n    return operationResult\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\operation\\GitOperation.kt"}}
{"prompt": "import com.hierynomus.sshj.key.KeyAlgorithms\nprivate fun initKeyAlgorithms() {\r\n    keyAlgorithms =\r\n      listOf(\r\n        KeyAlgorithms.SSHRSACertV01(),\r\n        KeyAlgorithms.EdDSA25519(),\r\n        KeyAlgorithms.ECDSASHANistp521(),\r\n        KeyAlgorithms.ECDSASHANistp384(),\r\n        KeyAlgorithms.ECDSASHANistp256(),", "choices": [{"text": "\n        KeyAlgorithms.ECDSASHANistp522(),\r\n        KeyAlgorithms.ECDSASHANistp384(),\r\n        KeyAlgorithms.ECDSASHANistp256(),\r\n        KeyAlgorithms.ECDSASHANistp523(),\r\n        KeyAlgorithms.ECDSASHANistp524(),\r\n        KeyAlgorithms.ECDSASHANistp525(),\r\n        KeyAlgorithms.ECDSASHANistp526(),\r\n        KeyAlgorithms.ECDSASHANistp527(),\r\n        KeyAlgorithms.ECDSASHANist"}], "metadata": {"task_id": "Android-Password-Store/175", "ground_truth": "        KeyAlgorithms.RSASHA512(),\r\n        KeyAlgorithms.RSASHA256(),\r\n        KeyAlgorithms.SSHRSA(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "import com.hierynomus.sshj.userauth.keyprovider.OpenSSHKeyV1KeyFile\nprivate fun initFileKeyProviderFactories() {\r\n    fileKeyProviderFactories =\r\n      listOf(\r\n        OpenSSHKeyV1KeyFile.Factory(),", "choices": [{"text": "\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV1KeyFile.Factory(),\r\n        OpenSSHKeyV"}], "metadata": {"task_id": "Android-Password-Store/176", "ground_truth": "        PKCS8KeyFile.Factory(),\r\n        OpenSSHKeyFile.Factory(),\r\n        PuTTYKeyFile.Factory(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "import com.hierynomus.sshj.transport.cipher.GcmCiphers\nprivate fun initCipherFactories() {\r\n    cipherFactories =\r\n      listOf(\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),", "choices": [{"text": "\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM"}], "metadata": {"task_id": "Android-Password-Store/177", "ground_truth": "        BlockCiphers.AES256CTR(),\r\n        BlockCiphers.AES192CTR(),\r\n        BlockCiphers.AES128CTR(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "import com.hierynomus.sshj.transport.mac.Macs\nprivate fun initMACFactories() {\r\n    macFactories =\r\n      listOf(\r\n        Macs.HMACSHA2512Etm(),", "choices": [{"text": "\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256Etm(),\r\n        Macs.HMACSHA256"}], "metadata": {"task_id": "Android-Password-Store/178", "ground_truth": "        Macs.HMACSHA2256Etm(),\r\n        Macs.HMACSHA2512(),\r\n        Macs.HMACSHA2256(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "private fun initCompressionFactories() {", "choices": [{"text": "\n    if (mCompression!= null) {\n        return mCompression;\n    } else {\n        return null;\n    }\n}"}], "metadata": {"task_id": "Android-Password-Store/179", "ground_truth": "    compressionFactories =\r\n      listOf(\r\n        NoneCompression.Factory(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "import kotlinx.coroutines.isActive\nprivate suspend fun startTimer(showTime: Int) {\r\n    var current = 0\r\n    while (scope.isActive && current < showTime) {", "choices": [{"text": "\n        current = current + showTime\r\n    }\r\n    return current\r\n}"}], "metadata": {"task_id": "Android-Password-Store/198", "ground_truth": "      // Block for 1s or until cancel is signalled\r\n      current++\r\n      delay(1000)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\ClipboardService.kt"}}
{"prompt": "import androidx.documentfile.provider.DocumentFile\nprivate fun copyDirToDir(sourceDirectory: DocumentFile, targetDirectory: DocumentFile) {\r\n    sourceDirectory.listFiles().forEach { file ->\r\n      if (file.isDirectory) {\r\n        // Create new directory and recurse\r\n        val newDir = targetDirectory.createDirectory(file.name!!)\r\n        copyDirToDir(file, newDir!!)", "choices": [{"text": "\n      } else {\r\n        copyDirToDir(file, newDir!!)\r\n      }\r\n    }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/203", "ground_truth": "      } else {\r\n        copyFileToDir(file, targetDirectory)\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\PasswordExportService.kt"}}
{"prompt": "import app.passwordstore.R\nimport androidx.core.app.NotificationCompat\nimport android.app.NotificationChannel\nprivate fun createNotification() {\r\n    createNotificationChannel()\r\n\r\n    val notification =\r\n      NotificationCompat.Builder(this, CHANNEL_ID)\r\n        .setContentTitle(getString(R.string.app_name))\r\n        .setContentText(getString(R.string.exporting_passwords))\r\n        .setSmallIcon(R.drawable.ic_round_import_export)", "choices": [{"text": "(R.drawable.ic_round_import_export)\r\n       .setLargeIcon(R.drawable.ic_round_import_export)\r\n       .setPositiveButton(getString(R.string.ok), new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.cancel();\r\n            }\r\n        })\r\n       .setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {\r\n            @Override\r\n"}], "metadata": {"task_id": "Android-Password-Store/204", "ground_truth": "        .setPriority(NotificationCompat.PRIORITY_LOW)\r\n        .build()\r\n\r\n    startForeground(2, notification)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\PasswordExportService.kt"}}
{"prompt": "import com.github.michaelbull.result.get\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun migrateToClipboardHistory(sharedPrefs: SharedPreferences) {\r\n  if (sharedPrefs.contains(PreferenceKeys.CLEAR_CLIPBOARD_20X)) {\r\n    sharedPrefs.edit {\r\n      putBoolean(\r\n        PreferenceKeys.CLEAR_CLIPBOARD_HISTORY,\r\n        sharedPrefs.getBoolean(PreferenceKeys.CLEAR_CLIPBOARD_20X, false)", "choices": [{"text": "\n    }\r\n  } else {\r\n    sharedPrefs.edit {\r\n      putBoolean(\r\n        PreferenceKeys.CLEAR_CLIPBOARD_HISTORY,\r\n        sharedPrefs.getBoolean(PreferenceKeys.CLEAR_CLIPBOARD_20X, false)\r\n      )\r\n    }\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/209", "ground_truth": "      )\r\n      remove(PreferenceKeys.CLEAR_CLIPBOARD_20X)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "import com.github.michaelbull.result.get\nimport app.passwordstore.util.extensions.getString\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun migrateToDiceware(sharedPrefs: SharedPreferences) {\r\n  if (sharedPrefs.contains(PreferenceKeys.PREF_KEY_PWGEN_TYPE)) {\r\n    sharedPrefs.edit {\r\n      if (sharedPrefs.getString(PreferenceKeys.PREF_KEY_PWGEN_TYPE) == \"xkpasswd\") {", "choices": [{"text": "\n        sharedPrefs.edit().putString(PreferenceKeys.PREF_KEY_PWGEN_TYPE, \"xkpasswd\").apply();\r\n      } else {\r\n        sharedPrefs.edit().putString(PreferenceKeys.PREF_KEY_PWGEN_TYPE, \"passwd\").apply();\r\n      }\r\n    }\r\n  } else {\r\n    sharedPrefs.edit().putString(PreferenceKeys.PREF_KEY_PWGEN_TYPE, \"passwd\").apply();\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/210", "ground_truth": "        putString(PreferenceKeys.PREF_KEY_PWGEN_TYPE, \"diceware\")\r\n      }\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "import com.github.michaelbull.result.get\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun removeExternalStorageProperties(prefs: SharedPreferences) {\r\n  prefs.edit {\r\n    if (prefs.contains(PreferenceKeys.GIT_EXTERNAL)) {\r\n      if (prefs.getBoolean(PreferenceKeys.GIT_EXTERNAL, false)) {\r\n        putBoolean(PreferenceKeys.GIT_EXTERNAL_MIGRATED, true)\r\n      }\r\n      remove(PreferenceKeys.GIT_EXTERNAL)\r\n    }", "choices": [{"text": "\n    prefs.remove(PreferenceKeys.GIT_EXTERNAL)\r\n  }\r\n}"}], "metadata": {"task_id": "Android-Password-Store/211", "ground_truth": "    if (prefs.contains(PreferenceKeys.GIT_EXTERNAL_REPO)) {\r\n      remove(PreferenceKeys.GIT_EXTERNAL_REPO)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "import app.passwordstore.crypto.PGPIdentifier\nvar keys ImmutableList<PGPIdentifier>\nfun deleteKey(identifier: PGPIdentifier) {", "choices": [{"text": "_deleteKey(identifier: PGPIdentifier) {\n    keys.remove(identifier)\n}"}], "metadata": {"task_id": "Android-Password-Store/216", "ground_truth": "    viewModelScope.launch {\r\n      keyManager.removeKey(identifier)\r\n      updateKeySet()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\PGPKeyListViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.flow.filter\nimport java.io.File\nprivate fun makeSearchAction(\r\n    baseDirectory: File,\r\n    filter: String,\r\n    filterMode: FilterMode,\r\n    searchMode: SearchMode,\r\n    listMode: ListMode\r\n  ): SearchAction {\r\n    return SearchAction(\r\n      baseDirectory = baseDirectory,\r\n      filter = filter,\r\n      filterMode = filterMode,", "choices": [{"text": "\n      searchMode = searchMode,\r\n      listMode = listMode\r\n    );\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/218", "ground_truth": "      searchMode = searchMode,\r\n      listMode = listMode,\r\n      updateCounter = updateCounter\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "import java.io.File\nprivate fun shouldTake(file: File) =\r\n    with(file) {\r\n      if (showHiddenContents) {\r\n        return !file.name.startsWith(\".git\")\r\n      }\r\n      if (isDirectory) {", "choices": [{"text": "\n        return!file.name.endsWith(\".git\")\r\n      }\r\n      return false\r\n    }"}], "metadata": {"task_id": "Android-Password-Store/219", "ground_truth": "        !isHidden\r\n      } else {\r\n        !isHidden && file.extension == \"gpg\"\r\n      }\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.drop\nimport kotlinx.coroutines.flow.asFlow\nimport kotlinx.coroutines.flow.Flow\nimport java.io.File\nprivate fun listFilesRecursively(dir: File): Flow<File> {\r\n    return dir\r\n      // Take top directory even if it is hidden.\r\n      .walkTopDown()\r\n      .onEnter { file -> file == dir || shouldTake(file) }\r\n      .asFlow()\r\n      // Skip the root directory\r\n      .drop(1)\r\n      .map {", "choices": [{"text": "\n        return listFilesRecursively(dir.getParentFile())\r\n      }\r\n     .drop(1)\r\n     .map {\r\n        return listFilesRecursively(dir.getParentFile())\r\n      }\r\n     .drop(1)\r\n     .map {\r\n        return listFilesRecursively(dir.getParentFile())\r\n      }\r\n     .drop(1)\r\n     .map {\r\n        return listFilesRecursively(dir.getParentFile())\r\n      }\r\n     .drop(1)\r\n     .map {\r\n        return listFiles"}], "metadata": {"task_id": "Android-Password-Store/220", "ground_truth": "        yield()\r\n        it\r\n      }\r\n      .filter(::shouldTake)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.Flow\nimport java.io.File\nimport com.github.androidpasswordstore.sublimefuzzy.Fuzzy\nfun search(\r\n    filter: String,\r\n    baseDirectory: File? = null,\r\n    filterMode: FilterMode = FilterMode.Fuzzy,\r\n    searchMode: SearchMode? = null,\r\n    listMode: ListMode = ListMode.AllEntries\r\n  ) {\r\n    require(baseDirectory?.isDirectory != false) { \"Can only search in a directory\" }\r\n    searchActionFlow.update {\r\n      makeSearchAction(\r\n        filter = filter,\r\n        baseDirectory = baseDirectory ?: _currentDir.value,\r\n        filterMode = filterMode,", "choices": [{"text": "\n        searchMode = searchMode,\r\n        listMode = listMode\r\n      )\r\n    }\r\n  }"}], "metadata": {"task_id": "Android-Password-Store/223", "ground_truth": "        searchMode = searchMode ?: defaultSearchMode,\r\n        listMode = listMode\r\n      )\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "import androidx.annotation.RequiresPermission\nimport android.provider.ContactsContract\nimport android.content.Context\nimport android.Manifest\n\r\n@RequiresPermission(Manifest.permission.READ_CONTACTS)\r\nfun findContactByLookupKey(context: Context, lookupKey: String): ContactInfo? {\r\n    val uri = ContactsContract.Contacts.CONTENT_LOOKUP_URI.buildUpon()", "choices": [{"text": "\n    return context.getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, lookupKey, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null"}], "metadata": {"task_id": "BCR/0", "ground_truth": "        .appendPath(lookupKey)\r\n        .build()\r\n\r\n    return findContactsByUri(context, uri).asSequence().firstOrNull()\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\Contact.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nimport android.provider.DocumentsContract\nfun DocumentFile.listFilesWithNames(): List<Pair<DocumentFile, String>> {\r\n    if (!isTree) {\r\n        return listFiles().map { Pair(it, it.name!!) }\r\n    }\r\n\r\n    try {\r\n        return iterChildrenWithColumns(arrayOf(DocumentsContract.Document.COLUMN_DISPLAY_NAME))\r\n            .asSequence()\r\n            .map { Pair(it.first, it.second.getString(1)) }\r\n            .toList()\r\n    } catch (e: Exception) {", "choices": [{"text": "\n        return Collections.emptyList()\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/11", "ground_truth": "        Log.w(TAG, \"Failed to query tree URI\", e)\r\n    }\r\n\r\n    return listOf()\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.listFilesWithPathsRecursively(): List<Pair<DocumentFile, List<String>>> {\r\n    val result = mutableListOf<Pair<DocumentFile, List<String>>>()\r\n\r\n    fun recurse(dir: DocumentFile, path: List<String>) {\r\n        for ((file, name) in dir.listFilesWithNames()) {\r\n            val subPath = path + name\r\n\r\n            result.add(Pair(file, subPath))\r\n\r\n            if (file.isDirectory) {\r\n                recurse(file, subPath)\r\n            }\r\n        }", "choices": [{"text": "\n        return result\r\n    }\r\n\r\n    return result\r\n}"}], "metadata": {"task_id": "BCR/12", "ground_truth": "    }\r\n\r\n    recurse(this, emptyList())\r\n    return result\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nimport android.provider.DocumentsContract\nfun DocumentFile.findFileFast(displayName: String): DocumentFile? {\r\n    if (!isTree) {\r\n        return findFile(displayName)\r\n    }\r\n\r\n    try {\r\n        return iterChildrenWithColumns(arrayOf(DocumentsContract.Document.COLUMN_DISPLAY_NAME))\r\n            .asSequence()\r\n            .find { it.second.getString(1) == displayName }\r\n            ?.first\r\n    } catch (e: Exception) {", "choices": [{"text": "\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/13", "ground_truth": "        Log.w(TAG, \"Failed to query tree URI\", e)\r\n    }\r\n\r\n    return null\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.findNestedFile(path: List<String>): DocumentFile? {\r\n    var file = this", "choices": [{"text": ";\r\n    if (path.length > 0) {\r\n        for (var i = 0; i < path.length; i++) {\r\n            file = file.findNestedFile(path[i]);\r\n            if (file!= null) {\r\n                return file;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "BCR/14", "ground_truth": "    for (segment in path) {\r\n        file = file.findFileFast(segment) ?: return null\r\n    }\r\n    return file\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.findOrCreateDirectories(path: List<String>): DocumentFile? {\r\n    var file = this\r\n    for (segment in path) {\r\n        file = file.findFileFast(segment)", "choices": [{"text": "\n        if (file!= null) {\r\n            return file\r\n        }\r\n    }\r\n    return null\r\n}"}], "metadata": {"task_id": "BCR/15", "ground_truth": "            ?: file.createDirectory(segment)\r\n            ?: return null\r\n    }\r\n    return file\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.renameToPreserveExt(displayName: String): Boolean {\r\n    val newName = buildString {\r\n        append(displayName)\r\n\r\n        // This intentionally just does simple string operations because MimeTypeMap's\r\n        // getExtensionFromMimeType() and getMimeTypeFromExtension() are not consistent with\r\n        // each other. Eg. audio/mp4 -> m4a -> audio/mpeg -> mp3.\r\n\r\n        val ext = name!!.substringAfterLast('.', \"\")\r\n        if (ext.isNotEmpty()) {\r\n            append('.')\r\n            append(ext)", "choices": [{"text": "\n        } else {\r\n            append('.')\r\n            append(displayName)\r\n        }\r\n    }\r\n    return newName.isEmpty()\r\n}"}], "metadata": {"task_id": "BCR/17", "ground_truth": "        }\r\n    }\r\n\r\n    return renameTo(newName)\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nprivate fun DocumentFile.isEmpty(): Boolean {\r\n    require(isDirectory) { \"Not a directory\" }\r\n\r\n    return if (isTree) {", "choices": [{"text": "\n        return false\r\n    } else {\r\n        return true\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/18", "ground_truth": "        !iterChildrenWithColumns(emptyArray()).hasNext()\r\n    } else {\r\n        listFiles().isEmpty()\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.deleteIfEmptyDir(): Boolean {\r\n    if (isDirectory && isEmpty()) {", "choices": [{"text": "\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/19", "ground_truth": "        return delete()\r\n    }\r\n\r\n    return false\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import java.io.File\nimport androidx.documentfile.provider.DocumentFile\nfun DocumentFile.deleteIfEmptyDirRecursively() {\r\n    var current: DocumentFile? = this\r\n\r\n    while (current != null) {\r\n        if (!current.deleteIfEmptyDir()) {", "choices": [{"text": "\n            current.deleteIfEmptyDirRecursively()\r\n        }\r\n        current = current.parent\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/20", "ground_truth": "            return\r\n        }\r\n        current = current.parentFile\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\extension\\DocumentFileExtensions.kt"}}
{"prompt": "import android.system.Os\noverride fun start() {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        }\r\n\r\n        Os.ftruncate(fd, 0)\r\n\r\n        val header = if (isWideband) { HEADER_WB } else { HEADER_NB }\r\n        val headerBytes = header.toByteArray(Charsets.US_ASCII)", "choices": [{"text": "\n        if (headerBytes.length == 0) {\r\n            throw new IllegalArgumentException(\"Header is empty\")\r\n        }\r\n\r\n        if (headerBytes.length == 1) {\r\n            return headerBytes[0]\r\n        } else {\r\n            throw new IllegalArgumentException(\"Header is too long\")\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/23", "ground_truth": "\r\n        writeFully(fd, headerBytes, 0, headerBytes.size)\r\n\r\n        isStarted = true\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\AmrContainer.kt"}}
{"prompt": "val HEADER_NB\nval HEADER_WB\nvar track\n override fun stop() {\r\n        if (!isStarted) {", "choices": [{"text": "\n            return;\r\n        }\r\n        isStarted = false;\r\n    }"}], "metadata": {"task_id": "BCR/24", "ground_truth": "            throw IllegalStateException(\"Container not started\")\r\n        }\r\n\r\n        isStarted = false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\AmrContainer.kt"}}
{"prompt": "import android.media.MediaFormat\noverride fun addTrack(mediaFormat: MediaFormat): Int {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        } else if (track >= 0) {\r\n            throw IllegalStateException(\"Track already added\")\r\n        }", "choices": [{"text": "\n        track = mediaFormat.addTrack(track)\r\n        return track\r\n    }"}], "metadata": {"task_id": "BCR/26", "ground_truth": "        track = 0\r\n\r\n        @Suppress(\"KotlinConstantConditions\")\r\n        return track\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\AmrContainer.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport android.media.MediaCodec\noverride fun writeSamples(trackIndex: Int, byteBuffer: ByteBuffer,\r\n                              bufferInfo: MediaCodec.BufferInfo) {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\")\r\n        } else if (track < 0) {\r\n            throw IllegalStateException(\"No track has been added\")\r\n        } else if (track != trackIndex) {", "choices": [{"text": "\n            byteBuffer.putInt(track)\r\n            byteBuffer.putInt(trackIndex)\r\n        } else {\r\n            byteBuffer.putInt(track)\r\n            byteBuffer.putInt(trackIndex)\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/27", "ground_truth": "            throw IllegalStateException(\"Invalid track: $trackIndex\")\r\n        }\r\n\r\n        writeFully(fd, byteBuffer)\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\AmrContainer.kt"}}
{"prompt": "override fun start() {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        }", "choices": [{"text": "\n            throw IllegalStateException(\"Container already started\")\r\n        }\r\n        isStarted = true\r\n        return super.start()\r\n    }"}], "metadata": {"task_id": "BCR/30", "ground_truth": "        Os.lseek(fd, 0, OsConstants.SEEK_SET)\r\n        Os.ftruncate(fd, 0)\r\n\r\n        isStarted = true\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\FlacContainer.kt"}}
{"prompt": "import android.media.MediaFormat\noverride fun addTrack(mediaFormat: MediaFormat): Int {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        } else if (track >= 0) {\r\n            throw IllegalStateException(\"Track already added\")", "choices": [{"text": "\n        } else {\r\n            track = mediaFormat.addTrack(track)\r\n        }\r\n        return track\r\n    }"}], "metadata": {"task_id": "BCR/33", "ground_truth": "        }\r\n\r\n        track = 0\r\n        return track\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\FlacContainer.kt"}}
{"prompt": "import com.chiller3.bcr.extension.frameSizeInBytesCompat\nimport android.media.MediaFormat\nimport android.media.AudioFormat\nfun getMediaFormat(audioFormat: AudioFormat, param: UInt?): MediaFormat {\r\n        if (param != null) {\r\n            paramInfo.validate(param)\r\n        }\r\n\r\n        val format = baseMediaFormat.apply {\r\n            setInteger(MediaFormat.KEY_CHANNEL_COUNT, audioFormat.channelCount)\r\n            setInteger(MediaFormat.KEY_SAMPLE_RATE, audioFormat.sampleRate)\r\n            setInteger(KEY_X_FRAME_SIZE_IN_BYTES, audioFormat.frameSizeInBytesCompat)\r\n        }", "choices": [{"text": "\n        return format\r\n    }"}], "metadata": {"task_id": "BCR/35", "ground_truth": "\r\n        updateMediaFormat(format, param ?: paramInfo.default)\r\n\r\n        return format\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\Format.kt"}}
{"prompt": "import java.lang.IllegalStateException\noverride fun start() {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Encoder is already started\")\r\n        }", "choices": [{"text": "_isStarted = true\r\n        super.start()\r\n    }"}], "metadata": {"task_id": "BCR/39", "ground_truth": "\r\n        isStarted = true\r\n        trackIndex = container.addTrack(mediaFormat)\r\n        container.start()\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\PassthroughEncoder.kt"}}
{"prompt": "var isStarted\nval bufferInfo\nvar trackIndex\n override fun stop() {\r\n        if (!isStarted) {", "choices": [{"text": "\n            return;\r\n        }\r\n        trackIndex = -1;\r\n        isStarted = false;\r\n    }"}], "metadata": {"task_id": "BCR/40", "ground_truth": "            throw IllegalStateException(\"Encoder is not started\")\r\n        }\r\n\r\n        isStarted = false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\PassthroughEncoder.kt"}}
{"prompt": "import android.system.Os\noverride fun start() {\r\n        if (isStarted) {\r\n            throw IllegalStateException(\"Container already started\")\r\n        }\r\n\r\n        Os.ftruncate(fd, 0)", "choices": [{"text": "\n        isStarted = true\r\n\r\n        super.start()\r\n    }"}], "metadata": {"task_id": "BCR/46", "ground_truth": "        // Skip header\r\n        Os.lseek(fd, HEADER_SIZE.toLong(), OsConstants.SEEK_SET)\r\n\r\n        isStarted = true\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\WaveContainer.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport android.media.MediaCodec\noverride fun writeSamples(trackIndex: Int, byteBuffer: ByteBuffer,\r\n                              bufferInfo: MediaCodec.BufferInfo) {\r\n        if (!isStarted) {\r\n            throw IllegalStateException(\"Container not started\")\r\n        } else if (track < 0) {\r\n            throw IllegalStateException(\"No track has been added\")\r\n        } else if (track != trackIndex) {", "choices": [{"text": "\n            byteBuffer.putInt(track)\r\n            byteBuffer.putInt(trackIndex)\r\n        } else {\r\n            byteBuffer.putInt(track)\r\n            byteBuffer.putInt(trackIndex)\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/50", "ground_truth": "            throw IllegalStateException(\"Invalid track: $trackIndex\")\r\n        }\r\n\r\n        writeFully(fd, byteBuffer)\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\format\\WaveContainer.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.FileDescriptor\nimport android.system.Os\nfun writeFully(fd: FileDescriptor, buffer: ByteBuffer) {\r\n    while (buffer.remaining() > 0) {\r\n        val n = Os.write(fd, buffer)", "choices": [{"text": "\n        if (n > 0) {\r\n            buffer.put(n)\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/51", "ground_truth": "        if (n == 0) {\r\n            throw IOException(\"Unexpected EOF when writing data\")\r\n        }\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\IoHelpers.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.FileDescriptor\nimport android.system.Os\nfun writeFully(fd: FileDescriptor, bytes: ByteArray, byteOffset: Int, byteCount: Int) {\r\n    var offset = byteOffset\r\n    var remaining = byteCount\r\n\r\n    while (remaining > 0) {\r\n        val n = Os.write(fd, bytes, offset, remaining)\r\n        if (n == 0) {\r\n            throw IOException(\"Unexpected EOF when writing data\")\r\n        }", "choices": [{"text": "\n        if (n == 0) {\r\n            throw IOException(\"Unexpected EOF when writing data\")\r\n        }\r\n        remaining -= n\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/52", "ground_truth": "\r\n        offset += n\r\n        remaining -= n\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\IoHelpers.kt"}}
{"prompt": "import android.telecom.Call\nfun updateCallDetails(call: Call, details: Call.Details): CallMetadata {\r\n        if (call !== parentCall && call.parent !== parentCall) {\r\n            throw IllegalStateException(\"Not the parent call nor one of its children: $call\")\r\n        }\r\n\r\n        synchronized(this) {", "choices": [{"text": "\n            return new CallMetadata(call, details)\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/64", "ground_truth": "            callDetails[call] = details\r\n\r\n            return update(false)\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\output\\CallMetadataCollector.kt"}}
{"prompt": "import com.chiller3.bcr.template.Template\nimport com.chiller3.bcr.Preferences\nimport android.util.Log\nfun generate(metadata: CallMetadata): OutputPath {\r\n        val path = try {\r\n            generate(filenameTemplate, metadata)\r\n        } catch (e: Exception) {\r\n            if (filenameTemplate === Preferences.DEFAULT_FILENAME_TEMPLATE) {\r\n                throw e\r\n            } else {\r\n                Log.w(TAG, \"Failed to evaluate custom template: $filenameTemplate\", e)\r\n                generate(Preferences.DEFAULT_FILENAME_TEMPLATE, metadata)\r\n            }\r\n        }", "choices": [{"text": "\n        if (path == null) {\r\n            return null\r\n        }\r\n        return new OutputPath(path)\r\n    }"}], "metadata": {"task_id": "BCR/73", "ground_truth": "\r\n        Log.i(TAG, \"Generated filename: $path\")\r\n\r\n        return path\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\output\\OutputFilenameGenerator.kt"}}
{"prompt": "import java.time.temporal.Temporal\nfun parseTimestampFromPath(path: List<String>): Temporal? {\r\n        val pathString = path.joinToString(\"/\")\r\n        val redacted = redactTruncate(pathString)\r\n        val timestamp = parseTimestamp(pathString)", "choices": [{"text": "\n        if (timestamp!= null) {\r\n            return timestamp\r\n        } else {\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/74", "ground_truth": "\r\n        Log.d(TAG, \"Parsed $timestamp from $redacted\")\r\n\r\n        return timestamp\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\output\\OutputFilenameGenerator.kt"}}
{"prompt": "private fun getOptionalUint(key: String, sentinel: UInt): UInt? {\r\n        // Use a sentinel value because doing contains + getInt results in TOCTOU issues\r\n        val value = prefs.getInt(key, sentinel.toInt())\r\n\r\n        return if (value == sentinel.toInt()) {", "choices": [{"text": "\n            prefs.setInt(key, sentinel.toInt())\r\n        } else {\r\n            prefs.setInt(key, value)\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/83", "ground_truth": "            null\r\n        } else {\r\n            value.toUInt()\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\Preferences.kt"}}
{"prompt": "import androidx.core.content.edit\nprivate fun setOptionalUint(key: String, sentinel: UInt, value: UInt?) {\r\n        if (value == sentinel) {\r\n            throw IllegalArgumentException(\"$key value cannot be $sentinel\")\r\n        }\r\n\r\n        prefs.edit {\r\n            if (value == null) {\r\n                remove(key)", "choices": [{"text": "\n            } else {\r\n                set(key, value)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/84", "ground_truth": "            } else {\r\n                putInt(key, value.toInt())\r\n            }\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\Preferences.kt"}}
{"prompt": "import com.chiller3.bcr.format.Format\nimport androidx.core.content.edit\nvar filenameTemplate Template?\nval outputDirOrDefaultIntent Intent\nvar isDebugMode Boolean\nfun resetAllFormats() {\r\n        val keys = prefs.all.keys.filter(::isFormatKey)\r\n        prefs.edit {", "choices": [{"text": "\n            for (val key : keys) {\r\n                prefs.edit.putString(key, \"\")\r\n            }\r\n        }\r\n        for (val key : keys) {\r\n            prefs.edit.putBoolean(key, false)\r\n        }\r\n        for (val key : keys) {\r\n            prefs.edit.putString(key, \"\")\r\n        }\r\n        for (val key : keys) {\r\n            prefs.edit.putBoolean(key, false)\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/85", "ground_truth": "            for (key in keys) {\r\n                remove(key)\r\n            }\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\Preferences.kt"}}
{"prompt": "import android.telecom.Call\nprivate fun handleDetailsChange(call: Call, details: Call.Details) {\r\n        val parentCall = call.parent\r\n        val recorder = if (parentCall != null) {\r\n            callsToRecorders[parentCall]\r\n        } else {", "choices": [{"text": "\n            callsToRecorders.put(call, recorder)\r\n        }\r\n        if (recorder!= null) {\r\n            recorder.handleDetailsChange(details)\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/90", "ground_truth": "            callsToRecorders[call]\r\n        }\r\n\r\n        recorder?.onCallDetailsChanged(call, details)\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputFile\nprivate fun notifySuccess(file: OutputFile, additionalFiles: List<OutputFile>) {\r\n        notifications.notifySuccess(\r\n            R.string.notification_recording_succeeded,", "choices": [{"text": "\n            R.string.notification_recording_failed,\r\n            file,\r\n            additionalFiles\r\n        );\r\n    }"}], "metadata": {"task_id": "BCR/91", "ground_truth": "            R.drawable.ic_launcher_quick_settings,\r\n            file,\r\n            additionalFiles,\r\n        )\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputFile\nprivate fun notifyFailure(\r\n        errorMsg: String?,\r\n        file: OutputFile?,\r\n        additionalFiles: List<OutputFile>,\r\n    ) {\r\n        notifications.notifyFailure(\r\n            R.string.notification_recording_failed,\r\n            R.drawable.ic_launcher_quick_settings,", "choices": [{"text": "\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n            R.string.notification_recording_failed,\r\n           "}], "metadata": {"task_id": "BCR/92", "ground_truth": "            errorMsg,\r\n            file,\r\n            additionalFiles,\r\n        )\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputFile\nimport android.util.Log\noverride fun onRecordingCompleted(\r\n        thread: RecorderThread,\r\n        file: OutputFile?,\r\n        additionalFiles: List<OutputFile>,\r\n    ) {\r\n        Log.i(TAG, \"Recording completed: ${thread.id}: ${file?.redacted}\")\r\n        handler.post {\r\n            onRecorderExited(thread)\r\n\r\n            // If the recording was initially paused and the user never resumed it, there's no\r\n            // output file, so nothing needs to be shown.", "choices": [{"text": "\n            if (file == null) {\r\n                return\r\n            }\r\n\r\n            if (additionalFiles == null) {\r\n                additionalFiles = new ArrayList<>()\r\n            }\r\n\r\n            additionalFiles.add(file)\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/94", "ground_truth": "            if (file != null) {\r\n                notifySuccess(file, additionalFiles)\r\n            }\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputFile\nimport android.util.Log\noverride fun onRecordingFailed(\r\n        thread: RecorderThread,\r\n        errorMsg: String?,\r\n        file: OutputFile?,\r\n        additionalFiles: List<OutputFile>,\r\n    ) {\r\n        Log.w(TAG, \"Recording failed: ${thread.id}: ${file?.redacted}\")\r\n        handler.post {", "choices": [{"text": "\n            Log.w(TAG, \"Recording failed: ${thread.id}: ${errorMsg.redacted}\")\r\n            handler.post {\r\n                Log.w(TAG, \"Recording failed: ${thread.id}: ${file?.redacted}\")\r\n                handler.post {\r\n                    Log.w(TAG, \"Recording failed: ${thread.id}: ${additionalFiles?.redacted}\")\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/95", "ground_truth": "            onRecorderExited(thread)\r\n\r\n            notifyFailure(errorMsg, file, additionalFiles)\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderInCallService.kt"}}
{"prompt": "import android.net.Uri\nprivate fun extractOrigUri(uri: Uri): Uri? {\r\n            val param = uri.getQueryParameter(QUERY_ORIG)\r\n            if (param.isNullOrBlank()) {\r\n                return null\r\n            }\r\n\r\n            return try {", "choices": [{"text": "\n                return Uri.parse(param)\r\n            } catch (Exception e) {\r\n                return null\r\n            }\r\n        }"}], "metadata": {"task_id": "BCR/97", "ground_truth": "                Uri.parse(param)\r\n            } catch (e: Exception) {\r\n                null\r\n            }\r\n        }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderProvider.kt"}}
{"prompt": "import com.chiller3.bcr.output.OutputPath\nimport android.util.Log\nprivate fun getLogcatPath(): OutputPath {\r\n        return outputPath.let {\r\n            val path = it.value.mapIndexed { i, p ->\r\n                p + if (i == it.value.size - 1) { \".log\" } else { \"\" }", "choices": [{"text": "\n                p + if (i == it.value.size - 1) { \".log\" } else { \"\" }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/103", "ground_truth": "            }\r\n\r\n            it.copy(value = path, redacted = it.redacted + \".log\")\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\RecorderThread.kt"}}
{"prompt": "import com.chiller3.bcr.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            android.R.id.home -> {\r\n                onBackPressedDispatcher.onBackPressed()", "choices": [{"text": "(item.itemId)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/113", "ground_truth": "                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesActivity.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.chiller3.bcr.R\nimport androidx.preference.Preference\noverride fun onPreferenceClick(preference: Preference): Boolean {\r\n        when (preference) {\r\n            prefAddRule -> {\r\n                requestContact.launch(null)\r\n                return true", "choices": [{"text": "\n            }\r\n        }\r\n        return false\r\n    }"}], "metadata": {"task_id": "BCR/114", "ground_truth": "            }\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesFragment.kt"}}
{"prompt": "import com.chiller3.bcr.R\nimport com.chiller3.bcr.Preferences\nimport androidx.preference.Preference\noverride fun onPreferenceChange(preference: Preference, newValue: Any?): Boolean {\r\n        when {\r\n            preference.key.startsWith(Preferences.PREF_RULE_PREFIX) -> {\r\n                val index = preference.key.substring(Preferences.PREF_RULE_PREFIX.length).toInt()\r\n                viewModel.setRuleRecord(index, newValue as Boolean)\r\n                return true", "choices": [{"text": "\n            }\r\n        }\r\n        return false\r\n    }"}], "metadata": {"task_id": "BCR/115", "ground_truth": "            }\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesFragment.kt"}}
{"prompt": "import com.chiller3.bcr.R\nimport com.chiller3.bcr.Preferences\nimport androidx.preference.Preference\noverride fun onPreferenceLongClick(preference: Preference): Boolean {\r\n        when {\r\n            preference.key.startsWith(Preferences.PREF_RULE_PREFIX) -> {\r\n                val index = preference.key.substring(Preferences.PREF_RULE_PREFIX.length).toInt()\r\n                viewModel.deleteRule(index)\r\n                return true", "choices": [{"text": "\n            }\r\n        }\r\n        return false\r\n    }"}], "metadata": {"task_id": "BCR/116", "ground_truth": "            }\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesFragment.kt"}}
{"prompt": "import com.google.android.material.snackbar.Snackbar\nimport android.view.View\nprivate fun showSnackBar(text: CharSequence, onDismiss: () -> Unit) {\r\n        Snackbar.make(requireView(), text, Snackbar.LENGTH_LONG)\r\n            .addCallback(object : Snackbar.Callback() {\r\n                override fun onDismissed(transientBottomBar: Snackbar?, event: Int) {", "choices": [{"text": "\n                    onDismiss();\r\n                }\r\n            })\r\n           .show();\r\n    }"}], "metadata": {"task_id": "BCR/117", "ground_truth": "                    onDismiss()\r\n                }\r\n            })\r\n            .show()\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesFragment.kt"}}
{"prompt": "import kotlinx.coroutines.flow.update\nprivate fun updateAndSaveRules(\r\n        block: (old: List<DisplayedRecordRule>) -> List<DisplayedRecordRule>,\r\n    ) {\r\n        _rules.update {", "choices": [{"text": "_rules.save {\r\n            super.updateAndSaveRules(block) {\r\n                _rules.update {\r\n                    _rules.update {\r\n                        _rules.update {\r\n                            _rules.update {\r\n                                _rules.update {\r\n                                    _rules.update {\r\n                                        _rules.update {\r\n                                            _rules.update {\r\n                                                _rules.update {\r\n                                                    _rules.update {\r\n                                                        _rules.update {\r\n                                                            _rules.update {\r\n                                                                _rules."}], "metadata": {"task_id": "BCR/118", "ground_truth": "            val newRules = block(it).sorted()\r\n            saveRules(newRules)\r\n            newRules\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesViewModel.kt"}}
{"prompt": "import com.chiller3.bcr.findContactByLookupKey\nimport android.content.pm.PackageManager\nimport android.app.Application\nimport android.Manifest\nprivate fun getContactDisplayName(lookupKey: String): String? {\r\n        if (getApplication<Application>().checkSelfPermission(Manifest.permission.READ_CONTACTS)\r\n            != PackageManager.PERMISSION_GRANTED) {\r\n            return null\r\n        }\r\n\r\n        return try {\r\n            findContactByLookupKey(getApplication(), lookupKey)?.displayName", "choices": [{"text": "\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/119", "ground_truth": "        } catch (e: Exception) {\r\n            Log.w(TAG, \"Failed to look up contact\", e)\r\n            null\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\rule\\RecordRulesViewModel.kt"}}
{"prompt": "import android.net.Uri\nimport android.content.Intent\nimport android.content.Context\noverride fun createIntent(context: Context, input: Uri?): Intent {\r\n        val intent = super.createIntent(context, input)\r\n\r\n        intent.addFlags(\r\n            Intent.FLAG_GRANT_WRITE_URI_PERMISSION\r\n                    or Intent.FLAG_GRANT_PREFIX_URI_PERMISSION", "choices": [{"text": "\n                    or Intent.FLAG_GRANT_READ_URI_PERMISSION\r\n                    or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\r\n                    or Intent.FLAG_GRANT_PREFIX_URI_PERMISSION\r\n                )\r\n\r\n        intent.setData(Uri.parse(input))\r\n\r\n        return intent\r\n    }"}], "metadata": {"task_id": "BCR/122", "ground_truth": "                    or Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION\r\n        )\r\n\r\n        return intent\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\settings\\OpenPersistentDocumentTree.kt"}}
{"prompt": "import com.chiller3.bcr.format\nimport android.view.View\noverride fun onClick(v: View?) {\r\n        when (v) {\r\n            binding.reset -> {\r\n                prefs.resetAllFormats()\r\n                refreshFormat()\r\n                // Need to explicitly refresh the parameter when the default format is already chosen", "choices": [{"text": "\n                refreshFormat()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "BCR/129", "ground_truth": "                refreshParam()\r\n                refreshSampleRate()\r\n            }\r\n        }\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\settings\\OutputFormatBottomSheetFragment.kt"}}
{"prompt": "import com.chiller3.bcr.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.settings_activity)\r\n        if (savedInstanceState == null) {\r\n            supportFragmentManager\r\n                    .beginTransaction()\r\n                    .replace(R.id.settings, SettingsFragment())\r\n                    .commit()\r\n        }", "choices": [{"text": "\n        super.onCreate(savedInstanceState)\r\n        getSupportFragmentManager().beginTransaction()\r\n               .replace(R.id.settings, SettingsFragment())\r\n               .commit()\r\n    }"}], "metadata": {"task_id": "BCR/130", "ground_truth": "\r\n        setSupportActionBar(findViewById(R.id.toolbar))\r\n\r\n        setTitle(R.string.app_name_full)\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\settings\\SettingsActivity.kt"}}
{"prompt": "import java.nio.file.Path\nprivate fun delete(path: Path) {\r\n    if (dryRun) {\r\n        println(\"Would have deleted: $path\")", "choices": [{"text": "(path)\r\n    } else {\r\n        deleteFile(path)\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/136", "ground_truth": "    } else {\r\n        println(\"Deleting: $path\")\r\n        path.deleteIfExists()\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\ClearPackageManagerCaches.kt"}}
{"prompt": "private fun ByteArray.indexOfSubarray(needle: ByteArray, start: Int = 0): Int {\r\n    require(start >= 0) { \"start must be non-negative\" }\r\n\r\n    if (needle.isEmpty()) {\r\n        return 0\r\n    }\r\n\r\n    outer@ for (i in 0 until size - needle.size + 1) {\r\n        for (j in needle.indices) {\r\n            if (this[i + j] != needle[j]) {\r\n                continue@outer\r\n            }\r\n        }", "choices": [{"text": "\n        return i + needle.size\r\n    }\r\n    return -1\r\n}"}], "metadata": {"task_id": "BCR/137", "ground_truth": "        return i\r\n    }\r\n\r\n    return -1\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\ClearPackageManagerCaches.kt"}}
{"prompt": "fun main(args: Array<String>) {\r\n    if (\"--dry-run\" in args) {\r\n        dryRun = true\r\n    }\r\n\r\n    try {\r\n        mainInternal()\r\n    } catch (e: Exception) {", "choices": [{"text": "\n        e.printStackTrace()\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/138", "ground_truth": "        System.err.println(\"Failed to clear caches\")\r\n        e.printStackTrace()\r\n        exitProcess(1)\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\ClearPackageManagerCaches.kt"}}
{"prompt": "fun updatePermissionFlags(\r\n        permissionName: String,\r\n        packageName: String,\r\n        flagMask: Int,\r\n        flagValues: Int,\r\n        userId: Int,\r\n    ) {\r\n        METHOD_UPDATE_PERMISSION_FLAGS.invoke(\r\n            iFace,\r\n            permissionName,\r\n            packageName,", "choices": [{"text": "\n            flagMask,\r\n            flagValues,\r\n            userId,\r\n        );\r\n    }"}], "metadata": {"task_id": "BCR/139", "ground_truth": "            flagMask,\r\n            flagValues,\r\n            userId,\r\n        )\r\n    }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\RemoveHardRestrictions.kt"}}
{"prompt": "fun main() {\r\n    try {\r\n        mainInternal()\r\n    } catch (e: Exception) {", "choices": [{"text": "\n        e.printStackTrace()\r\n    }\r\n}"}], "metadata": {"task_id": "BCR/140", "ground_truth": "        System.err.println(\"Failed to remove hard restrictions\")\r\n        e.printStackTrace()\r\n        exitProcess(1)\r\n    }\r\n}", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\standalone\\RemoveHardRestrictions.kt"}}
{"prompt": "val templateParser\nval parser\nval variableRefParser\n override fun toTemplate(): String = buildString {\r\n            append('{')\r\n            append(name)\r\n            if (arg != null) {", "choices": [{"text": "\n                append('}')\r\n            } else {\r\n                append('}')\r\n            }\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')\r\n            append('}')"}], "metadata": {"task_id": "BCR/141", "ground_truth": "                append(':')\r\n                append(escape(arg))\r\n            }\r\n            append('}')\r\n        }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\template\\Template.kt"}}
{"prompt": "override fun toTemplate(): String = buildString {\r\n            append('[')\r\n            for ((i, choice) in choices.withIndex()) {\r\n                if (i > 0) {\r\n                    append('|')", "choices": [{"text": "\n                } else {\r\n                    append(']')\r\n                }\r\n            }\r\n            append(']')\r\n        }"}], "metadata": {"task_id": "BCR/142", "ground_truth": "                }\r\n                append(choice.toTemplate())\r\n            }\r\n            append(']')\r\n        }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\template\\Template.kt"}}
{"prompt": "import android.view.View\nprivate fun getMargins(view: View): Pair<Int, Int> {\r\n            val lp = view.layoutParams\r\n\r\n            return if (lp is MarginLayoutParams) {", "choices": [{"text": "\n                return new Pair<Int, Int>(lp.marginLeft, lp.marginTop)\r\n            } else {\r\n                return new Pair<Int, Int>(0, 0)\r\n            }\r\n        }"}], "metadata": {"task_id": "BCR/145", "ground_truth": "                Pair(lp.marginStart, lp.marginEnd)\r\n            } else {\r\n                Pair(0, 0)\r\n            }\r\n        }", "fpath": "BCR\\app\\src\\main\\java\\com\\chiller3\\bcr\\view\\ChipGroupCentered.kt"}}
{"prompt": "import timber.log.Timber\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.coroutines.Runnable\nfun stop(): List<Runnable> {\r\n        Timber.i(\"FcitxDispatcher stop()\")\r\n        return if (isRunning.compareAndSet(true, false)) {\r\n            runBlocking {\r\n                controller.nativeScheduleEmpty()\r\n                runningLock.withLock {\r\n                    val rest = queue.toList()\r\n                    queue.clear()", "choices": [{"text": "\n                return rest\r\n            }\r\n        } else {\r\n            return queue.toList()\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/2", "ground_truth": "                    rest\r\n                }\r\n            }\r\n        } else emptyList()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxDispatcher.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n            if (this === other) return true\r\n            if (javaClass != other?.javaClass) return false\r\n\r\n            other as UnknownEvent", "choices": [{"text": " = other?.javaClass\r\n\r\n            if (other == null) return false\r\n            if (javaClass!= other?.javaClass) return false\r\n\r\n            return true\r\n        }"}], "metadata": {"task_id": "fcitx5-android/8", "ground_truth": "\r\n            if (!data.contentEquals(other.data)) return false\r\n\r\n            return true\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxEvent.kt"}}
{"prompt": "fun escapeForValue(str: String): String {\r\n        val needsQuote = str.lastIndexOfAny(QuotedChars) >= 0\r\n        return buildString {\r\n            if (needsQuote) append('\"')\r\n            str.forEach { c ->\r\n                append(\r\n                    when (c) {\r\n                        '\\\\' -> \"\\\\\\\\\"\r\n                        '\\n' -> \"\\\\n\"\r\n                        '\"' -> \"\\\\\\\"\"\r\n                        else -> c\r\n                    }", "choices": [{"text": "\n                )\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/19", "ground_truth": "                )\r\n            }\r\n            if (needsQuote) append('\"')\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxUtils.kt"}}
{"prompt": "fun codePointCountUntil(endIndex: Int): Int {\r\n        var count = 0\r\n        var length = 0\r\n        for (str in strings) {\r\n            val total = length + str.length\r\n            if (total < endIndex) {\r\n                count += str.codePointCount(0, str.length)\r\n                length = total\r\n            } else {\r\n                count += str.codePointCount(0, endIndex - length)", "choices": [{"text": "\n                length = total\r\n            }\r\n        }\r\n        return count\r\n    }"}], "metadata": {"task_id": "fcitx5-android/20", "ground_truth": "                break\r\n            }\r\n        }\r\n        return count\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FormattedText.kt"}}
{"prompt": "import kotlin.concurrent.withLock\nimport timber.log.Timber\nimport org.fcitx.fcitx5.android.daemon.FcitxDaemon.connect\nimport org.fcitx.fcitx5.android.core.FcitxLifecycle\nimport org.fcitx.fcitx5.android.core.Fcitx\nfun connect(name: String): FcitxConnection = lock.withLock {\r\n        if (name in clients)\r\n            return@withLock clients.getValue(name)\r\n        if (realFcitx.lifecycle.currentState == FcitxLifecycle.State.STOPPED) {\r\n            Timber.d(\"FcitxDaemon start fcitx\")\r\n            realFcitx.start()", "choices": [{"text": "\n        } else {\r\n            Timber.d(\"FcitxDaemon stop fcitx\")\r\n            realFcitx.stop()\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/28", "ground_truth": "        }\r\n        val new = mkConnection(name)\r\n        clients[name] = new\r\n        return@withLock new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\daemon\\FcitxDaemon.kt"}}
{"prompt": "import java.io.File\nimport org.fcitx.fcitx5.android.utils.errorArg\nimport org.fcitx.fcitx5.android.data.pinyin.dict.PinyinDictionary\nimport org.fcitx.fcitx5.android.data.pinyin.dict.LibIMEDictionary\nimport org.fcitx.fcitx5.android.R\nfun importFromFile(file: File): Result<LibIMEDictionary> = runCatching {\r\n        val raw =\r\n            PinyinDictionary.new(file) ?: errorArg(R.string.exception_dict_filename, file.path)\r\n        // convert to libime format in dictionaries dir\r\n        // preserve original file name\r\n        val new = raw.toLibIMEDictionary(\r\n            File(\r\n                pinyinDicDir,\r\n                file.nameWithoutExtension + \".${PinyinDictionary.Type.LibIME.ext}\"", "choices": [{"text": "\n            )\r\n        )\r\n        return new\r\n    }"}], "metadata": {"task_id": "fcitx5-android/48", "ground_truth": "            )\r\n        )\r\n        Timber.d(\"Converted $raw to $new\")\r\n        new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\PinyinDictManager.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.File\nimport org.fcitx.fcitx5.android.utils.appContext\nimport org.fcitx.fcitx5.android.data.pinyin.dict.LibIMEDictionary\nimport org.fcitx.fcitx5.android.R\nfun importFromInputStream(stream: InputStream, name: String): Result<LibIMEDictionary> {\r\n        val tempFile = File(appContext.cacheDir, name)\r\n        tempFile.outputStream().use {\r\n            stream.copyTo(it)", "choices": [{"text": "\n        }\r\n        return new LibIMEDictionary(tempFile.getAbsolutePath())\r\n    }"}], "metadata": {"task_id": "fcitx5-android/49", "ground_truth": "        }\r\n        val new = importFromFile(tempFile)\r\n        tempFile.delete()\r\n        return new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\PinyinDictManager.kt"}}
{"prompt": "import androidx.annotation.StringRes\nprotected fun <T : Any> list(\r\n        @StringRes\r\n        title: Int,\r\n        key: String,\r\n        defaultValue: T,\r\n        codec: ManagedPreference.StringLikeCodec<T>,\r\n        entryValues: List<T>,\r\n        @StringRes\r\n        entryLabels: List<Int>,\r\n        enableUiOn: (() -> Boolean)? = null\r\n    ): ManagedPreference.PStringLike<T> {\r\n        val pref = ManagedPreference.PStringLike(sharedPreferences, key, defaultValue, codec)\r\n        val ui = ManagedPreferenceUi.StringList(\r\n            title, key, defaultValue, codec, entryValues, entryLabels, enableUiOn", "choices": [{"text": "\n        )\r\n        pref.addUi(ui)\r\n        return pref\r\n    }"}], "metadata": {"task_id": "fcitx5-android/60", "ground_truth": "        )\r\n        pref.register()\r\n        ui.registerUi()\r\n        return pref\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\prefs\\ManagedPreferenceCategory.kt"}}
{"prompt": "var override CustomQuickPhrase?\nval isEnabled Boolean\n override fun enable() {", "choices": [{"text": "\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n    this.isEnabled = true;\n"}], "metadata": {"task_id": "fcitx5-android/74", "ground_truth": "        if (isEnabled)\r\n            return\r\n        // override must exist in this case\r\n        override!!.enable()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": "var override CustomQuickPhrase?\nval isEnabled Boolean\n override fun disable() {", "choices": [{"text": "\n    return false;\n}"}], "metadata": {"task_id": "fcitx5-android/75", "ground_truth": "        if (!isEnabled)\r\n            return\r\n        createOverrideIfNotExist()\r\n        override!!.disable()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": "fun load() {\r\n        val xs = file.readLines()", "choices": [{"text": "\n        if (xs.size() == 0) {\r\n            return null\r\n        }\r\n        return xs.get(0)\r\n    }"}], "metadata": {"task_id": "fcitx5-android/85", "ground_truth": "        xs.forEach {\r\n            if (it.isNotBlank())\r\n                put(it, it)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\RecentlyUsed.kt"}}
{"prompt": "import java.io.File\nimport org.fcitx.fcitx5.android.data.table.TableManager\noverride fun toTextDictionary(dest: File): TextDictionary {\r\n        ensureTxt(dest)\r\n        TableManager.tableDictConv(\r\n            file.absolutePath,", "choices": [{"text": "\n            file.absolutePath + \".txt\",\r\n            new TextDictionary.Builder()\r\n        )\r\n    }"}], "metadata": {"task_id": "fcitx5-android/92", "ground_truth": "            dest.absolutePath,\r\n            TableManager.MODE_BIN_TO_TXT\r\n        )\r\n        return TextDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\LibIMEDictionary.kt"}}
{"prompt": "fun saveTheme(theme: Theme.Custom) {\r\n        ThemeFilesManager.saveThemeFiles(theme)\r\n        customThemes.indexOfFirst { it.name == theme.name }.also {\r\n            if (it >= 0) customThemes[it] = theme else customThemes.add(0, theme)", "choices": [{"text": "\n            else customThemes.add(0, theme)\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/109", "ground_truth": "        }\r\n        if (activeTheme.name == theme.name) {\r\n            activeTheme = theme\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "fun deleteTheme(name: String) {\r\n        customThemes.find { it.name == name }?.also {\r\n            ThemeFilesManager.deleteThemeFiles(it)\r\n            customThemes.remove(it)", "choices": [{"text": "\n            customThemes.remove(it)\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/110", "ground_truth": "        }\r\n        if (activeTheme.name == name) {\r\n            activeTheme = evaluateActiveTheme()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.utils.appContext\nimport androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nimport androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.N)\r\n    fun syncToDeviceEncryptedStorage() {\r\n        val ctx = appContext.createDeviceProtectedStorageContext()\r\n        val sp = PreferenceManager.getDefaultSharedPreferences(ctx)\r\n        sp.edit {", "choices": [{"text": "\n            @Override\r\n            protected void onSaveInstanceState(Bundle outState) {\r\n                super.onSaveInstanceState(outState)\r\n                outState.putBoolean(\"syncToDeviceEncryptedStorage\", true)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/115", "ground_truth": "            prefs.managedPreferences.forEach {\r\n                it.value.putValueTo(this@edit)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "import timber.log.Timber\nimport org.fcitx.fcitx5.android.utils.desc\nprivate fun transformClipboard(source: String): String {\r\n        var result = source\r\n        clipboardTransformers.forEach {\r\n            try {\r\n                result = it.transform(result)!!\r\n            } catch (e: Exception) {\r\n                Timber.w(\"Exception while calling clipboard transformer '${it.desc}'\")", "choices": [{"text": "\n            }\r\n        }\r\n        return result\r\n    }"}], "metadata": {"task_id": "fcitx5-android/119", "ground_truth": "                Timber.w(e)\r\n            }\r\n        }\r\n        return result\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\FcitxRemoteService.kt"}}
{"prompt": "override fun setText(charSequence: CharSequence?, bufferType: BufferType) {\r\n        // setText can be called in super constructor\r\n        if (!::text.isInitialized || charSequence == null || !text.contentEquals(charSequence)) {\r\n            needsMeasureText = true\r\n            needsCalculateTransform = true", "choices": [{"text": "\r\n        } else {\r\n            needsMeasureText = false\r\n            needsCalculateTransform = false\r\n        }\r\n        super.setText(charSequence, bufferType)\r\n    }"}], "metadata": {"task_id": "fcitx5-android/125", "ground_truth": "            text = charSequence?.toString() ?: \"\"\r\n            requestLayout()\r\n            invalidate()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\AutoScaleTextView.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nimport androidx.lifecycle.lifecycleScope\nprivate fun launchClipboardTimeoutJob() {\r\n        clipboardTimeoutJob?.cancel()\r\n        val timeout = clipboardItemTimeout.getValue() * 1000L\r\n        // never transition to ClipboardTimedOut state when timeout < 0\r\n        if (timeout < 0L) return\r\n        clipboardTimeoutJob = service.lifecycleScope.launch {", "choices": [{"text": "\n            @Override\r\n            public void run() {\r\n                clipboardItemTimeout.setValue(timeout)\r\n                clipboardTimeoutJob.cancel()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/130", "ground_truth": "            delay(timeout)\r\n            isClipboardFresh = false\r\n            clipboardTimeoutJob = null\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nprivate fun switchUiByState(state: KawaiiBarStateMachine.State) {\r\n        val index = state.ordinal\r\n        if (view.displayedChild == index) return\r\n        val new = view.getChildAt(index)\r\n        if (new != titleUi.root) {\r\n            titleUi.setReturnButtonOnClickListener { }", "choices": [{"text": "\n            titleUi.setReturnButtonOnClickListener(new)\r\n        } else {\r\n            titleUi.setReturnButtonOnClickListener(null)\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/133", "ground_truth": "            titleUi.setTitle(\"\")\r\n            titleUi.removeExtension()\r\n        }\r\n        view.displayedChild = index\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "import splitties.views.dsl.core.add\nimport org.fcitx.fcitx5.android.input.wm.InputWindow\nimport org.fcitx.fcitx5.android.input.keyboard.KeyboardWindow\nimport org.fcitx.fcitx5.android.R\noverride fun onWindowAttached(window: InputWindow) {\r\n        when (window) {\r\n            is InputWindow.ExtendedInputWindow<*> -> {\r\n                titleUi.setTitle(window.title)\r\n                window.onCreateBarExtension()?.let { titleUi.addExtension(it, window.showTitle) }\r\n                titleUi.setReturnButtonOnClickListener {\r\n                    windowManager.attachWindow(KeyboardWindow)\r\n                }", "choices": [{"text": "\n                windowManager.attachWindow(KeyboardWindow)\r\n            }\r\n        } else {\r\n            windowManager.detachWindow(KeyboardWindow)\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/134", "ground_truth": "                barStateMachine.push(ExtendedWindowAttached)\r\n            }\r\n            else -> {}\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "import androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.R)", "choices": [{"text": "(Build.VERSION_CODES.HONEYCOMB)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR1)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR2)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR3)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR4)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR5)\n @RequiresApi(Build.VERSION_CODES.HONEYCOM"}], "metadata": {"task_id": "fcitx5-android/140", "ground_truth": "    private fun clearPinnedView() {\r\n        pinnedView.removeAllViews()\r\n        pinnedContentView = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\idle\\InlineSuggestionsUi.kt"}}
{"prompt": "import androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.R)", "choices": [{"text": "(Build.VERSION_CODES.HONEYCOMB)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR1)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR2)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR3)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR4)\n @RequiresApi(Build.VERSION_CODES.HONEYCOMB_MR5)\n @RequiresApi(Build.VERSION_CODES.HONEYCOM"}], "metadata": {"task_id": "fcitx5-android/141", "ground_truth": "    fun clear() {\r\n        clearScrollView()\r\n        clearPinnedView()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\idle\\InlineSuggestionsUi.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nprivate fun updateMenuButtonRotation(instant: Boolean = false) {\r\n        val targetRotation = menuButtonRotation\r\n        menuButton.apply {\r\n            if (targetRotation == rotation) return\r\n            animate().cancel()\r\n            if (!instant && !disableAnimation) {\r\n                animate().setDuration(200L).rotation(targetRotation)", "choices": [{"text": "\n            } else {\r\n                animate().setDuration(200L).rotation(targetRotation)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/145", "ground_truth": "            } else {\r\n                rotation = targetRotation\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\IdleUi.kt"}}
{"prompt": "val backButton\nvar extension View?\nval root\n fun removeExtension() {", "choices": [{"text": "\n    if (extensionView!= null) {\n        extensionView.removeExtension();\n    }\n}"}], "metadata": {"task_id": "fcitx5-android/150", "ground_truth": "        extension?.let {\r\n            root.removeView(it)\r\n            extension = null\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\TitleUi.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        when (parent.layoutDirection) {\r\n            View.LAYOUT_DIRECTION_LTR -> {\r\n                outRect.right = drawable.intrinsicWidth\r\n            }\r\n            View.LAYOUT_DIRECTION_RTL -> {\r\n                outRect.left = drawable.intrinsicWidth\r\n            }\r\n            else -> {", "choices": [{"text": "\n                outRect.top = drawable.intrinsicHeight\r\n                outRect.bottom = drawable.intrinsicHeight\r\n            }\r\n        } else {\r\n            outRect.top = 0\r\n            outRect.bottom = 0\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/162", "ground_truth": "                // should not reach here\r\n                outRect.set(0, 0, 0, 0)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\decoration\\FlexboxVerticalDecoration.kt"}}
{"prompt": "import android.view.View\nfinal override fun onCreateView(): View {\r\n        candidateLayout = onCreateCandidateLayout().apply {\r\n            recyclerView.apply {\r\n                // disable item cross-fade animation", "choices": [{"text": "\n                recyclerView.disableItemCrossFadeAnimation().apply {\r\n                    recyclerView.disableItemCrossFadeAnimation().apply {\r\n                        recyclerView.disableItemCrossFadeAnimation().apply {\r\n                            recyclerView.disableItemCrossFadeAnimation().apply {\r\n                                recyclerView.disableItemCrossFadeAnimation().apply {\r\n                                    recyclerView.disableItemCrossFadeAnimation().apply {\r\n                                        recyclerView.disableItemCrossFadeAnimation().apply {\r\n                                            recyclerView.disableItemCrossFadeAnimation()."}], "metadata": {"task_id": "fcitx5-android/165", "ground_truth": "                itemAnimator = null\r\n            }\r\n        }\r\n        return candidateLayout\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\window\\BaseExpandedCandidateWindow.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.input.candidates.adapter.PagingCandidateViewAdapter\nimport org.fcitx.fcitx5.android.daemon.launchOnReady\nimport kotlinx.coroutines.launch\nimport android.view.View\nfun bindCandidateUiViewHolder(holder: PagingCandidateViewAdapter.ViewHolder) {\r\n        holder.itemView.setOnClickListener {\r\n            fcitx.launchOnReady { it.select(holder.idx) }\r\n        }\r\n        if (horizontalCandidate.canForgetWord) {\r\n            holder.itemView.setOnLongClickListener { _ ->\r\n                holder.ui.showExtraActionMenu(onForget = {\r\n                    fcitx.launchOnReady { it.forget(holder.idx) }\r\n                })\r\n                true", "choices": [{"text": "\n            }\r\n        } else {\r\n            holder.itemView.setOnLongClickListener { _ ->\r\n                holder.ui.showExtraActionMenu(onForget = {\r\n                    fcitx.launchOnReady { it.forget(holder.idx) }\r\n                })\r\n                true\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/166", "ground_truth": "            }\r\n        } else {\r\n            holder.itemView.setOnLongClickListener(null)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\window\\BaseExpandedCandidateWindow.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) = outRect.run {", "choices": [{"text": "\n        outRect.left = 0;\r\n        outRect.top = 0;\r\n        outRect.right = 0;\r\n        outRect.bottom = 0;\r\n        outRect.width = 0;\r\n        outRect.height = 0;\r\n    }"}], "metadata": {"task_id": "fcitx5-android/175", "ground_truth": "        top = space\r\n        bottom = space\r\n        left = space\r\n        right = space\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\clipboard\\SpacesItemDecoration.kt"}}
{"prompt": "fun update(start: Int, end: Int) {\r\n        if (end >= start) {\r\n            data[0] = start\r\n            data[1] = end", "choices": [{"text": "\n            data[2] = end\r\n            data[3] = start\r\n        } else {\r\n            data[0] = start\r\n            data[1] = end\r\n            data[2] = end\r\n            data[3] = end\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/177", "ground_truth": "        } else {\r\n            data[0] = end\r\n            data[1] = start\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorRange.kt"}}
{"prompt": "fun consume(start: Int, end: Int = start): Boolean {\r\n        if (current.rangeEquals(start, end)) {\r\n            return true\r\n        }\r\n        var matched = false\r\n        while (predictions.isNotEmpty()) {\r\n            if (predictions.removeFirst().rangeEquals(start, end)) {\r\n                matched = true\r\n                break\r\n            }\r\n        }\r\n        current.update(start, end)", "choices": [{"text": "\n        if (matched) {\r\n            return true\r\n        }\r\n        return false\r\n    }"}], "metadata": {"task_id": "fcitx5-android/182", "ground_truth": "        if (!matched) {\r\n            Timber.d(\"unable to consume [$start,$end]\")\r\n        }\r\n        return matched\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorTracker.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        val position = parent.getChildAdapterPosition(view)\r\n        if (position != index) {", "choices": [{"text": "\n            outRect.set(0, 0, 0, 0)\r\n        } else {\r\n            outRect.set(0, 0, 0, 0)\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/186", "ground_truth": "            outRect.set(0, 0, 0, 0)\r\n        } else {\r\n            outRect.set(0, dividerHeight, 0, 0)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\dialog\\SingleDividerDecoration.kt"}}
{"prompt": "import splitties.views.imageDrawable\nimport splitties.resources.drawable\nimport org.fcitx.fcitx5.android.R\nimport androidx.annotation.DrawableRes\nprivate fun iconButton(@DrawableRes icon: Int) = GImageButton(ctx).apply {\r\n        image.imageDrawable = drawable(icon)!!.apply {", "choices": [{"text": "\n            image.imageDrawable = drawable(icon)!!.apply {\r\n                image.imageDrawable = drawable(icon)!!.apply {\r\n                    image.imageDrawable = drawable(icon)!!.apply {\r\n                        image.imageDrawable = drawable(icon)!!.apply {\r\n                            image.imageDrawable = drawable(icon)!!.apply {\r\n                                image.imageDrawable = drawable(icon)!!.apply {\r\n                                    image.imageDrawable = drawable(icon)!!.apply {\r\n                                        image.imageDrawable = drawable(icon)!!.apply"}], "metadata": {"task_id": "fcitx5-android/190", "ground_truth": "            setTint(theme.altKeyTextColor)\r\n        }\r\n        padding = dp(10)\r\n        applyBorderedBackground()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingUi.kt"}}
{"prompt": "import android.view.View\nfun updateSelection(hasSelection: Boolean, userSelection: Boolean) {\r\n        selectButton.isActivated = (hasSelection || userSelection)\r\n        if (hasSelection) {\r\n            selectAllButton.apply {\r\n                visibility = View.GONE\r\n            }\r\n            cutButton.apply {\r\n                visibility = View.VISIBLE\r\n            }\r\n        } else {\r\n            selectAllButton.apply {\r\n                visibility = View.VISIBLE\r\n            }", "choices": [{"text": "            cutButton.apply {\r\n                visibility = View.GONE\r\n            }\r\n        } else {\r\n            cutButton.apply {\r\n                visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/191", "ground_truth": "            cutButton.apply {\r\n                visibility = View.GONE\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingUi.kt"}}
{"prompt": "fun setValues(values: Map<String, String>) {\r\n        table.apply {\r\n            removeAllViews()", "choices": [{"text": "\n            addViews(values)\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/201", "ground_truth": "            values.forEach { (k, v) ->\r\n                addRow(k, v)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editorinfo\\EditorInfoUi.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.data.theme.Theme\nimport android.view.View\nprivate fun recreateInputView(theme: Theme) {\r\n        // InputView should be created first in onCreateInputView\r\n        // setInputView should be used to 'replace' current InputView only", "choices": [{"text": "\n        setInputView(theme.inputView)\r\n    }"}], "metadata": {"task_id": "fcitx5-android/203", "ground_truth": "        InputView(this, fcitx, theme).also {\r\n            inputView = it\r\n            setInputView(it)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "import timber.log.Timber\nimport android.view.View\noverride fun onFinishInputView(finishingInput: Boolean) {\r\n        Timber.d(\"onFinishInputView: finishingInput=$finishingInput\")\r\n        currentInputConnection?.finishComposingText()", "choices": [{"text": "\n        if (finishingInput) {\r\n            currentInputConnection.finishComposingText()\r\n        } else {\r\n            currentInputConnection.cancelComposingText()\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/220", "ground_truth": "        postFcitxJob {\r\n            focus(false)\r\n        }\r\n        inputView?.finishInput()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "import android.view.KeyEvent\noverride fun onUnbindInput() {\r\n        cachedKeyEvents.evictAll()\r\n        cachedKeyEventIndex = 0\r\n        cursorUpdateIndex = 0\r\n        // currentInputBinding can be null on some devices under some special Multi-screen mode\r\n        val uid = currentInputBinding?.uid ?: return", "choices": [{"text": "\n        if (uid!= null) {\r\n            currentInputBinding.unbind(uid)\r\n        }\r\n        cachedKeyEvents.evictAll()\r\n        cachedKeyEventIndex = 0\r\n        cursorUpdateIndex = 0\r\n    }"}], "metadata": {"task_id": "fcitx5-android/222", "ground_truth": "        Timber.d(\"onUnbindInput: uid=$uid\")\r\n        postFcitxJob {\r\n            deactivate(uid)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "override fun setEnabled(enabled: Boolean) {", "choices": [{"text": "(enabled: Boolean) {\n    this.enabled = enabled;\n    return this;\n}"}], "metadata": {"task_id": "fcitx5-android/230", "ground_truth": "        super.setEnabled(enabled)\r\n        if (!enabled) {\r\n            isPressed = false\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\CustomGestureView.kt"}}
{"prompt": "import splitties.views.dsl.core.view\nimport org.fcitx.fcitx5.android.input.keyboard.KeyDef.Appearance.Variant\nimport org.fcitx.fcitx5.android.data.theme.Theme\nimport org.fcitx.fcitx5.android.R\nimport androidx.annotation.DrawableRes\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nimport android.content.res.ColorStateList\nprivate fun ImageView.configure(theme: Theme, @DrawableRes src: Int, variant: Variant) = apply {\r\n    isClickable = false\r\n    isFocusable = false\r\n    imageTintList = ColorStateList.valueOf(\r\n        when (variant) {\r\n            Variant.Normal -> theme.keyTextColor\r\n            Variant.AltForeground, Variant.Alternative -> theme.altKeyTextColor", "choices": [{"text": "\n        }\r\n    )\r\n    if (src!= null) {\r\n        imageTintList.add(Color.parseColor(src))\r\n    } else {\r\n        imageTintList.add(Color.TRANSPARENT)\r\n    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/247", "ground_truth": "            Variant.Accent -> theme.accentKeyTextColor\r\n        }\r\n    )\r\n    imageResource = src\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\KeyView.kt"}}
{"prompt": "private fun switchCapsState(lock: Boolean = false) {\r\n        capsState = if (lock) when (capsState) {\r\n            CapsState.Lock -> CapsState.None\r\n            else -> CapsState.Lock\r\n        } else when (capsState) {\r\n            CapsState.None -> CapsState.Once", "choices": [{"text": ", CapsState.Once\r\n        } else {\r\n            CapsState.None -> CapsState.Once\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/255", "ground_truth": "            else -> CapsState.None\r\n        }\r\n        updateCapsButtonIcon()\r\n        updateAlphabetKeys()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\TextKeyboard.kt"}}
{"prompt": "fun forUid(uid: Int): String {\r\n        val cached = get(uid)\r\n        if (cached != null) return cached\r\n        // returns \"${sharedUserIdName}:${uid}\" rather than package name if app uses sharedUserId\r\n        val name = ctx.packageManager.getNameForUid(uid)\r\n        if (name != null) {\r\n            // strip :uid to make it constant across devices\r\n            val pkgName = name.substringBeforeLast(':')", "choices": [{"text": "\n            return pkgName.substring(0, pkgName.length() - 1)\r\n        } else {\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/260", "ground_truth": "            put(uid, pkgName)\r\n            return pkgName\r\n        }\r\n        return uid.toString()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\PackageNameCache.kt"}}
{"prompt": "var onTabClick\nvar selected\nval label\n fun activateTab(index: Int) {\r\n        if (index == selected) return\r\n        if (selected >= 0) {", "choices": [{"text": "\n            activateTab(index - 1)\r\n        } else {\r\n            activateTab(index + 1)\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/271", "ground_truth": "            tabs[selected].setActive(false)\r\n        }\r\n        tabs[index].setActive(true)\r\n        selected = index\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerTabsUi.kt"}}
{"prompt": "import kotlin.math.floor\noverride fun onChangeFocus(x: Float, y: Float): Boolean {\r\n        var newColumn = floor(x / keySize).toInt()\r\n        if (newColumn < -2 || newColumn > columnCount + 1) {\r\n            onDismissSelf(this)\r\n            return true\r\n        }\r\n        newColumn = limitIndex(newColumn, columnCount)\r\n        val newFocus = columnOrder[newColumn]\r\n        if (newFocus < keyViews.size) {\r\n            markInactive(focusedIndex)", "choices": [{"text": "\n            onFocus(newFocus)\r\n            return true\r\n        } else {\r\n            onDismissSelf(this)\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/286", "ground_truth": "            markFocus(newFocus)\r\n            focusedIndex = newFocus\r\n        }\r\n        return false\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\popup\\PopupMenuUi.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.daemon.launchOnReady\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\noverride fun onAttached() {\r\n        fcitx.launchOnReady {\r\n            val data = it.statusArea()", "choices": [{"text": "\n            if (data == null) {\r\n                return null\r\n            } else {\r\n                return data\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/294", "ground_truth": "            service.lifecycleScope.launch {\r\n                onStatusAreaUpdate(data)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\status\\StatusAreaWindow.kt"}}
{"prompt": "val fcitx FcitxConnection\nval adapter StatusAreaAdapter\nval staticEntries", "choices": [{"text": "\nval statusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusAreaStatusArea"}], "metadata": {"task_id": "fcitx5-android/295", "ground_truth": "override fun onDetached() {\r\n        popupMenu?.dismiss()\r\n        popupMenu = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\status\\StatusAreaWindow.kt"}}
{"prompt": "import androidx.activity.OnBackPressedDispatcher\noverride fun enterMultiSelect(onBackPressedDispatcher: OnBackPressedDispatcher) {", "choices": [{"text": "_onBackPressedDispatcher = onBackPressedDispatcher\n    _onBackPressedDispatcher = onBackPressedDispatcher\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher = null\n    _onBackPressedDispatcher"}], "metadata": {"task_id": "fcitx5-android/310", "ground_truth": "        if (shouldShowFab) {\r\n            fab.hide()\r\n        }\r\n        super.enterMultiSelect(onBackPressedDispatcher)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\BaseDynamicListUi.kt"}}
{"prompt": "override fun exitMultiSelect() {", "choices": [{"text": "\n    if (m_options.size() == 0) {\n        return false;\n    }\n\n    for (int i = 0; i < m_options.size(); i++) {\n        if (m_options.get(i) == m_options.get(i - 1)) {\n            return true;\n        }\n    }\n\n    return false;\n}"}], "metadata": {"task_id": "fcitx5-android/311", "ground_truth": "        if (shouldShowFab) {\r\n            fab.show()\r\n        }\r\n        super.exitMultiSelect()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\BaseDynamicListUi.kt"}}
{"prompt": "import android.widget.ImageButton\nimport android.widget.CheckBox\nimport android.view.View\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun <T> Context.DynamicListUi(\r\n    mode: BaseDynamicListUi.Mode<T>,\r\n    initialEntries: List<T>,\r\n    enableOrder: Boolean = false,\r\n    initCheckBox: (CheckBox.(T) -> Unit) = { visibility = View.GONE },\r\n    initSettingsButton: (ImageButton.(T) -> Unit) = { visibility = View.GONE },\r\n    show: (T) -> String\r\n): BaseDynamicListUi<T> = object :\r\n    BaseDynamicListUi<T>(\r\n        this,\r\n        mode,\r\n        initialEntries,\r\n        enableOrder,\r\n        initCheckBox,\r\n        initSettingsButton\r\n    ) {\r\n    init {", "choices": [{"text": "\n        this.mode = mode;\r\n        this.initialEntries = initialEntries;\r\n        this.enableOrder = enableOrder;\r\n        this.initCheckBox = initCheckBox;\r\n        this.initSettingsButton = initSettingsButton;\r\n        this.show = show;\r\n    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/324", "ground_truth": "        addTouchCallback()\r\n    }\r\n\r\n    override fun showEntry(x: T): String = show(x)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "import android.widget.ImageButton\nimport android.widget.CheckBox\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun <T> Context.CheckBoxListUi(\r\n    initialEntries: List<T>,\r\n    initCheckBox: (CheckBox.(T) -> Unit),\r\n    initSettingsButton: (ImageButton.(T) -> Unit),\r\n    show: (T) -> String\r\n) = DynamicListUi(\r\n    BaseDynamicListUi.Mode.Immutable(),\r\n    initialEntries,", "choices": [{"text": "    initCheckBox,\r\n    initSettingsButton,\r\n    show\r\n)"}], "metadata": {"task_id": "fcitx5-android/325", "ground_truth": "    false,\r\n    initCheckBox,\r\n    initSettingsButton,\r\n    show\r\n)", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "import splitties.views.dsl.core.verticalMargin\nimport splitties.views.dsl.core.verticalLayout\nimport splitties.views.dsl.core.styles.AndroidStyles\nimport splitties.views.dsl.core.matchParent\nimport splitties.views.dsl.core.lParams\nimport splitties.views.dsl.core.add\nimport splitties.dimensions.dp\nimport org.fcitx.fcitx5.android.R\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.StringRes\nimport android.view.View\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun Context.ProgressBarDialogIndeterminate(@StringRes title: Int): AlertDialog.Builder {\r\n    val androidStyles = AndroidStyles(this)\r\n    return AlertDialog.Builder(this)\r\n        .setTitle(title)\r\n        .setView(verticalLayout {\r\n            add(androidStyles.progressBar.horizontal {\r\n                isIndeterminate = true\r\n            }, lParams {\r\n                width = matchParent\r\n                verticalMargin = dp(20)", "choices": [{"text": "\n            })\r\n        })\r\n       .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        })\r\n       .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        })\r"}], "metadata": {"task_id": "fcitx5-android/326", "ground_truth": "                horizontalMargin = dp(26)\r\n            })\r\n        })\r\n        .setCancelable(false)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport androidx.lifecycle.LifecycleCoroutineScope\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.StringRes\nimport android.content.Context\nfun LifecycleCoroutineScope.withLoadingDialog(\r\n    context: Context,\r\n    @StringRes title: Int = R.string.loading,\r\n    threshold: Long = 200L,\r\n    action: suspend () -> Unit\r\n) {\r\n    var loadingDialog: AlertDialog? = null\r\n    val loadingJob = launch {\r\n        delay(threshold)\r\n        loadingDialog = context.ProgressBarDialogIndeterminate(title).show()\r\n    }\r\n    launch {", "choices": [{"text": "\n        if (loadingDialog!= null) {\r\n            loadingDialog.dismiss()\r\n        }\r\n        action.run()\r\n    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/327", "ground_truth": "        action()\r\n        loadingJob.cancelAndJoin()\r\n        loadingDialog?.dismiss()\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "import splitties.views.dsl.core.wrapContent\nimport splitties.views.dsl.core.textView\nimport android.view.textclassifier.TextClassifier\nimport android.view.ViewGroup.MarginLayoutParams\nimport android.view.ViewGroup\nimport android.os.Build\nimport android.graphics.Typeface\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int) = Holder(\r\n        parent.textView {\r\n            textSize = 12f\r\n            typeface = Typeface.MONOSPACE\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                setTextClassifier(TextClassifier.NO_OP)\r\n            }\r\n            layoutParams = MarginLayoutParams(wrapContent, wrapContent).apply {", "choices": [{"text": "\n                textSize = 12f\r\n                typeface = Typeface.MONOSPACE\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                    setTextClassifier(TextClassifier.NO_OP)\r\n                }\r\n            }\r\n        }\r\n    )"}], "metadata": {"task_id": "fcitx5-android/337", "ground_truth": "                marginStart = dp(4)\r\n                marginEnd = dp(4)\r\n            }\r\n        }\r\n    )", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogAdapter.kt"}}
{"prompt": "val rv\nvar logcat Logcat?\nval logAdapter", "choices": [{"text": "\nlogcat.addListener(new Logcat.Listener() {\n    @Override\n    public void onLogcat(Logcat logcat) {\n        logAdapter.onLogcat(logcat);\n    }\n})\n"}], "metadata": {"task_id": "fcitx5-android/338", "ground_truth": "override fun onDetachedFromWindow() {\r\n        logcat?.shutdownLogFlow()\r\n        super.onDetachedFromWindow()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogView.kt"}}
{"prompt": "override fun onStop() {", "choices": [{"text": "\n    if (mActivity!= null) {\n        mActivity.finish();\n        mActivity = null;\n    }\n    mActivity = null;\n}"}], "metadata": {"task_id": "fcitx5-android/342", "ground_truth": "        viewModel.fcitx.runIfReady {\r\n            save()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainActivity.kt"}}
{"prompt": "val viewModel MainViewModel", "choices": [{"text": "\n\n    if (data.hasOwnProperty(\"name\")) {\n        this.name = data[\"name\"]\n    }\n\n    if (data.hasOwnProperty(\"email\")) {\n        this.email = data[\"email\"]\n    }\n\n    if (data.hasOwnProperty(\"phone\")) {\n        this.phone = data[\"phone\"]\n    }\n\n    if (data.hasOwnProperty(\"address\")) {\n        this.address = data[\"address\"]\n    }\n\n    if (data.hasOwnProperty(\"city\")) {\n        this.city"}], "metadata": {"task_id": "fcitx5-android/343", "ground_truth": "override fun onStart() {\r\n        super.onStart()\r\n        viewModel.enableAboutButton()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nimport androidx.preference.PreferenceCategory\nimport androidx.annotation.StringRes\nimport androidx.annotation.IdRes\nimport androidx.annotation.DrawableRes\nprivate fun PreferenceCategory.addDestinationPreference(\r\n        @StringRes title: Int,\r\n        @DrawableRes icon: Int,\r\n        @IdRes destination: Int", "choices": [{"text": ",\r\n        @StringRes description: String\r\n    )\r\n    return addDestinationPreference(\r\n        title: title,\r\n        icon: icon,\r\n        destination: destination,\r\n        description: description\r\n    )\r\n}"}], "metadata": {"task_id": "fcitx5-android/345", "ground_truth": "    ) {\r\n        addPreference(title, icon = icon) {\r\n            findNavController().navigate(destination)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainFragment.kt"}}
{"prompt": "import androidx.preference.PreferenceDialogFragmentCompat\nimport androidx.preference.Preference\nimport androidx.preference.EditTextPreference\nfun <T : EditTextPreference> T.restore() {\r\n    // must `callChangeListener` before `setText`\r\n    // https://android.googlesource.com/platform/frameworks/support/+/872b66efac82f0b0a3fac4bb14a789464ab19f96/preference/preference/src/main/java/androidx/preference/EditTextPreferenceDialogFragmentCompat.java#146\r\n    (def() as? String)?.let {", "choices": [{"text": "\n        (def() as? EditTextPreferenceDialogFragmentCompat.setText(text) as? EditTextPreferenceDialogFragmentCompat.setText(text))\r\n    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/346", "ground_truth": "        if (callChangeListener(it)) {\r\n            text = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "import androidx.preference.Preference\nimport androidx.preference.ListPreference\nfun <T : ListPreference> T.restore() {\r\n    (def() as? String)?.let {", "choices": [{"text": "\n        (def() as? String)?.let {\r\n            (def() as? String)?.let {\r\n                (def() as? String)?.let {\r\n                    (def() as? String)?.let {\r\n                        (def() as? String)?.let {\r\n                            (def() as? String)?.let {\r\n                                (def() as? String)?.let {\r\n                                    (def() as? String)?.let {\r\n                                        (def() as? String)?.let {\r\n                                            (def() as? String"}], "metadata": {"task_id": "fcitx5-android/347", "ground_truth": "        if (callChangeListener(it)) {\r\n            value = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "import androidx.preference.SwitchPreference\nimport androidx.preference.Preference\nfun <T : SwitchPreference> T.restore() {\r\n    (def() as? Boolean)?.let {", "choices": [{"text": "\n        (def() as? Boolean)?.let {\r\n            (def() as? Boolean)?.let {\r\n                (def() as? Boolean)?.let {\r\n                    (def() as? Boolean)?.let {\r\n                        (def() as? Boolean)?.let {\r\n                            (def() as? Boolean)?.let {\r\n                                (def() as? Boolean)?.let {\r\n                                    (def() as? Boolean)?.let {\r\n                                        (def() as? Boolean)?.let {\r\n                                            (def() as? Boolean"}], "metadata": {"task_id": "fcitx5-android/348", "ground_truth": "        if (callChangeListener(it)) {\r\n            isChecked = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.core.data.DataManager\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport androidx.lifecycle.lifecycleScope\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        lifecycleScope.launch {\r\n            val needsReload = if (DataManager.synced) {\r\n                val (newPluginsToLoad, _) = DataManager.detectPlugins()\r\n                newPluginsToLoad != DataManager.getLoadedPlugins()\r\n            } else {\r\n                DataManager.waitSynced()", "choices": [{"text": "\n            }\r\n            if (needsReload) {\r\n                DataManager.reloadPlugins()\r\n            }\r\n        }\r\n        super.onCreatePreferences(savedInstanceState, rootKey)\r\n    }"}], "metadata": {"task_id": "fcitx5-android/357", "ground_truth": "                false\r\n            }\r\n            preferenceScreen = createPreferenceScreen(needsReload)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\PluginFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.core.data.DataManager\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.suspendCancellableCoroutine\nprivate suspend fun DataManager.waitSynced() = suspendCancellableCoroutine {\r\n        if (synced)\r\n            it.resumeWith(Result.success(Unit))", "choices": [{"text": "\n        else\r\n            it.resumeWith(Result.error(Unit))\r\n    }"}], "metadata": {"task_id": "fcitx5-android/358", "ground_truth": "        else\r\n            addOnNextSyncedCallback {\r\n                it.resumeWith(Result.success(Unit))\r\n            }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\PluginFragment.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n    super.onDestroy();\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver"}], "metadata": {"task_id": "fcitx5-android/360", "ground_truth": "        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\addon\\AddonListFragment.kt"}}
{"prompt": "private fun setValue(value: Int) {", "choices": [{"text": "(value: Int) {\n    this.value = value;\n    return this;\n}"}], "metadata": {"task_id": "fcitx5-android/363", "ground_truth": "        if (callChangeListener(value)) {\r\n            persistInt(value)\r\n            notifyChanged()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\DialogSeekBarPreference.kt"}}
{"prompt": "var raw RawConfig\nval fcitx FcitxConnection\nval scope\n private fun save() {", "choices": [{"text": "\n    if (this.id!= null) {\n        this.id = this.id.toString();\n    }\n    if (this.name!= null) {\n        this.name = this.name.toString();\n    }\n    if (this.email!= null) {\n        this.email = this.email.toString();\n    }\n    if (this.phone!= null) {\n        this.phone = this.phone.toString();\n    }\n    if (this.address!= null) {\n        this.address = this.address.toString();"}], "metadata": {"task_id": "fcitx5-android/369", "ground_truth": "        if (!configLoaded) return\r\n        fcitx.launchOnReady {\r\n            saveConfig(it, raw[\"cfg\"])\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxPreferenceFragment.kt"}}
{"prompt": "var raw RawConfig\nval scope\nval fcitx FcitxConnection", "choices": [{"text": "\nval fcitx_connection FcitxConnection\nval fcitx_connection_pool FcitxConnectionPool\nval fcitx_connection_pool_pool FcitxConnectionPoolPool\nval fcitx_connection_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool_pool"}], "metadata": {"task_id": "fcitx5-android/370", "ground_truth": "override fun onStart() {\r\n        super.onStart()\r\n        viewModel.setToolbarTitle(getPageTitle())\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxPreferenceFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.daemon.launchOnReady\nimport org.fcitx.fcitx5.android.R\nimport android.os.Build\nprivate fun updateIMState() {\r\n        if (isInitialized) {\r\n            fcitx.launchOnReady { f ->\r\n                f.setEnabledIme(ui.entries.map { it.uniqueName }.toTypedArray())\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {", "choices": [{"text": "\n                    f.setImeEnabled(true)\r\n                } else {\r\n                    f.setImeEnabled(false)\r\n                }\r\n            }\r\n        } else {\r\n            fcitx.launchOnReady { f ->\r\n                f.setImeEnabled(false)\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {\r\n                    f.setImeEnabled(false)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/377", "ground_truth": "                    SubtypeManager.syncWith(f.enabledIme())\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        if (::ui.isInitialized) {", "choices": [{"text": "(false) {\r\n            return;\r\n        }\r\n\r\n        if (!::ui.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        if (!::ui.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        if (!::ui.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        if (!::ui.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        if (!::ui.isInitialized) {\r\n            return;\r\n        }"}], "metadata": {"task_id": "fcitx5-android/379", "ground_truth": "            ui.exitMultiSelect()\r\n        }\r\n        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n    super.onDestroy();\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver"}], "metadata": {"task_id": "fcitx5-android/380", "ground_truth": "        if (::ui.isInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "\n        viewModel.enableToolbarEditButton()\r\n    }"}], "metadata": {"task_id": "fcitx5-android/384", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\ListFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.data.pinyin.CustomPhraseManager\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.NonCancellable\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.lifecycleScope\nprivate fun saveConfig() {\r\n        if (!dustman.dirty) return\r\n        resetDustman()\r\n        lifecycleScope.launch(NonCancellable + Dispatchers.IO) {\r\n            CustomPhraseManager.save(ui.entries.toTypedArray())", "choices": [{"text": "\n            dustman.dirty = false\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/387", "ground_truth": "            viewModel.fcitx.runOnReady {\r\n                reloadPinyinCustomPhrase()\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinCustomPhraseFragment.kt"}}
{"prompt": "override fun onStop() {", "choices": [{"text": "\n    if (mActivity!= null) {\n        mActivity.finish();\n        mActivity = null;\n    }\n    mActivity = null;\n}"}], "metadata": {"task_id": "fcitx5-android/389", "ground_truth": "        saveConfig()\r\n        ui.exitMultiSelect()\r\n        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinCustomPhraseFragment.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\nimport android.app.NotificationChannel\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        createNotificationChannel()", "choices": [{"text": "\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }"}], "metadata": {"task_id": "fcitx5-android/391", "ground_truth": "        registerLauncher()\r\n        ui.addOnItemChangedListener(this)\r\n        resetDustman()\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        reloadDict()\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton"}], "metadata": {"task_id": "fcitx5-android/400", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n    super.onDestroy();\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver"}], "metadata": {"task_id": "fcitx5-android/401", "ground_truth": "        if (uiInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        saveConfig()\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton"}], "metadata": {"task_id": "fcitx5-android/406", "ground_truth": "        if (isInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PunctuationEditorFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {", "choices": [{"text": "\n    super.onDestroy();\n    if (mListener!= null) {\n        mListener.onDestroy();\n        mListener = null;\n    }\n}"}], "metadata": {"task_id": "fcitx5-android/407", "ground_truth": "        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PunctuationEditorFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        saveConfig()\r\n        if (isInitialized) {", "choices": [{"text": "\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/410", "ground_truth": "            ui.exitMultiSelect()\r\n        }\r\n        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseEditFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {", "choices": [{"text": "\n    super.onDestroy();\n    if (mListener!= null) {\n        mListener.onDestroy();\n        mListener = null;\n    }\n}"}], "metadata": {"task_id": "fcitx5-android/411", "ground_truth": "        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseEditFragment.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\nimport android.app.NotificationChannel\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        createNotificationChannel()", "choices": [{"text": "\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }"}], "metadata": {"task_id": "fcitx5-android/414", "ground_truth": "        registerLauncher()\r\n        ui.addOnItemChangedListener(this)\r\n        resetDustman()\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.data.quickphrase.QuickPhrase\nimport org.fcitx.fcitx5.android.core.reloadQuickPhrase\noverride fun onStop() {\r\n        reloadQuickPhrase()\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "\n        viewModel.enableToolbarEditButton()\r\n    }"}], "metadata": {"task_id": "fcitx5-android/417", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {", "choices": [{"text": "\n    super.onDestroy();\n    if (mListener!= null) {\n        mListener.onDestroy();\n        mListener = null;\n    }\n}"}], "metadata": {"task_id": "fcitx5-android/418", "ground_truth": "        if (uiInitialized) {\r\n            ui.removeItemChangedListener()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?", "choices": [{"text": "\n    ) {\r\n        super.onCreateView(inflater, container, savedInstanceState);\r\n    }"}], "metadata": {"task_id": "fcitx5-android/421", "ground_truth": "    ): View {\r\n        resetDustman()\r\n        ui.addOnItemChangedListener(this)\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "override fun onStop() {\r\n        reloadConfig()\r\n        viewModel.disableToolbarEditButton()", "choices": [{"text": "\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton()\r\n        viewModel.enableToolbarEditButton"}], "metadata": {"task_id": "fcitx5-android/432", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.data.theme.Theme\nprivate inline fun whenHasBackground(\r\n        block: BackgroundStates.(Theme.Custom.CustomBackground) -> Unit,", "choices": [{"text": ",\r\n        context: Context.Context\r\n    ) {\r\n        if (context == null) {\r\n            throw new NullPointerException(\"context\");\r\n        }\r\n        if (context.getTheme() == null) {\r\n            throw new NullPointerException(\"context.getTheme\");\r\n        }\r\n        if (context.getTheme().getCustomBackground() == null) {\r\n            throw new NullPointerException(\"context.getTheme().getCustomBackground\");\r\n        }\r\n        return context.getTheme().getCustomBackground();\r\n    }"}], "metadata": {"task_id": "fcitx5-android/436", "ground_truth": "    ) {\r\n        if (theme.backgroundImage != null)\r\n            block(backgroundStates, theme.backgroundImage!!)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun delete() {\r\n        setResult(\r\n            Activity.RESULT_OK,\r\n            Intent().apply {", "choices": [{"text": "\r\n                @Override\r\n                public void onSuccess() {\r\n                    setResult(Activity.RESULT_OK, null);\r\n                }\r\n            }\r\n        );\r\n    }"}], "metadata": {"task_id": "fcitx5-android/439", "ground_truth": "                putExtra(RESULT, BackgroundResult.Deleted(theme.name))\r\n            }\r\n        )\r\n        finish()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "import splitties.views.dsl.core.view\nimport org.fcitx.fcitx5.android.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem) = when (item.itemId) {\r\n        android.R.id.home -> {", "choices": [{"text": "\n            if (item.getItemId() == android.R.id.home) {\r\n                finish();\r\n            }\r\n        }\r\n        super.onOptionsItemSelected(item);\r\n    }"}], "metadata": {"task_id": "fcitx5-android/441", "ground_truth": "            cancel()\r\n            true\r\n        }\r\n        else -> super.onOptionsItemSelected(item)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "import splitties.views.dsl.core.Ui\nimport org.fcitx.fcitx5.android.data.theme.Theme\nimport android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        (holder.ui as ThemeThumbnailUi).apply {\r\n            val theme = entries[position]\r\n            setTheme(theme)\r\n            editButton.visibility = View.GONE\r\n            setChecked(position == selected)\r\n            root.setOnClickListener {", "choices": [{"text": "\n                editButton.setVisibility(View.VISIBLE)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/444", "ground_truth": "                onClick(theme)\r\n                selected = position\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\SimpleThemeListAdapter.kt"}}
{"prompt": "val viewModel SetupViewModel\nvar prevButton Button\nval NOTIFY_ID", "choices": [{"text": "\nvar nextButton Button\nval NOTIFY_ID = 1\n\nif (prevButton!= null) {\n\tprevButton.onClick()\n}\n\nif (nextButton!= null) {\n\tnextButton.onClick()\n}\n"}], "metadata": {"task_id": "fcitx5-android/470", "ground_truth": "override fun onResume() {\r\n        notificationManager.cancel(NOTIFY_ID)\r\n        super.onResume()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\setup\\SetupActivity.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?", "choices": [{"text": "\n    ) {\r\n        super.onCreateView(inflater, container, savedInstanceState);\r\n    }"}], "metadata": {"task_id": "fcitx5-android/472", "ground_truth": "    ): View {\r\n        binding = FragmentSetupBinding.inflate(inflater)\r\n        sync()\r\n        return binding.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\setup\\SetupFragment.kt"}}
{"prompt": "import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onPositiveButtonClick(l: AlertDialog.() -> Boolean?): AlertDialog {", "choices": [{"text": "\n    if (l == null) {\n        return null;\n    } else {\n        return l.onPositiveButtonClick(this);\n    }\n}"}], "metadata": {"task_id": "fcitx5-android/474", "ground_truth": "    positiveButton.setOnClickListener {\r\n        if (l.invoke(this) == true) dismiss()\r\n    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onNegativeButtonClick(l: AlertDialog.() -> Boolean): AlertDialog {", "choices": [{"text": "\n    if (l == null) {\n        return null;\n    } else {\n        return l.onNegativeButtonClick(this);\n    }\n}"}], "metadata": {"task_id": "fcitx5-android/475", "ground_truth": "    negativeButton.setOnClickListener {\r\n        if (l.invoke(this)) dismiss()\r\n    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onNeutralButtonClick(l: AlertDialog.() -> Boolean): AlertDialog {", "choices": [{"text": "\n    if (l == null) {\n        return null;\n    }\n    return l.onNeutralButtonClick();\n}"}], "metadata": {"task_id": "fcitx5-android/476", "ground_truth": "    neutralButton.setOnClickListener {\r\n        if (l.invoke(this)) dismiss()\r\n    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "import java.io.Serializable\nimport android.os.Bundle\ninline fun <reified T : Serializable> Bundle.serializable(key: String): T? {\r\n    @Suppress(\"DEPRECATION\")\r\n    return getSerializable(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getSerializable(key, T::class.java)", "choices": [{"text": "\n//    } else {\r\n//        return null\r\n//    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/481", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getSerializable(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Bundle.kt"}}
{"prompt": "import android.os.Parcelable\nimport android.os.Bundle\ninline fun <reified T : Parcelable> Bundle.parcelable(key: String): T? {\r\n    // https://issuetracker.google.com/issues/240585930#comment6\r\n    @Suppress(\"DEPRECATION\")\r\n    return getParcelable(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getParcelable(key, T::class.java)", "choices": [{"text": "\n//    } else {\r\n//        return null\r\n//    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/482", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getParcelable(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Bundle.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.common.ipc.IClipboardEntryTransformer\nfun IClipboardEntryTransformer.descEquals(other: IClipboardEntryTransformer): Boolean {\r\n    return try {", "choices": [{"text": "\n        if (other == null) {\r\n            return false;\r\n        }\r\n        if (this == other) {\r\n            return true;\r\n        }\r\n        if (this.id!= other.id) {\r\n            return false;\r\n        }\r\n        if (this.name!= other.name) {\r\n            return false;\r\n        }\r\n        if (this.url!= other.url) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/484", "ground_truth": "        description!! == other.description!!\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\ClipboardEntryTransformer.kt"}}
{"prompt": "import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun borderDrawable(\r\n    width: Int,\r\n    @ColorInt stroke: Int,\r\n    @ColorInt background: Int = Color.TRANSPARENT", "choices": [{"text": "\n) {\r\n    if (background == null) {\r\n        background = Color.TRANSPARENT;\r\n    }\r\n    if (stroke == null) {\r\n        stroke = Color.TRANSPARENT;\r\n    }\r\n    if (width == null) {\r\n        width = Color.TRANSPARENT;\r\n    }\r\n    if (background == null) {\r\n        background = Color.TRANSPARENT;\r\n    }\r\n    return new BorderDrawable(width, stroke, background);\r\n}"}], "metadata": {"task_id": "fcitx5-android/490", "ground_truth": ") = GradientDrawable().apply {\r\n    setStroke(width, stroke)\r\n    setColor(background)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Drawable.kt"}}
{"prompt": "var target State\nvar pred\nvar raw\n fun push(event: Event, vararg booleanStates: Pair<B, Boolean>) {", "choices": [{"text": "\n    if (booleanStates == null) {\n        booleanStates = new ArrayList<>();\n    }\n    booleanStates.add(booleanStates.size() > 0? true : false);\n    return booleanStates;\n}"}], "metadata": {"task_id": "fcitx5-android/493", "ground_truth": "        booleanStates.forEach {\r\n            setBooleanState(it.first, it.second)\r\n        }\r\n        push(event)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\EventStateMachine.kt"}}
{"prompt": "val value String\n fun set(vararg keys: String, str: String) {\r\n        if (keys.isEmpty()) return\r\n        var current = core", "choices": [{"text": "\n        for (var i = 0; i < keys.length; i++) {\r\n            if (current[keys[i]] === str) return\r\n            current[keys[i]] = str\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/499", "ground_truth": "        keys.forEach {\r\n            current = current.getOrCreate(it)\r\n        }\r\n        current.value = str\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Ini.kt"}}
{"prompt": "import android.os.Parcelable\nimport android.os.Build\nimport android.content.Intent\ninline fun <reified T : Parcelable> Intent.parcelable(key: String): T? {\r\n    // https://issuetracker.google.com/issues/240585930#comment6\r\n    @Suppress(\"DEPRECATION\")\r\n    return getParcelableExtra(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getParcelableExtra(key, T::class.java)", "choices": [{"text": "\n//    } else {\r\n//        return null\r\n//    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/506", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getParcelableExtra(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Intent.kt"}}
{"prompt": "import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.async\nimport kotlinx.coroutines.Deferred\nfun getLogAsync(): Deferred<Result<List<String>>> = async {\r\n        runCatching {\r\n            Runtime.getRuntime()\r\n                .exec(arrayOf(\"logcat\", pid?.let { \"--pid=$it\" } ?: \"\", \"-d\"))", "choices": [{"text": "\n               .exec(arrayOf(\"logcat\", pid?.let { \"--pid=$it\" }?: \"\", \"-d\"))\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/509", "ground_truth": "                .inputStream\r\n                .bufferedReader()\r\n                .readLines()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Logcat.kt"}}
{"prompt": "private fun updateDirtyStatus(key: String, boolean: Boolean) {\r\n        if (boolean) {\r\n            dirtyStatus.add(key)", "choices": [{"text": "\n        } else {\r\n            dirtyStatus.remove(key)\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/512", "ground_truth": "        } else {\r\n            dirtyStatus.remove(key)\r\n        }\r\n        dirty = dirtyStatus.isNotEmpty()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\NaiveDustman.kt"}}
{"prompt": "import androidx.preference.PreferenceScreen\nimport androidx.preference.PreferenceCategory\nimport androidx.preference.Preference\nfun PreferenceScreen.addCategory(title: String, block: PreferenceCategory.() -> Unit) {\r\n    val category = PreferenceCategory(context).apply {", "choices": [{"text": "\n        if (category == null) {\r\n            category = new PreferenceCategory(context)\r\n        }\r\n        category.addCategory(title, block)\r\n    }\r\n    return category\r\n}"}], "metadata": {"task_id": "fcitx5-android/516", "ground_truth": "        setTitle(title)\r\n    }\r\n    addPreference(category)\r\n    block.invoke(category)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nimport androidx.annotation.DrawableRes\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    summary: String,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null", "choices": [{"text": "\n) {\r\n    super.addPreference(title, summary, icon);\r\n}"}], "metadata": {"task_id": "fcitx5-android/518", "ground_truth": ") {\r\n    val ctx = context\r\n    addPreference(ctx.getString(title), summary, icon, onClick)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nimport androidx.annotation.DrawableRes\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    @StringRes summary: Int? = null,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null", "choices": [{"text": "\n) {\r\n    super.addPreference(title, summary, icon);\r\n}"}], "metadata": {"task_id": "fcitx5-android/519", "ground_truth": ") {\r\n    val ctx = context\r\n    addPreference(ctx.getString(title), summary?.let(ctx::getString), icon, onClick)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.ViewCompat\nfun RecyclerView.applyNavBarInsetsBottomPadding() {\r\n    clipToPadding = false\r\n    ViewCompat.setOnApplyWindowInsetsListener(this) { _, windowInsets ->\r\n        windowInsets.getInsets(WindowInsetsCompat.Type.navigationBars()).also {", "choices": [{"text": "_, windowInsets ->\r\n            clipToPadding = windowInsets.getInsets(WindowInsetsCompat.Type.bottomPadding())\r\n        }\r\n    }"}], "metadata": {"task_id": "fcitx5-android/521", "ground_truth": "            bottomPadding = it.bottom\r\n        }\r\n        windowInsets\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\RecyclerView.kt"}}
{"prompt": "import android.annotation.SuppressLint\n\r\n@SuppressLint(\"PrivateApi\")\r\nfun getSystemProperty(key: String): String {\r\n    return try {\r\n        Class.forName(\"android.os.SystemProperties\")\r\n            .getMethod(\"get\", String::class.java)", "choices": [{"text": "\n           .getMethod(\"get\", String::class.java)\r\n           .invoke(null, key)\r\n    } catch (Exception e) {\r\n        e.printStackTrace()\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/524", "ground_truth": "            .invoke(null, key) as String\r\n    } catch (e: Exception) {\r\n        \"\"\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\SystemProperty.kt"}}
{"prompt": "fun isSystemSettingEnabled(key: String): Boolean {\r\n    return try {", "choices": [{"text": "\n        System.setProperty(key, true)\r\n    } catch (e) {\r\n        System.setProperty(key, false)\r\n    }\r\n}"}], "metadata": {"task_id": "fcitx5-android/525", "ground_truth": "        Settings.System.getInt(appContext.contentResolver, key) == 1\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\SystemSettings.kt"}}
{"prompt": "import java.io.File\ninline fun <T> withTempDir(block: (File) -> T): T {\r\n    val dir = appContext.cacheDir.resolve(System.currentTimeMillis().toString()).also {\r\n        it.mkdirs()\r\n    }\r\n    try {", "choices": [{"text": "\n        dir.mkdirs()\r\n    } catch (IOException e) {\r\n        e.printStackTrace()\r\n    }\r\n    return dir\r\n}"}], "metadata": {"task_id": "fcitx5-android/526", "ground_truth": "        return block(dir)\r\n    } finally {\r\n        dir.deleteRecursively()\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\TempDir.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport coil.request.Options\nimport coil.decode.DecodeResult\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\noverride suspend fun decode(): DecodeResult? {\r\n        return try {\r\n            if (!isIco(source)) {\r\n                return null\r\n            }\r\n\r\n            return BitmapFactory.Options().decode(source.source())", "choices": [{"text": "\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/0", "ground_truth": "        } catch (e: Exception) {\r\n            Log.e(LOG_TAG, \"Failed to decode ICO\", e)\r\n            null\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\danielrampelt\\coil\\ico\\IcoDecoder.kt"}}
{"prompt": "val dao FeedItemDao\nval appDatabase AppDatabase\n suspend fun duplicateStoryExists(\r\n        id: Long,\r\n        title: String,\r\n        link: String?,\r\n    ): Boolean {\r\n        return dao.duplicationExists(", "choices": [{"text": "\n            id,\r\n            title,\r\n            link,\r\n        ) || dao.duplicateStoryExists(\r\n            id,\r\n            title,\r\n            link,\r\n        ) || dao.duplicateStoryExists(\r\n            id,\r\n            title,\r\n            link,\r\n        ) || dao.duplicateStoryExists(\r\n            id,\r\n            title,\r\n            link,\r\n        ) || dao.duplicateStoryExists(\r\n            id,\r\n            title,\r\n            link,\r\n        ) || dao"}], "metadata": {"task_id": "Feeder/8", "ground_truth": "            id = id,\r\n            plainTitle = title,\r\n            link = link,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedItemStore.kt"}}
{"prompt": "import java.time.LocalDateTime\nimport java.time.LocalDate\nprivate fun LocalDateTime.formatDynamically(): String {\r\n    val today = LocalDate.now().atStartOfDay()", "choices": [{"text": "\n    if (today == null) {\r\n        return null\r\n    } else {\r\n        return formatDynamically(today.atStartOfDay()) + \" \" + formatDynamically(today.atEndOfDay())\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/9", "ground_truth": "    return when {\r\n        this >= today -> format(shortTimeFormat)\r\n        else -> format(mediumDateTimeFormat)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedItemStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.db.room.ID_UNSET\nimport com.nononsenseapps.feeder.db.room.Feed\nsuspend fun saveFeed(feed: Feed): Long {\r\n        return if (feed.id > ID_UNSET) {\r\n            feedDao.updateFeed(feed)", "choices": [{"text": "\n        } else {\r\n            feedDao.createFeed(feed)\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/11", "ground_truth": "            feed.id\r\n        } else {\r\n            feedDao.insertFeed(feed)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedStore.kt"}}
{"prompt": "import kotlinx.coroutines.flow.Flow\nimport com.nononsenseapps.feeder.model.FeedUnreadCount\nimport com.nononsenseapps.feeder.db.room.Feed\nimport androidx.paging.PagingData\nimport androidx.paging.PagingConfig\nimport androidx.paging.Pager\nfun getPagedNavDrawerItems(expandedTags: Set<String>): Flow<PagingData<FeedUnreadCount>> =\r\n        Pager(\r\n            config =\r\n                PagingConfig(\r\n                    pageSize = 10,\r\n                    initialLoadSize = 50,\r\n                    prefetchDistance = 50,\r\n                    jumpThreshold = 50,", "choices": [{"text": "\n                ),\r\n            data =\r\n                PagingData<FeedUnreadCount>.builder()\r\n               .addAll(expandedTags)\r\n               .build()\r\n        )\r\n"}], "metadata": {"task_id": "Feeder/12", "ground_truth": "                ),\r\n        ) {\r\n            feedDao.getPagedNavDrawerItems(expandedTags)\r\n        }\r\n            .flow", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.feedarticle.FeedListFilter\nimport com.nononsenseapps.feeder.db.room.Feed\nfun setFeedListFilterRecentlyRead(value: Boolean) {\r\n        settingsStore.setFeedListFilterRecentlyRead(value)", "choices": [{"text": "\n        settingsStore.setFeedListFilterRecentlyRead(value)\r\n    }"}], "metadata": {"task_id": "Feeder/16", "ground_truth": "        // Implies read too\r\n        if (!value) {\r\n            settingsStore.setFeedListFilterRead(false)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "import com.nononsenseapps.feeder.util.Either\nimport com.nononsenseapps.feeder.sync.ErrorResponse\nsuspend fun startNewSyncChain(): Either<ErrorResponse, Pair<String, String>> {\r\n        return syncClient.create()\r\n            .onRight {\r\n                updateDeviceList()", "choices": [{"text": "\n            }\r\n           .onError {\r\n                updateDeviceList()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/32", "ground_truth": "            }\r\n            .map { syncCode ->\r\n                syncCode to getSyncRemote().secretKey\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "import kotlinx.coroutines.flow.update\nval _expandedTags\nval expandedTags StateFlow<Set<String>>\nval _resumeTime\nfun toggleTagExpansion(tag: String) {\r\n        _expandedTags.update {\r\n            if (tag in expandedTags.value) {\r\n                _expandedTags.value - tag", "choices": [{"text": "\n                expandedTags.remove(tag)\r\n            } else {\r\n                _resumeTime.value += 1\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/34", "ground_truth": "            } else {\r\n                _expandedTags.value + tag\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SessionStore.kt"}}
{"prompt": "val _feedItemStyle\nval feedItemStyle\nval _currentFeedAndTag\n fun setFeedItemStyle(value: FeedItemStyle) {\r\n        _feedItemStyle.value = value", "choices": [{"text": "\n        _currentFeedAndTag.value = value\r\n    }"}], "metadata": {"task_id": "Feeder/62", "ground_truth": "        sp.edit().putString(\r\n            PREF_FEED_ITEM_STYLE,\r\n            value.name,\r\n        ).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nfun setSwipeAsRead(value: SwipeAsRead) {\r\n        _swipeAsRead.value = value", "choices": [{"text": "_swipeAsRead.isChecked = value;\r\n        _swipeAsRead.setOnClickListener(new OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                setSwipeAsRead(value);\r\n            }\r\n        });\r\n    }"}], "metadata": {"task_id": "Feeder/63", "ground_truth": "        sp.edit().putString(\r\n            PREF_SWIPE_AS_READ,\r\n            value.name,\r\n        ).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nfun String.dropEnds(\r\n    starting: Int,\r\n    ending: Int,\r\n): String {\r\n    require(starting >= 0) { \"Requested character count $starting is less than zero.\" }\r\n    require(ending >= 0) { \"Requested character count $ending is less than zero.\" }", "choices": [{"text": "\n    return String.valueOf(starting) + String.valueOf(ending)\r\n}"}], "metadata": {"task_id": "Feeder/67", "ground_truth": "    return substring(\r\n        starting.coerceAtMost(length),\r\n        (length - ending).coerceAtLeast(0),\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nval _linkOpener\nval linkOpener\nval _itemOpener\nfun itemOpenerFromString(value: String) =\r\n    when (value) {\r\n        PREF_VAL_OPEN_WITH_BROWSER -> ItemOpener.DEFAULT_BROWSER\r\n        PREF_VAL_OPEN_WITH_WEBVIEW,", "choices": [{"text": "\n        PREF_VAL_OPEN_WITH_IMAGE -> ItemOpener.DEFAULT_IMAGE\r\n        PREF_VAL_OPEN_WITH_VIDEO -> ItemOpener.DEFAULT_VIDEO\r\n        PREF_VAL_OPEN_WITH_AUDIO -> ItemOpener.DEFAULT_AUDIO\r\n        PREF_VAL_OPEN_WITH_VIDEO_CAPTURE -> ItemOpener.DEFAULT_VIDEO_CAPTURE\r\n        PREF_VAL_OPEN_WITH_AUDIO_CAPTURE -> ItemOpener.DEFAULT_AUDIO_CAPTURE\r\n        PRE"}], "metadata": {"task_id": "Feeder/69", "ground_truth": "        PREF_VAL_OPEN_WITH_CUSTOM_TAB,\r\n        -> ItemOpener.CUSTOM_TAB\r\n\r\n        else -> ItemOpener.READER\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "fun themeOptionsFromString(value: String) =", "choices": [{"text": "    if (value == null || value.length() == 0) {\n        return null;\n    }\n    if (value.length() == 1) {\n        return value;\n    }\n    if (value.length() == 2) {\n        return value;\n    }\n    if (value.length() == 3) {\n        return value;\n    }\n    if (value.length() == 4) {\n        return value;\n    }\n    if (value.length() == 5) {\n        return value;\n    }\n    if ("}], "metadata": {"task_id": "Feeder/71", "ground_truth": "    try {\r\n        ThemeOptions.valueOf(value.uppercase())\r\n    } catch (_: Exception) {\r\n        ThemeOptions.SYSTEM\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "fun feedItemStyleFromString(value: String) =", "choices": [{"text": "\n    if (value == null || value.length() == 0) {\n        return null;\n    }\n\n    if (value.length() == 1) {\n        return value;\n    }\n\n    if (value.length() == 2) {\n        return value;\n    }\n\n    if (value.length() == 3) {\n        return value;\n    }\n\n    if (value.length() == 4) {\n        return value;\n    }\n\n    if (value.length() == 5) {\n        return value;\n   "}], "metadata": {"task_id": "Feeder/74", "ground_truth": "    try {\r\n        FeedItemStyle.valueOf(value.uppercase())\r\n    } catch (_: Exception) {\r\n        FeedItemStyle.CARD\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.db.room.SyncRemote\nval remoteFeedDao RemoteFeedDao\nval remoteReadMarkDao RemoteReadMarkDao\nval syncDeviceDao SyncDeviceDao\nsuspend fun getSyncRemote(): SyncRemote {\r\n        dao.getSyncRemote()?.let {", "choices": [{"text": "\n            remoteFeedDao.getSyncRemote()?.let {\r\n                remoteReadMarkDao.getSyncRemote()?.let {\r\n                    syncDeviceDao.getSyncRemote()?.let {\r\n                        syncDeviceDao.getSyncRemote()?.let {\r\n                            syncDeviceDao.getSyncRemote()?.let {\r\n                                syncDeviceDao.getSyncRemote()?.let {\r\n                                    syncDeviceDao.getSyncRemote()?.let {\r\n                                        syncDeviceDao.getSyncRemote()?.let {\r\n                                            syncDevice"}], "metadata": {"task_id": "Feeder/76", "ground_truth": "            return it\r\n        }\r\n\r\n        return createDefaultSyncRemote()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "import com.nononsenseapps.feeder.db.room.ReadStatusSynced\nsuspend fun setSynced(feedItemId: Long) {\r\n        // Ignores duplicates\r\n        readStatusDao.insert(\r\n            ReadStatusSynced(", "choices": [{"text": "\n                feedItemId,\r\n                readStatusDao.getReadStatus(feedItemId)\r\n            )\r\n        );\r\n    }"}], "metadata": {"task_id": "Feeder/77", "ground_truth": "                feed_item = feedItemId,\r\n                sync_remote = 1L,\r\n            ),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "import java.net.URL\nimport com.nononsenseapps.feeder.db.room.RemoteReadMark\nsuspend fun addRemoteReadMark(\r\n        feedUrl: URL,\r\n        articleGuid: String,\r\n    ) {\r\n        // Ignores duplicates\r\n        remoteReadMarkDao.insert(\r\n            RemoteReadMark(\r\n                sync_remote = 1L,\r\n                feedUrl = feedUrl,", "choices": [{"text": "\n                articleGuid = articleGuid,\r\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Feeder/79", "ground_truth": "                guid = articleGuid,\r\n                timestamp = Instant.now(),\r\n            ),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "import org.kodein.di.factory\nimport org.kodein.di.compose.LocalDI\nimport org.kodein.di.DIAware\nimport org.kodein.di.DI\nimport androidx.savedstate.SavedStateRegistryOwner\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.lifecycle.ViewModel\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> SavedStateRegistryOwner.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareSavedStateViewModelFactory(LocalDI.current, this)\r\n\r\n    return viewModel(", "choices": [{"text": "        new SavedStateViewModel(factory, key)\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/84", "ground_truth": "        modelClass = T::class.java,\r\n        key = key,\r\n        factory = factory,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\base\\DIAwareViewModel.kt"}}
{"prompt": "import org.kodein.di.factory\nimport org.kodein.di.compose.LocalDI\nimport org.kodein.di.DIAware\nimport org.kodein.di.DI\nimport androidx.navigation.NavBackStackEntry\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.lifecycle.ViewModel\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> NavBackStackEntry.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareSavedStateViewModelFactory(LocalDI.current, this, arguments)\r\n\r\n    return viewModel(", "choices": [{"text": "\n        new NavBackStackEntryViewModel(factory, key),\r\n        new NavBackStackEntryViewModel(factory, key),\r\n        new NavBackStackEntryViewModel(factory, key),\r\n        new NavBackStackEntryViewModel(factory, key),\r\n        new NavBackStackEntryViewModel(factory, key),\r\n        new NavBackStackEntryViewModel(factory, key),\r\n        new NavBackStackEntryViewModel(factory, key),\r\n        new NavBackStackEntryViewModel(factory, key),\r"}], "metadata": {"task_id": "Feeder/85", "ground_truth": "        modelClass = T::class.java,\r\n        key = key,\r\n        factory = factory,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\base\\DIAwareViewModel.kt"}}
{"prompt": "fun isKeyDecodable(keysStr: String): Boolean {\r\n        return try {\r\n            decodeKey(keysStr)", "choices": [{"text": "\n        } catch (e) {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/88", "ground_truth": "            true\r\n        } catch (e: Exception) {\r\n            false\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "import java.security.GeneralSecurityException\nimport java.lang.Exception\n @Throws(GeneralSecurityException::class)\r\n    private fun randomBytes(length: Int): ByteArray {", "choices": [{"text": "(length: Int): ByteArray {\r\n        return new ByteArray(randomBytes(length));\r\n    }"}], "metadata": {"task_id": "Feeder/89", "ground_truth": "        val random = SecureRandom()\r\n        val b = ByteArray(length)\r\n        random.nextBytes(b)\r\n        return b\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n        database.execSQL(\r\n            \"\"\"\r\n            ALTER TABLE feed_items ADD COLUMN read_time INTEGER DEFAULT null\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items", "choices": [{"text": "\n            set read_time = read_time + 1\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r\n            set read_time = read_time + 1\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r\n            set read_time = read_time + 1\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n"}], "metadata": {"task_id": "Feeder/108", "ground_truth": "                set read_time = 1690317917000\r\n            where unread = 0;\r\n            \"\"\".trimIndent(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n        database.execSQL(\r\n            \"\"\"\r\n            CREATE UNIQUE INDEX idx_feed_items_cursor\r\n            ON feed_items (primary_sort_time, pub_date, id)\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items", "choices": [{"text": "\n            set primary_sort_time = primary_sort_time + 1\r\n            set pub_date = pub_date + 1\r\n            set id = id + 1\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r\n            set primary_sort_time = primary_sort_time + 1\r\n            set pub_date = pub_date + 1\r\n            set id = id + 1\r\n            \"\"\".trimIndent(),\r\n        )\r\n    }"}], "metadata": {"task_id": "Feeder/109", "ground_truth": "                set bookmarked = 1\r\n            where pinned = 1;\r\n            \"\"\".trimIndent(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\nfun SupportSQLiteDatabase.inTransaction(init: (SupportSQLiteDatabase) -> Unit) {\r\n    beginTransaction()\r\n    try {\r\n        init(this)", "choices": [{"text": "\n    } catch (e) {\r\n        throw new RuntimeException(e)\r\n    }\r\n    return this\r\n}"}], "metadata": {"task_id": "Feeder/121", "ground_truth": "        setTransactionSuccessful()\r\n    } finally {\r\n        endTransaction()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun dateTimeFromString(value: String?): ZonedDateTime? {\r\n        var dt: ZonedDateTime? = null\r\n        if (value != null) {\r\n            try {\r\n                dt = ZonedDateTime.parse(value)", "choices": [{"text": "\n            } catch (e) {\r\n                dt = null\r\n            }\r\n        }\r\n        return dt\r\n    }"}], "metadata": {"task_id": "Feeder/122", "ground_truth": "            } catch (_: Throwable) {\r\n            }\r\n        }\r\n        return dt\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\Converters.kt"}}
{"prompt": "fun estimateWordCount(plainText: String): Int {\r\n    val charCount = plainText.length.toFloat()\r\n    val wordCount = plainText.splitToSequence(patternWhitespace).count()\r\n\r\n    // Calculate average length of chars between spaces\r\n    // A typical value for english is 5-7\r\n    // A typical value for japanese is 50-80\r\n    return if (charCount / wordCount < 15.0) {", "choices": [{"text": "\n        wordCount = 5.0\r\n    } else {\r\n        wordCount = 50.0\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/125", "ground_truth": "        wordCount\r\n    } else {\r\n        0\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\FeedItem.kt"}}
{"prompt": "import androidx.room.Transaction\n @Transaction\r\n    suspend fun replaceRemoteFeedsWith(remoteFeeds: List<RemoteFeed>) {", "choices": [{"text": "(remoteFeeds: List<RemoteFeed>) {\r\n        this.remoteFeeds = remoteFeeds;\r\n    }"}], "metadata": {"task_id": "Feeder/126", "ground_truth": "        deleteAllRemoteFeeds()\r\n        for (remoteFeed in remoteFeeds) {\r\n            insert(remoteFeed)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\RemoteFeedDao.kt"}}
{"prompt": "import androidx.room.Transaction\n @Transaction\r\n    suspend fun replaceDevices(devices: List<SyncDevice>) {", "choices": [{"text": "\n        for (SyncDevice device : devices) {\n            device.replaceDevices(devices);\n        }\n    }"}], "metadata": {"task_id": "Feeder/127", "ground_truth": "        deleteAll()\r\n        devices.forEach {\r\n            insert(it)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\SyncDeviceDao.kt"}}
{"prompt": "import java.util.Locale\nimport android.os.Build\nfun generateDeviceName(): String {\r\n    val manufacturer = Build.MANUFACTURER ?: \"\"\r\n    val model = Build.MODEL ?: \"\"\r\n\r\n    return if (model.startsWith(manufacturer, ignoreCase = true)) {\r\n        model\r\n    } else {\r\n        \"$manufacturer $model\"\r\n    }.replaceFirstChar {\r\n        if (it.isLowerCase()) {\r\n            it.titlecase(\r\n                Locale.getDefault(),\r\n            )", "choices": [{"text": "\n        } else {\r\n            it.titlecase(\r\n                Locale.getDefault(),\r\n            )\r\n        }\r\n    }.replaceFirstChar {\r\n        it.titlecase(\r\n            Locale.getDefault(),\r\n        )\r\n    }.replaceFirstChar {\r\n        it.titlecase(\r\n            Locale.getDefault(),\r\n        )\r\n    }.replaceFirstChar {\r\n        it.titlecase(\r\n            Locale.getDefault(),\r\n        )\r\n    }.replaceFirstChar {\r\n       "}], "metadata": {"task_id": "Feeder/128", "ground_truth": "        } else {\r\n            it.toString()\r\n        }\r\n    }.ifBlank { \"${Random.nextInt(100_000)}\" }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\SyncRemote.kt"}}
{"prompt": "import com.nononsenseapps.feeder.model.gofeed.GoPerson\nprivate fun GoPerson.asParsedAuthor() =", "choices": [{"text": "\n    new GoPerson()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   .asParsedAuthor()\n   ."}], "metadata": {"task_id": "Feeder/138", "ground_truth": "    ParsedAuthor(\r\n        name = name,\r\n        url = null,\r\n        avatar = null\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\FeedParser.kt"}}
{"prompt": "suspend fun SequenceScope<String>.recursiveExtensionMediaDescription(extension: GoExtension) {\r\n    if (extension.name.equals(\"description\", ignoreCase = true)) {\r\n        extension.value?.let { value ->\r\n            yield(value)\r\n        }\r\n    }\r\n\r\n    extension.children?.entries?.forEach { (_, value) ->", "choices": [{"text": "\n        yield(value)\r\n    }\r\n\r\n    extension.children?.entries?.forEach { (_, value) ->\r\n        yield(value)\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/143", "ground_truth": "        value.forEach { extension ->\r\n            recursiveExtensionMediaDescription(extension)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\gofeed\\GoFeedExtensions.kt"}}
{"prompt": "import java.net.URL\nprivate fun pointsToImage(url: String): Boolean {\r\n    return try {\r\n        val u = URL(url)\r\n\r\n        u.path.endsWith(\".jpg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".jpeg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".gif\", ignoreCase = true) ||\r\n            u.path.endsWith(\".png\", ignoreCase = true) ||", "choices": [{"text": "\n            u.path.endsWith(\".jpg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".jpeg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".gif\", ignoreCase = true) ||\r\n            u.path.endsWith(\".png\", ignoreCase = true) ||\r\n            u.path.endsWith(\".jpg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".jpeg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".gif\", ignoreCase = true) ||\r\n           "}], "metadata": {"task_id": "Feeder/144", "ground_truth": "            u.path.endsWith(\".webp\", ignoreCase = true)\r\n    } catch (_: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\gofeed\\GoFeedExtensions.kt"}}
{"prompt": "import kotlinx.coroutines.flow.first\noverride suspend fun saveBlocklistPatterns(patterns: Iterable<String>) {\r\n        val existingPatterns = settingsStore.blockListPreference.first()\r\n\r\n        patterns.asSequence()\r\n            .filterNot { it.isBlank() }\r\n            .filterNot { it in existingPatterns }", "choices": [{"text": "\n           .filterNot { it in existingPatterns }\r\n           .filterNot { it in settingsStore.blockListPreference.last() }\r\n           .filterNot { it in settingsStore.blockListPreference.first() }\r\n           .filterNot { it in settingsStore.blockListPreference.last() }\r\n           .filterNot { it in settingsStore.blockListPreference.first() }\r\n           .filterNot { it in settingsStore.blockListPreference.last() }\r\n           .filterNot { it in settingsStore.blockListPreference.first() }\r\n           "}], "metadata": {"task_id": "Feeder/147", "ground_truth": "            .distinct()\r\n            .forEach {\r\n                settingsStore.addBlocklistPattern(it)\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OPMLImporter.kt"}}
{"prompt": "import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readOpml() {\r\n        parser.require(XmlPullParser.START_TAG, null, TAG_OPML)\r\n        while (parser.next() != XmlPullParser.END_TAG) {\r\n            if (parser.eventType != XmlPullParser.START_TAG) {\r\n                continue\r\n            }\r\n            // Starts by looking for the entry tag.\r\n            if (parser.name == TAG_BODY) {\r\n                readBody()", "choices": [{"text": "\n            }\r\n        }\r\n    }\r\n    private fun readBody() {\r\n        parser.require(XmlPullParser.END_TAG, null, TAG_BODY)\r\n        while (parser.next()!= XmlPullParser.END_TAG) {\r\n            if (parser.eventType!= XmlPullParser.START_TAG) {\r\n                continue\r\n            }\r\n            // Starts by looking for the body tag.\r\n            if (parser.name == TAG_BODY) {\r\n                readBody()\r\n            }\r\n        }\r"}], "metadata": {"task_id": "Feeder/148", "ground_truth": "            } else {\r\n                skip()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readSetting() {\r\n        parser.require(XmlPullParser.START_TAG, OPML_FEEDER_NAMESPACE, TAG_SETTING)\r\n\r\n        val key by this\r\n        val value by this\r\n\r\n        key?.let { key ->\r\n            value?.let { value ->\r\n                settings[key] = unescape(value)", "choices": [{"text": "\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/149", "ground_truth": "            }\r\n        }\r\n\r\n        skip()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readBlocked() {\r\n        parser.require(XmlPullParser.START_TAG, OPML_FEEDER_NAMESPACE, TAG_BLOCKED)\r\n\r\n        val pattern by this\r\n\r\n        pattern?.let { pattern ->\r\n            blockList.add(\r\n                unescape(pattern),", "choices": [{"text": "\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n                unescape(pattern),\r\n               "}], "metadata": {"task_id": "Feeder/150", "ground_truth": "            )\r\n        }\r\n\r\n        skip()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "import java.io.OutputStream\nimport java.io.FileOutputStream\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.nononsenseapps.feeder.db.room.Feed\nsuspend fun writeFile(\r\n    path: String,\r\n    settings: Map<String, String>,\r\n    blockedPatterns: List<String>,\r\n    tags: Iterable<String>,\r\n    feedsWithTag: suspend (String) -> Iterable<Feed>,\r\n) {\r\n    withContext(Dispatchers.IO) {\r\n        writeOutputStream(\r\n            os = FileOutputStream(path),\r\n            settings = settings,\r\n            blockedPatterns = blockedPatterns,", "choices": [{"text": "\n            tags = tags,\r\n            feedsWithTag = feedsWithTag,\r\n        )\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/153", "ground_truth": "            tags = tags,\r\n            feedsWithTag = feedsWithTag,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "protected suspend fun <T : Element> initTag(\r\n        tag: T,\r\n        init: suspend T.() -> Unit,", "choices": [{"text": "\n        init: suspend T.() -> Unit,\r\n    )\r\n\r\n    assertThat(tag).isEqualTo(T)\r\n    assertThat(init).isEqualTo(T)\r\n    assertThat(tag).isEqualTo(T)\r\n    assertThat(tag).isEqualTo(T)\r\n    assertThat(tag).isEqualTo(T)\r\n    assertThat(tag).isEqualTo(T)\r\n    assertThat(tag).isEqualTo(T)\r\n    assertThat(tag).isEqualTo(T"}], "metadata": {"task_id": "Feeder/157", "ground_truth": "    ): T {\r\n        tag.init()\r\n        children.add(tag)\r\n        return tag\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "suspend fun outline(\r\n        title: String,\r\n        text: String = title,\r\n        type: String? = null,\r\n        xmlUrl: String? = null,\r\n        init: suspend Outline.() -> Unit,\r\n    ) {\r\n        val o = initTag(Outline(), init)\r\n        o.title = title\r\n        o.text = text\r\n        if (type != null) {\r\n            o.type = type", "choices": [{"text": "\n        }\r\n        if (xmlUrl!= null) {\r\n            o.xmlUrl = xmlUrl\r\n        }\r\n        return o\r\n    }"}], "metadata": {"task_id": "Feeder/161", "ground_truth": "        }\r\n        if (xmlUrl != null) {\r\n            o.xmlUrl = xmlUrl\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "import java.net.URI\nfun String?.host(): String? {\r\n    val l: String? = this\r\n    if (l != null) {\r\n        try {\r\n            return URI(l).host", "choices": [{"text": "\n        } catch (e) {\r\n            return null\r\n        }\r\n    } else {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/163", "ground_truth": "        } catch (_: Throwable) {\r\n        }\r\n    }\r\n    return null\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\PreviewItem.kt"}}
{"prompt": "import androidx.compose.ui.text.AnnotatedString\nfun tts(\r\n        textArray: List<AnnotatedString>,\r\n        useDetectLanguage: Boolean,\r\n    ) {\r\n        this.useDetectLanguage = useDetectLanguage\r\n//        val textArray = fullText.split(*PUNCTUATION)\r\n        for (text in textArray) {\r\n            if (text.isBlank()) {\r\n                continue", "choices": [{"text": "\n            }\r\n            if (text.isEmpty()) {\r\n                continue\r\n            }\r\n            if (text.startsWith(\"@\")) {\r\n                continue\r\n            }\r\n            if (text.endsWith(\"@\")) {\r\n                continue\r\n            }\r\n            if (text.startsWith(\"#\")) {\r\n                continue\r\n            }\r\n            if (text.endsWith(\"#\")) {\r\n                continue\r\n            }\r\n            if (text.startsWith(\"#\")) {\r\n                continue\r\n            }\r"}], "metadata": {"task_id": "Feeder/164", "ground_truth": "            }\r\n            textToSpeechQueue.add(text)\r\n        }\r\n        play()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nfun skipNext() {\r\n        coroutineScope.launch {\r\n            startJob?.cancel()\r\n            textToSpeech?.stop()\r\n            startJob?.join()\r\n            textToSpeechQueue.removeFirstOrNull()\r\n            when (textToSpeechQueue.isEmpty()) {", "choices": [{"text": "\n                textToSpeechQueue.addFirstOrNull()\r\n            } else {\r\n                textToSpeechQueue.removeFirstOrNull()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/167", "ground_truth": "                true -> stop()\r\n                false -> play()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "import java.util.Locale\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nvar useDetectLanguage Boolean\nvar textToSpeech TextToSpeech?\nvar initializedState Int?\nfun setLanguage(lang: LocaleOverride) {\r\n        coroutineScope.launch {\r\n            startJob?.cancel()\r\n            textToSpeech?.stop()", "choices": [{"text": "\n            textToSpeech?.setLanguage(lang)\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/168", "ground_truth": "            startJob?.join()\r\n            _lang.update { lang }\r\n            play()\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "import java.util.Locale\nimport com.nononsenseapps.feeder.R\nimport android.os.Build\nimport android.content.Context\nfun Context.getLocales(): Sequence<Locale> =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        sequence {\r\n            val locales = resources.configuration.locales\r\n\r\n            for (i in 0 until locales.size()) {\r\n                yield(locales[i])\r\n            }", "choices": [{"text": "\n            for (i in 0 until locales.size()) {\r\n                yield(locales[i])\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/170", "ground_truth": "        }\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        sequenceOf(resources.configuration.locale)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "import kotlin.math.max\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.nononsenseapps.feeder.util.logDebug\nimport com.nononsenseapps.feeder.db.room.ID_UNSET\nimport com.nononsenseapps.feeder.db.room.FeedItem\nimport com.nononsenseapps.feeder.db.room.Feed\nsuspend fun syncFeeds(\r\n        feedId: Long = ID_UNSET,\r\n        feedTag: String = \"\",\r\n        forceNetwork: Boolean = false,\r\n        minFeedAgeMinutes: Int = 5,\r\n    ): Boolean {\r\n        logDebug(LOG_TAG, \"${Thread.currentThread().name}: Taking sync mutex\")\r\n        return syncMutex.withLock {\r\n            withContext(singleThreadedSync) {\r\n                syncFeeds(\r\n                    feedId = feedId,\r\n                    feedTag = feedTag,\r\n                    maxFeedItemCount = repository.maximumCountPerFeed.value,\r\n                    forceNetwork = forceNetwork,", "choices": [{"text": "\n                    minFeedAgeMinutes = minFeedAgeMinutes,\r\n                )\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/171", "ground_truth": "                    minFeedAgeMinutes = minFeedAgeMinutes,\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssLocalSync.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nimport com.nononsenseapps.feeder.db.room.FeedItemDao\nimport android.content.Context\n\r\n@OptIn(DelicateCoroutinesApi::class)\r\nprivate fun markAsNotified(\r\n    context: Context,\r\n    feedItemDao: FeedItemDao,\r\n    itemIds: LongArray?,\r\n) {\r\n    if (itemIds != null) {\r\n        GlobalScope.launch(Dispatchers.Default) {\r\n            val idList = itemIds.toList()", "choices": [{"text": "\n            feedItemDao.markAsNotified(context, idList)\r\n        }\r\n    } else {\r\n        GlobalScope.launch(Dispatchers.Default) {\r\n            feedItemDao.markAsNotified(context)\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/173", "ground_truth": "            feedItemDao.markAsNotified(idList)\r\n            cancelNotifications(context, idList)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotificationBroadcastReceiver.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.nononsenseapps.feeder.util.notificationManager\nimport com.nononsenseapps.feeder.R\nimport androidx.core.content.ContextCompat\nimport android.content.pm.PackageManager\nimport android.content.Context\nimport android.app.Notification\nimport android.Manifest\nsuspend fun cancelNotifications(\r\n    context: Context,\r\n    feedItemIds: List<Long>,\r\n) = withContext(Dispatchers.Default) {\r\n    if (ContextCompat.checkSelfPermission(\r\n            context,\r\n            Manifest.permission.POST_NOTIFICATIONS,\r\n        ) != PackageManager.PERMISSION_GRANTED\r\n    ) {\r\n        return@withContext\r\n    }\r\n\r\n    val nm = context.notificationManager\r\n\r\n    for (feedItemId in feedItemIds) {\r\n        nm.cancel(feedItemId.toInt())\r\n    }", "choices": [{"text": "\n    notificationManager.cancel(feedItemId.toInt())\r\n}"}], "metadata": {"task_id": "Feeder/174", "ground_truth": "\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\r\n        notify(context)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.URI_FEEDITEMS\nimport com.nononsenseapps.feeder.db.COL_LINK\nimport com.nononsenseapps.feeder.R\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\ninternal fun getOpenInDefaultActivityIntent(\r\n    context: Context,\r\n    feedItemId: Long,\r\n    link: String? = null,\r\n): Intent =\r\n    Intent(\r\n        Intent.ACTION_VIEW,\r\n        // Important to keep the URI different so PendingIntents don't collide\r\n        URI_FEEDITEMS.buildUpon().appendPath(\"$feedItemId\").also {\r\n            if (link != null) {\r\n                it.appendQueryParameter(COL_LINK, link)", "choices": [{"text": "\n            } else {\r\n                it.appendQueryParameter(COL_LINK, null)\r\n            }\r\n        }\r\n    )\r\n   .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n   .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)\r\n   .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)\r\n   .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n   .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n   "}], "metadata": {"task_id": "Feeder/176", "ground_truth": "            }\r\n        }.build(),\r\n        context,\r\n        OpenLinkInDefaultActivity::class.java,\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.room.FeedItemWithFeed\nimport com.nononsenseapps.feeder.R\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\nimport android.app.Notification\nprivate fun getDeleteIntent(\r\n    context: Context,\r\n    feedItems: List<FeedItemWithFeed>,\r\n): PendingIntent {\r\n    val intent = Intent(context, RssNotificationBroadcastReceiver::class.java)\r\n    intent.action = ACTION_MARK_AS_NOTIFIED\r\n\r\n    val ids = LongArray(feedItems.size) { i -> feedItems[i].id }\r\n    intent.putExtra(EXTRA_FEEDITEM_ID_ARRAY, ids)\r\n\r\n    return PendingIntent.getBroadcast(\r\n        context,", "choices": [{"text": "        intent,\r\n        0,\r\n        PendingIntent.FLAG_UPDATE_CURRENT\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/178", "ground_truth": "        0,\r\n        intent,\r\n        PendingIntent.FLAG_UPDATE_CURRENT or FLAG_IMMUTABLE,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.room.FeedItemWithFeed\nimport com.nononsenseapps.feeder.db.URI_FEEDITEMS\nimport com.nononsenseapps.feeder.R\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nimport android.app.Notification\ninternal fun getDeleteIntent(\r\n    context: Context,\r\n    feedItem: FeedItemWithFeed,\r\n): Intent {\r\n    val intent = Intent(context, RssNotificationBroadcastReceiver::class.java)\r\n    intent.action = ACTION_MARK_AS_NOTIFIED\r\n    intent.data = Uri.withAppendedPath(URI_FEEDITEMS, \"${feedItem.id}\")", "choices": [{"text": "\n    intent.putExtra(RssNotificationBroadcastReceiver.EXTRA_FEED_ITEM_ID, feedItem.id)\r\n    intent.putExtra(RssNotificationBroadcastReceiver.EXTRA_FEED_ITEM_NAME, feedItem.name)\r\n    intent.putExtra(RssNotificationBroadcastReceiver.EXTRA_FEED_ITEM_TYPE, feedItem.type)\r\n    return intent\r\n}"}], "metadata": {"task_id": "Feeder/179", "ground_truth": "    val ids: LongArray = longArrayOf(feedItem.id)\r\n    intent.putExtra(EXTRA_FEEDITEM_ID_ARRAY, ids)\r\n\r\n    return intent\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "import kotlinx.coroutines.cancel\nimport com.nononsenseapps.feeder.model.summaryNotificationId\nimport com.nononsenseapps.feeder.model.cancelNotification\ninternal suspend fun unNotifyForMissingItems(\r\n        prev: List<Long>,\r\n        current: List<Long>,\r\n    ) {\r\n        if (current.isEmpty()) {\r\n            cancelNotification(summaryNotificationId.toLong())\r\n        }\r\n        prev.filter {", "choices": [{"text": "\n            cancelNotification(summaryNotificationId.toLong())\r\n        }\r\n        current.filter {\r\n            cancelNotification(summaryNotificationId.toLong())\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/192", "ground_truth": "            it !in current\r\n        }.forEach {\r\n            cancelNotification(it)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\notifications\\NotificationsWorker.kt"}}
{"prompt": "import android.content.Intent\nimport android.app.Activity\nfun Activity.onNavigateUpFromIntentActivities() {\r\n    startActivity(\r\n        Intent(\r\n            this,", "choices": [{"text": ",\r\n            \"onNavigateUpFromIntentActivities\",\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,"}], "metadata": {"task_id": "Feeder/197", "ground_truth": "            MainActivity::class.java,\r\n        ),\r\n    )\r\n    finish()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\AddFeedFromShareActivity.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewAutoCompleteOutlinedText() {\r\n    AutoCompleteResults(\r\n        displaySuggestions = true,\r\n        suggestions = immutableListHolderOf(\"One\", \"Two\", \"Three\"),\r\n        onSuggestionClicked = {},\r\n        suggestionContent = {\r\n            Text(text = it)", "choices": [{"text": "\n        }\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/204", "ground_truth": "        },\r\n    ) {\r\n        OutlinedTextField(value = \"Testing\", onValueChange = {})\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\components\\AutoCompleteText.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@Preview\r\nprivate fun Preview() =\r\n    DeleteFeedDialog(\r\n        feeds =\r\n            immutableListHolderOf(\r\n                DeletableFeed(1, \"A Feed\"),", "choices": [{"text": "\r\n                DeletableFeed(2, \"A Feed\"),\r\n                DeletableFeed(3, \"A Feed\"),\r\n                DeletableFeed(4, \"A Feed\"),\r\n                DeletableFeed(5, \"A Feed\"),\r\n                DeletableFeed(6, \"A Feed\"),\r\n                DeletableFeed(7, \"A Feed\"),\r\n                DeletableFeed(8, \"A Feed\"),\r\n                DeletableFeed(9, \"A Feed\"),\r\n                DeletableFeed(10, \"A Feed\"),\r"}], "metadata": {"task_id": "Feeder/206", "ground_truth": "                DeletableFeed(2, \"Another Feed\"),\r\n            ),\r\n        onDismiss = {},\r\n        onDelete = {},\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\deletefeed\\DeleteFeedScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Edit Feed Phone\")\r\n@Composable\r\nprivate fun PreviewEditFeedScreenPhone() {\r\n    FeederTheme {\r\n        EditFeedScreen(\r\n            screenType = ScreenType.SINGLE,\r\n            onNavigateUp = {},\r\n            onOk = {},", "choices": [{"text": "\n            onCancel = {}\r\n        )\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/207", "ground_truth": "            onCancel = {},\r\n            viewState = EditFeedScreenState(),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Edit Feed Foldable\", device = Devices.FOLDABLE)\r\n@Preview(\"Edit Feed Tablet\", device = Devices.PIXEL_C)\r\n@Composable\r\nprivate fun PreviewEditFeedScreenLarge() {\r\n    FeederTheme {\r\n        EditFeedScreen(\r\n            screenType = ScreenType.DUAL,\r\n            onNavigateUp = {},\r\n            onOk = {},", "choices": [{"text": "\n            onCancel = {},\r\n        ),\r\n        EditFeedScreen(\r\n            screenType = ScreenType.MEDIUM,\r\n            onNavigateUp = {},\r\n            onOk = {},\r\n            onCancel = {},\r\n        ),\r\n        EditFeedScreen(\r\n            screenType = ScreenType.LARGE,\r\n            onNavigateUp = {},\r\n            onOk = {},\r\n            onCancel = {},\r\n        ),\r\n        EditFeedScreen(\r\n            screenType = ScreenType.LARGE,\r\n            on"}], "metadata": {"task_id": "Feeder/208", "ground_truth": "            onCancel = {},\r\n            viewState = EditFeedScreenState(),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreen.kt"}}
{"prompt": "import java.net.URL\ninternal fun isValidUrl(value: String): Boolean {\r\n    return try {\r\n        URL(value)", "choices": [{"text": "\n    } catch (e) {\r\n        return false\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/209", "ground_truth": "        true\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreenViewModel.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport android.content.res.Configuration\n\r\n@Preview(\r\n    name = \"Nothing to read day\",\r\n    uiMode = Configuration.UI_MODE_NIGHT_NO,\r\n)\r\n@Preview(\r\n    name = \"Nothing to read night\",\r\n    uiMode = Configuration.UI_MODE_NIGHT_YES,\r\n)\r\n@Composable\r\nprivate fun PreviewNothingToRead() {\r\n    FeederTheme {", "choices": [{"text": "\n        super.previewNothingToRead()\r\n    }\r\n\r\n    FeederTheme {\r\n        super.previewNothingToRead()\r\n    }\r\n\r\n    FeederTheme {\r\n        super.previewNothingToRead()\r\n    }\r\n\r\n    FeederTheme {\r\n        super.previewNothingToRead()\r\n    }\r\n\r\n    FeederTheme {\r\n        super.previewNothingToRead()\r\n    }\r\n\r\n    FeederTheme {\r\n        super.previewNothingToRead()\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/210", "ground_truth": "        Surface {\r\n            NothingToRead()\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\empty\\NothingToRead.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport com.nononsenseapps.feeder.ui.compose.utils.ThemePreviews\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.ui.compose.deletefeed.DeletableFeed\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@ThemePreviews\r\nprivate fun Preview() {\r\n    FeederTheme {\r\n        EditFeedDialog(\r\n            feeds =\r\n                immutableListHolderOf(\r\n                    DeletableFeed(1, \"A Feed\"),\r\n                    DeletableFeed(2, \"Another Feed\"),", "choices": [{"text": "\n                    DeletableFeed(3, \"Another Feed\"),\r\n                    DeletableFeed(4, \"Another Feed\"),\r\n                    DeletableFeed(5, \"Another Feed\"),\r\n                    DeletableFeed(6, \"Another Feed\"),\r\n                    DeletableFeed(7, \"Another Feed\"),\r\n                    DeletableFeed(8, \"Another Feed\"),\r\n                    DeletableFeed(9, \"Another Feed\"),\r\n                    DeletableFeed(10, \"Another Feed\"),\r\n                    DeletableFeed(11,"}], "metadata": {"task_id": "Feeder/211", "ground_truth": "                ),\r\n            onDismiss = {},\r\n        ) {}\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\EditFeedDialog.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.outlined.Circle\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun FeedItemNewIndicator(\r\n    size: Dp,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(modifier = modifier) {\r\n        Icon(\r\n            Icons.Outlined.Circle,\r\n            contentDescription = stringResource(id = R.string.unread_adjective),\r\n            modifier =\r\n                Modifier", "choices": [{"text": "(\r\n                    size = size,\r\n                    icon = Icons.Outlined.Circle,\r\n                ),\r\n        )\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/214", "ground_truth": "                    .size(size),\r\n            tint = MaterialTheme.colorScheme.primary,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun FeedItemSavedIndicator(\r\n    size: Dp,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier = modifier,\r\n    ) {\r\n        Icon(\r\n            Icons.Default.Star,\r\n            contentDescription = stringResource(id = R.string.saved_article),\r\n            modifier =\r\n                Modifier", "choices": [{"text": ",\r\n        ) {\r\n            size = size,\r\n        }\r\n    }\r\n    return Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier = modifier,\r\n    ) {\r\n        Icon(\r\n            Icons.Default.Star,\r\n            contentDescription = stringResource(id = R.string.saved_article),\r\n            modifier =\r\n                Modifier,\r\n        ) {\r\n            size = size,\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/215", "ground_truth": "                    .size(size),\r\n            tint = MaterialTheme.colorScheme.primary,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(\"Light\")\r\n@Composable\r\nprivate fun PreviewLightFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.DAY) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                        .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    FeedItemSavedIndicator(size = 8.dp)", "choices": [{"text": "\n                }\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/216", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(\"Dark\")\r\n@Composable\r\nprivate fun PreviewDarkFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.NIGHT) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                        .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    FeedItemSavedIndicator(size = 8.dp)", "choices": [{"text": "\n                }\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/217", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "import androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.rememberTooltipState\nimport androidx.compose.material3.TooltipDefaults\nimport androidx.compose.material3.TooltipBox\nimport androidx.compose.material3.PlainTooltip\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.Box\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun PlainTooltipBox(\r\n    tooltip: @Composable () -> Unit,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    TooltipBox(\r\n        positionProvider = TooltipDefaults.rememberPlainTooltipPositionProvider(),\r\n        state = rememberTooltipState(),\r\n        tooltip = {\r\n            PlainTooltip {\r\n                tooltip()", "choices": [{"text": "\n            },\r\n            Content {\r\n                content()\r\n            }\r\n        }\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/218", "ground_truth": "            }\r\n        },\r\n        content = content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.feed.FeedOrTag\nimport com.nononsenseapps.feeder.model.workmanager.requestFeedSync\nfun requestImmediateSyncOfCurrentFeedOrTag() {\r\n        val (feedId, feedTag) = repository.currentFeedAndTag.value\r\n        requestFeedSync(\r\n            di = di,", "choices": [{"text": "\n            feedId = feedId,\r\n            feedTag = feedTag\r\n        )\r\n    }"}], "metadata": {"task_id": "Feeder/227", "ground_truth": "            feedId = feedId,\r\n            feedTag = feedTag,\r\n            forceNetwork = true,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "val articleFeedUrl String?\nval feedDisplayTitle String\nval feedScreenTitle ScreenTitle\n fun requestImmediateSyncOfAll() {", "choices": [{"text": "\n    let url = articleFeedUrl\n    let displayTitle = feedDisplayTitle\n    let screenTitle = feedScreenTitle\n\n    fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n   .then(res => res.json())\n   .then(res => res.text())\n   .then(res => res.text())\n   .then(res => res.text())\n   .then(res => res.text())\n   .then(res =>"}], "metadata": {"task_id": "Feeder/228", "ground_truth": "        requestFeedSync(\r\n            di = di,\r\n            forceNetwork = true,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "val articleId Long\nval articleLink String?\nval articleTitle String", "choices": [{"text": "\nval articleDescription String?\nval articleAuthor String?\nval articleAuthorEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmailEmail String?\nval articleAuthorEmail"}], "metadata": {"task_id": "Feeder/233", "ground_truth": "override fun onCleared() {\r\n        super.onCleared()\r\n        ttsStateHolder.shutdown()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.PermanentNavigationDrawer\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.Row\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun PermanentNavigationDrawer(\r\n    drawerContent: @Composable () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    Row(modifier.fillMaxSize()) {\r\n        drawerContent()", "choices": [{"text": "\n    }\r\n    Row(modifier.fillMaxSize()) {\r\n        content()\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/236", "ground_truth": "        Box {\r\n            content()\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun ModalDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = DrawerDefaults.shape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.ModalDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier,\r\n        drawerShape,\r\n        drawerContainerColor,", "choices": [{"text": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/237", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun DismissibleDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = RectangleShape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.DismissibleDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier,\r\n        drawerShape,\r\n        drawerContainerColor,", "choices": [{"text": "\n        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/238", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.paneTitle\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun PermanentDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = RectangleShape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.PermanentDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    val navigationMenu = getString(Strings.NavigationMenu)\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier.semantics {\r\n            paneTitle = navigationMenu\r\n        },\r\n        drawerShape,\r\n        drawerContainerColor,", "choices": [{"text": "\n        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/239", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "import kotlin.math.abs\nimport com.nononsenseapps.feeder.ui.compose.material3.SwipeableDefaults.AnimationSpec\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.runtime.State\nimport androidx.compose.foundation.gestures.draggable\nimport androidx.compose.animation.core.AnimationSpec\nimport androidx.compose.animation.core.Animatable\nprivate suspend fun animateInternalToOffset(\r\n        target: Float,\r\n        spec: AnimationSpec<Float>,\r\n    ) {\r\n        draggableState.drag {\r\n            var prevValue = absoluteOffset.value\r\n            animationTarget.value = target\r\n            isAnimationRunning = true\r\n            try {\r\n                Animatable(prevValue).animateTo(target, spec) {\r\n                    dragBy(this.value - prevValue)\r\n                    prevValue = this.value\r\n                }\r\n            } finally {", "choices": [{"text": "\n                isAnimationRunning = false\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/246", "ground_truth": "                animationTarget.value = null\r\n                isAnimationRunning = false\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "import kotlinx.coroutines.flow.Flow\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.runtime.getValue\nimport androidx.compose.material3.ExperimentalMaterial3Api\n @ExperimentalMaterial3Api\r\n    internal suspend fun snapTo(targetValue: T) {\r\n        latestNonEmptyAnchorsFlow.collect { anchors ->\r\n            val targetOffset = anchors.getOffset(targetValue)\r\n            requireNotNull(targetOffset) {\r\n                \"The target value must have an associated anchor.\"", "choices": [{"text": "\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/247", "ground_truth": "            }\r\n            snapInternalToOffset(targetOffset)\r\n            currentValue = targetValue\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) return true\r\n        if (other !is SwipeProgress<*>) return false\r\n\r\n        if (from != other.from) return false", "choices": [{"text": "_from\r\n        if (to!= other.to) return false\r\n\r\n        return true\r\n}"}], "metadata": {"task_id": "Feeder/250", "ground_truth": "        if (to != other.to) return false\r\n        if (fraction != other.fraction) return false\r\n\r\n        return true\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.material3.SwipeableDefaults.AnimationSpec\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.saveable.Saver\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.animation.core.AnimationSpec\n\r\n@Composable\r\n@ExperimentalMaterial3Api\r\ninternal fun <T : Any> rememberSwipeableState(\r\n    initialValue: T,\r\n    animationSpec: AnimationSpec<Float> = AnimationSpec,\r\n    confirmStateChange: (newValue: T) -> Boolean = { true },\r\n): SwipeableState<T> {\r\n    return rememberSaveable(\r\n        saver =\r\n            SwipeableState.Saver(\r\n                animationSpec = animationSpec,\r\n                confirmStateChange = confirmStateChange,\r\n            ),\r\n    ) {\r\n        SwipeableState(\r\n            initialValue = initialValue,", "choices": [{"text": "\n            animationSpec = animationSpec,\r\n            confirmStateChange = confirmStateChange,\r\n        );\r\n    };\r\n}"}], "metadata": {"task_id": "Feeder/252", "ground_truth": "            animationSpec = animationSpec,\r\n            confirmStateChange = confirmStateChange,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.Icons\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun SavedArticles(\r\n    title: String = \"Bar\",\r\n    unreadCount: Int = 10,\r\n    onItemClick: () -> Unit = {},\r\n) {\r\n    Feed(\r\n        title = title,\r\n        unreadCount = unreadCount,\r\n        onItemClick = onItemClick,\r\n        image = {\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,", "choices": [{"text": "\n            ),\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r\n            ),\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r\n            ),\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r\n            ),\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r\n            ),\r\n            Icon(\r\n                Icons.Default"}], "metadata": {"task_id": "Feeder/259", "ground_truth": "                modifier = Modifier.size(24.dp),\r\n            )\r\n        },\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun TopLevelFeed(\r\n    title: String = \"Foo\",\r\n    unreadCount: Int = 99,\r\n    onItemClick: () -> Unit = {},\r\n    imageUrl: String? = null,\r\n) = Feed(", "choices": [{"text": "(\r\n    title: String = \"Foo\",\r\n    unreadCount: Int = 99,\r\n    imageUrl: String = null,\r\n) = TopLevelFeed(\r\n    title: String = \"Foo\",\r\n    unreadCount: Int = 99,\r\n    imageUrl: String = null,\r\n) = TopLevelFeed(\r\n    title: String = \"Foo\",\r\n    unreadCount: Int = 99,\r\n    imageUrl: String = null,\r\n) = TopLevelFeed(\r\n    title: String = \"Foo\",\r\n"}], "metadata": {"task_id": "Feeder/260", "ground_truth": "    title = title,\r\n    imageUrl = imageUrl,\r\n    unreadCount = unreadCount,\r\n    onItemClick = onItemClick,\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun ChildFeed(\r\n    title: String = \"Foo\",\r\n    imageUrl: String? = null,\r\n    unreadCount: Int = 99,\r\n    onItemClick: () -> Unit = {},\r\n) {\r\n    Feed(\r\n        title = title,", "choices": [{"text": "\n        imageUrl = imageUrl,\r\n        unreadCount = unreadCount,\r\n        onItemClick = onItemClick,\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/261", "ground_truth": "        imageUrl = imageUrl,\r\n        unreadCount = unreadCount,\r\n        onItemClick = onItemClick,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun Placeholder() {\r\n    Box(\r\n        modifier =\r\n            Modifier", "choices": [{"text": "(\r\n                modifier =\r\n                    Modifier(\r\n                        modifier =\r\n                            Modifier(\r\n                                modifier =\r\n                                    Modifier(\r\n                                        modifier =\r\n                                            Modifier(\r\n                                                modifier =\r\n                                                    Modifier(\r\n                                                        modifier =\r\n                                                        Modifier(\r\n                                                            modifier =\r\n                                                            Modifier(\r\n                                                                modifier =\r\n                                                                Modifier(\r\n                                                            ),\r\n                                                        ),\r\n                                                    ),\r\n                                ),\r\n                            ),\r\n                        ),\r\n                   "}], "metadata": {"task_id": "Feeder/262", "ground_truth": "                .fillMaxWidth()\r\n                .height(48.dp),\r\n    ) {\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedUrl: String? = null,\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                +(\"feedUrl\" to feedUrl)\r\n            }", "choices": [{"text": "\n        navController.navigate(params)\r\n    }"}], "metadata": {"task_id": "Feeder/263", "ground_truth": "\r\n        navController.navigate(path + params) {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.searchfeed.SearchFeedScreen\nimport com.nononsenseapps.feeder.ui.compose.feed.FeedScreen\nimport com.nononsenseapps.feeder.base.diAwareViewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n @Composable\r\n    override fun RegisterScreen(\r\n        navController: NavController,\r\n        backStackEntry: NavBackStackEntry,\r\n        navDrawerListState: LazyListState,\r\n    ) {\r\n        SearchFeedScreen(\r\n            onNavigateUp = {\r\n                navController.popBackStack()\r\n            },\r\n            searchFeedViewModel = backStackEntry.diAwareViewModel(),\r\n            initialFeedUrl = backStackEntry.arguments?.getString(\"feedUrl\"),\r\n        ) {\r\n            AddFeedDestination.navigate(\r\n                navController,\r\n                feedUrl = it.url,", "choices": [{"text": "\n            )\r\n        }\r\n        FeedScreen(\r\n            onNavigateUp = {\r\n                navController.popBackStack()\r\n            },\r\n            feedViewModel = backStackEntry.diAwareViewModel(),\r\n            initialFeedUrl = backStackEntry.arguments?.getString(\"feedUrl\"),\r\n        ) {\r\n            AddFeedDestination.navigate(\r\n                navController,\r\n                feedUrl = it.url,\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/264", "ground_truth": "                feedTitle = it.title,\r\n                feedImage = it.feedImage,\r\n            )\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedUrl: String,\r\n        feedTitle: String = \"\",\r\n        feedImage: String = \"\",\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                +(\"feedTitle\" to feedTitle)\r\n                +(\"feedImage\" to feedImage)\r\n            }", "choices": [{"text": "\n        navController.navigate(feedUrl, params)\r\n    }"}], "metadata": {"task_id": "Feeder/265", "ground_truth": "\r\n        navController.navigate(\"$path/${feedUrl.urlEncode()}$params\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedId: Long,", "choices": [{"text": "        title: String,\r\n        description: String\r\n    ) {\r\n        navController.navigate(feedId, title, description)\r\n    }"}], "metadata": {"task_id": "Feeder/267", "ground_truth": "    ) {\r\n        navController.navigate(\"$path/$feedId\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        itemId: Long,", "choices": [{"text": ",\r\n        title: String,\r\n        description: String,\r\n        icon: String,\r\n    ) {\r\n        navController.navigate(url, title, description, icon);\r\n    }"}], "metadata": {"task_id": "Feeder/270", "ground_truth": "    ) {\r\n        navController.navigate(\"$path/$itemId\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        syncCode: String,\r\n        secretKey: String,\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                if (syncCode.isNotBlank()) {\r\n                    +(\"syncCode\" to syncCode)\r\n                }\r\n                if (secretKey.isNotBlank()) {\r\n                    +(\"secretKey\" to secretKey)\r\n                }\r\n            }", "choices": [{"text": "\n        navController.navigate(params)\r\n    }"}], "metadata": {"task_id": "Feeder/271", "ground_truth": "\r\n        navController.navigate(\"$path$params\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.sync.SyncScreenViewModel\nimport com.nononsenseapps.feeder.ui.compose.sync.SyncScreen\nimport com.nononsenseapps.feeder.base.diAwareViewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n @Composable\r\n    override fun RegisterScreen(\r\n        navController: NavController,\r\n        backStackEntry: NavBackStackEntry,\r\n        navDrawerListState: LazyListState,\r\n    ) {\r\n        val syncRemoteViewModel = backStackEntry.diAwareViewModel<SyncScreenViewModel>()\r\n\r\n        SyncScreen(\r\n            onNavigateUp = {\r\n                if (!navController.popBackStack()) {\r\n                    SettingsDestination.navigate(navController)", "choices": [{"text": "\n                }\r\n            },\r\n            syncRemoteViewModel,\r\n            navDrawerListState,\r\n        )\r\n    }"}], "metadata": {"task_id": "Feeder/272", "ground_truth": "                }\r\n            },\r\n            viewModel = syncRemoteViewModel,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "private fun appendIfNotEmpty(\r\n        name: String,\r\n        value: String?,\r\n    ) {\r\n        if (value?.isNotEmpty() != true) {\r\n            return\r\n        }\r\n\r\n        when {\r\n            sb.isEmpty() -> sb.append(\"?\")", "choices": [{"text": "\n            sb.append(name)\r\n            sb.append(\"=\")\r\n            sb.append(value)\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/273", "ground_truth": "            else -> sb.append(\"&\")\r\n        }\r\n\r\n        sb.append(\"$name=${value.urlEncode()}\")\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.filled.Stop\nimport androidx.compose.material.icons.filled.Pause\n\r\n@Preview\r\n@Composable\r\nprivate fun PlayerPreview() {\r\n    FeederTheme {\r\n        TTSPlayer(\r\n            currentlyPlaying = true,\r\n            onPlay = {},\r\n            onPause = {},\r\n            onStop = {},", "choices": [{"text": "\n            onPlaying = {},\r\n            onPauseing = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r\n            onPlaying = {},\r"}], "metadata": {"task_id": "Feeder/279", "ground_truth": "            onSkipNext = {},\r\n            languages = ImmutableHolder(emptyList()),\r\n        ) {}\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\readaloud\\ReadAloudPlayer.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.components.safeSemantics\nimport androidx.compose.ui.semantics.testTag\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun SearchingIndicator(modifier: Modifier = Modifier) {\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier =\r\n            modifier\r\n                .fillMaxWidth()\r\n                .safeSemantics {\r\n                    testTag = \"searchingIndicator\"", "choices": [{"text": "\n                }\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/280", "ground_truth": "                },\r\n    ) {\r\n        CircularProgressIndicator()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\searchfeed\\SearchFeedScreen.kt"}}
{"prompt": "import java.net.URL\nimport java.net.MalformedURLException\nimport com.nononsenseapps.feeder.R\nprivate fun isValidUrl(url: String): Boolean {\r\n    if (url.isBlank()) {\r\n        return false\r\n    }\r\n    return try {\r\n        try {\r\n            URL(url)\r\n            true\r\n        } catch (_: MalformedURLException) {\r\n            URL(\"http://$url\")\r\n            true", "choices": [{"text": "\n        }\r\n    } catch (_: MalformedURLException) {\r\n        URL(\"http://$url\")\r\n        true\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/281", "ground_truth": "        }\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\searchfeed\\SearchFeedScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.ProvideTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@Composable\r\nprivate fun RowScope.TitleAndSubtitle(\r\n    title: @Composable () -> Unit,\r\n    subtitle: (@Composable () -> Unit)? = null\r\n) {\r\n    Column(\r\n        modifier = Modifier.weight(1f),\r\n        verticalArrangement = Arrangement.Center\r\n    ) {\r\n        ProvideTextStyle(value = MaterialTheme.typography.titleMedium) {\r\n            title()\r\n        }\r\n        if (subtitle != null) {\r\n            Spacer(modifier = Modifier.size(2.dp))\r\n            ProvideTextStyle(value = MaterialTheme.typography.bodyMedium) {", "choices": [{"text": "\n                subtitle()\r\n            }\r\n        }\r\n    }\r\n    Row(\r\n        modifier = Modifier.weight(1f),\r\n        verticalArrangement = Arrangement.Center\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/282", "ground_truth": "                subtitle()\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Slider\nimport androidx.compose.material.Surface\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewSliderWithLabel() {\r\n    FeederTheme {\r\n        Surface {\r\n            var value by remember {\r\n                mutableStateOf(1f)\r\n            }\r\n            SliderWithLabel(\r\n                value = value,\r\n                onValueChange = { value = it },\r\n                valueToLabel = { \"%.1fx\".format(value) },\r\n                valueRange = 1f..2f,", "choices": [{"text": "\n            )\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/298", "ground_truth": "                steps = 9,\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SliderWithLabel.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewLeaveSyncChainDialog() {", "choices": [{"text": "_leaveSyncChainDialog = new PreviewLeaveSyncChainDialog();\r\n    _leaveSyncChainDialog.setCancelable(false);\r\n    _leaveSyncChainDialog.setOnCancelListener(new PreviewLeaveSyncChainDialog.OnCancelListener() {\r\n        @Override\r\n        public void onCancel() {\r\n            super.onCancel();\r\n            _leaveSyncChainDialog.cancel();\r\n        }\r\n    });\r\n    _leaveSyncChainDialog.show();\r\n}"}], "metadata": {"task_id": "Feeder/300", "ground_truth": "    LeaveSyncChainDialog(\r\n        onDismiss = {},\r\n        onOk = {},\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\LeaveSyncChainDialog.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.utils.getScreenType\nimport com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nfun getSyncScreenType(\r\n    windowSize: WindowSizeClass,\r\n    viewState: SyncScreenViewState,\r\n): SyncScreenType =\r\n    when (getScreenType(windowSize)) {\r\n        ScreenType.SINGLE -> {\r\n            when (viewState.singleScreenToShow) {\r\n                SyncScreenToShow.SETUP -> SyncScreenType.SINGLE_SETUP\r\n                SyncScreenToShow.DEVICELIST -> SyncScreenType.SINGLE_DEVICELIST\r\n                SyncScreenToShow.ADD_DEVICE -> SyncScreenType.SINGLE_ADD_DEVICE\r\n                SyncScreenToShow.JOIN -> SyncScreenType.SINGLE_JOIN", "choices": [{"text": "\n            } else {\r\n                SyncScreenToShow.SETUP -> SyncScreenType.SINGLE_SETUP\r\n                SyncScreenToShow.DEVICELIST -> SyncScreenType.SINGLE_DEVICELIST\r\n                SyncScreenToShow.ADD_DEVICE -> SyncScreenType.SINGLE_ADD_DEVICE\r\n                SyncScreenToShow.JOIN -> SyncScreenType.SINGLE_JOIN\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/301", "ground_truth": "            }\r\n        }\r\n\r\n        ScreenType.DUAL -> SyncScreenType.DUAL\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.db.room.SyncDevice\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewDeviceEntry() {\r\n    FeederTheme {\r\n        Surface {\r\n            DeviceEntry(\r\n                currentDeviceId = 77L,\r\n                device = SyncDevice(deviceId = 1L, deviceName = \"ONEPLUS A6003\"),", "choices": [{"text": "\r\n            DeviceEntry(\r\n                currentDeviceId = 77L,\r\n                device = SyncDevice(deviceId = 2L, deviceName = \"ONEPLUS A6003\"),\r\n            DeviceEntry(\r\n                currentDeviceId = 77L,\r\n                device = SyncDevice(deviceId = 3L, deviceName = \"ONEPLUS A6003\"),\r\n            DeviceEntry(\r\n                currentDeviceId = 77L,\r\n                device = SyncDevice(deviceId = 4L, deviceName = \"ONEPLUS A6003\"),\r\n            Device"}], "metadata": {"task_id": "Feeder/302", "ground_truth": "                onDelete = {},\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "import java.net.URL\nimport net.glxn.qrgen.core.scheme.Url\nimport com.nononsenseapps.feeder.ui.compose.utils.ImmutableHolder\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.activity.compose.BackHandler\n\r\n@Composable\r\nfun SyncAddNewDeviceScreen(\r\n    onNavigateUp: () -> Unit,\r\n    syncUrl: ImmutableHolder<URL>,\r\n    modifier: Modifier = Modifier,\r\n    onLeaveSyncChain: () -> Unit,\r\n) {\r\n    BackHandler(onBack = onNavigateUp)\r\n    val scrollState = rememberScrollState()\r\n\r\n    SyncScaffold(\r\n        leaveSyncVisible = false,\r\n        onNavigateUp = onNavigateUp,\r\n        onLeaveSyncChain = onLeaveSyncChain,\r\n        title = stringResource(id = R.string.add_new_device),\r\n        modifier = modifier,\r\n    ) { innerModifier ->\r\n        SyncAddNewDeviceContent(", "choices": [{"text": "\n            syncUrl,\r\n            scrollState,\r\n        )\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/303", "ground_truth": "            syncUrl = syncUrl,\r\n            modifier = innerModifier.verticalScroll(scrollState),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Scan or Enter Phone\")\r\n@Preview(\"Scan or Enter Small Tablet\", device = Devices.NEXUS_7_2013)\r\n@Composable\r\nprivate fun PreviewJoin() {\r\n    FeederTheme {\r\n        SyncJoinScreen(\r\n            onNavigateUp = {},\r\n            onJoinSyncChain = { _, _ -> },\r\n            syncCode = \"\",\r\n            onSetSyncCode = {},\r\n            onLeaveSyncChain = {},", "choices": [{"text": " { _, _ -> },\r\n            onCancelSyncChain = {},\r\n        ),\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/304", "ground_truth": "            secretKey = \"\",\r\n            onSetSecretKey = {},\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Empty Phone\")\r\n@Preview(\"Empty Small Tablet\", device = Devices.NEXUS_7_2013)\r\n@Composable\r\nprivate fun PreviewEmpty() {\r\n    FeederTheme {\r\n        SyncSetupScreen(\r\n            onNavigateUp = {},\r\n            onScanSyncCode = {},", "choices": [{"text": "\r\n            onNavigateDown = {},\r\n            onNavigateLeft = {},\r\n            onNavigateRight = {},\r\n            onNavigateUp = {},\r\n            onNavigateDown = {},\r\n            onNavigateLeft = {},\r\n            onNavigateRight = {},\r\n            onNavigateUp = {},\r\n            onNavigateDown = {},\r\n            onNavigateLeft = {},\r\n            onNavigateRight = {},\r\n            onNavigateUp = {},\r\n            onNavigateDown = {},\r\n            onNavigateLeft = {},\r"}], "metadata": {"task_id": "Feeder/305", "ground_truth": "            onStartNewSyncChain = {},\r\n            onLeaveSyncChain = {},\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "fun setSyncCode(value: String) {\r\n        val possibleUrlCode = value.syncCodeQueryParam\r\n\r\n        val syncCode =\r\n            if (possibleUrlCode.length == 64) {\r\n                possibleUrlCode\r\n            } else {\r\n                value", "choices": [{"text": "\n            }\r\n\r\n        value.syncCodeQueryParam = syncCode\r\n    }"}], "metadata": {"task_id": "Feeder/307", "ground_truth": "            }\r\n\r\n        state[\"syncCode\"] = syncCode\r\n        _syncCode.update { syncCode }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nfun leaveSyncChain() {\r\n        applicationCoroutineScope.launch {\r\n            repository.leaveSyncChain()", "choices": [{"text": "\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n            repository.leaveSyncChain()\r\n           "}], "metadata": {"task_id": "Feeder/311", "ground_truth": "            setSyncCode(\"\")\r\n            setSecretKey(\"\")\r\n            setScreen(SyncScreenToShow.SETUP)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "private fun joinedWithSyncCode(\r\n        syncCode: String,\r\n        secretKey: String,", "choices": [{"text": ",\r\n        callback: Function\r\n    ) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (syncCode === null) {\r\n            reject(new Error('syncCode is null'));\r\n            return;\r\n        }\r\n        if (secretKey === null) {\r\n            reject(new Error('secretKey is null'));\r\n            return;\r\n        }\r\n        if (callback === null) {\r\n            reject(new Error('callback is null'));\r\n            return;\r\n        }\r\n"}], "metadata": {"task_id": "Feeder/313", "ground_truth": "    ) {\r\n        setSyncCode(syncCode)\r\n        setSecretKey(secretKey)\r\n        setScreen(SyncScreenToShow.ADD_DEVICE)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\nfun pushComposableStyle(style: @Composable () -> SpanStyle): Int {\r\n        composableStyles.add(\r\n            ComposableStyleWithStartEnd(\r\n                style = style,", "choices": [{"text": "\n            ),\r\n            ComposableStyleWithStartEnd(\r\n                style = style,\r\n            ),\r\n            ComposableStyleWithStartEnd(\r\n                style = style,\r\n            ),\r\n            ComposableStyleWithStartEnd(\r\n                style = style,\r\n            ),\r\n            ComposableStyleWithStartEnd(\r\n                style = style,\r\n            ),\r\n            ComposableStyleWithStartEnd(\r\n                style = style,\r\n            ),\r\n            ComposableStyleWithStartEnd(\r\n                style"}], "metadata": {"task_id": "Feeder/314", "ground_truth": "                start = builder.length,\r\n            ),\r\n        )\r\n        return composableStyles.lastIndex\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "private fun <T> MutableList<T>.pushMaxTwo(item: T) {", "choices": [{"text": "(item: T) {\n    this.pushMaxTwo = true;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n    this.pushMaxTwo = false;\n   "}], "metadata": {"task_id": "Feeder/319", "ground_truth": "    this.add(0, item)\r\n    if (count() > 2) {\r\n        this.removeLast()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "private fun <T> List<T>.peekSecondLatest(): T? {", "choices": [{"text": "\n    if (isEmpty()) {\n        return null;\n    } else {\n        List<T> result = new ArrayList<>();\n        for (int i = 0; i < last.length; i++) {\n            result.add(last[i]);\n        }\n        return result;\n    }\n}"}], "metadata": {"task_id": "Feeder/320", "ground_truth": "    if (count() < 2) {\r\n        return null\r\n    }\r\n    return this[1]\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "val strings\nval result List<AnnotatedString>\n override fun emitParagraph(): Boolean {\r\n        // List items emit dots and non-breaking space. Don't newline after that\r\n        if (builder.isEmpty() || builder.endsWithNonBreakingSpace) {\r\n            // Nothing to emit, and nothing to reset\r\n            return false\r\n        }", "choices": [{"text": "\n        if (builder.isEmpty()) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/321", "ground_truth": "        strings.add(builder.toAnnotatedString())\r\n\r\n        resetAfterEmit()\r\n        return true\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedStringComposer.kt"}}
{"prompt": "import androidx.compose.runtime.ReadOnlyComposable\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@ReadOnlyComposable", "choices": [{"text": "\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@ReadOnlyComposable\r\n@"}], "metadata": {"task_id": "Feeder/324", "ground_truth": "fun resources(): Resources {\r\n    LocalConfiguration.current\r\n    return LocalContext.current.resources\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\Extensions.kt"}}
{"prompt": "import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun getSpanStyle(name: String?): SpanStyle? {", "choices": [{"text": "\n    SpanStyle spanStyle = null;\n    if (name!= null) {\n        spanStyle = new SpanStyle(name);\n    }\n    return spanStyle;\n}"}], "metadata": {"task_id": "Feeder/325", "ground_truth": "    return when (name) {\r\n        \"link\" -> LinkTextStyle().toSpanStyle()\r\n        else -> null\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\Extensions.kt"}}
{"prompt": "protected fun findClosestLink(): String? {\r\n        for (span in spanStack.reversed()) {\r\n            if (span is SpanWithAnnotation && span.tag == \"URL\") {", "choices": [{"text": "\n                return span.url;\r\n            }\r\n        }\r\n        return null;\r\n    }"}], "metadata": {"task_id": "Feeder/326", "ground_truth": "                return span.annotation\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "import androidx.compose.ui.text.TextStyle\ninline fun <R : Any> HtmlComposer.withTextStyle(\r\n    textStyler: TextStyler,\r\n    crossinline block: HtmlComposer.() -> R,\r\n): R {\r\n    emitParagraph()\r\n    pushTextStyle(textStyler)\r\n    return try {\r\n        block()", "choices": [{"text": "\n    } finally {\r\n        popTextStyle(textStyler)\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/327", "ground_truth": "    } finally {\r\n        emitParagraph()\r\n        popTextStyle()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "inline fun <R : Any> HtmlParser.withParagraph(crossinline block: HtmlParser.() -> R): R {", "choices": [{"text": ": HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(crossinlineblock: HtmlParser.withParagraph(cross"}], "metadata": {"task_id": "Feeder/328", "ground_truth": "    emitParagraph()\r\n    return block(this).also {\r\n        emitParagraph()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "import androidx.compose.ui.text.SpanStyle\ninline fun <R : Any> HtmlParser.withStyle(\r\n    style: SpanStyle?,\r\n    crossinline block: HtmlParser.() -> R,\r\n): R {\r\n    if (style == null) {\r\n        return block()\r\n    }\r\n\r\n    pushSpan(SpanWithStyle(style))\r\n    val index = pushStyle(style)\r\n    return try {\r\n        block()", "choices": [{"text": "\n    } finally {\r\n        popSpan(SpanWithStyle(style))\r\n        popStyle(index)\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/329", "ground_truth": "    } finally {\r\n        pop(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\ninline fun <R : Any> HtmlComposer.withComposableStyle(\r\n    noinline style: @Composable () -> SpanStyle,\r\n    crossinline block: HtmlComposer.() -> R,\r\n): R {\r\n    pushSpan(SpanWithComposableStyle(style))\r\n    val index = pushComposableStyle(style)\r\n    return try {\r\n        block()", "choices": [{"text": "\n    } finally {\r\n        popSpan()\r\n        popComposableStyle(index)\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/330", "ground_truth": "    } finally {\r\n        popComposableStyle(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "inline fun <R : Any> HtmlParser.withAnnotation(\r\n    tag: String,\r\n    annotation: String,\r\n    crossinline block: HtmlParser.() -> R,\r\n): R {\r\n    pushSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n    val index = pushStringAnnotation(tag = tag, annotation = annotation)\r\n    return try {\r\n        block()", "choices": [{"text": "\n    } finally {\r\n        popSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n        popSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n        popSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n        popSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n        popSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n        popSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/331", "ground_truth": "    } finally {\r\n        pop(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "import org.jsoup.nodes.Node\nimport org.jsoup.nodes.Element\nimport androidx.compose.ui.text.AnnotatedString\nprivate fun formatBody(\r\n    element: Element,\r\n    baseUrl: String,\r\n): List<AnnotatedString> {\r\n    val composer = AnnotatedStringComposer()\r\n\r\n    composer.appendTextChildren(\r\n        nodes = element.childNodes(),\r\n        baseUrl = baseUrl,\r\n    )", "choices": [{"text": "\n    return composer.getTextChildren()\r\n}"}], "metadata": {"task_id": "Feeder/333", "ground_truth": "\r\n    composer.emitParagraph()\r\n\r\n    return composer.result\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToAnnotatedString.kt"}}
{"prompt": "import java.io.InputStream\nimport org.jsoup.Jsoup\nimport com.nononsenseapps.feeder.ui.compose.feedarticle.ArticleItemKeyHolder\nimport androidx.compose.runtime.key\nimport androidx.compose.material3.Text\nimport androidx.compose.foundation.lazy.LazyListScope\nfun LazyListScope.htmlFormattedText(\r\n    keyHolder: ArticleItemKeyHolder,\r\n    inputStream: InputStream,\r\n    baseUrl: String,\r\n    onLinkClick: (String) -> Unit,\r\n) {\r\n    try {\r\n        Jsoup.parse(inputStream, null, baseUrl)\r\n            ?.body()\r\n            ?.let { body ->\r\n                formatBody(\r\n                    element = body,\r\n                    baseUrl = baseUrl,\r\n                    keyHolder = keyHolder,\r\n                    onLinkClick = onLinkClick,\r\n                )", "choices": [{"text": "\n            }\r\n        }\r\n    } catch (e) {\r\n        Log.e(e)\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/334", "ground_truth": "            }\r\n    } catch (e: Exception) {\r\n        Log.e(LOG_TAG, \"htmlFormattingFailed\", e)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.Element\nval hasImage Boolean\nval notHasImage Boolean\nval url String\nprivate fun Element.descendants(): Sequence<Element> {\r\n    return sequence {", "choices": [{"text": "\n        {\r\n            \"hasImage\": hasImage,\r\n            \"notHasImage\": notHasImage,\r\n            \"url\": url\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/336", "ground_truth": "        children().forEach {\r\n            recursiveSequence(it)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.Element\nprivate suspend fun SequenceScope<Element>.recursiveSequence(element: Element) {\r\n    yield(element)", "choices": [{"text": "\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n    yield(element)\r\n   "}], "metadata": {"task_id": "Feeder/337", "ground_truth": "\r\n    element.children().forEach {\r\n        recursiveSequence(it)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.Element\nprivate fun Element.notAncestorOf(tagName: String): Boolean {\r\n    var current: Element? = this\r\n\r\n    while (current != null) {\r\n        val parent = current.parent()\r\n\r\n        current =\r\n            when {\r\n                parent == null || parent.tagName() == \"#root\" -> {\r\n                    null\r\n                }\r\n\r\n                parent.tagName() == tagName -> {\r\n                    return false\r\n                }\r\n\r\n                else -> {\r\n                    parent\r\n                }", "choices": [{"text": "\n    }\r\n\r\n    return false\r\n}"}], "metadata": {"task_id": "Feeder/338", "ground_truth": "            }\r\n    }\r\n\r\n    return true\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.BoxWithConstraintsScope\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun BoxWithConstraintsScope.rememberMaxImageWidth() =\r\n    with(LocalDensity.current) {\r\n        remember {", "choices": [{"text": "_maxImageWidth = _maxImageWidth;\r\n    }\r\n    return _maxImageWidth;\r\n}"}], "metadata": {"task_id": "Feeder/340", "ground_truth": "            derivedStateOf {\r\n                maxWidth.toPx().roundToInt().coerceAtMost(2000)\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.TextNode\nimport org.jsoup.nodes.Node\nimport com.nononsenseapps.feeder.util.asUTF8Sequence\nimport androidx.compose.material3.Text\nfun TextNode.appendCorrectlyNormalizedWhiteSpace(\r\n    builder: HtmlParser,\r\n    stripLeading: Boolean,\r\n) {\r\n    wholeText.asUTF8Sequence()\r\n        .dropWhile {\r\n            stripLeading && isCollapsableWhiteSpace(it)\r\n        }\r\n        .fold(false) { lastWasWhite, char ->\r\n            if (isCollapsableWhiteSpace(char)) {\r\n                if (!lastWasWhite) {\r\n                    builder.append(' ')\r\n                }\r\n                true\r\n            } else {", "choices": [{"text": "\n                builder.append(char)\r\n            }\r\n        }\r\n    return wholeText\r\n}"}], "metadata": {"task_id": "Feeder/342", "ground_truth": "                builder.append(char)\r\n                false\r\n            }\r\n        }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import org.jsoup.nodes.TextNode\nimport org.jsoup.nodes.Node\nimport org.jsoup.nodes.Element\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.material3.Text\nfun Element.appendCorrectlyNormalizedWhiteSpaceRecursively(\r\n    builder: HtmlParser,\r\n    stripLeading: Boolean,\r\n) {\r\n    for (child in childNodes()) {\r\n        when (child) {\r\n            is TextNode -> child.appendCorrectlyNormalizedWhiteSpace(builder, stripLeading)\r\n            is Element ->\r\n                child.appendCorrectlyNormalizedWhiteSpaceRecursively(\r\n                    builder,", "choices": [{"text": "\n                    stripLeading\r\n                )\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/343", "ground_truth": "                    stripLeading,\r\n                )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "fun stripHtml(html: String): String {\r\n    val result = StringBuilder()\r\n\r\n    var skipping = false\r\n\r\n    for (char in html) {\r\n        if (!skipping) {\r\n            if (char == '<') {\r\n                skipping = true\r\n            } else {\r\n                result.append(char)\r\n            }\r\n        } else {\r\n            if (char == '>') {\r\n                skipping = false\r\n            } else {\r\n                // Skipping char\r\n            }", "choices": [{"text": "\n            result.append(char)\r\n        }\r\n    }\r\n\r\n    return result.toString()\r\n}"}], "metadata": {"task_id": "Feeder/344", "ground_truth": "        }\r\n    }\r\n\r\n    return result.toString()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.feed.PlainTooltipBox\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.Box\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun WithTooltipIfNotBlank(\r\n    tooltip: String,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    if (tooltip.isNotBlank()) {\r\n        PlainTooltipBox(tooltip = { Text(tooltip) }) {\r\n            content()", "choices": [{"text": "\n        }\r\n    } else {\r\n        PlainTooltipBox(tooltip = { Text(tooltip) }) {\r\n            content()\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/345", "ground_truth": "        }\r\n    } else {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "import androidx.compose.runtime.Composable\noverride fun appendImage(\r\n        link: String?,\r\n        onLinkClick: (String) -> Unit,\r\n        block: @Composable (() -> Unit) -> Unit,\r\n    ) {\r\n        emitParagraph()\r\n\r\n        val url = link ?: findClosestLink()\r\n        val onClick: (() -> Unit) =\r\n            when {\r\n                url?.isNotBlank() == true -> {\r\n                    {\r\n                        onLinkClick(url)\r\n                    }\r\n                }\r\n                else -> {\r\n                    {}\r\n                }\r\n            }", "choices": [{"text": ",\r\n        block: @Composable (() -> Unit) => Unit,\r\n    ) {\r\n        emitParagraph()\r\n\r\n        val url = link?: findClosestLink()\r\n        val onClick: (() -> Unit) =\r\n            when {\r\n                onClick(url)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/346", "ground_truth": "\r\n        item(keyHolder = keyHolder) {\r\n            block(onClick)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\LazyListComposer.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.feedarticle.ArticleItemKeyHolder\nimport androidx.compose.runtime.Composable\nfun item(\r\n        keyHolder: ArticleItemKeyHolder,\r\n        block: @Composable () -> Unit,", "choices": [{"text": ",\r\n        callback: @Composable () -> void,\r\n    ) -> void {\r\n        keyHolder.setItem(item);\r\n        block.apply();\r\n    }"}], "metadata": {"task_id": "Feeder/347", "ground_truth": "    ) {\r\n        lazyListScope.item(key = keyHolder.getAndIncrementKey()) {\r\n            block()\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\LazyListComposer.kt"}}
{"prompt": "import com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun ThemeOptions.isDarkSystemIcons(): Boolean {\r\n    val isDarkTheme =\r\n        when (this) {\r\n            ThemeOptions.DAY,\r\n            ThemeOptions.E_INK,\r\n            -> false\r\n            ThemeOptions.NIGHT -> true", "choices": [{"text": "\n        }\r\n    return isDarkTheme\r\n}"}], "metadata": {"task_id": "Feeder/349", "ground_truth": "            ThemeOptions.SYSTEM -> isSystemInDarkTheme()\r\n        }\r\n\r\n    return !isDarkTheme\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Theme.kt"}}
{"prompt": "import com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\nimport android.os.Build\n\r\n@Composable\r\nprivate fun ThemeOptions.getNavBarColor(): Color {\r\n    // Api 29 handles transparency\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        Color.Transparent\r\n    } else if (isDarkNavIcons()) {", "choices": [{"text": "\n        Color.Transparent\r\n    } else {\r\n        Color.Transparent\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/351", "ground_truth": "        NavBarScrimLight\r\n    } else {\r\n        NavBarScrimDark\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Theme.kt"}}
{"prompt": "import androidx.compose.ui.text.font.FontWeight\nfun titleFontWeight(unread: Boolean) =", "choices": [{"text": "    if (unread) {\n        return \"bold\"\n    } else {\n        return \"normal\"\n    }\n}"}], "metadata": {"task_id": "Feeder/353", "ground_truth": "    if (unread) {\r\n        FontWeight.Black\r\n    } else {\r\n        FontWeight.Normal\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "import androidx.compose.ui.text.TextStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun FeedListItemSnippetTextStyle(): TextStyle =\r\n    MaterialTheme.typography.titleSmall.merge(", "choices": [{"text": "\r\n        MaterialTheme.typography.titleLarge.merge(\r\n            MaterialTheme.typography.titleSmall.merge(\r\n                MaterialTheme.typography.titleSmall.merge(\r\n                    MaterialTheme.typography.titleSmall.merge(\r\n                        MaterialTheme.typography.titleSmall.merge(\r\n                            MaterialTheme.typography.titleSmall.merge(\r\n                                MaterialTheme.typography.titleSmall.merge(\r\n                                    MaterialTheme.typography.titleSmall.merge(\r\n                                        MaterialTheme.typography.titleSmall.merge"}], "metadata": {"task_id": "Feeder/355", "ground_truth": "        TextStyle(\r\n            lineBreak = LineBreak.Paragraph,\r\n            hyphens = Hyphens.Auto,\r\n        ),\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nimport androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi\nimport androidx.compose.material3.Surface\n\r\n@OptIn(ExperimentalMaterial3WindowSizeClassApi::class)\r\n@Composable\r\nfun withAllPreviewProviders(\r\n    currentTheme: ThemeOptions = ThemeOptions.DAY,\r\n    content: @Composable () -> Unit\r\n) {\r\n    FeederTheme(currentTheme = currentTheme) {\r\n        val dm = LocalContext.current.resources.displayMetrics\r\n        val dpSize = with(LocalDensity.current) {\r\n            DpSize(\r\n                dm.widthPixels.toDp(),\r\n                dm.heightPixels.toDp()\r\n            )\r\n        }\r\n        withPreviewWindowSize(WindowSizeClass.calculateFromSize(dpSize)) {\r\n            Surface {", "choices": [{"text": "\n                width = dpSize.widthPixels.toDp(),\r\n                height = dpSize.heightPixels.toDp()\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/360", "ground_truth": "                content()\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\ComposeProviders.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ApplicationCoroutineScope\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun rememberApplicationCoroutineScope(): ApplicationCoroutineScope {", "choices": [{"text": "\n    return new rememberApplicationCoroutineScope();\r\n}"}], "metadata": {"task_id": "Feeder/361", "ground_truth": "    val di = LocalDI.current\r\n    return remember {\r\n        di.direct.instance<ApplicationCoroutineScope>()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\DIUtils.kt"}}
{"prompt": "import android.view.MenuItem\nimport android.view.Menu\nprivate fun updateMenuItems(menu: Menu) {\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Copy, onCopyRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Paste, onPasteRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Cut, onCutRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.SelectAll, onSelectAllRequested)", "choices": [{"text": "\n        addOrRemoveMenuItem(menu, MenuItemOption.Delete, onDeleteRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Move, onMoveRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Copy, onCopyRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Paste, onPasteRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Cut, onCutRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.SelectAll, onSelectAllRequested)\r\n    }"}], "metadata": {"task_id": "Feeder/365", "ground_truth": "        onCopyRequested?.let {\r\n            // Depends on copy/paste\r\n            addTextProcessors(menu)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "import androidx.compose.ui.geometry.Rect\nimport android.view.View\nimport android.view.ActionMode\noverride fun onGetContentRect(\r\n        mode: ActionMode?,\r\n        view: View?,\r\n        outRect: android.graphics.Rect?,\r\n    ) {\r\n        val rect = callback.rect\r\n        outRect?.set(\r\n            rect.left.toInt(),", "choices": [{"text": "\n            rect.top.toInt(),\r\n            rect.right.toInt(),\r\n            rect.bottom.toInt(),\r\n        )\r\n    }"}], "metadata": {"task_id": "Feeder/368", "ground_truth": "            rect.top.toInt(),\r\n            rect.right.toInt(),\r\n            rect.bottom.toInt(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "import androidx.compose.ui.platform.debugInspectorInfo\nimport androidx.compose.ui.input.key.onKeyEvent\nimport androidx.compose.ui.input.key.key\nimport androidx.compose.ui.input.key.Key\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.ExperimentalComposeUiApi\n\r\n@OptIn(ExperimentalComposeUiApi::class)\r\nfun Modifier.onKeyEventLikeEscape(action: () -> Unit) =\r\n    composed(\r\n        inspectorInfo =\r\n            debugInspectorInfo {\r\n                name = \"onEscapeLikeKeyPress\"\r\n                properties[\"action\"] = action\r\n            },\r\n    ) {\r\n        onKeyEvent {\r\n            when (it.key) {\r\n                Key.Escape, Key.Back, Key.NavigateOut -> {\r\n                    action()\r\n                    true\r\n                }", "choices": [{"text": "\n            } else {\r\n                action()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/369", "ground_truth": "\r\n                else -> false\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\Focusable.kt"}}
{"prompt": "import com.google.accompanist.adaptive.calculateDisplayFeatures\nimport androidx.window.layout.FoldingFeature\nimport androidx.compose.ui.graphics.toComposeRect\nimport androidx.compose.runtime.Composable\nimport android.app.Activity\n\r\n@Composable\r\nfun Activity.withFoldableHinge(content: @Composable () -> Unit) {\r\n    val displayFeatures = calculateDisplayFeatures(this)\r\n    val fold =\r\n        displayFeatures.find {\r\n            it is FoldingFeature\r\n        } as FoldingFeature?\r\n\r\n    val foldableHinge =\r\n        fold?.let {\r\n            FoldableHinge(it.bounds.toComposeRect())\r\n        }", "choices": [{"text": "\n    if (foldableHinge!= null) {\r\n        return foldableHinge\r\n    } else {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/371", "ground_truth": "\r\n    CompositionLocalProvider(LocalFoldableHinge provides foldableHinge) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\Foldables.kt"}}
{"prompt": "import kotlinx.coroutines.flow.distinctUntilChanged\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n\r\n@Composable\r\nfun LazyListState.rememberIsItemVisible(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.visibleItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.visibleItemsInfo.any { it.key == key }\r\n        }\r\n            .distinctUntilChanged()\r\n            .collect {", "choices": [{"text": "\n                layoutInfo.visibleItemsInfo.any { it.key == key }\r\n            }\r\n        }\r\n    }\r\n    return isVisible\r\n}"}], "metadata": {"task_id": "Feeder/372", "ground_truth": "                isVisible.value = it\r\n            }\r\n    }\r\n    return isVisible\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\LazyList.kt"}}
{"prompt": "import kotlinx.coroutines.flow.distinctUntilChanged\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState\nimport androidx.compose.foundation.ExperimentalFoundationApi\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun LazyStaggeredGridState.rememberIsItemVisible(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.visibleItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.visibleItemsInfo.any { it.key == key }\r\n        }\r\n            .distinctUntilChanged()\r\n            .collect {", "choices": [{"text": "\n                layoutInfo.visibleItemsInfo.any { it.key == key }\r\n            }\r\n        }\r\n    }\r\n    return isVisible\r\n}"}], "metadata": {"task_id": "Feeder/373", "ground_truth": "                isVisible.value = it\r\n            }\r\n    }\r\n    return isVisible\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\LazyList.kt"}}
{"prompt": "import kotlin.reflect.KProperty\nimport androidx.compose.runtime.getValue\noperator fun getValue(\r\n        thisRef: Any?,\r\n        property: KProperty<*>,\r\n    ): T {\r\n        if (!initialized) {\r\n            value = savedStateHandle[property.name] ?: value", "choices": [{"text": "\n        } else {\r\n            value = thisRef.get(property.name)\r\n        }\r\n        return value\r\n    }"}], "metadata": {"task_id": "Feeder/375", "ground_truth": "            initialized = true\r\n            onChange?.invoke(value)\r\n        }\r\n        return value\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\MutableSavedState.kt"}}
{"prompt": "import kotlin.reflect.KProperty\nimport androidx.compose.runtime.setValue\nvar initialized Boolean\nvar value T\noperator fun setValue(\r\n        thisRef: Any?,\r\n        property: KProperty<*>,\r\n        value: T,", "choices": [{"text": "\n        initialized: Boolean\r\n    ): void {\r\n        this.initialized = initialized\r\n        this.value = value\r\n    }"}], "metadata": {"task_id": "Feeder/376", "ground_truth": "    ) {\r\n        savedStateHandle[property.name] = value\r\n        this.value = value\r\n        onChange?.invoke(value)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\MutableSavedState.kt"}}
{"prompt": "import com.nononsenseapps.feeder.ui.compose.theme.LocalTypographySettings\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.ProvideTextStyle\n\r\n@Composable\r\nfun ProvideScaledText(\r\n    style: TextStyle,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    val typographySettings = LocalTypographySettings.current\r\n\r\n    ProvideTextStyle(\r\n        style.merge(\r\n            TextStyle(\r\n                fontSize = style.fontSize * typographySettings.fontScale,\r\n                lineHeight = style.lineHeight * typographySettings.fontScale,\r\n            ),", "choices": [{"text": "\n            content.merge(\r\n                TextStyle(\r\n                    fontSize = style.fontSize * typographySettings.fontScale,\r\n                    lineHeight = style.lineHeight * typographySettings.fontScale,\r\n                ),\r\n            ),\r\n        ),\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/378", "ground_truth": "        ),\r\n    ) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\ProvideScaledText.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\nfun WindowInsets.addMargin(\r\n    vertical: Dp = 0.dp,\r\n    horizontal: Dp = 0.dp,\r\n) = addMargin(", "choices": [{"text": "1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n    1.0f,\r\n   "}], "metadata": {"task_id": "Feeder/379", "ground_truth": "    left = horizontal,\r\n    right = horizontal,\r\n    top = vertical,\r\n    bottom = vertical,\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\n\r\n@Composable\r\nfun WindowInsets.addMarginLayout(\r\n    start: Dp = 0.dp,\r\n    end: Dp = 0.dp,\r\n    top: Dp = 0.dp,\r\n    bottom: Dp = 0.dp,\r\n): WindowInsets {\r\n    val layoutDirection = LocalLayoutDirection.current\r\n    return addMargin(\r\n        left =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> start\r\n                LayoutDirection.Rtl -> end\r\n            },\r\n        right =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> end\r\n                LayoutDirection.Rtl -> start", "choices": [{"text": "\n            },\r\n        top =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> start\r\n                LayoutDirection.Rtl -> end\r\n            },\r\n        bottom =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> end\r\n                LayoutDirection.Rtl -> start\r\n            },\r\n    )\r\n}"}], "metadata": {"task_id": "Feeder/380", "ground_truth": "            },\r\n        top = top,\r\n        bottom = bottom,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\nfun WindowInsets.addMargin(\r\n    left: Dp = 0.dp,\r\n    right: Dp = 0.dp,\r\n    top: Dp = 0.dp,\r\n    bottom: Dp = 0.dp,\r\n) = add(\r\n    WindowInsets(\r\n        left = left,", "choices": [{"text": "\n        right = right,\r\n        top = top,\r\n        bottom = bottom,\r\n    ),\r\n    WindowInsets(\r\n        right = right,\r\n        top = top,\r\n        bottom = bottom,\r\n    ),\r\n    WindowInsets(\r\n        right = right,\r\n        top = top,\r\n        bottom = bottom,\r\n    ),\r\n    WindowInsets(\r\n        right = right,\r\n        top = top,\r\n        bottom = bottom,\r\n    ),\r\n)"}], "metadata": {"task_id": "Feeder/381", "ground_truth": "        right = right,\r\n        top = top,\r\n        bottom = bottom,\r\n    ),\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "import androidx.compose.runtime.Composable\nimport androidx.compose.material3.windowsizeclass.calculateWindowSizeClass\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nimport androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi\nimport android.app.Activity\n\r\n@OptIn(ExperimentalMaterial3WindowSizeClassApi::class)\r\n@Composable\r\nfun Activity.withWindowSize(content: @Composable () -> Unit) {\r\n    val windowSizeclass = calculateWindowSizeClass(activity = this)", "choices": [{"text": "\n    return windowSizeclass.withWindowSize(content)\r\n}"}], "metadata": {"task_id": "Feeder/382", "ground_truth": "\r\n    CompositionLocalProvider(LocalWindowSize provides windowSizeclass) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowSize.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.nononsenseapps.feeder.model.workmanager.requestFeedSync\nimport androidx.lifecycle.lifecycleScope\nprivate fun maybeRequestSync() =\r\n        lifecycleScope.launch {\r\n            if (mainActivityViewModel.shouldSyncOnResume) {\r\n                if (mainActivityViewModel.isOkToSyncAutomatically()) {\r\n                    requestFeedSync(\r\n                        di = di,", "choices": [{"text": "\n                        activity = mainActivityViewModel.getActivity()\r\n                    )\r\n                } else {\r\n                    requestFeedSync(\r\n                        di = di,\r\n                        activity = mainActivityViewModel.getActivity()\r\n                    )\r\n                }\r\n            } else {\r\n                if (mainActivityViewModel.isOkToSyncAutomatically()) {\r\n                    requestFeedSync(\r\n                        di = di,\r\n                        activity = mainActivityViewModel.getActivity()\r\n                    )\r\n                } else {\r\n                    requestFeedSync(\r\n                        di"}], "metadata": {"task_id": "Feeder/392", "ground_truth": "                        forceNetwork = false,\r\n                    )\r\n                }\r\n            }\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "import androidx.core.view.WindowCompat\nimport androidx.activity.compose.setContent\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        installExceptionHandler()\r\n\r\n        mainActivityViewModel.ensurePeriodicSyncConfigured()\r\n\r\n        WindowCompat.setDecorFitsSystemWindows(window, false)\r\n\r\n        setContent {", "choices": [{"text": "\n            super.onCreate(savedInstanceState)\r\n            setContentView(R.layout.activity_main)\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/393", "ground_truth": "            withAllProviders {\r\n                AppContent()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "import org.xml.sax.SAXException\n @Throws(SAXException::class)\r\n    override fun endDocument() {\r\n        // See test mentioning XKCD\r\n        if (builder?.isEmpty() == true) {", "choices": [{"text": "\n            builder.endDocument();\r\n        } else {\r\n            super.endDocument();\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/399", "ground_truth": "            lastImageAlt?.let {\r\n                builder?.append(\"[$lastImageAlt]\")\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "private fun startOl(text: StringBuilder?) {\r\n        // Start lists with linebreak\r\n        val len = text!!.length\r\n        if (len > 0 && text[len - 1] != '\\n') {\r\n            text.append(\"\\n\")", "choices": [{"text": "\n        } else {\r\n            text.append(\"\\n\")\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/401", "ground_truth": "        }\r\n\r\n        // Remember list type\r\n        listings.push(Listing(true))\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "private fun startLi(builder: StringBuilder?) {\r\n        builder!!.append(repeated(\"  \", listings.size - 1))\r\n        if (isOrderedList) {\r\n            val listing = listings.peek()\r\n            builder.append(\"\").append(listing.number).append(\". \")", "choices": [{"text": "\n        } else {\r\n            builder.append(\"\").append(listing.number).append(\". \")\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/402", "ground_truth": "            listing.number = listing.number + 1\r\n        } else {\r\n            builder.append(\"* \")\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "private fun startUl(text: StringBuilder?) {\r\n        // Start lists with linebreak\r\n        val len = text!!.length\r\n        if (len > 0 && text[len - 1] != '\\n') {\r\n            text.append(\"\\n\")", "choices": [{"text": "\n        } else {\r\n            text.append(\"\\n\")\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/404", "ground_truth": "        }\r\n\r\n        // Remember list type\r\n        listings.push(Listing(false))\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "private fun ensureSpace(text: StringBuilder?) {\r\n        val len = text!!.length\r\n        if (len != 0) {\r\n            val c = text[len - 1]\r\n            // Non-breaking space (160) is not caught by trim or whitespace identification\r\n            if (Character.isWhitespace(c) || c.code == 160) {", "choices": [{"text": "\n                text = text.substring(0, len)\r\n            } else {\r\n                text = text.substring(0, len)\r\n            }\r\n        }\r\n        return text\r\n    }"}], "metadata": {"task_id": "Feeder/405", "ground_truth": "                return\r\n            }\r\n            text.append(\" \")\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "fun repeated(\r\n    string: String,\r\n    count: Int,\r\n): String {\r\n    val sb = StringBuilder()\r\n\r\n    for (i in 0 until count) {", "choices": [{"text": "\n        sb.append(string.charAt(i))\r\n    }\r\n\r\n    return sb.toString()\r\n}"}], "metadata": {"task_id": "Feeder/406", "ground_truth": "        sb.append(string)\r\n    }\r\n\r\n    return sb.toString()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "fun getVideo(src: String?): Video? {\r\n    return src?.let {\r\n        YoutubeIdPattern.find(src)?.let { match ->\r\n            val videoId = match.groupValues[1]\r\n            Video(\r\n                src = src,\r\n                imageUrl = \"http://img.youtube.com/vi/$videoId/hqdefault.jpg\",", "choices": [{"text": "(\r\n                    src = src,\r\n                    imageUrl = \"http://img.youtube.com/vi/$videoId/hqdefault.jpg\"\r\n                )\r\n            )\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/407", "ground_truth": "                link = \"https://www.youtube.com/watch?v=$videoId\",\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\VideoTagHunter.kt"}}
{"prompt": "import com.nononsenseapps.feeder.R\nimport android.os.Build\nimport android.content.Intent\nprivate fun Intent.openAdjacentIfSuitable(openAdjacentIfSuitable: Boolean): Intent {\r\n        return if (openAdjacentIfSuitable &&\r\n            Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&\r\n            configuration.smallestScreenWidthDp >= 600 &&\r\n            repository.isOpenAdjacent.value\r\n        ) {\r\n            addFlags(\r\n                Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT or Intent.FLAG_ACTIVITY_NEW_TASK,", "choices": [{"text": "\n                Intent.FLAG_ACTIVITY_NEW_TASK\r\n            );\r\n        } else {\r\n            return super.openAdjacentIfSuitable(openAdjacentIfSuitable);\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/408", "ground_truth": "            )\r\n        } else {\r\n            this\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\ActivityLauncher.kt"}}
{"prompt": "private fun bugBody(): String =\r\n    \"\"\"\r\n    ${deviceInfoBlock()}", "choices": [{"text": "\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r"}], "metadata": {"task_id": "Feeder/413", "ground_truth": "    \r\n    Hello.\r\n    \r\n    I'd like to report an issue:\r\n    \"\"\".trimIndent()", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\BugReport.kt"}}
{"prompt": "private fun crashBody(throwable: Throwable): String =\r\n    \"\"\"\r\n    ${deviceInfoBlock()}", "choices": [{"text": "\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock()}\r\n    ${deviceInfoBlock"}], "metadata": {"task_id": "Feeder/415", "ground_truth": "    \r\n    Unhandled exception:\r\n    \r\n    ${throwable.stackTraceToString()}\r\n    \"\"\".trimIndent()", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\BugReport.kt"}}
{"prompt": "import android.content.ContentValues\nfun ContentValues.setStringMaybe(pair: Pair<String, String?>) {\r\n    if (pair.second == null) {", "choices": [{"text": "\n        pair.second = null;\r\n    } else {\r\n        pair.second = pair.first;\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/419", "ground_truth": "        putNull(pair.first)\r\n    } else {\r\n        put(pair.first, pair.second)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\ContentValuesExtensions.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun <C> fold(\r\n        ifLeft: (left: A) -> C,\r\n        ifRight: (right: B) -> C,\r\n    ): C {\r\n        contract {\r\n            callsInPlace(ifLeft, InvocationKind.AT_MOST_ONCE)\r\n            callsInPlace(ifRight, InvocationKind.AT_MOST_ONCE)\r\n        }", "choices": [{"text": "\n        contract {\r\n            callsInPlace(ifLeft, InvocationKind.AT_MOST_ONCE)\r\n            callsInPlace(ifRight, InvocationKind.AT_MOST_ONCE)\r\n        }\r\n    }"}], "metadata": {"task_id": "Feeder/428", "ground_truth": "        return when (this) {\r\n            is Right -> ifRight(value)\r\n            is Left -> ifLeft(value)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "import kotlin.contracts.contract\nfun leftOrNull(): A? {\r\n        contract {\r\n            returnsNotNull() implies (this@Either is Left<A>)", "choices": [{"text": "\n            returnsNotNull() implies (this@Either is Left<A>)\r\n            returnsNotNull() implies (this@Either is Left<A>)\r\n            returnsNotNull() implies (this@Either is Left<A>)\r\n            returnsNotNull() implies (this@Either is Left<A>)\r\n            returnsNotNull() implies (this@Either is Left<A>)\r\n            returnsNotNull() implies (this@Either is Left<A>)\r\n            returnsNotNull() implies (this@Either is Left<A>)\r\n            returnsNotNull() implies (this@Either is Left<A>)\r"}], "metadata": {"task_id": "Feeder/434", "ground_truth": "            returns(null) implies (this@Either is Right<B>)\r\n        }\r\n\r\n        return fold(::identity) { null }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun <A, B, C> Either<A, B>.flatMap(f: (right: B) -> Either<A, C>): Either<A, C> {\r\n    contract { callsInPlace(f, InvocationKind.AT_MOST_ONCE) }", "choices": [{"text": "(f, InvocationKind.AT_MOST_ONCE) }\r\n    contract { callsInPlace(f, InvocationKind.AT_MOST_ONCE) }\r\n    contract { callsInPlace(f, InvocationKind.AT_MOST_ONCE) }\r\n    contract { callsInPlace(f, InvocationKind.AT_MOST_ONCE) }\r\n    contract { callsInPlace(f, InvocationKind.AT_MOST_ONCE) }\r\n    contract { callsInPlace(f, InvocationKind.AT_MOST_ONCE"}], "metadata": {"task_id": "Feeder/437", "ground_truth": "    return when (this) {\r\n        is Either.Right -> f(this.value)\r\n        is Either.Left -> this\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "import java.net.URI\nfun sloppyLinktoURIOrNull(text: String): URI? =", "choices": [{"text": "\n    if (text == null) {\n        return null\n    }\n    if (text.length() == 0) {\n        return null\n    }\n    if (text.length() == 1) {\n        return null\n    }\n    if (text.length() == 2) {\n        return null\n    }\n    if (text.length() == 3) {\n        return null\n    }\n    if (text.length() == 4) {\n        return null\n    }\n    if (text.length() == 5) {\n        return null\n"}], "metadata": {"task_id": "Feeder/442", "ground_truth": "    try {\r\n        URI(text)\r\n    } catch (_: URISyntaxException) {\r\n        null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "import java.net.URL\nfun sloppyLinkToStrictURLOrNull(url: String): URL? =", "choices": [{"text": "\n    if (url == null) {\n        return null\n    }\n    try {\n        return URL.parse(url)\n    } catch (e) {\n        return null\n    }\n}"}], "metadata": {"task_id": "Feeder/443", "ground_truth": "    try {\r\n        sloppyLinkToStrictURL(url)\r\n    } catch (_: MalformedURLException) {\r\n        null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "import java.net.URL\nfun sloppyLinkToStrictURLNoThrows(url: String): URL =", "choices": [{"text": "(url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url: String): URL = (url"}], "metadata": {"task_id": "Feeder/444", "ground_truth": "    try {\r\n        sloppyLinkToStrictURL(url)\r\n    } catch (_: MalformedURLException) {\r\n        URL(\"http://\")\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "import java.net.URL\nfun relativeLinkIntoAbsoluteOrNull(\r\n    base: URL,\r\n    link: String?,\r\n): String? =\r\n    try {\r\n        // If no exception, it's valid\r\n        if (link != null) {\r\n            relativeLinkIntoAbsoluteOrThrow(base, link).toString()\r\n        } else {", "choices": [{"text": "\n            return base.toString()\r\n        }\r\n    } catch (e) {\r\n        return null\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/446", "ground_truth": "            null\r\n        }\r\n    } catch (_: MalformedURLException) {\r\n        link\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "fun logDebug(\r\n    tag: String,\r\n    msg: String,\r\n    exception: Throwable? = null,", "choices": [{"text": "\n    error: Throwable? = null\r\n) {\r\n    if (tag == null) {\r\n        throw new Error(\"tag must not be null\")\r\n    }\r\n    if (msg == null) {\r\n        throw new Error(\"msg must not be null\")\r\n    }\r\n    if (exception == null) {\r\n        throw new Error(\"exception must not be null\")\r\n    }\r\n    log(tag, msg, exception)\r\n}"}], "metadata": {"task_id": "Feeder/448", "ground_truth": ") {\r\n    if (BuildConfig.DEBUG) {\r\n        Log.d(tag, msg, exception)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Logging.kt"}}
{"prompt": "import android.database.sqlite.SQLiteDatabase\nfun SQLiteDatabase.inTransaction(init: (SQLiteDatabase) -> Unit) {\r\n    beginTransaction()\r\n    try {\r\n        init(this)", "choices": [{"text": "_inTransaction()\r\n    } finally {\r\n        endTransaction()\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/449", "ground_truth": "        setTransactionSuccessful()\r\n    } finally {\r\n        endTransaction()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\SQLiteDatabaseExtensions.kt"}}
{"prompt": "import java.util.concurrent.TimeUnit\nimport java.io.File\nimport okhttp3.OkHttpClient\nimport okhttp3.Cache\nfun cachingHttpClient(\r\n    cacheDirectory: File? = null,\r\n    cacheSize: Long = 10L * 1024L * 1024L,\r\n    trustAllCerts: Boolean = true,\r\n    connectTimeoutSecs: Long = 30L,\r\n    readTimeoutSecs: Long = 30L,\r\n    block: (OkHttpClient.Builder.() -> Unit)? = null,\r\n): OkHttpClient {\r\n    val builder: OkHttpClient.Builder = OkHttpClient.Builder()\r\n\r\n    if (cacheDirectory != null) {\r\n        builder.cache(Cache(cacheDirectory, cacheSize))\r\n    }\r\n\r\n    builder\r\n        .connectTimeout(connectTimeoutSecs, TimeUnit.SECONDS)\r\n        .readTimeout(readTimeoutSecs, TimeUnit.SECONDS)\r\n        .followRedirects(true)\r\n\r\n    if (trustAllCerts) {\r\n        builder.trustAllCerts()\r\n    }\r\n\r\n    block?.let {", "choices": [{"text": "\n        return builder.build()\r\n    }\r\n\r\n    return builder.build()\r\n}"}], "metadata": {"task_id": "Feeder/452", "ground_truth": "        builder.block()\r\n    }\r\n\r\n    return builder.build()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\jsonfeed\\JsonFeedParser.kt"}}
{"prompt": "var prefs SharedPreferences\nvar editor SharedPreferences.Editor\n  @JvmStatic", "choices": [{"text": "\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @"}], "metadata": {"task_id": "Iconify/0", "ground_truth": "    fun clearPrefs(vararg keys: String?) {\n        for (key in keys) {\n            editor.remove(key).apply()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\config\\Prefs.kt"}}
{"prompt": "var prefs SharedPreferences\nvar editor SharedPreferences.Editor\n  @JvmStatic", "choices": [{"text": "\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @JvmStatic\n  @"}], "metadata": {"task_id": "Iconify/1", "ground_truth": "    fun clearPrefs(vararg keys: String?) {\n        for (key in keys) {\n            editor.remove(key).apply()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\config\\RPrefs.kt"}}
{"prompt": "var instance Iconify?\nvar contextReference WeakReference<Context>?\nval appContext Context\n private fun getInstance(): Iconify {", "choices": [{"text": "\n    if (contextReference == null) {\n        contextReference = new WeakReference<Context>(new Context());\n    }\n    return contextReference.get();\n}"}], "metadata": {"task_id": "Iconify/4", "ground_truth": "            if (instance == null) {\n                instance = Iconify()\n            }\n            return instance!!\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\Iconify.kt"}}
{"prompt": "override fun onStartListening() {\n        super.onStartListening()", "choices": [{"text": "\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()\n        super.onStartListening()"}], "metadata": {"task_id": "Iconify/10", "ground_truth": "        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE\n        updateTileIcon(tile)\n        tile.updateTile()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": "import android.service.quicksettings.Tile\noverride fun onStopListening() {\n        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE", "choices": [{"text": "\n        tile.state = Tile.STATE_ACTIVE\n        tile.onStopListening()\n    }"}], "metadata": {"task_id": "Iconify/11", "ground_truth": "        updateTileIcon(tile)\n        tile.updateTile()\n\n        super.onStopListening()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.SystemUtil\nimport com.drdisagree.iconify.R\nimport android.service.quicksettings.Tile\noverride fun onClick() {\n        super.onClick()\n\n        SystemUtil.restartSystemUI()\n        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE\n        tile.label = resources.getString(R.string.restart_sysui_title)\n        tile.subtitle = \"\"", "choices": [{"text": "\n        tile.title = resources.getString(R.string.restart_sysui_title)\n        tile.subtitle = resources.getString(R.string.restart_sysui_subtitle)\n        tile.description = resources.getString(R.string.restart_sysui_description)\n        tile.icon = resources.getString(R.string.restart_sysui_icon)\n        tile.image = resources.getString(R.string.restart_sysui_image)\n    }"}], "metadata": {"task_id": "Iconify/12", "ground_truth": "\n        updateTileIcon(tile)\n\n        tile.updateTile()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (variant == \"BBN\") {\n                R.layout.view_list_option_brightnessbar\n            } else {\n                R.layout.view_list_option_brightnessbar_pixel\n            },", "choices": [{"text": "\n            parent,\n            false\n        );\n        return new ViewHolder(view);\n    }"}], "metadata": {"task_id": "Iconify/21", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\BrightnessBarAdapter.kt"}}
{"prompt": "import android.view.View\noverride fun onViewAttachedToWindow(holder: ViewHolder) {\n        super.onViewAttachedToWindow(holder)\n\n        itemSelected(\n            holder.container,", "choices": [{"text": "\n            holder.container.getChildAt(0),\n            holder.container.getChildAt(1),\n            holder.container.getChildAt(2),\n            holder.container.getChildAt(3),\n            holder.container.getChildAt(4),\n            holder.container.getChildAt(5),\n            holder.container.getChildAt(6),\n            holder.container.getChildAt(7),\n            holder.container.getChildAt(8),\n            holder.container.getChildAt(9),\n            holder.container.getChild"}], "metadata": {"task_id": "Iconify/22", "ground_truth": "            getBoolean(brightnessBarKeys[holder.getBindingAdapterPosition()])\n        )\n\n        refreshButton(holder)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\BrightnessBarAdapter.kt"}}
{"prompt": "import com.drdisagree.iconify.common.Preferences.LSCLOCK_SWITCH\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (prefSwitch == LSCLOCK_SWITCH) {\n                R.layout.view_clock_preview_lockscreen\n            } else {\n                R.layout.view_clock_preview_header\n            },", "choices": [{"text": "\n            null\n        );\n        viewHolder = new ViewHolder(view);\n        view.setTag(viewHolder);\n        return viewHolder;\n    }"}], "metadata": {"task_id": "Iconify/24", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\ClockPreviewAdapter.kt"}}
{"prompt": "import com.drdisagree.iconify.databinding.ViewListIconItemBinding\nimport com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        return IconsViewHolder(\n            ViewListIconItemBinding.inflate(\n                LayoutInflater.from(parent.context),", "choices": [{"text": "\n                R.layout.item_list_icon_item,\n                null\n            ),\n            viewType\n        );\n    }"}], "metadata": {"task_id": "Iconify/32", "ground_truth": "                parent,\n                false\n            )\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\IconsAdapter.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (variant == \"QSSN\") R.layout.view_list_option_qsshape else R.layout.view_list_option_qsshape_pixel,", "choices": [{"text": "\n            R.layout.view_list_option_qsshape_pixel,\n            parent,\n            false\n        );\n        return new ViewHolder(view);\n    }"}], "metadata": {"task_id": "Iconify/42", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\QsShapeAdapter.kt"}}
{"prompt": "import com.drdisagree.iconify.config.Prefs\nimport android.widget.Switch\nimport android.view.View\noverride fun onViewAttachedToWindow(holder: ViewHolder) {\n        super.onViewAttachedToWindow(holder)\n\n        holder.aSwitch.setChecked(\n            Prefs.getInt(", "choices": [{"text": "\n                Prefs.getInt(\n                    Prefs.getString(\n                        Prefs.getString(\n                            Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString(\n                                Prefs.getString("}], "metadata": {"task_id": "Iconify/47", "ground_truth": "                SELECTED_SWITCH,\n                -1\n            ) == holder.getBindingAdapterPosition()\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\SwitchAdapter.kt"}}
{"prompt": "import android.widget.Switch\nimport android.widget.CompoundButton\nimport android.view.View\nprivate fun enableOnCheckedChangeListener(holder: ViewHolder) {\n        holder.container.setOnClickListener {\n            holder.aSwitch.toggle()\n            switchAction(holder, holder.aSwitch.isChecked)\n        }\n        holder.aSwitch.setOnCheckedChangeListener { compoundButton: CompoundButton, b: Boolean ->", "choices": [{"text": "\n            holder.aSwitch.setChecked(!holder.aSwitch.isChecked)\n        }\n        holder.aSwitch.setOnCheckedChangeListener { compoundButton: CompoundButton, b: Boolean ->\n            holder.aSwitch.setChecked(!holder.aSwitch.isChecked)\n        }\n    }"}], "metadata": {"task_id": "Iconify/49", "ground_truth": "            if (compoundButton.isPressed) {\n                switchAction(holder, b)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\SwitchAdapter.kt"}}
{"prompt": "@Suppress(\"deprecation\")", "choices": [{"text": "\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n    @Suppress(\"deprecation\")\n   "}], "metadata": {"task_id": "Iconify/51", "ground_truth": "    override fun onSupportNavigateUp(): Boolean {\n        onBackPressed()\n        return true\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\base\\BaseActivity.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.widget.TextView\nimport android.graphics.drawable.ColorDrawable\nimport android.graphics.Color\nimport android.app.Dialog\nfun show(title: String?) {\n        if (dialog != null) dialog!!.dismiss()\n\n        dialog = Dialog(context)\n        dialog!!.setContentView(R.layout.view_loading_dialog)\n        dialog!!.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog!!.setCancelable(false)\n        dialog!!.setOnCancelListener(null)\n        dialog!!.setCanceledOnTouchOutside(false)\n\n        val text = dialog!!.findViewById<TextView>(R.id.title)", "choices": [{"text": "\n        text.setText(title)\n        dialog!!.show()\n    }"}], "metadata": {"task_id": "Iconify/61", "ground_truth": "        text.text = title\n\n        dialog!!.create()\n        dialog!!.show()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\LoadingDialog.kt"}}
{"prompt": "import com.drdisagree.iconify.config.Prefs.putString\nimport com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Preferences.CUSTOM_ACCENT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY_LIGHT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY_LIGHT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY\nimport com.drdisagree.iconify.R\nprivate fun applyMonetColors() {\n        putBoolean(CUSTOM_ACCENT, true)\n\n        if (isSelectedPrimary) {\n            putString(COLOR_ACCENT_PRIMARY, accentPrimary)\n            putString(COLOR_ACCENT_PRIMARY_LIGHT, accentPrimary)\n        }\n        if (isSelectedSecondary) {\n            putString(COLOR_ACCENT_SECONDARY, accentSecondary)\n            putString(COLOR_ACCENT_SECONDARY_LIGHT, accentSecondary)", "choices": [{"text": "\n        }\n        if (isSelectedPrimary) {\n            putString(COLOR_ACCENT_PRIMARY, accentPrimary)\n            putString(COLOR_ACCENT_PRIMARY_LIGHT, accentPrimary)\n        }\n        if (isSelectedSecondary) {\n            putString(COLOR_ACCENT_SECONDARY, accentSecondary)\n            putString(COLOR_ACCENT_SECONDARY_LIGHT, accentSecondary)\n        }\n        if (isSelectedPrimary) {\n            putString(COLOR_ACCENT_PRIMARY, accentPrimary)\n            putString(COLOR_ACCENT_PRIMARY_LIGHT, accentPrimary)"}], "metadata": {"task_id": "Iconify/72", "ground_truth": "        }\n\n        if (isSelectedPrimary) applyPrimaryColors()\n        if (isSelectedSecondary) applySecondaryColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\BasicColors.kt"}}
{"prompt": "var binding FragmentBrightnessBarBinding\nvar loadingDialog LoadingDialog?", "choices": [{"text": " = new LoadingDialog.Builder(this)\n    loadingDialog.setCancelable(false)\n    loadingDialog.setCancelableInTouchMode(true)\n    loadingDialog.show()\n}"}], "metadata": {"task_id": "Iconify/75", "ground_truth": "override fun onDestroy() {\n        loadingDialog?.dismiss()\n\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\BrightnessBar.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.utils.ViewHelper.setHeader\nimport com.drdisagree.iconify.databinding.FragmentChangelogBinding\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentChangelogBinding.inflate(inflater, container, false)\n        val view: View = binding.getRoot()\n\n        // Header\n        setHeader(\n            requireContext(),\n            getParentFragmentManager(),\n            binding.header.toolbar,\n            R.string.activity_title_changelog\n        )\n\n        try {\n            grabChangelog = GrabChangelog()\n            grabChangelog!!.execute()", "choices": [{"text": "\n        } catch (e) {\n            Log.e(e)\n        }\n\n        return view\n    }"}], "metadata": {"task_id": "Iconify/77", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        return view\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "import java.util.regex.Pattern\nimport com.drdisagree.iconify.R\nfun usernameToLink(str: String): String {\n            val regexPattern = \"@([A-Za-z\\\\d_-]+)\"\n            val pattern = Pattern.compile(regexPattern)\n            val matcher = pattern.matcher(str)\n            val sb = StringBuffer()\n\n            while (matcher.find()) {\n                val username = matcher.group(1)\n                val link = \"<a href=\\\"https://github.com/$username\\\">@$username</a>\"\n                matcher.appendReplacement(sb, link)\n            }", "choices": [{"text": "\n            return sb.toString()\n        }"}], "metadata": {"task_id": "Iconify/82", "ground_truth": "\n            matcher.appendTail(sb)\n\n            return sb.toString()\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "import com.drdisagree.iconify.config.Prefs.getString\nimport com.drdisagree.iconify.common.Preferences.STR_NULL\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY\nimport com.drdisagree.iconify.R\nprivate fun applyDefaultColors() {\n        if (shouldUseDefaultColors()) {\n            if (getString(COLOR_ACCENT_PRIMARY) == STR_NULL) {\n                BasicColors.applyDefaultPrimaryColors()\n            } else {\n                BasicColors.applyPrimaryColors()\n            }\n\n            if (getString(COLOR_ACCENT_SECONDARY) == STR_NULL) {\n                BasicColors.applyDefaultSecondaryColors()", "choices": [{"text": "\n            } else {\n                BasicColors.applySecondaryColors()\n            }\n\n            if (getString(COLOR_ACCENT_PRIMARY) == STR_NULL) {\n                BasicColors.applyPrimaryColors()\n            } else {\n                BasicColors.applyPrimaryColors()\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/85", "ground_truth": "            } else {\n                BasicColors.applySecondaryColors()\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ColorEngine.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.extension.TaskExecutor\nimport com.drdisagree.iconify.R\noverride fun onStop() {\n        if (checkForUpdate?.status == TaskExecutor.Status.PENDING ||\n            checkForUpdate?.status == TaskExecutor.Status.RUNNING\n        ) {", "choices": [{"text": "\n            checkForUpdate?.status = TaskExecutor.Status.STOPPED\n        } else {\n            checkForUpdate?.status = TaskExecutor.Status.FAILED\n        }\n    }"}], "metadata": {"task_id": "Iconify/87", "ground_truth": "            checkForUpdate?.cancel(true)\n        }\n\n        super.onStop()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Home.kt"}}
{"prompt": "private fun cloneList(src: List<MutableList<Any>>): List<MutableList<Any>> {\n        val cloned: MutableList<MutableList<Any>> = ArrayList()\n\n        for (sublist in src) {", "choices": [{"text": "\n            cloned.add(new MutableList<Any>(sublist))\n        }\n\n        return cloned\n    }"}], "metadata": {"task_id": "Iconify/92", "ground_truth": "            cloned.add(ArrayList(sublist))\n        }\n\n        return cloned\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\MonetEngine.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nprivate fun initializeLeftGestureSwitch(): Boolean {\n        return try {\n            Shell.cmd(\n                \"settings get secure back_gesture_inset_scale_left\"", "choices": [{"text": "\n            );\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }"}], "metadata": {"task_id": "Iconify/97", "ground_truth": "            ).exec().out[0].toInt() == -1\n        } catch (ignored: Exception) {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\NavigationBar.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nimport com.drdisagree.iconify.R\nprivate fun initializeRightGestureSwitch(): Boolean {\n        return try {\n            Shell.cmd(\n                \"settings get secure back_gesture_inset_scale_right\"", "choices": [{"text": "\n            );\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }"}], "metadata": {"task_id": "Iconify/98", "ground_truth": "            ).exec().out[0].toInt() == -1\n        } catch (ignored: Exception) {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\NavigationBar.kt"}}
{"prompt": "var binding FragmentProgressBarBinding\nvar loadingDialog LoadingDialog?", "choices": [{"text": "\nif (loadingDialog == null) {\n    loadingDialog = new LoadingDialog(this)\n    loadingDialog.setMessage(\"Loading...\")\n    loadingDialog.setCancelable(false)\n    loadingDialog.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            finish()\n        }\n    })\n    loadingDialog.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {"}], "metadata": {"task_id": "Iconify/101", "ground_truth": "override fun onDestroy() {\n        loadingDialog?.dismiss()\n\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ProgressBar.kt"}}
{"prompt": "import com.drdisagree.iconify.common.Preferences.QS_TEXT_COLOR_VARIANT_NORMAL\nimport com.drdisagree.iconify.common.Preferences.QS_TEXT_COLOR_VARIANT\nimport com.drdisagree.iconify.R\nprivate fun replaceVariant(vararg args: String): Array<String?> {\n        val newArgs = arrayOfNulls<String>(args.size)\n\n        for (i in args.indices) {\n            if (args[i].contains(\"QST5\")) continue\n\n            newArgs[i] = args[i].replace(\n                \"QST\",\n                if (selectedVariant == QS_TEXT_COLOR_VARIANT_NORMAL) \"QSNT\" else \"QSPT\"", "choices": [{"text": ",\n                if (selectedVariant == QS_TEXT_COLOR_VARIANT_NORMAL) \"QSNT\" else \"QSPT\"\n            )\n        }\n\n        return newArgs\n    }"}], "metadata": {"task_id": "Iconify/102", "ground_truth": "            )\n        }\n\n        return newArgs\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsIconLabel.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.models.MenuModel\nimport com.drdisagree.iconify.ui.adapters.MenuAdapter\nimport com.drdisagree.iconify.R\nprivate fun initActivityItems(): MenuAdapter {\n        val qsShapeActivityList = ArrayList<MenuModel>().apply {\n            add(\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string.activity_title_pixel_variant),\n                    resources.getString(R.string.activity_desc_pixel_variant),\n                    R.drawable.ic_pixel_device\n                )", "choices": [{"text": "\n            )\n           .add(\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string.activity_title_pixel_variant),\n                    resources.getString(R.string.activity_desc_pixel_variant),\n                    R.drawable.ic_pixel_device\n                )\n            )\n           .add(\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string."}], "metadata": {"task_id": "Iconify/106", "ground_truth": "            )\n        }\n\n        return MenuAdapter(requireContext(), qsShapeActivityList)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsPanelTile.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nimport android.view.View\nprivate fun refreshLayout(layout: RelativeLayout) {\n        for (i in 0 until binding.iconPacksList.childCount) {\n            val child = binding.iconPacksList.getChildAt(i)\n                .findViewById<RelativeLayout>(R.id.icon_pack_child)\n\n            itemSelected(\n                child,", "choices": [{"text": "\n                binding.iconPacksList.getChildAt(i + 1),\n                binding.iconPacksList.getChildAt(i + 2),\n                binding.iconPacksList.getChildAt(i + 3),\n                binding.iconPacksList.getChildAt(i + 4),\n                binding.iconPacksList.getChildAt(i + 5),\n                binding.iconPacksList.getChildAt(i + 6),\n                binding.iconPacksList.getChildAt(i + 7),\n                binding.iconPacksList.getChildAt(i + 8),"}], "metadata": {"task_id": "Iconify/117", "ground_truth": "                child === layout,\n                i + 1\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nimport android.view.View\nprivate fun refreshBackground() {\n        for (i in 0 until binding.iconPacksList.childCount) {\n            val child = binding.iconPacksList.getChildAt(i)\n                .findViewById<RelativeLayout>(R.id.icon_pack_child)\n\n            itemSelected(\n                child,", "choices": [{"text": "\n                binding.iconPacksList.getChildAt(i + 1),\n                binding.iconPacksList.getChildAt(i + 2),\n                binding.iconPacksList.getChildAt(i + 3),\n                binding.iconPacksList.getChildAt(i + 4),\n                binding.iconPacksList.getChildAt(i + 5),\n                binding.iconPacksList.getChildAt(i + 6),\n                binding.iconPacksList.getChildAt(i + 7),\n                binding.iconPacksList.getChildAt(i + 8),"}], "metadata": {"task_id": "Iconify/118", "ground_truth": "                Prefs.getInt(SELECTED_SETTINGS_ICONS_SET, 1) == i + 1,\n                i + 1\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nvar loadingDialog LoadingDialog?\nvar selectedIcon\nvar selectedIconColor\nprivate fun enableOnClickListener(layout: RelativeLayout, index: Int) {\n        // Set onClick operation for options in list", "choices": [{"text": "\n        layout.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent();\n                intent.putExtra(Intent.EXTRA_ICON, selectedIcon);\n                intent.putExtra(Intent.EXTRA_ICON_COLOR, selectedIconColor);\n                startActivity(intent);\n            }\n        });\n    }"}], "metadata": {"task_id": "Iconify/119", "ground_truth": "        layout.setOnClickListener {\n            refreshLayout(layout)\n            selectedIcon = index + 1\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.utils.ViewHelper.setHeader\nimport com.drdisagree.iconify.databinding.FragmentTweaksBinding\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentTweaksBinding.inflate(inflater, container, false)\n        val view: View = binding.getRoot()\n\n        // Header\n        setHeader(\n            requireContext(),\n            getParentFragmentManager(),\n            binding.header.toolbar,\n            R.string.navbar_tweaks\n        )", "choices": [{"text": "\n        view.setTag(binding)\n\n        return view\n    }"}], "metadata": {"task_id": "Iconify/128", "ground_truth": "\n        addItem(initTweaksItemList(view))\n\n        return view\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Tweaks.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.widgets.MenuWidget\nimport androidx.navigation.Navigation.findNavController\nimport android.view.View\nimport android.view.Menu\nimport android.app.Activity\nprivate fun addItem(pack: ArrayList<Array<Any>>) {\n        for (i in pack.indices) {\n            val menu = MenuWidget(requireActivity())\n\n            menu.setTitle(pack[i][1] as String)\n            menu.setSummary(pack[i][2] as String)\n            menu.setIcon(pack[i][3] as Int)\n            menu.setEndArrowVisibility(View.VISIBLE)\n            menu.setOnClickListener {\n                findNavController(menu).navigate(\n                    (pack[i][0] as Int)\n                )", "choices": [{"text": "\n                findNavController(menu).navigate(\n                    (pack[i][1] as Int)\n                )\n                findNavController(menu).navigate(\n                    (pack[i][2] as Int)\n                )\n                findNavController(menu).navigate(\n                    (pack[i][3] as Int)\n                )\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/134", "ground_truth": "            }\n\n            binding.xposedList.addView(menu)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "override fun onDestroy() {\n        try {\n            handler.removeCallbacks(checkSystemUIHooked)", "choices": [{"text": "\n        } catch (Exception e) {\n            e.printStackTrace()\n        }\n    }"}], "metadata": {"task_id": "Iconify/135", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "override fun onPause() {\n        try {\n            handler.removeCallbacks(checkSystemUIHooked)", "choices": [{"text": "\n        } catch (Exception e) {\n            e.printStackTrace()\n        }\n    }"}], "metadata": {"task_id": "Iconify/137", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        super.onPause()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\noverride fun scrollHorizontallyBy(\n        dx: Int,\n        recycler: RecyclerView.Recycler,\n        state: RecyclerView.State\n    ): Int {\n        val scrolled = super.scrollHorizontallyBy(dx, recycler, state)", "choices": [{"text": "\n        if (scrolled < 0) {\n            scrolled = 0\n        }\n        return scrolled\n    }"}], "metadata": {"task_id": "Iconify/153", "ground_truth": "\n        updateScaleFactors()\n\n        return scrolled\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\CarouselLayoutManager.kt"}}
{"prompt": "import com.bumptech.glide.request.transition.Transition\nimport com.bumptech.glide.request.target.CustomTarget\nimport com.bumptech.glide.Glide\nimport android.view.ViewGroup\nimport android.graphics.drawable.Drawable\n @JvmStatic\n    fun setDrawable(viewGroup: ViewGroup, drawable: Drawable?) {\n        Glide.with(viewGroup.context).load(drawable).into(object : CustomTarget<Drawable?>() {\n            override fun onResourceReady(\n                resource: Drawable,\n                transition: Transition<in Drawable?>?\n            ) {\n                viewGroup.background = resource", "choices": [{"text": "\n            }\n        })\n    }"}], "metadata": {"task_id": "Iconify/157", "ground_truth": "            }\n\n            override fun onLoadCleared(placeholder: Drawable?) {}\n        })\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewBindingHelpers.kt"}}
{"prompt": "import com.bumptech.glide.request.transition.Transition\nimport com.bumptech.glide.request.target.CustomTarget\nimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions\nimport com.bumptech.glide.Glide\nimport android.view.ViewGroup\nimport android.graphics.drawable.Drawable\n @JvmStatic\n    fun setDrawableWithAnimation(viewGroup: ViewGroup, drawable: Drawable?) {\n        Glide.with(viewGroup.context).load(drawable)\n            .transition(DrawableTransitionOptions.withCrossFade())\n            .into(object : CustomTarget<Drawable?>() {\n                override fun onResourceReady(\n                    resource: Drawable,\n                    transition: Transition<in Drawable?>?\n                ) {\n                    viewGroup.background = resource", "choices": [{"text": "\n                }\n            })\n           .into(object : CustomTarget<Drawable?>() {\n                override fun onResourceDestroyed(\n                    resource: Drawable,\n                    transition: Transition<in Drawable?>?\n                ) {\n                    viewGroup.background = null\n                }\n            })\n           .start()\n    }"}], "metadata": {"task_id": "Iconify/158", "ground_truth": "                }\n\n                override fun onLoadCleared(placeholder: Drawable?) {}\n            })\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewBindingHelpers.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport androidx.viewpager2.widget.ViewPager2\nimport androidx.recyclerview.widget.RecyclerView\n @JvmStatic\n    fun disableNestedScrolling(viewPager: ViewPager2) {\n        var recyclerView: RecyclerView? = null\n\n        for (i in 0 until viewPager.childCount) {\n            if (viewPager.getChildAt(i) is RecyclerView) {\n                recyclerView = viewPager.getChildAt(i) as RecyclerView\n                break\n            }\n        }", "choices": [{"text": "\n        if (recyclerView!= null) {\n            recyclerView.disableNestedScrolling()\n        }\n    }"}], "metadata": {"task_id": "Iconify/161", "ground_truth": "\n        if (recyclerView != null) {\n            recyclerView.isNestedScrollingEnabled = false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewHelper.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nprivate fun startInstallationTask() {\n        if (installationTask?.isActive != true) {\n            installationTask = CoroutineScope(Dispatchers.IO).launch {\n                onPreExecute()", "choices": [{"text": "\n                onPostExecute()\n            }\n        } else {\n            installationTask = CoroutineScope(Dispatchers.IO).launch {\n                onPostExecute()\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/166", "ground_truth": "                doInBackground()\n                onPostExecute()\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "import com.airbnb.lottie.value.LottieValueCallback\nimport com.airbnb.lottie.SimpleColorFilter\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nprivate fun setLottieColorFilter() {\n        val callback = LottieValueCallback<ColorFilter>(SimpleColorFilter(buttonTextColor))\n        binding.loadingAnim.addValueCallback(", "choices": [{"text": "(callback))\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.addValueCallback(callback)\n        binding.loadingAnim.add"}], "metadata": {"task_id": "Iconify/169", "ground_truth": "            KeyPath(\"**\"),\n            LottieProperty.COLOR_FILTER,\n            callback\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "var hasErroredOut\nvar clickedButton\nvar binding ViewOnboardingPageBinding", "choices": [{"text": "\nvar binding2\nvar binding3\nvar binding4\nvar binding5\nvar binding6\nvar binding7\nvar binding8\nvar binding9\nvar binding10\nvar binding11\nvar binding12\nvar binding13\nvar binding14\nvar binding15\nvar binding16\nvar binding17\nvar binding18\nvar binding19\nvar binding20\nvar binding21\nvar binding22\nvar binding23\nvar binding24\nvar binding25\nvar binding26\nvar binding27\nvar binding28\nvar binding29\nvar binding30\nvar binding31\nvar binding32\nvar binding33"}], "metadata": {"task_id": "Iconify/170", "ground_truth": "override fun onDetachedFromWindow() {\n        installationTask?.cancel()\n\n        super.onDetachedFromWindow()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nprivate fun buildEntries() {\n        mEntries = resources.getTextArray(arrayResId)\n\n        val mValues: MutableList<String> = ArrayList()\n        for (i in mEntries.indices) {", "choices": [{"text": "\n            mValues.add(mEntries.getString(i))\n        }\n\n        return mValues\n    }"}], "metadata": {"task_id": "Iconify/176", "ground_truth": "            mValues.add(i.toString())\n        }\n\n        mEntryValues = mValues.toTypedArray<CharSequence>()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nfun setSelectedIndex(selectedIndex: Int) {\n        var idx = selectedIndex\n        val list = listOf(*resources.getStringArray(arrayResId))\n\n        if (idx < 0 || idx >= list.size) {\n            idx = 0\n        }\n\n        this.selectedIndex = idx", "choices": [{"text": "\n        this.list = list\n    }"}], "metadata": {"task_id": "Iconify/182", "ground_truth": "        mValue = idx.toString()\n\n        setSelectedText(list[idx])\n        initBottomSheetDialog()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.activities.MainActivity\nimport androidx.fragment.app.FragmentActivity\nimport android.graphics.Color\nfun setColorPickerListener(\n        activity: FragmentActivity?,\n        defaultColor: Int,\n        showPresets: Boolean,\n        showAlphaSlider: Boolean,\n        showColorShades: Boolean\n    ) {\n        require(activity is MainActivity) { \"Activity must be instance of HomePage\" }\n        previewColor = defaultColor\n\n        container.setOnClickListener {\n            beforeColorPickerListener?.onColorPickerShown()\n\n            activity.showColorPickerDialog(\n                colorPickerDialogId,\n                selectedColor,\n                showPresets,", "choices": [{"text": "\n                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }"}], "metadata": {"task_id": "Iconify/188", "ground_truth": "                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.activities.MainActivity\nimport androidx.fragment.app.FragmentActivity\nimport android.graphics.Color\nfun setColorPickerListener(\n        activity: FragmentActivity?,\n        defaultColor: Int,\n        showPresets: Boolean,\n        showAlphaSlider: Boolean,\n        showColorShades: Boolean\n    ) {\n        require(activity is MainActivity) { \"Activity must be instance of HomePage\" }\n        previewColor = defaultColor\n\n        container.setOnClickListener {\n            beforeColorPickerListener?.onColorPickerShown()\n\n            activity.showColorPickerDialog(\n                colorPickerDialogId,\n                selectedColor,\n                showPresets,", "choices": [{"text": "\n                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }"}], "metadata": {"task_id": "Iconify/198", "ground_truth": "                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.SystemUtil\nimport com.drdisagree.iconify.R\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nfun setActivityResultLauncher(launcher: ActivityResultLauncher<Intent?>) {\n        activityResultLauncher = launcher\n\n        buttonPicker.setOnClickListener {\n            if (!SystemUtil.hasStoragePermission()) {\n                SystemUtil.requestStoragePermission(context)\n            } else {\n                if (::activityResultLauncher.isInitialized) {", "choices": [{"text": "\n                    activityResultLauncher.setInitialized(true)\n                } else {\n                    activityResultLauncher.setInitialized(false)\n                }\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/207", "ground_truth": "                    FileUtil.launchFilePicker(activityResultLauncher, fileType)\n                }\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\FilePickerWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nfun setSelectedIndex(selectedIndex: Int) {\n        var idx = selectedIndex\n        val list = listOf(*resources.getStringArray(arrayResId))\n\n        if (idx < 0 || idx >= list.size) {\n            idx = 0\n        }", "choices": [{"text": "\n        if (idx >= list.size) {\n            idx = list.size - 1\n        }\n\n        if (idx < 0 || idx >= list.size) {\n            idx = 0\n        }\n\n        if (idx >= list.size) {\n            idx = list.size - 1\n        }\n\n        if (idx < 0 || idx >= list.size) {\n            idx = 0\n        }\n\n        if (idx >= list.size) {\n            idx = list.size - 1\n        }\n\n        if (idx >= list."}], "metadata": {"task_id": "Iconify/214", "ground_truth": "        this.selectedIndex = idx\n\n        setSelectedText(list[idx])\n        initRadioDialog()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.ui.dialogs.RadioDialog\nimport com.drdisagree.iconify.R\nprivate fun initRadioDialog() {\n        radioDialog = RadioDialog(\n            context,", "choices": [{"text": "\n            R.string.radio_dialog_title,\n            R.string.radio_dialog_message,\n            R.string.radio_dialog_ok,\n            R.string.radio_dialog_cancel\n        );\n        radioDialog.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                radioDialog.dismiss();\n            }\n        });\n    }"}], "metadata": {"task_id": "Iconify/215", "ground_truth": "            radioDialogId,\n            selectedIndex\n        )\n        radioDialog.setRadioDialogListener(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.view.View\nfun setResetClickListener(listener: OnLongClickListener?) {\n        resetClickListener = listener\n\n        resetIcon.setOnLongClickListener { v: View ->\n            if (defaultValue == Int.MAX_VALUE) {\n                return@setOnLongClickListener false\n            }\n\n            sliderValue = defaultValue", "choices": [{"text": " = Int.MAX_VALUE\n            return@setOnLongClickListener true\n        }\n    }"}], "metadata": {"task_id": "Iconify/224", "ground_truth": "            handleResetVisibility()\n            notifyOnResetClicked(v)\n            true\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "import com.google.android.material.slider.Slider\nimport com.drdisagree.iconify.R\nprivate fun handleResetVisibility() {\n        if (defaultValue != Int.MAX_VALUE && materialSlider.value != defaultValue.toFloat()) {", "choices": [{"text": "\n            materialSlider.value = defaultValue.toFloat();\n        } else {\n            materialSlider.value = Int.MAX_VALUE;\n        }\n    }"}], "metadata": {"task_id": "Iconify/225", "ground_truth": "            resetIcon.setVisibility(VISIBLE)\n        } else {\n            resetIcon.setVisibility(GONE)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "import android.widget.TextView\nfun setSummary(summary: String?) {\n        summaryTextView.text = summary\n\n        if (summary.isNullOrEmpty()) {", "choices": [{"text": "\n            summaryTextView.setVisibility(View.VISIBLE)\n        } else {\n            summaryTextView.setVisibility(View.GONE)\n        }\n    }"}], "metadata": {"task_id": "Iconify/233", "ground_truth": "            summaryTextView.visibility = GONE\n        } else {\n            summaryTextView.visibility = VISIBLE\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\TitleWidget.kt"}}
{"prompt": "import java.nio.ByteOrder\nimport java.nio.ByteBuffer\nprivate static byte[] encodeAsSequenceOfLengthPrefixedElements(byte[][] sequence) {\r\n    int payloadSize = 0;\r\n    for (byte[] element : sequence) {\r\n        payloadSize += 4 + element.length;\r\n    }\r\n    ByteBuffer result = ByteBuffer.allocate(payloadSize);\r\n    result.order(ByteOrder.LITTLE_ENDIAN);\r\n    for (byte[] element : sequence) {", "choices": [{"text": "\n        result.put(element);\r\n    }\r\n    return result.array();\r\n}"}], "metadata": {"task_id": "Iconify/238", "ground_truth": "        result.putInt(element.length);\r\n        result.put(element);\r\n    }\r\n    return result.array();\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ApkSignerV2.java"}}
{"prompt": "import java.io.InputStream\npublic synchronized void readFrom(InputStream is, int len) {\r\n    int read;\r\n    byte[] buffer = new byte[4096];\r\n    try {\r\n        while ((read = is.read(buffer, 0, Math.min(len, buffer.length))) > 0) {\r\n            write(buffer, 0, read);\r\n            len -= read;", "choices": [{"text": "\n        }\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n}"}], "metadata": {"task_id": "Iconify/241", "ground_truth": "        }\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ByteArrayStream.java"}}
{"prompt": "import java.security.cert.X509Certificate\nimport java.security.cert.CertificateFactory\nimport java.security.GeneralSecurityException\nimport java.io.InputStream\nimport java.io.IOException\npublic static X509Certificate readCertificate(InputStream input) throws IOException, GeneralSecurityException {\r\n    try {\r\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");", "choices": [{"text": "\n        X509Certificate certificate = cf.createCertificate(input);\r\n        return certificate;\r\n    } catch (GeneralSecurityException e) {\r\n        throw new IOException(e);\r\n    }\r\n}"}], "metadata": {"task_id": "Iconify/242", "ground_truth": "        return (X509Certificate) cf.generateCertificate(input);\r\n    } finally {\r\n        input.close();\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\CryptoUtils.java"}}
{"prompt": "/**\r\n * Returns the multiple (in bytes) at which the provided {@code STORED} entry's data must start\r\n * relative to start of file or {@code 0} if alignment of this entry's data is not important.\r\n */\r\nprivate static int getStoredEntryDataAlignment(String entryName, int defaultAlignment) {\r\n    if (defaultAlignment <= 0) {\r\n        return 0;\r\n    }\r\n    if (entryName.endsWith(\".so\")) {\r\n        // Align .so contents to memory page boundary to enable memory-mapped\r\n        // execution.", "choices": [{"text": "\n        return defaultAlignment;\r\n    } else {\r\n        return entryName.lastIndexOf(\".\") + 1;\r\n    }\r\n}"}], "metadata": {"task_id": "Iconify/246", "ground_truth": "        return 4096;\r\n    } else {\r\n        return defaultAlignment;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "Iconify/247", "ground_truth": "public void write(int b) throws IOException {\r\n    super.write(b);\r\n    mCount++;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "Iconify/248", "ground_truth": "public void write(byte[] b, int off, int len) throws IOException {\r\n    super.write(b, off, len);\r\n    mCount += len;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "import com.drdisagree.iconify.Iconify.Companion.appContext\nimport android.content.pm.PackageManager\nimport android.content.pm.ApplicationInfo\nfun isAppInstalled(packageName: String?): Boolean {\n        val pm = appContext.packageManager\n\n        try {\n            pm.getPackageInfo(packageName!!, PackageManager.GET_ACTIVITIES)\n            return pm.getApplicationInfo(packageName, 0).enabled", "choices": [{"text": "\n        } catch (e) {\n            return false\n        }\n    }"}], "metadata": {"task_id": "Iconify/255", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "import com.drdisagree.iconify.Iconify.Companion.appContext\nimport android.content.pm.PackageManager\nimport android.content.pm.ApplicationInfo\nfun getAppUid(packageName: String?): Int {\n        val pm = appContext.packageManager\n\n        try {\n            pm.getPackageInfo(packageName!!, PackageManager.GET_ACTIVITIES)\n            return pm.getApplicationInfo(packageName, 0).uid", "choices": [{"text": "\n        } catch (e) {\n            return 0\n        }\n    }"}], "metadata": {"task_id": "Iconify/257", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return 0\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport com.drdisagree.iconify.Iconify.Companion.appContext\nimport androidx.core.content.ContextCompat\nimport android.graphics.drawable.Drawable\nimport android.annotation.SuppressLint\n @JvmStatic\n    @SuppressLint(\"UseCompatLoadingForDrawables\")\n    fun getAppIcon(packageName: String?): Drawable? {\n        var appIcon = ContextCompat.getDrawable(appContext, R.drawable.ic_android)\n\n        try {\n            appIcon = appContext.packageManager.getApplicationIcon(packageName!!)", "choices": [{"text": "\n        } catch (e) {\n            return null\n        }\n\n        return appIcon\n    }"}], "metadata": {"task_id": "Iconify/258", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return appIcon\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "import android.content.Context\n @JvmStatic\n    fun clearCache(context: Context) {\n        try {\n            var dir = context.cacheDir\n            deleteDir(dir)\n\n            dir = context.externalCacheDir\n            deleteDir(dir)\n\n            dir = context.filesDir", "choices": [{"text": "\n            deleteDir(dir)\n        } catch (e) {\n            Log.e(e)\n        }\n    }"}], "metadata": {"task_id": "Iconify/262", "ground_truth": "            deleteDir(dir)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\CacheUtil.kt"}}
{"prompt": "import java.io.File\nprivate fun deleteDir(dir: File?): Boolean {\n        return if (dir != null && dir.isDirectory()) {\n            val children = dir.list() ?: return false\n\n            for (child in children) {\n                val success = deleteDir(File(dir, child))\n\n                if (!success) {\n                    return false\n                }\n            }\n\n            dir.delete()\n        } else if (dir != null && dir.isFile()) {", "choices": [{"text": "\n            val children = dir.list()?: return false\n\n            for (child in children) {\n                val success = deleteDir(File(dir, child))\n\n                if (!success) {\n                    return false\n                }\n            }\n\n            dir.delete()\n        } else {\n            return false\n        }\n    }"}], "metadata": {"task_id": "Iconify/263", "ground_truth": "            dir.delete()\n        } else {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\CacheUtil.kt"}}
{"prompt": "import android.graphics.Color\nfun getHue(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)", "choices": [{"text": "        val a = Color.a(color)\n        val r = Math.round(r)\n        val g = Math.round(g)\n        val b = Math.round(b)\n        return Math.round(a + r + g + b)\n    }"}], "metadata": {"task_id": "Iconify/264", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[0]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\nfun setHue(color: Int, hue: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": "\n        hsv[0] = hue\n        hsv[1] = hue\n        hsv[2] = hue\n\n        return r\n    }"}], "metadata": {"task_id": "Iconify/265", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[0] = hue\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\nfun getSaturation(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)", "choices": [{"text": "        val a = Color.a(color)\n        val r = Math.min(r, a)\n        val g = Math.min(g, a)\n        val b = Math.min(b, a)\n        return Math.max(r, g, b)\n    }"}], "metadata": {"task_id": "Iconify/266", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[1]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\n @JvmStatic\n    fun setSaturation(color: Int, saturation: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": "\n        hsv[0] = saturation\n        hsv[1] = r\n        hsv[2] = g\n        return hsv\n    }"}], "metadata": {"task_id": "Iconify/267", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[1] += saturation\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\nfun getLightness(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)", "choices": [{"text": "        val a = Color.a(color)\n        val b = Color.b(color)\n        val a = Color.a(color)\n        val r = Color.r(color)\n        val g = Color.g(color)\n        val b = Color.b(color)\n        val a = Color.a(color)\n        val r = Color.r(color)\n        val g = Color.g(color)\n        val b = Color.b(color)\n        val a = Color.a(color)\n        val r = Color."}], "metadata": {"task_id": "Iconify/268", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[2]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import android.graphics.Color\n @JvmStatic\n    fun setLightness(color: Int, lightness: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": "\n        hsv[0] = lightness\n        hsv[1] = lightness\n        hsv[2] = lightness\n\n        return r + g + b + hsv[0] + hsv[1] + hsv[2]\n    }"}], "metadata": {"task_id": "Iconify/269", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[2] += lightness\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import androidx.annotation.AttrRes\nimport android.util.TypedValue\nimport android.graphics.Color\nimport android.content.Context\nfun getColorResCompat(context: Context, @AttrRes id: Int): Int {\n        val typedValue = TypedValue()\n        val theme = context.theme\n        theme.resolveAttribute(id, typedValue, false)\n\n        val arr = context.obtainStyledAttributes(typedValue.data, intArrayOf(id))", "choices": [{"text": "\n        return arr.length > 0? arr[0] : 0\n    }"}], "metadata": {"task_id": "Iconify/272", "ground_truth": "        @ColorInt val color = arr.getColor(0, -1)\n        arr.recycle()\n\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.color.monet.hct.Hct\n/**\r\n * If color is disliked, lighten it to make it likable.\r\n */\r\npublic static Hct fixIfDisliked(Hct hct) {", "choices": [{"text": "\n    if (hct.isDisliked()) {\r\n        hct.setDisliked(true);\r\n        return hct;\r\n    } else {\r\n        hct.setDisliked(false);\r\n        return hct;\r\n    }\r\n}"}], "metadata": {"task_id": "Iconify/281", "ground_truth": "    if (isDisliked(hct)) {\r\n        return Hct.from(hct.getHue(), hct.getChroma(), 70.0);\r\n    }\r\n    return hct;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dislike\\DislikeAnalyzer.java"}}
{"prompt": "import java.util.function.Function\nimport com.drdisagree.iconify.utils.color.monet.scheme.DynamicScheme\nimport com.drdisagree.iconify.utils.color.monet.palettes.TonalPalette\nimport androidx.annotation.NonNull\nimport java.lang.Math.max\n/**\r\n * A convenience constructor for DynamicColor.\r\n *\r\n * <p>_Strongly_ prefer using one of the convenience constructors. This class is arguably too\r\n * flexible to ensure it can support any scenario. Functional arguments allow overriding without\r\n * risks that come with subclasses.\r\n *\r\n * <p>For example, the default behavior of adjust tone at max contrast to be at a 7.0 ratio with\r\n * its background is principled and matches accessibility guidance. That does not mean it's the\r\n * desired approach for _every_ design system, and every color pairing, always, in every case.\r\n *\r\n * <p>For opaque colors (colors with alpha = 100%).\r\n *\r\n * <p>For colors that are not backgrounds, and do not have backgrounds.\r\n *\r\n * @param name    The name of the dynamic color.\r\n * @param palette Function that provides a TonalPalette given DynamicScheme. A TonalPalette is\r\n *                defined by a hue and chroma, so this replaces the need to specify hue/chroma. By providing\r\n *                a tonal palette, when contrast adjustments are made, intended chroma can be preserved.\r\n * @param tone    Function that provides a tone, given a DynamicScheme.\r\n */\r\n@NonNull\r\npublic static DynamicColor fromPalette(@NonNull String name, @NonNull Function<DynamicScheme, TonalPalette> palette, @NonNull Function<DynamicScheme, Double> tone) {\r\n    return new DynamicColor(name, palette, tone, /* isBackground= */\r\n    false, /* background= */", "choices": [{"text": "\n    false, /* isAlpha= */\r\n    false, /* alpha= */\r\n    false, /* isAlpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r"}], "metadata": {"task_id": "Iconify/283", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\DynamicColor.java"}}
{"prompt": "import java.util.function.Function\nimport com.drdisagree.iconify.utils.color.monet.scheme.DynamicScheme\nimport com.drdisagree.iconify.utils.color.monet.palettes.TonalPalette\nimport androidx.annotation.NonNull\nimport java.lang.Math.max\n/**\r\n * A convenience constructor for DynamicColor.\r\n *\r\n * <p>_Strongly_ prefer using one of the convenience constructors. This class is arguably too\r\n * flexible to ensure it can support any scenario. Functional arguments allow overriding without\r\n * risks that come with subclasses.\r\n *\r\n * <p>For example, the default behavior of adjust tone at max contrast to be at a 7.0 ratio with\r\n * its background is principled and matches accessibility guidance. That does not mean it's the\r\n * desired approach for _every_ design system, and every color pairing, always, in every case.\r\n *\r\n * <p>For opaque colors (colors with alpha = 100%).\r\n *\r\n * <p>For colors that do not have backgrounds.\r\n *\r\n * @param name         The name of the dynamic color.\r\n * @param palette      Function that provides a TonalPalette given DynamicScheme. A TonalPalette is\r\n *                     defined by a hue and chroma, so this replaces the need to specify hue/chroma. By providing\r\n *                     a tonal palette, when contrast adjustments are made, intended chroma can be preserved.\r\n * @param tone         Function that provides a tone, given a DynamicScheme.\r\n * @param isBackground Whether this dynamic color is a background, with some other color as the\r\n *                     foreground.\r\n */\r\n@NonNull\r\npublic static DynamicColor fromPalette(@NonNull String name, @NonNull Function<DynamicScheme, TonalPalette> palette, @NonNull Function<DynamicScheme, Double> tone, boolean isBackground) {\r\n    return new DynamicColor(name, palette, tone, isBackground, /* background= */", "choices": [{"text": ")\r\n       .setAlpha(max(0, tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone.apply(tone"}], "metadata": {"task_id": "Iconify/284", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\DynamicColor.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor background() {\r\n    return new DynamicColor(/* name= */\r\n    \"background\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 98.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "(s) -> s.isDark? 6.0 : 98.0, /* isBackground= */\r\n    false, /* background= */\r\n    false);\r\n}"}], "metadata": {"task_id": "Iconify/293", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surface() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 98.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "(s) -> s.isDark? 6.0 : 98.0, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha"}], "metadata": {"task_id": "Iconify/295", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceDim() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_dim\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 87.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    (s) -> s.isDark? 6.0 : 87.0, /* alpha= */\r\n    (s) -> s.isDark? 6.0 : 87.0, /* alpha2= */\r\n    (s) -> s.isDark? 6.0 : 87.0, /* alpha3= */\r\n    (s) -> s.isDark? 6.0 : 87.0, /* alpha4= */\r\n    (s) -> s.isDark? 6.0 : 87.0,"}], "metadata": {"task_id": "Iconify/296", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceBright() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_bright\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 24.0 : 98.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    new DynamicColor(/* name= */\r\n    \"surface_bright\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 24.0 : 98.0, /* isBackground= */\r\n    true, /* background= */\r\n    new DynamicColor(/* name= */\r\n    \"surface_bright\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark"}], "metadata": {"task_id": "Iconify/297", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerLowest() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_lowest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 4.0 : 100.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    new DynamicColor(/* name= */\r\n    \"surface_container_highest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 4.0 : 100.0, /* isBackground= */\r\n    true, /* background= */\r\n    new DynamicColor(/* name= */\r\n    \"surface_container_highest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s)"}], "metadata": {"task_id": "Iconify/298", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerLow() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_low\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 10.0 : 96.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    new DynamicColor(/* name= */\r\n    \"surface_container_high\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 10.0 : 96.0, /* isBackground= */\r\n    true, /* background= */\r\n    new DynamicColor(/* name= */\r\n    \"surface_container_dark\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s"}], "metadata": {"task_id": "Iconify/299", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainer() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 12.0 : 94.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    new DynamicColor(/* name= */\r\n    \"surface_container\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 12.0 : 94.0, /* isBackground= */\r\n    true, /* background= */\r\n    new DynamicColor(/* name= */\r\n    \"surface_container\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark"}], "metadata": {"task_id": "Iconify/300", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerHigh() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_high\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 17.0 : 92.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    new DynamicColor(/* name= */\r\n    \"surface_container_high\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 17.0 : 92.0, /* isBackground= */\r\n    true, /* background= */\r\n    new DynamicColor(/* name= */\r\n    \"surface_container_high\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s"}], "metadata": {"task_id": "Iconify/301", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerHighest() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_highest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 22.0 : 90.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    new DynamicColor(/* name= */\r\n    \"surface_container_highest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark? 22.0 : 90.0, /* isBackground= */\r\n    true, /* background= */\r\n    new DynamicColor(/* name= */\r\n    \"surface_container_highest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s)"}], "metadata": {"task_id": "Iconify/302", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import com.drdisagree.iconify.utils.color.monet.scheme.Variant\nimport androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceVariant() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_variant\", /* palette= */\r\n    (s) -> s.neutralVariantPalette, /* tone= */\r\n    (s) -> s.isDark ? 30.0 : 90.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    new DynamicColor(/* name= */\r\n    \"surface_background\", /* palette= */\r\n    (s) -> s.neutralVariantPalette, /* tone= */\r\n    (s) -> s.isDark? 30.0 : 90.0, /* isBackground= */\r\n    true, /* background= */\r\n    new DynamicColor(/* name= */\r\n    \"surface_background\", /* palette= */\r\n    (s) -> s.neutralVariantPalette, /* tone= */\r\n    (s) -> s.is"}], "metadata": {"task_id": "Iconify/304", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor inverseSurface() {\r\n    return new DynamicColor(/* name= */\r\n    \"inverse_surface\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 90.0 : 20.0, /* isBackground= */\r\n    false, /* background= */", "choices": [{"text": "(s) -> s.isDark? 90.0 : 20.0, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha= */\r\n    false, /* alpha"}], "metadata": {"task_id": "Iconify/306", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor shadow() {\r\n    return new DynamicColor(/* name= */\r\n    \"shadow\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> 0.0, /* isBackground= */\r\n    false, /* background= */", "choices": [{"text": "(s) -> s.neutralPalette, /* tone= */\r\n    (s) -> 0.0, /* isForeground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground= */\r\n    false, /* foreground"}], "metadata": {"task_id": "Iconify/310", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor scrim() {\r\n    return new DynamicColor(/* name= */\r\n    \"scrim\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> 0.0, /* isBackground= */\r\n    false, /* background= */", "choices": [{"text": "(s) -> s.neutralPalette, /* tone= */\r\n    (s) -> 0.0, /* isBackground= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background= */\r\n    false, /* background"}], "metadata": {"task_id": "Iconify/311", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceTint() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_tint\", /* palette= */\r\n    (s) -> s.primaryPalette, /* tone= */\r\n    (s) -> s.isDark ? 80.0 : 40.0, /* isBackground= */\r\n    true, /* background= */", "choices": [{"text": "\n    new DynamicColor(/* name= */\r\n    \"surface_tint\", /* palette= */\r\n    (s) -> s.secondaryPalette, /* tone= */\r\n    (s) -> s.isDark? 80.0 : 40.0, /* isBackground= */\r\n    true, /* background= */\r\n    new DynamicColor(/* name= */\r\n    \"surface_tint\", /* palette= */\r\n    (s) -> s.primaryPalette, /* tone= */\r\n    (s) -> s.isDark? 80"}], "metadata": {"task_id": "Iconify/312", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "import androidx.annotation.NonNull\n// colorControlHighlight documented, in both M3 & GM3:\r\n// Light mode: #1f000000 dark mode: #33ffffff.\r\n// These are black and white with some alpha.\r\n// 1F hex = 31 decimal; 31 / 255 = 12% alpha.\r\n// 33 hex = 51 decimal; 51 / 255 = 20% alpha.\r\n// DynamicColors do not support alpha currently, and _may_ not need it for this use case,\r\n// depending on how MDC resolved alpha for the other cases.\r\n// Returning black in dark mode, white in light mode.\r\n@NonNull\r\npublic DynamicColor controlHighlight() {\r\n    return new DynamicColor(/* name= */\r\n    \"control_highlight\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 100.0 : 0.0, /* isBackground= */\r\n    false, /* background= */\r\n    null, /* secondBackground= */", "choices": [{"text": "(s) -> s.isDark? 100.0 : 0.0)\r\n}"}], "metadata": {"task_id": "Iconify/333", "ground_truth": "    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null, /* opacity= */\r\n    s -> s.isDark ? 0.20 : 0.12);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "/**\r\n * Create an ARGB color with HCT hue and chroma of this Tones instance, and the provided HCT tone.\r\n *\r\n * @param tone HCT tone, measured from 0 to 100.\r\n * @return ARGB representation of a color with that tone.\r\n */\r\n// AndroidJdkLibsChecker is higher priority than ComputeIfAbsentUseValue (b/119581923)\r\n@SuppressWarnings(\"ComputeIfAbsentUseValue\")\r\npublic int tone(int tone) {\r\n    Integer color = cache.get(tone);\r\n    if (color == null) {", "choices": [{"text": "\n        color = new Integer(tone);\r\n        cache.put(tone, color);\r\n    }\r\n    return color;\r\n}"}], "metadata": {"task_id": "Iconify/346", "ground_truth": "        color = Hct.from(this.hue, this.chroma, tone).toInt();\r\n        cache.put(tone, color);\r\n    }\r\n    return color;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\palettes\\TonalPalette.java"}}
{"prompt": "import java.util.Map\nimport java.util.List\nimport java.util.LinkedHashMap\n@Override\r\npublic QuantizerResult quantize(int[] pixels, int colorCount) {\r\n    QuantizerResult mapResult = new QuantizerMap().quantize(pixels, colorCount);\r\n    constructHistogram(mapResult.colorToCount);\r\n    createMoments();\r\n    CreateBoxesResult createBoxesResult = createBoxes(colorCount);\r\n    List<Integer> colors = createResult(createBoxesResult.resultCount);\r\n    Map<Integer, Integer> resultMap = new LinkedHashMap<>();", "choices": [{"text": "\n    for (int i = 0; i < colors.size(); i++) {\r\n        resultMap.put(colors.get(i), i);\r\n    }\r\n    return mapResult;\r\n}"}], "metadata": {"task_id": "Iconify/351", "ground_truth": "    for (int color : colors) {\r\n        resultMap.put(color, 0);\r\n    }\r\n    return new QuantizerResult(resultMap);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\quantize\\QuantizerWu.java"}}
{"prompt": "/**\r\n * Determines if an angle is between two other angles, rotating clockwise.\r\n */\r\nprivate static boolean isBetween(double angle, double a, double b) {", "choices": [{"text": ", double c) {\r\n    return Math.abs(angle - a) < Math.abs(angle - b) && Math.abs(c - a) < Math.abs(c - b);\r\n}"}], "metadata": {"task_id": "Iconify/383", "ground_truth": "    if (a < b) {\r\n        return a <= angle && angle <= b;\r\n    }\r\n    return a <= angle || angle <= b;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\temperature\\TemperatureCache.java"}}
{"prompt": "import com.drdisagree.iconify.utils.color.monet.hct.Hct\n/**\r\n * Temperature relative to all colors with the same chroma and tone.\r\n *\r\n * @param hct HCT to find the relative temperature of.\r\n * @return Value on a scale from 0 to 1.\r\n */\r\npublic double getRelativeTemperature(Hct hct) {\r\n    double range = getTempsByHct().get(getWarmest()) - getTempsByHct().get(getColdest());\r\n    double differenceFromColdest = getTempsByHct().get(hct) - getTempsByHct().get(getColdest());\r\n    // Handle when there's no difference in temperature between warmest and\r\n    // coldest: for example, at T100, only one color is available, white.", "choices": [{"text": "\n    if (range < 0 || differenceFromColdest < 0) {\r\n        return 0;\r\n    } else {\r\n        return range;\r\n    }\r\n}"}], "metadata": {"task_id": "Iconify/384", "ground_truth": "    if (range == 0.) {\r\n        return 0.5;\r\n    }\r\n    return differenceFromColdest / range;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\temperature\\TemperatureCache.java"}}
{"prompt": "static double labF(double t) {\r\n    double e = 216.0 / 24389.0;\r\n    double kappa = 24389.0 / 27.0;\r\n    if (t > e) {", "choices": [{"text": "\n        e = kappa;\r\n    } else {\r\n        kappa = 216.0 / 27.0;\r\n    }\r\n    return e;\r\n}"}], "metadata": {"task_id": "Iconify/396", "ground_truth": "        return Math.pow(t, 1.0 / 3.0);\r\n    } else {\r\n        return (kappa * t + 16) / 116;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "static double labInvf(double ft) {\r\n    double e = 216.0 / 24389.0;\r\n    double kappa = 24389.0 / 27.0;\r\n    double ft3 = ft * ft * ft;\r\n    if (ft3 > e) {", "choices": [{"text": "\n        e = ft3;\r\n    }\r\n    if (kappa > e) {\r\n        kappa = e;\r\n    }\r\n    return ft3;\r\n}"}], "metadata": {"task_id": "Iconify/397", "ground_truth": "        return ft3;\r\n    } else {\r\n        return (116 * ft - 16) / kappa;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "/**\r\n * The signum function.\r\n *\r\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\r\n */\r\npublic static int signum(double num) {\r\n    if (num < 0) {\r\n        return -1;\r\n    } else if (num == 0) {", "choices": [{"text": " (num > 0) {\r\n        return 1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}"}], "metadata": {"task_id": "Iconify/398", "ground_truth": "        return 0;\r\n    } else {\r\n        return 1;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "/**\r\n * Clamps an integer between two integers.\r\n *\r\n * @return input when min <= input <= max, and either min or max otherwise.\r\n */\r\npublic static int clampInt(int min, int max, int input) {\r\n    if (input < min) {\r\n        return min;", "choices": [{"text": "\n    } else if (input > max) {\r\n        return max;\r\n    } else {\r\n        return input;\r\n    }\r\n}"}], "metadata": {"task_id": "Iconify/399", "ground_truth": "    } else if (input > max) {\r\n        return max;\r\n    }\r\n    return input;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "/**\r\n * Clamps an integer between two floating-point numbers.\r\n *\r\n * @return input when min <= input <= max, and either min or max otherwise.\r\n */\r\npublic static double clampDouble(double min, double max, double input) {\r\n    if (input < min) {\r\n        return min;", "choices": [{"text": "\n    } else if (input > max) {\r\n        return max;\r\n    } else {\r\n        return input;\r\n    }\r\n}"}], "metadata": {"task_id": "Iconify/400", "ground_truth": "    } else if (input > max) {\r\n        return max;\r\n    }\r\n    return input;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "/**\r\n * Sanitizes a degree measure as an integer.\r\n *\r\n * @return a degree measure between 0 (inclusive) and 360 (exclusive).\r\n */\r\npublic static int sanitizeDegreesInt(int degrees) {\r\n    degrees = degrees % 360;", "choices": [{"text": "\n    degrees = degrees >= 0? degrees : 360;\r\n    return degrees;\r\n}"}], "metadata": {"task_id": "Iconify/401", "ground_truth": "    if (degrees < 0) {\r\n        degrees = degrees + 360;\r\n    }\r\n    return degrees;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "/**\r\n * Sanitizes a degree measure as a floating-point number.\r\n *\r\n * @return a degree measure between 0.0 (inclusive) and 360.0 (exclusive).\r\n */\r\npublic static double sanitizeDegreesDouble(double degrees) {\r\n    degrees = degrees % 360.0;", "choices": [{"text": "\n    degrees = Math.abs(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round(degrees);\r\n    degrees = Math.round"}], "metadata": {"task_id": "Iconify/402", "ground_truth": "    if (degrees < 0) {\r\n        degrees = degrees + 360.0;\r\n    }\r\n    return degrees;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "fun setValue(newValue: T) {\n        if (value !== newValue) {", "choices": [{"text": "\n            value = newValue;\n        }\n    }"}], "metadata": {"task_id": "Iconify/406", "ground_truth": "            value = newValue\n\n            listener?.onChange(value)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\extension\\ObservableVariable.kt"}}
{"prompt": "private fun closeQuietly(autoCloseable: AutoCloseable?) {", "choices": [{"text": "\n    if (autoCloseable == null) {\n        throw new NullPointerException(\"autoCloseable\");\n    }\n    if (autoCloseable == null) {\n        throw new NullPointerException(\"autoCloseable\");\n    }\n    if (autoCloseable == null) {\n        throw new NullPointerException(\"autoCloseable\");\n    }\n    if (autoCloseable == null) {\n        throw new NullPointerException(\"autoCloseable\");\n    }\n    if (autoCloseable == null) {\n        throw new NullPointerException(\"autoCloseable\");\n    }\n    if (autoCloseable =="}], "metadata": {"task_id": "Iconify/412", "ground_truth": "        try {\n            autoCloseable?.close()\n        } catch (ignored: Exception) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "import java.io.OutputStream\nimport java.io.InputStream\nimport java.io.IOException\n @Throws(IOException::class)\n    fun copy(input: InputStream, output: OutputStream) {\n        val buffer = ByteArray(1024)\n        var n: Int", "choices": [{"text": "\n        for (var i = 0; i < buffer.length; i++) {\n            buffer[i] = input.read(buffer[i])\n        }\n        output.write(buffer)\n    }"}], "metadata": {"task_id": "Iconify/414", "ground_truth": "\n        while (-1 != input.read(buffer).also { n = it }) {\n            output.write(buffer, 0, n)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "import android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details: List<String?>) {\n        val log = deviceInfo\n\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')\n        log.append(tag).append(\":\\n\")\n\n        for (line in details) {", "choices": [{"text": "\n            log.append(line).append('\\n')\n        }\n    }"}], "metadata": {"task_id": "Iconify/423", "ground_truth": "            log.append('\\t').append(line).append('\\n')\n        }\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "import android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details: String?) {\n        val log = deviceInfo\n\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')", "choices": [{"text": "\n        log.append(details).append('\\n')\n        log.append('\\n')\n        log.append(tag).append('\\n')\n    }"}], "metadata": {"task_id": "Iconify/424", "ground_truth": "        log.append(tag).append(\":\\n\")\n        log.append(details).append('\\n')\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "import java.io.StringWriter\nimport java.io.PrintWriter\nimport android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, exception: Exception) {\n        val log = deviceInfo\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')\n        log.append(tag).append(\":\\n\")\n\n        val writer = StringWriter()\n        exception.printStackTrace(PrintWriter(writer))", "choices": [{"text": "\n        log.append('\\n')\n        log.append(writer.toString())\n        log.append('\\n')\n    }"}], "metadata": {"task_id": "Iconify/425", "ground_truth": "        val str = writer.toString()\n        log.append(str).append('\\n')\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nimport com.drdisagree.iconify.common.Resources\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun handleModule() {\n        if (moduleExists()) {\n            // Clean temporary directory\n            Shell.cmd(\"rm -rf \" + Resources.TEMP_DIR).exec()\n\n            // Backup necessary files", "choices": [{"text": "\n            Shell.cmd(\"mkdir -p \" + Resources.TEMP_DIR).exec()\n            Shell.cmd(\"mv \" + Resources.TEMP_DIR + \" \" + Resources.TEMP_DIR).exec()\n        }\n    }"}], "metadata": {"task_id": "Iconify/429", "ground_truth": "            backupFiles()\n        }\n\n        installModule()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\ModuleUtil.kt"}}
{"prompt": "import android.os.Build\nprivate fun keepFirstDigit(input: String): String {\n        val output = StringBuilder()\n        var firstDigitFound = false\n\n        for (c in input.toCharArray()) {\n            if (Character.isDigit(c)) {\n                if (!firstDigitFound) {\n                    output.append(c)\n                    firstDigitFound = true\n                }\n            } else {\n                output.append(c)", "choices": [{"text": "\n                firstDigitFound = false\n            }\n        }\n\n        return output.toString()\n    }"}], "metadata": {"task_id": "Iconify/434", "ground_truth": "            }\n        }\n\n        return output.toString()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\CompilerUtil.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nprivate fun createManifestResource(\n        overlayName: String?,\n        targetPackage: String?,\n        source: String\n    ): Boolean {\n        Shell.cmd(\"mkdir -p $source/res\").exec()\n\n        val values = arrayOf(\"values\", \"values-land\", \"values-night\")\n\n        for (i in 0..2) {\n            Shell.cmd(\"mkdir -p \" + source + \"/res/\" + values[i]).exec()\n            Shell.cmd(\n                \"printf '\" + mResource[i] + \"' > \" + source + \"/res/\" + values[i] + \"/iconify.xml;\"", "choices": [{"text": "\n            ).exec()\n        }\n\n        Shell.cmd(\"mkdir -p \" + overlayName + \"/res\").exec()\n        Shell.cmd(\"mkdir -p \" + overlayName + \"/res/\" + values[0]).exec()\n        Shell.cmd(\"mkdir -p \" + overlayName + \"/res/\" + values[1]).exec()\n        Shell.cmd(\"mkdir -p \" + overlayName + \"/res/\" + values[2]).exec()\n        Shell.cmd(\"mkdir -p \" + overlayName + \"/res/\" + values[3]).exec"}], "metadata": {"task_id": "Iconify/436", "ground_truth": "            ).exec()\n        }\n\n        return OverlayCompiler.createManifest(overlayName, targetPackage, source)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\DynamicCompiler.kt"}}
{"prompt": "@JvmStatic\n    fun createManifest(name: String?, target: String?, source: String): Boolean {\n        var hasErroredOut = false\n        var attempt = 3\n\n        while (attempt-- != 0) {\n            if (OverlayCompiler.createManifest(name, target, source)) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored: Exception) {\n                }\n            } else {\n                hasErroredOut = true\n                break", "choices": [{"text": "\n            }\n        }\n\n        return hasErroredOut\n    }"}], "metadata": {"task_id": "Iconify/438", "ground_truth": "            }\n        }\n\n        return !hasErroredOut\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\OnboardingCompiler.kt"}}
{"prompt": "import java.util.Locale\nfun listContains(list: List<String>, target: String): Boolean {\n        for (item in list) {\n            if (item.lowercase(Locale.getDefault())\n                    .contains(target.lowercase(Locale.getDefault()))\n            ) {\n                return true", "choices": [{"text": "\n            }\n        }\n        return false\n    }"}], "metadata": {"task_id": "Iconify/442", "ground_truth": "            }\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\OverlayCompiler.kt"}}
{"prompt": "import java.util.concurrent.atomic.AtomicBoolean\nimport com.drdisagree.iconify.utils.overlay.compiler.DynamicCompiler.buildOverlay\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun buildOverlayWithResource(vararg resourceEntries: ResourceEntry?): Boolean {\n        val hasErroredOut = AtomicBoolean(false)\n\n        try {\n            createResource(*resourceEntries.filterNotNull().toTypedArray())\n        } catch (e: Exception) {\n            hasErroredOut.set(true)", "choices": [{"text": "\n            hasErroredOut.set(true)\n        }\n\n        return hasErroredOut\n    }"}], "metadata": {"task_id": "Iconify/462", "ground_truth": "            Log.e(TAG, \"buildOverlayWithResource:\", e)\n        }\n\n        return hasErroredOut.get()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.overlay.compiler.DynamicCompiler.buildOverlay\nimport com.drdisagree.iconify.utils.SystemUtil.requestStoragePermission\nimport com.drdisagree.iconify.utils.SystemUtil.hasStoragePermission\nimport com.drdisagree.iconify.R\nimport android.content.Context\n @JvmStatic\n    fun buildOverlayWithResource(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                createResource(*resourceEntries.filterNotNull().toTypedArray())", "choices": [{"text": "\n            } catch (Exception e) {\n                e.printStackTrace()\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/463", "ground_truth": "            } catch (e: Exception) {\n                Log.e(TAG, \"buildOverlayWithResource:\", e)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "import java.util.concurrent.atomic.AtomicBoolean\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun removeResourceFromOverlay(vararg resourceEntries: ResourceEntry?): Boolean {\n        val hasErroredOut = AtomicBoolean(false)\n\n        try {\n            removeResource(*resourceEntries.filterNotNull().toTypedArray())\n        } catch (e: Exception) {\n            hasErroredOut.set(true)", "choices": [{"text": "\n            hasErroredOut.set(true)\n        }\n\n        return hasErroredOut.get()\n    }"}], "metadata": {"task_id": "Iconify/464", "ground_truth": "            Log.e(TAG, \"removeResourceFromOverlay:\", e)\n        }\n\n        return hasErroredOut.get()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "import com.drdisagree.iconify.utils.SystemUtil.requestStoragePermission\nimport com.drdisagree.iconify.utils.SystemUtil.hasStoragePermission\nimport com.drdisagree.iconify.R\nimport android.content.Context\n @JvmStatic\n    fun removeResourceFromOverlay(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                removeResource(*resourceEntries.filterNotNull().toTypedArray())", "choices": [{"text": "\n            } catch (Exception e) {\n                e.printStackTrace()\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/465", "ground_truth": "            } catch (e: Exception) {\n                Log.e(TAG, \"removeResourceFromOverlay:\", e)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "import org.json.JSONObject\nimport com.drdisagree.iconify.R\n @Throws(Exception::class)\n    private fun createResource(vararg resourceEntries: ResourceEntry) {\n        val jsonObject = resources\n        val newJsonObject = generateJsonData(*resourceEntries)\n        val mergedJson = Array(3) { JSONObject() }\n\n        for (i in 0..2) {\n            mergedJson[i] = initResourceIfNull(JSONObject())\n\n            mergeJsonObjects(mergedJson[i], jsonObject[i])\n            mergeJsonObjects(mergedJson[i], newJsonObject[i])\n        }", "choices": [{"text": "\n        mergeJsonObjects(mergedJson[0], jsonObject[0])\n        mergeJsonObjects(mergedJson[1], newJsonObject[0])\n        mergeJsonObjects(mergedJson[2], newJsonObject[1])\n        mergeJsonObjects(mergedJson[3], newJsonObject[2])\n        mergeJsonObjects(mergedJson[4], newJsonObject[3])\n        mergeJsonObjects(mergedJson[5], newJsonObject[4])\n        mergeJsonObjects(mergedJson[6], newJsonObject[5])\n        mergeJsonObjects(mergedJson[7], newJsonObject[6])\n"}], "metadata": {"task_id": "Iconify/466", "ground_truth": "\n        saveResources(mergedJson)\n\n        DynamicCompilerExecutor().execute()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "@JvmStatic\n    fun isOverlayInstalled(enabledOverlays: List<String>, pkgName: String): Boolean {\n        for (line in enabledOverlays) {", "choices": [{"text": "\n            if (pkgName.equals(line)) {\n                return true;\n            }\n        }\n        return false;\n    }"}], "metadata": {"task_id": "Iconify/472", "ground_truth": "            if (line == pkgName) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\OverlayUtil.kt"}}
{"prompt": "import com.drdisagree.iconify.config.Prefs\n @JvmStatic\n    fun enableOverlaysExclusiveInCategory(vararg pkgNames: String?) {\n        val command = StringBuilder()\n\n        for (pkgName in pkgNames) {\n            Prefs.putBoolean(pkgName, true)\n\n            command.append(\"cmd overlay enable-exclusive --user current --category \")\n                .append(pkgName).append(\"; cmd overlay set-priority \").append(pkgName)", "choices": [{"text": "\n            Prefs.putBoolean(pkgName, false)\n        }\n\n        command.append(\"cmd overlay disable-exclusive --user current --category \")\n           .append(pkgName).append(\"; cmd overlay set-priority \").append(pkgName)\n    }"}], "metadata": {"task_id": "Iconify/476", "ground_truth": "                .append(\" highest; \")\n        }\n\n        Shell.cmd(command.toString().trim { it <= ' ' }).submit()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\OverlayUtil.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nval isKSUInstalled Boolean\nval isDeviceRooted Boolean\nval isApatchInstalled Boolean\nfun fileExists(dir: String): Boolean {\n        val lines = Shell.cmd(\"test -f $dir && echo '1'\").exec().out\n\n        for (line in lines) {", "choices": [{"text": "\n            if (line.startsWith(dir)) {\n                return true\n            }\n        }\n\n        return false\n    }"}], "metadata": {"task_id": "Iconify/481", "ground_truth": "            if (line.contains(\"1\")) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\RootUtil.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\n @JvmStatic\n    fun folderExists(dir: String): Boolean {\n        val lines = Shell.cmd(\"test -d $dir && echo '1'\").exec().out\n\n        for (line in lines) {", "choices": [{"text": "\n            if (line.startsWith(dir)) {\n                return true;\n            }\n        }\n\n        return false;\n    }"}], "metadata": {"task_id": "Iconify/482", "ground_truth": "            if (line.contains(\"1\")) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\RootUtil.kt"}}
{"prompt": "import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport de.robv.android.xposed.XposedBridge.log\nimport com.drdisagree.iconify.xposed.utils.BootLoopProtector\nimport com.drdisagree.iconify.config.XPrefs\nprivate fun onXPrefsReady(loadPackageParam: LoadPackageParam) {\n        if (BootLoopProtector.isBootLooped(loadPackageParam.packageName)) {\n            log(\"Possible bootloop in ${loadPackageParam.packageName} ; Iconify will not load for now...\")\n            return\n        }", "choices": [{"text": "\n        XPrefs.load(loadPackageParam.packageName)\n    }"}], "metadata": {"task_id": "Iconify/493", "ground_truth": "\n        SystemUtil(mContext!!)\n\n        loadModPacks(loadPackageParam)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\HookEntry.kt"}}
{"prompt": "import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport com.drdisagree.iconify.config.XPrefs.Xprefs\nprivate fun waitForXprefsLoad(loadPackageParam: LoadPackageParam) {\n        while (true) {\n            try {\n                Xprefs?.getBoolean(\"LoadTestBooleanValue\", false)\n                break\n            } catch (ignored: Throwable) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored1: Throwable) {\n                }\n            }\n        }", "choices": [{"text": " {\n            Xprefs?.setBoolean(\"LoadTestBooleanValue\", true)\n        }\n    }"}], "metadata": {"task_id": "Iconify/494", "ground_truth": "\n        log(\"Iconify Version: ${BuildConfig.VERSION_NAME}\")\n\n        onXPrefsReady(loadPackageParam)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\HookEntry.kt"}}
{"prompt": "import de.robv.android.xposed.XposedHelpers.getAdditionalInstanceField\nimport com.drdisagree.iconify.xposed.modules.batterystyles.BatteryDrawable\nimport android.graphics.drawable.Drawable\nprivate fun updateCustomizeBatteryDrawable(thisObject: Any) {\n        if (!customBatteryEnabled) return\n\n        val mBatteryDrawable = getAdditionalInstanceField(\n            thisObject,", "choices": [{"text": "\n            \"batteryDrawable\",\n            BatteryDrawable.class\n        );\n\n        if (mBatteryDrawable!= null) {\n            mBatteryDrawable.setCustomBatteryEnabled(customBatteryEnabled);\n        }\n    }"}], "metadata": {"task_id": "Iconify/502", "ground_truth": "            \"mBatteryDrawable\"\n        ) as BatteryDrawable\n\n        updateCustomizeBatteryDrawable(mBatteryDrawable)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BatteryStyleManager.kt"}}
{"prompt": "import com.drdisagree.iconify.xposed.modules.batterystyles.BatteryDrawable\nimport com.drdisagree.iconify.R\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nprivate fun updateCustomizeBatteryDrawable(mBatteryDrawable: BatteryDrawable) {\n        if (!customBatteryEnabled) return\n\n        mBatteryDrawable.customizeBatteryDrawable(\n            mBatteryLayoutReverse,\n            mScaledPerimeterAlpha,\n            mScaledFillAlpha,\n            mCustomBlendColor,\n            mRainbowFillColor,\n            mCustomFillColor,\n            mCustomFillGradColor,\n            mCustomChargingColor,", "choices": [{"text": "            mBatteryLayoutReverse,\n            mScaledPerimeterAlpha,\n            mScaledFillAlpha,\n            mCustomBlendColor,\n            mRainbowFillColor,\n            mCustomFillColor,\n            mCustomFillGradColor,\n            mCustomChargingColor\n        );\n    }"}], "metadata": {"task_id": "Iconify/503", "ground_truth": "            mCustomPowerSaveColor,\n            mCustomPowerSaveFillColor,\n            mChargingIconSwitch\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BatteryStyleManager.kt"}}
{"prompt": "import android.graphics.Paint\nimport android.graphics.Color\nvar mChargingColor\nvar mPowerSaveColor\nvar mFGColor\noverride fun setColors(fgColor: Int, bgColor: Int, singleToneColor: Int) {\n        mFGColor = fgColor\n        mBoltPaint.setColor(mFGColor)", "choices": [{"text": "\n        mChargingColor = bgColor\n        mPowerSaveColor = singleToneColor\n        mBoltPaint.setColor(mFGColor)\n    }"}], "metadata": {"task_id": "Iconify/513", "ground_truth": "        mFramePaint.setColor(bgColor)\n        mTextPaint.setColor(mFGColor)\n        initColors()\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            }\n            i++\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/521", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/525", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/532", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/536", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/544", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/548", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/554", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/558", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/564", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/568", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/574", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "val fillColorStrokeProtection\nvar fillColor Int\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/578", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/585", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/589", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/595", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/599", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/605", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/609", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/615", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/619", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/625", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/629", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/635", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/639", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/645", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/649", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/656", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/660", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "import android.graphics.Paint\nimport android.graphics.Color\noverride fun setColors(fgColor: Int, bgColor: Int, singleToneColor: Int) {\n        fillColor = fgColor\n\n        fillPaint.color = fillColor\n        fillColorStrokePaint.color = fillColor\n\n        backgroundColor = bgColor\n        dualToneBackgroundFill.color = bgColor\n\n        // Also update the level color, since fillColor may have changed\n        levelColor = batteryColorForLevel(batteryLevel)", "choices": [{"text": "\n        singleToneBackgroundFill.color = singleToneColor\n    }"}], "metadata": {"task_id": "Iconify/661", "ground_truth": "        boltColor = singleToneColor\n        boltPaint.color = boltColor\n\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/667", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/671", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/678", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/682", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/689", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/693", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/701", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "val fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/705", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/712", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/716", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/723", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "val fillMask\nval scaledFill\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/727", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/733", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/737", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/743", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "val fillMask\nvar invertFillIcon\nval perimeterPath\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/747", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/754", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "var invertFillIcon\nval errorPerimeterPath\nval scaledErrorPerimeter", "choices": [{"text": "\nvar scaledErrorPerimeter = Math.sqrt(Math.pow(errorPerimeterPath, 2) + Math.pow(scaledErrorPerimeterPath, 2))\n\ninvertFillIcon = new Image()\ninvertFillIcon.src = \"images/invert_fill_icon.png\"\n\ninvertFillIcon.addEventListener(\"click\", function() {\n\tinvertFillIcon.src = \"images/invert_fill_icon.png\"\n})\n\ninvertFillIcon.addEventListener(\"click\", function() {\n\tinvertFillIcon.src = \""}], "metadata": {"task_id": "Iconify/757", "ground_truth": "override fun onBoundsChange(bounds: Rect) {\n        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/758", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/765", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "var invertFillIcon\nval errorPerimeterPath\nval scaledErrorPerimeter", "choices": [{"text": "\nvar scaledErrorPerimeter = Math.sqrt(Math.pow(errorPerimeterPath, 2) + Math.pow(scaledErrorPerimeterPath, 2))\n\ninvertFillIcon = new Image()\ninvertFillIcon.src = \"images/invert_fill_icon.png\"\n\ninvertFillIcon.addEventListener(\"click\", function() {\n\tinvertFillIcon.src = \"images/invert_fill_icon.png\"\n})\n\ninvertFillIcon.addEventListener(\"click\", function() {\n\tinvertFillIcon.src = \""}], "metadata": {"task_id": "Iconify/768", "ground_truth": "override fun onBoundsChange(bounds: Rect) {\n        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/769", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/776", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/780", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/787", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/791", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/798", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/802", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/809", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/813", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/820", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/824", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/831", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/835", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/842", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "val fillColorStrokeProtection\nvar fillColor Int\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/846", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/853", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/857", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "\n            } else {\n                i++\n            }\n        }\n        return 0\n    }"}], "metadata": {"task_id": "Iconify/864", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "val fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "\n        padding.right = right\n        padding.bottom = bottom\n    }"}], "metadata": {"task_id": "Iconify/868", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "import com.drdisagree.iconify.config.XPrefs.Xprefs\nimport com.drdisagree.iconify.common.Preferences.DEPTH_WALLPAPER_SWITCH\nimport com.drdisagree.iconify.common.Preferences.DEPTH_WALLPAPER_FADE_ANIMATION\noverride fun updatePrefs(vararg key: String) {\n        if (Xprefs == null) return\n\n        showDepthWallpaper = Xprefs!!.getBoolean(DEPTH_WALLPAPER_SWITCH, false)\n        showFadingAnimation = Xprefs!!.getBoolean(DEPTH_WALLPAPER_FADE_ANIMATION, false)\n\n        if (key.isNotEmpty() &&\n            (key[0] == DEPTH_WALLPAPER_SWITCH ||", "choices": [{"text": ") &&\n            (key[1] == DEPTH_WALLPAPER_FADE_ANIMATION || key[2] == DEPTH_WALLPAPER_FADE_ANIMATION || key[3] == DEPTH_WALLPAPER_FADE_ANIMATION || key[4] == DEPTH_WALLPAPER_FADE_ANIMATION || key[5] == DEPTH_WALLPAPER_FADE_ANIMATION || key[6] == DEPTH_WALLPAPER_FADE_AN"}], "metadata": {"task_id": "Iconify/871", "ground_truth": "                    key[0] == DEPTH_WALLPAPER_CHANGED)\n        ) {\n            updateWallpaper()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\DepthWallpaper.kt"}}
{"prompt": "import de.robv.android.xposed.XposedBridge.log\nimport android.widget.RelativeLayout\nimport android.widget.LinearLayout\nimport android.widget.ImageView\nimport android.view.View\nimport android.view.Gravity\nprivate fun ImageView.addCenterProperty() {\n        val layoutParams = layoutParams\n\n        when (layoutParams) {\n            is RelativeLayout.LayoutParams -> {\n                layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT)\n            }\n\n            is LinearLayout.LayoutParams -> {\n                layoutParams.gravity = Gravity.CENTER\n            }\n\n            else -> {\n                log(TAG + \"Invalid layoutParams: $layoutParams\")", "choices": [{"text": "\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/875", "ground_truth": "            }\n        }\n\n        setLayoutParams(layoutParams)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\HeaderImage.kt"}}
{"prompt": "import com.drdisagree.iconify.xposed.utils.SystemUtil\nimport android.graphics.Color\nprivate fun initColors(force: Boolean) {\n        val isDark: Boolean = SystemUtil.isDarkMode\n        if (isDark == this.isDark && !force) return", "choices": [{"text": "\n        this.isDark = isDark\n        super.initColors(force)\n    }"}], "metadata": {"task_id": "Iconify/881", "ground_truth": "\n        this.isDark = isDark\n\n        calculateColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA13.kt"}}
{"prompt": "import com.drdisagree.iconify.xposed.utils.SystemUtil\nimport android.graphics.Color\nprivate fun initColors(force: Boolean) {\n        val isDark: Boolean = SystemUtil.isDarkMode\n        if (isDark == this.isDark && !force) return", "choices": [{"text": "\n        this.isDark = isDark\n        super.initColors(force)\n    }"}], "metadata": {"task_id": "Iconify/883", "ground_truth": "\n        this.isDark = isDark\n\n        calculateColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA14.kt"}}
{"prompt": "import de.robv.android.xposed.XposedHelpers.callMethod\nimport android.view.View\nimport android.graphics.Color\nprivate fun setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n        callMethod(\n            modernStatusBarViewBinding,", "choices": [{"text": "\n            \"setMobileIconTint\",\n            textColor\n        );\n    }"}], "metadata": {"task_id": "Iconify/884", "ground_truth": "            \"onIconTintChanged\",\n            textColor,\n            textColor\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA14.kt"}}
{"prompt": "import de.robv.android.xposed.XposedHelpers.callMethod\nimport android.view.View\nimport android.graphics.Color\nprivate fun setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n        callMethod(\n            modernStatusBarViewBinding,", "choices": [{"text": "\n            \"setMobileIconTint\",\n            textColor\n        );\n    }"}], "metadata": {"task_id": "Iconify/897", "ground_truth": "            \"onIconTintChanged\",\n            textColor,\n            textColor\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSLightThemeA14.kt"}}
{"prompt": "import android.view.Display\nimport android.content.Context\nfun isScreenOn(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_ON) {", "choices": [{"text": "\n                return true\n            }\n        }\n        return false\n    }"}], "metadata": {"task_id": "Iconify/899", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "import android.view.Display\nimport android.content.Context\nfun isScreenOff(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_OFF) {", "choices": [{"text": "\n                return true\n            }\n        }\n        return false\n    }"}], "metadata": {"task_id": "Iconify/900", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "import android.view.Display\nimport android.content.Context\nfun isScreenDozing(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_DOZE ||\n                display.state == Display.STATE_DOZE_SUSPEND\n            ) {", "choices": [{"text": "\n                return true\n            }\n        }\n        return false\n    }"}], "metadata": {"task_id": "Iconify/901", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "import de.robv.android.xposed.XposedHelpers\nfun dumpClass(className: String, classLoader: ClassLoader?) {\n        val ourClass = XposedHelpers.findClassIfExists(className, classLoader)\n        if (ourClass == null) {", "choices": [{"text": "\n            ourClass = XposedHelpers.findClass(className, classLoader)\n        }\n        return ourClass\n    }"}], "metadata": {"task_id": "Iconify/908", "ground_truth": "            log(\"Class: $className not found\")\n            return\n        }\n        dumpClass(ourClass)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "import de.robv.android.xposed.XC_MethodHook\nfun tryHookAllMethods(clazz: Class<*>?, method: String?, hook: XC_MethodHook?) {", "choices": [{"text": "\n    if (clazz == null) {\n        throw new NullPointerException(\"clazz\");\n    }\n    if (method == null) {\n        throw new NullPointerException(\"method\");\n    }\n    if (hook == null) {\n        throw new NullPointerException(\"hook\");\n    }\n    if (clazz == null) {\n        throw new NullPointerException(\"clazz\");\n    }\n    if (method == null) {\n        throw new NullPointerException(\"method\");\n    }\n    if (hook == null) {\n        throw new NullPointerException(\"hook\");\n    }\n    if ("}], "metadata": {"task_id": "Iconify/909", "ground_truth": "        try {\n            hookAllMethods(clazz, method, hook)\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "import de.robv.android.xposed.XC_MethodHook\nfun tryHookAllConstructors(clazz: Class<*>?, hook: XC_MethodHook?) {", "choices": [{"text": "\n    if (clazz == null) {\n        throw new NullPointerException(\"clazz\");\n    }\n    if (hook == null) {\n        throw new NullPointerException(\"hook\");\n    }\n    if (clazz == null) {\n        throw new NullPointerException(\"clazz\");\n    }\n    if (hook == null) {\n        throw new NullPointerException(\"hook\");\n    }\n    if (clazz == null) {\n        throw new NullPointerException(\"clazz\");\n    }\n    if (hook == null) {\n        throw new NullPointerException(\"hook\");\n    }\n   "}], "metadata": {"task_id": "Iconify/910", "ground_truth": "        try {\n            hookAllConstructors(clazz, hook)\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "private fun repeatString(str: String, times: Int): String {\n        val result = StringBuilder()", "choices": [{"text": "\n        for (int i = 0; i < times; i++) {\n            result.append(str.substring(0, i))\n            result.append(str.substring(i + 1))\n        }\n        return result.toString()\n    }"}], "metadata": {"task_id": "Iconify/913", "ground_truth": "        for (i in 0 until times) {\n            result.append(str)\n        }\n        return result.toString()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport de.robv.android.xposed.XposedHelpers\noverride fun handleLoadPackage(loadPackageParam: LoadPackageParam) {\n        try {\n            UtilsClass = XposedHelpers.findClass(\n                \"com.android.settingslib.Utils\",", "choices": [{"text": "\n                \"com.android.settingslib.Utils\"\n            );\n        } catch (e) {\n            UtilsClass = null;\n        }\n        if (UtilsClass == null) {\n            UtilsClass = XposedHelpers.findClass(\n                \"com.android.settingslib.Settings\",\n                \"com.android.settingslib.Settings\"\n            );\n        }\n        if (UtilsClass == null) {\n            UtilsClass = XposedHelpers.findClass(\n                \"com.android.settingslib.Settings\",\n                \"com.android.settingslib"}], "metadata": {"task_id": "Iconify/920", "ground_truth": "                loadPackageParam.classLoader\n            )\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\SettingsLibUtils.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.content.Context\nfun setPaddings(\n        viewGroup: ViewGroup,\n        context: Context,\n        left: Int,\n        top: Int,\n        right: Int,\n        bottom: Int\n    ) {\n        viewGroup.setPadding(\n            context.toPx(left),", "choices": [{"text": "\n            context.toPx(top),\n            context.toPx(right),\n            context.toPx(bottom)\n        );\n    }"}], "metadata": {"task_id": "Iconify/921", "ground_truth": "            context.toPx(top),\n            context.toPx(right),\n            context.toPx(bottom)\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nfun findViewWithTagAndChangeColor(view: View?, tagContains: String, color: Int) {\n        if (view == null) return\n\n        if (view is ViewGroup) {\n            for (i in 0 until view.childCount) {\n                val child: View = view.getChildAt(i)\n                checkTagAndChangeColor(child, tagContains, color)\n\n                if (child is ViewGroup) {\n                    findViewWithTagAndChangeColor(child, tagContains, color)\n                }", "choices": [{"text": "\n            }\n        } else {\n            checkTagAndChangeColor(view, tagContains, color)\n            findViewWithTagAndChangeColor(view, tagContains, color)\n        }\n    }"}], "metadata": {"task_id": "Iconify/923", "ground_truth": "            }\n        } else {\n            checkTagAndChangeColor(view, tagContains, color)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "import java.util.Locale\nimport android.view.View\nprivate fun checkTagAndChangeColor(view: View, tagContains: String, color: Int) {\n        val tagObject = view.tag\n        if (tagObject != null && tagObject.toString().lowercase(Locale.getDefault())", "choices": [{"text": "\n            tagContains.toLowerCase(Locale.getDefault()) == color.toString().lowercase(Locale.getDefault())\n        else\n            tagContains.toLowerCase(Locale.getDefault()) = color.toString().lowercase(Locale.getDefault())\n    }"}], "metadata": {"task_id": "Iconify/924", "ground_truth": "                .contains(tagContains)\n        ) {\n            changeViewColor(view, color)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "import java.util.Calendar\nimport com.drdisagree.iconify.config.XPrefs.Xprefs\nimport android.annotation.SuppressLint\n @SuppressLint(\"ApplySharedPref\")\n    fun resetCounter(packageName: String) {\n        if (Xprefs == null) return\n\n        try {\n            val loadTimeKey = \"$LOAD_TIME_KEY_KEY$packageName\"\n            val strikeKey = \"$PACKAGE_STRIKE_KEY_KEY$packageName\"\n            val currentTime = Calendar.getInstance().time.time\n\n            Xprefs!!.edit()\n                .putLong(loadTimeKey, currentTime)", "choices": [{"text": "\n               .putLong(strikeKey, currentTime)\n               .apply()\n        } catch (Exception e) {\n            e.printStackTrace()\n        }\n    }"}], "metadata": {"task_id": "Iconify/927", "ground_truth": "                .putInt(strikeKey, 0)\n                .commit()\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\utils\\BootLoopProtector.kt"}}
{"prompt": "import androidx.annotation.Nullable\nimport android.view.View\n@Nullable\r\nprivate View getChildView() {\r\n    for (int i = 0; i < getChildCount(); ++i) {\r\n        View child = getChildAt(i);\r\n        if (!child.equals(mCircleView)) {", "choices": [{"text": "\n            mCircleView = child;\r\n            return child;\r\n        }\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "MaterialFiles/2", "ground_truth": "            return child;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\androidx\\swiperefreshlayout\\widget\\ThemedSwipeRefreshLayout.java"}}
{"prompt": "import androidx.appcompat.app.AppCompatDelegate\noverride fun getDelegate(): AppCompatDelegate {\r\n        val delegate = super.getDelegate()\r\n\r\n        if (!isDelegateCreated) {", "choices": [{"text": "\n            isDelegateCreated = true\r\n        }\r\n\r\n        if (delegate!= null) {\r\n            return delegate\r\n        } else {\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/9", "ground_truth": "            isDelegateCreated = true\r\n            NightModeHelper.apply(this)\r\n        }\r\n        return delegate\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\app\\AppActivity.kt"}}
{"prompt": "override fun onSupportNavigateUp(): Boolean {", "choices": [{"text": "\n    if (mActivity == null) {\n        return false;\n    }\n    return mActivity.supportNavigateUp();\n}"}], "metadata": {"task_id": "MaterialFiles/11", "ground_truth": "        if (!super.onSupportNavigateUp()) {\r\n            finish()\r\n        }\r\n        return true\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\app\\AppActivity.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nimport android.content.SharedPreferences\nfun migrateCreateArchiveTypeSetting1_1_0() {\r\n    val key = application.getString(R.string.pref_key_create_archive_type)\r\n    val oldValue = defaultSharedPreferences.getString(key, null) ?: return\r\n    val newValue = oldValue.replace(Regex(\"type_.+$\")) {\r\n        when (it.value) {\r\n            \"type_zip\" -> \"zipRadio\"\r\n            \"type_tar_xz\" -> \"tarXzRadio\"\r\n            \"type_seven_z\" -> \"sevenZRadio\"", "choices": [{"text": "\n        } else {\r\n            \"type_zip\" -> \"zipRadio\"\r\n            \"type_tar_xz\" -> \"tarXzRadio\"\r\n            \"type_seven_z\" -> \"sevenZRadio\"\r\n        }\r\n    }\r\n    defaultSharedPreferences.edit().putString(key, newValue).apply()\r\n}"}], "metadata": {"task_id": "MaterialFiles/20", "ground_truth": "            else -> \"zipRadio\"\r\n        }\r\n    }\r\n    defaultSharedPreferences.edit { putString(key, newValue) }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\app\\AppUpgraders.kt"}}
{"prompt": "import coil.size.pxOrElse\nimport coil.size.Scale\nimport coil.size.Dimension\nfun Dimension.toPx(scale: Scale) =\r\n    pxOrElse {", "choices": [{"text": "\n        if (scale == null) {\r\n            return null\r\n        } else {\r\n            return scale.toPx(this)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/27", "ground_truth": "        when (scale) {\r\n            Scale.FILL -> Int.MIN_VALUE\r\n            Scale.FIT -> Int.MAX_VALUE\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\coil\\CoilUtils.kt"}}
{"prompt": "import android.widget.AbsListView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val swatchView = convertView as ColorSwatchView?\r\n            ?: ColorSwatchView(parent.context).apply {\r\n                layoutParams = AbsListView.LayoutParams(\r\n                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT\r\n                )", "choices": [{"text": "\n            }\r\n        else {\r\n            swatchView.setLayoutParams(\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT\r\n            )\r\n        }\r\n        return swatchView\r\n    }"}], "metadata": {"task_id": "MaterialFiles/32", "ground_truth": "            }\r\n        return swatchView.apply {\r\n            setColor(getItem(position))\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\colorpicker\\ColorPaletteAdapter.kt"}}
{"prompt": "import androidx.appcompat.app.AlertDialog\nimport android.app.Dialog\noverride fun onPrepareDialogBuilder(builder: AlertDialog.Builder) {\r\n        super.onPrepareDialogBuilder(builder)", "choices": [{"text": "\n        builder.setCancelable(false)\r\n        builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.cancel();\r\n            }\r\n        })\r\n        builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.cancel();\r\n            }\r\n        })"}], "metadata": {"task_id": "MaterialFiles/36", "ground_truth": "\r\n        if (defaultColor in colors) {\r\n            builder.setNeutralButton(R.string.default_, null)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\colorpicker\\ColorPreferenceDialogFragment.kt"}}
{"prompt": "import androidx.annotation.ColorInt\nval gradientDrawable GradientDrawable\nfun setColor(@ColorInt color: Int) {", "choices": [{"text": "\n    this.color = color;\n    return this;\n}"}], "metadata": {"task_id": "MaterialFiles/40", "ground_truth": "        gradientDrawable.apply {\r\n            mutate()\r\n            setColor(color)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\colorpicker\\ColorSwatchView.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport androidx.appcompat.widget.TintTypedArray\nimport android.annotation.SuppressLint\n\r\n@OptIn(ExperimentalContracts::class)\r\n@SuppressLint(\"RestrictedApi\")\r\ninline fun <R> TintTypedArray.use(block: (TintTypedArray) -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {", "choices": [{"text": "\n        TintTypedArray typedArray = (TintTypedArray) block.getTypedArray()\r\n        return typedArray\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/42", "ground_truth": "        block(this)\r\n    } finally {\r\n        recycle()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\ContextCompat.kt"}}
{"prompt": "import android.content.Intent\nfun Intent.removeFlagsCompat(flags: Int) {\r\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {", "choices": [{"text": "\n        flags &= ~Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_"}], "metadata": {"task_id": "MaterialFiles/48", "ground_truth": "        removeFlags(flags)\r\n    } else {\r\n        setFlags(this.flags andInv flags)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\IntentCompat.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport android.os.Build\nimport android.media.MediaMetadataRetriever\n\r\n@OptIn(ExperimentalContracts::class)\r\ninline fun <R> MediaMetadataRetriever.use(block: (MediaMetadataRetriever) -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    val autoCloseable: AutoCloseable = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        this", "choices": [{"text": "_autoCloseable = true\r\n    }\r\n    return super.use(block, autoCloseable)\r\n}"}], "metadata": {"task_id": "MaterialFiles/54", "ground_truth": "    } else {\r\n        AutoCloseable { release() }\r\n    }\r\n    return autoCloseable.use { block(this) }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\MediaMetadataRetrieverCompat.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport android.os.Build\nimport android.graphics.drawable.RotateDrawable\nfun KClass<RotateDrawable>.createCompat(): RotateDrawable =\r\n    RotateDrawable().apply {\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {\r\n            isPivotXRelativeCompat = true", "choices": [{"text": "\n        } else {\r\n            isPivotXRelativeCompat = false\r\n        }\r\n        return new RotateDrawable(this)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/55", "ground_truth": "            pivotXCompat = 0.5f\r\n            isPivotYRelativeCompat = true\r\n            pivotYCompat = 0.5f\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\RotateDrawableCompat.kt"}}
{"prompt": "import kotlin.coroutines.suspendCoroutine\nimport kotlin.coroutines.resumeWithException\nimport kotlin.coroutines.resume\nimport android.os.Handler\nprivate suspend fun ProxyFileDescriptorCallbackCompat.awaitOnRead(\r\n    offset: Long,\r\n    size: Int,\r\n    data: ByteArray,\r\n    handler: Handler\r\n): Int =\r\n    suspendCoroutine { continuation ->\r\n        handler.post {\r\n            val readSize = try {\r\n                onRead(offset, size, data)\r\n            } catch (t: Throwable) {\r\n                continuation.resumeWithException(t)", "choices": [{"text": "\n            }\r\n            if (readSize > 0) {\r\n                continuation.resume()\r\n            } else {\r\n                continuation.resumeWithException(null)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/60", "ground_truth": "                return@post\r\n            }\r\n            continuation.resume(readSize)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\StorageManagerCompat.kt"}}
{"prompt": "import kotlin.coroutines.suspendCoroutine\nimport kotlin.coroutines.resumeWithException\nimport kotlin.coroutines.resume\nimport android.os.Handler\nprivate suspend fun ProxyFileDescriptorCallbackCompat.awaitOnRelease(handler: Handler) {\r\n    suspendCoroutine<Unit> { continuation ->\r\n        handler.post {\r\n            try {\r\n                onRelease()\r\n            } catch (t: Throwable) {\r\n                continuation.resumeWithException(t)\r\n                return@post", "choices": [{"text": "\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/61", "ground_truth": "            }\r\n            continuation.resume(Unit)\r\n        }\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\compat\\StorageManagerCompat.kt"}}
{"prompt": "override fun onDestroy() {\r\n        super.onDestroy()", "choices": [{"text": "_onDestroy()\r\n        super.onDestroy()\r\n    }"}], "metadata": {"task_id": "MaterialFiles/80", "ground_truth": "\r\n        if (isFinishing) {\r\n            fragment.onFinish()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileaction\\ArchivePasswordDialogActivity.kt"}}
{"prompt": "override fun onDestroy() {\r\n        super.onDestroy()", "choices": [{"text": "_onDestroy()\r\n        super.onDestroy()\r\n    }"}], "metadata": {"task_id": "MaterialFiles/82", "ground_truth": "\r\n        if (isFinishing) {\r\n            fragment.onFinish()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobConflictDialogActivity.kt"}}
{"prompt": "override fun onDestroy() {\r\n        super.onDestroy()", "choices": [{"text": "_onDestroy()\r\n        super.onDestroy()\r\n    }"}], "metadata": {"task_id": "MaterialFiles/83", "ground_truth": "\r\n        if (isFinishing) {\r\n            fragment.onFinish()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobErrorDialogActivity.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.util.ActionState\nimport me.zhanghai.android.files.provider.common.PosixFileStore\nimport kotlinx.coroutines.runInterruptible\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nfun remount(fileStore: PosixFileStore) {\r\n        viewModelScope.launch {\r\n            check(_remountState.value.isReady)\r\n            _remountState.value = ActionState.Running(fileStore)\r\n            _remountState.value = try {\r\n                runInterruptible(Dispatchers.IO) {\r\n                    fileStore.isReadOnly = false\r\n                }\r\n                ActionState.Success(fileStore, Unit)", "choices": [{"text": "\n            } finally {\r\n                _remountState.value = null\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/84", "ground_truth": "            } catch (e: Exception) {\r\n                ActionState.Error(fileStore, e)\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobErrorViewModel.kt"}}
{"prompt": "import java.io.File\nimport me.zhanghai.android.files.util.asFileName\nimport me.zhanghai.android.files.provider.common.getPath\nimport me.zhanghai.android.files.provider.common.asByteStringListPath\nimport me.zhanghai.android.files.provider.common.ByteString\nimport me.zhanghai.android.files.provider.archive.isArchivePath\nimport me.zhanghai.android.files.provider.archive.createArchiveRootPath\nimport me.zhanghai.android.files.provider.archive.archiveFile\nimport me.zhanghai.android.files.R\nimport java8.nio.file.Path\nprivate fun FileJob.getTargetFileName(source: Path): Path {\r\n    if (source.isArchivePath) {\r\n        val archiveFile = source.archiveFile.asByteStringListPath()\r\n        val archiveRoot = archiveFile.createArchiveRootPath()\r\n        if (source == archiveRoot) {\r\n            return archiveFile.fileSystem.getPath(\r\n                archiveFile.fileNameByteString!!.asFileName().baseName", "choices": [{"text": "\n            )\r\n        }\r\n    }\r\n    return null\r\n}"}], "metadata": {"task_id": "MaterialFiles/89", "ground_truth": "            )\r\n        }\r\n    }\r\n    return source.fileName\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.InterruptedIOException\nimport java.io.IOException\n\r\n@Throws(InterruptedIOException::class)", "choices": [{"text": "(IOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException"}], "metadata": {"task_id": "MaterialFiles/90", "ground_truth": "private fun FileJob.throwIfInterrupted() {\r\n    if (Thread.interrupted()) {\r\n        throw InterruptedIOException()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport me.zhanghai.android.files.provider.common.readAttributes\nimport me.zhanghai.android.files.R\nimport java8.nio.file.attribute.BasicFileAttributes\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\nimport androidx.annotation.PluralsRes\n\r\n@Throws(IOException::class)\r\nprivate fun FileJob.scan(\r\n    source: Path,\r\n    recursive: Boolean,\r\n    @PluralsRes notificationTitleRes: Int\r\n): ScanInfo {\r\n    if (recursive) {\r\n        return scan(source, notificationTitleRes)\r\n    }\r\n    val scanInfo = ScanInfo()\r\n    val attributes = source.readAttributes(\r\n        BasicFileAttributes::class.java, LinkOption.NOFOLLOW_LINKS", "choices": [{"text": "\n    )\r\n    if (attributes!= null) {\r\n        scanInfo.attributes = attributes\r\n    }\r\n    return scanInfo\r\n}"}], "metadata": {"task_id": "MaterialFiles/91", "ground_truth": "    )\r\n    scanPath(attributes, scanInfo, notificationTitleRes)\r\n    throwIfInterrupted()\r\n    return scanInfo\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nfun shouldPostNotification(): Boolean {\r\n        val currentTimeMillis = System.currentTimeMillis()\r\n        return if (fileCount % 100 == 0\r\n            || lastNotificationTimeMillis + NOTIFICATION_INTERVAL_MILLIS < currentTimeMillis) {\r\n            lastNotificationTimeMillis = currentTimeMillis", "choices": [{"text": "\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/94", "ground_truth": "            true\r\n        } else {\r\n            false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.File\nimport me.zhanghai.android.files.provider.common.readAttributes\nimport java8.nio.file.attribute.BasicFileAttributes\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\nfun addTransferredFile(path: Path) {\r\n        ++transferredFileCount\r\n        try {\r\n            transferredSize += path.readAttributes(\r\n                BasicFileAttributes::class.java, LinkOption.NOFOLLOW_LINKS", "choices": [{"text": "\n            )\r\n        } catch (IOException e) {\r\n            e.printStackTrace()\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/95", "ground_truth": "            ).size()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.File\nimport me.zhanghai.android.files.provider.common.readAttributes\nimport java8.nio.file.attribute.BasicFileAttributes\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\nfun skipFile(path: Path) {\r\n        --fileCount\r\n        try {\r\n            size -= path.readAttributes(\r\n                BasicFileAttributes::class.java, LinkOption.NOFOLLOW_LINKS", "choices": [{"text": "\n            )\r\n        } finally {\r\n            fileCount = 0\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/96", "ground_truth": "            ).size()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nfun shouldPostNotification(): Boolean {\r\n        val currentTimeMillis = System.currentTimeMillis()\r\n        return if (lastNotificationTimeMillis + NOTIFICATION_INTERVAL_MILLIS < currentTimeMillis) {\r\n            lastNotificationTimeMillis = currentTimeMillis", "choices": [{"text": ";\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/97", "ground_truth": "            true\r\n        } else {\r\n            false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport me.zhanghai.android.files.provider.linux.isLinuxPath\nimport me.zhanghai.android.files.provider.common.getFileStore\nimport me.zhanghai.android.files.provider.common.ReadOnlyFileSystemException\nimport me.zhanghai.android.files.provider.common.PosixFileStore\nimport me.zhanghai.android.files.R\nimport java8.nio.file.Path\nprivate fun FileJob.getReadOnlyFileStore(path: Path, exception: IOException): PosixFileStore? {\r\n    if (exception !is ReadOnlyFileSystemException || !path.isLinuxPath) {\r\n        return null\r\n    }\r\n    val fileStore = try {\r\n        path.getFileStore() as PosixFileStore\r\n    } catch (e: IOException) {", "choices": [{"text": "\n        return null\r\n    }\r\n    if (fileStore == null) {\r\n        return null\r\n    }\r\n    return fileStore\r\n}"}], "metadata": {"task_id": "MaterialFiles/99", "ground_truth": "        e.printStackTrace()\r\n        return null\r\n    }\r\n    return if (fileStore.isReadOnly) fileStore else null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import me.zhanghai.android.files.file.fileProviderUri\nimport me.zhanghai.android.files.R\nimport android.os.Build\nimport android.net.Uri\noverride fun run() {\r\n        open(\r\n            file, R.string.file_install_apk_from_background_title_format,\r\n            R.string.file_install_apk_from_background_text\r\n        ) { file ->\r\n            val uri = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n                file.fileProviderUri\r\n            } else {\r\n                // PackageInstaller only supports file URI before N.", "choices": [{"text": "\n                Uri.parse(file.fileProviderUri)\r\n            }\r\n            if (uri == null) {\r\n                throw new IllegalArgumentException(R.string.file_install_apk_from_background_title_format, file.fileProviderUri)\r\n            }\r\n            if (uri.isAbsolute()) {\r\n                throw new IllegalArgumentException(R.string.file_install_apk_from_background_text, file.fileProviderUri)\r\n            } else {\r\n                throw new IllegalArgumentException(R.string.file_install_apk_from"}], "metadata": {"task_id": "MaterialFiles/106", "ground_truth": "                Uri.fromFile(file.toFile())\r\n            }\r\n            uri.createInstallPackageIntent()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/107", "ground_truth": "    override fun run() {\r\n        val newPath = path.resolveSibling(newName)\r\n        rename(path, newPath)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobs.kt"}}
{"prompt": "import me.zhanghai.android.files.util.WakeWifiLock\nimport me.zhanghai.android.files.util.ForegroundNotificationManager\nimport android.app.Service\noverride fun onCreate() {\r\n        super.onCreate()\r\n\r\n        wakeWifiLock = WakeWifiLock(FileJobService::class.java.simpleName)\r\n        notificationManager = ForegroundNotificationManager(this)\r\n        instance = this", "choices": [{"text": "(FileJobService.class.java.simpleName)\r\n        instance.setNotificationManager(notificationManager)\r\n        instance.setWakeWifiLock(wakeWifiLock)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/114", "ground_truth": "\r\n        while (pendingJobs.isNotEmpty()) {\r\n            startJob(pendingJobs.removeFirst())\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobService.kt"}}
{"prompt": "import me.zhanghai.android.files.util.WakeWifiLock\nimport android.app.Service\nprivate fun startJob(job: FileJob) {\r\n        // Synchronize on runningJobs to prevent a job from removing itself before being added.\r\n        synchronized(runningJobs) {\r\n            val future = executorService.submit {\r\n                job.runOn(this)\r\n                synchronized(runningJobs) {\r\n                    runningJobs.remove(job)\r\n                    updateWakeWifiLockLocked()\r\n                }", "choices": [{"text": "\n                updateWakeWifiLockLocked()\r\n            }\r\n            return future\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/115", "ground_truth": "            }\r\n            runningJobs[job] = future\r\n            updateWakeWifiLockLocked()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filejob\\FileJobService.kt"}}
{"prompt": "var future Future<Unit>?\nval observer PathObserver\nvar isChangedWhileInactive\n private fun onChangeObserved() {\r\n        if (hasActiveObservers()) {", "choices": [{"text": "\n            observer.onChangeObserved();\r\n        } else {\r\n            observer.onErrorObserved();\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/129", "ground_truth": "            loadValue()\r\n        } else {\r\n            isChangedWhileInactive = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListLiveData.kt"}}
{"prompt": "override fun onActive() {", "choices": [{"text": "\n    if (this.isActive()) {\n        this.setActive(false);\n    } else {\n        this.setActive(true);\n    }\n}"}], "metadata": {"task_id": "MaterialFiles/130", "ground_truth": "        if (isChangedWhileInactive) {\r\n            loadValue()\r\n            isChangedWhileInactive = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListLiveData.kt"}}
{"prompt": "import java8.nio.file.Path\nvar searchViewQuery String\nval fileListStateful Stateful<List<FileItem>>\nval _fileListLiveData\nfun reload() {\r\n        val path = currentPath", "choices": [{"text": "\n        if (path.endsWith(\"/\")) {\r\n            path = path.substring(0, path.length() - 1)\r\n        }\r\n        if (path.endsWith(\"/\")) {\r\n            path = path.substring(0, path.length() - 1)\r\n        }\r\n        if (path.endsWith(\"/\")) {\r\n            path = path.substring(0, path.length() - 1)\r\n        }\r\n        if (path.endsWith(\"/\")) {\r\n            path = path.substring(0,"}], "metadata": {"task_id": "MaterialFiles/134", "ground_truth": "        if (path.isArchivePath) {\r\n            path.archiveRefresh()\r\n        }\r\n        _fileListLiveData.reload()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListViewModel.kt"}}
{"prompt": "import me.zhanghai.android.files.util.valueCompat\nimport androidx.lifecycle.LiveData\nfun clearSelectedFiles() {\r\n        val selectedFiles = _selectedFilesLiveData.valueCompat\r\n        if (selectedFiles.isEmpty()) {", "choices": [{"text": "\n            _selectedFilesLiveData.clear()\r\n        } else {\r\n            _selectedFilesLiveData.addAll(selectedFiles)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/136", "ground_truth": "            return\r\n        }\r\n        selectedFiles.clear()\r\n        _selectedFilesLiveData.value = selectedFiles\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListViewModel.kt"}}
{"prompt": "import me.zhanghai.android.files.util.valueCompat\nimport androidx.lifecycle.LiveData\nfun clearPasteState() {\r\n        val pasteState = _pasteStateLiveData.valueCompat\r\n        if (pasteState.files.isEmpty()) {", "choices": [{"text": "\n            pasteState.files.clear()\r\n        } else {\r\n            pasteState.files.addAll(pasteState.files)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/138", "ground_truth": "            return\r\n        }\r\n        pasteState.files.clear()\r\n        _pasteStateLiveData.value = pasteState\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListViewModel.kt"}}
{"prompt": "var searchViewQuery String\nval fileListStateful Stateful<List<FileItem>>\nval _selectedFilesLiveData\n override fun close() {\r\n            liveData?.let {", "choices": [{"text": "_selectedFilesLiveData = liveData?.map(fileItem => {\r\n                return {\r\n                    id: fileItem.id,\r\n                    title: fileItem.title,\r\n                    description: fileItem.description,\r\n                }\r\n            })\r\n        }"}], "metadata": {"task_id": "MaterialFiles/140", "ground_truth": "                removeSource(it)\r\n                it.close()\r\n                this.liveData = null\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\FileListViewModel.kt"}}
{"prompt": "private fun onOk() {\r\n        val name = name\r\n        if (!isNameValid(name)) {", "choices": [{"text": "\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/146", "ground_truth": "            return\r\n        }\r\n        onOk(name)\r\n        dismiss()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\NameDialogFragment.kt"}}
{"prompt": "protected open fun isNameValid(name: String): Boolean {\r\n        if (name == initialName) {", "choices": [{"text": "\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/147", "ground_truth": "            dismiss()\r\n            return false\r\n        }\r\n        return true\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\NameDialogFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.extraPath\nimport me.zhanghai.android.files.file.asMimeTypeOrNull\nimport me.zhanghai.android.files.file.MimeType\nimport java8.nio.file.Path\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val intent = intent\r\n        val path = intent.extraPath\r\n        val mimeType = intent.type?.asMimeTypeOrNull()", "choices": [{"text": "\n        super.onCreate(savedInstanceState)\r\n\r\n        if (mimeType!= null) {\r\n            mMimeType = mimeType\r\n        } else {\r\n            mMimeType = null\r\n        }\r\n\r\n        if (path!= null) {\r\n            mPath = path\r\n        } else {\r\n            mPath = null\r\n        }\r\n\r\n        if (mMimeType!= null) {\r\n            mMimeType = mMimeType\r\n        } else {\r\n            mMimeType = null\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/150", "ground_truth": "        if (path != null && mimeType != null) {\r\n            openFile(path, mimeType)\r\n        }\r\n        finish()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\OpenFileActivity.kt"}}
{"prompt": "import android.os.AsyncTask\noverride fun close() {\r\n        AsyncTask.THREAD_POOL_EXECUTOR.execute {\r\n            synchronized(lock) {\r\n                if (closed) {\r\n                    return@execute\r\n                }", "choices": [{"text": "\n                closed = true\r\n                return@execute\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/158", "ground_truth": "                closed = true\r\n                pathObservable?.closeSafe()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\PathObserver.kt"}}
{"prompt": "import java8.nio.file.Path\nimport android.os.Parcelable\nfun navigateTo(lastState: Parcelable, path: Path) {\r\n        val oldTrailData = value\r\n        if (oldTrailData == null) {", "choices": [{"text": "\n            return;\r\n        }\r\n        if (path == null) {\r\n            return;\r\n        }\r\n        if (lastState == null) {\r\n            return;\r\n        }\r\n        if (path.equals(lastState.path)) {\r\n            return;\r\n        }\r\n        if (path.equals(lastState.path)) {\r\n            return;\r\n        }\r\n        if (path.equals(lastState.path)) {\r\n            return;\r\n        }\r\n        if (path.equals("}], "metadata": {"task_id": "MaterialFiles/169", "ground_truth": "            resetTo(path)\r\n            return\r\n        }\r\n        value = oldTrailData.navigateTo(lastState, path)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\filelist\\TrailLiveData.kt"}}
{"prompt": "import me.zhanghai.android.files.util.Success\nimport me.zhanghai.android.files.util.Loading\nimport me.zhanghai.android.files.file.loadFileItem\nimport me.zhanghai.android.files.file.FileItem\nimport android.os.AsyncTask\noverride fun loadValue() {\r\n        value = Loading(value?.value)\r\n        AsyncTask.THREAD_POOL_EXECUTOR.execute {\r\n            val value = try {\r\n                val file = path.loadFileItem()\r\n                Success(file)\r\n            } catch (e: Exception) {", "choices": [{"text": "\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/177", "ground_truth": "                Failure(valueCompat.value, e)\r\n            }\r\n            postValue(value)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\FileLiveData.kt"}}
{"prompt": "import kotlin.math.roundToLong\nimport org.threeten.bp.Instant\nimport org.threeten.bp.Duration\nprivate fun Instant.withTimezoneInferredFrom(other: Instant): Instant? {\r\n    val smallestZone = Duration.ofMinutes(15)\r\n    val offset = Duration.between(this, other)\r\n    if (offset.abs() < Duration.ofDays(1)) {\r\n        val smallestZoneMillis = smallestZone.toMillis()\r\n        val rounded = Duration.ofMillis(\r\n            (offset.toMillis().toDouble() / smallestZoneMillis).roundToLong() * smallestZoneMillis", "choices": [{"text": ",\r\n            (offset.toMillis().toDouble() / smallestZoneMillis).roundToLong() * smallestZoneMillis,\r\n            (offset.toMillis().toDouble() / smallestZoneMillis).roundToLong() * smallestZoneMillis,\r\n            (offset.toMillis().toDouble() / smallestZoneMillis).roundToLong() * smallestZoneMillis,\r\n            (offset.toMillis().toDouble() / smallestZoneMillis).roundToLong() * smallestZoneMillis,\r\n            (offset.toMillis().toDouble() / smallestZoneMillis).roundToLong() * smallestZoneMillis,\r\n"}], "metadata": {"task_id": "MaterialFiles/182", "ground_truth": "        )\r\n        return this + rounded\r\n    }\r\n    return null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\image\\ExifInterfaceExtensions.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nprivate fun getEquipment(make: String?, model: String?): String? =\r\n        when {\r\n            make != null && model != null -> {\r\n                if (model.startsWith(make, true)) {\r\n                    model\r\n                } else {\r\n                    getString(R.string.file_properties_image_equipment_format, make, model)\r\n                }", "choices": [{"text": "\n            } else {\r\n                getString(R.string.file_properties_image_equipment_format, make)\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/184", "ground_truth": "            }\r\n            make != null -> make\r\n            model != null -> model\r\n            else -> null\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\image\\FilePropertiesImageTabFragment.kt"}}
{"prompt": "var observer PathObserver\nvar changedWhileInactive\n private fun onChangeObserved() {\r\n        if (hasActiveObservers()) {", "choices": [{"text": "\n            observer.onChangeObserved()\r\n        } else {\r\n            observer.onErrorObserved()\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/186", "ground_truth": "            loadValue()\r\n        } else {\r\n            changedWhileInactive = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\PathObserverLiveData.kt"}}
{"prompt": "override fun onActive() {", "choices": [{"text": "\n    if (this.isActive()) {\n        this.setActive(false);\n    } else {\n        this.setActive(true);\n    }\n}"}], "metadata": {"task_id": "MaterialFiles/187", "ground_truth": "        if (changedWhileInactive) {\r\n            loadValue()\r\n            changedWhileInactive = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\PathObserverLiveData.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.PosixPrincipal\nimport me.zhanghai.android.files.R\nprivate fun getPrincipalText(principal: PosixPrincipal?) =\r\n        if (principal != null) {\r\n            if (principal.name != null) {\r\n                getString(\r\n                    R.string.file_properties_permissions_principal_format, principal.name,\r\n                    principal.id\r\n                )\r\n            } else {", "choices": [{"text": "\n                getString(\r\n                    R.string.file_properties_permissions_principal_format, principal.id\r\n                )\r\n            }\r\n        } else {\r\n            getString(\r\n                R.string.file_properties_permissions_principal_format, null\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/189", "ground_truth": "                principal.id.toString()\r\n            }\r\n        } else {\r\n            getString(R.string.unknown)\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\permissions\\FilePropertiesPermissionsTabFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.PosixFileModeBit\nprivate fun getModeString(\r\n        modeBits: List<PosixFileModeBit>,\r\n        modeBitNames: Array<String>\r\n    ): String {\r\n        val mode = viewModel.mode\r\n        val checkedNames = mutableListOf<String>()\r\n        for (index in modeBits.indices) {\r\n            if (modeBits[index] in mode) {\r\n                checkedNames += modeBitNames[index]\r\n            }\r\n        }\r\n        return if (checkedNames.isEmpty()) {", "choices": [{"text": "\n            return null\r\n        } else {\r\n            return checkedNames.get(0)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/194", "ground_truth": "            getString(R.string.none)\r\n        } else {\r\n            ListFormatterCompat.format(checkedNames)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\permissions\\SetModeDialogFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.valueCompat\nimport me.zhanghai.android.files.util.toEnumSet\nimport me.zhanghai.android.files.provider.common.PosixFileModeBit\nimport androidx.lifecycle.LiveData\nfun toggleModeBit(modeBit: PosixFileModeBit) {\r\n        val mode = _modeLiveData.valueCompat.toEnumSet()\r\n        if (modeBit in mode) {\r\n            mode -= modeBit", "choices": [{"text": "\n        } else {\r\n            mode += modeBit\r\n        }\r\n        _modeLiveData.valueCompat.setEnumSet(mode)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/196", "ground_truth": "        } else {\r\n            mode += modeBit\r\n        }\r\n        _modeLiveData.value = mode\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\fileproperties\\permissions\\SetModeViewModel.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n    super.onDestroy();\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver"}], "metadata": {"task_id": "MaterialFiles/211", "ground_truth": "        super.onDestroy()\r\n\r\n        executeStop()\r\n        executorService.shutdown()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\FtpServerService.kt"}}
{"prompt": "override fun onClick() {\r\n        super.onClick()\r\n\r\n        if (isLocked) {", "choices": [{"text": "\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/223", "ground_truth": "            unlockAndRun { toggle() }\r\n        } else {\r\n            toggle()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\FtpServerTileService.kt"}}
{"prompt": "override fun changeWorkingDirectory(directoryString: String): Boolean {\r\n        val directory = getFile(directoryString)\r\n        if (!directory.isDirectory) {", "choices": [{"text": "\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/229", "ground_truth": "            return false\r\n        }\r\n        workingDirectory = directory\r\n        return true\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFileSystemView.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.getOwner\noverride fun getOwnerName(): String =\r\n        try {\r\n            path.getOwner().name\r\n        } catch (ignored: UnsupportedOperationException) {", "choices": [{"text": "\n            return null\r\n        } else {\r\n            return path.getOwner().name\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/234", "ground_truth": "            null\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n            null\r\n        } ?: \"user\"", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import java.io.IOException\nimport me.zhanghai.android.files.provider.common.getFileAttributeView\nimport java8.nio.file.attribute.PosixFileAttributeView\noverride fun getGroupName(): String {\r\n        val attributeView = path.getFileAttributeView(PosixFileAttributeView::class.java)\r\n        return if (attributeView != null) {\r\n            try {\r\n                attributeView.readAttributes().group().name\r\n            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                null", "choices": [{"text": "\n                return null\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/235", "ground_truth": "            }\r\n        } else {\r\n            null\r\n        } ?: \"group\"\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.setLastModifiedTime\nimport me.zhanghai.android.files.provider.common.isWritable\nimport java8.nio.file.attribute.FileTime\noverride fun setLastModified(time: Long): Boolean =\r\n        if (!isWritable) {\r\n            false\r\n        } else {\r\n            try {\r\n                path.setLastModifiedTime(FileTime.fromMillis(time))\r\n                true", "choices": [{"text": "\n            } catch (e) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/237", "ground_truth": "            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "override fun getSize(): Long =\r\n        try {", "choices": [{"text": "\n            long size = super.getSize();\n            if (size > 0) {\n                return size;\n            } else {\n                return 0;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }"}], "metadata": {"task_id": "MaterialFiles/238", "ground_truth": "            path.size()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n            0\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.isWritable\nimport me.zhanghai.android.files.provider.common.createDirectory\noverride fun mkdir(): Boolean =\r\n        if (!isWritable) {\r\n            false\r\n        } else {\r\n            try {\r\n                path.createDirectory()\r\n                true", "choices": [{"text": "\n            } catch (e) {\r\n                e.printStackTrace()\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/239", "ground_truth": "            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.delete\noverride fun delete(): Boolean =\r\n        if (!isRemovable) {\r\n            false\r\n        } else {\r\n            try {\r\n                path.delete()\r\n                true", "choices": [{"text": "\n            } catch (Exception e) {\r\n                e.printStackTrace()\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/240", "ground_truth": "            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n                false\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import org.apache.ftpserver.ftplet.FtpFile\nimport me.zhanghai.android.files.provider.common.moveTo\nimport me.zhanghai.android.files.provider.common.isWritable\nimport java8.nio.file.Path\noverride fun move(destination: FtpFile): Boolean {\r\n        if (!(isRemovable && destination.isWritable)) {\r\n            return false\r\n        }\r\n        val targetPath = (destination as ProviderFtpFile).path\r\n        return try {\r\n            path.moveTo(targetPath)\r\n            true", "choices": [{"text": "\n        } catch (e) {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/241", "ground_truth": "        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n            false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\nimport me.zhanghai.android.files.provider.common.newInputStream\nimport me.zhanghai.android.files.provider.common.newByteChannel\n @Throws(IOException::class)\r\n    override fun createInputStream(offset: Long): InputStream {\r\n        return if (offset == 0L) {\r\n            path.newInputStream()\r\n        } else {\r\n            val channel = path.newByteChannel()\r\n            var successful = false\r\n            try {\r\n                channel.position(offset)\r\n                val inputStream = channel.newInputStream()\r\n                successful = true\r\n                inputStream\r\n            } finally {\r\n                if (!successful) {", "choices": [{"text": "\n                    channel.close()\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/243", "ground_truth": "                    channel.close()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "\n            return false\r\n        }\r\n        return super.equals(other)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/244", "ground_truth": "            return false\r\n        }\r\n        other as ProviderFtpFile\r\n        return path == other.path\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ftpserver\\ProviderFtpFile.kt"}}
{"prompt": "import me.zhanghai.android.files.R\noverride fun onClick(listener: Listener) {\r\n        if (this is NavigationRoot) {\r\n            listener.navigateToRoot(path)", "choices": [{"text": "\n        } else {\r\n            listener.navigateToRoot(path)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/258", "ground_truth": "        } else {\r\n            listener.navigateTo(path)\r\n        }\r\n        listener.closeNavigationDrawer()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\navigation\\NavigationItems.kt"}}
{"prompt": "import me.zhanghai.android.files.util.activity\nimport me.zhanghai.android.files.R\nimport androidx.core.graphics.withSave\nimport android.graphics.Color\nimport android.graphics.Canvas\noverride fun draw(canvas: Canvas) {\r\n        super.draw(canvas)\r\n\r\n        if (context.activity!!.window.statusBarColor == Color.TRANSPARENT) {\r\n            canvas.withSave {\r\n                canvas.translate(scrollX.toFloat(), scrollY.toFloat())", "choices": [{"text": "\n                canvas.drawColor(context.activity!!.window.statusBarColor)\r\n            }\r\n        } else {\r\n            super.draw(canvas)\r\n\r\n            if (context.activity!!.window.statusBarColor == Color.TRANSPARENT) {\r\n                canvas.drawColor(context.activity!!.window.statusBarColor)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/267", "ground_truth": "                scrim.setBounds(0, 0, width, insetTop)\r\n                scrim.draw(canvas)\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\navigation\\NavigationRecyclerView.kt"}}
{"prompt": "fun addPassword(password: String) {\r\n        synchronized(lock) {\r\n            if (!isOpen) {", "choices": [{"text": "\n                isOpen = true;\r\n            } else {\r\n                isOpen = false;\r\n            }\r\n        }\r\n        return password;\r\n    }"}], "metadata": {"task_id": "MaterialFiles/283", "ground_truth": "                throw ClosedFileSystemException()\r\n            }\r\n            passwords += password\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "var passwords\nval defaultDirectory ArchivePath\nval rootDirectory\n fun setPasswords(passwords: List<String>) {\r\n        synchronized(lock) {\r\n            if (!isOpen) {", "choices": [{"text": "\n                return;\r\n            }\r\n            if (passwords.isEmpty()) {\r\n                return;\r\n            }\r\n            if (passwords.size() == 1) {\r\n                return;\r\n            }\r\n            if (passwords.size() == 2) {\r\n                return;\r\n            }\r\n            if (passwords.size() == 3) {\r\n                return;\r\n            }\r\n            if (passwords.size() == 4) {\r\n                return;\r\n            }\r\n            if (passwords"}], "metadata": {"task_id": "MaterialFiles/284", "ground_truth": "                throw ClosedFileSystemException()\r\n            }\r\n            this.passwords = passwords\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "fun refresh() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {", "choices": [{"text": "\n                isOpen = true;\r\n            } else {\r\n                isOpen = false;\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/285", "ground_truth": "                throw ClosedFileSystemException()\r\n            }\r\n            isRefreshNeeded = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "import java8.nio.file.FileSystem\noverride fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return\r\n            }\r\n            provider.removeFileSystem(this)\r\n            isRefreshNeeded = false", "choices": [{"text": "\n            isRefreshNeeded = false\r\n            provider.removeFileSystem(this)\r\n            isRefreshNeeded = false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/287", "ground_truth": "            entries = null\r\n            tree = null\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/291", "ground_truth": "    override fun newWatchService(): WatchService {\r\n        // TODO\r\n        throw UnsupportedOperationException()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "\n            return false\r\n        }\r\n        return super.equals(other)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/292", "ground_truth": "            return false\r\n        }\r\n        other as ArchiveFileSystem\r\n        return archiveFile == other.archiveFile\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystem.kt"}}
{"prompt": "import java8.nio.file.attribute.FileAttributeView\nimport java8.nio.file.attribute.FileAttribute\nimport java8.nio.file.ProviderMismatchException\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\noverride fun <V : FileAttributeView> getFileAttributeView(\r\n        path: Path,\r\n        type: Class<V>,\r\n        vararg options: LinkOption\r\n    ): V? {\r\n        path as? ArchivePath ?: throw ProviderMismatchException(path.toString())\r\n        if (!supportsFileAttributeView(type)) {", "choices": [{"text": "\n            throw new ProviderMismatchException(path.toString())\r\n        }\r\n        return new FileAttributeView(path, type, options)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/312", "ground_truth": "            return null\r\n        }\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return getFileAttributeView(path) as V\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchiveFileSystemProvider.kt"}}
{"prompt": "import java.io.File\nimport me.zhanghai.android.files.provider.root.RootablePath\nimport java8.nio.file.Path\noverride fun isRootRequired(isAttributeAccess: Boolean): Boolean {\r\n        val archiveFile = fileSystem.archiveFile\r\n        return if (archiveFile is RootablePath) {", "choices": [{"text": "\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/318", "ground_truth": "            archiveFile.isRootRequired(isAttributeAccess)\r\n        } else {\r\n            false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\ArchivePath.kt"}}
{"prompt": "import java.nio.charset.Charset\nimport java.io.IOException\nimport me.zhanghai.android.files.R\nimport java8.nio.file.Path\n @Throws(IOException::class)\r\n    private fun readEntries(file: Path, passwords: List<String>): List<ReadArchive.Entry> {\r\n        val charset = archiveFileNameCharset\r\n        val (archive, closeable) = openArchive(file, passwords)\r\n        return closeable.use {\r\n            buildList {\r\n                while (true) {", "choices": [{"text": "\n                    ReadArchive.Entry entry = archive.readEntry(charset)\r\n                    if (entry == null) {\r\n                        break\r\n                    }\r\n                    entries.add(entry)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/321", "ground_truth": "                    this += archive.readEntry(charset) ?: break\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\archiver\\ArchiveReader.kt"}}
{"prompt": "val archiveFileNameCharset Charset\nval size Long\n override fun close() {\r\n            @Suppress(\"ConvertTryFinallyToUseCall\")\r\n            try {", "choices": [{"text": "\n                File file = new File(archiveFileName);\r\n                file.delete();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/323", "ground_truth": "                archive.close()\r\n            } finally {\r\n                closeable.close()\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\archiver\\ArchiveReader.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/324", "ground_truth": "        override fun close() {\r\n            super.close()\r\n\r\n            closeable.close()\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\archive\\archiver\\ArchiveReader.kt"}}
{"prompt": "import java.nio.channels.NonReadableChannelException\nimport java.nio.ByteBuffer\nimport java.io.IOException\n @Throws(IOException::class)\r\n    final override fun read(destination: ByteBuffer): Int {\r\n        ensureOpen()\r\n        if (isAppend) {\r\n            throw NonReadableChannelException()\r\n        }\r\n        val remaining = destination.remaining()\r\n        if (remaining == 0) {\r\n            return 0\r\n        }\r\n        return synchronized(ioLock) {\r\n            readBuffer.read(destination).also {\r\n                if (it != -1) {", "choices": [{"text": "\n                    return it\r\n                } else {\r\n                    throw new NonReadableChannelException()\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/334", "ground_truth": "                    position += it\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.util.concurrent.Future\nimport java.nio.ByteBuffer\nimport kotlinx.coroutines.withTimeout\nimport kotlinx.coroutines.runInterruptible\nimport kotlinx.coroutines.async\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nprotected open fun onReadAsync(\r\n        position: Long,\r\n        size: Int,\r\n        timeoutMillis: Long\r\n    ): Future<ByteBuffer> =\r\n        @OptIn(DelicateCoroutinesApi::class)\r\n        GlobalScope.async(Dispatchers.IO) {\r\n            withTimeout(timeoutMillis) {\r\n                runInterruptible {", "choices": [{"text": "\n                    read(position, size);\r\n                }\r\n            }\r\n        };"}], "metadata": {"task_id": "MaterialFiles/335", "ground_truth": "                    onRead(position, size)\r\n                }\r\n            }\r\n        }\r\n            .asFuture()", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.IOException\n @Throws(IOException::class)\r\n    final override fun write(source: ByteBuffer): Int {\r\n        ensureOpen()\r\n        val remaining = source.remaining()\r\n        if (remaining == 0) {\r\n            return 0\r\n        }\r\n        synchronized(ioLock) {\r\n            if (isAppend) {\r\n                onAppend(source)\r\n                position = onSize()\r\n            } else {\r\n                onWrite(position, source)", "choices": [{"text": "\n                position = onSize()\r\n            }\r\n            return remaining\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/336", "ground_truth": "                position += remaining - source.remaining()\r\n            }\r\n            return remaining\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    final override fun position(): Long {\r\n        ensureOpen()\r\n        synchronized(ioLock) {\r\n            if (isAppend) {", "choices": [{"text": "_position = position\r\n        }\r\n        return position\r\n    }\r\n    final override fun length(): Long {\r\n        ensureOpen()\r\n        synchronized(ioLock) {\r\n            if (isAppend) {\r\n                return length\r\n            } else {\r\n                return length\r\n            }\r\n        }\r\n    }\r\n    final override fun append(): Boolean {\r\n        ensureOpen()\r\n        synchronized(ioLock) {\r\n            if (isAppend) {\r\n                return append\r\n            } else {\r\n                return"}], "metadata": {"task_id": "MaterialFiles/338", "ground_truth": "                position = onSize()\r\n            }\r\n            return position\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/340", "ground_truth": "    final override fun size(): Long {\r\n        ensureOpen()\r\n        return onSize()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.channels.SeekableByteChannel\n @Throws(IOException::class)\r\n    final override fun truncate(size: Long): SeekableByteChannel {\r\n        ensureOpen()\r\n        require(size >= 0)\r\n        synchronized(ioLock) {\r\n            val currentSize = onSize()\r\n            if (size >= currentSize) {\r\n                return this\r\n            }", "choices": [{"text": "\n        }\r\n        return super.truncate(size)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/341", "ground_truth": "            onTruncate(size)\r\n            position = position.coerceAtMost(size)\r\n        }\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    final override fun force(metaData: Boolean) {", "choices": [{"text": "(metaData: Boolean) {\r\n        if (metaData) {\r\n            super.force(true);\r\n        } else {\r\n            super.force(false);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/342", "ground_truth": "        ensureOpen()\r\n        synchronized(ioLock) {\r\n            onForce(metaData)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.nio.channels.ClosedChannelException\n @Throws(ClosedChannelException::class)\r\n    private fun ensureOpen() {\r\n        synchronized(closeLock) {", "choices": [{"text": "\n            try {\r\n                channel.close();\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/343", "ground_truth": "            if (!isOpen) {\r\n                throw ClosedChannelException()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    final override fun close() {\r\n        synchronized(closeLock) {\r\n            if (!isOpen) {\r\n                return\r\n            }\r\n            isOpen = false\r\n            synchronized(ioLock) {", "choices": [{"text": "(closeLock) {\r\n                isOpen = false\r\n                super.close()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/344", "ground_truth": "                readBuffer.closeSafe()\r\n                onClose()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractFileByteChannel.kt"}}
{"prompt": "fun signal() {\r\n        synchronized(lock) {\r\n            if (!isSignaled) {\r\n                isSignaled = true", "choices": [{"text": ";\r\n            } else {\r\n                isSignaled = false;\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/350", "ground_truth": "                @Suppress(\"UNCHECKED_CAST\")\r\n                watchService.enqueue(this as K)\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchKey.kt"}}
{"prompt": "import java8.nio.file.WatchEvent\nvar events\nval MAX_PENDING_EVENTS\nvar count\noverride fun pollEvents(): List<WatchEvent<*>> {\r\n        synchronized(lock) {", "choices": [{"text": "\n            List<WatchEvent<*>> result = new ArrayList<>();\r\n            for (WatchEvent<*> event : events) {\r\n                result.add(event);\r\n            }\r\n            return result;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/351", "ground_truth": "            val events = events\r\n            this.events = mutableListOf()\r\n            return events\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchKey.kt"}}
{"prompt": "override fun reset(): Boolean {\r\n        synchronized(lock) {\r\n            val isValid = isValid\r\n            if (isValid && isSignaled) {\r\n                if (events.isEmpty()) {\r\n                    isSignaled = false\r\n                } else {\r\n                    @Suppress(\"UNCHECKED_CAST\")\r\n                    watchService.enqueue(this as K)", "choices": [{"text": "\n                    isSignaled = true\r\n                }\r\n            } else {\r\n                isSignaled = false\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/352", "ground_truth": "                }\r\n            }\r\n            return isValid\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchKey.kt"}}
{"prompt": "override fun cancel() {\r\n        synchronized(lock) {\r\n            if (isValid) {", "choices": [{"text": "_cancel = true;\r\n            } else {\r\n                _cancel = false;\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/353", "ground_truth": "                @Suppress(\"UNCHECKED_CAST\")\r\n                watchService.cancel(this as K)\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchKey.kt"}}
{"prompt": "@Throws(InterruptedException::class)", "choices": [{"text": "(InterruptedException::class)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   .withCause(cause)\n   "}], "metadata": {"task_id": "MaterialFiles/356", "ground_truth": "    override fun take(): WatchKey {\r\n        ensureOpen()\r\n        return checkClosedKey(queue.take())\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchService.kt"}}
{"prompt": "import java8.nio.file.WatchKey\nprivate fun <T : WatchKey?> checkClosedKey(key: T): T {\r\n        if (key == KEY_CLOSED) {\r\n            // There may be other threads still waiting for a key.", "choices": [{"text": "\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/357", "ground_truth": "            queue.offer(key)\r\n        }\r\n        ensureOpen()\r\n        return key\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchService.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun close() {\r\n        synchronized(lock) {\r\n            if (isClosed) {\r\n                return\r\n            }\r\n            onClose()", "choices": [{"text": "\n            isClosed = true\r\n            onClose()\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/359", "ground_truth": "            isClosed = true\r\n            queue.clear()\r\n            queue.offer(KEY_CLOSED)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\AbstractWatchService.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/376", "ground_truth": "    override fun position(newPosition: Long): FileChannel {\r\n        channel.position(newPosition)\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\DelegateFileChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/377", "ground_truth": "    override fun truncate(size: Long): FileChannel {\r\n        channel.truncate(size)\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\DelegateFileChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/380", "ground_truth": "    override fun truncate(size: Long): SeekableByteChannel {\r\n        channel.truncate(size)\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\DelegateSeekableByteChannel.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\n\r\n@Throws(IOException::class)\r\nfun InputStream.readFully(buffer: ByteArray, offset: Int, length: Int): Int {\r\n    var totalReadSize = 0\r\n    while (totalReadSize < length) {\r\n        val readSize = read(buffer, offset + totalReadSize, length - totalReadSize)\r\n        if (readSize == -1) {\r\n            break", "choices": [{"text": "\n        }\r\n        totalReadSize += readSize\r\n    }\r\n    return totalReadSize\r\n}"}], "metadata": {"task_id": "MaterialFiles/388", "ground_truth": "        }\r\n        totalReadSize += readSize\r\n    }\r\n    return totalReadSize\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\InputStreamExtensions.kt"}}
{"prompt": "import java.io.InterruptedIOException\nimport java.io.IOException\n\r\n@Throws(InterruptedIOException::class)", "choices": [{"text": "(IOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException::class)\n@Throws(InterruptedIOException"}], "metadata": {"task_id": "MaterialFiles/389", "ground_truth": "private fun throwIfInterrupted() {\r\n    if (Thread.interrupted()) {\r\n        throw InterruptedIOException()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\InputStreamExtensions.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.file.Path\nimport java8.nio.file.CopyOption\n\r\n@Throws(IOException::class)\r\nfun Path.copyTo(target: Path, vararg options: CopyOption) {\r\n    val provider = provider\r\n    if (provider == target.provider) {", "choices": [{"text": "\n        target.copyTo(provider, options)\r\n    } else {\r\n        throw new IllegalArgumentException(String.format(\"Cannot copy %s to %s\", provider, target.provider))\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/407", "ground_truth": "        provider.copy(this, target, *options)\r\n    } else {\r\n        ForeignCopyMove.copy(this, target, *options)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PathExtensions.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.file.Path\nimport java8.nio.file.CopyOption\n\r\n@Throws(IOException::class)\r\nfun Path.moveTo(target: Path, vararg options: CopyOption) {\r\n    val provider = provider\r\n    if (provider == target.provider) {", "choices": [{"text": "\n        target.moveTo(provider, options)\r\n    } else {\r\n        target.moveTo(provider, options)\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/409", "ground_truth": "        provider.move(this, target, *options)\r\n    } else {\r\n        ForeignCopyMove.move(this, target, *options)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PathExtensions.kt"}}
{"prompt": "import java8.nio.file.Path\nfun Path.resolveForeign(other: Path): Path {\r\n    asByteStringListPath()\r\n    other.asByteStringListPath()\r\n    if (javaClass == other.javaClass && provider == other.provider\r\n        && fileSystem == other.fileSystem) {\r\n        return resolve(other)\r\n    }\r\n    if (other.isAbsolute) {\r\n        return other\r\n    }\r\n    if (other.isEmpty) {\r\n        return this\r\n    }\r\n    var result: ByteStringListPath<*> = this", "choices": [{"text": "\n    if (javaClass == result.javaClass && provider == result.provider\r\n        && fileSystem == result.fileSystem) {\r\n        return resolve(result)\r\n    }\r\n    var result: ByteStringListPath<*> = this\r\n    if (javaClass == result.javaClass && provider == result.provider\r\n        && fileSystem == result.fileSystem) {\r\n        return resolve(result)\r\n    }\r\n    var result: ByteStringListPath<*> = this\r\n    if (javaClass == result.javaClass && provider == result."}], "metadata": {"task_id": "MaterialFiles/426", "ground_truth": "    for (name in other.nameByteStrings) {\r\n        result = result.resolve(name)\r\n    }\r\n    return result\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PathExtensions.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun close() {\r\n        synchronized(lock) {\r\n            if (isClosed) {\r\n                return", "choices": [{"text": "_isClosed = true;\r\n            }\r\n        }\r\n        super.close();\r\n        isClosed = true;\r\n    }"}], "metadata": {"task_id": "MaterialFiles/433", "ground_truth": "            }\r\n            closeable?.close()\r\n            isClosed = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PathIteratorDirectoryStream.kt"}}
{"prompt": "val id\nval key\nval pollers\n override fun cancel(key: PollingWatchKey) {\r\n        val poller = synchronized(pollers) { pollers.remove(key.watchable())!! }\r\n        poller.interrupt()\r\n        try {", "choices": [{"text": "\n            poller.cancel()\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/435", "ground_truth": "            poller.join()\r\n        } catch (e: InterruptedException) {\r\n            e.printStackTrace()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PollingWatchService.kt"}}
{"prompt": "import java8.nio.file.attribute.FileAttribute\nval NAME\nval CREATE_DIRECTORY_DEFAULT\nval DIRECTORY_DEFAULT\nfun fromAttributes(attributes: Array<out FileAttribute<*>>): Set<PosixFileModeBit>? {\r\n        var mode: Set<PosixFileModeBit>? = null", "choices": [{"text": "\n        if (attributes.length == 0) {\r\n            mode = null\r\n        } else {\r\n            for (var i = 0; i < attributes.length; i++) {\r\n                if (attributes[i].name == \"mode\") {\r\n                    mode = attributes[i].value\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return mode\r\n    }"}], "metadata": {"task_id": "MaterialFiles/439", "ground_truth": "        for (attribute in attributes) {\r\n            mode = fromAttribute(attribute)\r\n        }\r\n        return mode\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\PosixFileMode.kt"}}
{"prompt": "override fun toString(): String = buildString {\r\n        if (userInfo != null) {\r\n            append(userInfo)\r\n            append('@')\r\n        }\r\n        append(host)", "choices": [{"text": "\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n        append('@')\r\n       "}], "metadata": {"task_id": "MaterialFiles/444", "ground_truth": "        if (port != null) {\r\n            append(':')\r\n            append(port.toString())\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\UriAuthority.kt"}}
{"prompt": "import kotlin.experimental.or\nimport kotlin.experimental.and\nprivate fun encode(decoded: ByteString, charset: String): String {\r\n    val builder = StringBuilder()\r\n    for (byte in decoded) {\r\n        if (charset.indexOf(byte.toInt().toChar()) != -1) {\r\n            builder.append(byte.toInt().toChar())\r\n        } else {\r\n            builder\r\n                .append('%')\r\n                .append(encodeHexCharacter(((byte.toInt() ushr 4).toByte() and 0x0F)))", "choices": [{"text": "\n        }\r\n    }\r\n    return builder.toString()\r\n}"}], "metadata": {"task_id": "MaterialFiles/446", "ground_truth": "                .append(encodeHexCharacter(byte and 0x0F))\r\n        }\r\n    }\r\n    return builder.toString()\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\UriByteStringExtensions.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/450", "ground_truth": "    override fun onCloseLocked() {\r\n        poller.interrupt()\r\n        watchService.close()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\WatchServicePathObservable.kt"}}
{"prompt": "import java8.nio.file.WatchService\nimport java8.nio.file.ClosedWatchServiceException\noverride fun run() {\r\n            while (true) {\r\n                val key = try {\r\n                    watchService.take()\r\n                } catch (e: ClosedWatchServiceException) {\r\n                    break\r\n                } catch (e: InterruptedException) {\r\n                    break\r\n                }\r\n                if (key.pollEvents().isNotEmpty()) {\r\n                    notifyObservers()\r\n                }", "choices": [{"text": "\n                notifyObservers()\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/451", "ground_truth": "                if (!key.reset()) {\r\n                    break\r\n                }\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\common\\WatchServicePathObservable.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/457", "ground_truth": "    override fun newWatchService(): WatchService {\r\n        // TODO\r\n        throw UnsupportedOperationException()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\content\\ContentFileSystem.kt"}}
{"prompt": "import java8.nio.file.attribute.FileAttributeView\nimport java8.nio.file.attribute.FileAttribute\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\noverride fun <V : FileAttributeView> getFileAttributeView(\r\n        path: Path,\r\n        type: Class<V>,\r\n        vararg options: LinkOption\r\n    ): V? {\r\n        if (!supportsFileAttributeView(type)) {", "choices": [{"text": "\n            return null;\r\n        }\r\n        return new FileAttributeView(path, options);\r\n    }"}], "metadata": {"task_id": "MaterialFiles/473", "ground_truth": "            return null\r\n        }\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return getFileAttributeView(path) as V\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\content\\ContentFileSystemProvider.kt"}}
{"prompt": "import java8.nio.file.Path\noverride fun toAbsolutePath(): ContentPath {", "choices": [{"text": "\n    return new ContentPath(\n        new Path(\n            new Path(\n                new Path(\n                    new Path(\n                        new Path(\n                            new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n                                new Path(\n"}], "metadata": {"task_id": "MaterialFiles/480", "ground_truth": "        if (!isAbsolute) {\r\n            throw UnsupportedOperationException()\r\n        }\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\content\\ContentPath.kt"}}
{"prompt": "import android.net.Uri\nfun exists(uri: Uri): Boolean =\r\n        try {", "choices": [{"text": "\n            return uri.getScheme().equals(\"http\") || uri.getScheme().equals(\"https\")\n        } catch (Exception e) {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/492", "ground_truth": "            checkExistence(uri)\r\n            true\r\n        } catch (e: ResolverException) {\r\n            false\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\content\\resolver\\Resolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.document.resolver.DocumentResolver\nimport me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport android.net.Uri\nprivate fun ((Long) -> Unit).invokeWithSize(uri: Uri) {\r\n        val size = try {\r\n            DocumentResolver.getSize(uri)\r\n        } catch (e: ResolverException) {", "choices": [{"text": "\n            throw new RuntimeException(e)\r\n        }\r\n        return new Unit(size)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/502", "ground_truth": "            e.printStackTrace()\r\n            return\r\n        } ?: return\r\n        this(size)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentCopyMove.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/504", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentFileSystem.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/508", "ground_truth": "    override fun newWatchService(): WatchService {\r\n        // TODO\r\n        throw UnsupportedOperationException()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "\n            return false\r\n        }\r\n        return super.equals(other)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/509", "ground_truth": "            return false\r\n        }\r\n        other as DocumentFileSystem\r\n        return treeUri == other.treeUri\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentFileSystem.kt"}}
{"prompt": "import java8.nio.file.attribute.FileAttributeView\nimport java8.nio.file.attribute.FileAttribute\nimport java8.nio.file.Path\nimport java8.nio.file.LinkOption\noverride fun <V : FileAttributeView> getFileAttributeView(\r\n        path: Path,\r\n        type: Class<V>,\r\n        vararg options: LinkOption\r\n    ): V? {\r\n        if (!supportsFileAttributeView(type)) {", "choices": [{"text": "\n            return null;\r\n        }\r\n        return new FileAttributeView(path, options);\r\n    }"}], "metadata": {"task_id": "MaterialFiles/529", "ground_truth": "            return null\r\n        }\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return getFileAttributeView(path) as V\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\DocumentFileSystemProvider.kt"}}
{"prompt": "fun exists(path: Path): Boolean =\r\n        try {", "choices": [{"text": "\n            if (path.startsWith(\"/\")) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (e) {\n            return false;\n        }\n    }"}], "metadata": {"task_id": "MaterialFiles/542", "ground_truth": "            checkExistence(path)\r\n            true\r\n        } catch (e: ResolverException) {\r\n            false\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\n @Throws(ResolverException::class)", "choices": [{"text": "        super(resolver)\n    }\n\n    @Override\n    public void onResolve(Uri uri) {\n        super.onResolve(uri)\n        if (uri!= null) {\n            mUri = uri\n        }\n    }\n\n    @Override\n    public void onCancel() {\n        super.onCancel()\n        if (mUri!= null) {\n            mUri.cancel()\n        }\n    }\n\n    public Uri getUri() {\n        return mUri;\n    }\n\n    public void setUri(Uri uri) {\n"}], "metadata": {"task_id": "MaterialFiles/543", "ground_truth": "    fun getMimeType(path: Path): String? {\r\n        val uri = getDocumentUri(path)\r\n        return getMimeType(uri)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\n @Throws(ResolverException::class)", "choices": [{"text": "        super(resolver)\n    }\n\n    @Override\n    public void onResolve(Uri uri) {\n        super.onResolve(uri)\n        if (uri!= null) {\n            mUri = uri\n        }\n    }\n\n    @Override\n    public void onCancel() {\n        super.onCancel()\n        if (mUri!= null) {\n            mUri.cancel()\n        }\n    }\n\n    public Uri getUri() {\n        return mUri;\n    }\n\n    public void setUri(Uri uri) {\n"}], "metadata": {"task_id": "MaterialFiles/545", "ground_truth": "    fun getSize(path: Path): Long? {\r\n        val uri = getDocumentUri(path)\r\n        return getSize(uri)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\nimport me.zhanghai.android.files.app.contentResolver\nimport android.provider.DocumentsContract\nimport android.os.CancellationSignal\nimport android.net.Uri\nimport android.graphics.Point\nimport android.graphics.Bitmap\n @Throws(ResolverException::class)\r\n    fun getThumbnail(path: Path, width: Int, height: Int, signal: CancellationSignal): Bitmap? {\r\n        val uri = getDocumentUri(path)\r\n        return try {\r\n            DocumentsContract.getDocumentThumbnail(\r\n                contentResolver, uri, Point(width, height), signal", "choices": [{"text": "\n            )\r\n        } catch (Exception e) {\r\n            throw new ResolverException(e)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/547", "ground_truth": "            )\r\n        } catch (e: Exception) {\r\n            throw ResolverException(e)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\nimport android.net.Uri\nprivate fun ((Long) -> Unit).invokeWithSize(uri: Uri) {\r\n        val size = try {\r\n            getSize(uri)\r\n        } catch (e: ResolverException) {", "choices": [{"text": "\n            throw new ResolverException(e)\r\n        }\r\n        return new Unit(size)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/549", "ground_truth": "            e.printStackTrace()\r\n            return\r\n        } ?: return\r\n        this(size)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\nimport android.os.Build\n @Throws(ResolverException::class)\r\n    fun remove(path: Path) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && !isRemoveUnsupported(path)) {\r\n            removeApi24(path)", "choices": [{"text": "\n        } else {\r\n            removeApi24(path)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/554", "ground_truth": "        } else {\r\n            @Suppress(\"DEPRECATION\")\r\n            delete(path)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.content.resolver.ResolverException\nimport me.zhanghai.android.files.provider.content.resolver.Resolver\nimport android.os.Build\nimport android.net.Uri\n @Throws(ResolverException::class)\r\n    fun remove(uri: Uri, parentUri: Uri) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && !isRemoveUnsupported(uri)) {", "choices": [{"text": "\n            resolver.remove(uri, parentUri);\r\n        } else {\r\n            super.remove(uri, parentUri);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/555", "ground_truth": "            removeApi24(uri, parentUri)\r\n        } else {\r\n            delete(uri)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\document\\resolver\\DocumentResolver.kt"}}
{"prompt": "import java8.nio.file.spi.FileSystemProvider\noperator fun get(scheme: String): FileSystemProvider {\r\n        for (provider in FileSystemProvider.installedProviders()) {\r\n            if (provider.scheme.equals(scheme, ignoreCase = true)) {", "choices": [{"text": "\n                return provider;\r\n            }\r\n        }\r\n        return null;\r\n    }"}], "metadata": {"task_id": "MaterialFiles/563", "ground_truth": "                return provider\r\n            }\r\n        }\r\n        throw ProviderNotFoundException(scheme)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\FileSystemProviders.kt"}}
{"prompt": "import org.apache.commons.net.ftp.FTPClient\nprivate fun closeClient(client: FTPClient) {\r\n        try {\r\n            client.logout()", "choices": [{"text": "\n        } catch (e) {\r\n            e.printStackTrace()\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/567", "ground_truth": "        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n        client.disconnect()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import org.apache.commons.net.ftp.FTPClient\nprivate inline fun <R> useClient(authority: Authority, block: (FTPClient) -> R): R {\r\n        val client = acquireClient(authority)\r\n        try {", "choices": [{"text": "\n            client.connect()\r\n            return block.apply(client)\r\n        } finally {\r\n            releaseClient(client)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/568", "ground_truth": "            return block(client)\r\n        } finally {\r\n            releaseClient(authority, client)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)", "choices": [{"text": "(IOException::class)\n  end\n\n  def test_can_write_to_file\n    file = File.open(\"test.txt\", \"w\")\n    file.write(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n  def test_can_read_from_file\n    file = File.open(\"test.txt\", \"r\")\n    file.read(\"test.txt\")\n    file.close\n    assert_equal \"test.txt\", file.read\n  end\n\n"}], "metadata": {"task_id": "MaterialFiles/571", "ground_truth": "    fun delete(path: Path) {\r\n        val file = listFile(path, true)\r\n        delete(path, file.isDirectory)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import java8.nio.file.Path\nimport java.io.IOException\n @Throws(IOException::class)\r\n    fun delete(path: Path, isDirectory: Boolean) {\r\n        if (isDirectory) {", "choices": [{"text": "\n            FileUtils.deleteDirectory(path);\r\n        } else {\r\n            FileUtils.delete(path);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/572", "ground_truth": "            deleteDirectory(path)\r\n        } else {\r\n            deleteFile(path)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n        override fun close() {\r\n            try {\r\n                super.close()\r\n                if (!client.completePendingCommand()) {\r\n                    client.throwNegativeReplyCodeException()", "choices": [{"text": "\n                }\r\n            } finally {\r\n                super.close()\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/583", "ground_truth": "                }\r\n            } finally {\r\n                releaseClient(authority, client)\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\Client.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.InputStream\nimport java.io.IOException\nimport me.zhanghai.android.files.provider.common.ByteBufferInputStream\n @Throws(IOException::class)\r\n    override fun onWrite(position: Long, source: ByteBuffer) {\r\n        synchronized(clientLock) {\r\n            client.restartOffset = position\r\n            ByteBufferInputStream(source).use {\r\n                if (!client.storeFile(path, it)) {", "choices": [{"text": "\n                    throw new IOException(\"Failed to store file: \" + path)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/584", "ground_truth": "                    client.throwNegativeReplyCodeException()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\FileByteChannel.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.InputStream\nimport java.io.IOException\nimport me.zhanghai.android.files.provider.common.ByteBufferInputStream\n @Throws(IOException::class)\r\n    override fun onAppend(source: ByteBuffer) {\r\n        synchronized(clientLock) {\r\n            ByteBufferInputStream(source).use {\r\n                if (!client.appendFile(path, it)) {", "choices": [{"text": "\n                    throw new IOException(\"Failed to append file: \" + path);\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/585", "ground_truth": "                    client.throwNegativeReplyCodeException()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\FileByteChannel.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\nimport me.zhanghai.android.files.compat.nullInputStream\n @Throws(IOException::class)\r\n    override fun onTruncate(size: Long) {\r\n        synchronized(clientLock) {\r\n            client.restartOffset = size\r\n            InputStream::class.nullInputStream().use {\r\n                if (!client.storeFile(path, it)) {", "choices": [{"text": "\n                    throw new IOException(\"Failed to truncate file: \" + path)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/586", "ground_truth": "                    client.throwNegativeReplyCodeException()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\client\\FileByteChannel.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/593", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\FtpFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "\n            return false\r\n        }\r\n        return super.equals(other)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/597", "ground_truth": "            return false\r\n        }\r\n        other as FtpFileSystem\r\n        return authority == other.authority\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\FtpFileSystem.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.OpenOptions\nimport java8.nio.file.StandardOpenOption\ninternal fun OpenOptions.checkForFtp() {\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (sync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.SYNC.toString())", "choices": [{"text": "\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r"}], "metadata": {"task_id": "MaterialFiles/625", "ground_truth": "    }\r\n    if (dsync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DSYNC.toString())\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\ftp\\OpenOptionsFtpExtensions.kt"}}
{"prompt": "import java8.nio.file.Path\noverride fun iterator(): MutableIterator<Path> {\r\n        synchronized(lock) {\r\n            check(!isClosed) { \"This directory stream is closed\" }\r\n            check(iterator == null) { \"The iterator has already been returned\" }", "choices": [{"text": "\n        }\r\n        return iterator;\r\n    }"}], "metadata": {"task_id": "MaterialFiles/627", "ground_truth": "            val iterator = PathIterator()\r\n            this.iterator = iterator\r\n            return iterator\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\LinuxDirectoryStream.kt"}}
{"prompt": "import java8.nio.file.Path\noverride fun next(): Path {\r\n            synchronized(lock) {\r\n                if (!hasNext()) {\r\n                    throw NoSuchElementException()\r\n                }", "choices": [{"text": "\n                return next()\r\n            }\r\n            throw NoSuchElementException()\r\n        }"}], "metadata": {"task_id": "MaterialFiles/630", "ground_truth": "                val path = nextPath!!\r\n                nextPath = null\r\n                return path\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\LinuxDirectoryStream.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.ByteStringBuilder\nimport me.zhanghai.android.files.provider.common.ByteString\nprivate fun getFlagsFromOptions(options: ByteString): Pair<Long, ByteString> {\r\n        var flags = 0L\r\n        val builder = ByteStringBuilder()\r\n        for (option in options.split(OPTIONS_DELIMITER)) {\r\n            val flag = OPTION_FLAG_MAP[option]\r\n            if (flag != null) {\r\n                flags = flags or flag\r\n            } else {\r\n                if (!builder.isEmpty) {\r\n                    builder.append(OPTIONS_DELIMITER)\r\n                }", "choices": [{"text": "\n                builder.append(OPTIONS_DELIMITER)\r\n            }\r\n        }\r\n        return builder.build()\r\n    }"}], "metadata": {"task_id": "MaterialFiles/648", "ground_truth": "                builder.append(option)\r\n            }\r\n        }\r\n        return flags to builder.toByteString()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\LocalLinuxFileStore.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.linux.syscall.SyscallException\nimport me.zhanghai.android.files.provider.linux.syscall.Syscall\nimport me.zhanghai.android.files.provider.linux.syscall.StructMntent\n @Throws(SyscallException::class)\r\n        private fun getMountEntries(): List<StructMntent> {\r\n            val entries = mutableListOf<StructMntent>()\r\n            val file = Syscall.setmntent(PATH_PROC_SELF_MOUNTS, MODE_R)\r\n            try {\r\n                while (true) {\r\n                    val mntent = Syscall.getmntent(file) ?: break\r\n                    entries += mntent\r\n                }", "choices": [{"text": "\n            } catch (SyscallException e) {\r\n                throw new RuntimeException(e)\r\n            }\r\n            return entries\r\n        }"}], "metadata": {"task_id": "MaterialFiles/655", "ground_truth": "            } finally {\r\n                Syscall.endmntent(file)\r\n            }\r\n            return entries\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\LocalLinuxFileStore.kt"}}
{"prompt": "import java.io.File\nimport androidx.annotation.RequiresApi\nimport android.provider.MediaStore\nimport android.os.Handler\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.Q)\r\n    private fun deleteMediaStoreEntryAsync(file: File) {\r\n        deleteMediaStoreEntryHandler.post {\r\n            try {\r\n                deleteMediaStoreEntrySync(file)", "choices": [{"text": "\n            } catch (Exception e) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/676", "ground_truth": "            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\media\\MediaScanner.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport me.zhanghai.android.files.provider.root.isRunningAsRoot\nimport me.zhanghai.android.files.provider.common.DelegateFileChannel\nimport java8.nio.channels.FileChannel\nfun createScanOnCloseFileChannel(fileChannel: FileChannel, file: File): FileChannel =\r\n        if (isRunningAsRoot) {\r\n            fileChannel\r\n        } else {\r\n            object : DelegateFileChannel(fileChannel) {\r\n                @Throws(IOException::class)\r\n                override fun implCloseChannel() {\r\n                    super.implCloseChannel()", "choices": [{"text": "\n                    fileChannel.close()\r\n                }\r\n            }\r\n        }\r\n    return fileChannel\r\n}"}], "metadata": {"task_id": "MaterialFiles/677", "ground_truth": "\r\n                    scan(file)\r\n                }\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\media\\MediaScanner.kt"}}
{"prompt": "import java.io.FileDescriptor\n @Throws(SyscallException::class)\r\n    fun close(fd: FileDescriptor) {\r\n        try {", "choices": [{"text": "\n            fd.close();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/678", "ground_truth": "            Os.close(fd)\r\n        } catch (e: ErrnoException) {\r\n            throw SyscallException(e)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\syscall\\Syscall.kt"}}
{"prompt": "import java.io.FileDescriptor\nimport androidx.annotation.Size\nimport android.system.Os\n @Size(2)\r\n    @Throws(SyscallException::class)\r\n    fun socketpair(domain: Int, type: Int, protocol: Int): Array<FileDescriptor> {\r\n        val fds = arrayOf(FileDescriptor(), FileDescriptor())\r\n        try {\r\n            Os.socketpair(domain, type, protocol, fds[0], fds[1])", "choices": [{"text": "\n        } catch (SyscallException e) {\r\n            e.printStackTrace()\r\n        }\r\n        return fds\r\n    }"}], "metadata": {"task_id": "MaterialFiles/687", "ground_truth": "        } catch (e: ErrnoException) {\r\n            throw SyscallException(e)\r\n        }\r\n        return fds\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\linux\\syscall\\Syscall.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport java.io.IOException\nimport android.os.IInterface\nimport android.os.Binder\n\r\n@OptIn(ExperimentalContracts::class)\r\nfun <T, R> T.tryRun(exception: ParcelableException, block: T.() -> R): R?\r\n    where T : IInterface, T : Binder {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {\r\n        block()\r\n    } catch (e: IOException) {\r\n        exception.value = e\r\n        null", "choices": [{"text": "\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/693", "ground_truth": "    } catch (e: RuntimeException) {\r\n        exception.value = e\r\n        null\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\IInterfaceExtensions.kt"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\n @Throws(IOException::class)\r\n    override fun read(buffer: ByteArray, offset: Int, length: Int): Int =\r\n        if (remoteInputStream != null) {\r\n            val remoteBuffer = ByteArray(length)\r\n            val size = remoteInputStream.call { exception -> read2(remoteBuffer, exception) }\r\n            if (size > 0) {\r\n                remoteBuffer.copyInto(buffer, offset, 0, size)", "choices": [{"text": "\n            } else {\r\n                buffer.copyInto(buffer, offset, 0, length)\r\n            }\r\n        } else {\r\n            buffer.copyInto(buffer, offset, 0, length)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/719", "ground_truth": "            }\r\n            size\r\n        } else {\r\n            localInputStream!!.read(buffer, offset, length)\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteInputStream.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport java.io.IOException\n @Throws(IOException::class)\r\n    override fun read(destination: ByteBuffer): Int =\r\n        if (remoteChannel != null) {\r\n            val destinationBytes = ByteArray(destination.remaining())\r\n            val size = remoteChannel.call { exception -> read(destinationBytes, exception) }\r\n            if (size > 0) {\r\n                destination.put(destinationBytes, 0, size)", "choices": [{"text": "\n            } else {\r\n                destination.put(null, 0, 0)\r\n            }\r\n        } else {\r\n            destination.put(null, 0, 0)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/729", "ground_truth": "            }\r\n            size\r\n        } else {\r\n            localChannel!!.read(destination)\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteSeekableByteChannel.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.channels.SeekableByteChannel\n @Throws(IOException::class)\r\n    override fun position(newPosition: Long): SeekableByteChannel {\r\n        if (remoteChannel != null) {\r\n            remoteChannel.call { exception -> position2(newPosition, exception) }", "choices": [{"text": "\n            remoteChannel.call { exception -> position3(newPosition, exception) }\r\n        } else {\r\n            remoteChannel.call { exception -> position4(newPosition, exception) }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/732", "ground_truth": "        } else {\r\n            localChannel!!.position(newPosition)\r\n        }\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteSeekableByteChannel.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.channels.SeekableByteChannel\n @Throws(IOException::class)\r\n    override fun truncate(size: Long): SeekableByteChannel {\r\n        if (remoteChannel != null) {\r\n            remoteChannel.call { exception -> truncate(size, exception) }", "choices": [{"text": "\n            remoteChannel.truncate(size)\r\n        }\r\n        return this\r\n    }"}], "metadata": {"task_id": "MaterialFiles/734", "ground_truth": "        } else {\r\n            return localChannel!!.truncate(size)\r\n        }\r\n        return this\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteSeekableByteChannel.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun close() {\r\n        if (remoteChannel != null) {\r\n            remoteChannel.call { exception -> close(exception) }", "choices": [{"text": "\n            remoteChannel.close()\r\n        } else {\r\n            super.close()\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/737", "ground_truth": "            isRemoteClosed = true\r\n        } else {\r\n            localChannel!!.close()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\remote\\RemoteSeekableByteChannel.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.file.FileSystem\n @Throws(IOException::class)\r\n    override fun close() {\r\n        val wasOpen = localFileSystem.isOpen\r\n        localFileSystem.close()", "choices": [{"text": "\n        if (wasOpen) {\r\n            localFileSystem.close()\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/741", "ground_truth": "        // TODO: No need for this check?\r\n        if (wasOpen) {\r\n            rootFileSystem.close()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\root\\RootableFileSystem.kt"}}
{"prompt": "import java.io.IOException\nimport java8.nio.file.Path\n\r\n@Throws(IOException::class)\r\nfun <T, R> callRootable(\r\n    path: Path,\r\n    isAttributeAccess: Boolean,\r\n    localObject: T,\r\n    rootObject: T, block: T.() -> R\r\n): R {\r\n    path as? RootablePath ?: throw IllegalArgumentException(\"$path is not a RootablePath\")\r\n    return when (rootStrategy) {\r\n        RootStrategy.NEVER -> localObject.block()\r\n        RootStrategy.AUTOMATIC ->\r\n            if (path.isRootRequired(isAttributeAccess)) {\r\n                rootObject.block()\r\n            } else {", "choices": [{"text": "\n                rootObject.block()\r\n            }\r\n        RootStrategy.NEVER -> localObject.block()\r\n        RootStrategy.AUTOMATIC ->\r\n            if (path.isRootRequired(isAttributeAccess)) {\r\n                rootObject.block()\r\n            } else {\r\n                localObject.block()\r\n            }\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/744", "ground_truth": "                localObject.block()\r\n            }\r\n        RootStrategy.ALWAYS -> rootObject.block()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\root\\RootablePath.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun setReadOnly(readOnly: Boolean) {\r\n        callRootable(path) {\r\n            isReadOnly = readOnly", "choices": [{"text": "(readOnly);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/745", "ground_truth": "            if (this == rootFileStore) {\r\n                localFileStore.refresh()\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\root\\RootablePosixFileStore.kt"}}
{"prompt": "import rikka.sui.Sui\nimport me.zhanghai.android.files.app.application\nimport androidx.annotation.ChecksSdkIntAtLeast\nimport android.os.Build\n @ChecksSdkIntAtLeast(api = Build.VERSION_CODES.M)\r\n    fun isSuiAvailable(): Boolean {\r\n        synchronized(lock) {\r\n            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\r\n                return false\r\n            }\r\n            if (!isSuiIntialized) {\r\n                Sui.init(application.packageName)", "choices": [{"text": "\n                isSuiIntialized = true\r\n            }\r\n            return isSuiIntialized\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/748", "ground_truth": "                isSuiIntialized = true\r\n            }\r\n            return Sui.isSui()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\root\\SuiFileServiceLauncher.kt"}}
{"prompt": "import java8.nio.file.Path\nimport net.schmizz.sshj.sftp.OpenMode\nimport net.schmizz.sshj.sftp.FileAttributes\n @Throws(ClientException::class)\r\n    fun access(path: Path, flags: Set<OpenMode>) {\r\n        val file = open(path, flags, FileAttributes.EMPTY)\r\n        try {", "choices": [{"text": "\n            return file.access(flags)\r\n        } finally {\r\n            close(file)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/752", "ground_truth": "            file.close()\r\n        } catch (e: IOException) {\r\n            throw ClientException(e)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\client\\Client.kt"}}
{"prompt": "import java8.nio.file.Path\nimport net.schmizz.sshj.sftp.FileMode\n @Throws(ClientException::class)\r\n    fun remove(path: Path) {\r\n        val attributes = lstat(path)\r\n        val isDirectory = attributes.type == FileMode.Type.DIRECTORY\r\n        if (isDirectory) {", "choices": [{"text": "\n            removeDirectory(path)\r\n        } else {\r\n            removeFile(path)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/759", "ground_truth": "            rmdir(path)\r\n        } else {\r\n            unlink(path)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\client\\Client.kt"}}
{"prompt": "import java.io.IOException\nimport net.schmizz.sshj.sftp.SFTPException\n @Throws(IOException::class)\r\n    override fun onClose() {\r\n        try {\r\n            file.close()\r\n        } catch (e: SFTPException) {\r\n            // NO_SUCH_FILE is returned when canceling an in-progress copy to SFTP server.", "choices": [{"text": "\n            throw new SFTPException(e)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/769", "ground_truth": "            if (e.statusCode != Response.StatusCode.NO_SUCH_FILE) {\r\n                throw e\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\client\\FileByteChannel.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/773", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\SftpFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "\n            return false\r\n        }\r\n        return super.equals(other)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/777", "ground_truth": "            return false\r\n        }\r\n        other as SftpFileSystem\r\n        return authority == other.authority\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\sftp\\SftpFileSystem.kt"}}
{"prompt": "import java.io.IOException\n @Throws(IOException::class)\r\n    override fun onForce(metaData: Boolean) {\r\n        try {", "choices": [{"text": "\n            super.onForce(metaData);\r\n            return true;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/813", "ground_truth": "            file.flush()\r\n        } catch (e: SMBRuntimeException) {\r\n            throw e.toIOException()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\client\\FileByteChannel.kt"}}
{"prompt": "import java.io.InterruptedIOException\n\r\n@Throws(InterruptedIOException::class)", "choices": [{"text": "(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(InterruptedIOException::class)\n@Ignore(Interrupted"}], "metadata": {"task_id": "MaterialFiles/816", "ground_truth": "private fun throwIfInterrupted() {\r\n    if (Thread.interrupted()) {\r\n        throw InterruptedIOException()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\client\\FileExtensions.kt"}}
{"prompt": "import me.zhanghai.android.files.util.enumSetOf\nimport me.zhanghai.android.files.provider.common.OpenOptions\nimport com.hierynomus.msdtyp.AccessMask\ninternal fun OpenOptions.toSmbDesiredAccess(): Set<AccessMask> =\r\n    enumSetOf<AccessMask>().apply {\r\n        if (read) {\r\n            this += AccessMask.GENERIC_READ", "choices": [{"text": "\n        } else {\r\n            this += AccessMask.GENERIC_WRITE\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/820", "ground_truth": "        }\r\n        if (write) {\r\n            this += AccessMask.GENERIC_WRITE\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\OpenOptionsSmbExtensions.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {\r\n            return false\r\n        }\r\n        other as SmbFileKey\r\n        return if (fileId != 0L || other.fileId != 0L) {\r\n            path.authority == other.path.authority\r\n                && path.sharePath!!.name == other.path.sharePath!!.name", "choices": [{"text": "(other.path.sharePath!!.name)\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/825", "ground_truth": "                && fileId == other.fileId\r\n        } else {\r\n            path == other.path\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\SmbFileKey.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/827", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\SmbFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "\n            return false\r\n        }\r\n        return super.equals(other)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/831", "ground_truth": "            return false\r\n        }\r\n        other as SmbFileSystem\r\n        return authority == other.authority\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\SmbFileSystem.kt"}}
{"prompt": "val id\nval directory Directory\nval key\n override fun cancel(key: SmbWatchKey) {\r\n        val notifier = synchronized(notifiers) { notifiers.remove(key.watchable())!! }\r\n        notifier.interrupt()\r\n        try {", "choices": [{"text": "\n            notifier.cancel()\r\n        } catch (e) {\r\n            Log.e(e)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/857", "ground_truth": "            notifier.join()\r\n        } catch (e: InterruptedException) {\r\n            e.printStackTrace()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\smb\\SmbWatchService.kt"}}
{"prompt": "import okhttp3.Response\nimport java8.nio.file.Path\nimport at.bitfire.dav4jvm.exception.DavException\nimport at.bitfire.dav4jvm.Response\nimport at.bitfire.dav4jvm.DavResource\n @Throws(DavException::class)\r\n    fun findProperties(path: Path, noFollowLinks: Boolean): Response {\r\n        synchronized(collectionMemberCache) {\r\n            collectionMemberCache.remove(path)?.let { return it }\r\n        }\r\n        try {\r\n            return findProperties(\r\n                DavResource(getClient(path.authority), path.url), *FILE_PROPERTIES", "choices": [{"text": "\n            );\r\n        } catch (DavException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/865", "ground_truth": "            )\r\n        } catch (e: IOException) {\r\n            throw e.toDavException()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\client\\Client.kt"}}
{"prompt": "import java8.nio.file.Path\nimport me.zhanghai.android.files.provider.common.NotifyEntryModifiedSeekableByteChannel\nimport java8.nio.channels.SeekableByteChannel\nimport at.bitfire.dav4jvm.exception.DavException\nimport at.bitfire.dav4jvm.DavResource\n @Throws(DavException::class)\r\n    fun openByteChannel(path: Path, isAppend: Boolean): SeekableByteChannel {\r\n        try {\r\n            val client = getClient(path.authority)\r\n            val resource = DavResource(client, path.url)\r\n            val patchSupport = resource.getPatchSupport()\r\n            return NotifyEntryModifiedSeekableByteChannel(\r\n                FileByteChannel(resource, patchSupport, isAppend), path as Java8Path", "choices": [{"text": "\n            )\r\n        } catch (DavException e) {\r\n            throw new RuntimeException(e)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/866", "ground_truth": "            )\r\n        } catch (e: IOException) {\r\n            throw e.toDavException()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\client\\Client.kt"}}
{"prompt": "import java.io.IOException\nimport at.bitfire.dav4jvm.exception.DavException\nimport at.bitfire.dav4jvm.DavResource\n\r\n@Throws(DavException::class, IOException::class)\r\nfun DavResource.getPatchSupport(): PatchSupport {\r\n    lateinit var patchSupport: PatchSupport\r\n    options { davCapabilities, response ->\r\n        patchSupport = when {\r\n            response.headers[\"Server\"]?.contains(\"Apache\") == true &&\r\n                \"<http://apache.org/dav/propset/fs/1>\" in davCapabilities ->\r\n                PatchSupport.APACHE\r\n\r\n            \"sabredav-partialupdate\" in davCapabilities -> PatchSupport.SABRE", "choices": [{"text": "\n\r\n            \"sabredav-partialupdate\" in davCapabilities -> PatchSupport.SABRE\r\n        }\r\n    }\r\n    return patchSupport\r\n}"}], "metadata": {"task_id": "MaterialFiles/868", "ground_truth": "            else -> PatchSupport.NONE\r\n        }\r\n    }\r\n    return patchSupport\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\client\\DavResourceCompat.kt"}}
{"prompt": "import java.nio.ByteBuffer\nimport okio.BufferedSink\nimport okhttp3.RequestBody\nimport okhttp3.Request\nimport okhttp3.MediaType\nprivate fun ByteBuffer.toRequestBody(contentType: MediaType? = null): RequestBody {\r\n    val contentLength = remaining().toLong()\r\n    mark()\r\n    return object : RequestBody() {\r\n        override fun contentType() = contentType\r\n\r\n        override fun contentLength(): Long = contentLength\r\n\r\n        override fun writeTo(sink: BufferedSink) {", "choices": [{"text": "(sink: BufferedSink) {\r\n            super.writeTo(sink)\r\n            sink.write(remaining())\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/869", "ground_truth": "            reset()\r\n            sink.write(this@toRequestBody)\r\n        }\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\client\\DavResourceCompat.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.OpenOptions\nimport java8.nio.file.StandardOpenOption\ninternal fun OpenOptions.checkForWebDav() {\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (sync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.SYNC.toString())", "choices": [{"text": "\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r\n    }\r\n    if (deleteOnClose) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DELETE_ON_CLOSE.toString())\r"}], "metadata": {"task_id": "MaterialFiles/873", "ground_truth": "    }\r\n    if (dsync) {\r\n        throw UnsupportedOperationException(StandardOpenOption.DSYNC.toString())\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\OpenOptionsWebDavExtensions.kt"}}
{"prompt": "override fun close() {\r\n        synchronized(lock) {\r\n            if (!isOpen) {\r\n                return", "choices": [{"text": ";\r\n            }\r\n            isOpen = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/875", "ground_truth": "            }\r\n            provider.removeFileSystem(this)\r\n            isOpen = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\WebDavFileSystem.kt"}}
{"prompt": "override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r\n            return true\r\n        }\r\n        if (javaClass != other?.javaClass) {", "choices": [{"text": "\n            return false\r\n        }\r\n        return super.equals(other)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/879", "ground_truth": "            return false\r\n        }\r\n        other as WebDavFileSystem\r\n        return authority == other.authority\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\provider\\webdav\\WebDavFileSystem.kt"}}
{"prompt": "import java.util.Locale\nimport me.zhanghai.android.files.app.application\noverride fun persistString(value: String?): Boolean {\r\n        applicationLocale = if (value != null && value != VALUE_SYSTEM_DEFAULT) {\r\n            Locale.forLanguageTag(value)", "choices": [{"text": "\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/923", "ground_truth": "        } else {\r\n            null\r\n        }\r\n        return true\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\LocalePreference.kt"}}
{"prompt": "override fun onClick() {\r\n        // Don't show dialog if we have an intent.\r\n        if (intent != null) {", "choices": [{"text": "\n            dialog.show();\r\n        } else {\r\n            Intent intent = new Intent();\r\n            intent.setAction(Intent.ACTION_VIEW);\r\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n            intent.putExtra(Intent.EXTRA_INTENT, intent);\r\n            startActivity(intent);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/924", "ground_truth": "            return\r\n        }\r\n\r\n        super.onClick()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\LocalePreference.kt"}}
{"prompt": "override fun setText(text: String?) {\r\n        text ?: return\r\n        integer = try {", "choices": [{"text": "\n            text = text.trim()\r\n        } catch (e) {\r\n            text = null\r\n        }\r\n        if (text == null) {\r\n            return null\r\n        }\r\n        return text\r\n    }"}], "metadata": {"task_id": "MaterialFiles/926", "ground_truth": "            text.toInt()\r\n        } catch (e: NumberFormatException) {\r\n            return\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\NonNegativeIntegerPreference.kt"}}
{"prompt": "import android.os.Parcelable\noverride fun onSaveInstanceState(): Parcelable? {\r\n        val superState = super.onSaveInstanceState()\r\n        if (isPersistent) {", "choices": [{"text": "\n            superState.putParcelable(\"isPersistent\", isPersistent)\r\n        }\r\n        return superState\r\n    }"}], "metadata": {"task_id": "MaterialFiles/927", "ground_truth": "            return superState\r\n        }\r\n\r\n        return State(superState, integer)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\NonNegativeIntegerPreference.kt"}}
{"prompt": "import android.os.Parcelable\noverride fun onRestoreInstanceState(state: Parcelable?) {\r\n        if (state == null || state !is State) {\r\n            super.onRestoreInstanceState(state)\r\n            return", "choices": [{"text": "\n        }\r\n        super.onRestoreInstanceState(state)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/928", "ground_truth": "        }\r\n\r\n        super.onRestoreInstanceState(state.superState)\r\n        integer = state.integer\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\NonNegativeIntegerPreference.kt"}}
{"prompt": "import android.content.Intent\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        if (requestCode == this.requestCode) {\r\n            val result = pickDirectoryContract.parseResult(resultCode, data)", "choices": [{"text": "\n            if (result!= null) {\r\n                this.resultCode = resultCode\r\n            }\r\n        }\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/931", "ground_truth": "            if (result != null) {\r\n                path = result\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\PathPreference.kt"}}
{"prompt": "import me.zhanghai.android.files.util.use\nimport me.zhanghai.android.files.util.Base64\nimport android.os.Parcel\nprivate fun T.toParcelBase64(): Base64 {\r\n        val bytes = Parcel.obtain().use { parcel ->", "choices": [{"text": "\n            return Base64.decodeBase64(bytes.toByteArray());\r\n        };\r\n        return bytes;\r\n    }"}], "metadata": {"task_id": "MaterialFiles/947", "ground_truth": "            parcel.writeValue(this)\r\n            parcel.marshall()\r\n        }\r\n        return bytes.toBase64()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\settings\\SettingLiveDatas.kt"}}
{"prompt": "import android.os.Bundle\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)", "choices": [{"text": "(savedInstanceState: Bundle?) {\r\n            super.onActivityCreated(savedInstanceState)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/971", "ground_truth": "\r\n        if (savedInstanceState == null) {\r\n            openDocumentTreeLauncher.launchSafe(null, this)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\AddDocumentTreeFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.file.asDocumentTreeUriOrNull\nimport me.zhanghai.android.files.file.DocumentTreeUri\nimport android.net.Uri\nprivate fun onOpenDocumentTreeResult(result: Uri?) {\r\n        val treeUri = result?.asDocumentTreeUriOrNull()", "choices": [{"text": "\n        if (treeUri!= null) {\r\n            DocumentTreeUri documentTreeUri = new DocumentTreeUri(treeUri)\r\n            onOpenDocumentTreeResult(documentTreeUri)\r\n        } else {\r\n            onOpenDocumentTreeResult(null)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/972", "ground_truth": "        if (treeUri != null) {\r\n            addDocumentTree(treeUri)\r\n        }\r\n        finish()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\AddDocumentTreeFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.provider.ftp.client.Mode\nimport me.zhanghai.android.files.R\nprivate fun connectAndAdd() {\r\n        if (!viewModel.connectState.value.isReady) {", "choices": [{"text": "\n            viewModel.connectState.value.isReady = true;\r\n        } else {\r\n            viewModel.connectState.value.isReady = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/999", "ground_truth": "            return\r\n        }\r\n        val server = getServerOrSetError() ?: return\r\n        viewModel.connect(server)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\EditFtpServerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.R\nprivate fun connectAndAdd() {\r\n        if (!viewModel.connectState.value.isReady) {", "choices": [{"text": "\n            viewModel.connectState.value.isReady = true;\r\n        } else {\r\n            viewModel.connectState.value.isReady = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1009", "ground_truth": "            return\r\n        }\r\n        val server = getServerOrSetError() ?: return\r\n        viewModel.connect(server)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\EditSftpServerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.R\nprivate fun connectAndAdd() {\r\n        if (!viewModel.connectState.value.isReady) {", "choices": [{"text": "\n            viewModel.connectState.value.isReady = true;\r\n        } else {\r\n            viewModel.connectState.value.isReady = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1018", "ground_truth": "            return\r\n        }\r\n        val server = getServerOrSetError() ?: return\r\n        viewModel.connect(server)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\EditSmbServerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.isReady\nimport me.zhanghai.android.files.R\nprivate fun connectAndAdd() {\r\n        if (!viewModel.connectState.value.isReady) {", "choices": [{"text": "\n            viewModel.connectState.value.isReady = true;\r\n        } else {\r\n            viewModel.connectState.value.isReady = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1026", "ground_truth": "            return\r\n        }\r\n        val server = getServerOrSetError() ?: return\r\n        viewModel.connect(server)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\EditWebDavServerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.util.valueCompat\nimport me.zhanghai.android.files.settings.Settings\nfun addOrReplace(storage: Storage) {\r\n        val storages = Settings.STORAGES.valueCompat.toMutableList().apply {\r\n            val index = indexOfFirst { it.id == storage.id }\r\n            if (index != -1) {\r\n                this[index] = storage\r\n            } else {", "choices": [{"text": "\n                storages.add(storage)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1043", "ground_truth": "                this += storage\r\n            }\r\n        }\r\n        Settings.STORAGES.putValue(storages)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\Storages.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport java.net.URI\nfun KClass<URI>.createOrLog(uri: String): URI? =\r\n    try {", "choices": [{"text": "\n        return URI.create(uri);\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1047", "ground_truth": "        URI(uri)\r\n    } catch (e: URISyntaxException) {\r\n        e.printStackTrace()\r\n        null\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\URIExtensions.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport java.net.URI\nfun KClass<URI>.isValidHost(host: String): Boolean =\r\n    try {", "choices": [{"text": "\n        URI.parse(host);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"}], "metadata": {"task_id": "MaterialFiles/1049", "ground_truth": "        URI(null, null, host, -1, null, null, null)\r\n        true\r\n    } catch (e: URISyntaxException) {\r\n        false\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\storage\\URIExtensions.kt"}}
{"prompt": "fun sync() {\r\n        for (activity in activities) {\r\n            val nightMode = nightMode\r\n            if (activity is OnNightModeChangedListener) {\r\n                if (getUiModeNight(activity.delegate.localNightMode, activity)\r\n                    != getUiModeNight(nightMode, activity)) {\r\n                    activity.onNightModeChangedFromHelper(nightMode)\r\n                }", "choices": [{"text": "\n            } else {\r\n                activity.onNightModeChangedFromHelper(nightMode)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1055", "ground_truth": "            } else {\r\n                activity.delegate.localNightMode = nightMode\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\theme\\night\\NightModeHelper.kt"}}
{"prompt": "import android.graphics.Canvas\noverride fun draw(canvas: Canvas) {\r\n        if (needMirroring()) {\r\n            val centerX = bounds.exactCenterX()\r\n            canvas.scale(-1f, 1f, centerX, 0f)\r\n            super.draw(canvas)", "choices": [{"text": "\n        } else {\r\n            super.draw(canvas)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1059", "ground_truth": "            canvas.scale(-1f, 1f, centerX, 0f)\r\n        } else {\r\n            super.draw(canvas)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\AutoMirrorDrawable.kt"}}
{"prompt": "import android.graphics.Rect\noverride fun getPadding(padding: Rect): Boolean {\r\n        val hasPadding = super.getPadding(padding)\r\n        if (needMirroring()) {\r\n            val paddingStart = padding.left\r\n            val paddingEnd = padding.right", "choices": [{"text": "\n            return hasPadding && paddingStart <= paddingEnd\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1061", "ground_truth": "            padding.left = paddingEnd\r\n            padding.right = paddingStart\r\n        }\r\n        return hasPadding\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\AutoMirrorDrawable.kt"}}
{"prompt": "import android.animation.Animator\noverride fun setSubtitle(subtitle: CharSequence?) {\r\n        if (getSubtitle() == subtitle) {\r\n            return\r\n        }\r\n        nextSubtitle = subtitle\r\n        ensureSubtitleAnimatorTarget()\r\n        if (subtitleAnimator.target == null) {\r\n            // Subtitle text view not available (yet), just delegate to super.\r\n            super.setSubtitle(subtitle)\r\n            return", "choices": [{"text": "\n        }\r\n        subtitleAnimator.setSubtitle(subtitle)\r\n        super.setSubtitle(subtitle)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1075", "ground_truth": "        }\r\n        if (!subtitleAnimator.isRunning) {\r\n            subtitleAnimator.start()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\CrossfadeSubtitleToolbar.kt"}}
{"prompt": "import android.animation.ValueAnimator\nimport android.animation.Animator\noverride fun onAnimationUpdate(animator: ValueAnimator) {\r\n            if (animator.animatedFraction < 0.5) {", "choices": [{"text": "\n                animator.animatedFraction = 0.5;\r\n            } else {\r\n                animator.animatedFraction = 1.5;\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/1077", "ground_truth": "                isTextUpdated = false\r\n            } else {\r\n                ensureTextUpdated()\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\CrossfadeSubtitleToolbar.kt"}}
{"prompt": "import androidx.appcompat.widget.Toolbar\nprivate fun ensureTextUpdated() {\r\n            if (!isTextUpdated) {\r\n                if (nextSubtitle != null) {\r\n                    super@CrossfadeSubtitleToolbar.setSubtitle(nextSubtitle)", "choices": [{"text": "\n                } else {\r\n                    super@CrossfadeSubtitleToolbar.setSubtitle(null)\r\n                }\r\n                isTextUpdated = true\r\n            }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1079", "ground_truth": "                    nextSubtitle = null\r\n                }\r\n                isTextUpdated = true\r\n            }\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\CrossfadeSubtitleToolbar.kt"}}
{"prompt": "val popup ListPopupWindow\nval isShowing Boolean\n override fun onDetachedFromWindow() {\r\n        super.onDetachedFromWindow()", "choices": [{"text": "\n        super.onDetachedFromWindow()\r\n        setShowing(false)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1083", "ground_truth": "\r\n        if (popup.isShowing) {\r\n            popup.dismiss()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\DropDownView.kt"}}
{"prompt": "import me.zhanghai.android.files.util.doOnGlobalLayout\nimport android.os.Parcelable\noverride fun onRestoreInstanceState(state: Parcelable?) {\r\n        state as State\r\n        super.onRestoreInstanceState(state.superState)\r\n        if (state.isShowing) {\r\n            doOnGlobalLayout {\r\n                if (!popup.isShowing) {", "choices": [{"text": "\n                    popup.setShowing(false)\r\n                }\r\n            }\r\n        } else {\r\n            popup.setShowing(true)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1085", "ground_truth": "                    popup.show()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\DropDownView.kt"}}
{"prompt": "val listDiffer\nval list List<T>\n open fun replace(list: List<T>, clear: Boolean) {", "choices": [{"text": "\n    for (var i = 0; i < list.length; i++) {\n        if (clear) {\n            list[i] = null;\n        } else {\n            list[i] = list[i].clone();\n        }\n    }\n}"}], "metadata": {"task_id": "MaterialFiles/1096", "ground_truth": "        if (clear) {\r\n            listDiffer.list = emptyList()\r\n        }\r\n        listDiffer.list = list\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ListAdapter.kt"}}
{"prompt": "import android.view.ViewGroup\noverride fun show(bar: ViewGroup, animate: Boolean) {\r\n        if (animate) {", "choices": [{"text": "\n            bar.setVisibility(View.VISIBLE);\r\n        } else {\r\n            bar.setVisibility(View.GONE);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1105", "ground_truth": "            bar.fadeInUnsafe()\r\n        } else {\r\n            bar.isVisible = true\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\OverlayToolbarActionMode.kt"}}
{"prompt": "import android.view.ViewGroup\noverride fun hide(bar: ViewGroup, animate: Boolean) {\r\n        if (animate) {", "choices": [{"text": "\n            bar.setVisibility(View.VISIBLE);\r\n        } else {\r\n            bar.setVisibility(View.GONE);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1106", "ground_truth": "            bar.fadeOutUnsafe()\r\n        } else {\r\n            bar.isVisible = false\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\OverlayToolbarActionMode.kt"}}
{"prompt": "import android.view.View\nval ATTRS\nvar offset\nvar isShown\nfun toggleBar(barView: View) {\r\n        if (isBarShown(barView)) {", "choices": [{"text": "\n            barView.setVisibility(View.GONE)\r\n        } else {\r\n            barView.setVisibility(View.VISIBLE)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1114", "ground_truth": "            hideBar(barView)\r\n        } else {\r\n            showBar(barView)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PersistentBarLayout.kt"}}
{"prompt": "import androidx.core.view.children\nimport android.view.View\nimport android.view.Gravity\nprivate fun findBarView(gravity: Int): View? {\r\n        val verticalGravity = gravity and Gravity.VERTICAL_GRAVITY_MASK\r\n        for (child in children) {\r\n            val childVerticalGravity = getChildVerticalGravity(child)\r\n            if (childVerticalGravity == verticalGravity) {", "choices": [{"text": "\n                return child\r\n            }\r\n        }\r\n        return null\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1116", "ground_truth": "                return child\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PersistentBarLayout.kt"}}
{"prompt": "import android.view.View\nfun toggleDrawer(drawerView: View) {\r\n        if (isDrawerOpen(drawerView)) {", "choices": [{"text": "\n            drawerView.setVisibility(View.GONE);\r\n        } else {\r\n            drawerView.setVisibility(View.VISIBLE);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1129", "ground_truth": "            closeDrawer(drawerView)\r\n        } else {\r\n            openDrawer(drawerView)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PersistentDrawerLayout.kt"}}
{"prompt": "import androidx.core.view.children\nimport android.view.View\nimport android.view.Gravity\nprivate fun findDrawerView(gravity: Int): View? {\r\n        val horizontalGravity = (Gravity.getAbsoluteGravity(gravity, layoutDirection)\r\n            and Gravity.HORIZONTAL_GRAVITY_MASK)\r\n        for (child in children) {\r\n            val childHorizontalGravity = getChildAbsoluteHorizontalGravity(child)\r\n            if (childHorizontalGravity == horizontalGravity) {", "choices": [{"text": "\n                return child\r\n            }\r\n        }\r\n        return null\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1131", "ground_truth": "                return child\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PersistentDrawerLayout.kt"}}
{"prompt": "import androidx.preference.Preference\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        if (preferenceScreen == null) {\r\n            val preferenceScreen = preferenceManager.createPreferenceScreen(requireContext())", "choices": [{"text": "\n        }\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setPreferenceScreen(preferenceScreen)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1138", "ground_truth": "            setPreferenceScreen(preferenceScreen)\r\n        }\r\n\r\n        super.onViewCreated(view, savedInstanceState)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\PreferenceFragmentCompat.kt"}}
{"prompt": "import android.view.View\nimport android.os.Build\noverride fun setTextIsSelectable(selectable: Boolean) {\r\n        super.setTextIsSelectable(selectable)\r\n\r\n        if (selectable) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                focusable = View.FOCUSABLE_AUTO\r\n            }\r\n        } else {", "choices": [{"text": "\n            focusable = View.FOCUSABLE_NONE\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1140", "ground_truth": "            isClickable = false\r\n            isFocusable = false\r\n        }\r\n        background = background\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ReadOnlyTextInputEditText.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\noverride fun addView(child: View, index: Int, params: ViewGroup.LayoutParams) {\r\n        super.addView(child, index, params)", "choices": [{"text": "\n        super.addView(child, index, params)\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1142", "ground_truth": "\r\n        if (child is EditText) {\r\n            setDropDown(!child.isTextSelectable)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ReadOnlyTextInputLayout.kt"}}
{"prompt": "import me.zhanghai.android.files.compat.getDrawableCompat\nfun setDropDown(dropDown: Boolean) {\r\n        if (dropDown) {\r\n            endIconMode = END_ICON_CUSTOM\r\n            endIconDrawable = context.getDrawableCompat(\r\n                com.google.android.material.R.drawable.mtrl_ic_arrow_drop_down", "choices": [{"text": "\n            )\r\n        } else {\r\n            endIconMode = END_ICON_CUSTOM\r\n            endIconDrawable = context.getDrawableCompat(\r\n                com.google.android.material.R.drawable.mtrl_ic_arrow_drop_up\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1143", "ground_truth": "            )\r\n        } else {\r\n            endIconMode = END_ICON_NONE\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ReadOnlyTextInputLayout.kt"}}
{"prompt": "import androidx.annotation.MenuRes\nimport android.view.Menu\nfun setMenuResource(@MenuRes menuRes: Int) {\r\n        if (this.menuRes == menuRes) {\r\n            return\r\n        }\r\n        this.menuRes = menuRes", "choices": [{"text": "\n        this.menuRes = menuRes\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1151", "ground_truth": "        toolbar.menu.clear()\r\n        if (menuRes != 0) {\r\n            toolbar.inflateMenu(menuRes)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\ui\\ToolbarActionMode.kt"}}
{"prompt": "fun AutoCloseable.closeSafe() {\r\n    try {", "choices": [{"text": "\n        closeSafe();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1160", "ground_truth": "        close()\r\n    } catch (e: Exception) {\r\n        e.printStackTrace()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\AutoCloseableExtensions.kt"}}
{"prompt": "import kotlin.coroutines.resume\nimport kotlinx.coroutines.suspendCancellableCoroutine\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nimport android.os.CancellationSignal\nsuspend fun <T> runWithCancellationSignal(block: (CancellationSignal) -> T): T {\r\n    val signal = CancellationSignal()\r\n    return suspendCancellableCoroutine { continuation ->\r\n        @OptIn(DelicateCoroutinesApi::class)\r\n        val job = GlobalScope.launch(Dispatchers.IO) {\r\n            continuation.resume(block(signal))\r\n        }\r\n        continuation.invokeOnCancellation {", "choices": [{"text": "\n            @OptIn(DelicateCoroutinesApi::class)\r\n            job.runWithCancellationSignal(signal)\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1169", "ground_truth": "            signal.cancel()\r\n            job.cancel()\r\n        }\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\CancellationSignalExtensions.kt"}}
{"prompt": "import android.widget.TextView\nimport android.view.View\nimport android.text.Spannable\nval UP\nval CLICK\nval FROM_BELOW\noverride fun up(view: TextView, text: Spannable): Boolean {", "choices": [{"text": "\n    if (text == null) {\n        return false;\n    }\n    if (text.length() == 0) {\n        return true;\n    }\n    if (text.length() == 1) {\n        return true;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text.charAt(i)!= text.charAt(i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}"}], "metadata": {"task_id": "MaterialFiles/1172", "ground_truth": "        if (action(UP, view, text)) {\r\n            return true\r\n        }\r\n        return super.up(view, text)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ClickableArrowKeyMovementMethod.kt"}}
{"prompt": "import android.widget.TextView\nimport android.view.View\nimport android.text.Spannable\nval DOWN\nval FROM_BELOW\nval CLICK\noverride fun down(view: TextView, text: Spannable): Boolean {", "choices": [{"text": "\n    if (text == null) {\n        return false;\n    }\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text.charAt(i)!= text.charAt(i + 1)) {\n            return false;\n        }\n    }\n    return true;\n}"}], "metadata": {"task_id": "MaterialFiles/1173", "ground_truth": "        if (action(DOWN, view, text)) {\r\n            return true\r\n        }\r\n        return super.down(view, text)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ClickableArrowKeyMovementMethod.kt"}}
{"prompt": "import android.widget.TextView\nimport android.view.View\nimport android.text.Spannable\nval DOWN\nval FROM_BELOW\nval CLICK\noverride fun left(view: TextView, text: Spannable): Boolean {", "choices": [{"text": "\n    if (text == null) {\n        return false;\n    }\n    if (text.length() == 0) {\n        return false;\n    }\n    if (text.charAt(0) == '-') {\n        return false;\n    }\n    if (text.charAt(text.length() - 1) == '-') {\n        return false;\n    }\n    if (text.charAt(text.length() - 2) == '-') {\n        return false;\n    }\n    return true;\n}"}], "metadata": {"task_id": "MaterialFiles/1174", "ground_truth": "        if (action(UP, view, text)) {\r\n            return true\r\n        }\r\n        return super.left(view, text)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ClickableArrowKeyMovementMethod.kt"}}
{"prompt": "import android.widget.TextView\nimport android.view.View\nimport android.text.Spannable\nval UP\nval CLICK\nval DOWN\noverride fun right(view: TextView, text: Spannable): Boolean {", "choices": [{"text": "\n    if (text == null) {\n        return false;\n    }\n    if (text.length() == 0) {\n        return true;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text.charAt(i) == text.charAt(text.length() - 1)) {\n            return true;\n        }\n    }\n    return false;\n}"}], "metadata": {"task_id": "MaterialFiles/1175", "ground_truth": "        if (action(DOWN, view, text)) {\r\n            return true\r\n        }\r\n        return super.right(view, text)\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ClickableArrowKeyMovementMethod.kt"}}
{"prompt": "fun <T> MutableCollection<T>.removeFirst(): T {", "choices": [{"text": "\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }"}], "metadata": {"task_id": "MaterialFiles/1176", "ground_truth": "    val iterator = iterator()\r\n    val element = iterator.next()\r\n    iterator.remove()\r\n    return element\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\CollectionExtensions.kt"}}
{"prompt": "fun <K, V> MutableMap<K, V>.removeFirst(): Map.Entry<K, V> {", "choices": [{"text": ", V> {\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null;\n    }\n    if (isEmpty()) {\n        return null"}], "metadata": {"task_id": "MaterialFiles/1177", "ground_truth": "    val iterator = iterator()\r\n    val element = iterator.next()\r\n    iterator.remove()\r\n    return element\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\CollectionExtensions.kt"}}
{"prompt": "fun <T> MutableCollection<T>.removeFirst(predicate: (T) -> Boolean): T? {\r\n    val iterator = iterator()\r\n    while (iterator.hasNext()) {\r\n        val element = iterator.next()\r\n        if (predicate(element)) {\r\n            iterator.remove()", "choices": [{"text": "\n        } else {\r\n            iterator.remove()\r\n        }\r\n    }\r\n    return null\r\n}"}], "metadata": {"task_id": "MaterialFiles/1178", "ground_truth": "            return element\r\n        }\r\n    }\r\n    return null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\CollectionExtensions.kt"}}
{"prompt": "import androidx.annotation.Dimension\nimport android.content.Context\n\r\n@Dimension\r\nfun Context.dpToDimensionPixelSize(@Dimension(unit = Dimension.DP) dp: Float): Int {\r\n    val value = dpToDimension(dp)\r\n    val size = (if (value >= 0) value + 0.5f else value - 0.5f).toInt()\r\n    return when {\r\n        size != 0 -> size", "choices": [{"text": ",\r\n        size > 0? size : 0,\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1182", "ground_truth": "        value == 0f -> 0\r\n        value > 0 -> 1\r\n        else -> -1\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ContextExtensions.kt"}}
{"prompt": "import androidx.lifecycle.viewmodel.CreationExtras\nimport androidx.lifecycle.ViewModelStoreOwner\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.ViewModel\nimport androidx.fragment.app.viewModels\nimport androidx.fragment.app.Fragment\ninline fun <reified VM : ViewModel> Fragment.viewModels(\r\n    noinline ownerProducer: () -> ViewModelStoreOwner = { this },\r\n    noinline extrasProducer: (() -> CreationExtras)? = null,\r\n    noinline factoryProducer: (() -> () -> VM)? = null\r\n) = viewModels<VM>(\r\n    ownerProducer,\r\n    extrasProducer,\r\n    factoryProducer?.let {\r\n        {\r\n            val factory = it()\r\n            object : ViewModelProvider.Factory {\r\n                @Suppress(\"UNCHECKED_CAST\")", "choices": [{"text": "\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED_CAST\")\r\n                @Suppress(\"UNCHECKED"}], "metadata": {"task_id": "MaterialFiles/1193", "ground_truth": "                override fun <T : ViewModel> create(modelClass: Class<T>) = factory() as T\r\n            }\r\n        }\r\n    }\r\n)", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\FragmentViewModelLazy.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport android.content.pm.PackageManager\n\r\n@OptIn(ExperimentalContracts::class)\r\nprivate inline fun <T> getPackageManagerInfoOrNull(block: () -> T): T? {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {\r\n        block()", "choices": [{"text": "\n    } catch (Exception e) {\r\n        e.printStackTrace()\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1211", "ground_truth": "    } catch (e: PackageManager.NameNotFoundException) {\r\n        e.printStackTrace()\r\n        null\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\PackageManagerExtensions.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport androidx.fragment.app.Fragment\nimport android.os.Parcelable\nfun <F : Fragment, Args : ParcelableArgs> F.putArgs(args: Args, argsClass: KClass<Args>): F {\r\n    val arguments = arguments\r\n    if (arguments != null) {\r\n        arguments.putArgs(args, argsClass)", "choices": [{"text": "\n        return this\r\n    } else {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1213", "ground_truth": "    } else {\r\n        this.arguments = args.toBundle(argsClass)\r\n    }\r\n    return this\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ParcelableArgs.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport android.os.Parcel\n\r\n@OptIn(ExperimentalContracts::class)\r\ninline fun <R> Parcel.use(block: (Parcel) -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    return try {", "choices": [{"text": "\n        super.use(block)\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1215", "ground_truth": "        block(this)\r\n    } finally {\r\n        recycle()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ParcelExtensions.kt"}}
{"prompt": "import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.ExperimentalContracts\nimport android.os.Parcel\n\r\n@OptIn(ExperimentalContracts::class)\r\ninline fun <R> Parcel.withPosition(position: Int, block: Parcel.() -> R): R {\r\n    contract {\r\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\r\n    }\r\n    val savedPosition = dataPosition()\r\n    setDataPosition(position)\r\n    return try {", "choices": [{"text": "\n        dataPosition = savedPosition\r\n        return super.withPosition(position)\r\n    } finally {\r\n        setDataPosition(savedPosition)\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1216", "ground_truth": "        block(this)\r\n    } finally {\r\n        setDataPosition(savedPosition)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ParcelExtensions.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\ninline fun RecyclerView.addOnScrollListener(\r\n    crossinline onScrollStateChanged: (recyclerView: RecyclerView, newState: Int) -> Unit =\r\n        { _, _ -> },\r\n    crossinline onScrolled: (recyclerView: RecyclerView, dx: Int, dy: Int) -> Unit = { _, _, _ -> },\r\n): RecyclerView.OnScrollListener {\r\n    val listener = object : RecyclerView.OnScrollListener() {\r\n        override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\r\n            onScrollStateChanged(recyclerView, newState)\r\n        }\r\n\r\n        override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n            onScrolled(recyclerView, dx, dy)", "choices": [{"text": "(recyclerView, dx, dy)\r\n        }\r\n    }\r\n    return listener\r\n}"}], "metadata": {"task_id": "MaterialFiles/1223", "ground_truth": "        }\r\n    }\r\n    addOnScrollListener(listener)\r\n    return listener\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\RecyclerViewExtensions.kt"}}
{"prompt": "import android.os.RemoteException\nimport android.os.Bundle\nfun sendResult(result: Bundle) {\r\n        if (remoteCallback != null) {\r\n            try {\r\n                remoteCallback.sendResult(result)\r\n            } catch (e: RemoteException) {\r\n                e.printStackTrace()", "choices": [{"text": "\n                e.printStackTrace()\r\n            }\r\n        } else {\r\n            Toast.makeText(context, \"Failed to send result\", Toast.LENGTH_LONG).show()\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1224", "ground_truth": "            }\r\n        } else {\r\n            localCallback!!(result)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\RemoteCallback.kt"}}
{"prompt": "import android.os.Parcel\nimport android.net.Uri\noverride fun create(parcel: Parcel): Uri? {\r\n        val uriString = parcel.readString() ?: return null\r\n        // Parcel.readParcelableCreator()\r\n        return if (uriString.startsWith(Uri::class.java.name)) {", "choices": [{"text": "\n            return Uri.parse(uriString)\r\n        } else {\r\n            return Uri.parse(uriString)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1226", "ground_truth": "            readUri(parcel)\r\n        } else {\r\n            Uri.parse(uriString)\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\StableUriParceler.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport android.os.StrictMode\nfun <R> KClass<StrictMode>.withoutPenaltyDeathOnNetwork(block: () -> R): R {\r\n    val oldThreadPolicy = StrictMode.getThreadPolicy()\r\n    val newThreadPolicy = StrictMode.ThreadPolicy.Builder(oldThreadPolicy)\r\n        // There's no API to disable penaltyDeathOnNetwork() but still detect it.\r\n        .permitNetwork()\r\n        .build()\r\n    StrictMode.setThreadPolicy(newThreadPolicy)\r\n    return try {", "choices": [{"text": "\n        block.apply()\r\n    } finally {\r\n        StrictMode.setThreadPolicy(oldThreadPolicy)\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1231", "ground_truth": "        block()\r\n    } finally {\r\n        StrictMode.setThreadPolicy(oldThreadPolicy)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\StrictModeExtensions.kt"}}
{"prompt": "inline fun <reified T : Throwable> Throwable.findCauseByClass(): T? {\r\n    var current: Throwable? = this\r\n    do {\r\n        if (current is T) {\r\n            return current", "choices": [{"text": "\n        }\r\n        current = current.findCauseByClass()\r\n    } while (current!= null)\r\n    return null\r\n}"}], "metadata": {"task_id": "MaterialFiles/1235", "ground_truth": "        }\r\n        current = current!!.cause\r\n    } while (current != null)\r\n    return null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ThrowableExtensions.kt"}}
{"prompt": "import kotlin.reflect.KClass\nimport android.util.TypedValue\ninline fun <T> KClass<TypedValue>.useTemp(block: (TypedValue) -> T): T {\r\n    val temp = TypedValue::class.obtainTemp()\r\n    return try {", "choices": [{"text": "\n        if (temp!= null) {\r\n            return temp\r\n        } else {\r\n            return null\r\n        }\r\n    } catch (Exception e) {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1236", "ground_truth": "        block(temp)\r\n    } finally {\r\n        temp.releaseTemp()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\TypedValueExtensions.kt"}}
{"prompt": "import me.zhanghai.android.files.app.contentResolver\nimport android.net.Uri\nfun Uri.takePersistablePermission(modeFlags: Int): Boolean =\r\n    try {\r\n        contentResolver.takePersistableUriPermission(this, modeFlags)", "choices": [{"text": "\n    } catch (e) {\r\n        return false\r\n    }\r\n    return true\r\n}"}], "metadata": {"task_id": "MaterialFiles/1237", "ground_truth": "        true\r\n    } catch (e: SecurityException) {\r\n        e.printStackTrace()\r\n        false\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\UriExtensions.kt"}}
{"prompt": "import me.zhanghai.android.files.app.contentResolver\nimport android.net.Uri\nfun Uri.releasePersistablePermission(modeFlags: Int): Boolean =\r\n    try {\r\n        contentResolver.releasePersistableUriPermission(this, modeFlags)", "choices": [{"text": "\n    } catch (e) {\r\n        return false\r\n    }\r\n    return true\r\n}"}], "metadata": {"task_id": "MaterialFiles/1238", "ground_truth": "        true\r\n    } catch (e: SecurityException) {\r\n        e.printStackTrace()\r\n        false\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\UriExtensions.kt"}}
{"prompt": "import androidx.core.view.children\nimport android.view.ViewGroup\nimport android.view.View\nfun <T : View> View.findViewByClass(clazz: Class<T>): T? {\r\n    if (clazz.isInstance(this)) {\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        return this as T\r\n    }\r\n    if (this is ViewGroup) {\r\n        children.forEach {", "choices": [{"text": "\n            if (clazz.isInstance(this)) {\r\n                return this as T\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    return null\r\n}"}], "metadata": {"task_id": "MaterialFiles/1242", "ground_truth": "            it.findViewByClass(clazz)?.let { return it }\r\n        }\r\n    }\r\n    return null\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import androidx.core.view.isVisible\nimport android.view.View\nsuspend fun View.fadeIn(force: Boolean = false) {\r\n    if (!isVisible) {\r\n        alpha = 0f\r\n        isVisible = true\r\n    }\r\n    animate().run {\r\n        alpha(1f)\r\n        if (!(isLaidOut || force) || (isVisible && alpha == 1f)) {\r\n            duration = 0\r\n        } else {\r\n            duration = context.shortAnimTime.toLong()\r\n            interpolator = context.getInterpolator(android.R.interpolator.fast_out_slow_in)", "choices": [{"text": "\n        }\r\n    }\r\n    if (isLaidOut) {\r\n        duration = 0\r\n        interpolator = context.getInterpolator(android.R.interpolator.fast_out_slow_out)\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1243", "ground_truth": "        }\r\n        start()\r\n        awaitEnd()\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import androidx.core.view.isVisible\nimport android.view.View\nsuspend fun View.fadeOut(force: Boolean = false, gone: Boolean = false) {\r\n    animate().run {\r\n        alpha(0f)\r\n        if (!(isLaidOut || force) || (!isVisible || alpha == 0f)) {\r\n            duration = 0\r\n        } else {\r\n            duration = context.shortAnimTime.toLong()\r\n            interpolator = context.getInterpolator(android.R.interpolator.fast_out_linear_in)\r\n        }\r\n        start()\r\n        awaitEnd()\r\n    }\r\n    if (gone) {", "choices": [{"text": "\n        duration = context.shortAnimTime.toLong()\r\n        interpolator = context.getInterpolator(android.R.interpolator.fast_out_linear_out)\r\n        start()\r\n        awaitEnd()\r\n    } else {\r\n        duration = context.shortAnimTime.toLong()\r\n        interpolator = context.getInterpolator(android.R.interpolator.fast_out_linear_in)\r\n        start()\r\n        awaitEnd()\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1244", "ground_truth": "        isGone = true\r\n    } else {\r\n        isInvisible = true\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import android.view.View\nsuspend fun View.fadeToVisibility(visible: Boolean, force: Boolean = false, gone: Boolean = false) {\r\n    if (visible) {", "choices": [{"text": "\n        if (force) {\r\n            if (gone) {\r\n                return;\r\n            }\r\n        } else {\r\n            if (gone) {\r\n                return;\r\n            }\r\n        }\r\n    } else {\r\n        if (force) {\r\n            if (gone) {\r\n                return;\r\n            }\r\n        } else {\r\n            if (gone) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "MaterialFiles/1245", "ground_truth": "        fadeIn(force)\r\n    } else {\r\n        fadeOut(force, gone)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import android.view.View\nsuspend fun View.slideToVisibility(\r\n    gravity: Int,\r\n    visible: Boolean,\r\n    force: Boolean = false,\r\n    gone: Boolean = false\r\n) {\r\n    if (visible) {", "choices": [{"text": "\n        gravity = Gravity.RIGHT;\r\n    } else {\r\n        gravity = Gravity.LEFT;\r\n    }\r\n    if (gone) {\r\n        gravity = Gravity.BOTTOM;\r\n    } else {\r\n        gravity = Gravity.TOP;\r\n    }\r\n    mView.setGravity(gravity);\r\n}"}], "metadata": {"task_id": "MaterialFiles/1246", "ground_truth": "        slideIn(gravity, force)\r\n    } else {\r\n        slideOut(gravity, force, gone)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import android.view.View\nfun View.slideToVisibilityUnsafe(\r\n    gravity: Int,\r\n    visible: Boolean,\r\n    force: Boolean = false,\r\n    gone: Boolean = false", "choices": [{"text": "\n) {\r\n    if (!visible) {\r\n        return false\r\n    }\r\n    if (gravity == 0) {\r\n        gravity = 0\r\n    }\r\n    if (gravity == 1) {\r\n        gravity = 1\r\n    }\r\n    if (gravity == 2) {\r\n        gravity = 2\r\n    }\r\n    if (gravity == 3) {\r\n        gravity = 3\r\n    }\r\n    if (gravity == 4) {\r\n        gravity = 4\r\n    }\r\n   "}], "metadata": {"task_id": "MaterialFiles/1247", "ground_truth": ") {\r\n    GlobalScope.launch(Dispatchers.Main.immediate) {\r\n        slideToVisibility(gravity, visible, force, gone)\r\n    }\r\n}", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\util\\ViewExtensions.kt"}}
{"prompt": "import android.view.View\noverride fun onViewRecycled(holder: ViewHolder) {\r\n        super.onViewRecycled(holder)", "choices": [{"text": "_onViewRecycled(holder)\r\n        holder.onViewRecycled = true\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1252", "ground_truth": "\r\n        val binding = holder.binding\r\n        binding.image.dispose()\r\n        binding.largeImage.recycle()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\image\\ImageViewerAdapter.kt"}}
{"prompt": "import me.zhanghai.android.files.util.finish\nimport me.zhanghai.android.files.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n\r\n        if (paths.isEmpty()) {\r\n            // We did finish the activity in onActivityCreated(), however we will still be called\r\n            // here before the activity is actually finished.", "choices": [{"text": "\n            finish()\r\n        } else {\r\n            super.onViewStateRestored(savedInstanceState)\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1256", "ground_truth": "            return\r\n        }\r\n\r\n        updateTitle()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\image\\ImageViewerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.provider.common.delete\nimport me.zhanghai.android.files.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean =\r\n        when (item.itemId) {\r\n            R.id.action_delete -> {\r\n                confirmDelete()\r\n                true\r\n            }\r\n            R.id.action_share -> {", "choices": [{"text": "\n                share()\r\n                true\r\n            }\r\n            R.id.action_unshare -> {\r\n                unshare()\r\n                true\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/1259", "ground_truth": "                share()\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\image\\ImageViewerFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nimport java8.nio.file.Path\nprivate fun updateTitle() {\r\n        val path = currentPath\r\n        requireActivity().title = path.fileName.toString()\r\n        val size = paths.size\r\n        binding.toolbar.subtitle = if (size > 1) {\r\n            getString(\r\n                R.string.image_viewer_subtitle_format, binding.viewPager.currentItem + 1, size", "choices": [{"text": "\n            )\r\n        } else {\r\n            getString(\r\n                R.string.image_viewer_title_format, binding.viewPager.currentItem + 1, 0\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1260", "ground_truth": "            )\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\image\\ImageViewerFragment.kt"}}
{"prompt": "import android.view.Menu\noverride fun onPrepareOptionsMenu(menu: Menu) {", "choices": [{"text": "\n    menu.addMenuItem(R.id.menu_main, R.string.menu_main)\n    menu.addMenuItem(R.id.menu_settings, R.string.menu_settings)\n    menu.addMenuItem(R.id.menu_about, R.string.menu_about)\n    menu.addMenuItem(R.id.menu_settings, R.string.menu_settings)\n    menu.addMenuItem(R.id.menu_about, R.string.menu_about)\n    menu.addMenuItem(R.id.menu_"}], "metadata": {"task_id": "MaterialFiles/1269", "ground_truth": "        super.onPrepareOptionsMenu(menu)\r\n\r\n        updateSaveMenuItem()\r\n        updateEncodingMenuItems()\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorFragment.kt"}}
{"prompt": "fun onSupportNavigateUp(): Boolean {\r\n        if (onBackPressedCallback.isEnabled) {", "choices": [{"text": "\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1271", "ground_truth": "            onBackPressedCallback.handleOnBackPressed()\r\n            return true\r\n        }\r\n        return false\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nprivate fun updateTitle() {\r\n        val fileName = viewModel.file.value.fileName.toString()\r\n        val changed = viewModel.isTextChanged.value\r\n        requireActivity().title = getString(\r\n            if (changed) {\r\n                R.string.text_editor_title_changed_format", "choices": [{"text": "\n            } else {\r\n                R.string.text_editor_title_default_format\r\n            }\r\n            fileName\r\n        )\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1274", "ground_truth": "            } else {\r\n                R.string.text_editor_title_format\r\n            }, fileName\r\n        )\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorFragment.kt"}}
{"prompt": "import me.zhanghai.android.files.R\nprivate fun onReload() {\r\n        if (viewModel.isTextChanged.value) {", "choices": [{"text": "\n            viewModel.setTextChanged(false);\r\n        } else {\r\n            viewModel.setTextChanged(true);\r\n        }\r\n    }"}], "metadata": {"task_id": "MaterialFiles/1275", "ground_truth": "            ConfirmReloadDialogFragment.show(this)\r\n        } else {\r\n            reload()\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorFragment.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.Job\nimport androidx.lifecycle.viewModelScope\nfun reload() {\r\n        viewModelScope.launch {\r\n            loadJob?.cancel()?.also { loadJob = null }\r\n            reloadJob?.cancel()?.also { reloadJob = null }\r\n            reloadJob = launch {\r\n                mapFileToBytesState(_file.value)\r\n                if (isActive) {", "choices": [{"text": "\n                    loadJob.cancel()\r\n                } else {\r\n                    reloadJob.cancel()\r\n                }\r\n            }\r\n        }"}], "metadata": {"task_id": "MaterialFiles/1280", "ground_truth": "                    reloadJob = null\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "MaterialFiles\\app\\src\\main\\java\\me\\zhanghai\\android\\files\\viewer\\text\\TextEditorViewModel.kt"}}
{"prompt": "import timber.log.Timber\nimport com.machiav3lli.backup.utils.CryptoSetupException\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\n @Throws(BackupFailedException::class, CryptoSetupException::class)\r\n    protected open fun backupData(\r\n        app: Package,\r\n        backupInstanceDir: StorageFile,\r\n        iv: ByteArray?,\r\n    ): Boolean {\r\n        val dataType = BACKUP_DIR_DATA\r\n        Timber.i(LOG_START_BACKUP, app.packageName, dataType)\r\n        return genericBackupData(\r\n            dataType,\r\n            backupInstanceDir,", "choices": [{"text": "            iv,\r\n        )\r\n    }"}], "metadata": {"task_id": "Neo-Backup/1", "ground_truth": "            app.dataPath,\r\n            isCompressionEnabled(),\r\n            iv\r\n        )\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\BackupAppAction.kt"}}
{"prompt": "fun getBackupArchiveFilename(\r\n        what: String,\r\n        isCompressed: Boolean,\r\n        compressionType: String?,\r\n        isEncrypted: Boolean\r\n    ): String {\r\n        val extension = buildString {\r\n            if (isCompressed) {\r\n                append(when (compressionType) {\r\n                    \"gz\"  -> \".gz\"\r\n                    \"zst\" -> \".zst\"\r\n                    else -> \"\"\r\n                })\r\n            }\r\n            if (isEncrypted) {", "choices": [{"text": "\n                append(when (compressionType) {\r\n                    \"bz2\"  -> \".bz2\"\r\n                    \"bz3\" -> \".bz3\"\r\n                    \"bz4\" -> \".bz4\"\r\n                    \"bz5\" -> \".bz5\"\r\n                    \"bz6\" -> \".bz6\"\r\n                    \"bz7\" -> \".bz7\"\r\n                    \"bz8\" -> \".bz8\"\r\n                    \"bz9\" -> \".bz9\"\r\n                    \"bz10\" -> \".bz10\"\r\n                    \"bz11\" -> \"."}], "metadata": {"task_id": "Neo-Backup/3", "ground_truth": "                append(\".enc\")\r\n            }\r\n        }\r\n        return \"$what.tar$extension\"\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\BaseAppAction.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.isRestoreAllPermissions\nimport com.machiav3lli.backup.utils.isAllowDowngrade\nimport com.machiav3lli.backup.preferences.pref_installationPackage\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.handler.ShellHandler.Companion.hasPmBypassLowTargetSDKBlock\nimport com.machiav3lli.backup.R\nprivate fun getSessionCreateCommand(\r\n        profileId: Int,\r\n        sumSize: Long,\r\n    ): String =\r\n        listOfNotNull(\r\n            \"pm\", \"install-create\",\r\n            if (isRestoreAllPermissions) \"-g\" else null,\r\n            if (isAllowDowngrade) \"-d\" else null,\r\n            if (hasPmBypassLowTargetSDKBlock) \"--bypass-low-target-sdk-block\" else null,\r\n            \"-i\", pref_installationPackage.value,", "choices": [{"text": "\n        )\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null)\r\n       .orElse(null"}], "metadata": {"task_id": "Neo-Backup/7", "ground_truth": "            \"-t\",\r\n            \"-r\",\r\n            \"-S\", sumSize,\r\n            \"--user\", profileId,\r\n        ).joinToString(\" \")", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\RestoreAppAction.kt"}}
{"prompt": "private fun getSessionCommitCommand(\r\n        sessionId: Int,", "choices": [{"text": ",\r\n        command: String,\r\n        payload: String,\r\n        payloadLength: Int,\r\n    ): Promise<Void> {\r\n    return new Promise((resolve, reject) => {\r\n        commitCommand(sessionId, command, payload, payloadLength, (err, result) => {\r\n            if (err) {\r\n                reject(err);\r\n            } else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}"}], "metadata": {"task_id": "Neo-Backup/9", "ground_truth": "    ): String =\r\n        listOfNotNull(\r\n            \"pm\", \"install-commit\", sessionId\r\n        ).joinToString(\" \")", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\RestoreAppAction.kt"}}
{"prompt": "import android.util.JsonReader\nimport android.content.Context\nprivate fun parseThread(context: Context, jsonReader: JsonReader) {\r\n        jsonReader.beginObject()\r\n        while (jsonReader.hasNext()) {\r\n            when (jsonReader.nextName()) {\r\n                \"1-SMS\" -> restoreSMS(context, jsonReader)\r\n                \"2-MMS\" -> restoreMMS(context, jsonReader)", "choices": [{"text": "\n            }\r\n        }\r\n        jsonReader.endObject()\r\n    }"}], "metadata": {"task_id": "Neo-Backup/14", "ground_truth": "                else -> jsonReader.skipValue()\r\n            }\r\n        }\r\n        jsonReader.endObject()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\RestoreSMSMMSJSONAction.kt"}}
{"prompt": "import java.io.File\nimport com.machiav3lli.backup.utils.CryptoSetupException\nimport com.machiav3lli.backup.tasks.AppActionWork\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\n @Throws(CryptoSetupException::class, RestoreFailedException::class)\r\n    override fun restoreAllData(\r\n        work: AppActionWork?,\r\n        app: Package,\r\n        backup: Backup,\r\n        backupDir: StorageFile,\r\n        backupMode: Int", "choices": [{"text": "\n    )\r\n    override fun restoreAllData(\r\n        work: AppActionWork?,\r\n        app: Package,\r\n        backup: Backup,\r\n        backupDir: StorageFile,\r\n        backupMode: Int\r\n    )\r\n    override fun restoreAllData(\r\n        work: AppActionWork?,\r\n        app: Package,\r\n        backup: Backup,\r\n        backupDir: StorageFile,\r\n        backupMode: Int\r\n    )\r\n    override fun restoreAllData(\r\n        work: AppActionWork?,"}], "metadata": {"task_id": "Neo-Backup/20", "ground_truth": "    ) {\r\n        work?.setOperation(\"dat\")\r\n        restoreData(app, backup, backupDir)\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\actions\\RestoreSpecialAction.kt"}}
{"prompt": "import timber.log.Timber\nimport com.machiav3lli.backup.utils.TraceUtils\noverride fun onResume() {\r\n        Timber.w(\r\n            \"---------------------------------------- resume ${\r\n                TraceUtils.classAndId(this)", "choices": [{"text": "\n            }\r\n        )\r\n        super.onResume()\r\n        Timber.w(\r\n            \"---------------------------------------- resume ${\r\n                TraceUtils.classAndId(this)\r\n            }\r\n        )\r\n    }"}], "metadata": {"task_id": "Neo-Backup/23", "ground_truth": "            }\"\r\n        )\r\n        OABX.resumeActivity(this)\r\n        super.onResume()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\activities\\BaseActivity.kt"}}
{"prompt": "import timber.log.Timber\nimport com.machiav3lli.backup.utils.TraceUtils\noverride fun onDestroy() {\r\n        Timber.w(\r\n            \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ destroy ${\r\n                TraceUtils.classAndId(this)", "choices": [{"text": "\n            }\r\n        )\r\n        super.onDestroy()\r\n        Timber.w(\r\n            \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ destroy ${\r\n                TraceUtils.classAndId(this)\r\n            }\r\n        )\r\n    }"}], "metadata": {"task_id": "Neo-Backup/24", "ground_truth": "            }\"\r\n        )\r\n        OABX.removeActivity(this)\r\n        super.onDestroy()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\activities\\BaseActivity.kt"}}
{"prompt": "import timber.log.Timber\nimport android.content.Intent\nfun doIntent(intent: Intent?): Boolean {\r\n        if (intent == null) return false\r\n        val command = intent.action\r\n        Timber.i(\"Main: command $command\")\r\n        when (command) {\r\n            null                         -> {}\r\n            \"android.intent.action.MAIN\" -> {}\r\n            else                         -> {", "choices": [{"text": "\n                intent.setAction(command)\r\n            }\r\n        } else {\r\n            intent.setAction(Intent.ACTION_MAIN)\r\n        }\r\n        return true\r\n    }"}], "metadata": {"task_id": "Neo-Backup/28", "ground_truth": "                addInfoLogText(\"Main: command '$command'\")\r\n            }\r\n        }\r\n        return false\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\activities\\MainActivityX.kt"}}
{"prompt": "fun whileShowingSnackBar(message: String, todo: () -> Unit) {\r\n        runOnUiThread {\r\n            showSnackBar(message)\r\n        }", "choices": [{"text": "\n            showSnackBar(message, todo)\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/31", "ground_truth": "        todo()\r\n        runOnUiThread {\r\n            dismissSnackBar()\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\activities\\MainActivityX.kt"}}
{"prompt": "import androidx.room.Transaction\n @Transaction", "choices": [{"text": "\n    const transaction = this.props.transaction\n\n    if (!transaction) {\n        return null\n    }\n\n    return {\n        transaction: transaction,\n    }\n}"}], "metadata": {"task_id": "Neo-Backup/35", "ground_truth": "    fun updateList(vararg appInfos: AppInfo) {\r\n        emptyTable()\r\n        replaceInsert(*appInfos)\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\dao\\AppInfoDao.kt"}}
{"prompt": "import androidx.room.Transaction\n @Transaction", "choices": [{"text": "\n    const transaction = this.props.transaction\n\n    if (!transaction) {\n        return null\n    }\n\n    return {\n        transaction: transaction,\n    }\n}"}], "metadata": {"task_id": "Neo-Backup/37", "ground_truth": "    fun updateList(vararg backups: Backup) {\r\n        emptyTable()\r\n        replaceInsert(*backups)\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\dao\\BackupDao.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Blocklist\nfun updateList(blocklistId: Long, newList: Set<String>) {\r\n        deleteById(blocklistId)\r\n        newList.forEach { packageName ->\r\n            insert(\r\n                Blocklist.Builder()\r\n                    .withId(0)\r\n                    .withBlocklistId(blocklistId)", "choices": [{"text": "\n                   .withPackageName(packageName)\r\n                   .build()\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/38", "ground_truth": "                    .withPackageName(packageName)\r\n                    .build()\r\n            )\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\dao\\BlocklistDao.kt"}}
{"prompt": "fun toAppInfo() = AppInfo(\r\n        packageName,\r\n        packageLabel,\r\n        versionName,\r\n        versionCode,\r\n        profileId,", "choices": [{"text": "(\r\n            profileName,\r\n            profileLabel,\r\n            versionName,\r\n            versionCode,\r\n            profileId\r\n        )\r\n"}], "metadata": {"task_id": "Neo-Backup/39", "ground_truth": "        sourceDir,\r\n        splitSourceDirs,\r\n        isSystem,\r\n        permissions\r\n    )", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\entity\\Backup.kt"}}
{"prompt": "import com.machiav3lli.backup.MAIN_DB_NAME\nimport androidx.room.Room\nimport androidx.room.Database\nimport android.content.Context\nfun getInstance(context: Context): ODatabase {\r\n            synchronized(this) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room\r\n                        .databaseBuilder(\r\n                            context.applicationContext, ODatabase::class.java,\r\n                            MAIN_DB_NAME\r\n                        )\r\n                        .fallbackToDestructiveMigration()", "choices": [{"text": "\n                       .build()\r\n                }\r\n                return INSTANCE\r\n            }\r\n}"}], "metadata": {"task_id": "Neo-Backup/51", "ground_truth": "                        .build()\r\n                }\r\n                return INSTANCE!!\r\n            }\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dbs\\ODatabase.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport androidx.compose.ui.window.Dialog\nimport androidx.compose.runtime.MutableState\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun BaseDialog(\r\n    openDialogCustom: MutableState<Boolean>,\r\n    dialogUI: @Composable (() -> Unit),\r\n) {\r\n    Dialog(\r\n        onDismissRequest = { openDialogCustom.value = false },", "choices": [{"text": "\r\n        onDismissRequest = { openDialogCustom.value = true },\r\n    ).show(dialogUI)\r\n}"}], "metadata": {"task_id": "Neo-Backup/52", "ground_truth": "        properties = DialogProperties(usePlatformDefaultWidth = false)\r\n    ) {\r\n        dialogUI()\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\dialogs\\ComposeDialog.kt"}}
{"prompt": "import java.io.IOException\nimport timber.log.Timber\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.R\nimport android.os.Process\nimport android.content.pm.PackageManager\nimport android.content.pm.ApplicationInfo\nimport android.content.Context\nimport android.app.usage.StorageStatsManager\nimport android.app.usage.StorageStats\n\r\n@Throws(PackageManager.NameNotFoundException::class)\r\nfun Context.getPackageStorageStats(\r\n    packageName: String,\r\n    storageUuid: UUID = packageManager.getApplicationInfo(packageName, 0).storageUuid,\r\n): StorageStats? {\r\n    val storageStatsManager =\r\n        getSystemService(Context.STORAGE_STATS_SERVICE) as StorageStatsManager\r\n    return try {\r\n        storageStatsManager.queryStatsForPackage(\r\n            storageUuid,\r\n            packageName,\r\n            Process.myUserHandle()\r\n        )\r\n    } catch (e: IOException) {\r\n        Timber.e(\"Could not retrieve storage stats of $packageName: $e\")\r\n        null", "choices": [{"text": "\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/58", "ground_truth": "    } catch (e: Throwable) {\r\n        LogsHandler.unexpectedException(e, packageName)\r\n        null\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\BackendController.kt"}}
{"prompt": "import java.io.IOException\nimport com.machiav3lli.backup.items.UndeterminedStorageFile\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.dbs.entity.Backup\n @Throws(IOException::class)\r\n    protected fun saveBackupProperties(\r\n        propertiesFile: UndeterminedStorageFile,\r\n        backup: Backup,\r\n    ): StorageFile? {\r\n        propertiesFile.writeText(backup.toSerialized())?.let {", "choices": [{"text": "\n            propertiesFile.writeText(backup.toSerialized())?.let {\r\n                propertiesFile.writeText(backup.toSerialized())?.let {\r\n                    propertiesFile.writeText(backup.toSerialized())?.let {\r\n                        propertiesFile.writeText(backup.toSerialized())?.let {\r\n                            propertiesFile.writeText(backup.toSerialized())?.let {\r\n                                propertiesFile.writeText(backup.toSerialized())?.let {\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }"}], "metadata": {"task_id": "Neo-Backup/61", "ground_truth": "            Timber.i(\"Wrote $it for backup: $backup\")\r\n            return it\r\n        }\r\n        return null\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\BackupBuilder.kt"}}
{"prompt": "import timber.log.Timber\nimport com.machiav3lli.backup.preferences.pref_paranoidHousekeeping\nimport com.machiav3lli.backup.preferences.pref_numBackupRevisions\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\nfun housekeepingPackageBackups(app: Package) {\r\n\r\n        if (pref_paranoidHousekeeping.value)\r\n            app.refreshBackupList()\r\n\r\n        val numBackupRevisions =\r\n            pref_numBackupRevisions.value\r\n        if (numBackupRevisions == 0) {\r\n            Timber.i(\"<${app.packageName}> Infinite backup revisions configured. Not deleting any backup.\")", "choices": [{"text": "\n            return\r\n        }\r\n\r\n        for (var i = 0; i < numBackupRevisions; i++) {\r\n            var backup = app.getBackup(i)\r\n            if (backup!= null) {\r\n                app.deleteBackup(backup)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/63", "ground_truth": "            return\r\n        }\r\n\r\n        app.deleteOldestBackups(numBackupRevisions)\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\BackupRestoreHelper.kt"}}
{"prompt": "fun <T> catchExceptions(todo: () -> T): T? {\r\n            return try {\r\n                todo()", "choices": [{"text": "\n            } catch (e) {\r\n                e.printStackTrace()\r\n            }\r\n        }"}], "metadata": {"task_id": "Neo-Backup/67", "ground_truth": "            } catch (e: Throwable) {\r\n                unexpectedException(e)\r\n                null\r\n            }\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\LogsHandler.kt"}}
{"prompt": "suspend fun <T> catchExceptions(todo: suspend () -> T): T? {\r\n            return try {\r\n                todo()", "choices": [{"text": "\n            } catch (e) {\r\n                e.printStackTrace()\r\n            }\r\n        }"}], "metadata": {"task_id": "Neo-Backup/68", "ground_truth": "            } catch (e: Throwable) {\r\n                unexpectedException(e)\r\n                null\r\n            }\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\LogsHandler.kt"}}
{"prompt": "import com.machiav3lli.backup.tasks.AppActionWork\nfun cancel(tag: String? = null) {\r\n        // only cancel ActionWork, so that corresponding FinishWork will still be executed\r\n        if (tag.isNullOrEmpty()) {\r\n            AppActionWork::class.qualifiedName?.let {\r\n                manager.cancelAllWorkByTag(it)", "choices": [{"text": "\n            }\r\n        } else {\r\n            AppActionWork::class.qualifiedName?.let {\r\n                manager.cancelAllWorkByTag(tag)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/74", "ground_truth": "            }\r\n        } else {\r\n            manager.cancelAllWorkByTag(\"name:$tag\")\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\WorkHandler.kt"}}
{"prompt": "fun getTagVars(tags: MutableSet<String>): MutableMap<String, String> {\r\n            val vars = mutableMapOf<String, String>()\r\n            tags.forEach { tag ->\r\n                val parts = tag.toString().split(':', limit = 2)\r\n                if (parts.size > 1) {\r\n                    val (key, value) = parts", "choices": [{"text": "\n                    vars.put(key, value)\r\n                } else {\r\n                    vars.put(tag.toString(), tag.toString())\r\n                }\r\n            }\r\n            return vars\r\n        }"}], "metadata": {"task_id": "Neo-Backup/75", "ground_truth": "                    vars[key] = value\r\n                }\r\n            }\r\n            return vars\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\WorkHandler.kt"}}
{"prompt": "private fun getTagVar(tags: Set<String>, name: String): String? {\r\n            tags.forEach { tag ->\r\n                val parts = tag.split(':', limit = 2)\r\n                if (parts.size > 1) {\r\n                    val (key, value) = parts\r\n                    if (key == name)", "choices": [{"text": "\n                    return value\r\n                }\r\n            }\r\n            return null\r\n        }"}], "metadata": {"task_id": "Neo-Backup/76", "ground_truth": "                        return value\r\n                }\r\n            }\r\n            return null\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\WorkHandler.kt"}}
{"prompt": "fun setTagVar(tags: MutableSet<String>, name: String, value: String) {\r\n            run tags@{\r\n                tags.forEach { tag ->\r\n                    val parts = tag.toString().split(':', limit = 2)\r\n                    if (parts.size > 1) {\r\n                        val (key, oldValue) = parts\r\n                        if (key == name) {\r\n                            tags.remove(tag)\r\n                            return\r\n                        }", "choices": [{"text": "\n                    } else {\r\n                        tags.add(tag)\r\n                    }\r\n                }\r\n            }"}], "metadata": {"task_id": "Neo-Backup/77", "ground_truth": "                    }\r\n                }\r\n            }\r\n            tags.add(\"$name:$value\")\r\n        }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\handler\\WorkHandler.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.TraceUtils\nimport com.machiav3lli.backup.traceBackups\nimport com.machiav3lli.backup.dbs.entity.Backup\nfun updateBackupList(backups: List<Backup>) {\r\n        traceBackups {\r\n            \"<$packageName> updateBackupList: ${TraceUtils.formatSortedBackups(backups)} ${\r\n                TraceUtils.methodName(\r\n                    2", "choices": [{"text": "\n                )\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/86", "ground_truth": "                )\r\n            }\"\r\n        }\r\n        backupList = backups\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\items\\Package.kt"}}
{"prompt": "fun writeText(text: String) : Boolean {\r\n        return try {\r\n            outputStream().writer().use {\r\n                it.write(text)\r\n                true", "choices": [{"text": "\n            }\r\n        } catch (e) {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/111", "ground_truth": "            }\r\n        } catch (e: Throwable) {\r\n            false\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\items\\RootFile.kt"}}
{"prompt": "import java.io.FileFilter\nimport java.io.File\noverride fun listFiles(fileFilter: FileFilter?): Array<RootFile>? {\r\n        //if (!isDirectory) return null\r\n        var files = list()?.map {\r\n            RootFile(this, it)\r\n        }\r\n        fileFilter?.let { filter ->\r\n            files = files?.filter {", "choices": [{"text": "\n                RootFile(this, it)\r\n            }\r\n        return files\r\n    }"}], "metadata": {"task_id": "Neo-Backup/115", "ground_truth": "                filter.accept(it)\r\n            }\r\n        }\r\n        return files?.toTypedArray()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\items\\RootFile.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.scheduleAlarmsOnce\noverride fun onTerminate() {\r\n\r\n        // in case the app is terminated too early\r\n        scheduleAlarmsOnce()", "choices": [{"text": "\n        super.onTerminate()\r\n    }"}], "metadata": {"task_id": "Neo-Backup/117", "ground_truth": "\r\n        work = work?.release()\r\n        refNB = WeakReference(null)\r\n        super.onTerminate()\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\OABX.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport com.machiav3lli.backup.ui.item.LaunchPref\nfun publicPreferences(persist: Boolean = false) =\r\n    Pref.prefGroups.map {\r\n        val (group, prefs) = it\r\n        prefs.mapNotNull { pref ->\r\n            if (pref.private ||\r\n                pref is LaunchPref ||\r\n                pref.group == \"kill\" ||\r\n                (persist && pref.group == \"persist\")\r\n            )", "choices": [{"text": "\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/141", "ground_truth": "                null\r\n            else\r\n                pref\r\n        }\r\n    }.flatten()", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\AdvancedPreferences.kt"}}
{"prompt": "import com.machiav3lli.backup.handler.usedThreadsByName\nfun threadsInfo(): List<String> {\r\n    val threads =\r\n        synchronized(usedThreadsByName) { usedThreadsByName }.toMap()\r\n    return listOf(", "choices": [{"text": "\n        listOf(\r\n            listOf(\r\n                listOf(\r\n                    listOf(\r\n                        listOf(\r\n                            listOf(\r\n                                listOf(\r\n                                    listOf(\r\n                                        listOf(\r\n                                            listOf(\r\n                                                listOf(\r\n                                                    listOf(\r\n                                                        listOf(\r\n                                                            listOf(\r\n                                                        listOf(\r\n                                                            listOf(\r\n                                                            listOf(\r\n                                                                listOf(\r\n                                                            listOf(\r\n                                                                listOf(\r\n                                                            listOf(\r\n                                                                listOf(\r\n                                                           "}], "metadata": {"task_id": "Neo-Backup/146", "ground_truth": "        \"------ threads\",\r\n        \"max: ${maxThreads.get()}\",\r\n        \"used: (${threads.size})${threads.values}\",\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.compose.icons.phosphor.X\nimport com.machiav3lli.backup.OABX\nfun lastErrorCommand(): List<String> {\r\n    val cmds = OABX.lastErrorCommands\r\n    return if (cmds.isNotEmpty()) {", "choices": [{"text": "\n        return cmds\r\n    } else {\r\n        return []\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/148", "ground_truth": "        listOf(\"------ last error command\") + cmds\r\n    } else {\r\n        listOf(\"------ ? no last error command\")\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "fun onErrorInfo(): List<String> {\r\n    try {\r\n        val logs = logInt() + logApp()\r\n        return listOf(\"=== onError log\", \"\") +\r\n                baseInfo() +\r\n                dumpPrefs() +\r\n                dumpEnv() +\r\n                lastErrorPkg() +", "choices": [{"text": "\n                baseInfo() +\r\n                dumpPrefs() +\r\n                dumpEnv() +\r\n                lastErrorPkg() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n                baseInfo() +\r\n"}], "metadata": {"task_id": "Neo-Backup/149", "ground_truth": "                lastErrorCommand() +\r\n                logs\r\n    } finally {\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "fun supportInfo(title: String = \"\"): List<String> {\r\n    try {\r\n        val logs = logInt() + logRel()\r\n        return listOf(\"=== ${title.ifEmpty { \"support log\" }}\", \"\") +\r\n                extendedInfo() +\r\n                dumpPrefs() +\r\n                dumpEnv() +\r\n                dumpAlarms() +\r\n                dumpTiming() +\r\n                accessTest() +\r\n                threadsInfo() +\r\n                lastErrorPkg() +", "choices": [{"text": "(logs)\r\n    } catch (e) {\r\n        return listOf(\"=== ${title.ifEmpty { \"support log\" }}\", \"\") +\r\n                extendedInfo() +\r\n                dumpPrefs() +\r\n                dumpEnv() +\r\n                dumpAlarms() +\r\n                dumpTiming() +\r\n                accessTest() +\r\n                threadsInfo() +\r\n                lastErrorPkg() +\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/150", "ground_truth": "                lastErrorCommand() +\r\n                logs\r\n    } finally {\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.compose.item.RoundButton\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun SmallButton(\r\n    icon: ImageVector,\r\n    tint: Color = MaterialTheme.colorScheme.primary,\r\n    onClick: () -> Unit,\r\n) {\r\n    RoundButton(", "choices": [{"text": "        tint: MaterialTheme.colorScheme.primary,\r\n        icon: icon,\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/151", "ground_truth": "        icon = icon,\r\n        onClick = onClick,\r\n        tint = tint\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview\r\n@Composable\r\nfun PreviewTerminal() {\r\n    Box(\r\n        modifier = Modifier\r\n            .height(500.dp)", "choices": [{"text": "\n           .width(500.dp)\r\n           .height(500.dp)\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/152", "ground_truth": "        //.width(500.dp)\r\n    ) {\r\n        TerminalPage()\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\TerminalPage.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport com.machiav3lli.backup.ui.compose.item.ExpandableBlock\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun PrefsGroupCollapsed(prefs: List<Pref>, heading: String) {\r\n    if (prefs.isNotEmpty())\r\n        ExpandableBlock(", "choices": [{"text": "\n            new ExpandableBlock(prefs, heading)\r\n        )\r\n    else\r\n        new ExpandableBlock(null, heading)\r\n}"}], "metadata": {"task_id": "Neo-Backup/153", "ground_truth": "            heading = heading,\r\n        ) {\r\n            PrefsGroup(prefs = prefs, heading = null)\r\n        }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\ui\\PrefsGroup.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.foundation.layout.Column\n\r\n@Composable\r\nfun PrefsGroup(\r\n    modifier: Modifier = Modifier,\r\n    heading: String? = null,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    PrefsGroupHeading(heading)\r\n    CompositionLocalProvider(\r\n        LocalContentColor provides MaterialTheme.colorScheme.primary\r\n    ) {\r\n        Surface(color = Color.Transparent) {\r\n            Column(modifier = modifier) {", "choices": [{"text": ",\r\n                content = content,\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/154", "ground_truth": "                content()\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\preferences\\ui\\PrefsGroup.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport androidx.core.text.HtmlCompat\nimport android.content.Context\nprivate fun Context.getUsageNotes(): String = try {\r\n    val stream = resources.openRawResource(R.raw.help)\r\n    val htmlString = convertStreamToString(stream)\r\n    stream.close()\r\n    HtmlCompat.fromHtml(htmlString, HtmlCompat.FROM_HTML_MODE_LEGACY).dropLast(2).toString()", "choices": [{"text": "\n    return HtmlCompat.fromHtml(htmlString, HtmlCompat.FROM_HTML_MODE_LEGACY).dropLast(2).toString()\r\n}"}], "metadata": {"task_id": "Neo-Backup/162", "ground_truth": "} catch (e: IOException) {\r\n    e.toString()\r\n} catch (ignored: PackageManager.NameNotFoundException) {\r\n    \"\"\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\sheets\\HelpSheet.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nfun publishProgress(vararg progress: Progress) {\r\n        //need to update main thread\r\n        GlobalScope.launch(Dispatchers.Main) {", "choices": [{"text": "\n            if (progress!= null) {\r\n                progress.publish();\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/168", "ground_truth": "            if (!isCancelled) {\r\n                onProgressUpdate(*progress)\r\n            }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\tasks\\CoroutinesAsyncTask.kt"}}
{"prompt": "import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun Modifier.ifThen(\r\n    boolean: Boolean,\r\n    crossinline modifier: @Composable Modifier.() -> Modifier,\r\n): Modifier {\r\n    return if (boolean) {", "choices": [{"text": "\n        modifier.ifThen(true)\r\n    } else {\r\n        modifier.ifThen(false)\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/171", "ground_truth": "        modifier.invoke(this)\r\n    } else {\r\n        this\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun Modifier.ifThenElse(\r\n    boolean: Boolean,\r\n    crossinline modifier: @Composable Modifier.() -> Modifier,\r\n    crossinline elseModifier: @Composable Modifier.() -> Modifier,\r\n): Modifier {\r\n    return if (boolean) {", "choices": [{"text": "\n        return if (elseModifier) {\r\n            return elseModifier\r\n        }\r\n    } else {\r\n        return if (elseModifier) {\r\n            return elseModifier\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/172", "ground_truth": "        modifier.invoke(this)\r\n    } else {\r\n        elseModifier.invoke(this)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import kotlinx.coroutines.flow.Flow\nimport androidx.lifecycle.Lifecycle\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun <T> ObservedEffect(flow: Flow<T?>, onChange: (T?) -> Unit) {\r\n    val lcOwner = LocalLifecycleOwner.current\r\n    LaunchedEffect(flow, lcOwner.lifecycle) {", "choices": [{"text": "\n        if (onChange!= null) {\r\n            lcOwner.lifecycle.onChange(onChange)\r\n        } else {\r\n            lcOwner.lifecycle.onChange(null)\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/175", "ground_truth": "        lcOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\r\n            flow.collect(onChange)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import androidx.lifecycle.Lifecycle\nimport androidx.compose.ui.platform.LocalLifecycleOwner\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ObservedEffect(onChange: () -> Unit) {\r\n    val lcOwner = LocalLifecycleOwner.current\r\n    LaunchedEffect(lcOwner.lifecycle) {", "choices": [{"text": "\n        if (lcOwner.lifecycle!= null) {\r\n            lcOwner.lifecycle.observe(onChange)\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/176", "ground_truth": "        lcOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\r\n            onChange()\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import androidx.compose.ui.layout.layout\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n\r\n@Composable\r\nfun LazyListState.isAtBottom() = remember {\r\n    derivedStateOf {\r\n        try {\r\n            layoutInfo.visibleItemsInfo.last().index >= layoutInfo.totalItemsCount - 1", "choices": [{"text": "\n        } catch (e) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}"}], "metadata": {"task_id": "Neo-Backup/178", "ground_truth": "        } catch (_: Throwable) {\r\n            true\r\n        }\r\n    }\r\n}.value", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\extensions.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun AddressBookPreview() {", "choices": [{"text": "\r\n    return new AddressBookPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/179", "ground_truth": "    Image(\r\n        Phosphor.AddressBook,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\AddressBook.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun AndroidLogoPreview() {", "choices": [{"text": "\n    return new AndroidLogoPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/180", "ground_truth": "    Image(\r\n        Phosphor.AndroidLogo,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\AndroidLogo.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArchiveTrayPreview() {", "choices": [{"text": "\r\n    return new ArchiveTrayPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/181", "ground_truth": "    Image(\r\n        Phosphor.ArchiveTray,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArchiveTray.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowDownPreview() {", "choices": [{"text": "\n    return new ArrowDownPreview() {\n        @Override\n        public void onArrowDown() {\n            super.onArrowDown();\n        }\n    };\n}"}], "metadata": {"task_id": "Neo-Backup/182", "ground_truth": "    Image(\r\n        Phosphor.ArrowDown,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowDown.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowRightPreview() {", "choices": [{"text": "\r\n    return new ArrowRightPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/183", "ground_truth": "    Image(\r\n        Phosphor.ArrowRight,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowRight.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowsClockwisePreview() {", "choices": [{"text": "\r\n    return new ArrowsClockwisePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/184", "ground_truth": "    Image(\r\n        Phosphor.ArrowsClockwise,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowsClockwise.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowsOutLineVerticalPreview() {", "choices": [{"text": "\r\n    return new ArrowsOutLineVerticalPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/185", "ground_truth": "    Image(\r\n        Phosphor.ArrowsOutLineVertical,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowsOutLineVertical.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowSquareOutPreview() {", "choices": [{"text": "\n    return new ArrowSquareOutPreview() {\n        @Override\n        public void onClick() {\n            super.onClick();\n        }\n    };\n}"}], "metadata": {"task_id": "Neo-Backup/186", "ground_truth": "    Image(\r\n        Phosphor.ArrowSquareOut,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowSquareOut.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowUDownLeftPreview() {", "choices": [{"text": "\n    return new ArrowUDownLeftPreview() {\n        @Override\r\n        public void onClick() {\n            super.onClick();\n        }\n    };\n}"}], "metadata": {"task_id": "Neo-Backup/187", "ground_truth": "    Image(\r\n        Phosphor.ArrowUDownLeft,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowUDownLeft.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowUpPreview() {", "choices": [{"text": "\r\n    return new ArrowUpPreview() {\r\n        @Override\r\n        public void onArrowUp() {\r\n            super.onArrowUp();\r\n        }\r\n\r\n        @Override\r\n        public void onArrowDown() {\r\n            super.onArrowDown();\r\n        }\r\n\r\n        @Override\r\n        public void onArrowLeft() {\r\n            super.onArrowLeft();\r\n        }\r\n\r\n        @Override\r\n        public void onArrowRight() {\r\n            super.onArrowRight();\r\n       "}], "metadata": {"task_id": "Neo-Backup/188", "ground_truth": "    Image(\r\n        Phosphor.ArrowUp,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowUp.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ArrowUUpLeftPreview() {", "choices": [{"text": "\r\n    return new ArrowUUpLeftPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/189", "ground_truth": "    Image(\r\n        Phosphor.ArrowUUpLeft,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ArrowUUpLeft.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun AsteriskSimplePreview() {", "choices": [{"text": "\r\n    return new AsteriskSimplePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/190", "ground_truth": "    Image(\r\n        Phosphor.AsteriskSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\AsteriskSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun BracketsSquarePreview() {", "choices": [{"text": "\r\n    return new BracketsSquarePreview(this);\r\n}"}], "metadata": {"task_id": "Neo-Backup/191", "ground_truth": "    Image(\r\n        Phosphor.BracketsSquare,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\BracketsSquare.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun BugPreview() {", "choices": [{"text": "\r\n    return new BugPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/192", "ground_truth": "    Image(\r\n        Phosphor.Bug,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Bug.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CalendarPlusPreview() {", "choices": [{"text": "\n    CalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlusCalendarPlus"}], "metadata": {"task_id": "Neo-Backup/193", "ground_truth": "    Image(\r\n        Phosphor.CalendarPlus,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CalendarPlus.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CalendarXPreview() {", "choices": [{"text": "\n    calendarXPreview = new CalendarXPreview();\r\n    calendarXPreview.init();\r\n    return calendarXPreview;\r\n}"}], "metadata": {"task_id": "Neo-Backup/194", "ground_truth": "    Image(\r\n        Phosphor.CalendarX,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CalendarX.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CaretDownPreview() {", "choices": [{"text": "\r\n    return new CaretDownPreview(mContext) {\r\n        @Override\r\n        public void onCaretDown() {\r\n            super.onCaretDown();\r\n            mContext.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mContext.runOnUiThread(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            mContext.runOnUiThread(new Runnable() {\r\n                                @Override\r\n                                public void run() {\r\n                                "}], "metadata": {"task_id": "Neo-Backup/195", "ground_truth": "    Image(\r\n        Phosphor.CaretDown,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CaretDown.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CaretUpPreview() {", "choices": [{"text": "\n    return new CaretUpPreview() {\n        @Override\n        public void onCaretUp() {\n            super.onCaretUp();\n        }\n    };\n}"}], "metadata": {"task_id": "Neo-Backup/196", "ground_truth": "    Image(\r\n        Phosphor.CaretUp,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CaretUp.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ChatDotsPreview() {", "choices": [{"text": "\r\n    return new ChatDotsPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/197", "ground_truth": "    Image(\r\n        Phosphor.ChatDots,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ChatDots.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CheckPreview() {", "choices": [{"text": "\r\n    return new CheckPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/198", "ground_truth": "    Image(\r\n        Phosphor.Check,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Check.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CheckCirclePreview() {", "choices": [{"text": "\r\n    return new CheckCirclePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/199", "ground_truth": "    Image(\r\n        Phosphor.CheckCircle,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CheckCircle.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ChecksPreview() {", "choices": [{"text": "\r\n    if (mPreview!= null) {\r\n        return mPreview;\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/200", "ground_truth": "    Image(\r\n        Phosphor.Checks,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Checks.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CircleWavyQuestionPreview() {", "choices": [{"text": "\r\n    return new CircleWavyQuestionPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/201", "ground_truth": "    Image(\r\n        Phosphor.CircleWavyQuestion,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CircleWavyQuestion.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun CircleWavyWarningPreview() {", "choices": [{"text": "\r\n    return new CircleWavyWarningPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/202", "ground_truth": "    Image(\r\n        Phosphor.CircleWavyWarning,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\CircleWavyWarning.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ClockPreview() {", "choices": [{"text": "\r\n    return new ClockPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/203", "ground_truth": "    Image(\r\n        Phosphor.Clock,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Clock.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ClockClockwisePreview() {", "choices": [{"text": "\n    ClockClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClock"}], "metadata": {"task_id": "Neo-Backup/204", "ground_truth": "    Image(\r\n        Phosphor.ClockClockwise,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ClockClockwise.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ClockCounterClockwisePreview() {", "choices": [{"text": "\n    ClockCounterClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwiseClockwise"}], "metadata": {"task_id": "Neo-Backup/205", "ground_truth": "    Image(\r\n        Phosphor.ClockCounterClockwise,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ClockCounterClockwise.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun DetectivePreview() {", "choices": [{"text": "\r\n    return new DetectivePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/206", "ground_truth": "    Image(\r\n        Phosphor.Detective,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Detective.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun DiamondsFourPreview() {", "choices": [{"text": "\r\n    return new DiamondsFourPreview() {\r\n        @Override\r\n        public void onClick(View view) {\r\n            Intent intent = new Intent(Intent.ACTION_VIEW);\r\n            intent.setData(Uri.parse(\"http://www.example.com\"));\r\n            startActivity(intent);\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/207", "ground_truth": "    Image(\r\n        Phosphor.DiamondsFour,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\DiamondsFour.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun EqualsPreview() {", "choices": [{"text": "\r\n    return Objects.equals(this.id, this.id) && Objects.equals(this.name, this.name) && Objects.equals(this.type, this.type) && Objects.equals(this.value, this.value) && Objects.equals(this.type, this.type) && Objects.equals(this.value, this.value) && Objects.equals(this.type, this.type) && Objects.equals(this.value, this.value) && Objects.equals(this.type, this.type) && Objects.equals(this."}], "metadata": {"task_id": "Neo-Backup/208", "ground_truth": "    Image(\r\n        Phosphor.Equals,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Equals.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun EyePreview() {", "choices": [{"text": "\r\n    return new EyePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/209", "ground_truth": "    Image(\r\n        Phosphor.Eye,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Eye.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun EyedropperSamplePreview() {", "choices": [{"text": "\r\n    return new EyedropperSamplePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/210", "ground_truth": "    Image(\r\n        Phosphor.EyedropperSample,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\EyedropperSample.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun EyeSlashPreview() {", "choices": [{"text": "\r\n    return new EyeSlashPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/211", "ground_truth": "    Image(\r\n        Phosphor.EyeSlash,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\EyeSlash.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FileZipPreview() {", "choices": [{"text": "\r\n    return new FileZipPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/212", "ground_truth": "    Image(\r\n        Phosphor.FileZip,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FileZip.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FingerprintSimplePreview() {", "choices": [{"text": "\r\n    return new FingerprintSimplePreview() {\r\n        @Override\r\n        public void onCreate(Bundle savedInstanceState) {\r\n            super.onCreate(savedInstanceState);\r\n            setContentView(R.layout.activity_simple_preview);\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/213", "ground_truth": "    Image(\r\n        Phosphor.FingerprintSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FingerprintSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FlaskPreview() {", "choices": [{"text": "\r\n    return new FlaskPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/214", "ground_truth": "    Image(\r\n        Phosphor.Flask,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Flask.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FloppyDiskPreview() {", "choices": [{"text": "\r\n    return new FloppyDiskPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/215", "ground_truth": "    Image(\r\n        Phosphor.FloppyDisk,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FloppyDisk.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FolderNotchPreview() {", "choices": [{"text": "\r\n    return new FolderNotchPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/216", "ground_truth": "    Image(\r\n        Phosphor.FolderNotch,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FolderNotch.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun FunnelSimplePreview() {", "choices": [{"text": "\r\n    return new FunnelSimplePreview() {\r\n        @Override\r\n        @Override\r\n        public void onCreate(Bundle savedInstanceState) {\r\n            super.onCreate(savedInstanceState);\r\n            setContentView(R.layout.activity_funnel_simple_preview);\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/217", "ground_truth": "    Image(\r\n        Phosphor.FunnelSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\FunnelSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun GameControllerPreview() {", "choices": [{"text": "\n    GameController gameController = GameController.getInstance();\r\n    if (gameController == null) {\r\n        return null;\r\n    }\r\n    return new GameControllerPreview(gameController);\r\n}"}], "metadata": {"task_id": "Neo-Backup/218", "ground_truth": "    Image(\r\n        Phosphor.GameController,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\GameController.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun GearSixPreview() {", "choices": [{"text": "\r\n    return new GearSixPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/219", "ground_truth": "    Image(\r\n        Phosphor.GearSix,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\GearSix.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun HardDrivesPreview() {", "choices": [{"text": "\r\n    return new HardDrivesPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/220", "ground_truth": "    Image(\r\n        Phosphor.HardDrives,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\HardDrives.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun HashPreview() {", "choices": [{"text": "\r\n    return new HashPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/221", "ground_truth": "    Image(\r\n        Phosphor.Hash,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Hash.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun HousePreview() {", "choices": [{"text": "\r\n    return new HousePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/222", "ground_truth": "    Image(\r\n        Phosphor.House,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\House.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun InfinityPreview() {", "choices": [{"text": "\r\n    return new InfinityPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/223", "ground_truth": "    Image(\r\n        Phosphor.Infinity,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Infinity.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun InfoPreview() {", "choices": [{"text": "\r\n    return new InfoPreview() {\r\n        @Override\r\n        public void onClick() {\r\n            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.example.com\"));\r\n            startActivity(intent);\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/224", "ground_truth": "    Image(\r\n        Phosphor.Info,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Info.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun KeyPreview() {", "choices": [{"text": "\r\n    return new KeyPreview(this);\r\n}"}], "metadata": {"task_id": "Neo-Backup/225", "ground_truth": "    Image(\r\n        Phosphor.Key,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Key.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun LeafPreview() {", "choices": [{"text": "\n    return new LeafPreview() {\n        @Override\r\n        public void onClick(View view) {\n            super.onClick(view);\n        }\n    };\n}"}], "metadata": {"task_id": "Neo-Backup/226", "ground_truth": "    Image(\r\n        Phosphor.Leaf,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Leaf.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ListPreview() {", "choices": [{"text": "\n    ListView listView = (ListView) findViewById(R.id.list_view);\n    listView.setOnItemClickListener(new OnItemClickListener() {\n        @Override\r\n        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            Intent intent = new Intent(ListActivity.this, ListActivity.class);\n            intent.putExtra(\"position\", position);\n            startActivity(intent);\n        }\n    });\n}"}], "metadata": {"task_id": "Neo-Backup/227", "ground_truth": "    Image(\r\n        Phosphor.List,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\List.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ListNumbersPreview() {", "choices": [{"text": "\r\n    return new ListNumbersPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/228", "ground_truth": "    Image(\r\n        Phosphor.ListNumbers,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ListNumbers.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun LockPreview() {", "choices": [{"text": "\n    lockPreview();\r\n    return true;\r\n}"}], "metadata": {"task_id": "Neo-Backup/229", "ground_truth": "    Image(\r\n        Phosphor.Lock,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Lock.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun LockOpenPreview() {", "choices": [{"text": "\r\n    return new LockOpenPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/230", "ground_truth": "    Image(\r\n        Phosphor.LockOpen,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\LockOpen.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun MagnifyingGlassPreview() {", "choices": [{"text": "\r\n    return new MagnifyingGlassPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/231", "ground_truth": "    Image(\r\n        Phosphor.MagnifyingGlass,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\MagnifyingGlass.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun NutPreview() {", "choices": [{"text": "\r\n    return new NutPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/232", "ground_truth": "    Image(\r\n        Phosphor.Nut,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Nut.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PasswordPreview() {", "choices": [{"text": "\r\n    return new PasswordPreview() {\r\n        @Override\r\n        public void onSubmit(String password) {\r\n            super.onSubmit(password);\r\n        }\r\n\r\n        @Override\r\n        public void onCancel() {\r\n            super.onCancel();\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/233", "ground_truth": "    Image(\r\n        Phosphor.Password,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Password.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PhoneIncomingPreview() {", "choices": [{"text": "\r\n    return new PhoneIncomingPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/234", "ground_truth": "    Image(\r\n        Phosphor.PhoneIncoming,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\PhoneIncoming.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PlaceholderPreview() {", "choices": [{"text": "\r\n    return new PlaceholderPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/235", "ground_truth": "    Image(\r\n        Phosphor.Placeholder,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Placeholder.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PlayPreview() {", "choices": [{"text": "\r\n    return new PlayPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/236", "ground_truth": "    Image(\r\n        Phosphor.Play,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Play.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PlayCirclePreview() {", "choices": [{"text": "\r\n    return new PlayCirclePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/237", "ground_truth": "    Image(\r\n        Phosphor.PlayCircle,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\PlayCircle.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun PlusCirclePreview() {", "choices": [{"text": "\r\n    return new PlusCirclePreview(this);\r\n}"}], "metadata": {"task_id": "Neo-Backup/238", "ground_truth": "    Image(\r\n        Phosphor.PlusCircle,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\PlusCircle.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ProhibitPreview() {", "choices": [{"text": "\r\n    return new ProhibitPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/239", "ground_truth": "    Image(\r\n        Phosphor.Prohibit,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Prohibit.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ProhibitInsetPreview() {", "choices": [{"text": "\r\n    return new ProhibitInsetPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/240", "ground_truth": "    Image(\r\n        Phosphor.ProhibitInset,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ProhibitInset.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ShareNetworkPreview() {", "choices": [{"text": "\n    return new ShareNetworkPreview() {\n        @Override\n        public void onShareNetwork(ShareNetwork shareNetwork) {\n            super.onShareNetwork(shareNetwork);\n            mShareNetwork = shareNetwork;\n        }\n\n        @Override\n        public void onCancelShareNetwork() {\n            super.onCancelShareNetwork();\n            mShareNetwork = null;\n        }\n    }"}], "metadata": {"task_id": "Neo-Backup/241", "ground_truth": "    Image(\r\n        Phosphor.ShareNetwork,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ShareNetwork.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ShieldCheckeredPreview() {", "choices": [{"text": "\r\n    return new ShieldCheckeredPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/242", "ground_truth": "    Image(\r\n        Phosphor.ShieldCheckered,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ShieldCheckered.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun ShieldStarPreview() {", "choices": [{"text": "\n    ShieldStar star = new ShieldStar();\n    star.setId(\"star\");\n    star.setName(\"Star\");\n    star.setType(\"star\");\n    star.setIcon(\"star-star.png\");\n    star.setVisible(true);\n    return star;\n}"}], "metadata": {"task_id": "Neo-Backup/243", "ground_truth": "    Image(\r\n        Phosphor.ShieldStar,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\ShieldStar.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SlidersHorizontalPreview() {", "choices": [{"text": "\r\n    return new SlidersHorizontalPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/244", "ground_truth": "    Image(\r\n        Phosphor.SlidersHorizontal,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\SlidersHorizontal.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SortAscendingPreview() {", "choices": [{"text": "\r\n    return new SortAscendingPreview() {\r\n        @Override\r\n        public void sortAscending() {\r\n            super.sortAscending();\r\n        }\r\n\r\n        @Override\r\n        public void sortDescending() {\r\n            super.sortDescending();\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/245", "ground_truth": "    Image(\r\n        Phosphor.SortAscending,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\SortAscending.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SortDescendingPreview() {", "choices": [{"text": "\n    return new SortDescendingPreview() {\n        @Override\n        public void sortDescending() {\n            super.sortDescending();\n        }\n    };\n}"}], "metadata": {"task_id": "Neo-Backup/246", "ground_truth": "    Image(\r\n        Phosphor.SortDescending,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\SortDescending.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SpinnerPreview() {", "choices": [{"text": "\n    SpinnerSpinner spinner = new SpinnerSpinner();\n    spinner.show();\n    SpinnerSpinner spinner2 = new SpinnerSpinner();\n    spinner2.show();\n    SpinnerSpinner spinner3 = new SpinnerSpinner();\n    spinner3.show();\n    SpinnerSpinner spinner4 = new SpinnerSpinner();\n    spinner4.show();\n    SpinnerSpinner spinner5 = new SpinnerSpinner();\n    spinner5.show();\n    SpinnerSpinner spinner6 = new SpinnerSpinner();\n    spinner6.show();\n    SpinnerSpinner spinner7 = new Sp"}], "metadata": {"task_id": "Neo-Backup/247", "ground_truth": "    Image(\r\n        Phosphor.Spinner,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Spinner.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun StarPreview() {", "choices": [{"text": "\n    return new StarPreview() {\n        @Override\r\n        public void onPreviewClick() {\n            super.onPreviewClick();\n        }\n    };\n}"}], "metadata": {"task_id": "Neo-Backup/248", "ground_truth": "    Image(\r\n        Phosphor.Star,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Star.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun SwatchesPreview() {", "choices": [{"text": "\r\n    return new SwatchesPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/249", "ground_truth": "    Image(\r\n        Phosphor.Swatches,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Swatches.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TagSimplePreview() {", "choices": [{"text": "\n    return new TagSimplePreview() {\n        @Override\n        public void onClick(View view) {\n            super.onClick(view);\n        }\n    };\n}"}], "metadata": {"task_id": "Neo-Backup/250", "ground_truth": "    Image(\r\n        Phosphor.TagSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\TagSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TelegramLogoPreview() {", "choices": [{"text": "\r\n    return new TelegramLogoPreview() {\r\n        @Override\r\n        public void onClick(View view) {\r\n            Intent intent = new Intent(Intent.ACTION_VIEW);\r\n            intent.setData(Uri.parse(\""}], "metadata": {"task_id": "Neo-Backup/251", "ground_truth": "    Image(\r\n        Phosphor.TelegramLogo,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\TelegramLogo.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TextAaPreview() {", "choices": [{"text": "\r\n    return new TextAaPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/252", "ground_truth": "    Image(\r\n        Phosphor.TextAa,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\TextAa.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TextboxPreview() {", "choices": [{"text": "\r\n    return new TextboxPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/253", "ground_truth": "    Image(\r\n        Phosphor.Textbox,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Textbox.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TranslatePreview() {", "choices": [{"text": "\r\n    return new TranslatePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/254", "ground_truth": "    Image(\r\n        Phosphor.Translate,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Translate.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun TrashSimplePreview() {", "choices": [{"text": "\r\n    return new TrashSimplePreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/255", "ground_truth": "    Image(\r\n        Phosphor.TrashSimple,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\TrashSimple.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun UserPreview() {", "choices": [{"text": "\r\n    return new UserPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/256", "ground_truth": "    Image(\r\n        Phosphor.User,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\User.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun UserGearPreview() {", "choices": [{"text": "\r\n    return new UserGearPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/257", "ground_truth": "    Image(\r\n        Phosphor.UserGear,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\UserGear.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun WarningPreview() {", "choices": [{"text": "\r\n    return new WarningPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/258", "ground_truth": "    Image(\r\n        Phosphor.Warning,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Warning.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun WrenchPreview() {", "choices": [{"text": "\r\n    return new WrenchPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/259", "ground_truth": "    Image(\r\n        Phosphor.Wrench,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\Wrench.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun XPreview() {", "choices": [{"text": "\r\n    return new XPreview();\r\n}"}], "metadata": {"task_id": "Neo-Backup/260", "ground_truth": "    Image(\r\n        Phosphor.X,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\X.kt"}}
{"prompt": "import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nfun XCirclePreview() {", "choices": [{"text": "\r\n    return new XCirclePreview(this);\r\n}"}], "metadata": {"task_id": "Neo-Backup/261", "ground_truth": "    Image(\r\n        Phosphor.XCircle,\r\n        null\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\icons\\phosphor\\XCircle.kt"}}
{"prompt": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\nimport androidx.compose.animation.core.updateTransition\nimport androidx.compose.animation.core.animateDp\n\r\n@Composable\r\nfun selectableChipTransition(selected: Boolean): SelectableChipTransition {\r\n    val transition = updateTransition(\r\n        targetState = if (selected) SelectionState.Selected else SelectionState.Unselected,\r\n        label = \"chip_transition\"\r\n    )\r\n    val corerRadius = transition.animateDp(label = \"chip_corner\") { state ->\r\n        when (state) {\r\n            SelectionState.Unselected -> 8.dp\r\n            SelectionState.Selected   -> 16.dp\r\n        }", "choices": [{"text": "\n            SelectionState.Unselected -> 8.dp\r\n            SelectionState.Selected   -> 16.dp\r\n        }\r\n    }\r\n    return new SelectableChipTransition(corerRadius)\r\n}"}], "metadata": {"task_id": "Neo-Backup/262", "ground_truth": "    }\r\n    return remember(transition) {\r\n        SelectableChipTransition(corerRadius)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Chip.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.ChipItem\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.SelectableChipColors\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.FilterChipDefaults\nimport androidx.compose.material3.FilterChip\nimport androidx.compose.foundation.shape.RoundedCornerShape\n\r\n@Composable\r\nfun SelectionChip(\r\n    item: ChipItem,\r\n    isSelected: Boolean,\r\n    colors: SelectableChipColors = FilterChipDefaults.filterChipColors(\r\n        containerColor = MaterialTheme.colorScheme.surfaceContainer,\r\n        selectedContainerColor = MaterialTheme.colorScheme.primaryContainer,\r\n        labelColor = MaterialTheme.colorScheme.onSurface,\r\n        selectedLabelColor = MaterialTheme.colorScheme.onPrimaryContainer,\r\n        iconColor = MaterialTheme.colorScheme.onSurface,\r\n        selectedLeadingIconColor = MaterialTheme.colorScheme.onPrimaryContainer,\r\n    ),\r\n    onClick: () -> Unit,\r\n) {\r\n    val selectableChipTransitionState = selectableChipTransition(selected = isSelected)\r\n\r\n    FilterChip(\r\n        colors = colors,\r\n        shape = RoundedCornerShape(selectableChipTransitionState.cornerRadius),\r\n        border = null,\r\n        selected = isSelected,\r\n        leadingIcon = {\r\n            ButtonIcon(item.icon, item.textId)\r\n        },\r\n        onClick = onClick,", "choices": [{"text": "    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/263", "ground_truth": "        label = {\r\n            Text(text = stringResource(id = item.textId))\r\n        }\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Chip.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.TraceUtils.beginNanoTimer\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.R\nimport com.machiav3lli.backup.ICON_SIZE_LARGE\nimport coil.imageLoader\nimport coil.compose.AsyncImagePainter\nimport coil.ImageLoader\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Icon\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.Image\n\r\n@Composable\r\nfun PackageIcon(\r\n    modifier: Modifier = Modifier,\r\n    item: Package?,\r\n    imageData: Any,\r\n    imageLoader: ImageLoader = LocalContext.current.imageLoader,\r\n) {\r\n    beginNanoTimer(\"pkgIcon.rCAIP\")\r\n    Image(\r\n        modifier = modifier\r\n            .size(ICON_SIZE_LARGE)\r\n            .clip(MaterialTheme.shapes.medium),\r\n        painter = cachedAsyncImagePainter(\r\n            model = imageData,\r\n            imageLoader = imageLoader,\r\n            altPainter = placeholderIconPainter(item, imageLoader)\r\n        ),", "choices": [{"text": "\n        altPainter = placeholderIconPainter(item, imageLoader)\r\n    )\r\n    endNanoTimer(\"pkgIcon.rCAIP\")\r\n}"}], "metadata": {"task_id": "Neo-Backup/266", "ground_truth": "        contentDescription = null,\r\n        contentScale = ContentScale.Crop\r\n    )\r\n    endNanoTimer(\"pkgIcon.rCAIP\")\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.utils.TraceUtils.beginNanoTimer\nimport com.machiav3lli.backup.items.Package\nimport androidx.compose.material3.Icon\nfun dropAllButUsed(pkgs: List<Package>) {\r\n        val used = pkgs.map { it.iconData }.toSet()\r\n        beginNanoTimer(\"limitIconCache\")\r\n        val keys = synchronized(painterCache) { painterCache.keys.toSet() }\r\n        (keys - used).forEach {\r\n            if (it !is Int) {", "choices": [{"text": "\n                pkgs.remove(it)\r\n            } else {\r\n                pkgs.add(it)\r\n            }\r\n        }\r\n        endNanoTimer(\"limitIconCache\")\r\n    }"}], "metadata": {"task_id": "Neo-Backup/271", "ground_truth": "                removeIcon(it)\r\n            }\r\n        }\r\n        endNanoTimer(\"limitIconCache\")\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport com.machiav3lli.backup.ICON_SIZE_SMALL\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.Image\n\r\n@Composable\r\nfun RoundButton(\r\n    modifier: Modifier = Modifier,\r\n    size: Dp = ICON_SIZE_SMALL,\r\n    icon: ImageVector,\r\n    tint: Color = MaterialTheme.colorScheme.onSurface,\r\n    description: String = \"\",\r\n    onClick: () -> Unit,\r\n) {\r\n    IconButton(\r\n        modifier = modifier,\r\n        onClick = onClick\r\n    ) {\r\n        Icon(\r\n            modifier = Modifier.size(size),\r\n            imageVector = icon,", "choices": [{"text": "\n            tint = tint,\r\n            description = description,\r\n        )\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/273", "ground_truth": "            tint = tint,\r\n            contentDescription = description\r\n        )\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Components.kt"}}
{"prompt": "import androidx.compose.runtime.Composable\nimport androidx.compose.animation.ExitTransition\nimport androidx.compose.animation.EnterTransition\nimport androidx.compose.animation.AnimatedVisibilityScope\nimport androidx.compose.animation.AnimatedVisibility\n\r\n@Composable\r\nfun StatefulAnimatedVisibility(\r\n    currentState: Boolean = false,\r\n    enterPositive: EnterTransition,\r\n    exitPositive: ExitTransition,\r\n    enterNegative: EnterTransition,\r\n    exitNegative: ExitTransition,\r\n    expandedView: @Composable (AnimatedVisibilityScope.() -> Unit),\r\n    collapsedView: @Composable (AnimatedVisibilityScope.() -> Unit),\r\n) {\r\n    AnimatedVisibility(\r\n        visible = currentState,\r\n        enter = enterPositive,\r\n        exit = exitPositive,\r\n        content = expandedView\r\n    )\r\n    AnimatedVisibility(\r\n        visible = !currentState,", "choices": [{"text": "\n        enter = enterNegative,\r\n        exit = exitNegative,\r\n        content = collapsedView\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/274", "ground_truth": "        enter = enterNegative,\r\n        exit = exitNegative,\r\n        content = collapsedView\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Legend\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun LegendItem(item: Legend) {\r\n    CardSubRow(\r\n        text = stringResource(id = item.nameId),\r\n        icon = item.icon,\r\n        iconColor = if (item.iconColorId != -1) colorResource(id = item.iconColorId)\r\n        else MaterialTheme.colorScheme.onSurface,", "choices": [{"text": "\n        iconColor = if (item.iconColorId!= -1) colorResource(id = item.iconColorId)\r\n        else MaterialTheme.colorScheme.onSurface\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/279", "ground_truth": "        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable(enabled = false) {}\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\LegendItem.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport com.machiav3lli.backup.ui.item.BooleanPref\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Switch\n\r\n@Composable\r\nfun BooleanPreference(\r\n    modifier: Modifier = Modifier,\r\n    pref: BooleanPref,\r\n    index: Int = 0,\r\n    groupSize: Int = 1,\r\n    onCheckedChange: ((Boolean) -> Unit) = {},\r\n) {\r\n    SwitchPreference(\r\n        modifier = modifier,\r\n        pref = pref,", "choices": [{"text": "        index = index,\r\n        groupSize = groupSize,\r\n        onCheckedChange = onCheckedChange,\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/281", "ground_truth": "        index = index,\r\n        groupSize = groupSize,\r\n        onCheckedChange = onCheckedChange,\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Preference.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.Pref\nimport com.machiav3lli.backup.ui.item.IntPref\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun IntPreference(\r\n    modifier: Modifier = Modifier,\r\n    pref: IntPref,\r\n    index: Int = 0,\r\n    groupSize: Int = 1,\r\n    onValueChange: ((Int) -> Unit) = {},\r\n) {\r\n    SeekBarPreference(\r\n        modifier = modifier,\r\n        pref = pref,", "choices": [{"text": "        index = index,\r\n        groupSize = groupSize,\r\n        onValueChange = onValueChange,\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/282", "ground_truth": "        index = index,\r\n        groupSize = groupSize,\r\n        onValueChange = onValueChange,\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\Preference.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.compose.vertical\nimport com.machiav3lli.backup.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.draw.rotate\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.foundation.layout.Row\n\r\n@Preview\r\n@Composable\r\nfun VerticalPreview() {\r\n    Row(\r\n        modifier = Modifier.wrapContentSize()\r\n    ) {\r\n        Text(\r\n            modifier = Modifier\r\n                .vertical()\r\n                .rotate(-90f),\r\n            fontWeight = FontWeight.Bold,", "choices": [{"text": "\n        ),\r\n    }\r\n    Row(\r\n        modifier = Modifier.wrapContentSize()\r\n    ) {\r\n        Text(\r\n            modifier = Modifier\r\n               .horizontal()\r\n               .rotate(-90f),\r\n            fontWeight = FontWeight.Bold,\r\n        ),\r\n    }\r\n    Row(\r\n        modifier = Modifier.wrapContentSize()\r\n    ) {\r\n        Text(\r\n            modifier = Modifier\r\n               .horizontal()\r\n               .rotate(-90f),\r\n            fontWeight"}], "metadata": {"task_id": "Neo-Backup/283", "ground_truth": "            text = \"vertical text\"\r\n        )\r\n        Text(text = \"horizontal\")\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\TopBar.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.compose.vertical\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@Composable\r\nfun GlobalIndicators() {\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier", "choices": [{"text": "\n    );\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier\r\n    );\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier\r\n    );\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier\r\n    );\r\n    Column(\r\n        verticalArrangement = Arrangement.SpaceEvenly,\r\n        modifier = Modifier\r\n    );\r"}], "metadata": {"task_id": "Neo-Backup/285", "ground_truth": "            .fillMaxWidth()\r\n    ) {\r\n        ProgressIndicator()\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\item\\TopBar.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.ChipItem\nimport com.machiav3lli.backup.ui.compose.item.SelectionChip\nimport com.machiav3lli.backup.R\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.FlowRow\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@OptIn(ExperimentalLayoutApi::class)\r\n@Composable\r\nfun SelectableChipGroup(\r\n    //TODO hg42 move to item/Components.kt ?\r\n    modifier: Modifier = Modifier,\r\n    list: List<ChipItem>,\r\n    selectedFlag: Int,\r\n    onClick: (Int) -> Unit,\r\n) {\r\n    FlowRow(\r\n        modifier = modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n    ) {\r\n        list.forEach { item ->\r\n            SelectionChip(\r\n                item = item,\r\n                isSelected = item.flag == selectedFlag,\r\n            ) {", "choices": [{"text": "\n                onClick(item.flag == selectedFlag)\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/286", "ground_truth": "                onClick(item.flag)\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.ui.item.ChipItem\nimport com.machiav3lli.backup.ui.compose.item.SelectionChip\nimport com.machiav3lli.backup.R\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.FlowRow\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@OptIn(ExperimentalLayoutApi::class)\r\n@Composable\r\nfun MultiSelectableChipGroup(\r\n    //TODO hg42 move to item/Components.kt ?\r\n    modifier: Modifier = Modifier,\r\n    list: List<ChipItem>,\r\n    selectedFlags: Int,\r\n    onClick: (Int, Int) -> Unit,\r\n) {\r\n    FlowRow(\r\n        modifier = modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n    ) {\r\n        list.forEach { item ->\r\n            SelectionChip(\r\n                item = item,\r\n                isSelected = item.flag and selectedFlags != 0,\r\n            ) {", "choices": [{"text": "\n                item.flag = selectedFlags,\r\n                onClick = onClick,\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/287", "ground_truth": "                onClick(selectedFlags xor item.flag, item.flag)\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Components.kt"}}
{"prompt": "import com.machiav3lli.backup.items.Package\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun UpdatedPackageRecycler(\r\n    modifier: Modifier = Modifier,\r\n    productsList: List<Package>?,\r\n    onClick: (Package) -> Unit = {},\r\n) {\r\n    HorizontalItemList(\r\n        modifier = modifier,\r\n        list = productsList,", "choices": [{"text": "\n        onClick = onClick,\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/288", "ground_truth": "        itemKey = { it.packageName }\r\n    ) {\r\n        UpdatedPackageItem(it, onClick)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Recyclers.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Schedule\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ScheduleRecycler(\r\n    modifier: Modifier = Modifier,\r\n    productsList: List<Schedule>?,\r\n    onClick: (Schedule) -> Unit = {},\r\n    onCheckChanged: (Schedule, Boolean) -> Unit = { _: Schedule, _: Boolean -> },\r\n) {\r\n    BusyBackground(modifier) {\r\n        VerticalItemList(\r\n            list = productsList", "choices": [{"text": ",\r\n            onClick = onClick,\r\n            onCheckChanged = onCheckChanged,\r\n        )\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/289", "ground_truth": "        ) {\r\n            ScheduleItem(it, onClick, onCheckChanged)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Recyclers.kt"}}
{"prompt": "import com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.dbs.entity.Schedule\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ExportedScheduleRecycler(\r\n    modifier: Modifier = Modifier,\r\n    productsList: List<Pair<Schedule, StorageFile>>?,\r\n    onImport: (Schedule) -> Unit = {},\r\n    onDelete: (StorageFile) -> Unit = {},\r\n) {\r\n    BusyBackground(modifier) {\r\n        VerticalItemList(\r\n            list = productsList", "choices": [{"text": ",\r\n            onImport = onImport,\r\n            onDelete = onDelete,\r\n        )\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/290", "ground_truth": "        ) {\r\n            ExportedScheduleItem(it.first, it.second, onImport, onDelete)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Recyclers.kt"}}
{"prompt": "import com.machiav3lli.backup.items.Log\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun LogRecycler(\r\n    modifier: Modifier = Modifier,\r\n    productsList: List<Log>?,\r\n    onShare: (Log) -> Unit = {},\r\n    onDelete: (Log) -> Unit = {},\r\n) {\r\n    BusyBackground(modifier) {\r\n        VerticalItemList(\r\n            list = productsList", "choices": [{"text": ",\r\n            onShare = onShare,\r\n            onDelete = onDelete,\r\n        )\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/291", "ground_truth": "        ) {\r\n            LogItem(it, onShare, onDelete)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\compose\\recycler\\Recyclers.kt"}}
{"prompt": "import androidx.navigation.compose.composable\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.animation.slideOutHorizontally\nimport androidx.compose.animation.slideInHorizontally\nimport androidx.compose.animation.AnimatedVisibilityScope\nfun NavGraphBuilder.slideInComposable(\r\n    route: String,\r\n    composable: @Composable (AnimatedVisibilityScope.(NavBackStackEntry) -> Unit),\r\n) {\r\n    composable(\r\n        route,\r\n        enterTransition = { slideInHorizontally { width -> width } },\r\n        exitTransition = { slideOutHorizontally { width -> -width } },\r\n        popEnterTransition = { slideInHorizontally { width -> -width } },", "choices": [{"text": "\n        popExitTransition = { slideOutHorizontally { width -> -width } },\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/293", "ground_truth": "        popExitTransition = { slideOutHorizontally { width -> width } },\r\n    ) {\r\n        composable(it)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Host.kt"}}
{"prompt": "import androidx.navigation.compose.composable\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.animation.slideInVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.AnimatedVisibilityScope\nfun NavGraphBuilder.slideDownComposable(\r\n    route: String,\r\n    composable: @Composable (AnimatedVisibilityScope.(NavBackStackEntry) -> Unit),\r\n) {\r\n    composable(\r\n        route,\r\n        enterTransition = { slideInVertically { height -> -height } + fadeIn() },", "choices": [{"text": "\n        exitTransition = { slideInVertically { height -> -height } + fadeIn() },\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/294", "ground_truth": "        exitTransition = { slideOutVertically { height -> height } + fadeOut() }\r\n    ) {\r\n        composable(it)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Host.kt"}}
{"prompt": "import androidx.navigation.compose.composable\nimport androidx.navigation.NavGraphBuilder\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.AnimatedVisibilityScope\nfun NavGraphBuilder.fadeComposable(\r\n    route: String,\r\n    composable: @Composable (AnimatedVisibilityScope.(NavBackStackEntry) -> Unit),\r\n) {\r\n    composable(\r\n        route,\r\n        enterTransition = { fadeIn(initialAlpha = 0.1f) },", "choices": [{"text": "\n        exitTransition = { fadeOut(initialAlpha = 0.1f) },\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/295", "ground_truth": "        exitTransition = { fadeOut() }\r\n    ) {\r\n        composable(it)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Host.kt"}}
{"prompt": "import androidx.navigation.compose.NavHost\nimport androidx.navigation.NavHostController\nfun NavHostController.safeNavigate(route: String) {", "choices": [{"text": "\n    if (route == null) {\n        return null;\n    }\n    if (route.startsWith(\"/\")) {\n        return null;\n    }\n    if (route.endsWith(\"/\")) {\n        return null;\n    }\n    if (route.endsWith(\"/\")) {\n        return null;\n    }\n    if (route.endsWith(\"/\")) {\n        return null;\n    }\n    if (route.endsWith(\"/\")) {\n        return null;\n    }\n    if (route.endsWith(\"/\"))"}], "metadata": {"task_id": "Neo-Backup/297", "ground_truth": "    if (currentDestination?.route != route) {\r\n        popBackStack()\r\n        navigate(route)\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Host.kt"}}
{"prompt": "import androidx.navigation.NavHostController\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.pager.PagerState\nimport androidx.compose.foundation.pager.HorizontalPager\nimport androidx.compose.foundation.ExperimentalFoundationApi\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun SlidePager(\r\n    modifier: Modifier = Modifier,\r\n    pageItems: List<NavItem>,\r\n    pagerState: PagerState,\r\n    navController: NavHostController,\r\n) {\r\n    HorizontalPager(modifier = modifier, state = pagerState, beyondBoundsPageCount = 3) { page ->", "choices": [{"text": "\n        navController.slidePager(pageItems, pagerState)\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/298", "ground_truth": "        pageItems[page].ComposablePage(\r\n            navController = navController,\r\n        )\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\ui\\navigation\\Pager.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.items.RootFile\n\r\n@Throws(IOException::class)\r\nfun suCopyFileToDocument(sourcePath: String, targetDir: StorageFile) {\r\n    val sourceFile = RootFile(sourcePath)\r\n    sourceFile.inputStream().use { inputStream ->\r\n        targetDir.createFile(sourceFile.name).let { newFile ->\r\n            newFile.outputStream().use { outputStream ->", "choices": [{"text": "\n                inputStream.copyTo(newFile.name)\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/303", "ground_truth": "                IOUtils.copy(inputStream, outputStream)\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\DocumentUtils.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport com.machiav3lli.backup.items.StorageFile\nimport com.machiav3lli.backup.handler.ShellHandler.ShellCommandFailedException\nimport com.machiav3lli.backup.handler.ShellHandler.Companion.runAsRoot\nimport com.machiav3lli.backup.handler.ShellHandler.Companion.quote\n\r\n@Throws(IOException::class, ShellCommandFailedException::class)\r\nfun suRecursiveCopyFileFromDocument(sourceDir: StorageFile, targetPath: String?) {\r\n    sourceDir.listFiles().forEach {\r\n        with(it) {\r\n            if (!name.isNullOrEmpty()) {\r\n                when {\r\n                    isDirectory ->\r\n                        runAsRoot(\"mkdir -p ${quote(File(targetPath, name!!))}\")\r\n                    isFile      ->\r\n                        suCopyFileFromDocument(it, File(targetPath, name!!).absolutePath)", "choices": [{"text": "\n                }\r\n            } else {\r\n                runAsRoot(\"mkdir -p ${quote(File(targetPath, name!!))}\")\r\n                suCopyFileFromDocument(it, File(targetPath, name!!).absolutePath)\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/305", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\DocumentUtils.kt"}}
{"prompt": "import java.io.IOException\nimport java.io.File\nimport com.topjohnwu.superuser.io.SuFileOutputStream\nimport com.machiav3lli.backup.items.StorageFile\n\r\n@Throws(IOException::class)\r\nfun suCopyFileFromDocument(sourceFile: StorageFile, targetPath: String) {\r\n    SuFileOutputStream.open(targetPath).use { outputStream ->", "choices": [{"text": "\n        outputStream.write(sourceFile.toByteArray())\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/306", "ground_truth": "        sourceFile.inputStream().use { inputStream ->\r\n            IOUtils.copy(inputStream, outputStream)\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\DocumentUtils.kt"}}
{"prompt": "import kotlinx.coroutines.flow.Flow\nfun <T1, T2, T3, T4, T5, T6, R> FlowUtils.combine(\r\n        flow: Flow<T1>,\r\n        flow2: Flow<T2>,\r\n        flow3: Flow<T3>,\r\n        flow4: Flow<T4>,\r\n        flow5: Flow<T5>,\r\n        flow6: Flow<T6>,\r\n        transform: suspend (T1, T2, T3, T4, T5, T6) -> R\r\n    ): Flow<R> = kotlinx.coroutines.flow.combine(\r\n        kotlinx.coroutines.flow.combine(flow, flow2, flow3, ::Triple),\r\n        kotlinx.coroutines.flow.combine(flow4, flow5, flow6, ::Triple)\r\n    ) { t1, t2 ->\r\n        transform(\r\n            t1.first,\r\n            t1.second,\r\n            t1.third,", "choices": [{"text": "\n            t2.first,\r\n            t2.second,\r\n            t2.third,\r\n            t3.first,\r\n            t3.second,\r\n            t3.third,\r\n            t4.first,\r\n            t4.second,\r\n            t4.third,\r\n            t5.first,\r\n            t5.second,\r\n            t5.third,\r\n            t6.first,\r\n            t6.second,\r\n            t6.third,\r\n        )"}], "metadata": {"task_id": "Neo-Backup/312", "ground_truth": "            t2.first,\r\n            t2.second,\r\n            t2.third\r\n        )\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\FlowUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.R\nimport android.content.pm.PackageManager\nfun PackageManager.getInstalledPackageInfosWithPermissions() =\r\n    getInstalledPackages(0).mapNotNull {\r\n        try {\r\n            getPackageInfo(it.packageName, PackageManager.GET_PERMISSIONS)", "choices": [{"text": "\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/314", "ground_truth": "        } catch (e: Throwable) {\r\n            LogsHandler.unexpectedException(e)\r\n            null\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\ItemUtils.kt"}}
{"prompt": "import com.topjohnwu.superuser.Shell\nimport com.machiav3lli.backup.handler.ShellHandler\nimport com.machiav3lli.backup.R\nimport android.app.Activity\nfun Activity.checkRootAccess(showDialogOnError: Boolean = false): Boolean {\r\n    val isRooted = Shell.getShell().isRoot\r\n    if (!isRooted) {\r\n        if (showDialogOnError)\r\n            showFatalUiWarning(getString(R.string.noSu))\r\n        return false\r\n    }\r\n    try {\r\n        ShellHandler.runAsRoot(\"id\")\r\n    } catch (e: ShellHandler.ShellCommandFailedException) {", "choices": [{"text": "\n        if (showDialogOnError)\r\n            showFatalUiWarning(getString(R.string.noSu))\r\n        return false\r\n    }\r\n    return true\r\n}"}], "metadata": {"task_id": "Neo-Backup/317", "ground_truth": "        showFatalUiWarning(getString(R.string.noSu))\r\n        return false\r\n    }\r\n    return true\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PermissionUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport com.machiav3lli.backup.BACKUP_DIRECTORY_INTENT\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nimport android.content.ActivityNotFoundException\nimport android.app.Activity\nfun Activity.requireStorageLocation(activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n    val intent = BACKUP_DIRECTORY_INTENT\r\n    try {\r\n        activityResultLauncher.launch(intent)\r\n    } catch (e: ActivityNotFoundException) {\r\n        showWarning(\r\n            getString(R.string.no_file_manager_title),\r\n            getString(R.string.no_file_manager_message)", "choices": [{"text": "\n        return\r\n    }\r\n    showWarning(\r\n        getString(R.string.no_file_manager_title),\r\n        getString(R.string.no_file_manager_message)\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/318", "ground_truth": "        ) { _: DialogInterface?, _: Int ->\r\n            finishAffinity()\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PermissionUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport com.machiav3lli.backup.OABX\nimport android.provider.Settings\nimport android.os.Build\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\nfun Activity.getStoragePermission() {\r\n    when {\r\n        OABX.minSDK(Build.VERSION_CODES.R) -> {\r\n            val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)\r\n            intent.data = Uri.parse(\"package:$packageName\")\r\n            startActivity(intent)\r\n        }\r\n\r\n        else                               -> {", "choices": [{"text": "\n            val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)\r\n            intent.data = Uri.parse(\"package:$packageName\")\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Neo-Backup/319", "ground_truth": "            requireWriteStoragePermission()\r\n            requireReadStoragePermission()\r\n        }\r\n    }\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PermissionUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport androidx.core.app.ActivityCompat\nimport android.content.pm.PackageManager\nimport android.app.Activity\nimport android.Manifest\nfun Activity.requireContactsPermission() {\r\n    if (\r\n        checkSelfPermission(Manifest.permission.READ_CONTACTS) !=\r\n        PackageManager.PERMISSION_GRANTED\r\n    )\r\n        ActivityCompat.requestPermissions(", "choices": [{"text": "\n            Manifest.permission.READ_CONTACTS,\r\n            PackageManager.PERMISSION_GRANTED\r\n        )\r\n    else\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            Manifest.permission.READ_CONTACTS,\r\n            PackageManager.PERMISSION_GRANTED\r\n        )\r\n}"}], "metadata": {"task_id": "Neo-Backup/323", "ground_truth": "            this,\r\n            arrayOf(Manifest.permission.READ_CONTACTS),\r\n            CONTACTS_PERMISSION\r\n        )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PermissionUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.preferences.pref_pathBackupFolder\nimport com.machiav3lli.backup.OABX\nimport android.provider.DocumentsContract\nimport android.net.Uri\nfun setBackupDir(value: Uri): String {\r\n    val fullUri = DocumentsContract\r\n        .buildDocumentUriUsingTree(value, DocumentsContract.getTreeDocumentId(value))\r\n    pref_pathBackupFolder.value = fullUri.toString()\r\n    //if (OABX.main != null) OABX.main?.refreshPackages()\r\n    //else", "choices": [{"text": "\n    pref_pathBackupFolder.value = fullUri.toString()\r\n    return pref_pathBackupFolder.value\r\n}"}], "metadata": {"task_id": "Neo-Backup/326", "ground_truth": "    CoroutineScope(Dispatchers.IO).launch {\r\n        invalidateBackupLocation()\r\n    }\r\n    return fullUri.toString()\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PrefUtils.kt"}}
{"prompt": "import android.content.Context\nfun Context.getLocaleOfCode(localeCode: String): Locale = when {\r\n    localeCode.isEmpty()      -> resources.configuration.locales[0]\r\n    localeCode.contains(\"-r\") -> Locale(\r\n        localeCode.substring(0, 2),\r\n        localeCode.substring(4)\r\n    )\r\n\r\n    localeCode.contains(\"_\")  -> Locale(\r\n        localeCode.substring(0, 2),", "choices": [{"text": "\n        localeCode.substring(4)\r\n    )\r\n\r\n    localeCode.contains(\"_\")  -> Locale(\r\n        localeCode.substring(0, 2),\r\n        localeCode.substring(4)\r\n    )\r\n\r\n    localeCode.contains(\"_\")  -> Locale(\r\n        localeCode.substring(0, 2),\r\n        localeCode.substring(4)\r\n    )\r\n\r\n    localeCode.contains(\"_\")  -> Locale(\r\n        localeCode.substring(0, 2),\r\n       "}], "metadata": {"task_id": "Neo-Backup/327", "ground_truth": "        localeCode.substring(3)\r\n    )\r\n\r\n    else                      -> Locale(localeCode)\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\PrefUtils.kt"}}
{"prompt": "import kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.CoroutineScope\nimport com.machiav3lli.backup.dbs.entity.Schedule\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun timeLeft(\r\n    schedule: Schedule,\r\n    scope: CoroutineScope,\r\n): MutableStateFlow<Pair<String, String>> {\r\n    val state = MutableStateFlow(calcTimeLeft(schedule))\r\n\r\n    LaunchedEffect(state) {\r\n        delay(updateInterval)\r\n        state.emit(calcTimeLeft(schedule))", "choices": [{"text": "\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule))\r\n        state.emit(calcTimeLeft(schedule"}], "metadata": {"task_id": "Neo-Backup/330", "ground_truth": "    }\r\n\r\n    //traceDebug { state.value.let { \"\u23f3 ${it[0]}  \ud83d\udd52 ${it[1]}\" } }\r\n\r\n    return state\r", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\ScheduleUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.services.AlarmReceiver\nimport com.machiav3lli.backup.R\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\n\nfun createPendingIntent(context: Context, scheduleId: Long): PendingIntent {\r\n    val alarmIntent = Intent(context, AlarmReceiver::class.java).apply {\r\n        action = \"schedule\"\r\n        putExtra(\"scheduleId\", scheduleId)\r\n        addFlags(Intent.FLAG_RECEIVER_FOREGROUND)\r\n    }\r\n    return PendingIntent.getBroadcast(", "choices": [{"text": "        context,\r\n        alarmIntent,\r\n        0,\r\n        PendingIntent.FLAG_UPDATE_CURRENT\r\n    )\r\n}"}], "metadata": {"task_id": "Neo-Backup/332", "ground_truth": "        context,\r\n        scheduleId.toInt(),\r\n        alarmIntent,\r\n        PendingIntent.FLAG_IMMUTABLE\r\n    )\r", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\ScheduleUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.traceTiming\nfun logNanoTiming(pattern: String = \"\", title: String = \"\") {\r\n        if (traceTiming.pref.value) {\r\n            traceTiming { \"\"\"$title -----\\\"\"\" }\r\n            listNanoTiming(pattern).forEach {", "choices": [{"text": "\n                logNanoTiming(pattern, title)\r\n            }\r\n        } else {\r\n            logNanoTiming(pattern, title)\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/344", "ground_truth": "                traceTiming { \"$title $it\" }\r\n            }\r\n            traceTiming { \"\"\"$title -----/\"\"\" }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\TraceUtils.kt"}}
{"prompt": "fun stackFrame(skip: Int = 0): StackTraceElement? {\r\n        return try {\r\n            // >= Java 9  StackWalker.getInstance().walk { stream -> stream.skip(1).findFirst().get() }", "choices": [{"text": "\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/345", "ground_truth": "            Throwable().stackTrace[skip + 1]\r\n        } catch (e: Throwable) {\r\n            null\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\TraceUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Backup\nfun formatBackups(backups: List<Backup>?): String {\r\n        return \"(${backups?.size ?: 0})${\r\n            backups?.map {\r\n                \"${\r\n                    it.backupDate\r\n                }${\r\n                    if (it.persistent) \"\ud83d\udd12\" else \"\"", "choices": [{"text": "\n                }\r\n            }\r\n        }\";\r\n    }"}], "metadata": {"task_id": "Neo-Backup/347", "ground_truth": "                }\"\r\n            }\r\n                ?: \"<null>\"\r\n        }\"\r\n    ", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\TraceUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Backup\n fun formatSortedBackups(backups: List<Backup>?): String {\r\n        return \"(${backups?.size ?: 0})${\r\n            backups?.map {\r\n                \"${\r\n                    it.backupDate\r\n                }${\r\n                    if (it.persistent) \"\ud83d\udd12\" else \"\"\r\n                }\"", "choices": [{"text": "\n            }\r\n        }\"\r\n    }"}], "metadata": {"task_id": "Neo-Backup/348", "ground_truth": "            }\r\n                ?.sortedDescending()\r\n                ?: \"<null>\"\r\n        }\"\r\n   ", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\TraceUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport android.content.res.Resources\nfun Resources.Theme.applyAccentStyle() = applyStyle(\r\n    when (stylePrimary) {\r\n        1    -> R.style.Accent1\r\n        2    -> R.style.Accent2\r\n        3    -> R.style.Accent3\r\n        4    -> R.style.Accent4\r\n        5    -> R.style.Accent5\r\n        6    -> R.style.Accent6", "choices": [{"text": "\n        7    -> R.style.Accent7\r\n        8    -> R.style.Accent8\r\n        9    -> R.style.Accent9\r\n        10    -> R.style.Accent10\r\n        11    -> R.style.Accent11\r\n        12    -> R.style.Accent12\r\n        13    -> R.style.Accent13\r\n        14    -> R.style.Accent14\r\n        15    -> R.style.Accent15\r\n        16    -> R.style.Accent"}], "metadata": {"task_id": "Neo-Backup/355", "ground_truth": "        7    -> R.style.Accent7\r\n        8    -> R.style.Accent8\r\n        else -> R.style.Accent0\r\n    }, true\r\n)", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\UIUtils.kt"}}
{"prompt": "import com.machiav3lli.backup.R\nimport android.content.res.Resources\nfun Resources.Theme.applySecondaryStyle() = applyStyle(\r\n    when (styleSecondary) {\r\n        1    -> R.style.Secondary1\r\n        2    -> R.style.Secondary2\r\n        3    -> R.style.Secondary3\r\n        4    -> R.style.Secondary4\r\n        5    -> R.style.Secondary5\r\n        6    -> R.style.Secondary6", "choices": [{"text": "\n        7    -> R.style.Secondary7\r\n        8    -> R.style.Secondary8\r\n        9    -> R.style.Secondary9\r\n        10    -> R.style.Secondary10\r\n        11    -> R.style.Secondary11\r\n        12    -> R.style.Secondary12\r\n        13    -> R.style.Secondary13\r\n        14    -> R.style.Secondary14\r\n        15    -> R.style.Secondary15\r\n        16    -> R.style.Secondary16\r\n        17    -> R.style"}], "metadata": {"task_id": "Neo-Backup/356", "ground_truth": "        7    -> R.style.Secondary7\r\n        8    -> R.style.Secondary8\r\n        else -> R.style.Secondary0\r\n    }, true\r\n)", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\UIUtils.kt"}}
{"prompt": "import timber.log.Timber\nimport android.content.Context\nimport android.app.Activity\nfun Context.restartApp() {\r\n    Timber.w(\r\n        \"restarting application\"\r\n    )\r\n    startActivity(", "choices": [{"text": "\n        \"restarting application\",\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r"}], "metadata": {"task_id": "Neo-Backup/357", "ground_truth": "        Intent.makeRestartActivityTask(\r\n            ComponentName(this, MainActivityX::class.java)\r\n        )\r\n    )\r\n}", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\utils\\UIUtils.kt"}}
{"prompt": "fun uninstallApp() {", "choices": [{"text": "\n    if (mActivity == null) {\n        return false;\n    }\n\n    if (mActivity.getSupportFragmentManager() == null) {\n        return false;\n    }\n\n    if (mActivity.getSupportFragmentManager() == null) {\n        return false;\n    }\n\n    if (mActivity.getSupportFragmentManager() == null) {\n        return false;\n    }\n\n    if (mActivity.getSupportFragmentManager() == null) {\n        return false;\n    }\n\n    return true;\n}"}], "metadata": {"task_id": "Neo-Backup/361", "ground_truth": "        viewModelScope.launch {\r\n            uninstall()\r\n            refreshNow.value = true\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\AppSheetViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\nprivate suspend fun delete(backup: Backup) {\r\n        withContext(Dispatchers.IO) {\r\n            thePackage.value?.let { pkg ->\r\n                pkg.deleteBackup(backup)\r\n                if (!pkg.isInstalled && pkg.backupList.isEmpty()) {\r\n                    database.getAppInfoDao().deleteAllOf(pkg.packageName)", "choices": [{"text": "\n                } else {\r\n                    database.getAppInfoDao().deleteAllOf(pkg.packageName)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/365", "ground_truth": "                    dismissNow.value = true\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\AppSheetViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.items.Package\nimport com.machiav3lli.backup.dbs.entity.Backup\nprivate suspend fun deleteAll() {\r\n        withContext(Dispatchers.IO) {\r\n            thePackage.value?.let { pkg ->\r\n                pkg.deleteAllBackups()\r\n                if (!pkg.isInstalled && pkg.backupList.isEmpty()) {\r\n                    database.getAppInfoDao().deleteAllOf(pkg.packageName)", "choices": [{"text": "\n                } else {\r\n                    database.getAppInfoDao().deleteAllOf(pkg.packageName)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/367", "ground_truth": "                    dismissNow.value = true\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\AppSheetViewModel.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.AppExtras\nfun setExtras(appExtras: AppExtras?) {", "choices": [{"text": "\n    if (appExtras == null) {\n        return null;\n    }\n    this.appExtras = appExtras;\n    return this;\n}"}], "metadata": {"task_id": "Neo-Backup/368", "ground_truth": "        viewModelScope.launch {\r\n            replaceExtras(appExtras)\r\n            refreshNow.value = true\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\AppSheetViewModel.kt"}}
{"prompt": "import com.machiav3lli.backup.dbs.entity.Schedule\nval _exportsList\nval exportsList\nval handler\nfun exportSchedules() {", "choices": [{"text": "_exportsList = new ArrayList<Schedule>();\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add(new Schedule());\n    _exportsList.add("}], "metadata": {"task_id": "Neo-Backup/376", "ground_truth": "        viewModelScope.launch {\r\n            export()\r\n            refreshList()\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\ExportsViewModel.kt"}}
{"prompt": "import com.machiav3lli.backup.items.StorageFile\nfun deleteExport(exportFile: StorageFile) {", "choices": [{"text": "\n    if (exportFile == null) {\n        return null;\n    }\n    if (exportFile.getPath() == null) {\n        return null;\n    }\n    try {\n        FileUtils.deleteDirectory(exportFile.getPath());\n    } catch (e) {\n        return null;\n    }\n    return null;\n}"}], "metadata": {"task_id": "Neo-Backup/378", "ground_truth": "        viewModelScope.launch {\r\n            delete(exportFile)\r\n            refreshList()\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\ExportsViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.dbs.entity.Schedule\nprivate suspend fun import(export: Schedule) {\r\n        withContext(Dispatchers.IO) {\r\n            database.insert(\r\n                Schedule.Builder() // Set id to 0 to make the database generate a new id\r\n                    .withId(0)", "choices": [{"text": "\n                   .build()\r\n            );\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/381", "ground_truth": "                    .import(export)\r\n                    .build()\r\n            )\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\ExportsViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.machiav3lli.backup.items.Log\nimport androidx.lifecycle.viewModelScope\nfun deleteLog(log: Log) {\r\n        viewModelScope.launch {", "choices": [{"text": "\n            log.delete()\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/385", "ground_truth": "            delete(log)\r\n            logsList.remove(log)\r\n            //refreshList()\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\LogViewModel.kt"}}
{"prompt": "import kotlin.reflect.*\nimport kotlinx.coroutines.runBlocking\nimport com.machiav3lli.backup.utils.TraceUtils.trace\nimport com.machiav3lli.backup.traceFlows\nfun retriggerFlowsForUI() {\r\n        traceFlows { \"******************** retriggerFlowsForUI\" }\r\n        runBlocking {\r\n            val saved = searchQuery.value\r\n            // in case same value isn't triggering\r\n            val retrigger = saved + \"<RETRIGGERING>\"\r\n            searchQuery.value = retrigger\r\n            // wait until we really get that value\r\n            while (searchQuery.value != retrigger)", "choices": [{"text": "\n                searchQuery.value = saved + \"<RETRIGGERING>\"\r\n        }\r\n        assertThat(searchQuery.value).isEqualTo(retrigger)\r\n    }"}], "metadata": {"task_id": "Neo-Backup/388", "ground_truth": "                yield()\r\n            // now switch back\r\n            searchQuery.value = saved\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\MainViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.machiav3lli.backup.items.Package\nimport androidx.lifecycle.viewModelScope\nfun updatePackage(packageName: String) {\r\n        viewModelScope.launch {", "choices": [{"text": "\n            Package.updatePackage(packageName)\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/389", "ground_truth": "            packageMap.value[packageName]?.let {\r\n                updateDataOf(packageName)\r\n            }\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\MainViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.dbs.entity.Blocklist\nimport com.machiav3lli.backup.PACKAGES_LIST_GLOBAL_ID\nprivate suspend fun insertIntoBlocklistDB(packageName: String) {\r\n        withContext(Dispatchers.IO) {\r\n            db.getBlocklistDao().insert(\r\n                Blocklist.Builder()\r\n                    .withId(0)\r\n                    .withBlocklistId(PACKAGES_LIST_GLOBAL_ID)", "choices": [{"text": "\n                   .withPackageName(packageName)\r\n                   .build()\r\n            );\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/394", "ground_truth": "                    .withPackageName(packageName)\r\n                    .build()\r\n            )\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\MainViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.machiav3lli.backup.dbs.entity.Schedule\nprivate suspend fun add(withSpecial: Boolean) {\r\n        withContext(Dispatchers.IO) {\r\n            database.insert(\r\n                Schedule.Builder() // Set id to 0 to make the database generate a new id\r\n                    .withId(0)", "choices": [{"text": "\n                   .withSpecial(withSpecial)\r\n                   .build()\r\n            );\r\n        }\r\n    }"}], "metadata": {"task_id": "Neo-Backup/399", "ground_truth": "                    .withSpecial(withSpecial)\r\n                    .build()\r\n            )\r\n        }\r\n    }", "fpath": "Neo-Backup\\app\\src\\main\\java\\com\\machiav3lli\\backup\\viewmodels\\SchedulerViewModel.kt"}}
{"prompt": "var altimeter IAltimeter\nvar gps IGPS\nvar barometer IBarometer\n override fun onPause() {", "choices": [{"text": "\n    super.onPause()\n    this.setVisibility(View.GONE)\n}"}], "metadata": {"task_id": "Trail-Sense/5", "ground_truth": "        super.onPause()\r\n        stopAltimeter()\r\n        updateTimer.stop()\r\n        overridePopulationRunner.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "var altimeterStarted\nvar altimeter IAltimeter\nvar forceCalibrationPref Preference\n private fun startAltimeter() {\r\n        if (altimeterStarted) {", "choices": [{"text": "\n            return;\r\n        }\r\n\r\n        altimeterStarted = true;\r\n        forceCalibrationPref = PreferenceManager.getDefaultSharedPreferences(this).getBoolean(\"forceCalibration\", false);\r\n    }"}], "metadata": {"task_id": "Trail-Sense/6", "ground_truth": "            return\r\n        }\r\n        altimeterStarted = true\r\n        altimeter.start(this::updateAltitude)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateAltitudeOverride() {\r\n        inBackground {\r\n            onDefault {\r\n                overridePopulationRunner.replace {\r\n                    altimeter.read()", "choices": [{"text": "\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/8", "ground_truth": "                    prefs.altitudeOverride = altimeter.altitude\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.observe\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        observe(weatherSubsystem.weatherChanged) {\r\n            inBackground {\r\n                runner.replace {\r\n                    history = weatherSubsystem.getHistory()\r\n                    uncalibratedHistory = weatherSubsystem.getRawHistory()\r\n                    onMain {\r\n                        updateChart()", "choices": [{"text": "\n                    }\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/13", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateBarometerFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(R.xml.compass_calibration, rootKey)\r\n\r\n        setIconColor(Resources.androidTextColorSecondary(requireContext()))\r\n\r\n        prefs = UserPreferences(requireContext())\r\n        sensorService = SensorService(requireContext())\r\n        hasCompass = sensorService.hasCompass()", "choices": [{"text": "\n        if (hasCompass) {\r\n            prefs.setCompass(true)\r\n        } else {\r\n            prefs.setCompass(false)\r\n        }\r\n        super.onCreatePreferences(savedInstanceState, rootKey)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/17", "ground_truth": "\r\n        compass = sensorService.getCompass()\r\n        gps = sensorService.getGPS()\r\n        bindPreferences()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()", "choices": [{"text": "_onResume()\r\n        super.onResume()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/18", "ground_truth": "        startCompass()\r\n        if (!gps.hasValidReading) {\r\n            gps.start(this::onLocationUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()", "choices": [{"text": "_onResume()\r\n        super.onResume()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/26", "ground_truth": "        if (gps.hasValidReading) {\r\n            update()\r\n        }\r\n        startGPS()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.overrides.CachedGPS\nimport com.kylecorry.trail_sense.shared.sensors.CustomGPS\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nprivate fun getRealGPS(): IGPS {\r\n        return when {\r\n            shouldUseRealGPS() -> {\r\n                CustomGPS(requireContext())\r\n            }\r\n            shouldUseCachedGPS() -> {\r\n                CachedGPS(requireContext())\r\n            }", "choices": [{"text": "\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/31", "ground_truth": "            else -> {\r\n                OverrideGPS(requireContext())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "val loopTime\nval tMin\nvar arrowColor Int\n private fun loop() {", "choices": [{"text": "\n    int i = 0;\n    for (int j = 0; j < arrowColor.length; j++) {\n        if (arrowColor[j] == i) {\n            return true;\n        }\n    }\n    return false;\n}"}], "metadata": {"task_id": "Trail-Sense/37", "ground_truth": "        noFill()\r\n        stroke(Color.BLACK)\r\n        strokeWeight(dp(5f))\r\n        path(figure8Path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CompassCalibrationView.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.content.Context\nfun sized(\r\n            context: Context,\r\n            width: Int,\r\n            height: Int\r\n        ): CompassCalibrationView {\r\n            val view = CompassCalibrationView(context)\r\n            view.layoutParams = ViewGroup.LayoutParams(", "choices": [{"text": "\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP"}], "metadata": {"task_id": "Trail-Sense/40", "ground_truth": "                width,\r\n                height\r\n            )\r\n            return view\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CompassCalibrationView.kt"}}
{"prompt": "import androidx.core.text.bold\nimport android.text.SpannableStringBuilder\nprivate fun SpannableStringBuilder.title(title: String) {\r\n        bold {", "choices": [{"text": "\n            super.title(title)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/42", "ground_truth": "            scale(titleScale) {\r\n                appendLine(title)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\ImproveAccuracyAlerter.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.accelerometer.Accelerometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.Quality\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_ACCELEROMETER)) {\r\n            return listOf(DiagnosticCode.AccelerometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {", "choices": [{"text": "\n            return listOf(DiagnosticCode.AccelerometerAvailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Low) {\r\n            return listOf(DiagnosticCode.AccelerometerLow)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Medium) {\r\n            return listOf(DiagnosticCode.AccelerometerMedium)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.High) {\r\n            return listOf(DiagnosticCode."}], "metadata": {"task_id": "Trail-Sense/43", "ground_truth": "            return listOf(DiagnosticCode.AccelerometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AccelerometerDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.permissions.SpecialPermission\nimport com.kylecorry.andromeda.permissions.Permissions\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Permissions.hasPermission(context, SpecialPermission.SCHEDULE_EXACT_ALARMS)) {", "choices": [{"text": "(context, SpecialPermission.SCHEDULE_EXACT_ALARMS)) {\r\n            return Collections.emptyList();\r\n        }\r\n        return super.scan(context, SpecialPermission.SCHEDULE_EXACT_ALARMS);\r\n    }"}], "metadata": {"task_id": "Trail-Sense/44", "ground_truth": "            return listOf(DiagnosticCode.ExactAlarmNoPermission)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AlarmDiagnostic.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.UserPreferences\noverride fun scan(): List<DiagnosticCode> {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.altimeterMode == UserPreferences.AltimeterMode.Override) {", "choices": [{"text": "\n            prefs.altimeterMode = UserPreferences.AltimeterMode.Override\r\n        }\r\n        return prefs.altimeterMode == UserPreferences.AltimeterMode.Override? null : new ArrayList<DiagnosticCode>(prefs.altimeterMode)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/45", "ground_truth": "            return listOf(DiagnosticCode.AltitudeOverridden)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AltimeterDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasBarometer(context)) {\r\n            return listOf(DiagnosticCode.BarometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {", "choices": [{"text": "\n            return listOf(DiagnosticCode.BarometerAvailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Low) {\r\n            return listOf(DiagnosticCode.BarometerLow)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Medium) {\r\n            return listOf(DiagnosticCode.BarometerMedium)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.High) {\r\n            return listOf(DiagnosticCode.Barometer"}], "metadata": {"task_id": "Trail-Sense/46", "ground_truth": "            return listOf(DiagnosticCode.BarometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\BarometerDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.permissions.Permissions\nimport android.content.pm.PackageManager\nimport android.annotation.SuppressLint\n @SuppressLint(\"UnsupportedChromeOsCameraSystemFeature\")\r\n    override fun scan(): List<DiagnosticCode> {\r\n        val issues = mutableListOf<DiagnosticCode>()\r\n\r\n        if (!Permissions.isCameraEnabled(context)) {\r\n            issues.add(DiagnosticCode.CameraNoPermission)\r\n        }\r\n\r\n        if (!context.packageManager.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {", "choices": [{"text": "\n            issues.add(DiagnosticCode.CameraPermissionDenied)\r\n        }\r\n\r\n        return issues\r\n    }"}], "metadata": {"task_id": "Trail-Sense/47", "ground_truth": "            issues.add(DiagnosticCode.CameraUnavailable)\r\n        }\r\n\r\n        return issues\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\CameraDiagnostic.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.SpecialPermission\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.os.Build\nprivate fun alarmAndReminderAction(): Action? {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S){\r\n            Action(getString(R.string.settings)) {\r\n                Permissions.requestPermission(context, SpecialPermission.SCHEDULE_EXACT_ALARMS)", "choices": [{"text": "\n                Permissions.requestPermission(context, SpecialPermission.REMINDER_EXACT_ALARMS)\r\n            }\r\n        } else {\r\n            Action(getString(R.string.settings)) {\r\n                Permissions.requestPermission(context, SpecialPermission.REMINDER_EXACT_ALARMS)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/49", "ground_truth": "            }\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.annotation.IdRes\nprivate fun navigateAction(\r\n        @IdRes to: Int,\r\n        title: String = getString(R.string.settings)", "choices": [{"text": "\n        title: String = getString(R.string.settings)\r\n    ) {\r\n        Toast.makeText(getApplicationContext(), title, Toast.LENGTH_SHORT).show();\r\n    }"}], "metadata": {"task_id": "Trail-Sense/53", "ground_truth": "    ): Action {\r\n        return Action(title) {\r\n            navigation.navigate(to)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.infrastructure.FlashlightSubsystem\noverride fun scan(): List<DiagnosticCode> {\r\n        val issues = mutableListOf<DiagnosticCode>()\r\n\r\n        if (!FlashlightSubsystem.getInstance(context).isAvailable()) {", "choices": [{"text": "\n            issues.add(DiagnosticCode.ERROR)\r\n        } else {\r\n            issues.add(DiagnosticCode.SUCCESS)\r\n        }\r\n\r\n        return issues\r\n    }"}], "metadata": {"task_id": "Trail-Sense/56", "ground_truth": "            issues.add(DiagnosticCode.FlashlightUnavailable)\r\n        }\r\n\r\n        return issues\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\FlashlightDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.Sensors\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_LIGHT)) {", "choices": [{"text": "\n            return Collections.emptyList();\r\n        }\r\n        return Sensors.getSensorList(context, Sensor.TYPE_LIGHT);\r\n    }"}], "metadata": {"task_id": "Trail-Sense/57", "ground_truth": "            return listOf(DiagnosticCode.LightSensorUnavailable)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\LightSensorDiagnostic.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport com.kylecorry.andromeda.sense.magnetometer.Magnetometer\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!SensorService(context).hasCompass()) {\r\n            return listOf(DiagnosticCode.MagnetometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {", "choices": [{"text": "\n            return listOf(DiagnosticCode.MagnetometerAvailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Low) {\r\n            return listOf(DiagnosticCode.MagnetometerLow)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Medium) {\r\n            return listOf(DiagnosticCode.MagnetometerMedium)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.High) {\r\n            return listOf(DiagnosticCode."}], "metadata": {"task_id": "Trail-Sense/58", "ground_truth": "            return listOf(DiagnosticCode.MagnetometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\MagnetometerDiagnostic.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_STEP_COUNTER)) {\r\n            return listOf(DiagnosticCode.PedometerUnavailable)\r\n        }\r\n\r\n        if (!Permissions.canRecognizeActivity(context)) {", "choices": [{"text": "\n            return listOf(DiagnosticCode.PedometerUnavailable)\r\n        }\r\n\r\n        return listOf(DiagnosticCode.PedometerAvailable)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/60", "ground_truth": "            return listOf(DiagnosticCode.PedometerNoPermission)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\PedometerDiagnostic.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.location.GPS\nimport android.hardware.Sensor\nprivate fun updateGPS() {\r\n        sensorDetailsMap[\"gps\"] = SensorDetails(\r\n            getString(R.string.gps),\r\n            \"${formatService.formatLocation(gps.location)}\\n${gps.satellites ?: 0} ${getString(R.string.satellites)}\",", "choices": [{"text": "\n            getString(R.string.satellites)\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/64", "ground_truth": "            getGPSStatus(),\r\n            getGPSColor(),\r\n            R.drawable.satellite\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.Quality\nprivate fun getGPSCacheQuality(): Quality {\r\n        return if (cachedGPS.location == Coordinate.zero) {", "choices": [{"text": "\n            return cachedGPS.quality;\r\n        } else {\r\n            return cachedGPS.quality;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/72", "ground_truth": "            Quality.Poor\r\n        } else {\r\n            Quality.Good\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.sensors.Quality\nprivate fun getAltimeterCacheQuality(): Quality {\r\n        return if (cachedAltimeter.altitude == 0f) {", "choices": [{"text": "\n            cachedAltimeter.altitude = 0f;\r\n        } else {\r\n            cachedAltimeter.altitude = 1f;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/74", "ground_truth": "            Quality.Poor\r\n        } else {\r\n            Quality.Good\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "import androidx.core.view.updateLayoutParams\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.ViewCompat\nimport androidx.constraintlayout.widget.ConstraintLayout.LayoutParams\nimport android.view.ViewGroup\nprivate fun bindLayoutInsets() {\r\n        ViewCompat.setOnApplyWindowInsetsListener(binding.root) { v, windowInsets ->\r\n            val insets = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.updateLayoutParams<ViewGroup.MarginLayoutParams> {\r\n                topMargin = insets.top", "choices": [{"text": "\n                bottomMargin = insets.bottom\r\n                leftMargin = insets.left\r\n                rightMargin = insets.right\r\n            }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/82", "ground_truth": "                bottomMargin = insets.bottom\r\n            }\r\n            WindowInsetsCompat.CONSUMED\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putInt(\"page\", binding.bottomNavigation.selectedItemId)\r\n        navController.currentBackStackEntry?.arguments?.let {\r\n            outState.putBundle(\"navigation_arguments\", it)", "choices": [{"text": "\n        outState.putInt(\"page\", binding.bottomNavigation.selectedItemId)\r\n        navController.currentBackStackEntry?.arguments?.let {\r\n            outState.putBundle(\"navigation_arguments\", it)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/88", "ground_truth": "        }\r\n        navController.currentDestination?.id?.let {\r\n            outState.putInt(\"navigation\", it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.astronomy.domain.AstronomyService\nimport com.kylecorry.trail_sense.shared.sensors.LocationSubsystem\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.ColorTheme\nimport android.graphics.Color\nprivate fun sunriseSunsetTheme(): ColorTheme {\r\n        val astronomyService = AstronomyService()\r\n        val location = LocationSubsystem.getInstance(this).location\r\n        if (location == Coordinate.zero) {\r\n            return ColorTheme.System\r\n        }\r\n        val isSunUp = astronomyService.isSunUp(location)\r\n        return if (isSunUp) {", "choices": [{"text": "\n            return ColorTheme.Sunrise\r\n        } else {\r\n            return ColorTheme.Sunset\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/89", "ground_truth": "            ColorTheme.Light\r\n        } else {\r\n            ColorTheme.Dark\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "private fun onVolumePressed(isVolumeUp: Boolean, isButtonPressed: Boolean): Boolean {\r\n        if (!shouldOverrideVolumePress()) {\r\n            return false\r\n        }\r\n\r\n        val action =\r\n            (if (isVolumeUp) getVolumeUpAction() else getVolumeDownAction()) ?: return false\r\n\r\n        if (isButtonPressed) {\r\n            action.onButtonPress()\r\n        } else {", "choices": [{"text": "\n            action.onVolumeDown()\r\n        }\r\n\r\n        return true\r\n    }"}], "metadata": {"task_id": "Trail-Sense/92", "ground_truth": "            action.onButtonRelease()\r\n        }\r\n\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.VolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.volumeactions.FlashlightToggleVolumeAction\nimport com.kylecorry.trail_sense.tools.clinometer.volumeactions.ClinometerLockVolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.ui.FragmentToolFlashlight\nimport com.kylecorry.trail_sense.tools.clinometer.ui.ClinometerFragment\nprivate fun getVolumeDownAction(): VolumeAction? {\r\n\r\n        val fragment = getFragment()\r\n        if (userPrefs.clinometer.lockWithVolumeButtons && fragment is ClinometerFragment) {\r\n            return ClinometerLockVolumeAction(fragment)\r\n        }\r\n\r\n\r\n        if (userPrefs.flashlight.toggleWithVolumeButtons) {\r\n            return FlashlightToggleVolumeAction(\r\n                this,\r\n                if (fragment is FragmentToolFlashlight) fragment else null", "choices": [{"text": "\n            )\r\n        }\r\n\r\n        if (fragment is FragmentToolFlashlight) {\r\n            return FlashlightToggleVolumeAction(\r\n                this,\r\n                if (fragment is FragmentToolFlashlight) fragment else null\r\n            )\r\n        }\r\n\r\n        return null\r\n    }"}], "metadata": {"task_id": "Trail-Sense/94", "ground_truth": "            )\r\n        }\r\n\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.VolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.volumeactions.FlashlightToggleVolumeAction\nimport com.kylecorry.trail_sense.tools.clinometer.volumeactions.ClinometerLockVolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.ui.FragmentToolFlashlight\nimport com.kylecorry.trail_sense.tools.clinometer.ui.ClinometerFragment\nprivate fun getVolumeUpAction(): VolumeAction? {\r\n        val fragment = getFragment()\r\n        if (userPrefs.clinometer.lockWithVolumeButtons && fragment is ClinometerFragment) {\r\n            return ClinometerLockVolumeAction(fragment)\r\n        }\r\n\r\n        if (userPrefs.flashlight.toggleWithVolumeButtons) {\r\n            return FlashlightToggleVolumeAction(\r\n                this,\r\n                if (fragment is FragmentToolFlashlight) fragment else null", "choices": [{"text": "\n            )\r\n        }\r\n\r\n        return null\r\n    }"}], "metadata": {"task_id": "Trail-Sense/95", "ground_truth": "            )\r\n        }\r\n\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "var instance AppDatabase?\n fun close(){", "choices": [{"text": "\n    if (mAppDatabase!= null) {\n        mAppDatabase.close();\n        mAppDatabase = null;\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/98", "ground_truth": "            synchronized(this) {\r\n                instance?.close()\r\n                instance = null\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\AppDatabase.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.weather.infrastructure.persistence.WeatherRepo\nimport com.kylecorry.trail_sense.tools.lightning.infrastructure.persistence.LightningRepo\nimport com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudRepo\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.persistence.PathService\nimport android.content.Context\noverride suspend fun doWork(): Result = withContext(Dispatchers.IO) {\r\n\r\n        val cleanables: List<ICleanable> = listOf(\r\n            PathService.getInstance(context),\r\n            WeatherRepo.getInstance(context),\r\n            CloudRepo.getInstance(context),\r\n            LightningRepo.getInstance(context)\r\n        )\r\n\r\n        for (repo in cleanables) {\r\n            repo.clean()\r\n        }", "choices": [{"text": "\n        return Result.success()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/100", "ground_truth": "\r\n        DeleteTempFilesCommand(context).execute()\r\n\r\n        Result.success()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\RepoCleanupWorker.kt"}}
{"prompt": "import com.kylecorry.trail_sense.databinding.ActivityOnboardingBinding\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityOnboardingBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        load(pageIdx)", "choices": [{"text": "\n        super.onCreate(savedInstanceState)\r\n        binding.setContentView(R.layout.activity_onboarding)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/104", "ground_truth": "        binding.nextButton.setOnClickListener {\r\n            load(pageIdx + 1)\r\n        }\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\onboarding\\OnboardingActivity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport android.os.Bundle\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n        pageIdx = savedInstanceState.getInt(\"page\", 0)", "choices": [{"text": "\n        super.onRestoreInstanceState(savedInstanceState)\r\n        pageIdx = savedInstanceState.getInt(\"page\", 0)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/106", "ground_truth": "        if (pageIdx >= pages.size || pageIdx < 0) {\r\n            pageIdx = 0\r\n        }\r\n        load(pageIdx)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\onboarding\\OnboardingActivity.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.system.Package\nfun enable() {\r\n        Package.setComponentEnabled(", "choices": [{"text": "\n            \"com.kylecorry.andromeda.core.system.Package\", \"com.kylecorry.andromeda.core.system.Package\", \"com.kylecorry.andromeda.core.system.Package\", \"com.kylecorry.andromeda.core.system.Package\", \"com.kylecorry.andromeda.core.system.Package\", \"com.kylecorry.andromeda.core.system.Package\", \"com.kylecorry.andromeda"}], "metadata": {"task_id": "Trail-Sense/112", "ground_truth": "            context,\r\n            component,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\StartOnBootController.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.system.Package\nfun disable() {\r\n        Package.setComponentEnabled(", "choices": [{"text": "\n            \"com.kylecorry.andromeda.core.system.Package.disable\",\r\n            true\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/113", "ground_truth": "            context,\r\n            component,\r\n            false\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\StartOnBootController.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nprivate fun startPedometer(context: Context) {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.pedometer.isEnabled) {", "choices": [{"text": "\n            prefs.pedometer.setEnabled(true)\r\n        } else {\r\n            prefs.pedometer.setEnabled(false)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/118", "ground_truth": "            StepCounterService.start(context)\r\n        } else {\r\n            StepCounterService.stop(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherUpdateScheduler\nimport com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherMonitorService\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nprivate fun startWeatherMonitoring(context: Context) {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.weather.shouldMonitorWeather) {\r\n            if (!WeatherMonitorService.isRunning) {\r\n                WeatherUpdateScheduler.start(context)", "choices": [{"text": "\n            } else {\r\n                WeatherMonitorService.start(context)\r\n            }\r\n        } else {\r\n            WeatherUpdateScheduler.start(context)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/119", "ground_truth": "            }\r\n        } else {\r\n            WeatherUpdateScheduler.stop(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.infrastructure.subsystem.BacktrackSubsystem\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.services.BacktrackService\nimport com.kylecorry.trail_sense.shared.FeatureState\nimport android.content.Context\nprivate suspend fun startBacktrack(context: Context) {\r\n        val backtrack = BacktrackSubsystem.getInstance(context)\r\n        if (backtrack.getState() == FeatureState.On) {\r\n            if (!BacktrackService.isRunning) {\r\n                backtrack.enable(false)", "choices": [{"text": "\n            } else {\r\n                backtrack.disable(true)\r\n            }\r\n        } else {\r\n            backtrack.enable(false)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/120", "ground_truth": "            }\r\n        } else {\r\n            backtrack.disable()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "fun getInstance(): PreferenceMigrator {\r\n            return synchronized(staticLock) {\r\n                if (instance == null) {", "choices": [{"text": "\n                    instance = new PreferenceMigrator();\r\n                }\r\n                return instance;\r\n            }"}], "metadata": {"task_id": "Trail-Sense/122", "ground_truth": "                    instance = PreferenceMigrator()\r\n                }\r\n                instance!!\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\migrations\\PreferenceMigrator.kt"}}
{"prompt": "import com.kylecorry.andromeda.fragments.AndromedaPreferenceFragment\nimport com.kylecorry.andromeda.core.tryOrNothing\nimport androidx.preference.Preference\nimport androidx.annotation.IdRes\nfun AndromedaPreferenceFragment.navigateOnClick(pref: Preference?, @IdRes action: Int) {\r\n    pref?.setOnPreferenceClickListener {\r\n        tryOrNothing {", "choices": [{"text": "\n            pref.navigate(action);\r\n        } catch (e) {\r\n            Log.e(e);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/125", "ground_truth": "            findNavController().navigateWithAnimation(action)\r\n        }\r\n        true\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\PreferenceFragmentExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\nfun plot(\r\n        data: List<Reading<Pressure>>,\r\n        raw: List<Reading<Pressure>>? = null", "choices": [{"text": "\n    ) {\r\n        if (data == null) {\r\n            data = [];\r\n        }\r\n        if (raw == null) {\r\n            raw = [];\r\n        }\r\n        for (var i = 0; i < data.length; i++) {\r\n            raw[i] = data[i].pressure;\r\n        }\r\n        for (var i = 0; i < raw.length; i++) {\r\n            data[i].pressure = raw[i];\r\n        }\r\n        return data;\r\n   "}], "metadata": {"task_id": "Trail-Sense/127", "ground_truth": "    ) {\r\n        this.data = data\r\n        this.raw = raw\r\n        chart?.plot(data, raw)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\PressureChartPreference.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.thermometer.ThermometerSource\nprivate fun displayErrors(source: ThermometerSource) {\r\n        if (source == ThermometerSource.Historic && isLocationUnset()) {", "choices": [{"text": "\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/141", "ground_truth": "            showLocationUnsetError()\r\n        } else {\r\n            hideLocationUnsetError()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\ThermometerSettingsFragment.kt"}}
{"prompt": "var hasRun\n override fun show() {", "choices": [{"text": "\n    this.setVisibility(View.VISIBLE);\n    this.setText(getString(R.string.app_name));\n    this.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            Toast.makeText(this, getString(R.string.app_name), Toast.LENGTH_SHORT).show();\n        }\n    });\n}"}], "metadata": {"task_id": "Trail-Sense/148", "ground_truth": "        if (!hasRun) {\r\n            loadingIndicator.show()\r\n            hasRun = true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\alerts\\ResettableLoadingIndicator.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.SolMath\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nfun getPixelLinear(\r\n        bearing: Float,\r\n        azimuth: Float,\r\n        altitude: Float,\r\n        inclination: Float,\r\n        size: Size,\r\n        fov: Size\r\n    ): PixelCoordinate {\r\n\r\n        val newBearing = SolMath.deltaAngle(azimuth, bearing)\r\n        val newAltitude = altitude - inclination\r\n\r\n        return synchronized(rectLock) {\r\n            rect.right = size.width\r\n            rect.bottom = size.height\r\n            linear.getPixel(\r\n                newBearing,\r\n                newAltitude,\r\n                rect,", "choices": [{"text": "                fov\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/151", "ground_truth": "                fov,\r\n                null\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.domain.mapper.CameraAnglePixelMapper\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.opengl.Matrix\nimport android.graphics.RectF\nfun getPixel(\r\n        bearing: Float,\r\n        elevation: Float,\r\n        distance: Float,\r\n        rotationMatrix: FloatArray,\r\n        rect: RectF,\r\n        fov: Size,\r\n        mapper: CameraAnglePixelMapper\r\n    ): PixelCoordinate {\r\n        val d = distance.coerceIn(minDistance, maxDistance)\r\n\r\n        return getPixel(\r\n            toEastNorthUp(bearing, elevation, d),\r\n            rotationMatrix,", "choices": [{"text": "\n            rect,\r\n            fov,\r\n            mapper\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/152", "ground_truth": "            rect,\r\n            fov,\r\n            mapper\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.domain.mapper.CameraAnglePixelMapper\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.Vector3\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.opengl.Matrix\nimport android.graphics.RectF\nfun getPixel(\r\n        enuCoordinate: Vector3,\r\n        rotationMatrix: FloatArray,\r\n        rect: RectF,\r\n        fov: Size,\r\n        mapper: CameraAnglePixelMapper\r\n    ): PixelCoordinate {\r\n        val world = enuToAr(enuCoordinate, rotationMatrix)\r\n\r\n        return mapper.getPixel(", "choices": [{"text": "\n            enuCoordinate,\r\n            world,\r\n            rect,\r\n            fov\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/153", "ground_truth": "            world,\r\n            rect,\r\n            fov\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.orientation.OrientationUtils\nimport com.kylecorry.andromeda.sense.orientation.IOrientationSensor\nimport android.opengl.Matrix\nfun getOrientation(\r\n        orientationSensor: IOrientationSensor,\r\n        rotationMatrix: FloatArray,\r\n        orientation: FloatArray,\r\n        declination: Float? = null\r\n    ) {\r\n        OrientationUtils.getAROrientation(\r\n            orientationSensor,", "choices": [{"text": "            rotationMatrix,\r\n            orientation,\r\n            declination\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/154", "ground_truth": "            rotationMatrix,\r\n            orientation,\r\n            declination\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {", "choices": [{"text": "\n    super.onDestroyView();\n    if (mListener!= null) {\n        mListener.onDestroyView();\n        mListener = null;\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/158", "ground_truth": "        if (isBound) {\r\n            binding.camera.stop()\r\n        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\PhotoImportBottomSheetFragment.kt"}}
{"prompt": "import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent?): Boolean {\r\n        if (event?.action == MotionEvent.ACTION_DOWN){\r\n            isShutterPressed = true\r\n        }\r\n\r\n        if (event?.action == MotionEvent.ACTION_UP){\r\n            isShutterPressed = false\r\n        }", "choices": [{"text": "\n        return isShutterPressed\r\n    }"}], "metadata": {"task_id": "Trail-Sense/162", "ground_truth": "\r\n        invalidate()\r\n\r\n        return super.onTouchEvent(event)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\ShutterButton.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {\r\n        if (isBound) {", "choices": [{"text": "\n            isBound = false;\r\n        }\r\n        super.onDestroyView();\r\n    }"}], "metadata": {"task_id": "Trail-Sense/165", "ground_truth": "            binding.camera.stop()\r\n        }\r\n        fovRunner.cancel()\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\SightingCompassBottomSheetFragment.kt"}}
{"prompt": "import kotlin.math.min\nimport kotlin.math.max\nimport androidx.annotation.ColorInt\nimport android.graphics.Color\nfun saturation(@ColorInt value: Int): Float {\r\n        val blue = Color.blue(value)\r\n        val red = Color.red(value)\r\n        val green = Color.green(value)\r\n\r\n        val min = min(red, min(blue, green))\r\n        val max = max(red, max(blue, green))\r\n\r\n        if (min == 0 && max == 0) {", "choices": [{"text": "\n            return 0.0f\r\n        } else {\r\n            return min + (max - min) / 2.0f\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/172", "ground_truth": "            return 0f\r\n        }\r\n\r\n        return 1 - min / max.toFloat().coerceAtLeast(1f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\colors\\ColorUtils.kt"}}
{"prompt": "import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun average(@ColorInt value: Int): Float {\r\n        val blue = Color.blue(value)", "choices": [{"text": "\n        return Math.sqrt(blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue * blue + blue"}], "metadata": {"task_id": "Trail-Sense/173", "ground_truth": "        val red = Color.red(value)\r\n        val green = Color.green(value)\r\n\r\n        return (red + blue + green) / 3f\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\colors\\ColorUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.Alerts\nimport com.google.android.material.snackbar.Snackbar\nimport androidx.fragment.app.Fragment\nimport android.view.View\nfun snackbar(\r\n        fragment: Fragment,\r\n        text: String,\r\n        duration: Int = Snackbar.LENGTH_SHORT,\r\n        action: String? = null,\r\n        onAction: () -> Unit = {}\r\n    ): Snackbar {\r\n\r\n        val playBar =\r\n            fragment.view?.findViewWithTag<View>(fragment.getString(R.string.tag_play_bar))\r\n\r\n        val view = playBar ?: fragment.requireActivity().findViewById(R.id.bottom_navigation)\r\n\r\n        return Alerts.snackbar(\r\n            fragment,\r\n            view,\r\n            text,", "choices": [{"text": "            duration,\r\n            action,\r\n            onAction\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/180", "ground_truth": "            duration,\r\n            action,\r\n            onAction\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestCamera\nimport com.kylecorry.trail_sense.shared.camera.PhotoImportBottomSheetFragment\nimport com.kylecorry.andromeda.fragments.AndromedaFragment\nimport androidx.fragment.app.Fragment\nimport android.util.Size\nimport android.net.Uri\nimport android.content.Context\nprivate fun takePhoto(\r\n        fragment: AndromedaFragment,\r\n        size: Size? = null,\r\n        onCapture: (uri: Uri?) -> Unit\r\n    ) {\r\n        fragment.requestCamera {\r\n            if (!it) {\r\n                onCapture(null)\r\n                return@requestCamera\r\n            }\r\n\r\n            val prefs = UserPreferences(fragment.requireContext()).camera\r\n\r\n            val sheet = PhotoImportBottomSheetFragment(size, prefs.useZeroShutterLag) { uri ->\r\n                onCapture(uri)", "choices": [{"text": "\n            }\r\n\r\n            sheet.show(fragment.requireContext())\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/184", "ground_truth": "            }\r\n\r\n            sheet.show(fragment)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import java.time.LocalDateTime\nimport com.kylecorry.andromeda.pickers.Pickers\nimport android.content.Context\nfun pickDatetime(\r\n        context: Context,\r\n        use24Hours: Boolean,\r\n        default: LocalDateTime = LocalDateTime.now(),\r\n        onDatetimePick: (value: LocalDateTime?) -> Unit\r\n    ) {\r\n        Pickers.date(context, default.toLocalDate()) { date ->\r\n            if (date != null) {\r\n                Pickers.time(context, use24Hours, default.toLocalTime()) { time ->\r\n                    if (time != null) {\r\n                        onDatetimePick(LocalDateTime.of(date, time))\r\n                    } else {\r\n                        onDatetimePick(null)\r\n                    }\r\n                }", "choices": [{"text": "\n            } else {\r\n                onDatetimePick(null)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/185", "ground_truth": "            } else {\r\n                onDatetimePick(null)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.views.list.AndromedaListView\nimport com.kylecorry.andromeda.fragments.show\nimport com.kylecorry.andromeda.alerts.Alerts\nimport android.widget.TextView\nimport android.view.View\nimport android.content.Context\nfun showList(\r\n        context: Context,\r\n        title: String,\r\n        listItems: List<ListItem>,\r\n        emptyText: String? = null\r\n    ) {\r\n        val view = View.inflate(context, R.layout.view_list_dialog, null)\r\n        val list = view.findViewById<AndromedaListView>(R.id.list)\r\n        val empty = view.findViewById<TextView>(R.id.empty_text)\r\n\r\n        if (emptyText != null) {\r\n            empty.text = emptyText\r\n        }\r\n\r\n        list.setItems(listItems)\r\n\r\n        Alerts.dialog(\r\n            context,", "choices": [{"text": "            title,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null"}], "metadata": {"task_id": "Trail-Sense/186", "ground_truth": "            title,\r\n            contentView = view,\r\n            cancelText = null\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.ui.Colors\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.content.Context\nfun Resources.getCardinalDirectionColor(context: Context): Int {\r\n        val prefs = UserPreferences(context)\r\n        return if (prefs.useDynamicColors && prefs.useDynamicColorsOnCompass) {", "choices": [{"text": "\n            return Color.parseColor(prefs.cardinalDirectionColor)\r\n        } else {\r\n            return Color.parseColor(context.getResources().getColor(R.color.default_cardinal_direction_color))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/187", "ground_truth": "            getPrimaryColor(context)\r\n        } else {\r\n            AppColor.Orange.color\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.ui.Colors\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.content.Context\nfun Resources.getPrimaryMarkerColor(context: Context): Int {\r\n        val prefs = UserPreferences(context)\r\n        return if (prefs.useDynamicColors && prefs.useDynamicColorsOnCompass) {", "choices": [{"text": "\n            return Color.parseColor(prefs.primaryMarkerColor)\r\n        } else {\r\n            return Color.parseColor(context.getResources().getColor(R.color.primary_marker_color))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/188", "ground_truth": "            getPrimaryColor(context)\r\n        } else {\r\n            AppColor.Orange.color\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "fun hash(vararg values: Any?): Int {\r\n        var hash = 0", "choices": [{"text": ";\r\n        for (var i = 0; i < values.length; i++) {\r\n            var value = values[i];\r\n            if (hash == 0) {\r\n                hash = value;\r\n            } else {\r\n                hash ^= value;\r\n            }\r\n        }\r\n        return hash;\r\n    }"}], "metadata": {"task_id": "Trail-Sense/200", "ground_truth": "        for (value in values) {\r\n            hash = hash * 31 + (value?.hashCode() ?: 0)\r\n        }\r\n        return hash\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\data\\HashUtils.kt"}}
{"prompt": "override fun execute() {\r\n        ifDebug {", "choices": [{"text": " {\r\n            super.execute();\r\n        } else {\r\n            super.execute();\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/203", "ground_truth": "            tryOrLog {\r\n                executeDebug()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\DebugCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.settings.infrastructure.IDeclinationPreferences\nimport com.kylecorry.andromeda.sense.location.IGPS\nfun getDeclinationStrategy(prefs: IDeclinationPreferences, gps: IGPS? = null): IDeclinationStrategy {\r\n        return if (gps == null || !prefs.useAutoDeclination) {", "choices": [{"text": "\n            return new AutoDeclinationStrategy(prefs, gps)\r\n        } else {\r\n            return new AutoDeclinationStrategy(prefs, gps)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/213", "ground_truth": "            OverrideDeclinationStrategy(prefs)\r\n        } else {\r\n            GPSDeclinationStrategy(gps)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\declination\\DeclinationFactory.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun Distance.toRelativeDistance(threshold: Float = 1000f): Distance {\r\n    val metric = units.isMetric()\r\n    val baseDistance =\r\n        if (metric) convertTo(DistanceUnits.Meters) else convertTo(DistanceUnits.Feet)\r\n    val newUnits = if (baseDistance.distance >= threshold) {\r\n        if (metric) DistanceUnits.Kilometers else DistanceUnits.Miles", "choices": [{"text": "\n        else DistanceUnits.Feet\r\n    } else {\r\n        if (metric) DistanceUnits.Kilometers else DistanceUnits.Miles\r\n        else DistanceUnits.Feet\r\n    }\r\n    return newUnits\r\n}"}], "metadata": {"task_id": "Trail-Sense/215", "ground_truth": "    } else {\r\n        if (metric) DistanceUnits.Meters else DistanceUnits.Feet\r\n    }\r\n    return convertTo(newUnits)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\DistanceExtensions.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun DistanceUnits.isMetric(): Boolean {\r\n    return listOf(", "choices": [{"text": "        listOf(\r\n            listOf(\r\n                listOf(\r\n                    listOf(\r\n                        listOf(\r\n                            listOf(\r\n                                listOf(\r\n                                    listOf(\r\n                                        listOf(\r\n                                            listOf(\r\n                                                listOf(\r\n                                                    listOf(\r\n                                                        listOf(\r\n                                                            listOf(\r\n                                                        listOf(\r\n                                                            listOf(\r\n                                                            listOf(\r\n                                                                listOf(\r\n                                                            listOf(\r\n                                                                listOf(\r\n                                                            listOf(\r\n                                                                listOf(\r\n                                                           "}], "metadata": {"task_id": "Trail-Sense/216", "ground_truth": "        DistanceUnits.Kilometers,\r\n        DistanceUnits.Meters,\r\n        DistanceUnits.Centimeters\r\n    ).contains(this)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\DistanceExtensions.kt"}}
{"prompt": "fun probability(chance: Float): Probability {\r\n    return when {\r\n        chance < 0.05f -> {\r\n            Probability.Never\r\n        }\r\n        chance < 0.25f -> {\r\n            Probability.Low\r\n        }\r\n        chance < 0.75f -> {\r\n            Probability.Moderate\r\n        }\r\n        chance < 0.95f -> {\r\n            Probability.High\r\n        }", "choices": [{"text": " {\r\n            Probability.Never\r\n        }\r\n        chance < 0.95f -> {\r\n            Probability.Moderate\r\n        }\r\n        chance < 0.95f -> {\r\n            Probability.High\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/218", "ground_truth": "        else -> {\r\n            Probability.Always\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\domain\\Probability.kt"}}
{"prompt": "import com.kylecorry.andromeda.alerts.Alerts\nimport android.content.Context\ninline fun Alerts.withCancelableLoading(\r\n    context: Context,\r\n    title: String,\r\n    cancelText: CharSequence = context.getString(android.R.string.cancel),\r\n    noinline onCancel: () -> Unit,\r\n    action: () -> Unit\r\n) {\r\n    val loadingAlert = cancelableLoading(context, title, cancelText, onCancel)\r\n    try {", "choices": [{"text": "\n        loadingAlert.show(action)\r\n    } finally {\r\n        cancelableLoading(context, title, cancelText, onCancel)\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/219", "ground_truth": "        action()\r\n    } finally {\r\n        loadingAlert.dismiss()\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\AndromedaExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.receivers.ServiceRestartAlerter\nimport android.util.Log\nimport android.os.Build\nimport android.content.Context\nimport android.app.ForegroundServiceStartNotAllowedException\ninline fun tryStartForegroundOrNotify(context: Context, action: () -> Unit) {\r\n    try {\r\n        action()\r\n    } catch (e: Exception) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && e is ForegroundServiceStartNotAllowedException) {\r\n            ServiceRestartAlerter(context.applicationContext).alert()\r\n            Log.d(\"tryStartForegroundOrNotify\", \"Cannot start service\")", "choices": [{"text": "\n        } else {\r\n            ServiceRestartAlerter(context.applicationContext).alert()\r\n            Log.d(\"tryStartForegroundOrNotify\", \"Cannot start service\")\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/221", "ground_truth": "        } else {\r\n            throw e\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\AndromedaExtensions.kt"}}
{"prompt": "import com.kylecorry.andromeda.preferences.IPreferences\nfun IPreferences.putOrRemoveFloat(key: String, value: Float?) {\r\n    if (value == null) {", "choices": [{"text": "\n        return null;\r\n    }\r\n    if (key == null) {\r\n        return null;\r\n    }\r\n    if (key.length() == 0) {\r\n        return null;\r\n    }\r\n    if (key.length() == 1) {\r\n        return Float.parseFloat(key);\r\n    }\r\n    if (key.length() == 2) {\r\n        return Float.parseFloat(key.substring(0, 1));\r\n    }\r\n    return Float.parseFloat(key.substring(0"}], "metadata": {"task_id": "Trail-Sense/223", "ground_truth": "        remove(key)\r\n    } else {\r\n        putFloat(key, value)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\PreferenceExtensions.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.preferences.IPreferences\nfun IPreferences.putOrRemoveCoordinate(key: String, value: Coordinate?) {\r\n    if (value == null) {", "choices": [{"text": "\n        return;\r\n    }\r\n    if (key == null) {\r\n        return;\r\n    }\r\n    preferences.remove(key);\r\n    preferences.put(key, value);\r\n}"}], "metadata": {"task_id": "Trail-Sense/224", "ground_truth": "        remove(key)\r\n    } else {\r\n        putCoordinate(key, value)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\PreferenceExtensions.kt"}}
{"prompt": "import com.kylecorry.sol.science.geology.Geofence\nimport com.kylecorry.sol.science.geology.CoordinateBounds\nfun CoordinateBounds.Companion.from(geofences: List<Geofence>): CoordinateBounds {\r\n    val bounds = geofences.map { from(it) }\r\n    val corners = bounds.flatMap {\r\n        listOf(\r\n            it.northEast,\r\n            it.northWest,\r\n            it.southEast,\r\n            it.southWest", "choices": [{"text": ",\r\n            it.westEast,\r\n            it.westWest,\r\n            it.eastEast,\r\n            it.eastWest\r\n        )\r\n    }\r\n    return new CoordinateBounds(corners)\r\n}"}], "metadata": {"task_id": "Trail-Sense/225", "ground_truth": "        )\r\n    }\r\n\r\n    return from(corners)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\SolExtensions.kt"}}
{"prompt": "import com.kylecorry.sol.math.SolMath.roundNearest\nfun getValuesBetween(min: Float, max: Float, divisor: Float): List<Float> {\r\n    val values = mutableListOf<Float>()\r\n    val start = min.roundNearest(divisor)\r\n    var i = start\r\n    while (i <= max) {\r\n        if (i >= min) {\r\n            values.add(i)", "choices": [{"text": "\n        } else {\r\n            values.add(i)\r\n        }\r\n        i = start.roundNearest(divisor)\r\n    }\r\n    return values\r\n}"}], "metadata": {"task_id": "Trail-Sense/226", "ground_truth": "        }\r\n        i += divisor\r\n    }\r\n    return values\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\SolExtensions.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.topics.generic.ITopic\nfun <T: Any> ITopic<T>.getOrNull(): T? {\r\n    val current = value\r\n    return if (current.isPresent) {", "choices": [{"text": "\n        return current.get()\r\n    } else {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/228", "ground_truth": "        current.get()\r\n    } else {\r\n        null\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\TopicExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Rectangle\nimport android.view.View\nfun View.getViewBounds(rotation: Float = 0f): Rectangle {\r\n    val rectangle = Rectangle(\r\n        0f,\r\n        height.toFloat(),\r\n        width.toFloat(),\r\n        0f,\r\n    )\r\n\r\n    if (rotation != 0f) {", "choices": [{"text": "\n        rectangle.setRotation(rotation);\r\n    }\r\n\r\n    return rectangle;\r\n}"}], "metadata": {"task_id": "Trail-Sense/233", "ground_truth": "        return rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Rectangle\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun ICanvasDrawer.getBounds(rotation: Float = 0f): Rectangle {\r\n    val rectangle = Rectangle(\r\n        0f,\r\n        canvas.height.toFloat(),\r\n        canvas.width.toFloat(),\r\n        0f,\r\n    )\r\n\r\n    if (rotation != 0f) {", "choices": [{"text": "\n        rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}"}], "metadata": {"task_id": "Trail-Sense/234", "ground_truth": "        return rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun ICanvasDrawer.text(str: String, x: Float, y: Float, lineSpacing: Float) {\r\n    val lines = str.split(\"\\n\")\r\n    var lastHeight = 0f\r\n    var lastY = y\r\n    lines.forEachIndexed { index, line ->\r\n        val newY = lastY + lastHeight + if (index == 0) 0f else lineSpacing", "choices": [{"text": "\n        lastHeight = Math.max(lastHeight, line.length)\r\n        lastY = newY\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/236", "ground_truth": "        lastY = newY\r\n        lastHeight = textHeight(line)\r\n        text(line, x, newY)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.tryOrDefault\nfun Float.safeRoundToInt(default: Int = 0): Int {\r\n    return tryOrDefault(default) {\r\n        if (isNaN() || isInfinite()) {\r\n            default", "choices": [{"text": "\n        } else {\r\n            return Math.round(default)\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/241", "ground_truth": "        } else {\r\n            roundToInt()\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.tryOrDefault\nfun Double.safeRoundToInt(default: Int = 0): Int {\r\n    return tryOrDefault(default) {\r\n        if (isNaN() || isInfinite()) {\r\n            default", "choices": [{"text": "\n        } else {\r\n            return Math.round(default)\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/242", "ground_truth": "        } else {\r\n            roundToInt()\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "import java.time\nimport com.kylecorry.sol.units\nfun sortDistanceUnits(\r\n        units: List<DistanceUnits>,\r\n        metric: Boolean = prefs.baseDistanceUnits == DistanceUnits.Meters\r\n    ): List<DistanceUnits> {\r\n        // TODO: Secondary sort by size\r\n        val metricUnits =\r\n            listOf(DistanceUnits.Centimeters, DistanceUnits.Meters, DistanceUnits.Kilometers)\r\n        return units.sortedBy {\r\n            if (metric) {\r\n                if (metricUnits.contains(it)) 0 else 1", "choices": [{"text": "\n                else 1\r\n            } else 0\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/264", "ground_truth": "            } else {\r\n                if (metricUnits.contains(it)) 1 else 0\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "import com.kylecorry.sol.units\nfun sortWeightUnits(\r\n        units: List<WeightUnits>,\r\n        metric: Boolean = prefs.weightUnits == WeightUnits.Kilograms\r\n    ): List<WeightUnits> {\r\n        // TODO: Secondary sort by size\r\n        val metricUnits =\r\n            listOf(WeightUnits.Grams, WeightUnits.Kilograms)\r\n        return units.sortedBy {\r\n            if (metric) {\r\n                if (metricUnits.contains(it)) 0 else 1", "choices": [{"text": " {\r\n                    if (metricUnits.contains(it)) 1 else 0\r\n                }\r\n            } else {\r\n                if (metricUnits.contains(it)) 0 else 1\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/265", "ground_truth": "            } else {\r\n                if (metricUnits.contains(it)) 1 else 0\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.annotation.DrawableRes\n @DrawableRes\r\n    fun getCompassReferenceIcon(isTrueNorth: Boolean = prefs.compass.useTrueNorth): Int {\r\n        return if (isTrueNorth) {", "choices": [{"text": "\n            return R.drawable.ic_compass_reference_white_24dp\r\n        } else {\r\n            return R.drawable.ic_compass_reference_black_24dp\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/272", "ground_truth": "            R.drawable.ic_star\r\n        } else {\r\n            R.drawable.ic_tool_metal_detector\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nfun refresh(resetScroll: Boolean = false) {\r\n        scope.launch {\r\n            runner.replace {\r\n                val items = onIO {\r\n                    augment(loader.load(query, root?.id))\r\n                }\r\n                onMain {", "choices": [{"text": "\n                    if (resetScroll) {\r\n                        loader.refresh(items)\r\n                    } else {\r\n                        loader.refresh(items)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/275", "ground_truth": "                    onChange(root, items, resetScroll)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "val root T?\nvar _root T?\nvar query String?\n fun clear(resetRoot: Boolean = true) {", "choices": [{"text": "\n    _root = resetRoot? null : _root.trim()\n    _root = resetRoot? null : _root.trim()\n    _root = resetRoot? null : _root.trim()\n    _root = resetRoot? null : _root.trim()\n    _root = resetRoot? null : _root.trim()\n    _root = resetRoot? null : _root.trim()\n    _root = resetRoot? null : _root.trim()\n    _root = resetRoot? null : _root.trim()\n    _root = resetRoot?"}], "metadata": {"task_id": "Trail-Sense/277", "ground_truth": "        if (resetRoot) {\r\n            _root = null\r\n        }\r\n        onChange(root, emptyList(), true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "val runner\nvar query String?\nvar onChange\n private fun loadGroup(id: Long) {", "choices": [{"text": "(id: Long) {\n    if (id == null) {\n        return null;\n    } else {\n        return Group.findById(id);\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/278", "ground_truth": "        scope.launch {\r\n            _root = onIO { loader.getGroup(id) }\r\n            refresh(true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "fun open(groupId: Long?) {\r\n        if (groupId == null) {\r\n            _root = null", "choices": [{"text": ";\r\n        } else {\r\n            _root = groupId;\r\n        }\r\n        return _root;\r\n    }"}], "metadata": {"task_id": "Trail-Sense/279", "ground_truth": "            refresh(true)\r\n        } else {\r\n            loadGroup(groupId)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "val root T?\nvar _root T?\nvar query String?\n fun up(): Boolean {\r\n        if (_root == null) {\r\n            return false\r\n        }\r\n        val parent = _root?.parentId\r\n        if (parent == null) {\r\n            _root = null\r\n            refresh(true)", "choices": [{"text": "_root = parent\r\n            refresh(false)\r\n        } else {\r\n            _root = parent\r\n            refresh(true)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/280", "ground_truth": "        } else {\r\n            loadGroup(parent)\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.grouping.Groupable\nimport com.kylecorry.andromeda.views.list.ListItemMapper\nimport com.kylecorry.andromeda.views.list.AndromedaListView\nimport com.kylecorry.andromeda.core.tryOrLog\nimport android.widget.TextView\nfun <T : Groupable> GroupListManager<T>.bind(\r\n    list: AndromedaListView,\r\n    title: TextView,\r\n    mapper: ListItemMapper<T>,\r\n    titleProvider: (root: T?) -> String\r\n) {\r\n    onChange = { root, items, rootChanged ->\r\n        tryOrLog {\r\n            list.setItems(items, mapper)\r\n            if (rootChanged) {\r\n                list.scrollToPosition(0, false)", "choices": [{"text": "\n            }\r\n        } catch (e) {\r\n            Log.e(e)\r\n        }\r\n    }\r\n    list.setOnItemClickListener(onItemClickListener)\r\n    list.setOnItemLongClickListener(onItemLongClickListener)\r\n    list.setOnItemLongLongClickListener(onItemLongLongLongClickListener)\r\n    list.setOnItemLongLongLongClickListener(onItemLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLong"}], "metadata": {"task_id": "Trail-Sense/282", "ground_truth": "            }\r\n            title.text = titleProvider(root)\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManagerExtensions.kt"}}
{"prompt": "suspend fun delete(group: T) {\r\n        if (!group.isGroup){\r\n            deleteItems(listOf(group))\r\n            return\r\n        }\r\n\r\n        val children = loader.getChildren(group.id, 1)\r\n\r\n        // Delete items\r\n        val items = children.filterNot { it.isGroup }\r\n        deleteItems(items)\r\n\r\n        // Delete groups\r\n        val groups = children.filter { it.isGroup }", "choices": [{"text": "\n        deleteGroups(groups)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/284", "ground_truth": "        groups.forEach { delete(it) }\r\n\r\n        // Delete self\r\n        deleteGroup(group)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\persistence\\GroupDeleter.kt"}}
{"prompt": "suspend fun sort(items: List<T>): List<T> {\r\n        val values = items.map { mapper.map(it) }\r\n\r\n        return if (ascending) {\r\n            items.zip(values)\r\n                .sortedBy {\r\n                    it.second\r\n                }\r\n                .map { it.first }\r\n        } else {\r\n            items.zip(values)\r\n                .sortedByDescending {", "choices": [{"text": "\n                    it.second\r\n                }\r\n               .map { it.first }\r\n        }\r\n}"}], "metadata": {"task_id": "Trail-Sense/286", "ground_truth": "                    it.second\r\n                }\r\n                .map { it.first }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\sort\\GroupSort.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nfun getValue(time: Instant, threshold: Duration): Boolean {\r\n        synchronized(lock) {\r\n            if (lastTime == null) {\r\n                lastTime = time\r\n                lastReturnValue = !lastReturnValue\r\n                return lastReturnValue\r\n            }\r\n\r\n            if (Duration.between(lastTime, time) >= threshold) {\r\n                lastTime = time\r\n                lastReturnValue = !lastReturnValue\r\n                return lastReturnValue", "choices": [{"text": "\n            }\r\n\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/288", "ground_truth": "            }\r\n\r\n            return lastReturnValue\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\hooks\\FrequencyHookTrigger.kt"}}
{"prompt": "import java.io.OutputStream\nimport java.io.FileOutputStream\nimport java.io.File\nimport com.kylecorry.trail_sense.tools.maps.infrastructure.ImageSaver\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport android.graphics.Bitmap\nimport android.content.Context\nsuspend fun save(\r\n        path: String,\r\n        bitmap: Bitmap,\r\n        quality: Int = 90,\r\n        recycleOnSave: Boolean = false\r\n    ) = onIO {\r\n        try {\r\n            @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n            FileOutputStream(get(path, create = true)).use { out ->\r\n                ImageSaver().save(bitmap, out, quality)\r\n            }\r\n        } finally {", "choices": [{"text": "\n            if (recycleOnSave) {\r\n                recycle(bitmap)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/297", "ground_truth": "            if (recycleOnSave) {\r\n                bitmap.recycle()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "val TEMP_DIR\nvar instance FileSubsystem?\nval external\n suspend fun rename(\r\n        fromPath: String,\r\n        toPath: String", "choices": [{"text": "\n        newName: String\r\n    )\r\n    \r\n    FileSubsystem.rename(fromPath, toPath)\r\n    \r\n    FileSubsystem.delete(fromPath)\r\n    FileSubsystem.delete(toPath)\r\n    FileSubsystem.delete(fromPath)\r\n    FileSubsystem.delete(toPath)\r\n    FileSubsystem.delete(fromPath)\r\n    FileSubsystem.delete(toPath)\r\n    FileSubsystem.delete(fromPath)\r\n    FileSubsystem.delete(toPath)\r\n    FileSubsystem.delete(fromPath)\r"}], "metadata": {"task_id": "Trail-Sense/298", "ground_truth": "    ): Boolean = onIO {\r\n        val renamed = get(toPath)\r\n        get(fromPath).renameTo(renamed)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "import java.util\nimport com.kylecorry.andromeda.core.tryOrDefault\nimport android.util.Size\nfun imageSize(path: String): Size {\r\n        return tryOrDefault(Size(0, 0)) {", "choices": [{"text": "\n            if (path == null) {\r\n                return null\r\n            } else {\r\n                try {\r\n                    return new Size(Integer.parseInt(path), Integer.parseInt(path))\r\n                } catch (NumberFormatException e) {\r\n                    return null\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/299", "ground_truth": "            val file = get(path)\r\n            BitmapUtils.getBitmapSize(file.path) ?: Size(0, 0)\r\n        }\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "import java.io.File\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.files.FileSaver\nimport android.webkit.MimeTypeMap\nimport android.net.Uri\nsuspend fun copyToLocal(uri: Uri, directory: String): File? = onIO {\r\n        val type = context.contentResolver.getType(uri)\r\n        val extension = MimeTypeMap.getSingleton().getExtensionFromMimeType(type)\r\n        val filename = \"$directory/${UUID.randomUUID()}.$extension\"\r\n        val file = get(filename, true)\r\n        val stream = stream(uri) ?: return@onIO null\r\n\r\n        try {\r\n            val saver = FileSaver()\r\n            saver.save(stream, file)\r\n        } catch (e: Exception) {", "choices": [{"text": "\n            e.printStackTrace()\r\n            return null\r\n        }\r\n        return file\r\n    }"}], "metadata": {"task_id": "Trail-Sense/300", "ground_truth": "            return@onIO null\r\n        }\r\n\r\n        file\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "fun from(turnOn: () -> Unit, turnOff: () -> Unit): ISignalingDevice {\r\n            return object : ISignalingDevice {\r\n                override fun on() {\r\n                    turnOn()\r\n                }", "choices": [{"text": "\n                override fun off() {\r\n                    turnOff()\r\n                }\r\n            }\r\n}"}], "metadata": {"task_id": "Trail-Sense/310", "ground_truth": "                override fun off() {\r\n                    turnOff()\r\n                }\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\morse\\ISignalingDevice.kt"}}
{"prompt": "fun cancel(){\r\n        synchronized(this) {\r\n            isOn = false\r\n            if (intervalometer != null) {\r\n                intervalometer?.stop()", "choices": [{"text": "\n                intervalometer.cancel()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/311", "ground_truth": "                intervalometer = null\r\n            }\r\n            device.off()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\morse\\SignalPlayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport android.content.Context\noverride fun isSatisfiedBy(value: Context): Boolean {\r\n        val sensorService = SensorService(value)\r\n        val hasForegroundLocation = sensorService.hasLocationPermission()\r\n        val hasBackgroundLocation = sensorService.hasLocationPermission(true)\r\n\r\n        if (!hasForegroundLocation || hasBackgroundLocation) {\r\n            return false", "choices": [{"text": "\n        } else {\r\n            return true\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/315", "ground_truth": "        }\r\n\r\n        val prefs = UserPreferences(value)\r\n        return prefs.astronomy.sendSunsetAlerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\IsBackgroundLocationRequired.kt"}}
{"prompt": "import com.kylecorry.andromeda.camera.Camera\nimport com.kylecorry.andromeda.alerts.toast\nimport com.kylecorry.andromeda.alerts.Alerts\nimport androidx.fragment.app.Fragment\nfun Fragment.alertNoCameraPermission() {\r\n    Alerts.toast(", "choices": [{"text": "R.string.no_camera_permission, R.string.no_camera_permission_message, R.string.no_camera_permission_icon);\r\n}"}], "metadata": {"task_id": "Trail-Sense/317", "ground_truth": "        requireContext(),\r\n        getString(R.string.camera_permission_denied),\r\n        short = false\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.toast\nimport com.kylecorry.andromeda.alerts.Alerts\nimport androidx.fragment.app.Fragment\nfun Fragment.alertNoActivityRecognitionPermission() {\r\n    Alerts.toast(", "choices": [{"text": "\n        R.string.no_activity_recognition_permission,\r\n        R.string.no_activity_recognition_permission_description,\r\n        R.string.no_activity_recognition_permission_hint,\r\n        R.string.no_activity_recognition_permission_hint_description,\r\n        R.string.no_activity_recognition_permission_hint_hint,\r\n        R.string.no_activity_recognition_permission_hint_hint,\r\n        R.string.no_activity_recognition_permission_hint"}], "metadata": {"task_id": "Trail-Sense/318", "ground_truth": "        requireContext(),\r\n        getString(R.string.activity_recognition_permission_denied),\r\n        short = false\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.Permissions\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.os.Build\nimport android.content.Context\nimport android.Manifest\nfun <T> T.requestActivityRecognition(action: (hasPermission: Boolean) -> Unit) where T : IPermissionRequester, T : Fragment {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        requestPermissions(listOf(Manifest.permission.ACTIVITY_RECOGNITION)) {\r\n            action(Permissions.canRecognizeActivity(requireContext()))", "choices": [{"text": "\n        }\r\n    } else {\r\n        requestPermissions(listOf(Manifest.permission.ACTIVITY_RECOGNITION)) {\r\n            action(Permissions.canRecognizeActivity(requireContext()))\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/319", "ground_truth": "        }\r\n    } else {\r\n        action(true)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.Permissions\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.Manifest\nfun <T> T.requestBacktrackPermission(action: (hasPermission: Boolean) -> Unit) where T : IPermissionRequester, T : Fragment {\r\n    if (Permissions.canStartLocationForgroundService(requireContext())) {\r\n        action(true)\r\n        return\r\n    }\r\n\r\n    requestPermissions(listOf(Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION)) {\r\n        val hasPermission = Permissions.canStartLocationForgroundService(requireContext())\r\n        if (!hasPermission){", "choices": [{"text": "\n            hasPermission = false\r\n        }\r\n        action(hasPermission)\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/322", "ground_truth": "            toast(getString(R.string.backtrack_no_permission))\r\n        }\r\n        action(hasPermission)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "import android.content.Context\noverride fun execute() {\r\n        if (!isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(false)\r\n            return\r\n        }\r\n\r\n        if (flag.get()) {\r\n            return", "choices": [{"text": "\n        }\r\n\r\n        if (isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(true)\r\n            return\r\n        }\r\n\r\n        if (isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(false)\r\n            return\r\n        }\r\n\r\n        if (isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(true)\r\n            return\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/323", "ground_truth": "        }\r\n\r\n        flag.set(true)\r\n        alerter.alert()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\RequestOptionalPermissionCommand.kt"}}
{"prompt": "import android.graphics.Color\noverride fun getColor(percent: Float): Int {\r\n        if (colors.isEmpty()) {\r\n            return Color.BLACK\r\n        }\r\n\r\n        val percentPerColor = 1 / colors.size.toFloat()\r\n\r\n        for (i in colors.indices) {\r\n            if (percent <= percentPerColor * (i + 1)) {\r\n                return colors[i]", "choices": [{"text": "\n            }\r\n        }\r\n\r\n        return Color.BLACK\r\n    }"}], "metadata": {"task_id": "Trail-Sense/330", "ground_truth": "            }\r\n        }\r\n\r\n        return colors.last()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\scales\\DiscreteColorScale.kt"}}
{"prompt": "private fun onUpdate(): Boolean {\r\n        if (!barometer.hasValidReading || barometer.pressure == 0f){\r\n            return true\r\n        }\r\n\r\n        readingCount++\r\n\r\n        if (filter == null){\r\n            filter = filterProvider(barometer.pressure)\r\n        }\r\n\r\n        filteredPressure = filter?.filter(barometer.pressure)\r\n\r\n        if (readingCount < minimumReadingCount){\r\n            return true", "choices": [{"text": "\n        }\r\n\r\n        if (filteredPressure == null){\r\n            return false\r\n        }\r\n\r\n        filteredPressure = filteredPressure.filter(barometer.pressure)\r\n\r\n        if (filteredPressure.length < minimumReadingCount){\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }"}], "metadata": {"task_id": "Trail-Sense/351", "ground_truth": "        }\r\n\r\n        notifyListeners()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\FilteredBarometer.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Vector2\nprivate fun getKalmanLocation(): Coordinate {\r\n        return referenceProjection.toCoordinate(\r\n            Vector2(", "choices": [{"text": "\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0),\r\n                Vector2(0, 0"}], "metadata": {"task_id": "Trail-Sense/355", "ground_truth": "                kalman?.currentX ?: 0f,\r\n                kalman?.currentY ?: 0f\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPS.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.sol.units.Coordinate\nprivate fun update() {\r\n        if (!gps.hasValidReading || currentLocation == Coordinate.zero || kalman == null) return\r\n\r\n        kalman?.predict(\r\n            (accelerometer?.rawAcceleration?.get(0) ?: 0f) * PROJECTION_SCALE,\r\n            (accelerometer?.rawAcceleration?.get(1) ?: 0f) * PROJECTION_SCALE,\r\n        )\r\n        lastPredictTime = Instant.now()", "choices": [{"text": "\n\r\n        if (lastPredictTime == Instant.now()) {\r\n            kalman.predict(\r\n                (accelerometer?.rawAcceleration?.get(0)?: 0f) * PROJECTION_SCALE,\r\n                (accelerometer?.rawAcceleration?.get(1)?: 0f) * PROJECTION_SCALE,\r\n            )\r\n            lastPredictTime = Instant.now()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/358", "ground_truth": "        updateCurrentFromKalman()\r\n        if (updateWithPrediction) {\r\n            notifyListeners()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPS.kt"}}
{"prompt": "import com.kylecorry.sol.math.algebra.columnMatrix\nimport android.os.SystemClock\nfun update(\r\n        x: Float,\r\n        y: Float,\r\n        xVel: Float,\r\n        yVel: Float,\r\n        posDev: Float,\r\n        velErr: Float\r\n    ) = synchronized(lock) {\r\n        lastUpdateTime = SystemClock.elapsedRealtimeNanos()\r\n        rebuildR(posDev, velErr)\r\n        if (useGpsSpeed) {\r\n            kalmanFilter.Zk = columnMatrix(x, y, xVel, yVel)", "choices": [{"text": "\n        } else {\r\n            kalmanFilter.Zk = columnMatrix(x, y, xVel, yVel)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/360", "ground_truth": "        } else {\r\n            kalmanFilter.Zk = columnMatrix(x, y)\r\n        }\r\n        kalmanFilter.update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPSFilter.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.trail_sense.shared.sensors.overrides.OverrideGPS\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nfun getGPS(frequency: Duration = Duration.ofMillis(20)): IGPS {\r\n\r\n        val hasPermission = hasLocationPermission()\r\n\r\n        if (!userPrefs.useAutoLocation || !hasPermission) {\r\n            return OverrideGPS(context, frequency.toMillis())\r\n        }\r\n\r\n        if (GPS.isAvailable(context)) {\r\n            return CustomGPS(\r\n                context,\r\n                frequency,\r\n                frequency", "choices": [{"text": ".toMillis()\r\n            )\r\n        }\r\n\r\n        return null\r\n    }"}], "metadata": {"task_id": "Trail-Sense/367", "ground_truth": "            )\r\n        }\r\n\r\n        return CachedGPS(context, frequency.toMillis())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.altimeter.AltimeterWrapper\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.IAltimeter\nfun getGPSFromAltimeter(altimeter: IAltimeter): IGPS? {\r\n        return if (altimeter is IGPS) {\r\n            altimeter\r\n        } else if (altimeter is AltimeterWrapper && altimeter.altimeter is IGPS) {\r\n            altimeter.altimeter as IGPS\r\n        } else if (altimeter is AltimeterWrapper && altimeter.altimeter is AltimeterWrapper) {", "choices": [{"text": "\n            altimeter.altimeter as GPS\r\n        } else if (altimeter is AltimeterWrapper && altimeter.altimeter is IGPS) {\r\n            altimeter.altimeter as IGPS\r\n        } else {\r\n            altimeter.altimeter as AltimeterWrapper\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/368", "ground_truth": "            getGPSFromAltimeter(altimeter.altimeter)\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.pedometer.Pedometer\nimport com.kylecorry.andromeda.sense.pedometer.IPedometer\nimport com.kylecorry.andromeda.permissions.Permissions\nfun getPedometer(): IPedometer {\r\n        return if (Permissions.canRecognizeActivity(context)) {", "choices": [{"text": "\n            return new Pedometer(context);\r\n        } else {\r\n            return null;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/370", "ground_truth": "            Pedometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        } else {\r\n            MockPedometer()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.altimeter.OverrideAltimeter\nimport com.kylecorry.trail_sense.shared.sensors.altimeter.CachedAltimeter\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.IAltimeter\nprivate fun getGPSAltimeter(gps: IGPS? = null): IAltimeter {\r\n        val mode = userPrefs.altimeterMode\r\n\r\n        if (mode == UserPreferences.AltimeterMode.Override) {\r\n            return OverrideAltimeter(context)\r\n        } else {\r\n            if (!GPS.isAvailable(context)) {\r\n                return CachedAltimeter(context)", "choices": [{"text": "\n            } else {\r\n                return GPSAltimeter(context)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/371", "ground_truth": "            }\r\n\r\n            return gps ?: getGPS()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.barometer.IBarometer\nimport com.kylecorry.andromeda.sense.barometer.Barometer\nfun getBarometer(): IBarometer {\r\n        return if (userPrefs.weather.hasBarometer) FilteredBarometer(\r\n            Barometer(\r\n                context, ENVIRONMENT_SENSOR_DELAY\r\n            ),", "choices": [{"text": "\n            Barometer(\r\n                context, ENVIRONMENT_SENSOR_DELAY\r\n            ),\r\n            Barometer(\r\n                context, ENVIRONMENT_SENSOR_DELAY\r\n            ),\r\n            Barometer(\r\n                context, ENVIRONMENT_SENSOR_DELAY\r\n            ),\r\n            Barometer(\r\n                context, ENVIRONMENT_SENSOR_DELAY\r\n            ),\r\n            Barometer(\r\n                context, ENVIRONMENT_SENSOR_DELAY\r\n            ),\r\n            Barometer(\r\n"}], "metadata": {"task_id": "Trail-Sense/373", "ground_truth": "            3\r\n        ) {\r\n            LowPassFilter(0.1f, it)\r\n        } else MockBarometer()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.thermometer.ThermometerSource\nimport com.kylecorry.trail_sense.shared.sensors.thermometer.HistoricThermometer\nimport com.kylecorry.trail_sense.shared.sensors.thermometer.CalibratedThermometerWrapper\nimport com.kylecorry.andromeda.sense.temperature.Thermometer\nimport com.kylecorry.andromeda.core.sensors.IThermometer\nimport android.hardware.Sensor\nfun getThermometer(calibrated: Boolean = true): IThermometer {\r\n        val thermometer = when (userPrefs.thermometer.source) {\r\n            ThermometerSource.Historic -> HistoricThermometer(context)\r\n            ThermometerSource.Sensor -> getThermometerSensor()\r\n        }\r\n        return if (calibrated) {\r\n            CalibratedThermometerWrapper(\r\n                thermometer, userPrefs.thermometer.calibrator", "choices": [{"text": "\n            )\r\n        } else {\r\n            thermometer\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/374", "ground_truth": "            )\r\n        } else {\r\n            thermometer\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.temperature.Thermometer\nimport com.kylecorry.andromeda.sense.temperature.AmbientThermometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.IThermometer\nimport android.hardware.Sensor\n @Suppress(\"DEPRECATION\")\r\n    private fun getThermometerSensor(): IThermometer {\r\n        if (Sensors.hasSensor(context, Sensor.TYPE_AMBIENT_TEMPERATURE)) {\r\n            return AmbientThermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        if (Sensors.hasSensor(context, Sensor.TYPE_TEMPERATURE)) {", "choices": [{"text": "\n            return Thermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        return null\r\n    }"}], "metadata": {"task_id": "Trail-Sense/375", "ground_truth": "            return Thermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        return Battery(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.hygrometer.IHygrometer\nimport com.kylecorry.andromeda.sense.hygrometer.Hygrometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.hardware.Sensor\nfun getHygrometer(): IHygrometer {\r\n        if (Sensors.hasHygrometer(context)) {", "choices": [{"text": "\n            return new Hygrometer(context);\r\n        } else {\r\n            return null;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/376", "ground_truth": "            return Hygrometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        return MockHygrometer()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "import java.time.ZonedDateTime\noverride suspend fun update() {\r\n        // Purposely not calibrated because there's a wrapper for that\r\n        temperature = weather.getTemperature(\r\n            ZonedDateTime.now(),\r\n            location.location,", "choices": [{"text": "\n            weather.getHumidity(\r\n                ZonedDateTime.now(),\r\n                location.location,\r\n                weather.getTemperature(\r\n                    ZonedDateTime.now(),\r\n                    location.location,\r\n                    weather.getTemperature(\r\n                        ZonedDateTime.now(),\r\n                        location.location,\r\n                        weather.getTemperature(\r\n                            ZonedDateTime.now(),\r\n                            location.location,\r\n                            weather.getTemperature(\r\n                                ZonedDateTime.now(),\r\n                                location.location,\r\n                                weather.getTemperature(\r\n                                   "}], "metadata": {"task_id": "Trail-Sense/383", "ground_truth": "            location.elevation,\r\n            false\r\n        ).value.temperature\r\n        super.update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\thermometer\\HistoricThermometer.kt"}}
{"prompt": "import com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.SolMath\noverride fun calibrate(temperature: Temperature): Temperature {\r\n        return Temperature.celsius(\r\n            SolMath.map(\r\n                temperature.celsius().temperature,\r\n                sensorMinC,\r\n                sensorMaxC,", "choices": [{"text": "\n                sensorMaxC,\r\n                sensorMinC,\r\n                sensorMaxC,\r\n                sensorMinC,\r\n                sensorMaxC,\r\n                sensorMinC,\r\n                sensorMaxC,\r\n                sensorMinC,\r\n                sensorMaxC,\r\n                sensorMinC,\r\n                sensorMaxC,\r\n                sensorMinC,\r\n                sensorMaxC,\r\n                sensorMinC,\r\n                sensorMaxC,\r\n                sensorMinC,\r\n                sensorMaxC,\r\n                sensorMinC,\r\n               "}], "metadata": {"task_id": "Trail-Sense/384", "ground_truth": "                calibratedMinC,\r\n                calibratedMaxC\r\n            )\r\n        ).convertTo(temperature.units)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\thermometer\\RangeTemperatureCalibrator.kt"}}
{"prompt": "import androidx.fragment.app.Fragment\nfun actions(\r\n        fragment: Fragment,\r\n        title: String,\r\n        actions: List<ActionItem>,\r\n        noActionSelected: () -> Unit\r\n    ) {\r\n        var called = false\r\n\r\n        val customOnAction = { action: ActionItem?, sheet: ActionSheet ->\r\n            if (!called) {\r\n                called = true\r\n                if (action != null) {\r\n                    sheet.dismiss()\r\n                    action.action()\r\n                } else {\r\n                    noActionSelected()\r\n                }", "choices": [{"text": "\n            }\r\n        }\r\n\r\n        fragment.setCustomOnAction(customOnAction)\r\n        fragment.setTitle(title)\r\n        fragment.setActions(actions)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/386", "ground_truth": "            }\r\n        }\r\n        val sheet = ActionSheet(title, actions, customOnAction)\r\n        sheet.show(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sharing\\Share.kt"}}
{"prompt": "fun toMarkdown(): String {\r\n            if (title == null || level == null) {", "choices": [{"text": "(title == null || level == null) {\r\n                return null;\r\n            } else {\r\n                return String.format(\"%s %s\", title, level);\r\n            }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/390", "ground_truth": "                return content\r\n            }\r\n\r\n            return \"#\".repeat(level) + \" $title\\n$content\"\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\text\\TextUtils.kt"}}
{"prompt": "override fun onClick() {\r\n        super.onClick()\r\n\r\n        when (stateTopic.value.get()) {", "choices": [{"text": "\r\n            super.onClick()\r\n        } else {\r\n            super.onClick()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/391", "ground_truth": "            FeatureState.On -> stop()\r\n            FeatureState.Off -> start()\r\n            else -> {}\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "private fun onSubtitleChanged(subtitle: String): Boolean {", "choices": [{"text": "\n    if (subtitle == null) {\n        return false;\n    }\n    if (subtitle.length() == 0) {\n        return false;\n    }\n    if (subtitle.length() == 1) {\n        return true;\n    }\n    if (subtitle.length() == 2) {\n        return true;\n    }\n    if (subtitle.length() == 3) {\n        return true;\n    }\n    if (subtitle.length() == 4) {\n        return true;\n    }\n    return false;"}], "metadata": {"task_id": "Trail-Sense/394", "ground_truth": "        tryOrLog {\r\n            setSubtitle(subtitle)\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FeatureState\nimport com.kylecorry.andromeda.core.tryOrLog\nimport android.service.quicksettings.Tile\nprivate fun onStateChanged(state: FeatureState): Boolean {\r\n        tryOrLog {\r\n            setState(\r\n                when (state) {\r\n                    FeatureState.On -> Tile.STATE_ACTIVE\r\n                    FeatureState.Off -> Tile.STATE_INACTIVE\r\n                    FeatureState.Unavailable -> Tile.STATE_UNAVAILABLE", "choices": [{"text": "\n                }\r\n            )\r\n        } catch (e) {\r\n            return false\r\n        }\r\n        return true\r\n    }"}], "metadata": {"task_id": "Trail-Sense/395", "ground_truth": "                }\r\n            )\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "import com.kylecorry.sol.units.PressureUnits\nfun getDecimalPlaces(units: PressureUnits): Int {", "choices": [{"text": "\n    if (units == null || units.length == 0) {\n        return 0;\n    }\n    return Math.max(0, Math.min(0, Math.max(0, Math.min(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0, Math.max(0,"}], "metadata": {"task_id": "Trail-Sense/396", "ground_truth": "        return when (units) {\r\n            PressureUnits.Inhg, PressureUnits.Psi -> 2\r\n            else -> 1\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Units.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nfun getDecimalPlaces(units: DistanceUnits): Int {\r\n        return if (units.isLarge()){", "choices": [{"text": "\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/397", "ground_truth": "            2\r\n        } else {\r\n            0\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Units.kt"}}
{"prompt": "import androidx.annotation.StyleableRes\nimport androidx.annotation.StyleRes\nimport androidx.annotation.AttrRes\nimport android.view.View\nimport android.util.AttributeSet\nimport android.content.res.TypedArray\nfun View.parse(\r\n    attrs: AttributeSet?,\r\n    @StyleableRes res: IntArray,\r\n    @AttrRes defStyleAttr: Int = 0,\r\n    @StyleRes defStyleRes: Int = 0,\r\n    block: TypedArray.() -> Unit\r\n) {\r\n    val arr = context.theme.obtainStyledAttributes(\r\n        attrs,\r\n        res,\r\n        defStyleAttr,", "choices": [{"text": "\n        defStyleRes,\r\n        block\r\n    );\r\n    return arr;\r\n}"}], "metadata": {"task_id": "Trail-Sense/398", "ground_truth": "        defStyleRes\r\n    )\r\n    arr.block()\r\n    arr.recycle()\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\AttributeExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nfun show(\r\n        location: Coordinate,\r\n        elevation: Float,\r\n        speed: Float,\r\n        destination: Beacon,\r\n        declination: Float,\r\n        usingTrueNorth: Boolean = true\r\n    ) {\r\n        destinationPanel.show(\r\n            location,\r\n            elevation,\r\n            speed,", "choices": [{"text": "\n            destination,\r\n            declination,\r\n            usingTrueNorth\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/400", "ground_truth": "            destination,\r\n            declination,\r\n            usingTrueNorth\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\BeaconDestinationView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.CustomUiUtils\nimport com.kylecorry.trail_sense.tools.beacons.domain.BeaconIcon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport androidx.core.view.setPadding\nimport android.widget.ImageButton\nprivate fun addButton(icon: BeaconIcon?) {\r\n        val button = ImageButton(context, null)\r\n        button.setImageResource(icon?.icon ?: R.drawable.bubble)\r\n        CustomUiUtils.setButtonState(button, false)\r\n        button.setPadding(Resources.dp(context, 16f).toInt())\r\n        button.setOnClickListener {", "choices": [{"text": "\n            context.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    CustomUiUtils.setButtonState(button, true)\r\n                }\r\n            })\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/403", "ground_truth": "            this.icon = icon\r\n            changeListener?.invoke(icon)\r\n        }\r\n        flex.addView(button)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\BeaconIconPickerView.kt"}}
{"prompt": "import com.kylecorry.andromeda.camera.Camera\nfun stop() {\r\n        camera?.stop(this::onCameraUpdate)\r\n        camera = null\r\n        keepScreenOn = false", "choices": [{"text": "\n        onCameraUpdate = null\r\n        camera = null\r\n        keepScreenOn = false\r\n        onCameraUpdate = null\r\n    }"}], "metadata": {"task_id": "Trail-Sense/406", "ground_truth": "        imageListener = null\r\n        synchronized(startLock) {\r\n            isStarted = false\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CameraView.kt"}}
{"prompt": "import java.io.File\nsuspend fun capture(file: File): Boolean {\r\n        synchronized(this) {\r\n            if (isCapturing) {\r\n                return true\r\n            }\r\n            isCapturing = true\r\n        }\r\n        val success = camera?.takePhoto(file) ?: false", "choices": [{"text": "\n        if (!success) {\r\n            return false\r\n        }\r\n        isCapturing = false\r\n        return true\r\n    }"}], "metadata": {"task_id": "Trail-Sense/407", "ground_truth": "        synchronized(this) {\r\n            isCapturing = false\r\n        }\r\n        return success\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CameraView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.toRelativeDistance\nimport com.kylecorry.trail_sense.shared.Units\nimport com.kylecorry.sol.units.Distance\noverride fun format(value: Float): String {\r\n        val distance = Distance(value, fromUnits).convertTo(toUnits).let {\r\n            if (relative) {\r\n                it.toRelativeDistance()\r\n            } else {\r\n                it\r\n            }\r\n        }\r\n        return formatter.formatDistance(", "choices": [{"text": "\n            distance,\r\n            fromUnits,\r\n            toUnits\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/412", "ground_truth": "            distance,\r\n            Units.getDecimalPlaces(distance.units),\r\n            false\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\chart\\label\\DistanceChartLabelFormatter.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geography.CoordinateFormatter.parse\nprivate fun onChange() {\r\n        val locationText = locationEdit.text.toString()\r\n        _coordinate = Coordinate.parse(locationText)\r\n        errorHandler.stop()\r\n        if (_coordinate == null && locationText.isNotEmpty()) {\r\n            errorHandler.once(Duration.ofSeconds(2))", "choices": [{"text": "\n        } else {\r\n            errorHandler.once(Duration.ofSeconds(1))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/415", "ground_truth": "        } else {\r\n            locationEdit.error = null\r\n        }\r\n        changeListener?.invoke(_coordinate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CoordinateInputView.kt"}}
{"prompt": "import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n        gestureDetector.onTouchEvent(event)\r\n        if (event.action == MotionEvent.ACTION_UP) {\r\n            scrollToOption(selected)\r\n            if (selected != lastSelection){\r\n                selectionChangeListener(selected)\r\n                lastSelection = selected", "choices": [{"text": "\n            }\r\n            return true\r\n        }\r\n        return false\r\n    }"}], "metadata": {"task_id": "Trail-Sense/427", "ground_truth": "            }\r\n        }\r\n        invalidate()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DialSelectView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\noverride fun getAmount(value: Distance): Number {\r\n        return if (showSecondaryAmount) {", "choices": [{"text": "\r\n            return value;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/430", "ground_truth": "            floor(value.distance)\r\n        } else {\r\n            value.distance\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DistanceInputView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\noverride fun getSecondaryAmount(value: Distance): Number? {\r\n        return if (showSecondaryAmount) {\r\n            val inches = (value.distance % 1f) * 12\r\n            if (inches == 0f) {\r\n                null\r\n            } else {\r\n                inches", "choices": [{"text": "\n            }\r\n        } else {\r\n            return value.distance\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/432", "ground_truth": "            }\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DistanceInputView.kt"}}
{"prompt": "import java.time.Duration\nprivate fun onDurationTextChanged(shouldEvent: Boolean = true) {\r\n        val h = durationText.substring(0, 2).toInt()\r\n        val m = durationText.substring(2, 4).toInt()\r\n        val s = durationText.substring(4, 6).toInt()\r\n        duration = Duration.ofHours(h.toLong()).plusMinutes(m.toLong()).plusSeconds(s.toLong())", "choices": [{"text": "\n        if (shouldEvent) {\r\n            durationText.setText(duration.toString())\r\n        } else {\r\n            durationText.setText(duration.toString())\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/435", "ground_truth": "        updateTextView()\r\n        if (shouldEvent) {\r\n            changeListener?.invoke(duration)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DurationInputView.kt"}}
{"prompt": "private fun mySetup() {\r\n        setPanLimit(PAN_LIMIT_OUTSIDE)", "choices": [{"text": "\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n        setPanLimit(PAN_LIMIT_INSIDE)\r\n       "}], "metadata": {"task_id": "Trail-Sense/444", "ground_truth": "        maxScale = 6f\r\n        alwaysZoomDoubleTap = true\r\n        alwaysZoomDoubleTapZoomScale = 2f\r\n        setup()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "import kotlin.math.max\nimport com.kylecorry.sol.math.geometry.Size\noverride fun onImageLoaded() {\r\n        super.onImageLoaded()\r\n        val rotatedImageSize = Size(imageWidth.toFloat(), imageHeight.toFloat()).rotate(rotationOffset)\r\n        val percentIncrease = max(\r\n            rotatedImageSize.width / imageWidth,\r\n            rotatedImageSize.height / imageHeight", "choices": [{"text": "\n        )\r\n        if (percentIncrease < 0) {\r\n            percentIncrease = 0\r\n        }\r\n        imageWidth = rotatedImageSize.width\r\n        imageHeight = rotatedImageSize.height\r\n        if (percentIncrease < 0) {\r\n            percentIncrease = 0\r\n        }\r\n        imageWidth = Math.max(imageWidth, percentIncrease)\r\n        imageHeight = Math.max(imageHeight, percentIncrease)\r\n        if (imageWidth < 0) {\r\n            imageWidth = 0\r\n        }\r"}], "metadata": {"task_id": "Trail-Sense/445", "ground_truth": "        )\r\n        setMinimumScaleType(SCALE_TYPE_CUSTOM)\r\n        minScale /= percentIncrease\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "import android.graphics.PointF\nprotected fun toView(\r\n        sourceX: Float,\r\n        sourceY: Float,\r\n        withRotation: Boolean = false\r\n    ): PointF? {\r\n        val source = PointF(sourceX, sourceY)\r\n\r\n        // Apply the scale and translate\r\n        val view = sourceToViewCoord(source.x, source.y) ?: return null\r\n\r\n        // Apply the rotation\r\n        if (withRotation){\r\n            transform(view, inPlace = true){\r\n                postRotate(-imageRotation + rotationOffset, width / 2f, height / 2f)", "choices": [{"text": "\n            }\r\n        } else {\r\n            transform(view, inPlace = false){\r\n                postRotate(imageRotation + rotationOffset, width / 2f, height / 2f)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/447", "ground_truth": "            }\r\n        }\r\n\r\n        return view\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "import android.graphics.PointF\nprotected fun toSource(\r\n        viewX: Float,\r\n        viewY: Float,\r\n        withRotation: Boolean = false\r\n    ): PointF? {\r\n        val view = PointF(viewX, viewY)\r\n\r\n        // Remove the rotation\r\n        if (withRotation) {\r\n            transform(view, invert = true, inPlace = true) {\r\n                postRotate(-imageRotation + rotationOffset, width / 2f, height / 2f)\r\n            }", "choices": [{"text": "\n        } else {\r\n            postRotate(imageRotation + rotationOffset, width / 2f, height / 2f)\r\n        }\r\n\r\n        return view\r\n    }"}], "metadata": {"task_id": "Trail-Sense/448", "ground_truth": "        }\r\n\r\n        // Remove the scale and translate\r\n        return viewToSourceCoord(view.x, view.y)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "fun report(error: UserError) {\r\n        if (!prefs.errors.canShowError(error.reason)) {\r\n            return\r\n        }\r\n        synchronized(this) {\r\n            errors.removeAll { it.reason == error.reason }\r\n            errors.add(error)", "choices": [{"text": "\n            errors.add(error)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/450", "ground_truth": "            errors.sortBy { it.reason.id }\r\n        }\r\n        displayNextError()\r\n        show()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "val errors MutableList<UserError>\nval prefs\nval binding ViewErrorBannerBinding\n fun dismissAll() {", "choices": [{"text": "\n    dismissAll(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null"}], "metadata": {"task_id": "Trail-Sense/452", "ground_truth": "        synchronized(this) {\r\n            errors.clear()\r\n        }\r\n        displayNextError()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "private fun displayNextError() {\r\n        val first = synchronized(this) {\r\n            errors.firstOrNull()\r\n        }\r\n        if (first != null) {\r\n            displayError(first)", "choices": [{"text": "\n        } else {\r\n            displayError(null)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/453", "ground_truth": "        } else {\r\n            onAction = null\r\n            hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.core.view.isVisible\nprivate fun displayError(error: UserError) {\r\n        binding.errorText.text = error.title\r\n        binding.errorAction.text = error.action\r\n        binding.errorIcon.setImageResource(error.icon)\r\n        onAction = error.onAction\r\n        binding.errorAction.isVisible = !error.action.isNullOrEmpty()\r\n        overallAction = if (error.action == null) {", "choices": [{"text": "\n            binding.errorText.setVisibility(View.GONE)\r\n            binding.errorIcon.setVisibility(View.VISIBLE)\r\n        } else {\r\n            binding.errorText.setVisibility(View.VISIBLE)\r\n            binding.errorIcon.setVisibility(View.GONE)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/454", "ground_truth": "            error.onAction\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "import androidx.core.view.isVisible\nimport android.view.View\nfun setOverlay(overlay: View) {\r\n        this.overlay?.setOnClickListener(null)\r\n        overlay.isVisible = isVisible", "choices": [{"text": "\n        this.overlay.setOnClickListener(overlay.onClickListener)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/455", "ground_truth": "        this.overlay = overlay\r\n        this.overlay?.setOnClickListener {\r\n            hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\FloatingActionButtonMenu.kt"}}
{"prompt": "import androidx.core.view.isVisible\nvar fab FloatingActionButton?\nvar overlay View?\nvar onMenuItemClick MenuItem?.OnMenuItemClickListener?\nfun toggle() {\r\n        if (isVisible) {", "choices": [{"text": "\n            fab.setVisibility(View.VISIBLE);\r\n            overlay.setVisibility(View.GONE);\r\n        } else {\r\n            fab.setVisibility(View.GONE);\r\n            overlay.setVisibility(View.VISIBLE);\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/458", "ground_truth": "            hide()\r\n        } else {\r\n            show()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\FloatingActionButtonMenu.kt"}}
{"prompt": "import android.graphics.Color\nimport android.graphics.Bitmap\nprivate fun drawProgress(){\r\n        val progressBitmap = mask(backgroundBitmap){\r\n            fill(progressColor)\r\n            val w = backgroundBitmap.width.toFloat()\r\n            val h = backgroundBitmap.height.toFloat()\r\n\r\n            if (horizontal){\r\n                rect(0f, h, w * progress, h)\r\n            } else {\r\n                rect(0f, h * (1 - progress), w, h * progress)\r\n            }", "choices": [{"text": "\n\r\n            if (horizontal){\r\n                rect(0f, h, w * progress, h * progress)\r\n            } else {\r\n                rect(0f, h * (1 - progress), w * progress, h * progress)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/462", "ground_truth": "        }\r\n\r\n        image(progressBitmap, width / 2f, height / 2f)\r\n        progressBitmap.recycle()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaskedProgressView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport android.widget.ArrayAdapter\nfun setItems(items: List<String>) {\r\n        val adapter = ArrayAdapter(\r\n            context,\r\n            R.layout.spinner_item_plain,", "choices": [{"text": "\n            items,\r\n            R.id.spinner_item_text,\r\n            R.string.spinner_item_text,\r\n            R.string.spinner_item_text,\r\n            R.string.spinner_item_text,\r\n            R.string.spinner_item_text,\r\n            R.string.spinner_item_text,\r\n            R.string.spinner_item_text,\r\n            R.string.spinner_item_text,\r\n            R.string.spinner_item_"}], "metadata": {"task_id": "Trail-Sense/464", "ground_truth": "            R.id.item_name,\r\n            items\r\n        )\r\n        spinner.adapter = adapter\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaterialSpinnerView.kt"}}
{"prompt": "private fun setSelectedUnitText(unit: Units?) {\r\n        if (unit != null) {\r\n            val displayUnit = units.firstOrNull { it.unit == unit }\r\n            if (displayUnit == null) {\r\n                _unit = null\r\n                unitBtn.text = \"\"\r\n            } else {\r\n                unitBtn.text = displayUnit.shortName", "choices": [{"text": "\n                unitBtn.text = displayUnit.longName\r\n            }\r\n        } else {\r\n            _unit = null\r\n            unitBtn.text = \"\"\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/467", "ground_truth": "            }\r\n        } else {\r\n            unitBtn.text = \"\"\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MultipartUnitInputView.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.CanvasDrawer\nimport android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        if (!isSetup) {\r\n            drawer = CanvasDrawer(context, canvas)\r\n            setup()\r\n            isSetup = true", "choices": [{"text": "\n        } else {\r\n            drawer.draw(canvas)\r\n            isSetup = false\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/471", "ground_truth": "        }\r\n\r\n        drawer.canvas = canvas\r\n        draw()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Notepad.kt"}}
{"prompt": "import kotlin.math.max\nfun draw() {\r\n        val count = max(height / lineHeight, lineCount)\r\n        var baseline = getLineBounds(0, bounds)\r\n        for (i in 0 until count) {\r\n            drawer.line(\r\n                bounds.left.toFloat(),\r\n                baseline.toFloat() + offset,\r\n                bounds.right.toFloat(),", "choices": [{"text": "\n                baseline.toFloat() + offset,\r\n                bounds.bottom.toFloat() + offset,\r\n                bounds.top.toFloat() + offset\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/473", "ground_truth": "                baseline.toFloat() + offset\r\n            )\r\n            baseline += lineHeight\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Notepad.kt"}}
{"prompt": "private fun loadImage(path: String) {\r\n\r\n        val border = dp(48f).toInt()\r\n\r\n        val w = if (mapRotation == 0f || mapRotation == 180f) {\r\n            width\r\n        } else {\r\n            height\r\n        } - border\r\n\r\n        val h = if (mapRotation == 0f || mapRotation == 180f) {\r\n            height\r\n        } else {\r\n            width\r\n        } - border\r\n\r\n        val bitmap = files.bitmap(path, w, h) ?: return", "choices": [{"text": "\n\r\n        if (bitmap == null) {\r\n            return null\r\n        }\r\n\r\n        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight())\r\n    }"}], "metadata": {"task_id": "Trail-Sense/474", "ground_truth": "        image = bitmap.resizeToFit(w, h)\r\n        if (image != bitmap) {\r\n            bitmap.recycle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.infrastructure.fixPerspective\nimport android.graphics.Color\nprivate fun drawPreviewCanvas() {\r\n        val bitmap = image ?: return\r\n        val warped = bitmap.fixPerspective(getBounds(), false, Color.WHITE)\r\n        push()\r\n        translate(-imageX, -imageY)\r\n        val newImageX = (width - warped.width * scale) / 2f\r\n        val newImageY = (height - warped.height * scale) / 2f\r\n        translate(newImageX, newImageY)\r\n        image(warped, 0f, 0f)", "choices": [{"text": "        pop()\r\n        image(warped, 0f, 0f)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/475", "ground_truth": "        pop()\r\n        if (warped != bitmap) {\r\n            warped.recycle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "fun setImage(path: String) {", "choices": [{"text": "\n    if (path == null || path.length == 0) {\n        return null;\n    }\n    if (path.length == 1) {\n        return path[0];\n    }\n    if (path.length == 2) {\n        return path[1];\n    }\n    if (path.length == 3) {\n        return path[2];\n    }\n    if (path.length == 4) {\n        return path[3];\n    }\n    if (path.length == 5) {\n        return path[4];\n    }"}], "metadata": {"task_id": "Trail-Sense/478", "ground_truth": "        imagePath = path\r\n        image = null\r\n        linesLoaded = false\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "fun clearImage() {\r\n        imagePath = null\r\n        val oldImage = image", "choices": [{"text": "\n        if (oldImage!= null) {\r\n            image = oldImage\r\n        } else {\r\n            image = null\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/479", "ground_truth": "        image = null\r\n        oldImage?.recycle()\r\n        linesLoaded = false\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "private fun setSelectedUnitText(unit: Units?) {\r\n        if (unit != null) {\r\n            val displayUnit = units.firstOrNull { it.unit == unit }\r\n            if (displayUnit == null) {\r\n                _unit = null\r\n                unitBtn.text = \"\"\r\n            } else {\r\n                unitBtn.text = displayUnit.shortName", "choices": [{"text": "\n                unitBtn.text = displayUnit.longName\r\n            }\r\n        } else {\r\n            _unit = null\r\n            unitBtn.text = \"\"\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/484", "ground_truth": "            }\r\n        } else {\r\n            unitBtn.text = \"\"\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\UnitInputView.kt"}}
{"prompt": "import androidx.core.view.setPadding\nimport android.widget.LinearLayout\nimport android.view.ViewGroup\nimport android.view.View\nfun linear(\r\n        views: List<View>,\r\n        width: Int = ViewGroup.LayoutParams.MATCH_PARENT,\r\n        height: Int = ViewGroup.LayoutParams.WRAP_CONTENT,\r\n        orientation: Int = LinearLayout.VERTICAL,\r\n        padding: Int = 0\r\n    ): View {\r\n        val layout = LinearLayout(views.first().context)\r\n        layout.layoutParams = ViewGroup.LayoutParams(width, height)\r\n        layout.orientation = orientation\r\n        layout.setPadding(padding, padding, padding, padding)\r\n\r\n        views.forEach { view ->", "choices": [{"text": " {\r\n            view.setLayoutParams(layout.layoutParams)\r\n        }\r\n        return layout\r\n    }"}], "metadata": {"task_id": "Trail-Sense/486", "ground_truth": "            layout.addView(view)\r\n        }\r\n\r\n        return layout\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Views.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.RiseSetTransitTimes\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMoonTimes(location: Coordinate, date: LocalDate): RiseSetTransitTimes {\r\n        return Astronomy.getMoonEvents(\r\n            date.atStartOfDay().toZonedDateTime(),", "choices": [{"text": "\n            location.atStartOfDay().toZonedDateTime(),\r\n            date.atEndOfDay().toZonedDateTime()\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/491", "ground_truth": "            location,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getCenteredMoonAltitudes(\r\n        location: Coordinate,\r\n        time: ZonedDateTime\r\n    ): List<Reading<Float>> {\r\n        val startTime = time.minusHours(12)\r\n        val endTime = time.plusHours(12)\r\n        return Time.getReadings(\r\n            startTime,\r\n            endTime,", "choices": [{"text": "\n            location.getLatitude(),\r\n            location.getLongitude()\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/492", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getMoonAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getMoonAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),", "choices": [{"text": "\n            ZoneId.systemDefault()\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/493", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getMoonAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun isMoonUp(location: Coordinate, time: ZonedDateTime = ZonedDateTime.now(clock)): Boolean {\r\n        return Astronomy.isMoonUp(\r\n            time,", "choices": [{"text": "\n            location,\r\n            Astronomy.isMoonUp(\r\n                time,\r\n                Astronomy.isMoonUp(\r\n                    time,\r\n                    Astronomy.isMoonUp(\r\n                        time,\r\n                        Astronomy.isMoonUp(\r\n                            time,\r\n                            Astronomy.isMoonUp(\r\n                                time,\r\n                                Astronomy.isMoonUp(\r\n                            time,\r\n                            Astronomy.isMoonUp(\r\n                                time,\r\n                                Astr"}], "metadata": {"task_id": "Trail-Sense/494", "ground_truth": "            location,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.Astronomy\nimport com.kylecorry.sol.math.Range\nfun getMoonAboveHorizonTimes(location: Coordinate, time: ZonedDateTime): Range<ZonedDateTime>? {\r\n        return Astronomy.getMoonAboveHorizonTimes(\r\n            location,", "choices": [{"text": "\n            time\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/495", "ground_truth": "            time,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.SunTimesMode\nimport com.kylecorry.sol.science.astronomy.RiseSetTransitTimes\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getSunTimes(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date: LocalDate\r\n    ): RiseSetTransitTimes {\r\n        return Astronomy.getSunEvents(\r\n            date.atStartOfDay().toZonedDateTime(),", "choices": [{"text": "\n            location.atEndOfDay().toZonedDateTime(),\r\n            sunTimesMode\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/496", "ground_truth": "            location,\r\n            sunTimesMode,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.SunTimesMode\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getLengthOfDay(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date: LocalDate\r\n    ): Duration {\r\n        return Astronomy.getDaylightLength(\r\n            date.atStartOfDay().toZonedDateTime(),", "choices": [{"text": "\n            location,\r\n            sunTimesMode,\r\n            date.atEndOfDay().toZonedDateTime()\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/497", "ground_truth": "            location,\r\n            sunTimesMode,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getSunAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),", "choices": [{"text": "\n            ZoneId.systemDefault(),\r\n            location.getLatitude(),\r\n            location.getLongitude(),\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false"}], "metadata": {"task_id": "Trail-Sense/498", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getSunAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getCenteredSunAltitudes(\r\n        location: Coordinate,\r\n        time: ZonedDateTime\r\n    ): List<Reading<Float>> {\r\n        val startTime = time.minusHours(12)\r\n        val endTime = time.plusHours(12)\r\n        return Time.getReadings(\r\n            startTime,\r\n            endTime,", "choices": [{"text": "\n            location.getLatitude(),\r\n            location.getLongitude()\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/499", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getSunAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMeteorShowerPeakAltitude(peak: MeteorShowerPeak, location: Coordinate): Float {\r\n        return Astronomy.getMeteorShowerAltitude(", "choices": [{"text": "\n            Astronomy.getMeteorShowerAltitude(peak, location),\r\n            Astronomy.getMeteorShowerAltitude(peak, location),\r\n            Astronomy.getMeteorShowerAltitude(peak, location),\r\n            Astronomy.getMeteorShowerAltitude(peak, location),\r\n            Astronomy.getMeteorShowerAltitude(peak, location),\r\n            Astronomy.getMeteorShowerAltitude(peak, location),\r\n            Astronomy.getMet"}], "metadata": {"task_id": "Trail-Sense/504", "ground_truth": "            peak.shower,\r\n            location,\r\n            peak.peak.toInstant()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMeteorShowerPeakAzimuth(peak: MeteorShowerPeak, location: Coordinate): Bearing {\r\n        return Astronomy.getMeteorShowerAzimuth(", "choices": [{"text": "\n            Astronomy.getMeteorShowerPeakAzimuth(peak, location),\r\n            Astronomy.getMeteorShowerPeakAzimuth(peak, location)\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/505", "ground_truth": "            peak.shower,\r\n            location,\r\n            peak.peak.toInstant()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.sensors.LocationSubsystem\nimport com.kylecorry.trail_sense.shared.commands.generic.ComposedCommand\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\noverride suspend fun execute() = onDefault {\r\n        val location = LocationSubsystem.getInstance(context).location\r\n\r\n        if (location == Coordinate.zero) {\r\n            return@onDefault\r\n        }\r\n\r\n        val command = ComposedCommand(\r\n            LunarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),", "choices": [{"text": "\n            LunarEclipseAlertCommand.getInstance(context),\r\n            SolarEclipseAlertCommand.getInstance(context)\r\n        );\r\n\r\n        command.execute(location);\r\n    }"}], "metadata": {"task_id": "Trail-Sense/512", "ground_truth": "            MeteorShowerAlertCommand(context)\r\n        )\r\n\r\n        command.execute(location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\AstronomyAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.astronomy.domain.Eclipse\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nprivate fun getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val timeSpan = formatService.formatTimeSpan(\r\n            eclipse.start,\r\n            eclipse.end,\r\n            true\r\n        )", "choices": [{"text": "\n        return formatService.formatTimeSpan(\r\n            timeSpan.seconds,\r\n            timeSpan.minutes,\r\n            timeSpan.hours,\r\n            true\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/513", "ground_truth": "\r\n        val eclipseAmount = EclipseFormatter.type(context, eclipse)\r\n\r\n        return \"$timeSpan\\n$eclipseAmount\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\LunarEclipseAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FormatService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport android.content.Context\nprivate fun getShowerDescription(context: Context, shower: MeteorShowerPeak): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val peak = formatService.formatRelativeDateTime(shower.peak, includeSeconds = false)", "choices": [{"text": "\n\r\n        return formatService.formatRelativeDateTime(peak, includeSeconds = false)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/514", "ground_truth": "\r\n        val rate = context.getString(R.string.meteors_per_hour, shower.shower.rate)\r\n\r\n        return \"$peak\\n$rate\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\MeteorShowerAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.astronomy.domain.Eclipse\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nprivate fun getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val timeSpan = formatService.formatTimeSpan(\r\n            eclipse.start,\r\n            eclipse.end,\r\n            true\r\n        )", "choices": [{"text": "\n        return formatService.formatTimeSpan(\r\n            timeSpan.seconds,\r\n            timeSpan.minutes,\r\n            timeSpan.hours,\r\n            true\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/515", "ground_truth": "\r\n        val eclipseAmount = EclipseFormatter.type(context, eclipse)\r\n\r\n        return \"$timeSpan\\n$eclipseAmount\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\SolarEclipseAlertCommand.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.kylecorry.trail_sense.tools.astronomy.infrastructure.commands.SunsetAlarmCommand\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        context ?: return\r\n        val shouldSend = UserPreferences(context).astronomy.sendSunsetAlerts\r\n        if (!shouldSend) {\r\n            return\r\n        }\r\n\r\n        val pendingResult = goAsync()\r\n\r\n        val command = SunsetAlarmCommand(context.applicationContext)\r\n        val scope = CoroutineScope(Dispatchers.Default)\r\n        scope.launch {\r\n            try {\r\n                command.execute()", "choices": [{"text": "\n            } catch (e) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/518", "ground_truth": "            } finally {\r\n                pendingResult.finish()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\receivers\\SunsetAlarmReceiver.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestScheduleExactAlarms\nimport com.kylecorry.trail_sense.shared.permissions.RequestBackgroundLocationCommand\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nfun <T> enable(\r\n            fragment: T,\r\n            shouldRequestPermissions: Boolean\r\n        ) where T : Fragment, T : IPermissionRequester {\r\n            UserPreferences(fragment.requireContext()).astronomy.sendSunsetAlerts = true\r\n            if (shouldRequestPermissions) {\r\n                fragment.requestScheduleExactAlarms {\r\n                    start(fragment.requireContext())\r\n                    RequestBackgroundLocationCommand(fragment).execute()", "choices": [{"text": "\n                }\r\n            } else {\r\n                start(fragment.requireContext())\r\n            }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/520", "ground_truth": "                }\r\n            } else {\r\n                start(fragment.requireContext())\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\receivers\\SunsetAlarmReceiver.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nprivate fun requestLocationUpdate() {\r\n        location = gps.location\r\n        if (gps.hasValidReading) {", "choices": [{"text": "\n            gps.updateLocation(location)\r\n        } else {\r\n            location = new Location()\r\n            gps.updateLocation(location)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/532", "ground_truth": "            onLocationUpdate()\r\n        } else {\r\n            gps.start(this::onLocationUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "import java.time.LocalDate\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nprivate suspend fun updateMoonUI() {\r\n        if (!isBound) {\r\n            return\r\n        }\r\n\r\n        val displayDate = binding.displayDate.date\r\n\r\n        val moonPhase = withContext(Dispatchers.Default) {\r\n            if (displayDate == LocalDate.now()) {\r\n                astronomyService.getCurrentMoonPhase()\r\n            } else {\r\n                astronomyService.getMoonPhase(displayDate)\r\n            }\r\n        }", "choices": [{"text": "\n        if (moonPhase == null) {\r\n            return\r\n        }\r\n\r\n        binding.moonPhase = moonPhase\r\n        updateMoonUI()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/534", "ground_truth": "\r\n        withContext(Dispatchers.Main) {\r\n            chart.setMoonImage(getMoonImage(moonPhase.phase))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun updateAstronomyDetails() {\r\n        if (!isBound) {\r\n            return\r\n        }\r\n\r\n        val displayDate = binding.displayDate.date\r\n\r\n        onDefault {\r\n            val declination = if (!prefs.compass.useTrueNorth) getDeclination() else 0f\r\n\r\n            val items = producers.map { it.getListItem(displayDate, location, declination) }\r\n\r\n            onMain {", "choices": [{"text": "\n                for (val item : items) {\r\n                    item.updateAstronomyDetails(displayDate, location, declination)\r\n                }\r\n            }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/537", "ground_truth": "                binding.astronomyDetailList.setItems(items.filterNotNull())\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun restartSunsetAlerts(shouldRequestPermissions: Boolean){\r\n        if (!prefs.astronomy.sendSunsetAlerts) {", "choices": [{"text": "\n            prefs.astronomy.sendSunsetAlerts = true;\r\n        } else {\r\n            prefs.astronomy.sendSunsetAlerts = false;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/538", "ground_truth": "            return\r\n        }\r\n\r\n        SunsetAlarmReceiver.enable(this, shouldRequestPermissions)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomySettingsFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.ui.Colors.withAlpha\nimport androidx.core.text.scale\nimport androidx.core.text.color\nimport androidx.core.text.buildSpannedString\nprivate fun title(title: CharSequence, subtitle: CharSequence?): CharSequence {\r\n        return buildSpannedString {\r\n            append(title)\r\n            if (subtitle != null) {\r\n                color(secondaryColor.withAlpha(220)) {\r\n                    scale(subtitleScale) {\r\n                        append(\"  \u2022  \")\r\n                        append(subtitle)", "choices": [{"text": "\n                    }\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/542", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "import java.time.ZonedDateTime\nprivate fun formatTime(time: ZonedDateTime?): String {", "choices": [{"text": "\n    if (time == null) {\n        return null;\n    } else {\n        return formatTime(time);\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/543", "ground_truth": "        if (time == null) {\r\n            return \"--:--\"\r\n        }\r\n        return formatter.formatTime(time, false)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItemDataAlignment\nimport com.kylecorry.andromeda.views.list.ListItemData\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.views.list.ListIcon\nimport com.google.android.flexbox.JustifyContent\nimport com.google.android.flexbox.AlignItems\nprotected fun list(\r\n        id: Long,\r\n        title: CharSequence,\r\n        subtitle: CharSequence? = null,\r\n        icon: ListIcon? = null,\r\n        data: List<ListItemData> = listOf(),\r\n        onClick: (() -> Unit)? = null\r\n    ): ListItem {\r\n        return ListItem(\r\n            id,\r\n            title(title, subtitle),\r\n            null,\r\n            icon = icon,\r\n            trailingIcon = onClick?.let { ResourceListIcon(R.drawable.ic_keyboard_arrow_right){ onClick() } },\r\n            data = data,\r\n            dataAlignment = ListItemDataAlignment(\r\n                justifyContent = JustifyContent.SPACE_BETWEEN, alignItems = AlignItems.CENTER", "choices": [{"text": "\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/545", "ground_truth": "            )\r\n        ) {\r\n            onClick?.invoke()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ListItemData\nimport com.kylecorry.andromeda.views.list.ListItem\nprotected fun time(\r\n        time: ZonedDateTime?,\r\n        displayDate: LocalDate? = time?.toLocalDate(),\r\n        todayLabel: CharSequence? = null\r\n    ): List<ListItemData> {\r\n        val label = if (time != null && time.toLocalDate() != displayDate) {\r\n            formatter.formatRelativeDate(time.toLocalDate(), true)", "choices": [{"text": "\n        } else {\r\n            todayLabel\r\n        }\r\n        return super.time(time, displayDate, todayLabel)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/549", "ground_truth": "        } else {\r\n            todayLabel\r\n        }\r\n        return listOf(datapoint(formatTime(time), label))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nsuspend fun getSunCalibrator(location: Coordinate): IARCalibrator = onDefault {\r\n        ARCenteredCalibrator(\r\n            AugmentedRealityCoordinate(\r\n                AugmentedRealityUtils.toEastNorthUp(\r\n                    astro.getSunAzimuth(location).value,\r\n                    astro.getSunAltitude(location),", "choices": [{"text": "\n                ),\r\n            ),\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/550", "ground_truth": "                    Float.MAX_VALUE\r\n                ), true\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCalibratorFactory.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nsuspend fun getMoonCalibrator(location: Coordinate): IARCalibrator = onDefault {\r\n        ARCenteredCalibrator(\r\n            AugmentedRealityCoordinate(\r\n                AugmentedRealityUtils.toEastNorthUp(\r\n                    astro.getMoonAzimuth(location).value,\r\n                    astro.getMoonAltitude(location),", "choices": [{"text": "\n                ),\r\n            ),\r\n        ),\r\n    }"}], "metadata": {"task_id": "Trail-Sense/551", "ground_truth": "                    Float.MAX_VALUE\r\n                ), true\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCalibratorFactory.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.views.CameraView\noverride suspend fun calibrateBearing(view: AugmentedRealityView, camera: CameraView): Float {\r\n        val actualReference = AugmentedRealityCoordinate(\r\n            view.getActualPoint(reference.position, true),\r\n            view.isTrueNorth\r\n        )", "choices": [{"text": "\n        if (actualReference == null) {\r\n            return 0.0f\r\n        }\r\n        return Math.sqrt(actualReference.x * actualReference.x + actualReference.y * actualReference.y + actualReference.z * actualReference.z)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/552", "ground_truth": "        return SolMath.deltaAngle(\r\n            view.azimuth,\r\n            actualReference.bearing\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCenteredCalibrator.kt"}}
{"prompt": "import com.kylecorry.sol.math.Vector2\nprivate fun getFocalLength(): Vector2? {", "choices": [{"text": "\n    return Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math"}], "metadata": {"task_id": "Trail-Sense/554", "ground_truth": "        if (focalLength == null) {\r\n            updateCalibration()\r\n        }\r\n        return focalLength\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.sol.math.Vector2\nprivate fun getOpticalCenter(): Vector2? {", "choices": [{"text": "\n    Vector2 result = new Vector2(0, 0);\n    result.set(0, 0);\n    result.set(1, 0);\n    result.set(2, 0);\n    result.set(3, 0);\n    result.set(4, 0);\n    result.set(5, 0);\n    result.set(6, 0);\n    result.set(7, 0);\n    result.set(8, 0);\n    result.set(9, 0);\n    result.set(10, 0);\n    result."}], "metadata": {"task_id": "Trail-Sense/555", "ground_truth": "        if (opticalCenter == null) {\r\n            updateCalibration()\r\n        }\r\n        return opticalCenter\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport android.graphics.Rect\nprivate fun getPreActiveArraySize(): Rect? {\r\n        if (preActiveArray == null) {\r\n            val activeArray = camera.getActiveArraySize(true) ?: return null\r\n            val rotation = camera.sensorRotation.toInt()\r\n            this.preActiveArray = if (rotation == 90 || rotation == 270) {\r\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            } else {", "choices": [{"text": "\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            }\r\n        } else {\r\n            Rect(preActiveArray.top, preActiveArray.left, preActiveArray.bottom, preActiveArray.right)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/556", "ground_truth": "                activeArray\r\n            }\r\n        }\r\n        return preActiveArray\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport android.graphics.Rect\nprivate fun getActiveArraySize(): Rect? {\r\n        if (activeArray == null) {\r\n            val activeArray = camera.getActiveArraySize(false) ?: return null\r\n            val rotation = camera.sensorRotation.toInt()\r\n            this.activeArray = if (rotation == 90 || rotation == 270) {\r\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            } else {", "choices": [{"text": "\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            }\r\n        } else {\r\n            Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/557", "ground_truth": "                activeArray\r\n            }\r\n        }\r\n        return activeArray\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport android.graphics.RectF\noverride fun getAngle(\r\n        x: Float,\r\n        y: Float,\r\n        imageRect: RectF,\r\n        fieldOfView: Size", "choices": [{"text": "\n    ): Float\n{\r\n    return Math.atan2(imageRect.top, imageRect.bottom) * 180 / Math.PI\r\n}"}], "metadata": {"task_id": "Trail-Sense/565", "ground_truth": "    ): Vector2 {\r\n        // TODO: Inverse perspective?\r\n        return linear.getAngle(x, y, imageRect, fieldOfView)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\SimplePerspectiveCameraAnglePixelMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\noverride fun getAugmentedRealityCoordinate(view: AugmentedRealityView): AugmentedRealityCoordinate {\r\n        return AugmentedRealityCoordinate(\r\n            AugmentedRealityUtils.toEastNorthUp(\r\n                view.location,\r\n                view.altitude,\r\n                location,", "choices": [{"text": "            ),\r\n            AugmentedRealityUtils.toEastNorthRight(\r\n                view.location,\r\n                view.altitude,\r\n                location,\r\n            ),\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/570", "ground_truth": "                getActualElevation(view)\r\n            ),\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\position\\GeographicARPoint.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nprivate fun getActualElevation(view: AugmentedRealityView): Float {\r\n        return if (isElevationRelative){", "choices": [{"text": "\n            view.getElevationRelative()\r\n        } else {\r\n            view.getElevation()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/571", "ground_truth": "            view.altitude + (elevation ?: 0f)\r\n        } else {\r\n            elevation ?: view.altitude\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\position\\GeographicARPoint.kt"}}
{"prompt": "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding.title.rightButton.setOnClickListener {\r\n            dismiss()\r\n        }\r\n\r\n        val preferences = ARLayersBottomSheetPreferenceFragment()\r\n        preferences.astronomyOverrideDate = astronomyOverrideDate\r\n        preferences.setOnAstronomyDateChangeListener {\r\n            astronomyOverrideDate = it\r\n        }", "choices": [{"text": "\n        super.onViewCreated(view, savedInstanceState)\r\n        binding.title.rightButton.setOnClickListener {\r\n            dismiss()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/574", "ground_truth": "        replaceChildFragment(\r\n            preferences,\r\n            binding.preferencesFragment.id\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\ARLayersBottomSheet.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.canvas.PixelCircle\nfun getViewLocation(view: AugmentedRealityView): PixelCircle {\r\n        val coordinates = point.getAugmentedRealityCoordinate(view)\r\n        val angularDiameter = point.getAngularDiameter(view)\r\n        val diameter = view.sizeToPixel(angularDiameter)", "choices": [{"text": "\n        return new PixelCircle(coordinates.x, coordinates.y, diameter.x, diameter.y)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/576", "ground_truth": "        return PixelCircle(\r\n            view.toPixel(coordinates),\r\n            diameter / 2f\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\ARMarker.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.R\nimport android.view.View\nprivate fun onSunFocused(time: ZonedDateTime): Boolean {\r\n        binding.arView.focusText =\r\n            getString(R.string.sun) + \"\\n\" + formatter.formatRelativeDateTime(", "choices": [{"text": "(time)) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R.string.sun) + \"\\n\" + getString(R"}], "metadata": {"task_id": "Trail-Sense/580", "ground_truth": "                time,\r\n                includeSeconds = false\r\n            )\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.astronomy.moon.MoonPhase\nimport android.view.View\nprivate fun onMoonFocused(time: ZonedDateTime, phase: MoonPhase): Boolean {\r\n        binding.arView.focusText =\r\n            getString(R.string.moon) + \"\\n\" + formatter.formatRelativeDateTime(\r\n                time,\r\n                includeSeconds = false\r\n            ) + \"\\n${formatter.formatMoonPhase(phase.phase)} (${\r\n                formatter.formatPercentage(", "choices": [{"text": "\n                    (\r\n                        (\r\n                            (\r\n                                (\r\n                                    (\r\n                                        (\r\n                                            (\r\n                                                (\r\n                                                    (\r\n                                                        (\r\n                                                            (\r\n                                                        (\r\n                                                            (\r\n                                                        (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                                            (\r\n                                "}], "metadata": {"task_id": "Trail-Sense/581", "ground_truth": "                    phase.illumination\r\n                )\r\n            })\"\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.dialog\nimport androidx.core.view.isVisible\nimport android.view.View\nprivate fun startCalibration() {\r\n        binding.calibrationPanel.isVisible = true\r\n        val isSunUp = astronomyService.isSunUp(binding.arView.location)\r\n        dialog(\r\n            getString(R.string.calibrate),\r\n            getString(\r\n                R.string.ar_calibration_instructions,\r\n                if (isSunUp) getString(R.string.sun) else getString(R.string.moon)\r\n            ),\r\n        ) { cancelled ->", "choices": [{"text": "\n            binding.calibrationPanel.setVisibility(View.GONE)\r\n            binding.calibrationPanel.setVisibility(View.VISIBLE)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/585", "ground_truth": "            if (cancelled) {\r\n                stopCalibration()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nprivate fun calibrate() {\r\n        inBackground {\r\n            val useGyro = userPrefs.augmentedReality.useGyroOnlyAfterCalibration\r\n            val calibrator = if (astronomyService.isSunUp(binding.arView.location)) {\r\n                calibrationFactory.getSunCalibrator(binding.arView.location)\r\n            } else {\r\n                calibrationFactory.getMoonCalibrator(binding.arView.location)", "choices": [{"text": "\n            }\r\n            if (useGyro) {\r\n                calibrationFactory.getGyroCalibrator(binding.arView.location)\r\n            } else {\r\n                calibrationFactory.getSunCalibrator(binding.arView.location)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/586", "ground_truth": "            }\r\n            binding.arView.calibrate(calibrator, useGyro)\r\n            stopCalibration()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.navigation.NavController\nimport androidx.core.os.bundleOf\nimport android.os.Bundle\nfun open(\r\n            navController: NavController,\r\n            mode: ARMode = ARMode.Normal,\r\n            extras: Bundle? = null\r\n        ) {\r\n            navController.navigate(\r\n                R.id.augmentedRealityFragment, bundleOf(", "choices": [{"text": "\n                    R.layout.fragment_augmented_reality,\r\n                    R.layout.fragment_augmented_reality,\r\n                    R.layout.fragment_augmented_reality,\r\n                    R.layout.fragment_augmented_reality,\r\n                    R.layout.fragment_augmented_reality,\r\n                    R.layout.fragment_augmented_reality,\r\n                    R.layout.fragment_augmented_reality,\r\n                    R.layout.fragment_augmented_reality,\r"}], "metadata": {"task_id": "Trail-Sense/589", "ground_truth": "                    \"mode\" to mode.id,\r\n                    \"extras\" to extras\r\n                )\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.layers.ARLayer\nfun setLayers(layers: List<ARLayer>) {", "choices": [{"text": "\n    this.layers = layers;\n    return this;\n}"}], "metadata": {"task_id": "Trail-Sense/592", "ground_truth": "        synchronized(layerLock) {\r\n            this.layers.clear()\r\n            this.layers.addAll(layers)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.text\nprivate fun drawFocusText() {\r\n        val textToRender = focusText ?: return\r\n\r\n        drawText(\r\n            textToRender,", "choices": [{"text": "\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n            textToRender,\r\n           "}], "metadata": {"task_id": "Trail-Sense/596", "ground_truth": "            width / 2f,\r\n            height / 2f + reticleDiameter / 2f + dp(8f),\r\n            drawer.sp(16f)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "import com.kylecorry.sol.math.Vector3\nfun getActualPoint(point: Vector3, isPointTrueNorth: Boolean): Vector3 {\r\n        return if (isTrueNorth && !isPointTrueNorth) {\r\n            toTrueNorth.rotate(point)\r\n        } else if (!isTrueNorth && isPointTrueNorth) {", "choices": [{"text": "\n            toFalseNorth.rotate(point)\r\n        } else {\r\n            toTrueNorth.rotate(point)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/599", "ground_truth": "            fromTrueNorth.rotate(point)\r\n        } else {\r\n            point\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "fun unbind() {\r\n        owner?.lifecycle?.removeObserver(lifecycleObserver)\r\n        syncTimer.stop()", "choices": [{"text": "\n        owner?.lifecycle?.removeObserver(lifecycleObserver)\r\n        syncTimer.stop()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/601", "ground_truth": "        fovRunner.cancel()\r\n        cameraMapper = null\r\n        camera = null\r\n        owner = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.views.CameraView\nimport androidx.lifecycle.findViewTreeLifecycleOwner\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport android.view.ViewGroup\nfun bind(\r\n        camera: CameraView,\r\n        lifecycleOwner: LifecycleOwner? = null,\r\n        defaultLayoutParams: ViewGroup.LayoutParams = ViewGroup.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n    ) {\r\n        this.camera = camera\r\n        owner = lifecycleOwner ?: this.findViewTreeLifecycleOwner() ?: return\r\n\r\n        if (layoutParams == null) {\r\n            layoutParams = defaultLayoutParams", "choices": [{"text": "\n        } else {\r\n            this.layoutParams = layoutParams\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/602", "ground_truth": "        }\r\n\r\n        // Cancel fovRunner on pause\r\n        owner?.lifecycle?.addObserver(lifecycleObserver)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "val orientation\nvar backgroundFillColor Int\nvar hadFocus", "choices": [{"text": "\nvar hadFocusColor Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar hadFocusColorInt Int\nvar had"}], "metadata": {"task_id": "Trail-Sense/603", "ground_truth": "override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\r\n        previewRect = null\r\n        syncWithCamera()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        lineLayer.draw(drawer, view)", "choices": [{"text": "\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view)\r\n        lineLayer.draw(drawer, view"}], "metadata": {"task_id": "Trail-Sense/617", "ground_truth": "\r\n        labels.forEach {\r\n            drawLabel(drawer, view, it.second, it.first)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARGridLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun getPixel(view: AugmentedRealityView, bearing: Float): PixelCoordinate {\r\n        val offset = 2f\r\n        return view.toPixel(\r\n            AugmentedRealityCoordinate.fromSpherical(\r\n                bearing,\r\n                offset,", "choices": [{"text": "\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/618", "ground_truth": "                distance,\r\n                useTrueNorth\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARGridLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.ARLine\nfun setLines(lines: List<ARLine>) {", "choices": [{"text": "\n    this.lines = lines;\n    return this;\n}"}], "metadata": {"task_id": "Trail-Sense/620", "ground_truth": "        synchronized(lineLock) {\r\n            this.lines.clear()\r\n            this.lines.addAll(lines)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARLineLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.ARMarker\nfun setMarkers(markers: List<ARMarker>) {", "choices": [{"text": "\n    for (ARMarker marker: markers) {\n        if (marker!= null) {\n            this.markers.add(marker);\n        }\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/623", "ground_truth": "        synchronized(lock) {\r\n            this.markers.clear()\r\n            this.markers.addAll(markers)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride suspend fun update(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        val minimumPixelSize = drawer.dp(minimumDpSize)\r\n        val maximumPixelSize = maximumDpSize?.let { drawer.dp(it) } ?: Float.MAX_VALUE\r\n        renderedMarkers = synchronized(lock) {\r\n            markers.mapNotNull {\r\n                val circle = getCircle(it, view, minimumPixelSize, maximumPixelSize)", "choices": [{"text": "\n                drawer.drawCircle(circle, view, minimumPixelSize, maximumPixelSize)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/626", "ground_truth": "                    ?: return@mapNotNull null\r\n                it to circle\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.shared.canvas.PixelCircle\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        potentialFocusPoints.clear()\r\n        val center = PixelCoordinate(view.width / 2f, view.height / 2f)\r\n        val reticle = PixelCircle(center, view.reticleDiameter / 2f)\r\n        val markers = synchronized(lock) {\r\n            renderedMarkers.toList()\r\n        }\r\n        markers.forEach {\r\n            it.first.draw(view, drawer, it.second)", "choices": [{"text": "\n            it.second.draw(view, drawer, reticle)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/627", "ground_truth": "            if (reticle.intersects(it.second)) {\r\n                potentialFocusPoints.add(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.extensions.squaredDistanceTo\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.SolMath.square\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toLocation(pixel: PixelCoordinate): Coordinate? {\r\n        val squareDistance = pixel.squaredDistanceTo(center)\r\n        if (squareDistance > squareViewDistance) {\r\n            // The point is too far away", "choices": [{"text": "\n            return null\r\n        } else {\r\n            return new Coordinate(center.x + squareDistance, center.y + squareDistance)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/634", "ground_truth": "            return null\r\n        }\r\n\r\n        return projection?.toCoordinate(Vector2(pixel.x, pixel.y))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARPathLayer.kt"}}
{"prompt": "import androidx.room.Entity\nfun from(reading: BatteryReading): BatteryReadingEntity {\r\n            return BatteryReadingEntity(\r\n                reading.percent,", "choices": [{"text": "\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n                reading.percent,\r\n               "}], "metadata": {"task_id": "Trail-Sense/637", "ground_truth": "                reading.capacity,\r\n                reading.isCharging,\r\n                reading.time\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\BatteryReadingEntity.kt"}}
{"prompt": "import java.time.Duration\nfun getTimeUntilEmpty(capacity: Float, capacityDrainPerHour: Float): Duration? {\r\n        if (capacityDrainPerHour >= 0) {\r\n            return null\r\n        }", "choices": [{"text": "\n        if (capacity < 0) {\r\n            return null\r\n        }\r\n        if (capacityDrainPerHour < 0) {\r\n            return null\r\n        }\r\n        return new Duration(capacity, capacityDrainPerHour)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/638", "ground_truth": "\r\n        val hours = -(capacity / capacityDrainPerHour)\r\n\r\n        return hours(hours.toDouble())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "import java.time.Duration\nprivate fun getRate(\r\n        first: BatteryReading,\r\n        second: BatteryReading,\r\n        hasCapacity: Boolean = first.capacity != 0f\r\n    ): Float? {\r\n        val capacityDiff =\r\n            if (hasCapacity) second.capacity - first.capacity else second.percent - first.percent\r\n        val timeDiff = Duration.between(first.time, second.time).toMillis() / (1000f * 60f * 60f)\r\n\r\n        if (timeDiff == 0f) {\r\n            return null", "choices": [{"text": "\n        } else if (capacityDiff == 0f) {\r\n            return null\r\n        } else if (timeDiff < 0f) {\r\n            return null\r\n        } else {\r\n            return new Float(timeDiff)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/639", "ground_truth": "        }\r\n\r\n        return (capacityDiff / timeDiff)\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.time.Time.hours\nfun getTimeUntilFull(\r\n        capacity: Float,\r\n        maxCapacity: Float,\r\n        capacityGainPerHour: Float\r\n    ): Duration? {\r\n        if (capacityGainPerHour <= 0 && maxCapacity >= capacity) {\r\n            return null\r\n        }\r\n\r\n        val remaining = maxCapacity - capacity\r\n\r\n        val hours = remaining / capacityGainPerHour\r\n\r\n        if (hours < 0){", "choices": [{"text": "\n            hours = 0\r\n        }\r\n\r\n        return Duration.ofHours(hours)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/640", "ground_truth": "            return Duration.ZERO\r\n        }\r\n\r\n        return hours(hours.toDouble())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherUpdateScheduler\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.BacktrackScheduler\nimport android.app.Activity\nfun enable(activity: Activity? = null) {\r\n        prefs.isLowPowerModeOn = true\r\n        if (prefs.lowPowerModeDisablesWeather) {\r\n            WeatherUpdateScheduler.stop(context)\r\n        }\r\n\r\n        if (prefs.lowPowerModeDisablesBacktrack) {\r\n            BacktrackScheduler.stop(context)\r\n        }", "choices": [{"text": "\n        prefs.isLowPowerModeOn = false\r\n        if (activity!= null) {\r\n            activity.finish()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/648", "ground_truth": "\r\n        StepCounterService.stop(context)\r\n\r\n        activity?.recreate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\infrastructure\\LowPowerMode.kt"}}
{"prompt": "val lowerPowerMode\nval prefs\n private fun update() {", "choices": [{"text": "\n    if (isEnabled() == false) {\n        return false;\n    }\n    if (isEnabled() == false) {\n        return false;\n    }\n    if (isEnabled() == false) {\n        return false;\n    }\n    if (isEnabled() == false) {\n        return false;\n    }\n    if (isEnabled() == false) {\n        return false;\n    }\n    if (isEnabled() == false) {\n        return false;\n    }\n    if (isEnabled() == false) {\n       "}], "metadata": {"task_id": "Trail-Sense/651", "ground_truth": "        CustomUiUtils.setButtonState(\r\n            button,\r\n            lowerPowerMode.isEnabled()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\quickactions\\QuickActionLowPowerMode.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onCreate() {\r\n        super.onCreate()\r\n        button.setImageResource(R.drawable.ic_tool_battery)\r\n        button.setOnClickListener {\r\n            if (lowerPowerMode.isEnabled()){\r\n                prefs.power.userEnabledLowPower = false\r\n                lowerPowerMode.disable(fragment.activity)\r\n            } else {\r\n                prefs.power.userEnabledLowPower = true", "choices": [{"text": "\n                lowerPowerMode.enable(fragment.activity)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/652", "ground_truth": "                lowerPowerMode.enable(fragment.activity)\r\n            }\r\n        }\r\n        update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\quickactions\\QuickActionLowPowerMode.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.battery.domain.BatteryReading\nimport com.kylecorry.trail_sense.shared.CustomUiUtils.getPrimaryColor\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.views.chart.Chart\nimport com.kylecorry.andromeda.core.system.Resources\nfun plot(readings: List<BatteryReading>, showCapacity: Boolean = false) {\r\n        val data = Chart.getDataFromReadings(readings.map {\r\n            Reading(\r\n                if (showCapacity) it.capacity else it.percent,\r\n                it.time\r\n            )\r\n        }) {\r\n            it\r\n        }\r\n\r\n        val color = Resources.getPrimaryColor(chart.context)\r\n\r\n        chart.plot(", "choices": [{"text": "\n            data,\r\n            color,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            true"}], "metadata": {"task_id": "Trail-Sense/654", "ground_truth": "            AreaChartLayer(data, color, color.withAlpha(150)),\r\n        )\r\n\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\ui\\BatteryChart.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.sol.units.Coordinate\nimport androidx.annotation.ColorInt\nimport android.graphics.Color\nfun temporary(\r\n            coordinate: Coordinate,\r\n            id: Long = 0L,\r\n            name: String = \"\",\r\n            visible: Boolean = true,\r\n            comment: String? = null,\r\n            parentId: Long? = null,\r\n            elevation: Float? = null,\r\n            owner: BeaconOwner = BeaconOwner.User,\r\n            @ColorInt color: Int = AppColor.Orange.color,\r\n            icon: BeaconIcon? = null\r\n        ): Beacon {\r\n            return Beacon(\r\n                id,\r\n                name,\r\n                coordinate,\r\n                visible,\r\n                comment,\r\n                parentId,\r\n                elevation,\r\n                true,", "choices": [{"text": "                owner,\r\n                color,\r\n                icon\r\n            );\r\n        }"}], "metadata": {"task_id": "Trail-Sense/659", "ground_truth": "                owner,\r\n                color,\r\n                icon\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\domain\\Beacon.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun navigateTo(beacon: Beacon) {\r\n        val id = if (beacon.id == 0L) {\r\n            onIO {\r\n                beaconService.add(beacon)\r\n            }\r\n        } else {\r\n            beacon.id\r\n        }\r\n\r\n        withContext(mainDispatcher) {\r\n            navigation.navigate(", "choices": [{"text": "\n                beaconService.get(id)\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/660", "ground_truth": "                R.id.action_navigation,\r\n                listOf(\"destination\" to id)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\BeaconNavigator.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.Alerts\nfun execute(beacon: Beacon) {\r\n        Alerts.dialog(\r\n            context,\r\n            context.getString(R.string.delete),\r\n            beacon.name\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                scope.launch {\r\n                    onIO {\r\n                        service.delete(beacon)\r\n                    }\r\n                    onMain {\r\n                        onDeleted()", "choices": [{"text": "\n                    }\r\n                }\r\n            } else {\r\n                Alerts.dialog(\r\n                    context,\r\n                    context.getString(R.string.delete),\r\n                    beacon.name\r\n                ) { cancelled ->\r\n                    if (!cancelled) {\r\n                        scope.launch {\r\n                            onIO {\r\n                                service.delete(beacon)\r\n                            }\r\n                            onDeleted()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/661", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\commands\\DeleteBeaconCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun load(search: String?, group: Long?): List<IBeacon> = onIO {\r\n        if (search.isNullOrBlank()) {", "choices": [{"text": "\n            return Collections.emptyList();\r\n        }\r\n        if (group.isNullOrBlank()) {\r\n            return Collections.emptyList();\r\n        }\r\n        List<IBeacon> beacons = new ArrayList<>();\r\n        for (String name : search.split(\",\")) {\r\n            beacons.add(new Beacon(name, group));\r\n        }\r\n        return beacons;\r\n    }"}], "metadata": {"task_id": "Trail-Sense/662", "ground_truth": "            getBeaconsByGroup(group)\r\n        } else {\r\n            getBeaconsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\loading\\BeaconLoader.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate suspend fun getLastSignalBeacon(): Beacon? {\r\n        return if (prefs.showLastSignalBeacon) {", "choices": [{"text": "\n            return lastSignalBeacon;\r\n        } else {\r\n            return null;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/664", "ground_truth": "            beaconService.getTemporaryBeacon(BeaconOwner.CellSignal)\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\loading\\BeaconLoader.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nfun toBeacon(): Beacon {\r\n        return Beacon(\r\n            id,\r\n            name,\r\n            coordinate,\r\n            visible,\r\n            comment,\r\n            beaconGroupId,\r\n            elevation,\r\n            temporary = temporary,", "choices": [{"text": "\n            beaconGroupId = beaconGroupId,\r\n            elevation = elevation,\r\n            temporary = temporary,\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/665", "ground_truth": "            color = color.color,\r\n            owner = owner,\r\n            icon = icon\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconEntity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun addBeacon(beacon: BeaconEntity): Long {\r\n        return if (beacon.id != 0L) {\r\n            beaconDao.update(beacon)", "choices": [{"text": "\n        } else {\r\n            beaconDao.insert(beacon)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/667", "ground_truth": "            beacon.id\r\n        } else {\r\n            beaconDao.insert(beacon)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun addBeaconGroup(group: BeaconGroupEntity): Long {\r\n        return if (group.id != 0L) {\r\n            beaconGroupDao.update(group)", "choices": [{"text": "\n        } else {\r\n            beaconDao.insert(group)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/668", "ground_truth": "            group.id\r\n        } else {\r\n            beaconGroupDao.insert(group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun deleteBeaconGroup(group: BeaconGroupEntity) {\r\n        // Delete beacons\r\n        beaconDao.deleteInGroup(group.id)\r\n\r\n        // Delete groups\r\n        val groups = getGroupsWithParent(group.id)\r\n        for (subGroup in groups) {\r\n            deleteBeaconGroup(subGroup)", "choices": [{"text": "            beaconDao.deleteInGroup(subGroup.id)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/669", "ground_truth": "        }\r\n\r\n        // Delete self\r\n        beaconGroupDao.delete(group)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun getBeacons(\r\n        groupId: Long?,\r\n        includeGroups: Boolean,\r\n        maxDepth: Int?,\r\n        includeRoot: Boolean\r\n    ): List<IBeacon> {\r\n        return onIO {\r\n            val root = listOfNotNull(\r\n                if (includeRoot) {\r\n                    loader.getGroup(groupId)\r\n                } else {\r\n                    null\r\n                }\r\n            )\r\n\r\n            val beacons = root + loader.getChildren(groupId, maxDepth)\r\n            if (includeGroups) {\r\n                beacons", "choices": [{"text": ".addAll(loader.getGroup(groupId))\r\n            } else {\r\n                beacons.addAll(loader.getChildren(groupId, maxDepth))\r\n            }\r\n            return beacons\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/673", "ground_truth": "            } else {\r\n                beacons.filterNot { it.isGroup }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconService.kt"}}
{"prompt": "private fun hasValidDistanceTo(data: CreateBeaconData): Boolean {\r\n        if (!data.createAtDistance) {\r\n            return true\r\n        }\r\n\r\n        if (data.distanceTo == null) {", "choices": [{"text": "\n            return false\r\n        }\r\n\r\n        if (data.distanceTo.length == 0) {\r\n            return false\r\n        }\r\n\r\n        for (int i = 0; i < data.distanceTo.length; i++) {\r\n            if (data.distanceTo[i] == null) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }"}], "metadata": {"task_id": "Trail-Sense/688", "ground_truth": "            return false\r\n        }\r\n\r\n        return data.bearingTo != null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\form\\IsBeaconFormDataComplete.kt"}}
{"prompt": "private fun setCreateMenuVisibility(isShowing: Boolean) {\r\n        if (isShowing) {", "choices": [{"text": "\n            menu.setVisibility(View.VISIBLE);\r\n        } else {\r\n            menu.setVisibility(View.GONE);\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/692", "ground_truth": "            binding.createMenu.show()\r\n        } else {\r\n            binding.createMenu.hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "var sort\nval beaconLoader\nval beaconService\n override fun onPause() {\r\n        gps.stop(this::onLocationUpdate)", "choices": [{"text": "(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps.start(this::onLocationUpdate)\r\n        gps"}], "metadata": {"task_id": "Trail-Sense/694", "ground_truth": "        tryOrNothing {\r\n            lastRoot = manager.root\r\n        }\r\n        super.onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.infrastructure.sort.BeaconSortMethod\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = BeaconSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.beaconSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.beaconSort = sortOptions[newSort]", "choices": [{"text": "\n            } else {\r\n                prefs.navigation.beaconSort = null\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/696", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.infrastructure.commands.DeleteBeaconCommand\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport androidx.lifecycle.lifecycleScope\nprivate fun delete(beacon: Beacon) {\r\n        val command = DeleteBeaconCommand(\r\n            requireContext(),\r\n            lifecycleScope,\r\n            beaconService", "choices": [{"text": ",\r\n            beaconService\r\n        );\r\n        command.execute();\r\n    }"}], "metadata": {"task_id": "Trail-Sense/702", "ground_truth": "        ) {\r\n            refresh()\r\n        }\r\n        command.execute(beacon)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.infrastructure.commands.MoveBeaconCommand\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport androidx.lifecycle.lifecycleScope\nprivate fun move(beacon: Beacon) {\r\n        val command = MoveBeaconCommand(\r\n            requireContext(),\r\n            lifecycleScope,\r\n            beaconService", "choices": [{"text": ",\r\n            beaconService\r\n        );\r\n        command.execute();\r\n    }"}], "metadata": {"task_id": "Trail-Sense/703", "ground_truth": "        ) {\r\n            refresh()\r\n        }\r\n        command.execute(beacon)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun toggleVisibility(beacon: Beacon) {\r\n        inBackground {\r\n            val newBeacon = beacon.copy(visible = !beacon.visible)\r\n\r\n            onIO {\r\n                beaconService.add(newBeacon)\r\n            }", "choices": [{"text": "\n            beaconService.remove(newBeacon)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/705", "ground_truth": "            onMain {\r\n                refresh()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.Units\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: Beacon): ListItem {\r\n        return value.toListItem(\r\n            context,\r\n            prefs.baseDistanceUnits,\r\n            gps.location,", "choices": [{"text": "\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n            prefs.baseDistanceUnits,\r\n           "}], "metadata": {"task_id": "Trail-Sense/709", "ground_truth": "            true\r\n        ) {\r\n            actionHandler(value, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListItemMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IBeacon): ListItem {\r\n        return if (value is Beacon) {", "choices": [{"text": "\n            return new BeaconListItem(value)\r\n        } else {\r\n            return new ListItem(value)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/711", "ground_truth": "            beaconMapper.map(value)\r\n        } else {\r\n            groupMapper.map(value as BeaconGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\IBeaconListItemMapper.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun loadExistingBeacon() {\r\n        // TODO: Prevent interaction until loaded\r\n        editingBeaconId?.let {\r\n            inBackground {\r\n                val beacon = onIO {\r\n                    beaconService.getBeacon(it)\r\n                }\r\n\r\n                onMain {\r\n                    beacon?.let {\r\n                        setEditingBeaconValues(it)", "choices": [{"text": "\n                    }\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/713", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateBeaconGroupName() {\r\n        val parent = form.data.groupId\r\n        inBackground {\r\n            val name = onIO {\r\n                if (parent == null) {\r\n                    getString(R.string.no_group)\r\n                } else {\r\n                    beaconService.getGroup(parent)?.name ?: \"\"\r\n                }\r\n            }", "choices": [{"text": "\n            beaconService.updateGroup(parent, name)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/718", "ground_truth": "            onMain {\r\n                binding.beaconGroupPicker.text = name\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun onSubmit() {\r\n        val beacon = form.data.toBeacon() ?: return\r\n        inBackground {\r\n            onIO {\r\n                beaconService.add(beacon)\r\n            }\r\n\r\n            onMain {", "choices": [{"text": "\n                beaconService.update(beacon)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/720", "ground_truth": "                backCallback.remove()\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.CustomUiUtils\nimport com.kylecorry.trail_sense.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        CustomUiUtils.disclaimer(\r\n            requireContext(),\r\n            getString(R.string.disclaimer_message_title),\r\n            getString(R.string.tool_cliff_height_disclaimer),\r\n            \"cache_dialog_tool_cliff_height\",\r\n            considerShownIfCancelled = true,", "choices": [{"text": ",\r\n        )\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.dialog_tool_cliff_height)\r\n        findViewById(R.id.cancel).setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                dismiss()\r\n            }\r\n        })\r\n        findViewById(R.id.ok).setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r"}], "metadata": {"task_id": "Trail-Sense/724", "ground_truth": "            cancelText = null\r\n        )\r\n\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\cliffheight\\ui\\ToolCliffHeightFragment.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Temperature\noverride suspend fun calculate(time: ZonedDateTime): Temperature {\r\n        val existing = calculators.firstOrNull { it.first.contains(time) }\r\n        val calculator = if (existing == null) {\r\n            val newCalculator = createCalculator(time)\r\n            calculators.add(newCalculator)\r\n            newCalculator.second", "choices": [{"text": "\n        } else {\r\n            newCalculator.second.add(time)\r\n        }\r\n        return calculator.second\r\n    }"}], "metadata": {"task_id": "Trail-Sense/728", "ground_truth": "        } else {\r\n            existing.second\r\n        }\r\n        return calculator.calculate(time)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\calculators\\DailyTemperatureCalculator.kt"}}
{"prompt": "import java.time.Month\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Coordinate\nimport android.content.Context\nprivate suspend fun load(\r\n        context: Context,\r\n        location: Coordinate,\r\n        type: String\r\n    ): Map<Month, Float> = onIO {\r\n        val loaded = mutableMapOf<Month, Float>()\r\n\r\n        for ((extension, months) in extensionMap) {\r\n            val file = \"temperatures/$type-${extension}.webp\"\r\n            val source = if (type == lowType) lowSource else highSource\r\n            val data = source.read(context, file, location)\r\n            loaded[months.first] = data[0]\r\n            loaded[months.second] = data[1]", "choices": [{"text": "\n            loaded[months.third] = data[2]\r\n        }\r\n\r\n        return loaded\r\n    }"}], "metadata": {"task_id": "Trail-Sense/731", "ground_truth": "            loaded[months.third] = data[2]\r\n        }\r\n\r\n        loaded\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricMonthlyTemperatureRangeRepo.kt"}}
{"prompt": "import java.time.Month\nimport java.time.LocalDate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Range\noverride suspend fun getYearlyTemperatures(\r\n        year: Int,\r\n        location: Coordinate\r\n    ): List<Pair<LocalDate, Range<Temperature>>> = onDefault {\r\n        val monthly =\r\n            HistoricMonthlyTemperatureRangeRepo.getMonthlyTemperatureRanges(context, location)", "choices": [{"text": "\n        if (monthly!= null) {\r\n            return monthly\r\n        } else {\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/732", "ground_truth": "\r\n        Time.getYearlyValues(year) {\r\n            getDailyRange(location, it, monthly)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricTemperatureRepo.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.tools.climate.infrastructure.temperatures.calculators.DailyTemperatureCalculator\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatures(\r\n        location: Coordinate,\r\n        start: ZonedDateTime,\r\n        end: ZonedDateTime\r\n    ): List<Reading<Temperature>> {\r\n        val calculator = DailyTemperatureCalculator(location, this::getDailyRange)", "choices": [{"text": "\n        return calculator.getTemperatures(start, end)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/733", "ground_truth": "\r\n        return Time.getReadings(start, end, Duration.ofMinutes(10)) {\r\n            calculator.calculate(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricTemperatureRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Distance\noverride fun onResume() {\r\n        super.onResume()\r\n        if (distanceAway == null && knownHeight == null) {\r\n            distanceAway = prefs.clinometer.baselineDistance\r\n            CustomUiUtils.setButtonState(\r\n                binding.clinometerTitle.rightButton, distanceAway != null\r\n            )\r\n        }\r\n\r\n        if (useCamera) {", "choices": [{"text": "\n            distanceAway = prefs.clinometer.baselineDistance\r\n            CustomUiUtils.setButtonState(\r\n                binding.clinometerTitle.leftButton, distanceAway!= null\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/745", "ground_truth": "            startCameraClinometer(false)\r\n        } else {\r\n            startSideClinometer()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "val orientation\nval sensorService\nval deviceOrientation\n override fun onPause() {\r\n        super.onPause()", "choices": [{"text": "\n        super.onPause()\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume()\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause()\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy()\r\n    }\r\n\r\n    @Override\r\n    public void onDestroying() {\r\n        super.onDestroying()\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/746", "ground_truth": "        if (useCamera) {\r\n            binding.camera.stop()\r\n            binding.arView.stop()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "override fun draw() {\r\n        push()\r\n        drawBackground()\r\n        drawTicks()\r\n        drawNeedle(angle)\r\n\r\n        drawLabels()\r\n\r\n        push()\r\n        rotate(180f)", "choices": [{"text": "\n        rotate(90f)\r\n        drawBackground()\r\n        drawTicks()\r\n        drawNeedle(angle)\r\n        drawLabels()\r\n\r\n        pop()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/756", "ground_truth": "        drawLabels()\r\n        pop()\r\n\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "private fun drawAvalancheZone(start: Float, stop: Float, color: Int) {\r\n        val x = width / 2f - radius\r\n        val y = height / 2f - radius\r\n        val d = radius * 2", "choices": [{"text": "1f - radius * 2f\r\n        val w = width / 2f - radius * 2f\r\n        val h = height / 2f - radius * 2f\r\n        val r = radius * 2f - radius * 2f\r\n        val g = radius * 2f - radius * 2f\r\n        val b = radius * 2f - radius * 2f\r\n        val a = radius * 2f - radius * 2f\r\n        val b = radius * 2f - radius * 2f\r\n        val c = radius * 2f - radius * 2f\r"}], "metadata": {"task_id": "Trail-Sense/757", "ground_truth": "        noStroke()\r\n        fill(color)\r\n        opacity(150)\r\n        arc(x, y, d, d, start, stop)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "val tickInterval\nvar tickLength\nval needlePercent\n private fun drawTicks() {\r\n        strokeWeight(dp(2f))", "choices": [{"text": "\n        stroke(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n        fill(Color.WHITE)\r\n       "}], "metadata": {"task_id": "Trail-Sense/758", "ground_truth": "        stroke(Color.WHITE)\r\n        opacity(255)\r\n        noFill()\r\n        path(tickPath)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "import kotlin.math.min\nimport android.util.TypedValue\nprivate fun initClock() {\r\n        padding = numeralSpacing + 50\r\n        fontSize = TypedValue.applyDimension(\r\n            TypedValue.COMPLEX_UNIT_SP, 13f,\r\n            resources.displayMetrics\r\n        ).toInt()\r\n        val min = min(height, width)\r\n        radius = min / 2 - padding", "choices": [{"text": "\n        width = min / 2 + padding\r\n        height = min / 2 + padding\r\n    }"}], "metadata": {"task_id": "Trail-Sense/761", "ground_truth": "        handTruncation = min / 20\r\n        hourHandTruncation = min / 7\r\n        paint = Paint()\r\n        isInit = true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\ui\\ClockView.kt"}}
{"prompt": "import android.graphics.Color\nimport android.graphics.Canvas\nvar paint Paint\nval numeralSpacing\nvar padding\noverride fun onDraw(canvas: Canvas) {\r\n        if (!isInit) {\r\n            initClock()\r\n        }\r\n        canvas.drawColor(Color.TRANSPARENT)\r\n        drawNumeral(canvas)", "choices": [{"text": "\n        paint.setColor(Color.TRANSPARENT)\r\n        drawNumeral(canvas, numeralSpacing)\r\n        paint.setColor(Color.TRANSPARENT)\r\n        drawNumeral(canvas, padding)\r\n        paint.setColor(Color.TRANSPARENT)\r\n        drawNumeral(canvas, padding)\r\n        paint.setColor(Color.TRANSPARENT)\r\n        drawNumeral(canvas, padding)\r\n        paint.setColor(Color.TRANSPARENT)\r\n        drawNumeral(canvas"}], "metadata": {"task_id": "Trail-Sense/762", "ground_truth": "        drawHands(canvas)\r\n        drawCenter(canvas)\r\n        postInvalidateDelayed(20)\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\ui\\ClockView.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<CloudObservation>): Long = onIO {\r\n        val entity = CloudReadingEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            dao.update(entity)\r\n            entity.id\r\n        } else {", "choices": [{"text": "\n            dao.insert(entity)\r\n            id = entity.id\r\n        }\r\n\r\n        return id\r\n    }"}], "metadata": {"task_id": "Trail-Sense/773", "ground_truth": "            dao.insert(entity)\r\n        }\r\n        _readingsChanged.publish()\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\infrastructure\\persistence\\CloudRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun setupCreateMenu() {\r\n        binding.addMenu.setOverlay(binding.overlayMask)\r\n        binding.addMenu.fab = binding.addBtn\r\n        binding.addMenu.hideOnMenuOptionSelected = true\r\n        binding.addMenu.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_cloud_camera -> addFromCamera()\r\n                R.id.action_cloud_file -> addFromFile()", "choices": [{"text": "\n            }\r\n        }\r\n        binding.addMenu.setOnMenuItemLongClickListener { menuItem ->\r\n            when (menuItem.itemId == R.id.action_cloud_camera -> addFromCamera()\r\n            }\r\n        binding.addMenu.setOnMenuItemLongClickListener { menuItem ->\r\n            when (menuItem.itemId == R.id.action_cloud_file -> addFromFile()\r\n        }\r\n        binding.addMenu.setOnMenuItemLongClickListener { menuItem ->\r\n            when (menuItem.itemId == R.id.action"}], "metadata": {"task_id": "Trail-Sense/779", "ground_truth": "                R.id.action_cloud_manual -> addManual()\r\n            }\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.io.FragmentUriPicker\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.BackgroundMinimumState\nimport androidx.navigation.fragment.findNavController\nimport androidx.core.net.toUri\nprivate fun addFromFile() {\r\n        inBackground(BackgroundMinimumState.Created) {\r\n            val uri =\r\n                FragmentUriPicker(this@CloudFragment).open(listOf(\"image/*\"))\r\n            val temp = uri?.let { onIO { files.copyToTemp(it) }?.toUri() }\r\n            temp?.let {\r\n                findNavController().navigate(\r\n                    R.id.action_cloud_to_cloud_picker,", "choices": [{"text": "\n                    R.id.action_cloud_to_cloud_picker,\r\n                    Uri.parse(temp)\r\n                )\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/780", "ground_truth": "                    bundleOf(\"image\" to it)\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudObservation\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\nprivate fun delete(reading: Reading<CloudObservation>) {\r\n        inBackground {\r\n            val cancelled = onMain {\r\n                CoroutineAlerts.dialog(\r\n                    requireContext(),\r\n                    getString(R.string.delete),\r\n                    cloudDetailsService.getCloudName(reading.value.genus)\r\n                )\r\n            }", "choices": [{"text": "\n            if (cancelled) {\r\n                return\r\n            }\r\n            cloudDetailsService.deleteCloudObservation(reading.value.genus)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/782", "ground_truth": "            if (!cancelled) {\r\n                repo.delete(reading)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "import com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nimport com.kylecorry.andromeda.alerts.Alerts\nval details\nfun show(cloud: CloudGenus?) {\r\n        if (cloud != null) {\r\n            Alerts.image(\r\n                context,", "choices": [{"text": ",\r\n                cloud,\r\n                \"show\"\r\n            );\r\n        } else {\r\n            Alerts.message(\r\n                context,\r\n                \"no-cloud\",\r\n                \"show\"\r\n            );\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/783", "ground_truth": "                details.getCloudName(cloud),\r\n                details.getCloudImage(cloud)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudImageModal.kt"}}
{"prompt": "import com.kylecorry.sol.science.meteorology.clouds.CloudGenus\noverride fun onResume() {\r\n        super.onResume()\r\n        if (uri != null && selection.isEmpty()) {\r\n            analyze()\r\n        } else {\r\n            selection = CloudGenus.values().map { CloudSelection(it, null, false) } + listOf(\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false", "choices": [{"text": "\n                ),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false\r\n                ),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false\r\n                ),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false\r\n                ),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false\r\n                ),\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false\r\n                )"}], "metadata": {"task_id": "Trail-Sense/785", "ground_truth": "                )\r\n            )\r\n            updateItems()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudObservation\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun save() {\r\n        inBackground {\r\n            val readings =\r\n                selection.filter { it.isSelected }\r\n                    .map { Reading(CloudObservation(0, it.genus), time) }\r\n            readings.forEach {\r\n                repo.add(it)\r\n            }", "choices": [{"text": "\n            repo.save(it)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/786", "ground_truth": "            onMain {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "fun update() {\r\n        val coordinate = binding.coordinateEdit.coordinate\r\n        val to = formats[binding.toUnits.selectedItemPosition]\r\n\r\n        if (coordinate == null) {\r\n            binding.result.text = \"\"", "choices": [{"text": "\n        } else if (to == null) {\r\n            binding.result.text = \"\"\r\n        } else {\r\n            binding.coordinateEdit.coordinate = coordinate\r\n            binding.toUnits.selectedItemPosition = to\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/795", "ground_truth": "            return\r\n        }\r\n\r\n        binding.result.text = formatService.formatLocation(coordinate, to)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\convert\\ui\\FragmentToolCoordinateConvert.kt"}}
{"prompt": "import java.time.Duration\nprivate fun off(bySystem: Boolean = false) = synchronized(modeLock) {\r\n        clearTimeout()\r\n        if (!bySystem) {\r\n            isTransitioning = true\r\n            transitionTimer.once(transitionDuration)\r\n        } else {\r\n            isTransitioning = false\r\n            transitionTimer.stop()", "choices": [{"text": "\n        if (bySystem) {\r\n            isTransitioning = false\r\n            transitionTimer.once(transitionDuration)\r\n        } else {\r\n            isTransitioning = true\r\n            transitionTimer.stop()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/809", "ground_truth": "        }\r\n        _mode.publish(FlashlightMode.Off)\r\n        FlashlightService.stop(context)\r\n        torch?.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nimport com.kylecorry.andromeda.torch.Torch\nval _mode\nval mode ITopic<FlashlightMode>\nvar torch ITorch?\noverride fun toggle() {\r\n        if (getMode() == FlashlightMode.Torch) {", "choices": [{"text": "\n            setTorch(false);\r\n        } else {\r\n            setTorch(true);\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/810", "ground_truth": "            off()\r\n        } else {\r\n            set(FlashlightMode.Torch)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\noverride fun set(mode: FlashlightMode) {", "choices": [{"text": "\n    if (mode == null) {\n        throw new NullPointerException(\"mode\");\n    }\n    this.mode = mode;\n    return this;\n}"}], "metadata": {"task_id": "Trail-Sense/811", "ground_truth": "        when (mode) {\r\n            FlashlightMode.Off -> off()\r\n            else -> on(mode)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.sol.math.SolMath\ninternal fun turnOn() = synchronized(torchLock) {\r\n        if (brightnessLevels > 0) {\r\n            val mapped = SolMath.map(brightness, 0f, 1f, 1f / (brightnessLevels + 1), 1f)", "choices": [{"text": "\r\n        } else {\r\n            val mapped = SolMath.map(brightness, 0f, 1f, 1f / (brightnessLevels + 1), 1f)\r\n        }\r\n\r\n        if (brightnessLevels > 1) {\r\n            val mapped = SolMath.map(brightness, 1f, 1f, 1f / (brightnessLevels + 1), 1f)\r\n        } else {\r\n            val mapped = SolMath.map(brightness, 0f, 1f, 1f / (brightnessLevels +"}], "metadata": {"task_id": "Trail-Sense/813", "ground_truth": "            torch?.on(mapped)\r\n        } else {\r\n            torch?.on()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nimport com.kylecorry.andromeda.torch.Torch\nimport com.kylecorry.andromeda.core.tryOrLog\nprivate fun onTorchStateChanged(enabled: Boolean): Boolean {\r\n        tryOrLog {\r\n            synchronized(modeLock) {\r\n                if (isTransitioning) {\r\n                    return@tryOrLog\r\n                }\r\n            }\r\n\r\n            if (!enabled && getMode() == FlashlightMode.Torch) {\r\n                off(true)\r\n            }\r\n\r\n            if (enabled && getMode() == FlashlightMode.Off) {\r\n                setBrightness(1f)", "choices": [{"text": "\n            }\r\n        } catch (e) {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/814", "ground_truth": "                on(FlashlightMode.Torch, true)\r\n            }\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "override fun setBrightness(brightness: Float) {\r\n        prefs.flashlight.brightness = brightness", "choices": [{"text": "\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.brightness = brightness\r\n        prefs.flashlight.bright"}], "metadata": {"task_id": "Trail-Sense/815", "ground_truth": "        this.brightness = brightness\r\n        if (getMode() == FlashlightMode.Torch) {\r\n            turnOn()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.trail_sense.R\nprivate fun setTimeout() {\r\n        if (prefs.flashlight.shouldTimeout) {\r\n            cache.putInstant(\r\n                context.getString(R.string.pref_flashlight_timeout_instant),\r\n                Instant.now().plus(prefs.flashlight.timeout)", "choices": [{"text": "\n        } else {\r\n            cache.putInstant(\r\n                context.getString(R.string.pref_flashlight_timeout_instant),\r\n                Instant.now().minus(prefs.flashlight.timeout)\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/816", "ground_truth": "            )\r\n        } else {\r\n            clearTimeout()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.safeRoundToInt\nimport com.kylecorry.trail_sense.R\nprivate fun updateBrightness(value: Float? = null) {\r\n        if (hasBrightnessControl) {\r\n            brightness = value ?: prefs.flashlight.brightness\r\n            binding.brightnessSeek.progress = (brightness * maxBrightness).safeRoundToInt()", "choices": [{"text": "\n        } else {\r\n            brightness = value?: prefs.flashlight.brightness\r\n            binding.brightnessSeek.progress = (brightness * maxBrightness).safeRoundToInt()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/827", "ground_truth": "        } else {\r\n            brightness = 1f\r\n        }\r\n        flashlight.setBrightness(brightness)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolFlashlight.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nfun toggle() {\r\n        haptics.click()\r\n        if (flashlight.getMode() != FlashlightMode.Off) {", "choices": [{"text": "\n            flashlight.setMode(FlashlightMode.On)\r\n        } else {\r\n            flashlight.setMode(FlashlightMode.Off)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/828", "ground_truth": "            turnOff()\r\n        } else {\r\n            turnOn()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolFlashlight.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.flashlight.infrastructure.FlashlightSubsystem\noverride fun onButtonPress() {\r\n        if (fragment == null) {\r\n            val flashlight = FlashlightSubsystem.getInstance(context)", "choices": [{"text": "\n            flashlight.onButtonPress()\r\n        } else {\r\n            super.onButtonPress()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/833", "ground_truth": "            flashlight.toggle()\r\n        } else {\r\n            fragment.toggle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\volumeactions\\FlashlightToggleVolumeAction.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport androidx.navigation.fragment.findNavController\nimport androidx.fragment.app.Fragment\nimport androidx.core.os.bundleOf\nimport androidx.annotation.RawRes\nimport android.content.Context\nfun openGuide(fragment: Fragment, @RawRes guideId: Int) {\r\n        val navController = fragment.findNavController()\r\n        val guides = Guides.guides(fragment.requireContext())\r\n\r\n        val guide = guides.flatMap { it.guides }.firstOrNull { it.contents == guideId }\r\n\r\n        if (guide != null) {\r\n            navController.navigate(\r\n                R.id.guideFragment, bundleOf(\r\n                    \"guide_name\" to guide.name,", "choices": [{"text": "\n                    \"guide_description\" to guide.description\r\n                )\r\n            )\r\n        } else {\r\n            navController.navigate(\r\n                R.id.guideFragment, bundleOf(\r\n                    \"guide_name\" to null,\r\n                    \"guide_description\" to null\r\n                )\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/836", "ground_truth": "                    \"guide_contents\" to guide.contents\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\infrastructure\\UserGuideUtils.kt"}}
{"prompt": "import androidx.preference.Preference\nprivate fun onClick(pref: Preference?, action: () -> Unit) {", "choices": [{"text": "\n    if (pref == null) {\n        return;\n    }\n    if (action == null) {\n        return;\n    }\n    if (pref == null) {\n        return;\n    }\n    if (action == null) {\n        return;\n    }\n    if (pref == null) {\n        return;\n    }\n    if (action == null) {\n        return;\n    }\n    if (pref == null) {\n        return;\n    }\n    if (pref == null) {\n        return;\n    }"}], "metadata": {"task_id": "Trail-Sense/842", "ground_truth": "        pref?.setOnPreferenceClickListener {\r\n            action.invoke()\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\ui\\GuideListPreferenceFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.optics.Optics\nprivate fun updateGradients(){\r\n        val intensities = (1..100).map {\r\n            val distance = if (units == DistanceUnits.Feet) it * 3 else it\r\n            Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n        }", "choices": [{"text": "\n        Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n        Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n        Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n        Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n        Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n        Opt"}], "metadata": {"task_id": "Trail-Sense/849", "ground_truth": "        // TODO: Calculate distance of each intensity description\r\n\r\n\r\n        gradient = getColors(intensities)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\light\\ui\\LightBarView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.lightning.domain.LightningStrike\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<LightningStrike>): Long = onIO {\r\n        val entity = LightningStrikeEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            dao.update(entity)\r\n            entity.id", "choices": [{"text": "\n        } else {\r\n            dao.add(entity)\r\n        }\r\n\r\n        return id\r\n    }"}], "metadata": {"task_id": "Trail-Sense/851", "ground_truth": "        } else {\r\n            dao.insert(entity)\r\n        }\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\infrastructure\\persistence\\LightningRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()", "choices": [{"text": "_onResume()\r\n        super.onResume()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/860", "ground_truth": "        units = prefs.baseDistanceUnits\r\n        reset(true)\r\n        loadLastStrike()\r\n        timer.interval(20)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\ui\\FragmentToolLightning.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nfun getMagnifierPosition(tapPosition: PixelCoordinate): PixelCoordinate {\r\n        val x = if (tapPosition.x > imageSize.width / 2) {\r\n            0f\r\n        } else {", "choices": [{"text": "\n            tapPosition.x\r\n        }\r\n        val y = if (tapPosition.y > imageSize.height / 2) {\r\n            0f\r\n        } else {\r\n            tapPosition.y\r\n        }\r\n        return new PixelCoordinate(x, y)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/864", "ground_truth": "            imageSize.width - magnifierSize.width\r\n        }\r\n\r\n        return PixelCoordinate(x, 0f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\ImageMagnifier.kt"}}
{"prompt": "import com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.graphics.Color\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nfun magnify(\r\n        source: Bitmap,\r\n        sourceCenter: PixelCoordinate,\r\n        dest: Bitmap = Bitmap.createBitmap(\r\n            magnifierSize.width.toInt(),\r\n            magnifierSize.height.toInt(),\r\n            Bitmap.Config.ARGB_8888\r\n        )\r\n    ): Bitmap {\r\n        val canvas = Canvas(dest)\r\n        canvas.drawColor(Color.BLACK)\r\n\r\n        val leftOffset = -(sourceCenter.x - magnifierSize.width / 2f)\r\n        val topOffset = -(sourceCenter.y - magnifierSize.height / 2f)", "choices": [{"text": "\n\r\n        canvas.translate(leftOffset, topOffset)\r\n        canvas.scale(1.0f, 1.0f)\r\n        canvas.drawBitmap(source, 0, 0)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/865", "ground_truth": "\r\n        canvas.drawBitmap(source, leftOffset, topOffset, paint)\r\n\r\n        return dest\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\ImageMagnifier.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nfun calibrate(index: Int, coordinate: Coordinate?) {\r\n        points[index] =\r\n            MapCalibrationPoint(coordinate ?: Coordinate.zero, points[index].imageLocation)\r\n        if (coordinate == null) {\r\n            calibratedPoints.remove(index)", "choices": [{"text": "\n        } else {\r\n            calibratedPoints.add(index)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/868", "ground_truth": "        } else {\r\n            calibratedPoints.add(index)\r\n        }\r\n        onCalibrationChange()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\MapCalibrationManager.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geography.projections.IMapProjection\nfun IMapProjection.distancePerPixel(location1: Coordinate, location2: Coordinate): Distance? {\r\n    val meters = location1.distanceTo(location2)\r\n    val pixels = toPixels(location1).distanceTo(toPixels(location2))", "choices": [{"text": "\n    return Math.sqrt(meters * meters + pixels * pixels)\r\n}"}], "metadata": {"task_id": "Trail-Sense/877", "ground_truth": "    // Unable to calculate\r\n    if (meters == 0f || pixels == 0f) return null\r\n\r\n    return Distance.meters(meters / pixels)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\projections\\ProjectionExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PixelBounds\nimport com.kylecorry.andromeda.core.bitmap.BitmapUtils.fixPerspective\nimport androidx.annotation.ColorInt\nimport android.graphics.Bitmap\nfun Bitmap.fixPerspective(\r\n    bounds: PixelBounds,\r\n    shouldRecycleOriginal: Boolean = false,\r\n    @ColorInt backgroundColor: Int? = null\r\n): Bitmap {\r\n    return fixPerspective(\r\n        bounds.topLeft,\r\n        bounds.topRight,\r\n        bounds.bottomLeft,", "choices": [{"text": "\n        bounds.bottomRight,\r\n        shouldRecycleOriginal,\r\n        backgroundColor\r\n    );\r\n}"}], "metadata": {"task_id": "Trail-Sense/882", "ground_truth": "        bounds.bottomRight,\r\n        shouldRecycleOriginal,\r\n        backgroundColor\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\BitmapExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.core.text.slugify\nsuspend fun execute(map: PhotoMap): Boolean = onIO {\r\n        onMain {\r\n            loading.show()\r\n        }\r\n        val success = exporter.export(map, \"${map.name.slugify()}.pdf\")", "choices": [{"text": "\n        if (success) {\r\n            loading.hide()\r\n        } else {\r\n            loading.show()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/883", "ground_truth": "        onMain {\r\n            loading.hide()\r\n        }\r\n        success\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\commands\\ExportMapCommand.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geology.CoordinateBounds\noverride fun onBoundsChanged(bounds: CoordinateBounds?) {\r\n        if (bounds == lastBounds) {\r\n            return\r\n        }", "choices": [{"text": "\n        lastBounds = bounds\r\n        onBoundsChanged(lastBounds)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/888", "ground_truth": "        lastBounds = bounds\r\n        managers.forEach {\r\n            it.onBoundsChanged(bounds)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\MultiLayerManager.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.ui.Colors.withAlpha\noverride fun start() {\r\n        scope.launch {\r\n            // Load destination\r\n            navigator.destination.collect {\r\n                if (it != null) {\r\n                    val colorWithAlpha = it.color.withAlpha(127)\r\n                    layer.setColor(colorWithAlpha)\r\n                    layer.setEnd(it.coordinate)\r\n                } else {", "choices": [{"text": "\n                    layer.setColor(Color.RED)\r\n                    layer.setEnd(it.coordinate)\r\n                }\r\n            }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/894", "ground_truth": "                    layer.setEnd(null)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\NavigationLayerManager.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride fun start() {\r\n        loaded = false\r\n        scope.launch {\r\n            listenerRunner.skipIfRunning {\r\n                pathService.getPaths().collect {\r\n                    paths = it.filter { path -> path.style.visible }\r\n                    loaded = false\r\n                    loadRunner.replace {\r\n                        loadPaths(true)", "choices": [{"text": "\n                    loadPaths(false)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/896", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geology.CoordinateBounds\noverride fun onBoundsChanged(bounds: CoordinateBounds?) {\r\n        super.onBoundsChanged(bounds)\r\n        scope.launch {", "choices": [{"text": "\n            super.onBoundsChanged(bounds)\r\n            if (bounds.isEmpty()) {\r\n                onBoundsChanged(null)\r\n            } else {\r\n                onBoundsChanged(bounds)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/898", "ground_truth": "            loadRunner.enqueue {\r\n                loadPaths(false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.sol.units.Coordinate\noverride fun onLocationChanged(location: Coordinate, accuracy: Float?) {\r\n        super.onLocationChanged(location, accuracy)\r\n        scope.launch {", "choices": [{"text": "\n            super.onLocationChanged(location, accuracy)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/899", "ground_truth": "            loadRunner.enqueue {\r\n                loadPaths(false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun loadPaths(reload: Boolean) = onDefault {\r\n        bounds?.let {\r\n            pathLoader.update(paths, it, it, reload || !loaded)\r\n            loaded = true", "choices": [{"text": "\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/900", "ground_truth": "        }\r\n\r\n        val points = pathLoader.getPointsWithBacktrack(context)\r\n        onPathsChanged(paths, points)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun onPathsChanged(paths: List<Path>, points: Map<Long, List<PathPoint>>) {\r\n        val mappablePaths = points.mapNotNull {\r\n            val path =\r\n                paths.firstOrNull { p -> p.id == it.key } ?: return@mapNotNull null\r\n\r\n            val correctedPoints = if (shouldCorrectElevations) {\r\n                hikingService.correctElevations(it.value.sortedBy { it.id }).reversed()\r\n            } else {\r\n                it.value\r\n            }", "choices": [{"text": "\n\r\n            if (correctedPoints.size() > 0) {\r\n                mappablePaths.put(path.id, correctedPoints)\r\n            } else {\r\n                mappablePaths.remove(path.id)\r\n            }\r\n        }\r\n\r\n        if (shouldCorrectElevations) {\r\n            hikingService.correctElevations(mappablePaths).reversed()\r\n        } else {\r\n            hikingService.correctElevations(mappablePaths).reversed()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/901", "ground_truth": "\r\n            correctedPoints.asMappable(context, path)\r\n        }\r\n        layer.setPaths(mappablePaths)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\noverride suspend fun export(data: PhotoMap, filename: String): Boolean {\r\n        val pdf = getPDFData(data)\r\n        val uri = uriPicker.create(filename, \"application/pdf\") ?: return false", "choices": [{"text": "\n        if (uri!= null) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/902", "ground_truth": "        uriService.outputStream(uri)?.use {\r\n            PdfConvert.toPDF(pdf, it)\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapExportService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.IMap\noverride suspend fun load(search: String?, group: Long?): List<IMap> {\r\n        return if (search.isNullOrBlank()) {", "choices": [{"text": "            return Collections.emptyList();\r\n        } else {\r\n            List<IMap> result = new ArrayList<>();\r\n            result.addAll(load(search, group));\r\n            return result;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/903", "ground_truth": "            getPathsByGroup(group)\r\n        } else {\r\n            getPathsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapGroupLoader.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.MapGroupEntity\nimport com.kylecorry.trail_sense.tools.maps.domain.MapGroup\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun addMapGroup(group: MapGroup): Long = onIO {\r\n        if (group.id != 0L) {\r\n            mapGroupDao.update(MapGroupEntity.from(group))", "choices": [{"text": "\n        } else {\r\n            mapGroupDao.insert(MapGroupEntity.from(group))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/906", "ground_truth": "            group.id\r\n        } else {\r\n            mapGroupDao.insert(MapGroupEntity.from(group))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.MapEntity\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun addMap(map: PhotoMap): Long = onIO {\r\n        if (map.id == 0L) {\r\n            mapDao.insert(MapEntity.from(map))", "choices": [{"text": "\n        } else {\r\n            mapDao.update(MapEntity.from(map))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/907", "ground_truth": "        } else {\r\n            mapDao.update(MapEntity.from(map))\r\n            map.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.IMap\nvar instance MapService?\nval loader\nval counter\nsuspend fun add(map: IMap): Long {\r\n        return if (map.isGroup) {", "choices": [{"text": "\n            map.addGroup(this)\r\n        } else {\r\n            map.add(this)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/910", "ground_truth": "            repo.addMapGroup(map as MapGroup)\r\n        } else {\r\n            repo.addMap(map as PhotoMap)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapService.kt"}}
{"prompt": "import kotlin.math.min\nimport kotlin.math.max\nimport com.kylecorry.trail_sense.R\noverride fun draw() {\r\n        super.draw()\r\n        val map = map ?: return\r\n\r\n        if (!map.isCalibrated) {\r\n            return\r\n        }\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * minScale)\r\n        if (shouldRecenter && isImageLoaded) {\r\n            recenter()", "choices": [{"text": "\n        }\r\n        super.draw()\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * maxScale)\r\n        if (shouldRecenter && isImageLoaded) {\r\n            recenter()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/922", "ground_truth": "            shouldRecenter = false\r\n        }\r\n\r\n        layers.forEach { it.draw(drawer, this) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.SolMath\nopen fun showMap(map: PhotoMap) {\r\n        this.map = map\r\n        val rotation = map.calibration.rotation\r\n        mapRotation = SolMath.deltaAngle(rotation, map.baseRotation().toFloat())\r\n        fullMetersPerPixel = map.distancePerPixel()?.meters()?.distance ?: 1f\r\n        projection = map.projection", "choices": [{"text": "(mapRotation)\r\n        this.fullMetersPerPixel = fullMetersPerPixel\r\n        this.fullMetersPerPixel = fullMetersPerPixel\r\n        this.fullMetersPerPixel = fullMetersPerPixel\r\n        this.fullMetersPerPixel = fullMetersPerPixel\r\n        this.fullMetersPerPixel = fullMetersPerPixel\r\n        this.fullMetersPerPixel = fullMetersPerPixel\r\n        this.fullMetersPerPixel = fullMetersPerPixel\r\n        this.fullMetersPerPixel = full"}], "metadata": {"task_id": "Trail-Sense/923", "ground_truth": "        if (keepMapUp){\r\n            mapAzimuth = 0f\r\n        }\r\n        setImage(map.filename, rotation)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.PathMetadata\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun execute(value: List<Coordinate>) = onIO {\r\n        val newPath = Path(\r\n            0,\r\n            map.name,\r\n            prefs.defaultPathStyle,\r\n            PathMetadata.empty\r\n        )\r\n\r\n        val newPathId = pathService.addPath(newPath)\r\n\r\n        val waypoints = value.map {\r\n            PathPoint(0, newPathId, it)", "choices": [{"text": "\n        }\r\n\r\n        pathService.updatePath(newPathId, waypoints)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/928", "ground_truth": "        }\r\n\r\n        pathService.addWaypointsToPath(waypoints, newPathId)\r\n        newPathId\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\commands\\CreatePathCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\noverride suspend fun execute(value: IMap) {\r\n        val shouldDelete = onMain {\r\n            !CoroutineAlerts.dialog(\r\n                context,\r\n                context.getString(R.string.delete),\r\n                if (value is PhotoMap) value.name else context.getString(\r\n                    R.string.delete_map_group_message,\r\n                    value.name\r\n                )\r\n            )\r\n        }\r\n\r\n        if (!shouldDelete) {", "choices": [{"text": "\n            context.getString(R.string.delete_map_group_message).show()\r\n        } else {\r\n            context.getString(R.string.delete_map_group_message).hide()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/929", "ground_truth": "            return\r\n        }\r\n\r\n        mapService.delete(value)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\commands\\DeleteMapCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nval mapRepo\nvar map PhotoMap?\nvar showRotation\nfun reloadMap() {\r\n        inBackground {\r\n            map = mapRepo.getMap(mapId)", "choices": [{"text": "\n            showRotation = true\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/934", "ground_truth": "            onMain {\r\n                map?.let(::onMapLoad)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nfun add(location: Coordinate) {\r\n        if (location == points.lastOrNull()) {\r\n            return", "choices": [{"text": "\n        }\r\n        if (location == points.firstOrNull()) {\r\n            return\r\n        }\r\n        if (location == points.lastOrNull()) {\r\n            return\r\n        }\r\n        if (location == points.lastOrNull()) {\r\n            return\r\n        }\r\n        if (location == points.lastOrNull()) {\r\n            return\r\n        }\r\n        if (location == points.lastOrNull()) {\r\n            return\r\n        }\r\n        if (location == points.lastOrNull()) {\r\n            return\r\n       "}], "metadata": {"task_id": "Trail-Sense/946", "ground_truth": "        }\r\n        points.add(location)\r\n        onPathChanged(points.toList())\r\n        updateLayers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "fun undo() {\r\n        if (points.isNotEmpty()) {", "choices": [{"text": "\n            points.remove(points.size() - 1);\r\n        } else {\r\n            points.add(points.size() - 1);\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/947", "ground_truth": "            points.removeLast()\r\n            onPathChanged(points.toList())\r\n            updateLayers()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.layers.IMapView\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nvar points\nval pointLayer\nval pathLayer\noverride fun draw(drawer: ICanvasDrawer, map: IMapView) {\r\n        if (!isEnabled) {\r\n            return", "choices": [{"text": ";\r\n        }\r\n\r\n        if (drawer!= null) {\r\n            if (map!= null) {\r\n                map.draw(drawer, points);\r\n            } else {\r\n                return;\r\n            }\r\n        } else {\r\n            return;\r\n        }"}], "metadata": {"task_id": "Trail-Sense/949", "ground_truth": "        }\r\n\r\n        pathLayer.draw(drawer, map)\r\n        pointLayer.draw(drawer, map)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.layers.IMapView\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun onClick(drawer: ICanvasDrawer, map: IMapView, pixel: PixelCoordinate): Boolean {\r\n        if (!isEnabled) {\r\n            return false\r\n        }\r\n\r\n        val wasPointClicked = pointLayer.onClick(drawer, map, pixel)\r\n\r\n        if (wasPointClicked) {\r\n            return true", "choices": [{"text": "\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/951", "ground_truth": "        }\r\n\r\n        add(map.toCoordinate(pixel))\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.MappablePath\nprivate fun getPath(): MappablePath {\r\n        return MappablePath(\r\n            0,", "choices": [{"text": "\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6,\r\n            7,\r\n            8,\r\n            9,\r\n            10,\r\n            11,\r\n            12,\r\n            13,\r\n            14,\r\n            15,\r\n            16,\r\n            17,\r\n            18,\r\n            19,\r\n            20,\r\n            21,\r\n            22,\r\n            23,\r\n            24,\r\n            25,\r\n            26"}], "metadata": {"task_id": "Trail-Sense/953", "ground_truth": "            getBeacons(),\r\n            pathColor,\r\n            LineStyle.Solid\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate fun getBeacons(): List<Beacon> {\r\n        return points.mapIndexed { index, coordinate ->\r\n            Beacon(\r\n                index.toLong(),\r\n                \"\",\r\n                coordinate,", "choices": [{"text": "\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null"}], "metadata": {"task_id": "Trail-Sense/954", "ground_truth": "                color = pathColor,\r\n                temporary = true\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.sort.MapSortMethod\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = MapSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.mapSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.mapSort = sortOptions[newSort]", "choices": [{"text": "\n            } else {\r\n                prefs.navigation.mapSort = null\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/956", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.sort.MostRecentMapSortStrategy\nimport com.kylecorry.trail_sense.tools.maps.domain.sort.MapSortMethod\nimport com.kylecorry.trail_sense.tools.maps.domain.sort.ClosestMapSortStrategy\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.trail_sense.R\nprivate suspend fun sortMaps(maps: List<IMap>): List<IMap> = onDefault {\r\n        val strategy = when (sort) {\r\n            MapSortMethod.Closest -> ClosestMapSortStrategy(gps.location, mapService.loader)\r\n            MapSortMethod.MostRecent -> MostRecentMapSortStrategy(mapService.loader)", "choices": [{"text": "\n        }\r\n        return mapService.sortMaps(maps, strategy)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/958", "ground_truth": "            MapSortMethod.Name -> NameMapSortStrategy()\r\n        }\r\n\r\n        strategy.sort(maps)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.MapGroup\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport androidx.navigation.fragment.findNavController\nprivate fun view(map: IMap) {\r\n        if (map is MapGroup) {\r\n            manager.open(map.id)\r\n        } else {\r\n            findNavController().navigate(", "choices": [{"text": "\n                map.id,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n"}], "metadata": {"task_id": "Trail-Sense/966", "ground_truth": "                R.id.action_mapList_to_maps,\r\n                bundleOf(\"mapId\" to map.id)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.infrastructure.commands.MapCleanupCommand\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\noverride fun onResume() {\r\n        super.onResume()\r\n        manager.refresh()\r\n        inBackground {\r\n            val mapsDeleted = MapCleanupCommand(requireContext()).execute()", "choices": [{"text": "\n            super.onResume()\r\n            if (mapsDeleted!= null && mapsDeleted.size() > 0) {\r\n                manager.deleteMaps(mapsDeleted)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/968", "ground_truth": "            if (mapsDeleted) {\r\n                manager.refresh()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "val mapLoader\nvar sort\nval mapRepo\n override fun onPause() {", "choices": [{"text": "\n    super.onPause();\n    this.setVisibility(View.VISIBLE);\n    this.setVisibility(View.GONE);\n}"}], "metadata": {"task_id": "Trail-Sense/969", "ground_truth": "        super.onPause()\r\n        tryOrNothing {\r\n            lastRoot = manager.root\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IMap): ListItem {\r\n        return if (value is PhotoMap) {", "choices": [{"text": "\n            return new PhotoListItem(value)\r\n        } else {\r\n            return new ListItem(value)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/970", "ground_truth": "            mapMapper.map(value)\r\n        } else {\r\n            mapGroupMapper.map(value as MapGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\mappers\\IMapMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport androidx.fragment.app.Fragment\nimport androidx.core.view.isVisible\nprivate fun calibrate() {\r\n        binding.mapTitle.leftButton.isVisible = true\r\n        val fragment = MapCalibrationFragment.create(mapId, this::showRotation) {\r\n            inBackground {\r\n                autoRotate()", "choices": [{"text": "\n            }\r\n        }\r\n        return fragment\r\n    }"}], "metadata": {"task_id": "Trail-Sense/973", "ground_truth": "                loadMap()\r\n            }\r\n        }\r\n        setFragment(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.infrastructure.commands.PrintMapCommand\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.BackgroundMinimumState\nprivate fun print() {\r\n        val command = PrintMapCommand(requireContext())\r\n        inBackground(BackgroundMinimumState.Created) {", "choices": [{"text": "\n            command.execute()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/976", "ground_truth": "            map?.let {\r\n                command.execute(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun export() {\r\n        inBackground {\r\n            map?.let {\r\n                mapRepo.getMap(it.id)?.let { updated ->", "choices": [{"text": "\n                    mapRepo.saveMap(it.id)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/977", "ground_truth": "                    exportService.export(updated)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.maps.ui.commands.RenameMapCommand\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun rename() {\r\n        inBackground {\r\n            map?.let {\r\n                mapRepo.getMap(it.id)?.let { updated ->\r\n                    RenameMapCommand(requireContext(), mapService).execute(updated)\r\n                    map = mapRepo.getMap(updated.id)", "choices": [{"text": "\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/979", "ground_truth": "                    binding.mapTitle.title.text = map?.name\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun recenter() {\r\n        val fragment = currentFragment\r\n        if (fragment != null && fragment is ViewMapFragment) {\r\n            fragment.recenter()\r\n        }", "choices": [{"text": "\n        if (fragment!= null && fragment instanceof ViewMapFragment) {\r\n            ((ViewMapFragment) fragment).recenter()\r\n        }\r\n        if (fragment!= null && fragment instanceof ViewMapFragment) {\r\n            ((ViewMapFragment) fragment).recenter()\r\n        }\r\n        if (fragment!= null && fragment instanceof ViewMapFragment) {\r\n            ((ViewMapFragment) fragment).recenter()\r\n        }\r\n        if (fragment!= null && fragment instanceof ViewMapFragment) {\r\n            ((ViewMapFragment) fragment).recenter()\r"}], "metadata": {"task_id": "Trail-Sense/980", "ground_truth": "\r\n        if (fragment != null && fragment is MapCalibrationFragment) {\r\n            fragment.recenter()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun reload() {\r\n        val fragment = currentFragment\r\n        if (fragment != null && fragment is ViewMapFragment) {\r\n            fragment.reloadMap()\r\n        }", "choices": [{"text": "\n        if (fragment!= null && fragment is ViewMapFragment) {\r\n            fragment.reloadMap()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/981", "ground_truth": "\r\n        if (fragment != null && fragment is MapCalibrationFragment) {\r\n            fragment.reloadMap()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "private suspend fun loadMap() {", "choices": [{"text": "\n    if (mMap!= null) {\n        return mMap;\n    }\n    mMap = new HashMap<>();\n    return null;\n}"}], "metadata": {"task_id": "Trail-Sense/982", "ground_truth": "        map = mapRepo.getMap(mapId)\r\n        onMain {\r\n            map?.let(::onMapLoad)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport androidx.fragment.app.Fragment\nimport androidx.core.view.isVisible\nimport androidx.core.os.bundleOf\nprivate fun warp() {\r\n        hideRotation()\r\n        val fragment = WarpMapFragment().apply {\r\n            arguments = bundleOf(\"mapId\" to mapId)\r\n        }.also {\r\n            binding.mapTitle.leftButton.isVisible = false\r\n            it.setOnCompleteListener {\r\n                inBackground {\r\n                    loadMap()\r\n                }", "choices": [{"text": "\n                }\r\n            }\r\n        }\r\n        fragment.show(R.layout.fragment_warp_map)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/984", "ground_truth": "            }\r\n        }\r\n\r\n        setFragment(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nfun reloadMap() {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                map = mapRepo.getMap(mapId)\r\n            }\r\n            withContext(Dispatchers.Main) {\r\n                map?.let {", "choices": [{"text": "\n                    map = mapRepo.getMap(mapId)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/991", "ground_truth": "                    onMapLoad(it)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.time.Throttle\nprivate fun updateDestination() {\r\n        if (throttle.isThrottled()) {\r\n            return\r\n        }\r\n\r\n        val beacon = destination ?: return\r\n        binding.navigationSheet.show(\r\n            gps.location,\r\n            altimeter.altitude,\r\n            gps.speed.speed,", "choices": [{"text": "\n            beacon.location,\r\n            beacon.altitude,\r\n            beacon.speed.speed\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/992", "ground_truth": "            beacon,\r\n            compass.declination,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nprivate fun selectLocation(location: Coordinate?) {\r\n        selectedPointLayer.setBeacons(\r\n            listOfNotNull(\r\n                if (location == null) {\r\n                    null\r\n                } else {", "choices": [{"text": "\n                    new Beacon(location)\r\n                }\r\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/993", "ground_truth": "                    Beacon(0, \"\", location)\r\n                }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.tools.beacons.domain.BeaconOwner\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.graphics.Color\nprivate fun navigateTo(location: Coordinate) {\r\n        inBackground {\r\n            // Create a temporary beacon\r\n            val beacon = Beacon(\r\n                0L,\r\n                map?.name ?: \"\",\r\n                location,\r\n                visible = false,\r\n                temporary = true,\r\n                color = AppColor.Orange.color,\r\n                owner = BeaconOwner.Maps\r\n            )\r\n            val id = onIO {\r\n                beaconService.add(beacon)", "choices": [{"text": "\n            }\r\n            beaconService.add(beacon)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/997", "ground_truth": "            }\r\n\r\n            navigateTo(beacon.copy(id = id))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "val mapRepo\nval altimeter\nval formatService\n override fun onPause() {", "choices": [{"text": "_onPause() {\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _onPause();\n    _"}], "metadata": {"task_id": "Trail-Sense/1003", "ground_truth": "        super.onPause()\r\n        layerManager?.stop()\r\n        layerManager = null\r\n        lastDistanceToast?.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "private fun getNextLockMode(mode: MapLockMode): MapLockMode {\r\n        return when (mode) {\r\n            MapLockMode.Location -> {\r\n                if (hasCompass) {\r\n                    MapLockMode.Compass\r\n                } else {\r\n                    MapLockMode.Free\r\n                }\r\n            }\r\n\r\n            MapLockMode.Compass -> {\r\n                MapLockMode.Free\r\n            }", "choices": [{"text": "            }\r\n\r\n            MapLockMode.Free -> {\r\n                if (hasCompass) {\r\n                    MapLockMode.Compass\r\n                } else {\r\n                    MapLockMode.Free\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1004", "ground_truth": "            MapLockMode.Free -> {\r\n                MapLockMode.Location\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {", "choices": [{"text": "\n    super.onDestroyView();\n    if (mListener!= null) {\n        mListener.onDestroyView();\n        mListener = null;\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/1007", "ground_truth": "        if (isBound) {\r\n            binding.perspective.clearImage()\r\n        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\WarpMapFragment.kt"}}
{"prompt": "override fun onPause() {\r\n        super.onPause()\r\n        magnetometer.stop(this::onMagnetometerUpdate)\r\n        if (prefs.metalDetector.showMetalDirection) {\r\n            lowPassMagnetometer.stop(this::onLowPassMagnetometerUpdate)\r\n            orientation.stop(this::onMagnetometerUpdate)\r\n            gravity.stop(this::onMagnetometerUpdate)\r\n        }", "choices": [{"text": "\n        super.onPause()\r\n        magnetometer.stop(this::onMagnetometerUpdate)\r\n        if (prefs.metalDetector.showMetalDirection) {\r\n            lowPassMagnetometer.stop(this::onLowPassMagnetometerUpdate)\r\n            orientation.stop(this::onMagnetometerUpdate)\r\n            gravity.stop(this::onMagnetometerUpdate)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1010", "ground_truth": "        calibrateTimer.stop()\r\n        haptics.off()\r\n        isVibrating = false\r\n        audio?.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "import kotlin.math.absoluteValue\nimport com.kylecorry.sol.math.SolMath\nprivate fun updateMetalSoundIntensity(reading: Float) {\r\n        if (!isMetalDetected.value || !prefs.metalDetector.isMetalAudioEnabled) {\r\n            audio?.off()\r\n            return\r\n        }\r\n        val delta = (reading - referenceMagnitude).absoluteValue\r\n        val volume = SolMath.map(delta - threshold, 0f, 30f, 0f, 1f, true)", "choices": [{"text": "\n        audio?.setVolume(volume)\r\n        audio?.play()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1014", "ground_truth": "        audio?.setVolume(volume)\r\n        if (audio?.isOn() != true) {\r\n            audio?.on()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "private fun getCurrentMagneticFieldStrength(): Float {\r\n        val filtered = filter.filter(magnetometer.magneticField.magnitude())\r\n        return if (isHighSensitivity) {", "choices": [{"text": "(filtered))\r\n        return if (isLowSensitivity) {\r\n            magnetometer.magneticField.magnitude()\r\n        } else {\r\n            magnetometer.magneticField.magnitude()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1015", "ground_truth": "            magnetometer.magneticField.magnitude()\r\n        } else {\r\n            filtered\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "import com.kylecorry.andromeda.sense.orientation.DeviceOrientation\nfun getStyle(orientation: DeviceOrientation.Orientation): CompassStyle {\r\n        if (!isCompassAvailable){\r\n            return CompassStyle.Radar\r\n        }\r\n\r\n        return if (useLinearCompass && orientation == DeviceOrientation.Orientation.Portrait) {\r\n            CompassStyle.Linear\r\n        } else if (useRadarCompass) {", "choices": [{"text": "\n            CompassStyle.Radar\r\n        } else {\r\n            return CompassStyle.Linear\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1025", "ground_truth": "            CompassStyle.Radar\r\n        } else {\r\n            CompassStyle.Round\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\CompassStyleChooser.kt"}}
{"prompt": "import kotlin.math.max\nimport com.kylecorry.sol.units.Coordinate\nprivate fun scarfsDistance(\r\n        from: Coordinate,\r\n        to: Coordinate,\r\n        fromAltitude: Float? = null,\r\n        toAltitude: Float? = null\r\n    ): Float {\r\n        val distance = from.distanceTo(to)\r\n        val elevationGain =\r\n            max(\r\n                if (toAltitude == null || fromAltitude == null) 0f else (toAltitude - fromAltitude),", "choices": [{"text": "\n                distance\r\n            )\r\n        return elevationGain\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1028", "ground_truth": "                0f\r\n            )\r\n\r\n        return distance + 7.92f * elevationGain\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\NavigationService.kt"}}
{"prompt": "import kotlin.math.max\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nfun getNearbyBeacons(\r\n        location: Coordinate,\r\n        beacons: Collection<Beacon>,\r\n        numNearby: Int,\r\n        minDistance: Float = 0f,\r\n        maxDistance: Float = Float.POSITIVE_INFINITY\r\n    ): Collection<Beacon> {\r\n        return beacons.asSequence()\r\n            .filter { it.visible }\r\n            .map { Pair(it, location.distanceTo(it.coordinate)) }\r\n            .filter { it.second in minDistance..maxDistance }", "choices": [{"text": "\n           .filter { it.second >= numNearby }\r\n           .map { Pair(it, location.distanceTo(it.coordinate)) }\r\n           .filter { it.second <= numNearby }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1029", "ground_truth": "            .sortedBy { it.second }\r\n            .take(numNearby)\r\n            .map { it.first }\r\n            .toList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\NavigationService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nimport androidx.lifecycle.LiveData\nprivate fun getWeatherReadings(): LiveData<List<Reading<Float>>> {\r\n        return weatherRepo.getAllLive().map { readings ->\r\n            readings.mapNotNull { reading ->\r\n                if (reading.value.altitude == 0f) {\r\n                    return@mapNotNull null", "choices": [{"text": "\n                } else {\r\n                    return@mapNotNull null\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1040", "ground_truth": "                }\r\n                Reading(reading.value.altitude, reading.time)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\AltitudeBottomSheet.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.system.Resources\nimport androidx.core.graphics.drawable.toBitmap\nimport androidx.annotation.DrawableRes\nimport android.graphics.Bitmap\nfun load(@DrawableRes id: Int, size: Int): Bitmap {\r\n        val bitmap = if (icons.containsKey(id)) {\r\n            icons[id]\r\n        } else {\r\n            val drawable = Resources.drawable(context, id)\r\n            val bm = drawable?.toBitmap(size, size)", "choices": [{"text": "\n            bitmap = Bitmap.createBitmap(drawable.getWidth(), drawable.getHeight(), Bitmap.Config.ARGB_8888)\r\n        }\r\n        return bitmap\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1043", "ground_truth": "            icons[id] = bm!!\r\n            icons[id]\r\n        }\r\n        return bitmap!!\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\BitmapLoader.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.tryOrNothing\nfun clear() {\r\n        tryOrNothing {\r\n            for (icon in icons) {", "choices": [{"text": "\n                icons.remove(icon);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1045", "ground_truth": "                icon.value.recycle()\r\n            }\r\n            icons.clear()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\BitmapLoader.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun draw(drawer: ICanvasDrawer, drawTicks: Boolean = true) {\r\n        drawer.opacity(255)\r\n        drawer.noStroke()\r\n        drawer.fill(backgroundColor)\r\n        drawer.circle(center.x, center.y, radius * 2)\r\n\r\n        if (!drawTicks) return\r\n\r\n        drawer.strokeWeight(drawer.dp(tickThicknessDp))\r\n        drawer.noFill()\r\n        drawer.stroke(tickColor)", "choices": [{"text": "\n        drawer.strokeWeight(drawer.dp(tickThicknessDp))\r\n        drawer.fill(backgroundColor)\r\n        drawer.circle(center.x, center.y, radius * 2)\r\n\r\n        if (!drawTicks) return\r\n\r\n        drawer.strokeWeight(drawer.dp(tickThicknessDp))\r\n        drawer.fill(tickColor)\r\n        drawer.circle(center.x, center.y, radius * 2)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1046", "ground_truth": "        drawer.path(ticks)\r\n\r\n        drawer.stroke(cardinalTickColor)\r\n        drawer.path(cardinalTicks)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\CompassDial.kt"}}
{"prompt": "import androidx.annotation.DrawableRes\nimport android.graphics.Bitmap\nfun load(@DrawableRes id: Int, size: Int): Bitmap {\r\n        return synchronized(lock) {\r\n            val bitmap = if (icons.containsKey(id)) {\r\n                icons[id]\r\n            } else {\r\n                val bm = drawer.loadImage(id, size, size)\r\n                icons[id] = bm", "choices": [{"text": "\n            }\r\n            if (bitmap == null) {\r\n                bitmap = drawer.loadImage(id, size, size)\r\n                icons[id] = bitmap\r\n            }\r\n            return bitmap\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1052", "ground_truth": "                icons[id]\r\n            }\r\n            bitmap!!\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\DrawerBitmapLoader.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.tryOrNothing\nfun clear() {\r\n        tryOrNothing {\r\n            synchronized(lock) {\r\n                for (icon in icons) {\r\n                    icon.value.recycle()", "choices": [{"text": "\n                    icon.value.recycle()\r\n                }\r\n            }\r\n        } catch (e) {\r\n            e.printStackTrace()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1053", "ground_truth": "                }\r\n                icons.clear()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\DrawerBitmapLoader.kt"}}
{"prompt": "val formatter\nvar isTimedOut\nval banner\n fun reset() {\r\n        isTimedOut = false\r\n        isGPSErrorShown = false\r\n        isCompassErrorShown = false", "choices": [{"text": "\n        isGPSErrorShown = false\r\n        isCompassErrorShown = false\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1054", "ground_truth": "        isPoorCompassShown = false\r\n        possibleErrors.forEach {\r\n            banner.dismiss(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\errors\\NavigatorUserErrors.kt"}}
{"prompt": "import com.kylecorry.trail_sense.diagnostics.DiagnosticCode\nprivate fun show(code: DiagnosticCode) {", "choices": [{"text": "\n    if (code == null) {\n        throw new NullPointerException(\"code\");\n    }\n    if (code == null) {\n        throw new NullPointerException(\"code\");\n    }\n    if (code == null) {\n        throw new NullPointerException(\"code\");\n    }\n    if (code == null) {\n        throw new NullPointerException(\"code\");\n    }\n    if (code == null) {\n        throw new NullPointerException(\"code\");\n    }\n    if (code == null) {\n        throw new NullPointerException(\"code\");\n    }\n    if (code == null)"}], "metadata": {"task_id": "Trail-Sense/1055", "ground_truth": "        val error = errorMap[code]\r\n        if (error != null) {\r\n            banner.report(error)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\errors\\NavigatorUserErrors.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nfun setBeacons(beacons: List<Beacon>) {\r\n        synchronized(lock) {", "choices": [{"text": "\n            for (Beacon beacon : beacons) {\r\n                this.beacons.add(beacon);\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1060", "ground_truth": "            _beacons.clear()\r\n            _beacons.addAll(beacons)\r\n        }\r\n        updateMarkers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nprivate fun updateMarkers() {\r\n        scope.launch {\r\n            runner.replace {\r\n                synchronized(lock) {\r\n                    val markers = convertToMarkers(_beacons)\r\n                    clearMarkers()\r\n                    for (marker in markers) {\r\n                        addMarker(marker)", "choices": [{"text": "\n                    }\r\n                }\r\n            }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1065", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        var shouldUpdate = false\r\n\r\n        if (_compass == null) {\r\n            _compass = compass\r\n            shouldUpdate = true\r\n        }\r\n\r\n        if (shouldUpdate) {", "choices": [{"text": "\n            _compass.draw(drawer)\r\n        } else {\r\n            _compass.draw(drawer)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1067", "ground_truth": "            updateMarkers(compass)\r\n        }\r\n\r\n        markerLayer.draw(drawer, compass)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BeaconCompassLayer.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nprivate fun updateMarkers(compass: ICompassView) {\r\n        scope.launch {\r\n            runner.replace {\r\n                synchronized(lock) {\r\n                    val markers = convertToMarkers(_beacons, compass)\r\n                    markerLayer.clearMarkers()\r\n                    for (marker in markers) {\r\n                        markerLayer.addMarker(marker.first, marker.second)", "choices": [{"text": "\n                        markerLayer.addMarker(marker.first, marker.second)\r\n                    }\r\n                }\r\n            }\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1069", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BeaconCompassLayer.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nval bearings\nval lock\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        val bearings = synchronized(lock) {\r\n            bearings.toList()", "choices": [{"text": "_drawer.draw(bearings, compass)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1072", "ground_truth": "        }\r\n        bearings.forEach {\r\n            compass.draw(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BearingCompassLayer.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nval markers\nval lock\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        val markers = synchronized(lock) {\r\n            markers.toList()", "choices": [{"text": "_drawer.draw(drawer, compass)\r\n        } else {\r\n            _drawer.draw(drawer, compass)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1077", "ground_truth": "        }\r\n        markers.forEach {\r\n            compass.draw(it.first, it.second)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\MarkerCompassLayer.kt"}}
{"prompt": "import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun setColors(@ColorInt fillColor: Int, @ColorInt strokeColor: Int, opacity: Int = 50) {", "choices": [{"text": "\n    this.fillColor = fillColor;\n    this.strokeColor = strokeColor;\n    this.opacity = opacity;\n}"}], "metadata": {"task_id": "Trail-Sense/1081", "ground_truth": "        _fillColor = fillColor\r\n        _strokeColor = strokeColor\r\n        _opacity = opacity\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyAccuracyLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.markers.CircleMapMarker\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport android.graphics.Color\nprivate fun updateMarker(drawer: ICanvasDrawer, map: IMapView){\r\n        val accuracy = _accuracy ?: return\r\n        val location = _location ?: return\r\n        if (map.metersPerPixel <= 0) return\r\n\r\n        val sizePixels = 2 * accuracy / map.metersPerPixel * map.layerScale\r\n        val sizeDp = sizePixels / drawer.dp(1f)\r\n\r\n        clearMarkers()\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fillColor,\r\n                _strokeColor,", "choices": [{"text": "\n                sizeDp\r\n            )\r\n        )\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fillColor,\r\n                _strokeColor,\r\n                sizeDp\r\n            )\r\n        )\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fillColor,\r\n                _strokeColor,\r\n                sizeDp\r\n            )\r\n        )\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fill"}], "metadata": {"task_id": "Trail-Sense/1083", "ground_truth": "                _opacity,\r\n                sizeDp\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyAccuracyLayer.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nvar _path Path?\nvar _azimuth Float?\nvar _location Coordinate?\noverride fun draw(drawer: ICanvasDrawer, map: IMapView) {\r\n        if (_showDirection) {\r\n            drawArrow(drawer, map)", "choices": [{"text": "\n        } else {\r\n            drawArrow(drawer, map)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1088", "ground_truth": "        } else {\r\n            drawCircle(map)\r\n        }\r\n        super.draw(drawer, map)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.markers.CircleMapMarker\nimport android.graphics.Color\nprivate fun drawCircle(map: IMapView) {\r\n        clearMarkers()\r\n        addMarker(\r\n            CircleMapMarker(\r\n                _location ?: map.mapCenter,\r\n                color = _color,\r\n                strokeColor = Color.WHITE,", "choices": [{"text": "\n                strokeWidth = _strokeWidth,\r\n                fillColor = _fillColor,\r\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1089", "ground_truth": "                strokeWeight = 2f,\r\n                size = 16f\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.IMappablePath\nimport android.graphics.Path\noverride fun setPaths(paths: List<IMappablePath>) {\r\n        synchronized(lock) {", "choices": [{"text": "\n            for (IMappablePath path : paths) {\r\n                path.setPaths(paths);\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1095", "ground_truth": "            _paths.clear()\r\n            _paths.addAll(paths)\r\n            invalidate()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\PathLayer.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.kylecorry.trail_sense.tools.paths.ui.drawing.RenderedPath\nimport com.kylecorry.trail_sense.tools.paths.ui.drawing.IRenderedPathFactory\nimport android.graphics.Path\nprivate fun renderInBackground(renderer: IRenderedPathFactory) {\r\n        renderInProgress = true\r\n        scope.launch {", "choices": [{"text": "\n            renderer.render(this)\r\n        }\r\n        renderInProgress = false\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1096", "ground_truth": "            runner.replace {\r\n                render(renderer)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\PathLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.science.oceanography.TideType\nfun setTides(tides: List<Pair<TideTable, TideType?>>) {\r\n        synchronized(lock) {", "choices": [{"text": "\n            for (TideTable tideTable : tides) {\r\n                tideTable.setTides(tideTable.getTides());\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1100", "ground_truth": "            _tides.clear()\r\n            _tides.addAll(tides)\r\n        }\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\TideLayer.kt"}}
{"prompt": "protected fun finalize() {\r\n        _halfTideImg?.recycle()\r\n        _highTideImg?.recycle()", "choices": [{"text": "_halfTideImg?.recycle()\r\n        _highTideImg?.recycle()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1103", "ground_truth": "        _lowTideImg?.recycle()\r\n        _halfTideImg = null\r\n        _highTideImg = null\r\n        _lowTideImg = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\TideLayer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.system.Resources\nimport com.kylecorry.andromeda.canvas.ImageMode\nprivate fun drawAzimuth() {\r\n        tint(Resources.androidTextColorPrimary(context))\r\n        imageMode(ImageMode.Corner)\r\n        image(\r\n            getBitmap(R.drawable.ic_arrow_target, iconSize),", "choices": [{"text": "\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888"}], "metadata": {"task_id": "Trail-Sense/1104", "ground_truth": "            width / 2f - iconSize / 2f,\r\n            0f\r\n        )\r\n        noTint()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": "import androidx.core.view.isVisible\nvar range\nval west\nval south\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }", "choices": [{"text": "\n            return\r\n        }\r\n\r\n        if (isVisible) {\r\n            view.setVisibility(View.VISIBLE);\r\n        } else {\r\n            view.setVisibility(View.GONE);\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1106", "ground_truth": "        clear()\r\n        drawAzimuth()\r\n        drawCompass()\r\n        drawCompassLayers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.trail_sense.R\nprivate fun toPixel(bearing: Float): Float {\r\n        return AugmentedRealityUtils.getPixelLinear(\r\n            bearing,\r\n            azimuth.value,\r\n            0f,", "choices": [{"text": "\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n           "}], "metadata": {"task_id": "Trail-Sense/1108", "ground_truth": "            0f,\r\n            Size(width.toFloat(), height.toFloat()),\r\n            Size(range, 0f)\r\n        ).x\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun resume() {\r\n        synchronized(lock) {\r\n            if (isResumed) {\r\n                return\r\n            }\r\n            isResumed = true\r\n            showSightingCompass = false\r\n            viewTreeObserver.addOnGlobalLayoutListener(globalLayoutListener)", "choices": [{"text": "\n            viewTreeObserver.removeOnGlobalLayoutListener(globalLayoutListener)\r\n        }\r\n        isResumed = false\r\n        showSightingCompass = false\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1109", "ground_truth": "        }\r\n        if (isVisible) {\r\n            start()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearSightingCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun onCurrentPaceSpeedometerSelected() {\r\n        requestActivityRecognition { hasPermission ->", "choices": [{"text": "\n            hasPermission ->\r\n                hasPermission ->\r\n                    hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission ->\r\n                        hasPermission"}], "metadata": {"task_id": "Trail-Sense/1117", "ground_truth": "            if (!hasPermission) {\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigationSettingsFragment.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n        activity?.let {", "choices": [{"text": "_onDestroyView()\r\n        super.onDestroyView()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1118", "ground_truth": "            tryOrNothing {\r\n                Screen.setShowWhenLocked(it, false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Bearing\nimport com.kylecorry.andromeda.core.system.Screen\nprivate fun handleShowWhenLocked() {\r\n        activity?.let {\r\n            val shouldShow =\r\n                isBound && lockScreenPresence && (destination != null || destinationBearing != null)", "choices": [{"text": "\n        }\r\n\r\n        if (shouldShow) {\r\n            activity?.setVisibility(View.VISIBLE)\r\n        } else {\r\n            activity?.setVisibility(View.GONE)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1120", "ground_truth": "            tryOrNothing {\r\n                Screen.setShowWhenLocked(it, shouldShow)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateAstronomyData() {\r\n        inBackground {\r\n            if (gps.location == Coordinate.zero) {\r\n                return@inBackground", "choices": [{"text": "\n            } else {\r\n                gps.location = new Coordinate(gps.location.x, gps.location.y)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1122", "ground_truth": "            }\r\n\r\n            updateAstronomyLayerCommand.execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.sol.units.Bearing\nprivate fun getDestinationBearing(): Float? {\r\n        val destLocation = destination?.coordinate\r\n        return when {\r\n            destLocation != null -> {\r\n                fromTrueNorth(gps.location.bearingTo(destLocation).value)\r\n            }\r\n\r\n            destinationBearing != null -> {\r\n                destinationBearing\r\n            }", "choices": [{"text": "(gps.location.bearingTo(destinationBearing).value)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1124", "ground_truth": "            else -> {\r\n                null\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Bearing\nprivate fun getFacingBeacon(nearby: Collection<Beacon>): Beacon? {\r\n        return navigationService.getFacingBeacon(\r\n            gps.location,\r\n            compass.rawBearing,", "choices": [{"text": ",\r\n            nearby,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r"}], "metadata": {"task_id": "Trail-Sense/1126", "ground_truth": "            nearby,\r\n            declination,\r\n            useTrueNorth\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.diagnostics.status.StatusBadge\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateSensorStatus() {\r\n        inBackground {\r\n            compassStatusBadge = compassStatusBadgeProvider.getBadge()\r\n            gpsStatusBadge = gpsStatusBadgeProvider.getBadge()\r\n\r\n            val codes = onDefault {\r\n                diagnostics.flatMap { it.scan() }\r\n            }\r\n\r\n            onMain {", "choices": [{"text": "\n                statusBadgeProvider.setBadge(codes)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1127", "ground_truth": "                errors.update(codes)\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun updateNavigationButton() {\r\n        binding.beaconBtn.setImageResource(\r\n            if (destination != null) {\r\n                R.drawable.ic_cancel", "choices": [{"text": "\n            } else {\r\n                R.drawable.ic_cancel\r\n            }\r\n        );\r\n        binding.beaconBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                updateNavigationButton();\r\n            }\r\n        });\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1128", "ground_truth": "            } else {\r\n                R.drawable.ic_beacon\r\n            }\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "var compassCircle Circle\nval formatService\nvar directionSize\n private fun drawLayers() {\r\n        // TODO: Handle beacon highlighting", "choices": [{"text": "\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlighting\r\n        // TODO: Handle beacon highlight"}], "metadata": {"task_id": "Trail-Sense/1129", "ground_truth": "        push()\r\n        clip(compassPath)\r\n        layers.forEach { it.draw(this, this) }\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "import android.graphics.Color\nprivate fun drawDirection(degrees: Float, text: String) {\r\n        push()\r\n        rotate(degrees)\r\n        fill(Color.WHITE)\r\n        text(\r\n            text,", "choices": [{"text": ",\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n"}], "metadata": {"task_id": "Trail-Sense/1131", "ground_truth": "            width / 2f,\r\n            height / 2f - compassSize / 4f\r\n        )\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "import androidx.core.view.isVisible\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }\r\n        clear()\r\n        push()\r\n        rotate(-azimuth.value)", "choices": [{"text": "\n        push()\r\n        rotate(azimuth.value)\r\n        pop()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1132", "ground_truth": "        drawCompass()\r\n        drawLayers()\r\n        drawCompassLayers()\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport com.kylecorry.andromeda.canvas.ImageMode\nimport android.graphics.Color\nprivate fun drawAzimuth() {\r\n        tint(Resources.androidTextColorPrimary(context))\r\n        imageMode(ImageMode.Corner)\r\n        image(\r\n            getBitmap(R.drawable.ic_arrow_target, iconSize),", "choices": [{"text": "\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888,\r\n            Bitmap.Config.ARGB_8888"}], "metadata": {"task_id": "Trail-Sense/1136", "ground_truth": "            width / 2f - iconSize / 2f,\r\n            0f\r\n        )\r\n        noTint()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "import androidx.core.view.isVisible\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }\r\n        clear()\r\n        drawAzimuth()\r\n        push()", "choices": [{"text": "\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push()\r\n        push"}], "metadata": {"task_id": "Trail-Sense/1137", "ground_truth": "        rotate(-azimuth.value)\r\n        drawCompass()\r\n        drawCompassLayers()\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.SolMath.deltaAngle\noverride fun draw(bearing: IMappableBearing, stopAt: Coordinate?) {\r\n        push()\r\n        fill(bearing.color)\r\n        opacity(100)\r\n        val dp2 = dp(2f)\r\n        arc(\r\n            iconSize.toFloat() + dp2,\r\n            iconSize.toFloat() + dp2,\r\n            compassSize.toFloat(),\r\n            compassSize.toFloat(),\r\n            azimuth.value - 90,\r\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),", "choices": [{"text": "\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),\r\n            stopAt.value - 90,\r\n            stopAt.value - 90 + deltaAngle(stopAt.value, bearing.bearing.value)\r\n        )\r\n        pop()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1138", "ground_truth": "            ArcMode.Pie\r\n        )\r\n        opacity(255)\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.notes.domain.Note\noverride suspend fun addNote(note: Note): Long {\r\n        return if (note.id != 0L){\r\n            noteDao.update(note)", "choices": [{"text": "\n        } else {\r\n            noteDao.insert(note)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1140", "ground_truth": "            note.id\r\n        } else {\r\n            noteDao.insert(note)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\notes\\infrastructure\\NoteRepo.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.notes.domain.Note\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun loadEditingNote(id: Long) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                editingNote = notesRepo.getNote(id)\r\n            }\r\n\r\n            withContext(Dispatchers.Main) {\r\n                if (isBound) {\r\n                    editingNote?.let {\r\n                        binding.titleEdit.setText(it.title ?: \"\")\r\n                        binding.contentEdit.setText(it.contents ?: \"\")\r\n                    }", "choices": [{"text": "\n                } else {\r\n                    binding.titleEdit.setText(it.title?: \"\")\r\n                    binding.contentEdit.setText(it.contents?: \"\")\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1150", "ground_truth": "                }\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\notes\\ui\\FragmentToolNotesCreate.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\noverride fun sort(items: List<PackItem>): List<PackItem> {\r\n        return items.sortedWith(\r\n            compareBy(\r\n                { it.category.name },", "choices": [{"text": ",\r\n                compareBy(\r\n                    { it.description.name },\r\n                    compareBy(\r\n                        { it.description.description },\r\n                        compareBy(\r\n                            { it.description.description },\r\n                            compareBy(\r\n                                { it.description.description },\r\n                                compareBy(\r\n                                    { it.description.description },\r\n                                    compareBy(\r\n                                        { it.description.description },\r\n                                        compareBy(\r\n                                            { it.description.description },\r\n                                            compareBy(\r\n                                "}], "metadata": {"task_id": "Trail-Sense/1153", "ground_truth": "                { it.name },\r\n                { it.id }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\domain\\sort\\CategoryPackItemSort.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\noverride fun sort(items: List<PackItem>): List<PackItem> {\r\n        return items.sortedWith(\r\n            compareBy(\r\n                { if (ascending) it.percentPacked else -it.percentPacked },\r\n                { it.category.name },", "choices": [{"text": "\n                { it.category.name }\r\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1154", "ground_truth": "                { it.name },\r\n                { it.id }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\domain\\sort\\PackedPercentPackItemSort.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.sol.units.Weight\nfun mapToPackItem(item: PackItemEntity): PackItem {\r\n        val weight = if (item.weight != null && item.weightUnits != null) {\r\n            Weight(item.weight, item.weightUnits)\r\n        } else {\r\n            null\r\n        }\r\n        return PackItem(\r\n            item.id,\r\n            item.packId,\r\n            item.name,\r\n            item.category,", "choices": [{"text": "\n            weight\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1155", "ground_truth": "            item.amount,\r\n            item.desiredAmount,\r\n            weight\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nfun mapToItemEntity(item: PackItem): PackItemEntity {\r\n        return PackItemEntity(\r\n            item.name,\r\n            item.packId,\r\n            item.category,\r\n            item.amount,\r\n            item.desiredAmount,\r\n            item.weight?.weight,", "choices": [{"text": "\n            item.description?.description\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1156", "ground_truth": "            item.weight?.units\r\n        ).also {\r\n            it.id = item.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport androidx.lifecycle.map\noverride suspend fun addPack(pack: Pack): Long {\r\n        return if (pack.id == 0L) {\r\n            packDao.insert(mapper.mapToPackEntity(pack))", "choices": [{"text": "\n        } else {\r\n            packDao.update(mapper.mapToPackEntity(pack))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1162", "ground_truth": "        } else {\r\n            packDao.update(mapper.mapToPackEntity(pack))\r\n            pack.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport androidx.lifecycle.map\noverride suspend fun copyPack(fromPack: Pack, toPack: Pack): Long {\r\n        val newId = addPack(toPack)\r\n        val items = getItemsFromPackAsync(fromPack.id)\r\n        val toItems = items.map { it.copy(id = 0, packId = newId) }", "choices": [{"text": "(fromPack.id, toPack.id)\r\n        return toItems.map { it.copy(id = 0, packId = newId) }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1163", "ground_truth": "        toItems.forEach {\r\n            addItem(it)\r\n        }\r\n        return newId\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "import com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        inBackground {", "choices": [{"text": "\n            super.onViewCreated(view, savedInstanceState)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1168", "ground_truth": "            withContext(Dispatchers.IO) {\r\n                loadPack(packId)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nprivate fun onItemCheckboxClicked(item: PackItem) {\r\n        if (!item.isFullyPacked) {\r\n            if (item.desiredAmount == 0.0) {\r\n                setAmount(item, 1.0)\r\n            } else {\r\n                setAmount(item, item.desiredAmount)", "choices": [{"text": "\n            }\r\n        } else {\r\n            setAmount(item, 0.0)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1171", "ground_truth": "            }\r\n        } else {\r\n            setAmount(item, 0.0)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun deleteItem(item: PackItem) {\r\n        inBackground {", "choices": [{"text": "\n            item.delete();\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1172", "ground_truth": "            withContext(Dispatchers.IO) {\r\n                itemRepo.deleteItem(item)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun add(item: PackItem) {\r\n        Pickers.number(\r\n            requireContext(),\r\n            getString(R.string.add),\r\n            null,\r\n            null,\r\n            allowNegative = false,\r\n            hint = getString(R.string.dialog_item_amount)\r\n        ) {", "choices": [{"text": "\n            item.setAmount(item.getAmount() + 1)\r\n            item.save()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1175", "ground_truth": "            if (it != null) {\r\n                addAmount(item, it.toDouble())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun subtract(item: PackItem) {\r\n        Pickers.number(\r\n            requireContext(),\r\n            getString(R.string.subtract),\r\n            null,\r\n            null,\r\n            allowNegative = false,\r\n            hint = getString(R.string.dialog_item_amount)\r\n        ) {", "choices": [{"text": "\n            if (item.getAmount() < 0) {\r\n                item.setAmount(0);\r\n            } else {\r\n                item.setAmount(item.getAmount() - 1);\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1176", "ground_truth": "            if (it != null) {\r\n                addAmount(item, -it.toDouble())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun addAmount(item: PackItem, amount: Double) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                itemRepo.addItem(", "choices": [{"text": "\n                    item,\r\n                    amount\r\n                );\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1177", "ground_truth": "                    item.copy(amount = max(0.0, item.amount + amount))\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun setAmount(item: PackItem, amount: Double) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                itemRepo.addItem(", "choices": [{"text": "\n                    new PackItem(item, amount)\r\n                )\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1178", "ground_truth": "                    item.copy(amount = amount)\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val options = listOf(\"category\", \"percent_asc\", \"percent_desc\", \"weight_asc\", \"weight_desc\")\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            options.map { getSortTitle(it) },\r\n            options.indexOf(prefs.packs.packSort)\r\n        ) {", "choices": [{"text": "\n            Pickers.item(\r\n                requireContext(),\r\n                getString(R.string.sort),\r\n                options.map { getSortTitle(it) },\r\n                options.indexOf(prefs.packs.packSort)\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1179", "ground_truth": "            if (it != null) {\r\n                onSortChange(options[it])\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun renamePack(pack: Pack) {\r\n        Pickers.text(\r\n            requireContext(),\r\n            getString(R.string.rename),\r\n            null,\r\n            pack.name,\r\n            hint = getString(R.string.name)\r\n        ) {\r\n            if (it != null) {\r\n                inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        packRepo.addPack(pack.copy(name = it))", "choices": [{"text": "\n                    }\r\n                }\r\n            } else {\r\n                inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        packRepo.addPack(pack.copy())\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1184", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackListFragment.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nprivate fun deletePack(pack: Pack) {\r\n        Alerts.dialog(\r\n            requireContext(),\r\n            getString(R.string.delete_pack),\r\n            pack.name\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        packRepo.deletePack(pack)", "choices": [{"text": "\n                    }\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1185", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride fun toBeacon(path: Path, point: PathPoint): Beacon {\r\n        return Beacon(\r\n            0L,\r\n            path.name ?: defaultName,\r\n            point.coordinate,\r\n            visible = false,\r\n            elevation = point.elevation,", "choices": [{"text": "\n            visible = true,\r\n            elevation = point.elevation,\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1187", "ground_truth": "            temporary = true,\r\n            color = path.style.color,\r\n            owner = BeaconOwner.Path\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\beacon\\TemporaryPathPointBeaconConverter.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.IPointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport android.util.Range\noverride fun createColoringStrategy(path: List<PathPoint>): IPointColoringStrategy {\r\n        val altitudeRange = getAltitudeRange(path)", "choices": [{"text": "\n        if (altitudeRange == null) {\r\n            return null\r\n        } else {\r\n            return new AltitudeColoringStrategy(altitudeRange)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1188", "ground_truth": "        return AltitudePointColoringStrategy(\r\n            altitudeRange,\r\n            createColorScale(path)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\AltitudePointDisplayFactory.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.scales.IColorScale\nimport com.kylecorry.trail_sense.shared.scales.DiscreteColorScale\nimport com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun createColorScale(path: List<PathPoint>): IColorScale {\r\n        return DiscreteColorScale(\r\n            listOf(\r\n                AppColor.Green.color,", "choices": [{"text": "\n                AppColor.Red.color,\r\n                AppColor.Blue.color,\r\n                AppColor.Magenta.color,\r\n                AppColor.Cyan.color,\r\n                AppColor.White.color,\r\n            ),\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1192", "ground_truth": "                AppColor.Yellow.color,\r\n                AppColor.Red.color\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\SlopePointDisplayFactory.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.IPointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.rangeOrNull\nimport android.util.Range\nimport android.graphics.Color\noverride fun createColoringStrategy(path: List<PathPoint>): IPointColoringStrategy {\r\n        val timeRange = path.mapNotNull { it.time }.rangeOrNull() ?: Range(\r\n            Instant.now(),\r\n            Instant.now()\r\n        )", "choices": [{"text": "\n        val colorRange = path.mapNotNull { it.color }.rangeOrNull()?: Range(\r\n            Instant.now(),\r\n            Instant.now()\r\n        )\r\n        return new WaypointColoringStrategy(timeRange, colorRange)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1194", "ground_truth": "        return TimePointColoringStrategy(\r\n            timeRange,\r\n            createColorScale(path)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\TimePointDisplayFactory.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.TimeUnits\nimport com.kylecorry.sol.units.Speed\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.geology.Geology\noverride fun getHikingDuration(\r\n        path: List<PathPoint>,\r\n        pace: Speed\r\n    ): Duration {\r\n        val speed = pace.convertTo(DistanceUnits.Meters, TimeUnits.Seconds).speed\r\n        val gain = getElevationGain(path).meters().distance\r\n\r\n        val distance = Geology.getPathDistance(path.map { it.coordinate }).meters().distance", "choices": [{"text": "\n\r\n        val duration = Math.min(speed, gain)\r\n\r\n        return duration\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1203", "ground_truth": "        val scarfs = distance + 7.92f * gain\r\n\r\n        return Duration.ofSeconds((scarfs / speed).toLong())\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\hiking\\HikingService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\noverride suspend fun map(item: IPath): String? {\r\n        return if (item is Path) {", "choices": [{"text": "\n            return item.toString();\r\n        } else {\r\n            return item.toString();\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1211", "ground_truth": "            item.name\r\n        } else {\r\n            (item as PathGroup).name\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\pathsort\\mappers\\PathNameMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.Coordinate\noverride suspend fun getNextPoint(path: List<PathPoint>, location: Coordinate): PathPoint? {\r\n        // TODO: This doesn't take into consideration which points you've already reached - if the path is a out and back type, it will not work properly\r\n        val line = NearestPathLineCalculator().calculate(location, path) ?: return null\r\n        return if (isAtPoint(location, line.second)) {\r\n            line.second", "choices": [{"text": " = null\r\n            return null\r\n        } else {\r\n            return path.get(path.size() - 1)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1216", "ground_truth": "        } else {\r\n            val idx = path.indexOf(line.second)\r\n            path.getOrNull(idx + 1)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\point_finder\\NextPathPointNavigator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.specifications.InGeofenceSpecification\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nprivate fun isAtPoint(location: Coordinate, point: PathPoint): Boolean {\r\n        val specification = InGeofenceSpecification(\r\n            point.coordinate, Distance.meters(", "choices": [{"text": "\n                distance.meters(\r\n                    distance.meters(\r\n                        distance.meters(\r\n                            distance.meters(\r\n                                distance.meters(\r\n                                    distance.meters(\r\n                                        distance.meters(\r\n                                            distance.meters(\r\n                                                distance.meters(\r\n                                                    distance.meters(\r\n                                                        distance.meters(\r\n                                                    distance.meters(\r\n                                                        distance.meters(\r\n                                                        distance.meters(\r\n                                                        distance.meters"}], "metadata": {"task_id": "Trail-Sense/1217", "ground_truth": "                AT_LOCATION_RADIUS\r\n            )\r\n        )\r\n        return specification.isSatisfiedBy(location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\point_finder\\NextPathPointNavigator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun getColor(point: PathPoint): Int? {\r\n        val pct = when (point.cellSignal?.quality) {\r\n            Quality.Poor -> 0f\r\n            Quality.Moderate -> 0.5f", "choices": [{"text": "\n        }\r\n        return Math.round(pct * 100.0f)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1219", "ground_truth": "            Quality.Good -> 1f\r\n            else -> return null\r\n        }\r\n        return colorScale.getColor(pct)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\waypointcolors\\CellSignalPointColoringStrategy.kt"}}
{"prompt": "import kotlin.math.absoluteValue\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun getColor(point: PathPoint): Int {\r\n        val pct = if (point.slope.absoluteValue <= 10f) {\r\n            0f\r\n        } else if (point.slope.absoluteValue <= 25f) {\r\n            0.5f", "choices": [{"text": "\n        } else if (point.slope.absoluteValue <= 50f) {\r\n            1f\r\n        } else if (point.slope.absoluteValue <= 100f) {\r\n            2f\r\n        } else if (point.slope.absoluteValue <= 400f) {\r\n            3f\r\n        } else if (point.slope.absoluteValue <= 500f) {\r\n            4f\r\n        } else if (point.slope.absoluteValue <= 600f) {\r\n            5f\r\n        } else if (point.slope.absoluteValue <="}], "metadata": {"task_id": "Trail-Sense/1221", "ground_truth": "        } else {\r\n            1f\r\n        }\r\n        return colorScale.getColor(pct)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\waypointcolors\\SlopePointColoringStrategy.kt"}}
{"prompt": "import androidx.room.Entity\nfun from(point: PathPoint): WaypointEntity {\r\n            return WaypointEntity(\r\n                point.coordinate.latitude,\r\n                point.coordinate.longitude,\r\n                point.elevation,\r\n                point.time?.toEpochMilli() ?: 0L,\r\n                point.cellSignal?.network?.id,\r\n                point.cellSignal?.quality?.ordinal,", "choices": [{"text": "\n                point.time?.toEpochMilli()?: 0L,\r\n                point.cellSignal?.network?.id,\r\n                point.cellSignal?.quality?.ordinal,\r\n                point.cellSignal?.quality?.ordinal,\r\n                point.cellSignal?.quality?.ordinal,\r\n                point.cellSignal?.quality?.ordinal,\r\n                point.cellSignal?.quality?.ordinal,\r\n                point.cellSignal?.quality?.ordinal,\r\n                point.cellSignal?"}], "metadata": {"task_id": "Trail-Sense/1224", "ground_truth": "                point.pathId\r\n            ).also {\r\n                it.id = point.id\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\WaypointEntity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nsuspend fun restart(context: Context) {\r\n        val prefs = UserPreferences(context)", "choices": [{"text": "\n        prefs.save()\r\n        super.restart(context)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1227", "ground_truth": "        if (prefs.backtrackEnabled) {\r\n            stop(context)\r\n            start(context, false)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\BacktrackScheduler.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.infrastructure.persistence.PathService\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport android.content.Context\nsuspend fun start(context: Context, startNewPath: Boolean) = onDefault {\r\n        if (startNewPath) {\r\n            PathService.getInstance(context).endBacktrackPath()\r\n        }\r\n\r\n        if (!BacktrackIsAvailable().isSatisfiedBy(context)) {", "choices": [{"text": "\n            PathService.getInstance(context).startBacktrackPath()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1228", "ground_truth": "            return@onDefault\r\n        }\r\n\r\n        BacktrackService.start(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\BacktrackScheduler.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.trail_sense.shared.networkQuality\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nprivate suspend fun recordWaypoint(): PathPoint {\r\n        return onIO {\r\n            val waypoint = PathPoint(\r\n                0,\r\n                pathId,\r\n                gps.location,\r\n                altimeter.altitude,\r\n                Instant.now(),\r\n                cellSignalSensor.networkQuality()\r\n            )\r\n\r\n            if (pathId == 0L) {\r\n                pathService.addBacktrackPoint(waypoint)\r\n            } else {", "choices": [{"text": "\n                pathService.addBacktrackPoint(waypoint)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1233", "ground_truth": "                pathService.addWaypoint(waypoint)\r\n            }\r\n            waypoint\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\commands\\BacktrackCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\noverride suspend fun load(search: String?, group: Long?): List<IPath> = onIO {\r\n        if (search.isNullOrBlank()) {", "choices": [{"text": "\n            return Collections.emptyList();\r\n        }\r\n        if (group.isNullOrBlank()) {\r\n            return Collections.emptyList();\r\n        }\r\n        List<IPath> paths = new ArrayList<>();\r\n        for (String path : search.split(\",\")) {\r\n            paths.add(new Path(path));\r\n        }\r\n        return paths;\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1235", "ground_truth": "            getPathsByGroup(group)\r\n        } else {\r\n            getPathsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\PathGroupLoader.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun add(value: Path): Long {\r\n        return if (value.id != 0L) {\r\n            pathDao.update(PathEntity.from(value))", "choices": [{"text": "\n        } else {\r\n            pathDao.insert(PathEntity.from(value))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1238", "ground_truth": "            value.id\r\n        } else {\r\n            pathDao.insert(PathEntity.from(value))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun addGroup(group: PathGroup): Long {\r\n        return if (group.id != 0L) {\r\n            groupDao.update(PathGroupEntity.from(group))", "choices": [{"text": "\n        } else {\r\n            groupDao.create(PathGroupEntity.from(group))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1239", "ground_truth": "            group.id\r\n        } else {\r\n            groupDao.insert(PathGroupEntity.from(group))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathRepo.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun addBacktrackPoint(point: PathPoint) {\r\n        backtrackLock.withLock {\r\n            val id = cache.getLong(BACKTRACK_PATH_KEY)\r\n            val backtrackId = if (id == null || getPath(id) == null) {\r\n                val newId = createBacktrackPath()\r\n                cache.putLong(BACKTRACK_PATH_KEY, newId)\r\n                newId\r\n            } else {\r\n                id", "choices": [{"text": "\n            }\r\n            if (backtrackId == null) {\r\n                backtrackId = createBacktrackPath()\r\n                cache.putLong(BACKTRACK_PATH_KEY, backtrackId)\r\n            }\r\n            point.setBacktrackId(backtrackId)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1241", "ground_truth": "            }\r\n\r\n            addWaypoint(point.copy(pathId = backtrackId))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun deletePath(path: Path) {\r\n        backtrackLock.withLock {\r\n            val backtrackId = cache.getLong(BACKTRACK_PATH_KEY)\r\n            if (backtrackId == path.id) {\r\n                cache.remove(BACKTRACK_PATH_KEY)\r\n            }", "choices": [{"text": "\n            cache.remove(BACKTRACK_PATH_KEY)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1246", "ground_truth": "        }\r\n\r\n        waypointRepo.deleteInPath(path.id)\r\n        pathRepo.delete(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport androidx.lifecycle.map\noverride suspend fun getWaypoints(paths: List<Long>?): Map<Long, List<PathPoint>> {\r\n        if (paths?.isEmpty() == true) {\r\n            return mapOf()\r\n        }\r\n\r\n        val points = if (paths != null) {\r\n            waypointRepo.getAllInPaths(paths)", "choices": [{"text": "\n        } else {\r\n            waypointRepo.getAll()\r\n        }\r\n\r\n        return mapOf(points)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1247", "ground_truth": "        } else {\r\n            waypointRepo.getAll()\r\n        }\r\n        return points.groupBy { it.pathId }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport androidx.lifecycle.map\noverride suspend fun moveWaypointsToPath(points: List<PathPoint>, pathId: Long) {\r\n        val oldPaths =\r\n            points.filter { it.pathId != 0L && it.pathId != pathId }.map { it.pathId }.distinct()\r\n        waypointRepo.addAll(points.map { it.copy(pathId = pathId) })", "choices": [{"text": "\n        waypointRepo.removeAll(oldPaths)\r\n        waypointRepo.addAll(points.map { it.copy(pathId = pathId) })\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1251", "ground_truth": "        updatePathMetadata(pathId)\r\n        for (path in oldPaths) {\r\n            updatePathMetadata(pathId)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.WaypointEntity\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride suspend fun add(value: PathPoint): Long {\r\n        return if (value.id != 0L) {\r\n            waypointDao.update(WaypointEntity.from(value))", "choices": [{"text": "\n        } else {\r\n            waypointDao.insert(WaypointEntity.from(value))\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1259", "ground_truth": "            value.id\r\n        } else {\r\n            waypointDao.insert(WaypointEntity.from(value))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.WaypointEntity\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport androidx.lifecycle.map\noverride suspend fun addAll(value: List<PathPoint>) {\r\n        val toAdd = value.filter { it.id == 0L }.map { WaypointEntity.from(it) }\r\n        val toUpdate = value.filter { it.id != 0L }.map { WaypointEntity.from(it) }\r\n\r\n        if (toAdd.isNotEmpty()) {\r\n            waypointDao.bulkInsert(toAdd)\r\n        }", "choices": [{"text": "\n        if (toUpdate.isNotEmpty()) {\r\n            waypointDao.bulkUpdate(toUpdate)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1260", "ground_truth": "\r\n        if (toUpdate.isNotEmpty()) {\r\n            waypointDao.bulkUpdate(toUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "import java.time.Instant\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport androidx.lifecycle.LiveData\noverride fun getAllLive(since: Instant?): LiveData<List<PathPoint>> {\r\n        return if (since == null) {\r\n            waypointDao.getAll()\r\n        } else {\r\n            waypointDao.getAllSince(\r\n                since.toEpochMilli()", "choices": [{"text": "\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1262", "ground_truth": "            )\r\n        }.map {\r\n            it.map { waypoint -> waypoint.toPathPoint() }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "override fun onDestroy() {", "choices": [{"text": "\n    super.onDestroy();\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver);\n        mReceiver = null;\n    }\n\n    if (mActivity!= null) {\n        mActivity.unregisterReceiver(mReceiver"}], "metadata": {"task_id": "Trail-Sense/1271", "ground_truth": "        isRunning = false\r\n        runner.cancel()\r\n        stopService(true)\r\n        super.onDestroy()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\services\\BacktrackService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FeatureState\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.BacktrackScheduler\nprivate fun calculateBacktrackState(): FeatureState {\r\n        return if (BacktrackScheduler.isDisabled(context)) {\r\n            FeatureState.Unavailable\r\n        } else if (BacktrackScheduler.isOn(context)) {", "choices": [{"text": "\n            FeatureState.On\r\n        } else {\r\n            FeatureState.Disabled\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1274", "ground_truth": "            FeatureState.On\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\subsystem\\BacktrackSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.SolMath.roundPlaces\noverride fun execute(path: Path, point: PathPoint) {\r\n        val params = mutableMapOf(\r\n            \"label\" to (path.name ?: context.getString(R.string.waypoint))\r\n        )\r\n\r\n        if (point.elevation != null) {\r\n            params[\"ele\"] = point.elevation.roundPlaces(2).toString()\r\n        }", "choices": [{"text": "\n\r\n        if (params[\"ele\"]!= null) {\r\n            params[\"ele\"] = point.elevation.roundPlaces(2).toString()\r\n        }\r\n\r\n        return context.getString(R.string.waypoint, params)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1278", "ground_truth": "        AppUtils.placeBeacon(\r\n            context,\r\n            GeoUri(point.coordinate, null, params)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\CreateBeaconFromPointCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.CoroutinePickers\nsuspend fun execute(parentId: Long?) {\r\n        val name = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.group),\r\n                hint = context.getString(R.string.name)\r\n            )\r\n        } ?: return", "choices": [{"text": "\n        CoroutinePickers.text(\r\n            context,\r\n            context.getString(R.string.group),\r\n            hint = context.getString(R.string.name)\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1279", "ground_truth": "\r\n        onIO {\r\n            pathService.addGroup(PathGroup(0, name, parentId))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\CreatePathGroupCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\noverride suspend fun execute(group: PathGroup) {\r\n        val cancelled = onMain {\r\n            CoroutineAlerts.dialog(\r\n                context,\r\n                context.getString(R.string.delete),\r\n                context.getString(R.string.delete_path_group_message, group.name)\r\n            )\r\n        }\r\n\r\n        if (cancelled) {\r\n            return\r\n        }", "choices": [{"text": "\n        CoroutineAlerts.dialog(\r\n            context,\r\n            context.getString(R.string.delete),\r\n            context.getString(R.string.delete_path_group_message, group.name)\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1280", "ground_truth": "\r\n        onIO {\r\n            pathService.deleteGroup(group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\DeletePathGroupGroupCommand.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nimport android.content.Context\noverride fun execute(path: Path, point: PathPoint) {\r\n        Alerts.dialog(\r\n            context,\r\n            context.getString(R.string.delete_waypoint_prompt)\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                lifecycleOwner.inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        pathService.deleteWaypoint(point)", "choices": [{"text": "\n                    }\r\n                }\r\n            } else {\r\n                pathService.deleteWaypoint(point)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1281", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\DeletePointCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathMetadata\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.FullPath\nimport com.kylecorry.andromeda.gpx.GPXData\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun getTracks(gpx: GPXData): List<FullPath> = onDefault {\r\n        val paths = mutableListOf<FullPath>()\r\n        for (track in gpx.tracks) {\r\n            for ((points) in track.segments) {\r\n                val path = Path(0, track.name, style, PathMetadata.empty)\r\n                val parent = track.group?.let {\r\n                    PathGroup(0, it)\r\n                }", "choices": [{"text": "\n                paths.add(path)\r\n            }\r\n        }\r\n        return paths\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1284", "ground_truth": "                paths.add(FullPath(path, points.toPathPoints(), parent))\r\n            }\r\n        }\r\n        paths\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\ImportPathsCommand.kt"}}
{"prompt": "import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.content.Context\noverride fun execute(path: Path) {\r\n        Pickers.text(\r\n            context,\r\n            context.getString(R.string.rename),\r\n            default = path.name,\r\n            hint = context.getString(R.string.name)\r\n        ) {\r\n            if (it != null) {\r\n                lifecycleOwner.inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        pathService.addPath(path.copy(name = it.ifBlank { null }))\r\n                    }", "choices": [{"text": "\n                }\r\n            } else {\r\n                lifecycleOwner.inBackground {\r\n                    pathService.addPath(path.copy(name = null))\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1289", "ground_truth": "                }\r\n\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\RenamePathCommand.kt"}}
{"prompt": "import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.CoroutinePickers\noverride suspend fun execute(group: PathGroup) {\r\n        val newName = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.rename),\r\n                default = group.name,\r\n                hint = context.getString(R.string.name)\r\n            )\r\n        } ?: return", "choices": [{"text": "\n        group.name = newName\r\n        context.setString(R.string.rename, group.name)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1290", "ground_truth": "\r\n        onIO {\r\n            pathService.addGroup(group.copy(name = newName))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\RenamePathGroupGroupCommand.kt"}}
{"prompt": "import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun getScaleDistance(\r\n        units: DistanceUnits,\r\n        maxLength: Float,\r\n        metersPerPixel: Float\r\n    ): Distance {\r\n        val intervals = if (units == DistanceUnits.Meters) {\r\n            metricScaleIntervals\r\n        } else {\r\n            imperialScaleIntervals\r\n        }\r\n\r\n        for (i in 1..intervals.lastIndex) {\r\n            val current = intervals[i]\r\n            val length = current.meters().distance / metersPerPixel\r\n            if (length > maxLength) {\r\n                return intervals[i - 1]", "choices": [{"text": "\n            } else {\r\n                return intervals[i + 1]\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1292", "ground_truth": "            }\r\n        }\r\n\r\n        return intervals.last()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\DistanceScale.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\nimport android.graphics.Path\nfun getScaleBar(distance: Distance, metersPerPixel: Float, path: Path = Path()): Path {\r\n        val length = distance.meters().distance / metersPerPixel\r\n        val height = 12f\r\n\r\n        // Horizontal\r\n        path.moveTo(0f, 0f)\r\n        path.lineTo(length, 0f)\r\n\r\n        // Start\r\n        path.moveTo(0f, -height / 2)\r\n        path.lineTo(0f, height / 2)\r\n\r\n        // End\r\n        path.moveTo(length, -height / 2)\r\n        path.lineTo(length, height / 2)\r\n\r\n        // Middle\r\n        path.moveTo(length / 2, height / 2)", "choices": [{"text": "\n        path.lineTo(length / 2, height / 2)\r\n        path.lineTo(length / 2, height / 2)\r\n        path.lineTo(length / 2, height / 2)\r\n        path.lineTo(length / 2, height / 2)\r\n        path.lineTo(length / 2, height / 2)\r\n        path.lineTo(length / 2, height / 2)\r\n        path.lineTo(length / 2, height / 2)\r\n        path.lineTo(length / 2, height / 2)\r"}], "metadata": {"task_id": "Trail-Sense/1293", "ground_truth": "        path.lineTo(length / 2, 0f)\r\n\r\n\r\n        return path\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\DistanceScale.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport com.kylecorry.andromeda.canvas.ArrowPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val arrow = ArrowPathEffect(6f / strokeScale, 10f / strokeScale)\r\n        canvasDrawer.apply {\r\n            pathEffect(arrow)", "choices": [{"text": "\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r\n            pathEffect(arrow)\r"}], "metadata": {"task_id": "Trail-Sense/1294", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\ArrowPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 12f / strokeScale\r\n        val effect = CrossPathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(effect)\r\n            noFill()", "choices": [{"text": "\n        }\r\n        canvasDrawer.draw(color)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1296", "ground_truth": "            strokeWeight(4f / strokeScale)\r\n            stroke(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\CrossPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport android.graphics.DashPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val dotted = DashPathEffect(\r\n            floatArrayOf(3f / strokeScale, 10f / strokeScale), 0f\r\n        )\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n            noFill()", "choices": [{"text": "\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n            noFill()\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n            noFill()\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n            noFill()\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n            noFill()\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)"}], "metadata": {"task_id": "Trail-Sense/1297", "ground_truth": "            strokeWeight(4f / strokeScale)\r\n            stroke(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DashedPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 12f / strokeScale\r\n        val dotted = DiamondPathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)", "choices": [{"text": "\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n       "}], "metadata": {"task_id": "Trail-Sense/1299", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DiamondPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport com.kylecorry.andromeda.canvas.DottedPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val dotted = DottedPathEffect(3f / strokeScale, 10f / strokeScale)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)", "choices": [{"text": "\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n            pathEffect(dotted)\r\n           "}], "metadata": {"task_id": "Trail-Sense/1300", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DottedPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        canvasDrawer.apply {\r\n            noPathEffect()\r\n            noFill()", "choices": [{"text": "\n            noStroke()\r\n        }\r\n        block.apply {\r\n            stroke(color, strokeScale)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1302", "ground_truth": "            stroke(color)\r\n            strokeWeight(6f / strokeScale)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\SolidPathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 8f / strokeScale\r\n        val dotted = SquarePathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)", "choices": [{"text": "\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n        }\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n       "}], "metadata": {"task_id": "Trail-Sense/1304", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\SquarePathLineDrawerStrategy.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IPath): ListItem {\r\n        return if (value is Path) {", "choices": [{"text": "\n            return new PathListItem(value)\r\n        } else {\r\n            return new ListItem(value)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1305", "ground_truth": "            pathMapper.map(value)\r\n        } else {\r\n            groupMapper.map(value as PathGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\IPathListItemMapper.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.andromeda.core.tryOrNothing\nfun highlight(point: PathPoint) {\r\n        val idx = _path.indexOf(point)\r\n        if (idx == -1) {\r\n            return\r\n        }\r\n        val pointIndex = _elevationIndex.indexOf(idx)\r\n        if (pointIndex == -1) {\r\n            return\r\n        }\r\n        tryOrNothing {", "choices": [{"text": "\n            _path.set(idx, point)\r\n            _elevationIndex.set(pointIndex, idx)\r\n        } catch (e) {\r\n            _path.set(idx, null)\r\n            _elevationIndex.set(pointIndex, null)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1306", "ground_truth": "            highlight.data = listOf(_elevations[pointIndex])\r\n        }\r\n\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "import com.kylecorry.sol.math.Vector2\nimport com.kylecorry.andromeda.views.chart.data.ChartLayer\nimport com.kylecorry.andromeda.views.chart.data.AreaChartLayer\nimport com.kylecorry.andromeda.views.chart.Chart\nprivate fun getSlopeChart(\r\n        data: List<Vector2>,\r\n        steepness: Steepness,\r\n        bottom: Float\r\n    ): ChartLayer {\r\n        return AreaChartLayer(\r\n            data,", "choices": [{"text": "\n            steepness,\r\n            bottom\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1308", "ground_truth": "            Color.TRANSPARENT,\r\n            getColor(steepness),\r\n            initialFillTo = bottom\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "import kotlin.math.absoluteValue\nprivate fun getSteepness(slope: Float): Steepness {\r\n        return if (slope.absoluteValue <= 10f) {\r\n            Steepness.Low\r\n        } else if (slope.absoluteValue <= 25f) {", "choices": [{"text": "\n            Steepness.High\r\n        } else {\r\n            Steepness.Medium\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1310", "ground_truth": "            Steepness.Medium\r\n        } else {\r\n            Steepness.High\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.navigation.ui.MappableLocation\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPointColoringStyle\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport android.graphics.Color\nimport android.content.Context\nfun List<PathPoint>.toMappableLocations(\r\n    context: Context,\r\n    coloringStyle: PathPointColoringStyle = PathPointColoringStyle.None\r\n): List<MappableLocation> {\r\n    val colorFactory = getPointFactory(context, coloringStyle)\r\n    val strategy = colorFactory.createColoringStrategy(this)\r\n    return this.map { point ->\r\n        MappableLocation(\r\n            point.id,\r\n            point.coordinate,\r\n            strategy.getColor(point) ?: Color.TRANSPARENT,", "choices": [{"text": "\n            strategy.getColor(point)?: Color.TRANSPARENT,\r\n            strategy.getColor(point)?: Color.TRANSPARENT,\r\n            strategy.getColor(point)?: Color.TRANSPARENT,\r\n            strategy.getColor(point)?: Color.TRANSPARENT,\r\n            strategy.getColor(point)?: Color.TRANSPARENT,\r\n            strategy.getColor(point)?: Color.TRANSPARENT,\r\n            strategy.getColor(point)?: Color.TRAN"}], "metadata": {"task_id": "Trail-Sense/1311", "ground_truth": "            null,\r\n            point.elevation\r\n        )\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.ExportPathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun exportPath(path: Path) {\r\n        val command = ExportPathCommand(\r\n            requireContext(),\r\n            this,", "choices": [{"text": "            path\r\n        );\r\n        command.execute();\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1321", "ground_truth": "            IOFactory().createGpxService(this),\r\n            pathService\r\n        )\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.databinding.ListItemWaypointBinding\nprivate fun drawWaypointListItem(itemBinding: ListItemWaypointBinding, item: PathPoint) {\r\n        val itemStrategy = WaypointListItem(\r\n            requireContext(),\r\n            formatService,\r\n            { createBeacon(it) },\r\n            { deleteWaypoint(it) },\r\n            { navigateToWaypoint(it) },", "choices": [{"text": "\n            { createBeacon(it) },\r\n            { navigateToWaypoint(it) }\r\n        );\r\n        itemBinding.addItem(itemStrategy);\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1328", "ground_truth": "            { /* Do nothing */ }\r\n        )\r\n\r\n        itemStrategy.display(itemBinding, item)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.NavigateToPointCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun navigateToWaypoint(point: PathPoint) {\r\n        val path = path ?: return\r\n        val command = NavigateToPointCommand(\r\n            this,\r\n            converter,\r\n            beaconNavigator", "choices": [{"text": "\n        )\r\n        command.setPath(path)\r\n        command.setWaypoint(point)\r\n        command.execute()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1330", "ground_truth": "        )\r\n        tryOrNothing {\r\n            command.execute(path, point)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.NavigateToPathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.point_finder.NearestPathPointNavigator\nimport com.kylecorry.trail_sense.tools.paths.domain.point_finder.NearestPathLineNavigator\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.toast\nprivate fun navigateToNearestPathPoint() {\r\n        val path = path ?: return\r\n        val points = waypoints\r\n        val command = NavigateToPathCommand(\r\n            if (prefs.navigation.onlyNavigateToPoints) NearestPathPointNavigator() else NearestPathLineNavigator(),\r\n            gps,\r\n            converter,\r\n            beaconNavigator\r\n        )\r\n\r\n        toast(getString(R.string.navigating_to_nearest_path_point))", "choices": [{"text": "\n        command.setPath(path)\r\n        command.setPoints(points)\r\n        command.execute()\r\n        toast(getString(R.string.navigating_to_nearest_path_point))\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1331", "ground_truth": "\r\n        inBackground {\r\n            command.execute(path, points)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "val backtrack\nvar sort\nval pathLoader\n override fun onPause() {", "choices": [{"text": "\n    super.onPause();\n    this.setVisibility(View.VISIBLE);\n    this.setVisibility(View.GONE);\n}"}], "metadata": {"task_id": "Trail-Sense/1336", "ground_truth": "        super.onPause()\r\n        tryOrNothing {\r\n            lastRoot = manager.root\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.grouping.lists.bind\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nprivate fun setupCreateMenu() {\r\n        binding.addMenu.setOverlay(binding.overlayMask)\r\n        binding.addMenu.fab = binding.addBtn\r\n        binding.addMenu.hideOnMenuOptionSelected = true\r\n        binding.addMenu.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_import_path_gpx -> importPaths()\r\n                R.id.action_create_path_group -> createGroup()", "choices": [{"text": "\n            }\r\n        }\r\n        binding.addMenu.setOnMenuItemLongClickListener { menuItem ->\r\n            when (menuItem.itemId == R.id.action_create_path_group -> createGroup()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1338", "ground_truth": "                R.id.action_create_path -> createPath()\r\n            }\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = PathSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.pathSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.pathSort = sortOptions[newSort]", "choices": [{"text": "\n            } else {\r\n                prefs.navigation.pathSort = null\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1339", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.ImportPathsCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun importPaths() {\r\n        val command = ImportPathsCommand(\r\n            requireContext(),\r\n            this,\r\n            gpxService,", "choices": [{"text": "            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n            gpxService,\r\n           "}], "metadata": {"task_id": "Trail-Sense/1349", "ground_truth": "            pathService,\r\n            prefs.navigation\r\n        )\r\n        command.execute(manager.root?.id)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.CreatePathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun createPath() {\r\n        val command = CreatePathCommand(requireContext(), pathService, prefs.navigation)\r\n        inBackground {", "choices": [{"text": "\n            command.execute()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1353", "ground_truth": "            command.execute(manager.root?.id)?.let {\r\n                showPath(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.DeletePathGroupGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun deleteGroup(group: PathGroup) {\r\n        val command = DeletePathGroupGroupCommand(requireContext(), pathService)", "choices": [{"text": "\n        command.setGroup(group)\r\n        command.execute()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1354", "ground_truth": "        inBackground {\r\n            command.execute(group)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.RenamePathGroupGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nprivate fun renameGroup(group: PathGroup) {\r\n        val command = RenamePathGroupGroupCommand(requireContext(), pathService)", "choices": [{"text": "\n        command.setGroup(group)\r\n        command.execute()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1355", "ground_truth": "        inBackground {\r\n            command.execute(group)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.paths.ui.commands.CreatePathGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun createGroup() {\r\n        val command = CreatePathGroupCommand(requireContext(), pathService)", "choices": [{"text": "\n        command.setPathGroup(pathGroup)\r\n        command.execute()\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1356", "ground_truth": "        inBackground {\r\n            command.execute(manager.root?.id)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "import kotlin.math.min\nimport kotlin.math.max\noverride fun draw() {\r\n        clear()\r\n\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * minScale)", "choices": [{"text": "\n        minScale = getScale(0.1f).coerceAtLeast(2 * maxScale)\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * maxScale)\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * maxScale)\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * maxScale)\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * maxScale)\r\n        maxScale = getScale(0.1f)."}], "metadata": {"task_id": "Trail-Sense/1360", "ground_truth": "        zoomTo(clampScale(scale))\r\n\r\n        drawLayers()\r\n        drawScale()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "private fun drawLayers() {\r\n        val bounds = bounds ?: return\r\n        center = bounds.center\r\n\r\n        if (scale != lastScale) {\r\n            lastScale = scale\r\n            layers.forEach { it.invalidate() }\r\n        }\r\n\r\n        if (translateX != lastTranslateX || translateY != lastTranslateY) {\r\n            lastTranslateX = translateX\r\n            lastTranslateY = translateY", "choices": [{"text": "\r\n            layers.forEach { it.invalidate() }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1361", "ground_truth": "            layers.forEach { it.invalidate() }\r\n        }\r\n\r\n        layers.forEach { it.draw(this, this) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "@Suppress(\"MemberVisibilityCanBePrivate\")\r\n    fun zoomTo(newScale: Float){", "choices": [{"text": "\r\n        this.zoomTo(newScale);\r\n        return this;\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1367", "ground_truth": "        if (newScale == scale){\r\n            return\r\n        }\r\n        zoom(newScale / scale)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toView(source: PixelCoordinate): PixelCoordinate {", "choices": [{"text": "\n    if (source == null) {\n        return null;\n    } else {\n        return new PixelCoordinate(source.getX(), source.getY());\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/1370", "ground_truth": "        return PixelCoordinate(\r\n            source.x + translateX,\r\n            source.y + translateY\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toSource(screen: PixelCoordinate): PixelCoordinate {", "choices": [{"text": "\n    if (screen == null) {\n        return null;\n    } else {\n        return new PixelCoordinate(screen.x, screen.y);\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/1371", "ground_truth": "        return PixelCoordinate(\r\n            screen.x - translateX,\r\n            screen.y - translateY\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.units.Speed\noverride fun speed(steps: Long, time: Duration): Speed {\r\n        val d = distance(steps)\r\n        val seconds = time.seconds\r\n        if (seconds <= 0) {", "choices": [{"text": "\n            seconds = 0\r\n        }\r\n        return new Speed(d, seconds)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1374", "ground_truth": "            return ZERO_SPEED\r\n        }\r\n\r\n        return Speed(d.distance / seconds, d.units, TimeUnits.Seconds)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\domain\\StrideLengthPaceCalculator.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.sol.units.Speed\nprivate fun updateSpeed(){\r\n        if (lastTime == Instant.MIN) {\r\n            lastSteps = pedometer.steps\r\n            lastTime = Instant.now()\r\n            return\r\n        }\r\n\r\n        val steps = pedometer.steps - lastSteps\r\n        val duration = Duration.between(lastTime, Instant.now())\r\n        speed = paceCalculator.speed(steps.toLong(), duration)\r\n        hasValidReading = true", "choices": [{"text": "\n        lastTime = Instant.now()\r\n        paceCalculator.updateSpeed(speed.toLong())\r\n        hasValidReading = false\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1378", "ground_truth": "        lastTime = Instant.now()\r\n        lastSteps = pedometer.steps\r\n\r\n        notifyListeners()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\CurrentPaceSpeedometer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.pedometer.domain.DistanceAlertCommand\nimport com.kylecorry.trail_sense.shared.commands.Command\nfun getDistanceAlert(): Command {\r\n        return DistanceAlertCommand(\r\n            prefs.pedometer,", "choices": [{"text": "\n            prefs.pedometer.distanceAlert,\r\n            prefs.pedometer.maxDistance,\r\n            prefs.pedometer.minDistance,\r\n            prefs.pedometer.maxDistance,\r\n            prefs.pedometer.minDistance,\r\n            prefs.pedometer.maxDistance,\r\n            prefs.pedometer.minDistance,\r\n            prefs.pedometer.maxDistance,\r\n            prefs.pedometer.minDistance,\r\n            prefs.pedometer.maxDistance,\r\n            prefs.pedometer."}], "metadata": {"task_id": "Trail-Sense/1379", "ground_truth": "            counter,\r\n            paceCalculator,\r\n            DistanceAlerter(context)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\PedometerCommandFactory.kt"}}
{"prompt": "private fun onGPS(): Boolean {\r\n        if (startLocation == null) {", "choices": [{"text": "\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1389", "ground_truth": "            startLocation = gps.location\r\n        }\r\n        updateStrideLength()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "private fun onPedometer(): Boolean {\r\n        if (startSteps == null) {", "choices": [{"text": "\n            startSteps = 1;\r\n        } else {\r\n            startSteps = 2;\r\n        }\r\n        return true;\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1390", "ground_truth": "            startSteps = pedometer.steps.toLong()\r\n        }\r\n        updateStrideLength()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\nprivate fun updateStrideLength() {\r\n        val startLocation = startLocation\r\n        val startSteps = startSteps\r\n\r\n        if (startLocation == null || startSteps == null) {\r\n            strideLength = null\r\n            return\r\n        }\r\n\r\n        val distance = gps.location.distanceTo(startLocation)\r\n        val steps = pedometer.steps - startSteps\r\n\r\n        strideLength = if (steps == 0L) {\r\n            Distance.meters(0f)", "choices": [{"text": "\n        } else {\r\n            Distance.meters(distance)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1392", "ground_truth": "        } else {\r\n            Distance.meters(distance / steps)\r\n        }\r\n        notifyListeners()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FeatureState\nprivate fun calculateState(): FeatureState {\r\n        return if (isDisabled()) {\r\n            FeatureState.Unavailable\r\n        } else if (prefs.pedometer.isEnabled) {", "choices": [{"text": "\n            FeatureState.Enabled\r\n        } else {\r\n            FeatureState.Disabled\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1395", "ground_truth": "            FeatureState.On\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\subsystem\\PedometerSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {", "choices": [{"text": "\n    super.onResume();\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.on"}], "metadata": {"task_id": "Trail-Sense/1403", "ground_truth": "        super.onResume()\r\n        if (isRunning) {\r\n            estimator.start(this::onStrideLengthChanged)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentStrideLengthEstimation.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun start(){\r\n        requestActivityRecognition { hasPermission ->\r\n            if (hasPermission){\r\n                isRunning = true\r\n                estimator.start(this::onStrideLengthChanged)\r\n            } else {", "choices": [{"text": "\n                isRunning = false\r\n                estimator.start(this::onStrideLengthChanged)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1404", "ground_truth": "                isRunning = false\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentStrideLengthEstimation.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun updateAverageSpeed() {\r\n        val speed = averageSpeedometer.speed\r\n        binding.pedometerAverageSpeed.title = if (averageSpeedometer.hasValidReading) {", "choices": [{"text": "\n            binding.pedometerAverageSpeed.text = speed\r\n        } else {\r\n            binding.pedometerAverageSpeed.text = \"\"\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1406", "ground_truth": "            formatService.formatSpeed(speed.speed)\r\n        } else {\r\n            getString(R.string.dash)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun updateCurrentSpeed() {\r\n        val speed = instantSpeedometer.speed\r\n        binding.pedometerSpeed.title = if (averageSpeedometer.hasValidReading) {", "choices": [{"text": "\n            speed = averageSpeedometer.speed\r\n        } else {\r\n            speed = instantSpeedometer.speed\r\n        }\r\n        binding.pedometerSpeed.value = speed\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1407", "ground_truth": "            formatService.formatSpeed(speed.speed)\r\n        } else {\r\n            getString(R.string.dash)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.pedometer.infrastructure.StepCounter\nimport com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun startStepCounter() {\r\n        requestActivityRecognition { hasPermission ->\r\n            if (hasPermission) {\r\n                pedometer.enable()\r\n            } else {", "choices": [{"text": "\n                pedometer.disable()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1409", "ground_truth": "                pedometer.disable()\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.notes.domain.Note\noverride fun encode(value: Note): String {\r\n        val title = if (value.title != null) {\r\n            \"${value.title}\\n\\n\\n\"\r\n        } else {\r\n            \"\"\r\n        }", "choices": [{"text": "\n        if (title!= null) {\r\n            return title\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1414", "ground_truth": "\r\n        val contents = value.contents ?: \"\"\r\n\r\n        return \"$title$contents\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\infrastructure\\NoteQREncoder.kt"}}
{"prompt": "import android.view.View\noverride fun onDestroyView() {", "choices": [{"text": "\n    super.onDestroyView();\n    if (mListener!= null) {\n        mListener.onDestroyView();\n        mListener = null;\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/1417", "ground_truth": "        if (isBound) {\r\n            binding.camera.stop()\r\n        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRBottomSheet.kt"}}
{"prompt": "import com.kylecorry.andromeda.qr.QR\nimport com.kylecorry.andromeda.core.tryOrNothing\nimport android.graphics.Bitmap\nprivate fun onCameraUpdate(bitmap: Bitmap) {\r\n        if (!isBound) {\r\n            bitmap.recycle()\r\n            return\r\n        }\r\n        var message: String? = null\r\n        tryOrNothing {\r\n            message = QR.decode(bitmap)\r\n            bitmap.recycle()\r\n        }\r\n        if (message != null && lastMessage != message) {\r\n            haptics.click()\r\n            lastMessage = message", "choices": [{"text": "\n        }\r\n        if (message!= null && lastMessage!= message) {\r\n            haptics.click()\r\n            lastMessage = message\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1418", "ground_truth": "            if (!onTextScanned(message)) {\r\n                dismiss()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRBottomSheet.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.permissions.requestCamera\nimport com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r\n        updateHistoryList()\r\n        requestCamera { hasPermission ->\r\n            if (hasPermission) {\r\n                startCamera()", "choices": [{"text": "\n            } else {\r\n                startCamera()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1422", "ground_truth": "            } else {\r\n                alertNoCameraPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "val pickMediaLoadingIndicator\nvar qrHistoryList ListView<String>\nval cameraSize\n private fun startCamera() {", "choices": [{"text": "\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    intent.setData(Uri.parse(\"http://www.example.com\"));\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    startActivity(intent);\n}"}], "metadata": {"task_id": "Trail-Sense/1423", "ground_truth": "        if (!isBound) return\r\n        binding.camera.start(cameraSize) {\r\n            onCameraUpdate(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nprivate fun addReading(text: String) {\r\n        if (history.contains(text)) {\r\n            history.remove(text)\r\n        }\r\n\r\n        history.add(0, text)\r\n\r\n        while (history.size > 10) {", "choices": [{"text": "\n            history.add(history.size - 1, text)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1424", "ground_truth": "            history.removeLast()\r\n        }\r\n\r\n        updateHistoryList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.CustomUiUtils.getPrimaryColor\nimport com.kylecorry.andromeda.core.system.Screen\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.graphics.Color\noverride fun setup() {\r\n        dpi = Screen.ydpi(context)\r\n        scale = prefs.navigation.rulerScale\r\n        lineColor = Resources.androidTextColorPrimary(context)\r\n        highlightColor = Resources.getPrimaryColor(context)\r\n        offset = dp(8f)\r\n        wholeSize = dp(40f)\r\n        halfSize = dp(24f)\r\n        quarterSize = dp(12f)\r\n        eighthSize = dp(6f)\r\n        tenthSize = dp(12f)", "choices": [{"text": "\n        screenWidth = screen.width()\r\n        screenHeight = screen.height()\r\n        screenWidth = screen.width()\r\n        screenHeight = screen.height()\r\n        screenWidth = screen.width()\r\n        screenHeight = screen.height()\r\n        screenWidth = screen.width()\r\n        screenHeight = screen.height()\r\n        screenWidth = screen.width()\r\n        screenHeight = screen.height()\r\n        screenWidth = screen.width()\r\n        screenHeight = screen.height()\r\n        screenWidth = screen.width"}], "metadata": {"task_id": "Trail-Sense/1436", "ground_truth": "        lineThickness = dp(1f)\r\n        highlightLineThickness = dp(2f)\r\n\r\n        textSize(sp(12f))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\ui\\RulerView.kt"}}
{"prompt": "import com.kylecorry.sol.units.Distance\nimport android.annotation.SuppressLint\n @SuppressLint(\"ClickableViewAccessibility\")\r\n    fun setOnTouchListener(listener: (Distance) -> Unit) {\r\n        setOnTouchListener { _, event ->", "choices": [{"text": "\n            listener.onTouch(event.getX(), event.getY());\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1437", "ground_truth": "            val distance = getDistance(event.y)\r\n            listener.invoke(distance)\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\ui\\RulerView.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nimport com.kylecorry.sol.time.Time.atEndOfDay\nimport com.kylecorry.sol.time.Time\nfun getSolarEnergy(\r\n        location: Coordinate,\r\n        tilt: Float,\r\n        azimuth: Bearing,\r\n        duration: Duration = Duration.ofDays(1),\r\n        restrictToToday: Boolean = false\r\n    ): Float {\r\n        val time = timeProvider.getTime()\r\n        var end = time.plus(duration)\r\n        if (end.toLocalDate() != time.toLocalDate() && restrictToToday) {\r\n            end = time.atEndOfDay()\r\n        }\r\n        return getSolarRadiation(\r\n            time,\r\n            end,", "choices": [{"text": "\n            tilt,\r\n            azimuth\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1445", "ground_truth": "            location,\r\n            tilt,\r\n            azimuth\r\n        ).toFloat()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\domain\\SolarPanelService.kt"}}
{"prompt": "import kotlin.math.max\nimport java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nfun getBestPosition(\r\n        location: Coordinate,\r\n        maxDuration: Duration,\r\n        restrictToToday: Boolean = false\r\n    ): Pair<Float, Bearing> {\r\n        val duration = if (maxDuration <= Duration.ofMinutes(15).plusSeconds(5)) {\r\n            Duration.ofMinutes(15).plusSeconds(15)\r\n        } else {\r\n            maxDuration\r\n        }\r\n\r\n        return getBestPosition(\r\n            location,\r\n            maxDuration = duration,\r\n            energyResolution = if (duration < Duration.ofHours(6)) Duration.ofMinutes(15) else Duration.ofMinutes(", "choices": [{"text": "\n                maxDuration\r\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1446", "ground_truth": "                30\r\n            ),\r\n            restrictToToday = restrictToToday\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\domain\\SolarPanelService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {", "choices": [{"text": "\n    super.onResume();\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.on"}], "metadata": {"task_id": "Trail-Sense/1448", "ground_truth": "        super.onResume()\r\n        if (position == null) {\r\n            gps.start(this::onGPSUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\ui\\FragmentToolSolarPanel.kt"}}
{"prompt": "import java.time.Duration\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updatePosition() {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                position = solarPanelService.getBestPosition(\r\n                    gps.location,\r\n                    if (alignToRestOfDay) Duration.ofDays(1) else nowDuration,", "choices": [{"text": "\n                    if (alignToRestOfDay) Duration.ofDays(2) else nowDuration\r\n                );\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1451", "ground_truth": "                    restrictToToday = alignToRestOfDay\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\ui\\FragmentToolSolarPanel.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nsuspend fun execute(table: TideTable): TideTable {\r\n        val newTable = table.copy(isVisible = !table.isVisible)", "choices": [{"text": "\n        if (newTable.isVisible) {\r\n            table.setVisible(true)\r\n        } else {\r\n            table.setVisible(false)\r\n        }\r\n        return newTable\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1466", "ground_truth": "        onIO {\r\n            repo.addTideTable(newTable)\r\n        }\r\n        return newTable\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\commands\\ToggleTideTableVisibilityCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.math.Range\noverride fun getRange(table: TideTable): Range<Float> {\r\n        val lows = table.tides.filter { !it.isHigh }.mapNotNull { it.height }\r\n        val highs = table.tides.filter { it.isHigh }.mapNotNull { it.height }\r\n        var min = lows.minByOrNull { it }\r\n        var max = highs.maxByOrNull { it }\r\n\r\n        if (min == null){\r\n            min = (max ?: 1f) - 1f\r\n        }\r\n\r\n        if (max == null){", "choices": [{"text": "\n            max = (lows?: 1f) + 1f\r\n        }\r\n\r\n        return new Range<Float>(min, max)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1468", "ground_truth": "            max = min + 1f\r\n        }\r\n\r\n        return Range(min, max)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\range\\TideTableRangeCalculator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\noverride suspend fun getTide(tides: List<TideTable>): TideTable? {\r\n        for (strategy in strategies) {\r\n            val tide = strategy.getTide(tides)\r\n            if (tide != null) {", "choices": [{"text": "\n                return tide\r\n            }\r\n        }\r\n        return null\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1469", "ground_truth": "                return tide\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\selection\\FallbackTideSelectionStrategy.kt"}}
{"prompt": "import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.oceanography.Tide\noverride fun getWaterLevels(table: TideTable, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),", "choices": [{"text": "\n            ZoneId.systemDefault()\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1474", "ground_truth": "            Duration.ofMinutes(10)\r\n        ) {\r\n            getWaterLevel(table, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\TideService.kt"}}
{"prompt": "import com.kylecorry.sol.science.oceanography.waterlevel.TideClockWaterLevelCalculator\nimport com.kylecorry.sol.science.oceanography.waterlevel.IWaterLevelCalculator\nimport com.kylecorry.sol.science.oceanography.Tide\nprivate fun getPastFutureCalculator(tide: Tide): IWaterLevelCalculator {\r\n        val amplitude = (if (!tide.isHigh) -1 else 1) * getAmplitude()\r\n        val z0 = tide.height!! - amplitude\r\n        return TideClockWaterLevelCalculator(\r\n            tide,", "choices": [{"text": "\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n            z0,\r\n           "}], "metadata": {"task_id": "Trail-Sense/1478", "ground_truth": "            table.principalFrequency,\r\n            getAmplitude(),\r\n            z0\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\waterlevel\\TideTableWaterLevelCalculator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.science.oceanography.Tide\noverride suspend fun getTideTables(): List<TideTable> {\r\n        val tableEntities = dao.getTideTables()\r\n        val tables = mutableListOf<TideTable>()\r\n\r\n        for (entity in tableEntities) {\r\n            val rows = dao.getTideTableRows(entity.id).map { it.toTide() }.sortedBy { it.time }", "choices": [{"text": "\n            for (row in rows) {\r\n                tables.add(new TideTable(row))\r\n            }\r\n        }\r\n\r\n        return tables\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1481", "ground_truth": "            tables.add(entity.toTable(rows))\r\n        }\r\n\r\n        return tables\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRepo.kt"}}
{"prompt": "import com.kylecorry.sol.science.oceanography.Tide\nfun toTide(): Tide {\r\n        return Tide(", "choices": [{"text": "\n            new Tide(\r\n                new Tide(\r\n                    new Tide(\r\n                        new Tide(\r\n                            new Tide(\r\n                                new Tide(\r\n                                    new Tide(\r\n                                        new Tide(\r\n                                            new Tide(\r\n                                                new Tide(\r\n                                                new Tide(\r\n                                                new Tide(\r\n                                                new Tide(\r\n                                                new Tide(\r\n                                                new Tide(\r\n                                                new Tide(\r\n                                                new Tide"}], "metadata": {"task_id": "Trail-Sense/1486", "ground_truth": "            time.atZone(ZoneId.systemDefault()),\r\n            isHigh,\r\n            heightMeters\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRowEntity.kt"}}
{"prompt": "import com.kylecorry.sol.science.oceanography.Tide\nimport androidx.room.Entity\nfun from(id: Long, tableId: Long, tide: Tide): TideTableRowEntity {\r\n            return TideTableRowEntity(\r\n                id,\r\n                tableId,", "choices": [{"text": "\r\n                tide\r\n            );\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1487", "ground_truth": "                tide.time.toInstant(),\r\n                tide.isHigh,\r\n                tide.height\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRowEntity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nprivate fun getDescription(tide: TideTable): String {\r\n        return context.resources.getQuantityString(", "choices": [{"text": "\n            tide.getDescription()\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1494", "ground_truth": "            R.plurals.tides_entered_count,\r\n            tide.tides.size,\r\n            tide.tides.size\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\mappers\\TideTableListItemMapper.kt"}}
{"prompt": "import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding.tideList.emptyView = binding.tidesEmptyText\r\n\r\n        refreshTides()", "choices": [{"text": "\n        binding.tideList.emptyView.setVisibility(View.GONE)\r\n        binding.tideList.emptyView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                binding.tideList.emptyView.setVisibility(View.VISIBLE)\r\n                binding.tideList.emptyView.setVisibility(View.GONE)\r\n            }\r\n        })\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1500", "ground_truth": "\r\n        binding.addBtn.setOnClickListener {\r\n            createTide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nprivate fun deleteTide(tide: TideTable) {\r\n        Alerts.dialog(\r\n            requireContext(),\r\n            getString(R.string.delete_tide_prompt),\r\n            getTideTitle(tide)\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                inBackground {\r\n                    onIO {\r\n                        tideRepo.deleteTideTable(tide)\r\n                    }", "choices": [{"text": "\n                }\r\n            } else {\r\n                Alerts.dialog(\r\n                    requireContext(),\r\n                    getString(R.string.delete_tide_confirm),\r\n                    getTideTitle(tide)\r\n                ) {\r\n                    onIO {\r\n                        tideRepo.deleteTideTable(tide)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1501", "ground_truth": "                    refreshTides()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.oceanography.Tide\nimport androidx.navigation.fragment.findNavController\nimport androidx.core.view.isVisible\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        chart = TideChart(binding.chart)\r\n\r\n        binding.tideTitle.rightButton.setOnClickListener {\r\n            findNavController().navigate(R.id.action_tides_to_tideList)\r\n        }\r\n\r\n        binding.loading.isVisible = true\r\n\r\n        binding.tideListDate.setOnDateChangeListener {", "choices": [{"text": "\n            findNavController().navigate(R.id.action_tides_to_tideList)\r\n        }\r\n\r\n        binding.tideListDate.setOnTimeChangeListener {\r\n            findNavController().navigate(R.id.action_tides_to_tideList)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1507", "ground_truth": "            onDisplayDateChanged()\r\n        }\r\n\r\n        scheduleUpdates(20)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.oceanography.Tide\nprivate fun onTideLoaded() {\r\n        if (!isBound) return\r\n        val tide = table ?: return\r\n        binding.tideTitle.subtitle.text = tide.name\r\n            ?: if (tide.location != null) formatService.formatLocation(tide.location) else getString(\r\n                android.R.string.untitled\r\n            )", "choices": [{"text": "\n           ?: getString(\r\n                android.R.string.untitled\r\n            )\r\n        binding.tideDescription.subtitle.text = tide.description\r\n           ?: getString(\r\n                android.R.string.untitled\r\n            )\r\n        binding.tideLocation.subtitle.text = tide.location\r\n           ?: getString(\r\n                android.R.string.untitled\r\n            )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1508", "ground_truth": "        inBackground {\r\n            refreshDaily()\r\n            refreshCurrent()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "private fun onDisplayDateChanged() {", "choices": [{"text": "\n    if (mDate!= null && mDate.getTime()!= 0) {\n        mDate.setTime(mDate.getTime() / 1000);\n    }\n    if (mTime!= null && mTime.getTime()!= 0) {\n        mTime.setTime(mTime.getTime() / 1000);\n    }\n    if (mHour!= null && mHour.getTime()!= 0) {\n        mHour.setTime(mHour.getTime() / 1000);\n    }\n    if (mMinute!= null && mMinute"}], "metadata": {"task_id": "Trail-Sense/1509", "ground_truth": "        if (!isBound) return\r\n        inBackground {\r\n            refreshDaily()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "import com.kylecorry.sol.science.oceanography.Tide\nprivate fun updateTideList(tides: List<Tide>) {\r\n        val updatedTides = tides.map {\r\n            val isEstimated = this.table?.tides?.firstOrNull { t -> t.time == it.time } == null\r\n\r\n            if (isEstimated) {\r\n                it.copy(height = null)\r\n            } else {\r\n                it", "choices": [{"text": ".copy(width = null)\r\n            }\r\n        }\r\n\r\n        this.table.tides = updatedTides\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1511", "ground_truth": "            }\r\n        }\r\n\r\n        binding.tideList.setItems(updatedTides, mapper)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "private suspend fun refreshCurrent() {", "choices": [{"text": "\n    if (mRefreshing) {\n        mRefreshing = false;\n        mRefreshing = true;\n    }\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefreshing = false;\n    mRefresh"}], "metadata": {"task_id": "Trail-Sense/1515", "ground_truth": "        current = getCurrentTideData()\r\n        onMain {\r\n            updateCurrent()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "private suspend fun refreshDaily() {", "choices": [{"text": "\n    if (mActivity == null) {\n        return false;\n    }\n    if (mActivity.getApplicationContext() == null) {\n        return false;\n    }\n    if (mActivity.getApplicationContext() == null) {\n        return false;\n    }\n    if (mActivity.getApplicationContext() == null) {\n        return false;\n    }\n    if (mActivity.getApplicationContext() == null) {\n        return false;\n    }\n    if (mActivity.getApplicationContext() == null) {\n        return false;\n    }"}], "metadata": {"task_id": "Trail-Sense/1516", "ground_truth": "        daily = getDailyTideData(binding.tideListDate.date)\r\n        onMain {\r\n            updateDaily()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateTools() {\r\n        inBackground {\r\n            onDefault {\r\n                val filteredTools = filterTools(tools)\r\n                val sorter = toolSortFactory.getToolSort(prefs.toolSort)\r\n                toolListItems = listOf(toolHeader) + getToolItemList(sorter.sort(filteredTools))", "choices": [{"text": "\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1529", "ground_truth": "            }\r\n\r\n            updateList()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "private fun filterTools(tools: List<Tool>): List<Tool> {\r\n        val filter = binding.searchbox.query\r\n        return if (filter.isNullOrBlank()) {\r\n            tools\r\n        } else {\r\n            tools.filter {\r\n                it.name.contains(filter, true) || it.description?.contains(\r\n                    filter,", "choices": [{"text": "\n                    true\r\n                )\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1530", "ground_truth": "                    true\r\n                ) == true\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import android.view.View\nprivate fun updateList() {\r\n        val filter = binding.searchbox.query\r\n\r\n        // Hide pinned when searching\r\n        synchronized(listLock) {\r\n            if (filter.isNullOrBlank()) {\r\n                toolListView.setSpannedData(pinnedListItems + toolListItems)", "choices": [{"text": "\n            } else {\r\n                toolListView.setSpannedData(pinnedListItems + toolListItems)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1531", "ground_truth": "            } else {\r\n                toolListView.setSpannedData(toolListItems)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItemStyle\nimport com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItem\nimport com.kylecorry.andromeda.list.GridView\nimport android.view.View\nprivate fun getToolHeaderListItem(\r\n        name: String,\r\n        icon: Int,\r\n        action: () -> Unit\r\n    ): GridView.SpannedItem<ToolListItem> {\r\n        return GridView.SpannedItem(\r\n            ToolListItem(\r\n                name,\r\n                ToolListItemStyle.Header,", "choices": [{"text": "\n                icon,\r\n                action\r\n            )\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1532", "ground_truth": "                icon,\r\n                onClick = { action() }\r\n            ), 2\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updatePinnedTools() {\r\n        inBackground {\r\n            onDefault {\r\n                val pinned = tools.filter {\r\n                    pinnedToolManager.isPinned(it.id)\r\n                }\r\n\r\n                pinnedListItems = listOf(pinnedHeader) + getToolItemList(pinnedSorter.sort(pinned))", "choices": [{"text": "\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1533", "ground_truth": "            }\r\n\r\n            updateList()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.tools.ui.sort.CategorizedTools\nimport com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItem\nimport com.kylecorry.andromeda.list.GridView\nimport android.view.View\nprivate fun getToolItemList(tools: List<CategorizedTools>): List<GridView.SpannedItem<ToolListItem>> {\r\n        return if (tools.size == 1) {\r\n            tools.first().tools.map { tool ->\r\n                getToolListItem(tool)\r\n            }\r\n        } else {\r\n            tools.flatMap {\r\n                listOf(getToolCategoryListItem(it.categoryName)) +\r\n                        it.tools.map { tool ->", "choices": [{"text": "\r\n                    getToolListItem(tool)\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1534", "ground_truth": "                            getToolListItem(tool)\r\n                        }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {", "choices": [{"text": "\n    super.onResume();\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.on"}], "metadata": {"task_id": "Trail-Sense/1537", "ground_truth": "        super.onResume()\r\n        binding.bearing1.start()\r\n        binding.bearing2.start()\r\n        restoreState()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\triangulate\\ui\\FragmentToolTriangulate.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\noverride fun getPurificationTime(altitude: Distance?): Duration {\r\n        if (altitude == null || altitude.convertTo(DistanceUnits.Meters).distance >= 1000f){", "choices": [{"text": "\n            return 1000f;\r\n        } else {\r\n            return altitude.convertTo(DistanceUnits.Meters).distance;\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1540", "ground_truth": "            return Duration.ofMinutes(3)\r\n        }\r\n\r\n        return Duration.ofMinutes(1)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\domain\\WaterService.kt"}}
{"prompt": "import java.time.Duration\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateSelectedDuration() {\r\n        duration = null\r\n        inBackground {\r\n            runner.replace {\r\n                val duration = getSelectedDuration()\r\n\r\n                onMain {", "choices": [{"text": "\n                    if (duration!= null) {\r\n                        setDuration(duration)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1547", "ground_truth": "                    setBoilTime(duration)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\ui\\WaterPurificationFragment.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nprivate fun getRemainingTime(): Duration? {\r\n        val lastEndTime =\r\n            cache.getInstant(WATER_PURIFICATION_END_TIME_KEY) ?: return null\r\n        val oldDuration = Duration.between(Instant.now(), lastEndTime)\r\n        return if (!oldDuration.isNegative && !oldDuration.isZero) {", "choices": [{"text": "\n            cache.setInstant(WATER_PURIFICATION_END_TIME_KEY, Instant.now())\r\n        } else {\r\n            cache.setInstant(WATER_PURIFICATION_END_TIME_KEY, Instant.now())\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1548", "ground_truth": "            oldDuration\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\ui\\WaterPurificationFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.sol.science.meteorology.WeatherCondition\noverride fun getAlerts(weather: CurrentWeather): List<WeatherAlert> {\r\n        val alerts = mutableListOf<WeatherAlert>()\r\n\r\n        if (weather.prediction.hourly.contains(WeatherCondition.Storm)) {\r\n            alerts.add(WeatherAlert.Storm)\r\n        }", "choices": [{"text": "\n        alerts.addAll(weather.prediction.hourly)\r\n        return alerts\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1549", "ground_truth": "\r\n        alerts.addAll(getTemperatureAlerts(weather))\r\n\r\n        return alerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\alerts\\WeatherAlertGenerator.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.infrastructure.subsystem.WeatherSubsystem\nimport com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nprivate fun getTemperatureAlerts(weather: CurrentWeather): List<WeatherAlert> {\r\n        weather.prediction.temperature ?: return emptyList()\r\n\r\n        val alerts = mutableListOf<WeatherAlert>()\r\n\r\n        if (weather.prediction.temperature.low.celsius().temperature <= WeatherSubsystem.COLD) {\r\n            alerts.add(WeatherAlert.Cold)\r\n        }\r\n\r\n        if (weather.prediction.temperature.high.celsius().temperature >= WeatherSubsystem.HOT) {", "choices": [{"text": "\n            alerts.add(WeatherAlert.Hot)\r\n        }\r\n\r\n        return alerts\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1550", "ground_truth": "            alerts.add(WeatherAlert.Hot)\r\n        }\r\n\r\n        return alerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\alerts\\WeatherAlertGenerator.kt"}}
{"prompt": "import java.time.LocalDate\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRanges(year: Int): List<Pair<LocalDate, Range<Temperature>>> {\r\n        return service.getTemperatureRanges(year).map {\r\n            it.copy(\r\n                second = Range(\r\n                    calibrator.calibrate(it.second.start),", "choices": [{"text": "\n                    calibrator.calibrate(it.second.end),\r\n                    calibrator.calibrate(it.third.start),\r\n                    calibrator.calibrate(it.third.end),\r\n                    calibrator.calibrate(it.fourth.start),\r\n                    calibrator.calibrate(it.fourth.end),\r\n                    calibrator.calibrate(it.sixth.start),\r\n                    calibrator.calibrate(it.sixth.end),"}], "metadata": {"task_id": "Trail-Sense/1556", "ground_truth": "                    calibrator.calibrate(it.second.end),\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\CalibratedTemperatureService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.science.meteorology.Meteorology\noverride suspend fun getTemperature(time: ZonedDateTime): Temperature = onDefault {\r\n        val temperature = repo.getTemperature(location, time)\r\n        Meteorology.getTemperatureAtElevation(", "choices": [{"text": "\n            location,\r\n            temperature\r\n        )\r\n        return temperature\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1557", "ground_truth": "            temperature,\r\n            Distance.meters(0f),\r\n            elevation\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "import java.time.ZonedDateTime\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.meteorology.Meteorology\noverride suspend fun getTemperatures(\r\n        start: ZonedDateTime,\r\n        end: ZonedDateTime\r\n    ): List<Reading<Temperature>> = onDefault {\r\n        val temperatures = repo.getTemperatures(location, start, end)\r\n        temperatures.map {\r\n            it.copy(\r\n                value = Meteorology.getTemperatureAtElevation(\r\n                    it.value,\r\n                    Distance.meters(0f),", "choices": [{"text": "\n                    Distance.meters(0f)\r\n                )\r\n            )\r\n        }\r\n        return temperatures\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1558", "ground_truth": "                    elevation\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "import java.time.LocalDate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.meteorology.Meteorology\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRange(date: LocalDate): Range<Temperature> = onDefault {\r\n        val temperatures = repo.getDailyTemperatureRange(location, date)\r\n        Range(\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.start,\r\n                Distance.meters(0f),\r\n                elevation\r\n            ),\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.end,", "choices": [{"text": "\n                Distance.meters(0f),\r\n                elevation\r\n            ),\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.start,\r\n                Distance.meters(0f),\r\n                elevation\r\n            ),\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.end,\r\n                Distance.meters(0f),\r\n                elevation\r\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1559", "ground_truth": "                Distance.meters(0f),\r\n                elevation\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "import com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\nimport com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nimport com.kylecorry.sol.science.meteorology.WeatherForecast\nimport com.kylecorry.sol.science.meteorology.Meteorology\nimport com.kylecorry.sol.math.Range\nprivate fun getForecast(\r\n        pressures: List<Reading<Pressure>>,\r\n        clouds: List<Reading<CloudGenus?>>,\r\n        temperatureRange: Range<Temperature>?\r\n    ): List<WeatherForecast> {\r\n        return Meteorology.forecast(\r\n            pressures,\r\n            clouds,\r\n            temperatureRange,", "choices": [{"text": "\n            true\r\n        );\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1562", "ground_truth": "            hourlyForecastChangeThreshold / 3f,\r\n            stormThreshold / 3f,\r\n            Instant.now()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\WeatherForecaster.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.trail_sense.shared.data.DataUtils\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\noverride fun calibrate(readings: List<Reading<RawWeatherObservation>>): List<Reading<Pressure>> {\r\n        val seaLevel = baseStrategy.calibrate(readings)\r\n        return DataUtils.smoothTemporal(\r\n            seaLevel,\r\n            smoothing,", "choices": [{"text": "\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings),\r\n            baseStrategy.calibrate(readings"}], "metadata": {"task_id": "Trail-Sense/1565", "ground_truth": "            { it.pressure }\r\n        ) { reading, value ->\r\n            reading.copy(pressure = value)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\sealevel\\LoessSeaLevelCalibrationStrategy.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\noverride fun calibrate(readings: List<Reading<RawWeatherObservation>>): List<Reading<Pressure>> {\r\n        return readings.map {\r\n            Reading(", "choices": [{"text": "\n                new RawWeatherObservation(\r\n                    new RawWeatherObservation.RawWeatherObservation(\r\n                        new RawWeatherObservation.RawWeatherObservation(\r\n                            new RawWeatherObservation.RawWeatherObservation(\r\n                                new RawWeatherObservation.RawWeatherObservation(\r\n                                    new RawWeatherObservation(\r\n                                        new RawWeatherObservation(\r\n                                            new RawWeatherObservation(\r\n                                                new RawWeatherObservation(\r\n                                                    new RawWeatherObservation("}], "metadata": {"task_id": "Trail-Sense/1567", "ground_truth": "                it.value.seaLevel(useTemperature),\r\n                it.time\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\sealevel\\SimpleSeaLevelCalibrationStrategy.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nfun List<Reading<CloudGenus?>>.getLastCloud(\r\n    maxTime: Duration,\r\n    now: Instant = Instant.now()\r\n): Reading<CloudGenus?>? {\r\n    val lastCloud = lastOrNull() ?: return null", "choices": [{"text": "\n    if (lastCloud!= null) {\r\n        return lastCloud\r\n    } else {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/1569", "ground_truth": "    if (Duration.between(lastCloud.time, now).abs() > maxTime) {\r\n        return null\r\n    }\r\n    return lastCloud\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\WeatherExtensions.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.infrastructure.alerts.CurrentWeatherAlerter\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.trail_sense.shared.commands.generic.Command\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nfun create(context: Context): CurrentWeatherAlertCommand {\r\n            val prefs = UserPreferences(context)\r\n            return CurrentWeatherAlertCommand(\r\n                prefs.weather,\r\n                CurrentWeatherAlerter(\r\n                    context,\r\n                    FormatService.getInstance(context),\r\n                    prefs.pressureUnits,", "choices": [{"text": "\n                    prefs.temperatureUnits,\r\n                    prefs.humidityUnits\r\n                )\r\n            )\r\n        }"}], "metadata": {"task_id": "Trail-Sense/1575", "ground_truth": "                    prefs.temperatureUnits,\r\n                    prefs.weather\r\n                )\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\CurrentWeatherAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.trail_sense.shared.preferences.Flag\noverride fun execute(weather: CurrentWeather) {\r\n        val sentAlert = justShownFlag.get()\r\n\r\n        if (weather.prediction.alerts.contains(WeatherAlert.Storm)) {\r\n            val shouldSend = prefs.sendStormAlerts && prefs.shouldMonitorWeather\r\n            if (shouldSend && !sentAlert) {\r\n                alerter.alert()\r\n                justShownFlag.set(true)\r\n            }", "choices": [{"text": "\n        } else {\r\n            alerter.alert()\r\n            justShownFlag.set(false)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1583", "ground_truth": "        } else {\r\n            alerter.dismiss()\r\n            justShownFlag.set(false)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\StormAlertCommand.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.sol.units.Reading\nfun toWeatherObservation(): Reading<RawWeatherObservation> {\r\n        return Reading(\r\n            RawWeatherObservation(\r\n                id,\r\n                pressure,\r\n                altitude,\r\n                temperature,\r\n                altitudeAccuracy,\r\n                humidity,", "choices": [{"text": "\n                altitudeAccuracy,\r\n                temperatureAccuracy,\r\n                humidityAccuracy,\r\n            )\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1585", "ground_truth": "                Coordinate(latitude, longitude)\r\n            ),\r\n            Instant.ofEpochMilli(time)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\PressureReadingEntity.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<RawWeatherObservation>): Long = onIO {\r\n        val entity = PressureReadingEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            pressureDao.update(entity)\r\n            entity.id\r\n        } else {", "choices": [{"text": "\n            pressureDao.insert(entity)\r\n            id = entity.id\r\n        }\r\n\r\n        return id\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1587", "ground_truth": "            pressureDao.insert(entity)\r\n        }\r\n        _readingsChanged.publish()\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nsuspend fun addAll(value: List<Reading<RawWeatherObservation>>) = onIO {\r\n        val entities = value.map { PressureReadingEntity.from(it) }\r\n        val toAdd = entities.filter { it.id == 0L }\r\n        val toUpdate = entities.filter { it.id != 0L }\r\n\r\n        if (toAdd.isNotEmpty()) {\r\n            pressureDao.bulkInsert(toAdd)\r\n        }\r\n\r\n        if (toUpdate.isNotEmpty()) {", "choices": [{"text": "\n            pressureDao.bulkUpdate(toUpdate)\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1590", "ground_truth": "            pressureDao.bulkUpdate(toUpdate)\r\n        }\r\n\r\n        _readingsChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun getWeather(): CurrentWeather = onIO {", "choices": [{"text": "\n    if (currentWeather == null) {\n        currentWeather = new CurrentWeather();\n    }\n    return currentWeather;\n}"}], "metadata": {"task_id": "Trail-Sense/1594", "ground_truth": "        if (!isValid) {\r\n            refresh()\r\n        }\r\n        cachedValue.getOrPut { populateCache() }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "private fun invalidate() {", "choices": [{"text": "\n    if (mView!= null) {\n        mView.setVisibility(View.VISIBLE);\n    } else {\n        mView.setVisibility(View.GONE);\n    }\n}"}], "metadata": {"task_id": "Trail-Sense/1604", "ground_truth": "        synchronized(validLock) {\r\n            isValid = false\r\n        }\r\n        _weatherChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "var cachedValue\nval location\nval sharedPrefs\n private suspend fun refresh() {\r\n        cachedValue.reset()", "choices": [{"text": "\n        if (cachedValue!= null) {\r\n            cachedValue.refresh()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1605", "ground_truth": "        delay(50)\r\n        synchronized(validLock) {\r\n            isValid = true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.FeatureState\nprivate fun calculateWeatherMonitorState(): FeatureState {\r\n        return if (WeatherMonitorIsEnabled().isSatisfiedBy(context)) {\r\n            FeatureState.On\r\n        } else if (WeatherMonitorIsAvailable().not().isSatisfiedBy(context)) {", "choices": [{"text": "\n            FeatureState.Off\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1608", "ground_truth": "            FeatureState.Unavailable\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "import com.kylecorry.trail_sense.receivers.ServiceRestartAlerter\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.util.Log\nimport android.content.Context\nfun start(context: Context) {\r\n        if (!WeatherMonitorIsAvailable().isSatisfiedBy(context)) {\r\n            return\r\n        }\r\n\r\n        if (!hasPermissions(context)) {\r\n            ServiceRestartAlerter(context).alert()\r\n            Log.d(\"WeatherUpdateScheduler\", \"Cannot start weather monitoring\")\r\n            return\r\n        }", "choices": [{"text": "\n        }\r\n\r\n        if (!WeatherMonitorIsAvailable().isSatisfiedBy(context)) {\r\n            ServiceRestartAlerter(context).alert()\r\n            Log.d(\"WeatherUpdateScheduler\", \"Cannot start weather monitoring\")\r\n            return\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1619", "ground_truth": "\r\n        tryStartForegroundOrNotify(context) {\r\n            WeatherMonitorService.start(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherUpdateScheduler.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.clouds.infrastructure.CloudDetailsService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItem\nimport android.content.Context\noverride fun getListItem(context: Context): ListItem? {\r\n        cloud ?: return null\r\n        val cloudDetailsService = CloudDetailsService(context)\r\n        val name = cloudDetailsService.getCloudName(cloud.value)\r\n\r\n        return ListItem(\r\n            7,\r\n            context.getString(R.string.clouds),\r\n            icon = ResourceListIcon(R.drawable.cloudy),", "choices": [{"text": "\n            name = name,\r\n            icon = ResourceListIcon(R.drawable.cloudy),\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1633", "ground_truth": "            trailingText = name\r\n        ) {\r\n            CloudDetailsModal(context).show(cloud.value)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\fields\\CloudWeatherField.kt"}}
{"prompt": "import com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.shared.FormatService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.content.Context\noverride fun getListItem(context: Context): ListItem? {\r\n        humidity ?: return null\r\n        if (!Sensors.hasHygrometer(context)) {\r\n            return null\r\n        }\r\n\r\n        val formatter = FormatService.getInstance(context)\r\n        val value = formatter.formatPercentage(humidity)\r\n\r\n        return ListItem(\r\n            6,\r\n            context.getString(R.string.humidity),\r\n            icon = ResourceListIcon(R.drawable.ic_category_water, AppColor.Blue.color),", "choices": [{"text": "\n            icon = ResourceListIcon(R.drawable.ic_category_water, AppColor.Blue.color),\r\n            value = value,\r\n        )\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1634", "ground_truth": "            trailingText = value\r\n        ) {\r\n            onClick()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\fields\\HumidityWeatherField.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onIO\nprivate fun updateWeather() {\r\n        inBackground {\r\n            onIO {\r\n                history = weatherSubsystem.getHistory().filter {\r\n                    Duration.between(it.time, Instant.now()) <= prefs.weather.pressureHistory\r\n                }\r\n\r\n                loadRawWeatherReadings()", "choices": [{"text": "\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Trail-Sense/1639", "ground_truth": "\r\n                weather = weatherSubsystem.getWeather()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": "import com.kylecorry.trail_sense.tools.weather.ui.charts.PressureChart\nimport com.kylecorry.sol.units.Pressure\noverride fun onUpdate() {\r\n        super.onUpdate()\r\n\r\n        effect(\"chart\", history, rawHistory) {\r\n            displayPressureChart(history, rawHistory)\r\n        }\r\n\r\n        effect(\"list\", weather) {\r\n            updateList()\r\n        }\r\n\r\n        effect(\"forecast\", weather) {", "choices": [{"text": "\n            updateForecast()\r\n        }\r\n\r\n        effect(\"weather\", weather) {\r\n            updateWeather()\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1640", "ground_truth": "            inBackground {\r\n                updateForecast()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": "import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nimport android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        super.onStartCommand(intent, flags, startId)\r\n        acquireWakelock()\r\n        isRunning = true\r\n        val stopAt = cache.getInstant(CACHE_KEY_OFF_TIME)\r\n        if (stopAt != null && Instant.now() < stopAt) {\r\n            offTimer.once(Duration.between(Instant.now(), stopAt))\r\n        }", "choices": [{"text": "\n        return super.onStartCommand(intent, flags, startId)\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1651", "ground_truth": "\r\n        whiteNoise = PinkNoise()\r\n        whiteNoise?.fadeOn()\r\n        return START_STICKY\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\infrastructure\\WhiteNoiseService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onDestroy() {\r\n        releaseWakelock()\r\n        offTimer.stop()\r\n        isRunning = false", "choices": [{"text": "\n        super.onDestroy()\r\n    }\r\n\r\n    private void releaseWakelock() {\r\n        if (wakelock!= null) {\r\n            wakelock.release()\r\n            wakelock = null\r\n        }\r\n    }"}], "metadata": {"task_id": "Trail-Sense/1653", "ground_truth": "        whiteNoise?.fadeOff(true)\r\n        stopService(true)\r\n        clearSleepTimer(this)\r\n        super.onDestroy()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\infrastructure\\WhiteNoiseService.kt"}}
{"prompt": "import com.kylecorry.trail_sense.R\noverride fun onResume() {", "choices": [{"text": "\n    super.onResume();\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.onResume();\n    }\n    if (mActivity!= null) {\n        mActivity.on"}], "metadata": {"task_id": "Trail-Sense/1656", "ground_truth": "        super.onResume()\r\n        if (!intervalometer.isRunning()) {\r\n            intervalometer.interval(20)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\quickactions\\QuickActionWhiteNoise.kt"}}
{"prompt": "val hasReviews Boolean\nval mainUrl String\nval iconId Int?\n suspend fun loadHtml(url: String): String? {\r\n        return try {\r\n            api.loadHtml(api.fixUrl(url))?.removeAds()", "choices": [{"text": "\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/2", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\APIRepository.kt"}}
{"prompt": "import androidx.core.app.ActivityCompat\nimport android.app.Activity\nimport android.Manifest.permission.WRITE_EXTERNAL_STORAGE\nfun Activity.requestRW() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(\r\n                WRITE_EXTERNAL_STORAGE,", "choices": [{"text": "_EXTERNAL_STORAGE,\r\n            ),\r\n            ActivityCompat.PERMISSION_READ_EXTERNAL_STORAGE,\r\n            ActivityCompat.PERMISSION_WRITE_EXTERNAL_STORAGE,\r\n        ),\r\n        ActivityCompat.REQUEST_WRITE_EXTERNAL_STORAGE,\r\n        ActivityCompat.REQUEST_WRITE_EXTERNAL_STORAGE,\r\n        ActivityCompat.REQUEST_WRITE_EXTERNAL_STORAGE,\r\n        ActivityCompat.REQUEST_WRITE_EXTERNAL_STORAGE,\r\n        ActivityCompat.REQUEST_WRITE_EXTERNAL_STORAGE,\r\n        ActivityCompat.REQUEST"}], "metadata": {"task_id": "QuickNovel/10", "ground_truth": "                READ_EXTERNAL_STORAGE\r\n            ),\r\n            1337\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import java.io.File\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.net.Uri\nimport android.content.ContentResolver\n @RequiresApi(Build.VERSION_CODES.Q)\r\n    fun ContentResolver.getFileLength(fileUri: Uri): Long? {\r\n        return try {\r\n            this.openFileDescriptor(fileUri, \"r\")", "choices": [{"text": "\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/11", "ground_truth": "                .use { it?.statSize ?: 0 }\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun stream(res: LoadResponse, apiName: String) {\r\n        when (res) {\r\n            is StreamResponse -> {\r\n                stream(res, apiName)\r\n            }", "choices": [{"text": ", apiName: String\r\n        } else {\r\n            stream(null, apiName)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/16", "ground_truth": "            is EpubResponse -> {\r\n                stream(res, apiName)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import com.lagradost.quicknovel.CommonActivity.showToast\nimport android.widget.Toast\nprivate fun generateAndReadEpub(author: String?, name: String, apiName: String) {\r\n        showToast(R.string.generating_epub)\r\n        if (!turnToEpub(author, name, apiName)) {", "choices": [{"text": "\n            Toast.makeText(getApplicationContext(), R.string.generating_epub_failed, Toast.LENGTH_SHORT).show();\r\n        } else {\r\n            Toast.makeText(getApplicationContext(), R.string.generating_epub_success, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/19", "ground_truth": "            showToast(R.string.error_loading_novel)\r\n            return\r\n        }\r\n        openEpub(name)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "val readEpubMutex\nval CHANNEL_ID\nval LOCAL_EPUB_MIN_SIZE Long\n private fun readEpub(author: String?, name: String, apiName: String) {\r\n        if (hasEpub(name)) {", "choices": [{"text": "\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/20", "ground_truth": "            openEpub(name)\r\n        } else {\r\n            generateAndReadEpub(author, name, apiName)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun readEpub(\r\n        id: Int,\r\n        downloadedCount: Int,\r\n        author: String?,\r\n        name: String,\r\n        apiName: String\r\n    ) {\r\n        if (readEpubMutex.isLocked) return\r\n        readEpubMutex.withLock {\r\n            val downloaded = getKey(DOWNLOAD_EPUB_SIZE, id.toString(), 0)!!\r\n            val shouldUpdate = downloadedCount - downloaded != 0\r\n            if (shouldUpdate) {\r\n                generateAndReadEpub(author, name, apiName)", "choices": [{"text": "\n            } else {\r\n                generateAndReadEpub(author, name, apiName)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/21", "ground_truth": "            } else {\r\n                readEpub(author, name, apiName)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun addPendingActionAsync(id: Int, action: DownloadActionType) {\r\n        currentDownloadsMutex.withLock {\r\n            if (!currentDownloads.contains(id)) {\r\n                return\r\n            }\r\n        }", "choices": [{"text": "\n        currentDownloads.add(id, action)\r\n    }"}], "metadata": {"task_id": "QuickNovel/23", "ground_truth": "\r\n        pendingActionMutex.withLock {\r\n            pendingAction[id] = action\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun consumeAction(id: Int): DownloadActionType? {\r\n        pendingActionMutex.withLock {\r\n            pendingAction[id]?.let { action ->\r\n                pendingAction -= id", "choices": [{"text": "\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/25", "ground_truth": "                return action\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun changeDownload(\r\n        id: Int,\r\n        action: DownloadProgressState.() -> Unit\r\n    ): DownloadProgressState? {\r\n        val data = downloadInfoMutex.withLock {\r\n            downloadProgress[id]?.apply {\r\n                action()\r\n                lastUpdatedMs = System.currentTimeMillis()\r\n            }", "choices": [{"text": "\n        }\r\n        downloadProgress[id] = data\r\n        lastUpdatedMs = System.currentTimeMillis()\r\n    }"}], "metadata": {"task_id": "QuickNovel/26", "ground_truth": "        }\r\n\r\n        downloadProgressChanged.invoke(Pair(id, data ?: return null))\r\n        return data\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "fun download(load: LoadResponse, api: APIRepository) {\r\n        when (load) {\r\n            is StreamResponse -> {\r\n                download(load, api, 0 until load.data.size)\r\n            }\r\n\r\n            is EpubResponse -> {\r\n                download(load, api)", "choices": [{"text": ", 0 until load.data.size)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/27", "ground_truth": "            }\r\n\r\n            else -> throw NotImplementedError()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "import android.content.SharedPreferences\nimport android.content.Context\nfun Context.removeKey(path: String) {\r\n        try {\r\n            val prefs = getSharedPrefs()\r\n            if (prefs.contains(path)) {\r\n                val editor: SharedPreferences.Editor = prefs.edit()\r\n                editor.remove(path)\r\n                editor.apply()", "choices": [{"text": "\n                prefs.remove(path)\r\n                editor.apply()\r\n            }\r\n        } catch (e) {\r\n            Log.e(e)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/31", "ground_truth": "            }\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "import android.content.Context\nfun Context.removeKeys(folder: String): Int {\r\n        val keys = getKeys(folder)", "choices": [{"text": "\n        if (keys.length > 0) {\r\n            for (int i = 0; i < keys.length; i++) {\r\n                if (keys[i].equals(folder)) {\r\n                    keys.remove(i)\r\n                }\r\n            }\r\n        }\r\n        return keys.length;\r\n    }"}], "metadata": {"task_id": "QuickNovel/32", "ground_truth": "        keys.forEach { value ->\r\n            removeKey(value)\r\n        }\r\n        return keys.size\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "import android.content.SharedPreferences\nimport android.content.Context\nfun <T> Context.setKey(path: String, value: T) {\r\n        try {\r\n            val editor: SharedPreferences.Editor = getSharedPrefs().edit()\r\n            editor.putString(path, mapper.writeValueAsString(value))", "choices": [{"text": "\n            editor.apply()\r\n        } catch (e) {\r\n            Log.e(e)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/33", "ground_truth": "            editor.apply()\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "import android.content.Context\ninline fun <reified T : Any> Context.getKey(path: String, defVal: T?): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null) ?: return defVal", "choices": [{"text": "\n        } catch (e) {\r\n            return defVal\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/34", "ground_truth": "            return json.toKotlinObject()\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "import android.content.Context\nfun <T> Context.getKey(path: String, valueType: Class<T>): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null) ?: return null", "choices": [{"text": "\n            if (json == null) {\r\n                return null\r\n            } else {\r\n                return json\r\n            }\r\n        } catch (Exception e) {\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/35", "ground_truth": "            return json.toKotlinObject(valueType)\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "fun ExtractorApi.fixUrl(url: String): String {\r\n    if (url.startsWith(\"http\") ||\r\n        // Do not fix JSON objects when passed as urls.\r\n        url.startsWith(\"{\\\"\")\r\n    ) {\r\n        return url\r\n    }\r\n    if (url.isEmpty()) {\r\n        return \"\"\r\n    }\r\n\r\n    val startsWithNoHttp = url.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$url\"\r\n    } else {\r\n        if (url.startsWith('/')) {", "choices": [{"text": "\n            return \"http:$url\"\r\n        } else {\r\n            return url\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/36", "ground_truth": "            return mainUrl + url\r\n        }\r\n        return \"$mainUrl/$url\"\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\ExtractorApi.kt"}}
{"prompt": "import com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun getSafeUrl(\r\n        link: DownloadExtractLink\r\n    ): List<DownloadLinkType> {\r\n        return try {\r\n            getUrl(link) ?: emptyList()", "choices": [{"text": "\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n            return emptyList()\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/37", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            emptyList()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\ExtractorApi.kt"}}
{"prompt": "import com.lagradost.quicknovel.get\nimport com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    override suspend fun getUrl(link : DownloadExtractLink): List<DownloadLinkType>? {\r\n        val document = link.get().document\r\n        val url = fixUrlNull(document.selectFirst(\"tbody>tr>td>a\")?.attr(\"href\"))\r\n        return listOf(\r\n            DownloadLink(\r\n                url = url ?: return null,", "choices": [{"text": "            ),\r\n            DownloadLink(\r\n                url = url?: return null,\r\n            ),\r\n            DownloadLink(\r\n                url = url?: return null,\r\n            ),\r\n            DownloadLink(\r\n                url = url?: return null,\r\n            ),\r\n            DownloadLink(\r\n                url = url?: return null,\r\n            ),\r\n            DownloadLink(\r\n                url = url?: return null,\r\n            ),\r\n            DownloadLink(\r\n                url = url?:"}], "metadata": {"task_id": "QuickNovel/38", "ground_truth": "                name = name,\r\n                kbPerSec = 200\r\n            )\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\LibgenLi.kt"}}
{"prompt": "import java.io.File\nimport com.lagradost.quicknovel.util.UIHelper.parseFontFileName\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup?): View {\r\n        val view =\r\n            (convertView ?: LayoutInflater.from(context)\r\n                .inflate(R.layout.sort_bottom_single_choice, parent, false)) as TextView\r\n\r\n        val font = fonts[position]\r\n        view.text = parseFontFileName(font?.name)\r\n        view.isSelected = position == checked", "choices": [{"text": "\n        return view\r\n    }"}], "metadata": {"task_id": "QuickNovel/39", "ground_truth": "        if (font != null) {\r\n            view.typeface = Typeface.createFromFile(font)\r\n        }\r\n        return view\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\FontAdapter.kt"}}
{"prompt": "import androidx.navigation.fragment.NavHostFragment\nimport androidx.fragment.app.FragmentActivity\nimport androidx.annotation.IdRes\nimport android.os.Bundle\nimport android.app.Activity\nfun Activity?.navigate(@IdRes navigation: Int, arguments: Bundle? = null) {\r\n            try {\r\n                if (this is FragmentActivity) {\r\n                    val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as? NavHostFragment?\r\n                    navHostFragment?.navController?.navigate(navigation, arguments)", "choices": [{"text": "\n                } else {\r\n                    super.navigate(navigation, arguments)\r\n                }\r\n            } catch (e) {\r\n                Log.e(e)\r\n            }\r\n        }"}], "metadata": {"task_id": "QuickNovel/40", "ground_truth": "                }\r\n            } catch (t: Throwable) {\r\n                logError(t)\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.Coroutines.main\nimport androidx.navigation.NavDestination\nprivate fun updateNavBar(destination: NavDestination) {\r\n        //this.hideKeyboard()\r\n\r\n        val isNavVisible = listOf(\r\n            R.id.navigation_mainpage,\r\n            R.id.navigation_homepage,\r\n            R.id.navigation_history,\r\n            R.id.navigation_download,\r\n            R.id.navigation_search,\r\n            R.id.navigation_settings,\r\n        ).contains(destination.id)", "choices": [{"text": "\n\r\n        if (!isNavVisible) {\r\n            return\r\n        }\r\n\r\n        if (destination.id == R.id.navigation_settings) {\r\n            return\r\n        }\r\n\r\n        if (destination.id == R.id.navigation_mainpage) {\r\n            return\r\n        }\r\n\r\n        if (destination.id == R.id.navigation_homepage) {\r\n            return\r\n        }\r\n\r\n        if (destination.id == R.id.navigation_history) {\r\n            return"}], "metadata": {"task_id": "QuickNovel/44", "ground_truth": "\r\n        binding?.apply {\r\n            navView.isVisible = isNavVisible\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": "fun MainAPI.fixUrlNull(url: String?): String? {", "choices": [{"text": "(url: String?): String? {\n    if (url == null) {\n        return null;\n    } else {\n        return url.replace(null, \"\");\n    }\n}"}], "metadata": {"task_id": "QuickNovel/46", "ground_truth": "    if (url.isNullOrEmpty()) {\r\n        return null\r\n    }\r\n    return fixUrl(url)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainAPI.kt"}}
{"prompt": "fun MainAPI.fixUrl(url: String): String {\r\n    if (url.startsWith(\"http\")) {\r\n        return url\r\n    }\r\n\r\n    val startsWithNoHttp = url.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$url\"\r\n    } else {\r\n        if (url.startsWith('/')) {", "choices": [{"text": "\n            return url.substring(1)\r\n        } else {\r\n            return url\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/47", "ground_truth": "            return mainUrl + url\r\n        }\r\n        return \"$mainUrl/$url\"\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainAPI.kt"}}
{"prompt": "inline fun <reified T : Any> some(value: T?): Some<T> {\r\n    return if (value == null) {", "choices": [{"text": "\n        return null;\r\n    } else {\r\n        return new Some<T>(value);\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/52", "ground_truth": "        Some.None\r\n    } else {\r\n        Some.Success(value)\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "fun <T> normalSafeApiCall(apiCall: () -> T): T? {\r\n    return try {\r\n        apiCall.invoke()", "choices": [{"text": "\n    } catch (e) {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/55", "ground_truth": "    } catch (throwable: Throwable) {\r\n        logError(throwable)\r\n        return null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "suspend fun <T> suspendSafeApiCall(apiCall: suspend () -> T): T? {\r\n    return try {\r\n        apiCall.invoke()", "choices": [{"text": "\n    } catch (e) {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/56", "ground_truth": "    } catch (throwable: Throwable) {\r\n        logError(throwable)\r\n        return null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "import kotlin.coroutines.EmptyCoroutineContext\nimport kotlin.coroutines.CoroutineContext\nfun CoroutineScope.launchSafe(\r\n    context: CoroutineContext = EmptyCoroutineContext,\r\n    start: CoroutineStart = CoroutineStart.DEFAULT,\r\n    block: suspend CoroutineScope.() -> Unit\r\n): Job {\r\n    val obj: suspend CoroutineScope.() -> Unit = {\r\n        try {\r\n            block()\r\n        } catch (e: Exception) {\r\n            logError(e)", "choices": [{"text": "\n        try {\r\n            start()\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }\r\n    return obj\r\n}"}], "metadata": {"task_id": "QuickNovel/58", "ground_truth": "        }\r\n    }\r\n\r\n    return this.launch(context, start, obj)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "suspend fun <T, V> Resource<T>.map(transform : suspend (T) -> V) : Resource<V> {\r\n    return when(this) {\r\n        is Resource.Failure -> Resource.Failure(this.isNetworkError,this.errorCode,this.errorResponse,this.errorString)\r\n        is Resource.Loading -> Resource.Loading(this.url)", "choices": [{"text": "\n        is Resource.Loading -> Resource.Loading(this.url)\r\n        is Resource.Loading -> Resource.Loading(this.url)\r\n        is Resource.Loading -> Resource.Loading(this.url)\r\n        is Resource.Loading -> Resource.Loading(this.url)\r\n        is Resource.Loading -> Resource.Loading(this.url)\r\n        is Resource.Loading -> Resource.Loading(this.url)\r\n        is Resource.Loading -> Resource.Loading(this.url)\r\n        is Resource.Loading -> Resource.Loading(this.url)\r"}], "metadata": {"task_id": "QuickNovel/59", "ground_truth": "        is Resource.Success -> {\r\n            Resource.Success(transform(this.value))\r\n        }\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "fun <T, V> Resource<T>?.letInner(transform : (T) -> V) : V? {\r\n    return when(this) {\r\n        is Resource.Success -> {", "choices": [{"text": ",\r\n            success: true,\r\n            error: null,\r\n        };\r\n    };\r\n}"}], "metadata": {"task_id": "QuickNovel/60", "ground_truth": "            transform(this.value)\r\n        }\r\n        else -> null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "import com.lagradost.quicknovel.MainActivity.Companion.app\nimport com.lagradost.nicehttp.getHeaders\nimport com.lagradost.nicehttp.cookies\nprivate suspend fun proceed(request: Request, cookies: Map<String, String>): Response {\r\n        val userAgentMap = WebViewResolver.getWebViewUserAgent()?.let {\r\n            mapOf(\"user-agent\" to it)\r\n        } ?: emptyMap()\r\n\r\n        val headers =\r\n            getHeaders(request.headers.toMap() + userAgentMap, null, cookies + request.cookies)\r\n        return app.baseClient.newCall(", "choices": [{"text": "\n            headers,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null"}], "metadata": {"task_id": "QuickNovel/64", "ground_truth": "            request.newBuilder()\r\n                .headers(headers)\r\n                .build()\r\n        ).await()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\CloudflareKiller.kt"}}
{"prompt": "import kotlinx.coroutines.runBlocking\nimport com.lagradost.quicknovel.BaseApplication.Companion.context\nimport com.lagradost.quicknovel.util.Coroutines.mainWork\nimport com.lagradost.quicknovel.util.Coroutines.main\n @JvmName(\"getWebViewUserAgent1\")\r\n        fun getWebViewUserAgent(): String? {\r\n            return webViewUserAgent ?: context?.let { ctx ->\r\n                runBlocking {\r\n                    mainWork {\r\n                        WebView(ctx).settings.userAgentString.also { userAgent ->\r\n                            webViewUserAgent = userAgent", "choices": [{"text": "\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }"}], "metadata": {"task_id": "QuickNovel/65", "ground_truth": "                        }\r\n                    }\r\n                }\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\WebViewResolver.kt"}}
{"prompt": "import okhttp3.Request\nimport com.lagradost.nicehttp.requestCreator\nfun WebResourceRequest.toRequest(): Request {\r\n    val webViewUrl = this.url.toString()\r\n\r\n    return requestCreator(", "choices": [{"text": "\n        new WebViewRequest(webViewUrl)\r\n    )\r\n}"}], "metadata": {"task_id": "QuickNovel/68", "ground_truth": "        this.method,\r\n        webViewUrl,\r\n        this.requestHeaders,\r\n    )\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\WebViewResolver.kt"}}
{"prompt": "import com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nprivate fun extract(url: String, name: String): DownloadLinkType {\r\n        return if (url.contains(\".epub\")) {\r\n            DownloadLink(\r\n                url = url,\r\n                name = name,\r\n                kbPerSec = 2\r\n            )\r\n        } else {\r\n            DownloadExtractLink(", "choices": [{"text": "\n                url = url,\r\n                name = name,\r\n                kbPerSec = 2\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/70", "ground_truth": "                url = url,\r\n                name = name\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\AnnasArchive.kt"}}
{"prompt": "import org.jsoup.Jsoup\nimport com.lagradost.quicknovel.MainActivity.Companion.app\nprivate suspend fun getChapterData(url: String): List<ChapterData> {\r\n        val container = app.get(url).text\r\n        val doc = Jsoup.parse(container)\r\n        val root = doc.select(\"rootfile[full-path]\")\r\n\r\n        val rootPath = root.attr(\"full-path\")", "choices": [{"text": "\n\r\n        val chapterData = new ChapterData()\r\n\r\n        chapterData.setTitle(rootPath.attr(\"title\"))\r\n        chapterData.setDescription(rootPath.attr(\"description\"))\r\n        chapterData.setAuthor(rootPath.attr(\"author\"))\r\n\r\n        return chapterData\r\n    }"}], "metadata": {"task_id": "QuickNovel/84", "ground_truth": "\r\n        val mainUrl = url.removeSuffix(containerUrl)\r\n\r\n        return scrapeOPFList(mainUrl + rootPath)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\ReadAnyBookProvider.kt"}}
{"prompt": "private fun findComment(url: String): String? {\r\n        val str = Regex(\"comment/(\\\\w*?)/\").find(url)?.groupValues?.get(1)\r\n            ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/\").find(url)?.groupValues?.get(1)", "choices": [{"text": "\n           ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/\").find(url)?.groupValues?.get(1)\r\n           ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/\").find(url)?.groupValues?.get(1)\r\n           ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/\").find(url)?.groupValues?.get(1)\r\n           ?: Regex(\"comments/\\\\w*?/\\\\"}], "metadata": {"task_id": "QuickNovel/88", "ground_truth": "        if(str.isNullOrBlank() || str.length < 4) {\r\n            return null\r\n        }\r\n        return str\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\RedditProvider.kt"}}
{"prompt": "import android.graphics.Color\noverride fun onColorSelected(dialog: Int, color: Int) {", "choices": [{"text": ", color: Int) {\n    if (color == null) {\n        return;\n    }\n    if (dialog == null) {\n        return;\n    }\n    if (color == null) {\n        return;\n    }\n    if (dialog == null) {\n        return;\n    }\n    if (color == null) {\n        return;\n    }\n    if (dialog == null) {\n        return;\n    }\n    if (color == null) {\n        return;\n    }\n    if (dialog == null) {\n"}], "metadata": {"task_id": "QuickNovel/93", "ground_truth": "        when (dialog) {\r\n            0 -> setBackgroundColor(color)\r\n            1 -> setTextColor(color)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.toPx\nprivate fun updatePadding() {\r\n        val h = viewModel.paddingHorizontal.toPx\r\n        val v = viewModel.paddingVertical.toPx\r\n        binding.realText.apply {\r\n            if (paddingLeft == h && paddingRight == h && paddingBottom == v && paddingTop == v) return\r\n            setPadding(\r\n                h,\r\n                v,\r\n                h,", "choices": [{"text": "\n                v,\r\n                h,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v,\r\n                v"}], "metadata": {"task_id": "QuickNovel/102", "ground_truth": "                v\r\n            )\r\n            scrollToDesired()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": "import kotlin.reflect.KProperty\nvar _context WeakReference<ReadActivity2>?\nvar cache T?\nvar cache T\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        cache = t\r\n        if (t == null) {", "choices": [{"text": "_context = new WeakReference<ReadActivity2>(this)\r\n    } else {\r\n        _context.set(this, property, t)\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/105", "ground_truth": "            removeKey(key)\r\n        } else {\r\n            setKeyClass(key, t)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "import kotlin.reflect.KProperty\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        cache = t ?: default\r\n        _liveData.postValue(cache)\r\n        if (t == null) {", "choices": [{"text": "\n            _liveData.postValue(null)\r\n        } else {\r\n            _liveData.postValue(cache, t)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/106", "ground_truth": "            removeKey(key)\r\n        } else {\r\n            setKeyClass(key, t)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "override suspend fun posterBytes(): ByteArray? {\r\n        val poster = data.poster\r\n        if (poster != null) {\r\n            try {\r\n                return MainActivity.app.get(poster).okhttpResponse.body.bytes()\r\n            } catch (t: Throwable) {", "choices": [{"text": "\n                return null\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/108", "ground_truth": "                logError(t)\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "private fun updateIndex(index: Int) {\r\n        var alreadyRequested = false\r\n        for (idx in index - chapterPaddingBottom..index + chapterPaddingTop) {\r\n            if (!requested.contains(index)) {\r\n                alreadyRequested = true\r\n            }\r\n            requested += index\r\n        }\r\n\r\n        if (alreadyRequested) return", "choices": [{"text": " {\r\n            return\r\n        }\r\n\r\n        if (requested.contains(index)) {\r\n            return\r\n        }\r\n\r\n        requested.add(index)\r\n        updateIndex(index - chapterPaddingBottom..index + chapterPaddingTop)\r\n        updateIndex(index - chapterPaddingBottom..index + chapterPaddingTop + 1)\r\n        updateIndex(index - chapterPaddingBottom..index + chapterPaddingTop + 2)\r\n        updateIndex(index - chapterPaddingBottom..index + chapterPaddingTop + 3)\r\n        updateIndex(index -"}], "metadata": {"task_id": "QuickNovel/113", "ground_truth": "\r\n        ioSafe {\r\n            updateIndexAsync(index)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "var _context WeakReference<ReadActivity2>?\nvar markwon Markwon\nval ttsLines", "choices": [{"text": "_context WeakReference<ReadActivity2>?.set(new WeakReference<ReadActivity2>(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new ReadActivity2(new"}], "metadata": {"task_id": "QuickNovel/127", "ground_truth": "override fun onCleared() {\r\n        ttsSession.release()\r\n\r\n        super.onCleared()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "import org.jsoup.nodes.Document\nimport com.lagradost.quicknovel.MainActivity.Companion.app\nsuspend fun jConnect(\r\n    url: String,\r\n    params: Map<String, String> = mapOf(),\r\n    method: String = \"GET\"\r\n): Document? {\r\n    val head = mapOf(\r\n        \"Accept\" to \"*/*\",\r\n        \"Accept-Encoding\" to \"gzip, deflate\",\r\n        \"User-Agent\" to USER_AGENT\r\n    )\r\n    return try {\r\n        val res = app.custom(method, url = url, headers = head, params = params)", "choices": [{"text": "\n        return res.text()\r\n    } catch (e) {\r\n        return null\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/129", "ground_truth": "        if (res.code == 200) Jsoup.parse(res.text) else null\r\n    } catch (e: Exception) {\r\n        null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "fun String.toRate(maxRate: Int = 10): Int {\r\n    return this", "choices": [{"text": "\n       .toRate(maxRate, true)\r\n       .toRate(maxRate, false)\r\n       .toRate(maxRate, false)\r\n    }"}], "metadata": {"task_id": "QuickNovel/130", "ground_truth": "        .replace(Regex(\"[^.0-9]\"), \"\")\r\n        .toFloatOrNull()\r\n        ?.times(1000 / maxRate)\r\n        ?.toInt() ?: 0\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "fun String.toStatus(): Int {\r\n    return this\r\n        .clean()\r\n        .lowercase(Locale.getDefault())\r\n        .let {\r\n            when (it) {\r\n                \"completed\" -> STATUS_COMPLETE", "choices": [{"text": "\n            }\r\n            else {\r\n                \"failed\" -> STATUS_FAILED\r\n            }\r\n        }"}], "metadata": {"task_id": "QuickNovel/132", "ground_truth": "                \"ongoing\" -> STATUS_ONGOING\r\n                else -> STATUS_NULL\r\n            }\r\n        }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "import com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport com.lagradost.quicknovel.BaseApplication.Companion.removeKey\nimport android.speech.tts.Voice\nfun setVoice(voice: Voice?) {\r\n        if (voice == null) {\r\n            removeKey(EPUB_VOICE)\r\n        } else {\r\n            setKey(EPUB_VOICE, voice.name)", "choices": [{"text": "\n            setKey(EPUB_VOICE, voice.name)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/140", "ground_truth": "        }\r\n        val tts = tts ?: return\r\n        clearTTS(tts)\r\n        tts.voice = voice ?: tts.defaultVoice\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "import kotlinx.coroutines.delay\nsuspend fun waitForOr(id: Int?, action: () -> Boolean, then: () -> Unit) {\r\n        if (id == null) return\r\n        while (id > TTSEndSpeakId) {\r\n            delay(50)\r\n            if (action()) {\r\n                interruptTTS()", "choices": [{"text": "\n            } else {\r\n                interruptTTS()\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/142", "ground_truth": "                then()\r\n                break\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "fun release() {\r\n        tts?.stop()", "choices": [{"text": "\n        tts?.stop()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n        tts?.start()\r\n       "}], "metadata": {"task_id": "QuickNovel/144", "ground_truth": "        tts?.shutdown()\r\n        tts = null\r\n\r\n        unregister()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "import java.util.Stack\nimport android.text.Spanned\nprivate fun getNewLineLocations(unsegmented: Spanned): Stack<Int> {\r\n        val loc = Stack<Int>()\r\n        val string = unsegmented.toString()\r\n\r\n\r\n        var next = string.indexOf('\\n')\r\n        while (next > 0) {\r\n            //avoid chains of newline characters\r\n            next = if (string[next - 1] != '\\n') {\r\n                loc.push(next)\r\n                string.indexOf('\\n', loc.peek() + 1)\r\n            } else {\r\n                string.indexOf('\\n', next + 1)", "choices": [{"text": "\n            }\r\n        }\r\n        return loc\r\n    }"}], "metadata": {"task_id": "QuickNovel/147", "ground_truth": "            }\r\n            if (next >= string.length) next = -1\r\n        }\r\n        return loc\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "import io.noties.markwon.Markwon\nimport android.text.Spanned\nfun render(html: String, markwon: Markwon): Spanned {\r\n        return markwon.render(\r\n            markwon.parse(\r\n                html\r\n                /*.replaceAfterIndex( // because markwon is fucked we have to replace newlines with breaklines and becausse I dont want 3 br on top I start after body\r\n                \"\\n\",\r\n                \"<br>\",", "choices": [{"text": "\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n                \"<br>\",\r\n               "}], "metadata": {"task_id": "QuickNovel/148", "ground_truth": "                startIndex = index + 7\r\n            )*/\r\n            )\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "import kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.ui.ReadType\nimport com.lagradost.quicknovel.R\nimport androidx.lifecycle.viewModelScope\nprivate fun loadData() = viewModelScope.launch {\r\n        currentReadType.postValue(null)", "choices": [{"text": "\n        if (currentReadType!= null) {\r\n            currentReadType.postValue(null)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/157", "ground_truth": "        isOnDownloads.postValue(true)\r\n        cardsDataMutex.withLock {\r\n            postCards()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "var currentTab MutableLiveData<Int>\nvar currentSortingMethod MutableLiveData<Int>\nval cards MutableLiveData<ArrayList<DownloadFragment.DownloadDataLoaded>>\n fun selectTab(index: Int) {\r\n        currentTab.postValue(index)\r\n        if (index == 0) {", "choices": [{"text": "\n            currentSortingMethod.postValue(0)\r\n        } else if (index == 1) {\r\n            currentSortingMethod.postValue(1)\r\n        } else if (index == 2) {\r\n            currentSortingMethod.postValue(2)\r\n        } else if (index == 3) {\r\n            currentSortingMethod.postValue(3)\r\n        } else if (index == 4) {\r\n            currentSortingMethod.postValue(4)\r\n        } else if (index == 5) {\r\n            currentSortingMethod.postValue"}], "metadata": {"task_id": "QuickNovel/158", "ground_truth": "            loadData()\r\n        } else {\r\n            loadNormalData(readList[index - 1])\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.DownloadProgressState\nimport com.lagradost.quicknovel.BaseApplication.Companion.context\nprivate fun progressChanged(data: Pair<Int, DownloadProgressState>) =\r\n        ioSafe {\r\n            cardsDataMutex.withLock {\r\n                val (id, state) = data\r\n                cardsData[id]?.apply {\r\n                    downloadedCount = state.progress\r\n                    downloadedTotal = state.total\r\n                    this.state = state.state\r\n                    context?.let { ctx ->\r\n                        this.ETA = state.eta(ctx)", "choices": [{"text": "\n                    }\r\n                }\r\n            }\r\n        }"}], "metadata": {"task_id": "QuickNovel/161", "ground_truth": "                    }\r\n                }\r\n                postCards()\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.R\nval isOnDownloads MutableLiveData<Boolean>\nval currentReadType MutableLiveData<ReadType?>\nval cards MutableLiveData<ArrayList<DownloadFragment.DownloadDataLoaded>>\nprivate fun downloadRemoved(id: Int) = ioSafe {", "choices": [{"text": "\n    if (isOnDownloads.get(id)) {\n        onDownloads.remove(id);\n    }\n    if (currentReadType.get(id)) {\n        currentReadType.remove(id);\n    }\n    if (cards.get(id)) {\n        cards.remove(id);\n    }\n}"}], "metadata": {"task_id": "QuickNovel/162", "ground_truth": "        cardsDataMutex.withLock {\r\n            cardsData -= id\r\n            postCards()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,", "choices": [{"text": "\n    ) {\r\n        super.onCreateView(inflater, container, savedInstanceState);\r\n    }"}], "metadata": {"task_id": "QuickNovel/167", "ground_truth": "    ): View {\r\n        binding = FragmentHistoryBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryFragment.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.ResultCached\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.HISTORY_FOLDER\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKeys\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nprivate fun updateHistory() {\r\n        ioSafe {\r\n            val list = ArrayList<ResultCached>()\r\n            val keys = getKeys(HISTORY_FOLDER) ?: return@ioSafe\r\n            for (k in keys) {\r\n                val res =\r\n                    getKey<ResultCached>(k) ?: continue\r\n                list.add(res)", "choices": [{"text": "\n                list.add(new ResultCached(k, res))\r\n            }\r\n            return list\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/168", "ground_truth": "            }\r\n            list.sortBy { -it.cachedTime }\r\n            cards.postValue(list)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryViewModel.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,", "choices": [{"text": "\n    ) {\r\n        super.onCreateView(inflater, container, savedInstanceState);\r\n    }"}], "metadata": {"task_id": "QuickNovel/173", "ground_truth": "    ): View {\r\n        binding = FragmentHomeBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\home\\HomeFragment.kt"}}
{"prompt": "import com.lagradost.quicknovel.mvvm.observe\nimport androidx.recyclerview.widget.GridLayoutManager\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        val browseAdapter = BrowseAdapter2()\r\n        binding.homeBrowselist.apply {\r\n            adapter = browseAdapter\r\n            layoutManager = GridLayoutManager(context, 1)\r\n            setHasFixedSize(true)\r\n        }\r\n\r\n        observe(viewModel.homeApis) { list ->", "choices": [{"text": "\n            layoutManager.setHasFixedSize(true)\r\n            setHasFixedSize(true)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/174", "ground_truth": "            browseAdapter.submitList(list)\r\n        }\r\n\r\n        activity?.fixPaddingStatusbar(binding.homeToolbar)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\home\\HomeFragment.kt"}}
{"prompt": "import com.lagradost.quicknovel.databinding.SearchResultGridBinding\nimport com.lagradost.quicknovel.databinding.LoadingBottomBinding\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return when (viewType) { // Use 'when' to create the correct holder for any position\r\n            REGULAR_VIEW_TYPE -> MainAdapter2Holder(SearchResultGridBinding.inflate(LayoutInflater.from(parent.context),parent,false))\r\n            FOOTER_VIEW_TYPE -> LoadingHolder(LoadingBottomBinding.inflate(LayoutInflater.from(parent.context),parent,false))", "choices": [{"text": "\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/175", "ground_truth": "            else -> {\r\n                throw NotImplementedError()\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainAdapter2.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when(holder) {\r\n            is MainAdapter2Holder -> {\r\n                val currentItem = getItem(position)\r\n                holder.bind(currentItem, resView)\r\n            }", "choices": [{"text": "\n        } else {\r\n            resView.setVisibility(View.GONE)\r\n            resView.setVisibility(View.VISIBLE)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/176", "ground_truth": "            is LoadingHolder -> {\r\n                holder.bind()\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainAdapter2.kt"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,", "choices": [{"text": "\n    ) {\r\n        super.onCreateView(inflater, container, savedInstanceState);\r\n    }"}], "metadata": {"task_id": "QuickNovel/177", "ground_truth": "    ): View {\r\n        binding = FragmentMainpageBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageFragment.kt"}}
{"prompt": "import com.lagradost.quicknovel.CommonActivity.activity\nimport android.net.Uri\nimport android.content.Intent\nfun openInBrowser() {\r\n        try {\r\n            val url = currentUrl.value\r\n            if (url != null) {\r\n                val i = Intent(Intent.ACTION_VIEW)\r\n                i.data = Uri.parse(url)\r\n                activity?.startActivity(i)", "choices": [{"text": "\n                activity?.finish()\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/182", "ground_truth": "            }\r\n        } catch (_ : Throwable) {\r\n\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageViewModel.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.Apis\nfun init(apiName : String, mainCategory: Int?,\r\n             orderBy: Int?,\r\n             tag: Int?) {\r\n        if (hasInit) return\r\n        hasInit = true\r\n        repo = MainPageRepository(Apis.getApiFromName(apiName))\r\n        load(\r\n            0,", "choices": [{"text": "\n            repo,\r\n            mainCategory,\r\n            orderBy,\r\n            tag\r\n        )\r\n    }"}], "metadata": {"task_id": "QuickNovel/185", "ground_truth": "            mainCategory,\r\n            orderBy,\r\n            tag\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageViewModel.kt"}}
{"prompt": "private fun updateScrollHeight() {\r\n        val displayMetrics = context?.resources?.displayMetrics ?: return\r\n        val height = binding.resultDownloadCard.height\r\n        val total = displayMetrics.heightPixels - height\r\n\r\n        binding.resultNovelHolder.apply {\r\n            setPadding(\r\n                paddingLeft,\r\n                paddingTop,", "choices": [{"text": "                total\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/189", "ground_truth": "                paddingRight,\r\n                maxOf(0, total)\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultFragment.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.BookDownloader2\nimport androidx.lifecycle.viewModelScope\nfun readEpub() = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r\n            addToHistory()\r\n            BookDownloader2.readEpub(\r\n                loadId,\r\n                downloadState.value?.progress ?: return@launch,\r\n                load.author,", "choices": [{"text": "\n                downloadState.value?.error?: return@launch,\r\n                downloadState.value?.success?: return@launch\r\n            )\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/193", "ground_truth": "                load.name,\r\n                apiName\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.RESULT_BOOKMARK_STATE\nimport com.lagradost.quicknovel.RESULT_BOOKMARK\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport androidx.lifecycle.viewModelScope\nfun bookmark(state: Int) = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r\n            setKey(\r\n                RESULT_BOOKMARK_STATE, loadId.toString(), state\r\n            )", "choices": [{"text": "\n        }\r\n        if (!hasLoaded) return@launch\r\n        setKey(\r\n            RESULT_BOOKMARK, loadId.toString(), state\r\n        )\r\n    }"}], "metadata": {"task_id": "QuickNovel/196", "ground_truth": "            updateBookmarkData()\r\n        }\r\n\r\n        readState.postValue(ReadType.fromSpinner(state))\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "import com.lagradost.quicknovel.ui.ReadType\nimport com.lagradost.quicknovel.RESULT_BOOKMARK_STATE\nimport com.lagradost.quicknovel.RESULT_BOOKMARK\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.DataStore.getKey\nimport com.lagradost.quicknovel.DOWNLOAD_EPUB_LAST_ACCESS\nimport com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nprivate fun setState(tid: Int) {\r\n        loadId = tid\r\n\r\n        readState.postValue(\r\n            ReadType.fromSpinner(\r\n                getKey(\r\n                    RESULT_BOOKMARK_STATE, tid.toString()\r\n                )\r\n            )\r\n        )\r\n\r\n        setKey(\r\n            DOWNLOAD_EPUB_LAST_ACCESS, tid.toString(), System.currentTimeMillis()\r\n        )\r\n\r\n        updateBookmarkData()", "choices": [{"text": "\n        updateBookmarkData()\r\n    }\r\n\r\n    private void updateBookmarkData() {\r\n        if (loadId == 0) {\r\n            return\r\n        }\r\n\r\n        if (loadId == 1) {\r\n            return\r\n        }\r\n\r\n        if (loadId == 2) {\r\n            return\r\n        }\r\n\r\n        if (loadId == 3) {\r\n            return\r\n        }\r\n\r\n        if (loadId == 4) {\r\n            return\r\n        }\r\n\r"}], "metadata": {"task_id": "QuickNovel/202", "ground_truth": "        hasLoaded = true\r\n\r\n        // insert a download progress if not found\r\n        insertZeroData()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "import android.text.Layout\nfun Layout.getLineTopWithoutPadding(line: Int): Int {\r\n    var lineTop = getLineTop(line)", "choices": [{"text": "\n    if (lineTop < 0) {\r\n        lineTop = 0\r\n    }\r\n    return lineTop\r\n}"}], "metadata": {"task_id": "QuickNovel/205", "ground_truth": "    if (line == 0) {\r\n        lineTop -= topPadding\r\n    }\r\n    return lineTop\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\roundedbg\\LayoutExtensions.kt"}}
{"prompt": "import android.text.Layout\nfun Layout.getLineBottomWithoutPadding(line: Int): Int {\r\n    var lineBottom = getLineBottomWithoutSpacing(line)", "choices": [{"text": "\n    if (lineBottom < 0) {\r\n        lineBottom = 0\r\n    }\r\n    return lineBottom\r\n}"}], "metadata": {"task_id": "QuickNovel/206", "ground_truth": "    if (line == lineCount - 1) {\r\n        lineBottom -= bottomPadding\r\n    }\r\n    return lineBottom\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\roundedbg\\LayoutExtensions.kt"}}
{"prompt": "import com.lagradost.quicknovel.CommonActivity.activity\nimport android.view.WindowManager\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r\n        activity?.window?.setSoftInputMode(\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE", "choices": [{"text": "\n        );\r\n        activity?.window?.setSoftInputMode(\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN\r\n        );\r\n        return super.onCreateView(inflater, container, savedInstanceState);\r\n    }"}], "metadata": {"task_id": "QuickNovel/217", "ground_truth": "        )\r\n\r\n        binding = FragmentSearchBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\search\\SearchFragment.kt"}}
{"prompt": "import androidx.preference.PreferenceFragmentCompat\nimport androidx.preference.Preference\nprivate fun PreferenceFragmentCompat?.getPref(id: Int): Preference? {\r\n        if (this == null) return null\r\n\r\n        return try {\r\n            findPreference(getString(id))", "choices": [{"text": "\n        } catch (e) {\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/220", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "import android.content.Context\nfun asStringNull(context: Context?): String? {\r\n        try {\r\n            return asString(context ?: return null)\r\n        } catch (e: Exception) {", "choices": [{"text": "\n            return asString(context?: null)\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/236", "ground_truth": "            Log.e(TAG, \"Got invalid data from $this\")\r\n            logError(e)\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.UIHelper.setImage\nimport android.widget.ImageView\nfun ImageView?.setImage(value: UiImage?, fadeIn: Boolean = true) {\r\n    when (value) {\r\n        is UiImage.Image -> setImageImage(value, fadeIn)\r\n        is UiImage.Drawable -> setImageDrawable(value)", "choices": [{"text": "\n        is UiImage.Drawable -> setImageDrawable(null)\r\n    } else {\r\n        is null -> setImageDrawable(null)\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/237", "ground_truth": "        null -> {\r\n            this?.isVisible = false\r\n        }\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "import androidx.annotation.DrawableRes\n\r\n@JvmName(\"imgNull\")\r\nfun img(\r\n    url: String?,\r\n    headers: Map<String, String>? = null,\r\n    @DrawableRes errorDrawable: Int? = null", "choices": [{"text": "\n) {\r\n    if (url == null) {\r\n        throw new NullPointerException(\"url\");\r\n    }\r\n    if (headers == null) {\r\n        throw new NullPointerException(\"headers\");\r\n    }\r\n    if (errorDrawable == null) {\r\n        throw new NullPointerException(\"errorDrawable\");\r\n    }\r\n    if (url.length() == 0) {\r\n        throw new NullPointerException(\"url\");\r\n    }\r\n    if (headers.size() == 0) {\r\n        throw new NullPointerException(\"headers\");\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/240", "ground_truth": "): UiImage? {\r\n    if (url.isNullOrBlank()) return null\r\n    return UiImage.Image(url, headers, errorDrawable)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "import androidx.core.view.isVisible\nimport android.widget.TextView\nfun TextView?.setText(text: UiText?) {\r\n    if (this == null) return\r\n    if (text == null) {\r\n        this.isVisible = false\r\n    } else {\r\n        val str = text.asStringNull(context)?.let {\r\n            if (this.maxLines == 1) {\r\n                it.replace(\"\\n\", \" \")\r\n            } else {\r\n                it\r\n            }\r\n        }", "choices": [{"text": "\n    if (text == null) {\r\n        this.isVisible = true\r\n    } else {\r\n        this.isVisible = false\r\n    }\r\n}"}], "metadata": {"task_id": "QuickNovel/242", "ground_truth": "\r\n        this.isGone = str.isNullOrBlank()\r\n        this.text = str\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "import com.lagradost.quicknovel.MainAPI\nval apis Array<MainAPI>\nfun getApiFromNameNull(apiName: String?): MainAPI? {\r\n            for (api in apis) {", "choices": [{"text": "\n                if (apiName.equals(api.getName())) {\r\n                    return api;\r\n                }\r\n            }\r\n            return null;\r\n        }"}], "metadata": {"task_id": "QuickNovel/244", "ground_truth": "                if (apiName == api.name)\r\n                    return api\r\n            }\r\n            return null\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Apis.kt"}}
{"prompt": "import com.lagradost.quicknovel.R\nimport androidx.preference.PreferenceManager\nimport android.content.Context\nfun Context.getApiProviderLangSettings(): HashSet<String> {\r\n            val settingsManager = PreferenceManager.getDefaultSharedPreferences(this)\r\n            val hashSet = HashSet<String>()\r\n            hashSet.add(\"en\") // def is only en\r\n            val list = settingsManager.getStringSet(\r\n                this.getString(R.string.provider_lang_key),\r\n                hashSet.toMutableSet()", "choices": [{"text": "\n            )\r\n            if (list!= null) {\r\n                return list.toArray(new String[list.size()])\r\n            } else {\r\n                return null\r\n            }\r\n        }"}], "metadata": {"task_id": "QuickNovel/247", "ground_truth": "            )\r\n\r\n            if (list.isNullOrEmpty()) return hashSet\r\n            return list.toHashSet()\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Apis.kt"}}
{"prompt": "import android.content.Context\nprivate fun <T> Context.restoreMap(\r\n        map: Map<String, T>?,\r\n        isEditingAppSettings: Boolean = false", "choices": [{"text": "\n    ) {\r\n        if (map == null) {\r\n            return null;\r\n        }\r\n\r\n        if (isEditingAppSettings) {\r\n            return map;\r\n        } else {\r\n            return null;\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/248", "ground_truth": "    ) {\r\n        map?.forEach {\r\n            setKeyRaw(it.key, it.value, isEditingAppSettings)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\BackupUtils.kt"}}
{"prompt": "fun <T> T.ioSafe(work: suspend (CoroutineScope.(T) -> Unit)): Job {\r\n        val value = this", "choices": [{"text": "\n        if (value == null) {\r\n            return null\r\n        } else {\r\n            return value\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/250", "ground_truth": "\r\n        return CoroutineScope(Dispatchers.IO).launchSafe {\r\n            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "suspend fun <T, V> V.ioWorkSafe(work: suspend (CoroutineScope.(V) -> T)): T? {\r\n        val value = this\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                work(value)\r\n            } catch (e: Exception) {", "choices": [{"text": "\n                throw new RuntimeException(e)\r\n            }\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/251", "ground_truth": "                logError(e)\r\n                null\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "suspend fun <T, V> V.ioWork(work: suspend (CoroutineScope.(V) -> T)): T {", "choices": [{"text": "\n    if (work == null) {\n        return null;\n    }\n    return work.apply(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,"}], "metadata": {"task_id": "QuickNovel/252", "ground_truth": "        val value = this\r\n        return withContext(Dispatchers.IO) {\r\n            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "suspend fun <T, V> V.mainWork(work: suspend (CoroutineScope.(V) -> T)): T {", "choices": [{"text": "\n    if (work == null) {\n        return null;\n    }\n    if (work.getClass()!= V.class) {\n        return null;\n    }\n    return (V) work;\n}"}], "metadata": {"task_id": "QuickNovel/253", "ground_truth": "        val value = this\r\n        return withContext(Dispatchers.Main) {\r\n            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "fun runOnMainThread(work: (() -> Unit)) {", "choices": [{"text": "\n    if (isMainThread()) {\n        return true;\n    }\n    if (isMainThread()) {\n        return false;\n    }\n    if (isMainThread()) {\n        return true;\n    }\n    if (isMainThread()) {\n        return false;\n    }\n    return false;\n}"}], "metadata": {"task_id": "QuickNovel/254", "ground_truth": "        val mainHandler = Handler(Looper.getMainLooper())\r\n        mainHandler.post {\r\n            work()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "import kotlin.collections.ArrayList\nimport java.util.concurrent.Executors\nimport java.util.concurrent.ExecutorService\nimport java.util.*\nfun <T, R> Iterable<T>.pmap(\r\n    numThreads: Int = maxOf(Runtime.getRuntime().availableProcessors() - 2, 1),\r\n    exec: ExecutorService = Executors.newFixedThreadPool(numThreads),\r\n    transform: (T) -> R,\r\n): List<R> {\r\n\r\n    // default size is just an inlined version of kotlin.collections.collectionSizeOrDefault\r\n    val defaultSize = if (this is Collection<*>) this.size else 10\r\n    val destination = Collections.synchronizedList(ArrayList<R>(defaultSize))\r\n\r\n    for (item in this) {\r\n        exec.submit { destination.add(transform(item)) }\r\n    }", "choices": [{"text": "        return destination\r\n    }\r\n    return Collections.unmodifiableList(destination)\r\n}"}], "metadata": {"task_id": "QuickNovel/256", "ground_truth": "    exec.shutdown()\r\n    exec.awaitTermination(1, TimeUnit.DAYS)\r\n\r\n    return ArrayList<R>(destination)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\ParCollections.kt"}}
{"prompt": "import com.lagradost.quicknovel.R\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.content.Context\nimport android.app.Dialog\nfun Context.showBottomDialog(\r\n        items: List<String>,\r\n        selectedIndex: Int,\r\n        name: String,\r\n        showApply: Boolean,\r\n        dismissCallback: () -> Unit,\r\n        callback: (Int) -> Unit,\r\n    ) {\r\n        val builder =\r\n            BottomSheetDialog(this)\r\n        builder.setContentView(R.layout.bottom_selection_dialog)\r\n\r\n        builder.show()\r\n        showDialog(\r\n            builder,\r\n            items,\r\n            listOf(selectedIndex),\r\n            name,\r\n            showApply,", "choices": [{"text": "            dismissCallback,\r\n            callback,\r\n        )\r\n    }"}], "metadata": {"task_id": "QuickNovel/264", "ground_truth": "            false,\r\n            { callback.invoke(it.first()) },\r\n            dismissCallback\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SingleSelectionHelper.kt"}}
{"prompt": "fun fromLanguageToTwoLetters(input: String): String? {\r\n        for (lang in languages) {\r\n            if (lang.languageName == input || lang.nativeName == input) {", "choices": [{"text": "\n                return lang.nativeName;\r\n            }\r\n        }\r\n        return null;\r\n    }"}], "metadata": {"task_id": "QuickNovel/265", "ground_truth": "                return lang.ISO_639_1\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "fun fromTwoLettersToLanguage(input: String): String? {\r\n        if (input.length != 2) return null\r\n        val comparison = input.lowercase(Locale.ROOT)\r\n        for (lang in languages) {\r\n            if (lang.ISO_639_1 == comparison) {", "choices": [{"text": "\n                return lang.ISO_639_2\r\n            }\r\n        }\r\n        return null\r\n    }"}], "metadata": {"task_id": "QuickNovel/266", "ground_truth": "                return lang.languageName\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "fun fromLanguageToThreeLetters(input: String): String? {\r\n        for (lang in languages) {\r\n            if (lang.languageName == input || lang.nativeName == input) {", "choices": [{"text": "\n                return lang.nativeName;\r\n            }\r\n        }\r\n        return null;\r\n    }"}], "metadata": {"task_id": "QuickNovel/267", "ground_truth": "                return lang.ISO_639_2_T\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "import com.lagradost.quicknovel.R\nimport androidx.core.text.HtmlCompat\nimport android.text.Spanned\nprivate fun getHtmlText(text: String): Spanned {\r\n        return try {\r\n            // I have no idea if this can throw any error, but I dont want to try\r\n            HtmlCompat.fromHtml(\r\n                text, HtmlCompat.FROM_HTML_MODE_LEGACY\r\n            )", "choices": [{"text": "\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/268", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            text.toSpanned()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import com.lagradost.quicknovel.util.UIHelper.setImage\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.ui.UiImage\nimport androidx.annotation.DrawableRes\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun ImageView?.setImage(\r\n        url: String?,\r\n        headers: Map<String, String>? = null,\r\n        @DrawableRes\r\n        errorImageDrawable: Int? = null,\r\n        fadeIn: Boolean = true,\r\n        radius: Int = 0,\r\n        sample: Int = 3,\r\n        //colorCallback: ((Palette) -> Unit)? = null\r\n    ): Boolean {\r\n        if (url.isNullOrBlank()) return false\r\n        this.setImage(\r\n            UiImage.Image(url, headers, errorImageDrawable),\r\n            errorImageDrawable,\r\n            fadeIn,\r\n            radius,", "choices": [{"text": "            sample\r\n        )\r\n        return true\r\n    }"}], "metadata": {"task_id": "QuickNovel/275", "ground_truth": "            sample,\r\n            //colorCallback\r\n        )\r\n        return true\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import java.io.File\nprivate fun getAllFonts(): Array<File> {\r\n        return try {\r\n            val path = \"/system/fonts\"\r\n            val file = File(path)\r\n            file.listFiles() ?: emptyArray()", "choices": [{"text": "\n            return file.listFiles()\r\n        } catch (e) {\r\n            return emptyArray()\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/276", "ground_truth": "        } catch (t: Throwable) {\r\n            logError(t)\r\n            emptyArray()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import android.view.View\nimport android.app.Activity\nfun Activity.fixPaddingStatusbar(v: View) {\r\n        v.setPadding(\r\n            v.paddingLeft,", "choices": [{"text": "\n            v.paddingTop,\r\n            v.paddingRight,\r\n            v.paddingBottom,\r\n            v.paddingLeft,\r\n            v.paddingRight,\r\n            v.paddingBottom,\r\n            v.paddingLeft,\r\n            v.paddingRight,\r\n            v.paddingTop,\r\n            v.paddingBottom,\r\n            v.paddingLeft,\r\n            v.paddingRight,\r\n            v.paddingTop,\r\n            v.paddingBottom,\r\n            v.paddingLeft,\r\n            v.paddingRight,\r"}], "metadata": {"task_id": "QuickNovel/278", "ground_truth": "            v.paddingTop + getStatusBarHeight(),\r\n            v.paddingRight,\r\n            v.paddingBottom\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import kotlin.math.roundToInt\nimport com.lagradost.quicknovel.R\nimport androidx.core.graphics.alpha\nimport androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.graphics.Color\nimport android.content.Context\n @ColorInt\r\n    fun Context.getResourceColor(@AttrRes resource: Int, alphaFactor: Float = 1f): Int {\r\n        val typedArray = obtainStyledAttributes(intArrayOf(resource))\r\n        val color = typedArray.getColor(0, 0)\r\n        typedArray.recycle()\r\n\r\n        if (alphaFactor < 1f) {\r\n            val alpha = (color.alpha * alphaFactor).roundToInt()", "choices": [{"text": "\n        } else {\r\n            val alpha = (color.alpha * alphaFactor).roundToInt()\r\n        }\r\n\r\n        return alpha\r\n    }"}], "metadata": {"task_id": "QuickNovel/279", "ground_truth": "            return Color.argb(alpha, color.red, color.green, color.blue)\r\n        }\r\n\r\n        return color\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import com.lagradost.quicknovel.R\nimport androidx.appcompat.widget.PopupMenu\nimport androidx.annotation.MenuRes\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.view.Gravity\ninline fun View.popupMenu(\r\n        @MenuRes menuRes: Int,\r\n        noinline initMenu: (Menu.() -> Unit)? = null,\r\n        noinline onMenuItemClick: MenuItem.() -> Unit,\r\n    ): PopupMenu {\r\n        val popup = PopupMenu(context, this, Gravity.NO_GRAVITY, R.attr.actionOverflowMenuStyle, 0)\r\n        popup.menuInflater.inflate(menuRes, popup.menu)\r\n\r\n        if (initMenu != null) {\r\n            popup.menu.initMenu()\r\n        }\r\n        popup.setOnMenuItemClickListener {\r\n            it.onMenuItemClick()\r\n            true", "choices": [{"text": "\n        }\r\n        return popup\r\n    }"}], "metadata": {"task_id": "QuickNovel/281", "ground_truth": "        }\r\n\r\n        popup.show()\r\n        return popup\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import androidx.fragment.app.Fragment\nfun Fragment.hideKeyboard() {\r\n        view.let {", "choices": [{"text": "\n            keyboard.hideKeyboard()\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/282", "ground_truth": "            if (it != null) {\r\n                activity?.hideKeyboard(it)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onFocusSearchFailed(\r\n        focused: View,\r\n        focusDirection: Int,\r\n        recycler: RecyclerView.Recycler,\r\n        state: RecyclerView.State\r\n    ): View? {\r\n        return try {\r\n            val fromPos = getPosition(focused)\r\n            println(\"Search failed $fromPos\")\r\n            val nextPos = getNextViewPos(fromPos, focusDirection)", "choices": [{"text": "\n            println(\"Search failed $nextPos\")\r\n        } catch (e) {\r\n            println(\"Search failed $e\")\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/284", "ground_truth": "            findViewByPosition(nextPos)\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "import android.view.View\noverride fun onInterceptFocusSearch(focused: View, direction: Int): View? {\r\n        return try {\r\n            val fromPos = getPosition(focused)\r\n            val nextPos = getNextViewPos(fromPos, direction)", "choices": [{"text": "\n            if (nextPos!= null) {\r\n                return nextPos\r\n            } else {\r\n                return null\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/286", "ground_truth": "            findViewByPosition(nextPos)\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "import android.view.View\nprivate fun getNextViewPos(fromPos: Int, direction: Int): Int {\r\n        val offset = calcOffsetToNextView(direction)\r\n\r\n        if (hitBorder(fromPos, offset)) {", "choices": [{"text": "\n            return fromPos + offset\r\n        } else {\r\n            return fromPos\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/287", "ground_truth": "            return fromPos\r\n        }\r\n\r\n        return fromPos + offset\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "import kotlin.math.abs\nprivate fun hitBorder(from: Int, offset: Int): Boolean {\r\n        val spanCount = spanCount\r\n\r\n        return if (abs(offset) == 1) {\r\n            val spanIndex = from % spanCount\r\n            val newSpanIndex = spanIndex + offset\r\n            newSpanIndex < 0 || newSpanIndex >= spanCount", "choices": [{"text": "\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }"}], "metadata": {"task_id": "QuickNovel/288", "ground_truth": "        } else {\r\n            val newPos = from + offset\r\n            newPos in spanCount..-1\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\n@Override\r\npublic void onColorReady(int color) {", "choices": [{"text": "(int color) {\r\n    super.onColorReady(color);\r\n    mColor = color;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/4", "ground_truth": "    if (usePalette)\r\n        setColors(color, holder);\r\n    else\r\n        setColors(getDefaultFooterColor(), holder);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\album\\AlbumAdapter.java"}}
{"prompt": "@Override\r\npublic void onColorReady(int color) {", "choices": [{"text": "(int color) {\r\n\t\tthis.color = color;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int getColor() {\r\n\t\treturn color;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void setColor(int color) {\r\n\t\tthis.color = color;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void setColor(int color, int alpha) {\r\n\t\tthis.color = color;\r\n\t\tthis.alpha = alpha;\r\n\t}\r\n\r\n\t@"}], "metadata": {"task_id": "VinylMusicPlayer/12", "ground_truth": "    if (usePalette)\r\n        setColors(color, holder);\r\n    else\r\n        setColors(getAlbumArtistFooterColor(), holder);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\album\\HorizontalAlbumAdapter.java"}}
{"prompt": "import androidx.fragment.app.Fragment\n/**\r\n * Only the latest passed {@link AlbumCoverFragment.ColorReceiver} is guaranteed to receive a response\r\n */\r\npublic void receiveColor(AlbumCoverFragment.ColorReceiver colorReceiver, int position) {\r\n    AlbumCoverFragment fragment = (AlbumCoverFragment) getFragment(position);\r\n    if (fragment != null) {\r\n        currentColorReceiver = null;\r\n        currentColorReceiverPosition = -1;\r\n        fragment.receiveColor(colorReceiver, position);", "choices": [{"text": "\n    } else {\r\n        currentColorReceiver = null;\r\n        currentColorReceiverPosition = -1;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/14", "ground_truth": "    } else {\r\n        currentColorReceiver = colorReceiver;\r\n        currentColorReceiverPosition = position;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "private static final String SONG_ARG = \"song\";\nprivate Song song;\nImageView albumCover;\n @Override", "choices": [{"text": "\n    public Song getSong() {\n        return song;\n    }\n\n    @Override\n    public void setSong(Song song) {\n        this.song = song;\n    }\n\n    @Override\n    public ImageView getAlbumCover() {\n        return albumCover;\n    }\n\n    @Override\n    public void setAlbumCover(ImageView albumCover) {\n        this.albumCover = albumCover;\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/19", "ground_truth": "public void onDestroyView() {\r\n    super.onDestroyView();\r\n    colorReceiver = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.glide.VinylGlideExtension\nimport com.poupa.vinylmusicplayer.glide.VinylColoredTarget\nimport com.poupa.vinylmusicplayer.glide.GlideApp\nprivate void loadAlbumCover() {\r\n    GlideApp.with(this).asBitmapPalette().load(VinylGlideExtension.getSongModel(song)).transition(VinylGlideExtension.getDefaultTransition()).songOptions(song).into(new VinylColoredTarget(albumCover) {\r\n\r\n        @Override", "choices": [{"text": "\n        public void onClick() {\r\n            loadAlbumCover();\r\n        }\r\n    });\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/20", "ground_truth": "        public void onColorReady(int color) {\r\n            setColor(color);\r\n        }\r\n    });\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "private boolean isColorReady;\nprivate int color;\nprivate ColorReceiver colorReceiver;\n void setColor(int color) {\r\n    this.color = color;\r\n    isColorReady = true;", "choices": [{"text": "\n    colorReceiver = new ColorReceiver();\r\n    colorReceiver.setColor(color);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/21", "ground_truth": "    if (colorReceiver != null) {\r\n        colorReceiver.onColorReady(color, request);\r\n        colorReceiver = null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "public void receiveColor(ColorReceiver colorReceiver, int request) {\r\n    if (isColorReady) {\r\n        colorReceiver.onColorReady(color, request);", "choices": [{"text": "(color, request);\r\n    } else {\r\n        colorReceiver.onColorError(color, request);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/22", "ground_truth": "    } else {\r\n        this.colorReceiver = colorReceiver;\r\n        this.request = request;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\AlbumCoverPagerAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\n@Override\r\npublic void onColorReady(int color) {", "choices": [{"text": "(int color) {\r\n    super.onColorReady(color);\r\n    mColor = color;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/27", "ground_truth": "    if (usePalette)\r\n        setColors(color, holder);\r\n    else\r\n        setColors(getDefaultFooterColor(), holder);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\artist\\ArtistAdapter.java"}}
{"prompt": "protected boolean toggleChecked(final int position) {\r\n    final I identifier = getIdentifier(position);\r\n    if (identifier == null) {\r\n        return false;\r\n    }\r\n    if (checked.containsKey(position)) {\r\n        checked.remove(position);\r\n    } else {\r\n        checked.put(position, identifier);", "choices": [{"text": "        checked.put(position, identifier);\r\n    }\r\n    return true;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/32", "ground_truth": "    }\r\n    notifyItemChanged(position);\r\n    updateCab();\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\base\\AbsMultiSelectAdapter.java"}}
{"prompt": "private void checkAll() {\r\n    checked.clear();\r\n    final int itemCount = getItemCount();\r\n    for (int i = 0; i < itemCount; i++) {\r\n        final I identifier = getIdentifier(i);\r\n        if (identifier != null) {\r\n            checked.put(i, identifier);", "choices": [{"text": "\n        } else {\r\n            checked.put(i, null);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/33", "ground_truth": "        }\r\n    }\r\n    notifyDataSetChanged();\r\n    updateCab();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\base\\AbsMultiSelectAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onCabSelection(@NonNull final MenuItem menuItem) {\r\n    if (menuItem.getItemId() == R.id.action_multi_select_adapter_check_all) {\r\n        checkAll();\r\n    } else {\r\n        onMultipleItemAction(menuItem, checked);", "choices": [{"text": "\n        return true;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/36", "ground_truth": "        AttachedCabKt.destroy(cab);\r\n        clearChecked();\r\n    }\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\base\\AbsMultiSelectAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.CategoryInfo\nprivate boolean isLastCheckedCategory(CategoryInfo categoryInfo) {\r\n    if (categoryInfo.visible) {\r\n        for (CategoryInfo c : categoryInfos) {\r\n            if (c != categoryInfo && c.visible)", "choices": [{"text": "\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/42", "ground_truth": "                return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\CategoryInfoAdapter.java"}}
{"prompt": "import java.util.List\nimport androidx.annotation.NonNull\n@Override\r\npublic int getItemPosition(@NonNull Object fragment) {\r\n    for (int i = 0, size = mHolderList.size(); i < size; i++) {\r\n        Holder holder = mHolderList.get(i);\r\n        if (holder.mClassName.equals(fragment.getClass().getName())) {", "choices": [{"text": "\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/48", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return POSITION_NONE;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\MusicLibraryPagerAdapter.java"}}
{"prompt": "@Override\r\nprotected void onPostExecute(String string) {\r\n    super.onPostExecute(string);", "choices": [{"text": "_postExecute(string);\r\n    Toast toast = Toast.makeText(this, getString(R.string.success), Toast.LENGTH_SHORT).show();\r\n    Toast.makeText(this, getString(R.string.error), Toast.LENGTH_SHORT).show();\r\n    Toast.makeText(this, getString(R.string.cancel), Toast.LENGTH_SHORT).show();\r\n    Toast.makeText(this, getString(R.string.cancel_cancel), Toast.LENGTH_SHORT).show();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/57", "ground_truth": "    Context context = getContext();\r\n    if (context != null) {\r\n        SafeToast.show(context, string);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\PlaylistAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.model.Album\nimport android.view.View\n@Override\r\npublic int getItemViewType(int position) {\r\n    if (dataSet.get(position) instanceof Album)\r\n        return ALBUM;\r\n    if (dataSet.get(position) instanceof Artist)", "choices": [{"text": "\n        return ArtIST;\r\n    if (dataSet.get(position) instanceof Video)\r\n        return VIDEO;\r\n    if (dataSet.get(position) instanceof Audio)\r\n        return AUDIO;\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/62", "ground_truth": "        return ARTIST;\r\n    if (dataSet.get(position) instanceof Song)\r\n        return SONG;\r\n    return HEADER;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\SearchAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.core.util.Pair\nimport android.view.View\nimport android.view.MenuItem\nprotected boolean onSongMenuItemClick(MenuItem item, long albumId) {\r\n    if ((image != null) && (image.getVisibility() == View.VISIBLE) && (item.getItemId() == R.id.action_go_to_album)) {\r\n        Pair[] albumPairs = new Pair[] { Pair.create(image, activity.getResources().getString(R.string.transition_album_art)) };", "choices": [{"text": "\n        if (albumPairs.length == 1) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/64", "ground_truth": "        NavigationUtil.goToAlbum(activity, albumId, albumPairs);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\SearchAdapter.java"}}
{"prompt": "@Override\r\npublic long getItemId(final int position) {\r\n    // Shifting by -1, since the very first item is the OFFSET_ITEM\r\n    final int adjustedPosition = position - 1;", "choices": [{"text": "\n    if (adjustedPosition >= 0) {\r\n        return adjustedPosition;\r\n    } else {\r\n        return 0;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/66", "ground_truth": "    if (adjustedPosition < 0) {\r\n        return OFFSET_ITEM_ID;\r\n    }\r\n    return super.getItemId(adjustedPosition);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\AbsOffsetSongAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\n@Nullable\r\n@Override\r\nprotected Song getIdentifier(int position) {\r\n    // Shifting by -1, since the very first item is the OFFSET_ITEM\r\n    final int adjustedPosition = position - 1;", "choices": [{"text": "\n    if (adjustedPosition < 0) {\r\n        return null;\r\n    } else {\r\n        return getSong(adjustedPosition);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/67", "ground_truth": "    if (adjustedPosition < 0) {\r\n        return null;\r\n    }\r\n    return super.getIdentifier(adjustedPosition);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\AbsOffsetSongAdapter.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\n@Override\r\npublic String getSectionName(int position) {", "choices": [{"text": "\n    return mSections.get(position);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/69", "ground_truth": "    position--;\r\n    if (position < 0)\r\n        return \"\";\r\n    return super.getSectionName(position);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\AbsOffsetSongAdapter.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\npublic void swapDataSet(ArrayList<Song> dataSet) {", "choices": [{"text": "\n    if (dataSet == null) {\n        return;\n    }\n    for (int i = 0; i < dataSet.size(); i++) {\n        dataSet.get(i).swap(dataSet.get(i - 1).swap(dataSet.get(i - 2).swap(dataSet.get(i - 3).swap(dataSet.get(i - 4).swap(dataSet.get(i - 5).swap(dataSet.get(i - 6).swap(dataSet.get(i - 7).swap(dataSet.get(i"}], "metadata": {"task_id": "VinylMusicPlayer/75", "ground_truth": "    this.dataSet = dataSet;\r\n    clear();\r\n    addAll(dataSet);\r\n    notifyDataSetChanged();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\ArtistSongAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PlayingSongDecorationUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.misc.queue.IndexedSong\nimport com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(@NonNull SongAdapter.ViewHolder holder, int position) {\r\n    super.onBindViewHolder(holder, position);\r\n    PlayingSongDecorationUtil.decorate(this, holder, MusicPlayerRemote.getIndexedSongAt(position), activity);\r\n    if (holder.imageText != null) {\r\n        holder.imageText.setText(String.valueOf(position - current));", "choices": [{"text": "\n    } else {\r\n        holder.imageText.setVisibility(View.GONE);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/86", "ground_truth": "    }\r\n    if (holder.getItemViewType() == HISTORY) {\r\n        setAlpha(holder);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\PlayingQueueAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.view.View\n@Override\r\npublic int getItemViewType(int position) {\r\n    if (position < current) {\r\n        return HISTORY;", "choices": [{"text": "\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/87", "ground_truth": "    } else if (position > current) {\r\n        return UP_NEXT;\r\n    }\r\n    return CURRENT;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\PlayingQueueAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport android.view.View\nprotected void setAlpha(SongAdapter.ViewHolder holder) {\r\n    final float alpha = 0.5f;\r\n    if (holder.image != null) {\r\n        holder.image.setAlpha(alpha);\r\n    }\r\n    if (holder.title != null) {\r\n        holder.title.setAlpha(alpha);\r\n    }\r\n    if (holder.text != null) {\r\n        holder.text.setAlpha(alpha);\r\n    }\r\n    if (holder.imageText != null) {\r\n        holder.imageText.setAlpha(alpha);", "choices": [{"text": "\n    holder.image.setAlpha(alpha);\r\n    holder.title.setAlpha(alpha);\r\n    holder.text.setAlpha(alpha);\r\n    holder.imageText.setAlpha(alpha);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/90", "ground_truth": "    }\r\n    if (holder.paletteColorContainer != null) {\r\n        holder.paletteColorContainer.setAlpha(alpha);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\PlayingQueueAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.appcompat.app.AppCompatActivity\nimport android.view.View\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.ColorDrawable\nimport android.graphics.Color\nprivate static Integer getBackgroundColor(AppCompatActivity activity) {\r\n    // cardPlayerFragment\r\n    View view = activity.findViewById(R.id.color_background);\r\n    if (view == null) {\r\n        // flatPlayerFragment\r\n        view = activity.findViewById(R.id.player_status_bar);\r\n    }\r\n    Drawable background = view.getBackground();\r\n    if (background instanceof ColorDrawable) {", "choices": [{"text": "\n        return ((ColorDrawable) background).getColor();\r\n    } else {\r\n        return Color.TRANSPARENT;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/95", "ground_truth": "        return ((ColorDrawable) background).getColor();\r\n    } else {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\PlayingQueueAdapter.java"}}
{"prompt": "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (getItemViewType() == OFFSET_ITEM) {", "choices": [{"text": "_ITEM.setVisibility(View.GONE);\r\n    else {\r\n        ItemViewType type = getItemViewType();\r\n        if (type == OFFSET_ITEM) {\r\n            v.setVisibility(View.VISIBLE);\r\n        } else {\r\n            v.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/97", "ground_truth": "        MusicPlayerRemote.openAndShuffleQueue(dataSet, true);\r\n        return;\r\n    }\r\n    super.onClick(v);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\ShuffleButtonSongAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.core.util.Pair\nimport android.view.View\nimport android.view.MenuItem\nprotected boolean onSongMenuItemClick(MenuItem item) {\r\n    if ((image != null) && (image.getVisibility() == View.VISIBLE) && (item.getItemId() == R.id.action_go_to_album)) {\r\n        Pair<View, String>[] albumPairs = new Pair[] { Pair.create(image, activity.getResources().getString(R.string.transition_album_art)) };", "choices": [{"text": "\n        if (albumPairs.length == 1) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/105", "ground_truth": "        NavigationUtil.goToAlbum(activity, getSong().albumId, albumPairs);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\song\\SongAdapter.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.view.View\n@Override\r\npublic void onClick(final View v) {\r\n    final int position = getAdapterPosition();\r\n    if (isPositionInRange(position)) {\r\n        if (isInQuickSelectMode()) {\r\n            toggleChecked(position);\r\n        } else {\r\n            if (callbacks != null) {", "choices": [{"text": "\n                callbacks.onClick(position);\r\n            }\r\n        }\r\n    } else {\r\n        if (callbacks!= null) {\r\n            callbacks.onClick(position);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/112", "ground_truth": "                callbacks.onFileSelected(position, dataSet.get(position));\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\adapter\\SongFileAdapter.java"}}
{"prompt": "public static synchronized AppWidgetBig getInstance() {", "choices": [{"text": "\n\t\treturn new AppWidgetBig(this);\n\t}\n\t\n\tpublic AppWidgetBig(Context context) {\n\t\tsuper(context);\n\t}\n\t\n\tpublic AppWidgetBig(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t}\n\t\n\tpublic AppWidgetBig(Context context, AttributeSet attrs, int defStyleAttr) {\n\t\tsuper(context, attrs, defStyleAttr);\n\t}\n\t\n\tpublic AppWidgetBig(Context context, AttributeSet attrs, int defStyleAttr, int defStyle"}], "metadata": {"task_id": "VinylMusicPlayer/120", "ground_truth": "    if (mInstance == null) {\r\n        mInstance = new AppWidgetBig();\r\n    }\r\n    return mInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\AppWidgetBig.java"}}
{"prompt": "public static synchronized AppWidgetCard getInstance() {", "choices": [{"text": "\n\t\treturn new AppWidgetCard(this);\n\t}\n\n\tpublic AppWidgetCard(Context context) {\n\t\tsuper(context);\n\t}\n\n\tpublic AppWidgetCard(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t}\n\n\tpublic AppWidgetCard(Context context, AttributeSet attrs, int defStyle) {\n\t\tsuper(context, attrs, defStyle);\n\t}\n\n\tpublic AppWidgetCard(Context context, AttributeSet attrs, int defStyle, int defStyleRes) {\n\t\tsuper"}], "metadata": {"task_id": "VinylMusicPlayer/122", "ground_truth": "    if (mInstance == null) {\r\n        mInstance = new AppWidgetCard();\r\n    }\r\n    return mInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\AppWidgetCard.java"}}
{"prompt": "public static synchronized AppWidgetClassic getInstance() {", "choices": [{"text": "\n\t\treturn new AppWidgetClassic(this);\n\t}\n\n\tpublic AppWidgetClassic(Context context) {\n\t\tsuper(context);\n\t}\n\n\tpublic AppWidgetClassic(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t}\n\n\tpublic AppWidgetClassic(Context context, AttributeSet attrs, int defStyleAttr) {\n\t\tsuper(context, attrs, defStyleAttr);\n\t}\n\n\tpublic AppWidgetClassic(Context context, AttributeSet attrs, int defStyleAttr, int def"}], "metadata": {"task_id": "VinylMusicPlayer/124", "ground_truth": "    if (mInstance == null) {\r\n        mInstance = new AppWidgetClassic();\r\n    }\r\n    return mInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\AppWidgetClassic.java"}}
{"prompt": "public static synchronized AppWidgetSmall getInstance() {", "choices": [{"text": "\n\t\treturn new AppWidgetSmall(this);\n\t}\n\t\n\tpublic AppWidgetSmall(Context context) {\n\t\tsuper(context);\n\t}\n\t\n\tpublic AppWidgetSmall(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t}\n\t\n\tpublic AppWidgetSmall(Context context, AttributeSet attrs, int defStyleAttr) {\n\t\tsuper(context, attrs, defStyleAttr);\n\t}\n\t\n\tpublic AppWidgetSmall(Context context, AttributeSet attrs, int defStyleAttr, int defStyle"}], "metadata": {"task_id": "VinylMusicPlayer/126", "ground_truth": "    if (mInstance == null) {\r\n        mInstance = new AppWidgetSmall();\r\n    }\r\n    return mInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\AppWidgetSmall.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.core.content.res.ResourcesCompat\nimport android.graphics.drawable.Drawable\nimport android.graphics.Bitmap\nimport android.content.res.Resources\nprotected Drawable getAlbumArtDrawable(final Resources resources, final Bitmap bitmap) {\r\n    Drawable image;\r\n    if (bitmap == null) {\r\n        image = ResourcesCompat.getDrawable(resources, R.drawable.default_album_art, null);", "choices": [{"text": "\n    } else {\r\n        image = ResourcesCompat.getDrawable(resources, R.drawable.default_album_art, bitmap);\r\n    }\r\n    return image;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/133", "ground_truth": "    } else {\r\n        image = new BitmapDrawable(resources, bitmap);\r\n    }\r\n    return image;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\appwidgets\\base\\BaseAppWidget.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.PlaylistsUtil\nimport com.poupa.vinylmusicplayer.model.Song\nprivate static boolean hasDuplicates(long playlistId, ArrayList<Song> songs) {\r\n    for (Song song : songs) {\r\n        if (PlaylistsUtil.doesPlaylistContain(playlistId, song.id)) {", "choices": [{"text": "\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/142", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\AddToPlaylistDialog.java"}}
{"prompt": "import com.google.android.material.bottomsheet.BottomSheetBehavior\nimport android.view.View\nimport android.content.DialogInterface\nimport android.app.Dialog\n@Override\r\npublic void onShow(DialogInterface dialog) {\r\n    com.google.android.material.bottomsheet.BottomSheetDialog d = (com.google.android.material.bottomsheet.BottomSheetDialog) dialog;\r\n    bottomSheet = d.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n    BottomSheetBehavior behaviour = BottomSheetBehavior.from(bottomSheet);\r\n    behaviour.setState(BottomSheetBehavior.STATE_COLLAPSED);", "choices": [{"text": "\n    bottomSheet.setVisibility(View.VISIBLE);\r\n    bottomSheet.setOnClickListener(new View.OnClickListener() {\r\n        @Override\r\n        public void onClick(View v) {\r\n            dismiss();\r\n        }\r\n    });\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/148", "ground_truth": "    behaviour.setDraggable(false);\r\n    for (Runnable code : onBottomSheetCreated) {\r\n        code.run();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\BottomSheetDialog\\BottomSheetDialog.java"}}
{"prompt": "import com.google.android.material.bottomsheet.BottomSheetBehavior\npublic void expand() {\r\n    Runnable code = () -> {\r\n        BottomSheetBehavior behaviour = BottomSheetBehavior.from(bottomSheet);\r\n        if (behaviour.getState() == BottomSheetBehavior.STATE_EXPANDED)\r\n            return;\r\n        behaviour.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n    };", "choices": [{"text": "\n    bottomSheet.expand(code);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/149", "ground_truth": "    if (bottomSheet != null)\r\n        code.run();\r\n    else\r\n        onBottomSheetCreated.add(code);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\BottomSheetDialog\\BottomSheetDialog.java"}}
{"prompt": "import com.google.android.material.bottomsheet.BottomSheetBehavior\npublic void collapse() {\r\n    Runnable code = () -> {\r\n        BottomSheetBehavior behaviour = BottomSheetBehavior.from(bottomSheet);\r\n        if (behaviour.getState() == BottomSheetBehavior.STATE_COLLAPSED)\r\n            return;\r\n        behaviour.setState(BottomSheetBehavior.STATE_COLLAPSED);\r\n    };", "choices": [{"text": "        behaviour.setState(BottomSheetBehavior.STATE_COLLAPSED);\r\n    };\r\n    bottomSheet.post(code);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/150", "ground_truth": "    if (bottomSheet != null)\r\n        code.run();\r\n    else\r\n        onBottomSheetCreated.add(code);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\BottomSheetDialog\\BottomSheetDialog.java"}}
{"prompt": "import androidx.annotation.UiThread\n@Override\r\n@UiThread", "choices": [{"text": "(R.id.activity_main)\r\npublic class MainActivity extends BaseActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/156", "ground_truth": "public ChangelogDialog build() {\r\n    super.build();\r\n    return new ChangelogDialog(this);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\ChangelogDialog.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n@NonNull\r\npublic static CreatePlaylistDialog create(@Nullable Song song) {", "choices": [{"text": "\n    if (song == null) {\r\n        return null;\r\n    }\r\n    return new CreatePlaylistDialog(song);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/158", "ground_truth": "    ArrayList<Song> list = new ArrayList<>();\r\n    if (song != null)\r\n        list.add(song);\r\n    return create(list);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\CreatePlaylistDialog.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport android.net.Uri\nimport android.app.Dialog\n@Override\r\nprotected Void doInBackground(Uri... uris) {\r\n    try {\r\n        DeleteSongsDialogApi19 dialog = this.dialog.get();\r\n        if (dialog != null) {\r\n            dialog.deleteSongs(List.of(dialog.currentSong), List.of(uris[0]));\r\n        }", "choices": [{"text": "\n        return null;\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/165", "ground_truth": "    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\helper\\DeleteSongsDialogApi19.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.SAFUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.fragment.app.FragmentActivity\nimport android.net.Uri\nimport android.app.Dialog\nimport android.app.Activity\n@Override\r\nprotected Void doInBackground(Uri... uris) {\r\n    try {\r\n        DeleteSongsDialogApi19 dialog = this.dialog.get();\r\n        FragmentActivity activity = this.activity.get();\r\n        if (dialog == null || activity == null) {\r\n            return null;\r\n        }\r\n        SAFUtil.saveTreeUri(activity, uris[0]);\r\n        dialog.deleteSongs(dialog.songsToRemove, null);", "choices": [{"text": "\n        return null;\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/166", "ground_truth": "    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\helper\\DeleteSongsDialogApi19.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.SAFUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport android.net.Uri\nimport android.app.Activity\n@Override\r\nprotected Void doInBackground(Uri... uris) {\r\n    try {\r\n        DeleteSongsDialogApi30 fragment = this.fragment.get();\r\n        FragmentActivity activity = this.activity.get();\r\n        if (fragment == null || activity == null) {\r\n            return null;\r\n        }\r\n        SAFUtil.saveTreeUri(activity, uris[0]);\r\n        fragment.deleteSongs(fragment.songsToRemove);", "choices": [{"text": "\n        return null;\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/170", "ground_truth": "    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\helper\\DeleteSongsDialogApi30.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/178", "ground_truth": "public Builder title(@NonNull final CharSequence title) {\r\n    super.title(title);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\MarkdownViewDialog.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/183", "ground_truth": "public void onDismiss(@NonNull DialogInterface dialog) {\r\n    super.onDismiss(dialog);\r\n    timerUpdater.cancel();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\SleepTimerDialog.java"}}
{"prompt": "import com.triggertrap.seekarc.SeekArc\nimport androidx.annotation.NonNull\n@Override\r\npublic void onProgressChanged(@NonNull SeekArc seekArc, int i, boolean b) {\r\n    if (i < 1) {\r\n        seekArc.setProgress(1);\r\n        return;\r\n    }", "choices": [{"text": "\n    seekArc.setProgress(i + 1);\r\n    return;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/185", "ground_truth": "    seekArcProgress = i;\r\n    if (!changingText.get()) {\r\n        updateTimeDisplayTime();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\SleepTimerDialog.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n@NonNull\r\npublic static SongDetailDialog create(@NonNull Song song) {\r\n    SongDetailDialog dialog = new SongDetailDialog();", "choices": [{"text": "\n    dialog.setTitle(song.getName());\r\n    dialog.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            dialog.dismiss();\r\n        }\r\n    });\r\n    dialog.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            dialog.dismiss();\r\n        }\r\n    });\r\n    return dialog;"}], "metadata": {"task_id": "VinylMusicPlayer/188", "ground_truth": "    Bundle args = new Bundle();\r\n    args.putParcelable(\"song\", song);\r\n    dialog.setArguments(args);\r\n    return dialog;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\SongDetailDialog.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.StringRes\nimport androidx.annotation.NonNull\nimport android.text.Html\nHtmlBuilder appendLine(@StringRes int labelStringId, @NonNull final String... texts) {\r\n    append(labelStringId).append(\": \").append(\"<b>\");", "choices": [{"text": "\n    for (final String text : texts) {\r\n        append(text).append(\"</b>\");\r\n    }\r\n    return this;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/191", "ground_truth": "    for (String text : texts) {\r\n        append(text);\r\n    }\r\n    return append(\"</b>\").append(\"<br/>\");\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\dialogs\\SongDetailDialog.java"}}
{"prompt": "import android.database.sqlite.SQLiteDatabase\nsynchronized void clear() {\r\n    try (final SQLiteDatabase db = getWritableDatabase()) {", "choices": [{"text": "\n        db.execSQL(\"DELETE FROM \" + TABLE_NAME);\r\n        db.execSQL(\"DELETE FROM \" + TABLE_NAME + \" WHERE \" + COLUMN_NAME + \" =?\");\r\n        db.execSQL(\"DELETE FROM \" + TABLE_NAME + \" WHERE \" + COLUMN_NAME + \" =?\");\r\n        db.execSQL(\"DELETE FROM \" + TABLE_NAME + \" WHERE \" + COLUMN_NAME + \" =?\");\r\n        db.execSQL(\"DELETE FROM \" + TABLE_NAME + \" WHERE \" + COLUMN_NAME + \" =?\");\r"}], "metadata": {"task_id": "VinylMusicPlayer/194", "ground_truth": "        db.delete(SongColumns.NAME, null, null);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\DB.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\n@NonNull\r\npublic Song getSongByPath(@NonNull final String path) {\r\n    synchronized (cache) {\r\n        Song matchingSong = Song.EMPTY_SONG;\r\n        for (Song song : cache.songsById.values()) {\r\n            if (song.data.equals(path)) {\r\n                matchingSong = song;\r\n                break;", "choices": [{"text": "\n            }\r\n        }\r\n        if (matchingSong!= null) {\r\n            return matchingSong;\r\n        }\r\n    }\r\n    return Song.EMPTY_SONG;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/200", "ground_truth": "            }\r\n        }\r\n        return matchingSong;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.List\nimport java.util.Comparator\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic ArrayList<Song> getAllSongs(@Nullable Comparator<Song> sortOrder) {\r\n    synchronized (cache) {\r\n        // Make a copy here, to avoid error while the caller is iterating on the result\r\n        ArrayList<Song> copy = new ArrayList<>(cache.songsById.values());\r\n        // Perform sort inside the critical section, to avoid data race\r\n        // (artist or album being modified while sorting)\r\n        if (sortOrder != null) {", "choices": [{"text": "\n            copy.sort(sortOrder);\r\n        }\r\n        return copy;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/201", "ground_truth": "            Collections.sort(copy, sortOrder);\r\n        }\r\n        return copy;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import androidx.annotation.Nullable\n@Nullable", "choices": [{"text": "\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-xs-12\">\n                    <div className=\"row\">\n                        <div className=\"col-xs-12\">\n                            <div className=\"row\">\n                                <div className=\"col-xs-12\">\n                                    <div className=\"row\">\n                                        <div className=\"col-xs-12\">\n                                            <div className=\"row\">\n                                                <div className=\"col-xs-12\">\n                                                    <div className=\"row\">\n                                                        <div className"}], "metadata": {"task_id": "VinylMusicPlayer/203", "ground_truth": "public Artist getArtist(long artistId) {\r\n    synchronized (cache) {\r\n        return cache.artistsById.get(artistId);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic void removeSongByPath(@NonNull String... paths) {\r\n    synchronized (cache) {\r\n        ArrayList<Long> matchingSongIds = new ArrayList<>();\r\n        for (String path : paths) {\r\n            for (Song song : cache.songsById.values()) {\r\n                if (song.data.equals(path)) {\r\n                    matchingSongIds.add(song.id);\r\n                    break;\r\n                }", "choices": [{"text": "\n            }\r\n        }\r\n        for (Long matchingSongId : matchingSongIds) {\r\n            cache.removeSongById(matchingSongId);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/212", "ground_truth": "            }\r\n        }\r\n        removeSongsById(matchingSongIds);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\nprivate void removeSongsById(@NonNull final Collection<Long> songIds) {\r\n    if (songIds.isEmpty())\r\n        return;\r\n    for (final long songId : songIds) {", "choices": [{"text": "\n        final Song song = Song.findById(songId);\r\n        if (song!= null) {\r\n            song.remove();\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/213", "ground_truth": "        cache.removeSongById(songId);\r\n        database.removeSongById(songId);\r\n    }\r\n    notifyDiscographyChanged();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\nprivate void fetchAllSongs() {\r\n    setCacheState(MemCache.ConsistencyState.REFRESHING);\r\n    Collection<Song> songs = database.fetchAllSongs();", "choices": [{"text": "\n    if (songs!= null) {\r\n        for (Song song : songs) {\r\n            addSong(song);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/215", "ground_truth": "    for (Song song : songs) {\r\n        addSong(song, true);\r\n    }\r\n    setCacheState(MemCache.ConsistencyState.OK);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\Discography.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\nprivate static ArrayList<Song> getSongs(@Nullable final Cursor cursor) {\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        do {", "choices": [{"text": "\n            Song song = new Song();\r\n            song.setId(cursor.getInt(cursor.getColumnIndex(Song.COLUMN_ID)));\r\n            song.setTitle(cursor.getString(cursor.getColumnIndex(Song.COLUMN_TITLE)));\r\n            songs.add(song);\r\n        } while (cursor.moveToNext());\r\n    }\r\n    return songs;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/217", "ground_truth": "            songs.add(getSongFromCursorImpl(cursor));\r\n        } while (cursor.moveToNext());\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\MediaStoreBridge.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.provider.MediaStore\nimport android.database.Cursor\nimport android.content.Context\n@Nullable\r\nprivate static Cursor makeSongCursor(@NonNull final Context context) {\r\n    try {\r\n        return context.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, BASE_PROJECTION, BASE_SELECTION, null, PreferenceUtil.getInstance().getSongSortOrder());", "choices": [{"text": "\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/218", "ground_truth": "    } catch (SecurityException e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\MediaStoreBridge.java"}}
{"prompt": "ConsistencyState consistencyState = ConsistencyState.UNINITIALIZED;\nfinal Map<String, Genre> genresByName = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\nfinal Map<String, Artist> artistsByName = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n synchronized void clear() {\r\n    songsById.clear();\r\n    artistsByName.clear();\r\n    artistsById.clear();", "choices": [{"text": "\n    genresByName.clear();\r\n    artistsByName.clear();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/219", "ground_truth": "    albumsByAlbumIdAndArtistId.clear();\r\n    albumsByName.clear();\r\n    genresByName.clear();\r\n    songsByGenreId.clear();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\MemCache.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Genre\nimport androidx.annotation.NonNull\nprivate synchronized void addSongToGenreAndUpdateCount(@NonNull final Song song, @NonNull final Genre genre) {\r\n    ArrayList<Song> songs = songsByGenreId.get(genre.id);", "choices": [{"text": "\n    songs.add(song);\r\n    songsByGenreId.put(genre.id, song);\r\n    updateCount(song);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/223", "ground_truth": "    if (songs != null) {\r\n        songs.add(song);\r\n        genre.songCount = songs.size();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\MemCache.java"}}
{"prompt": "import com.google.android.material.snackbar.Snackbar\nimport com.google.android.material.snackbar.BaseTransientBottomBar\nimport androidx.annotation.NonNull\nvoid showProgress(@NonNull final CharSequence text) {\r\n    if (progressBar == null) {\r\n        progressBar = Snackbar.make(viewContainer, \"\", BaseTransientBottomBar.LENGTH_LONG);\r\n    }\r\n    progressBar.setText(buildMessageWithIcon(text, progressBar));", "choices": [{"text": "\n    progressBar.setVisibility(View.GONE);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/228", "ground_truth": "    if (!progressBar.isShownOrQueued()) {\r\n        adjustPosition(progressBar);\r\n        progressBar.show();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\SnackbarUtil.java"}}
{"prompt": "import androidx.annotation.Nullable\nprivate void onTermination(@Nullable final Progress value) {\r\n    discography.setCacheState(MemCache.ConsistencyState.OK);\r\n    if (isUIFeedbackNeeded()) {\r\n        if (value == null || value.isEmpty()) {\r\n            snackbar.dismiss();", "choices": [{"text": "\n        } else {\r\n            snackbar.dismiss();\r\n        }\r\n    } else {\r\n        snackbar.dismiss();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/234", "ground_truth": "        } else {\r\n            snackbar.showProgress(value.buildInfoString(context));\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\SyncWithMediaStoreAsyncTask.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.NonNull\n@NonNull\r\nstatic List<String> splitIfNeeded(@NonNull final List<String> names) {\r\n    if (names.isEmpty()) {\r\n        return new ArrayList<>(0);\r\n    }\r\n    // If the argument has multiple elements, or empty, dont split further", "choices": [{"text": "\n    if (names.size() == 1) {\r\n        return names;\r\n    }\r\n    List<String> result = new ArrayList<>(names.size());\r\n    for (String name : names) {\r\n        result.add(name);\r\n    }\r\n    return result;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/236", "ground_truth": "    if (names.size() > 1) {\r\n        return names;\r\n    }\r\n    return split(names.get(0));\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\tagging\\MultiValuesTagUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.text.TextUtils\n@NonNull\r\nprivate static List<String> splitImpl(@Nullable final String names, @NonNull final String separator) {\r\n    final List<String> result = new ArrayList<>();\r\n    if (!TextUtils.isEmpty(names)) {\r\n        final String[] namesSplit = names.split(separator);\r\n        for (final String name : namesSplit) {", "choices": [{"text": "\n            result.add(name);\r\n        }\r\n    }\r\n    return result;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/237", "ground_truth": "            result.add(name.trim());\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\tagging\\MultiValuesTagUtil.java"}}
{"prompt": "private static int b2le32(byte[] b) {\r\n    int r = 0;", "choices": [{"text": "(b[0] << 24) | (b[1] << 16) | (b[2] << 8) | b[3];\r\n    r |= b[4];\r\n    r |= b[5];\r\n    r |= b[6];\r\n    r |= b[7];\r\n    r |= b[8];\r\n    r |= b[9];\r\n    r |= b[10];\r\n    r |= b[11];\r\n    r |= b[12];\r\n    r |= b[13];\r\n    r |= b["}], "metadata": {"task_id": "VinylMusicPlayer/239", "ground_truth": "    for (int i = 0; i < 4; i++) {\r\n        r |= (b2u(b[i]) << (8 * i));\r\n    }\r\n    return r;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\tagging\\ReplayGainTagExtractor.java"}}
{"prompt": "private static float parseFloat(String s) {\r\n    float result = 0.0f;\r\n    try {\r\n        s = s.replaceAll(\"[^0-9.-]\", \"\");\r\n        result = Float.parseFloat(s);", "choices": [{"text": "\n    } catch (NumberFormatException e) {\r\n        result = 0.0f;\r\n    }\r\n    return result;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/240", "ground_truth": "    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\discog\\tagging\\ReplayGainTagExtractor.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/242", "ground_truth": "public void cleanup() {\r\n    if (streamFetcher != null) {\r\n        streamFetcher.cleanup();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\artistimage\\ArtistImageFetcher.java"}}
{"prompt": "@Override\r\npublic void cancel() {\r\n    isCancelled = true;\r\n    if (call != null) {\r\n        call.cancel();", "choices": [{"text": "\n        call.cancel();\r\n        isCancelled = false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/243", "ground_truth": "    }\r\n    if (streamFetcher != null) {\r\n        streamFetcher.cancel();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\artistimage\\ArtistImageFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.File\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.util.Util\nimport com.poupa.vinylmusicplayer.util.SAFUtil\nimport com.poupa.vinylmusicplayer.util.AutoCloseAudioFile\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.App\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.content.Context\n@Nullable\r\nInputStream loadCoverFromAudioTags(@NonNull final Song song) {\r\n    try (final AutoCloseAudioFile audio = SAFUtil.loadReadOnlyAudioFile(App.getStaticContext(), song)) {\r\n        if (audio == null) {\r\n            return null;\r\n        }\r\n        stream = loadCoverFromAudioTags(audio.get());\r\n        return stream;", "choices": [{"text": "    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/244", "ground_truth": "    } catch (final Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.File\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.util.Util\nimport com.poupa.vinylmusicplayer.util.SAFUtil\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nInputStream loadCoverFromAudioTags(@NonNull final File file) {\r\n    try {\r\n        final AudioFile audio = SAFUtil.loadAudioFile(file);\r\n        if (audio == null) {\r\n            return null;\r\n        }\r\n        stream = loadCoverFromAudioTags(audio);\r\n        return stream;", "choices": [{"text": "\n    } catch (final Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/245", "ground_truth": "    } catch (final Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.provider.MediaStore\nimport android.os.Build\n@Nullable\r\nInputStream loadCoverFromMediaStore(@NonNull final Song song) {\r\n    try {\r\n        final long albumId = song.albumId;\r\n        stream = (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) ? loadCoverFromMediaStoreApi29(albumId) : loadCoverFromMediaStoreApi19(albumId);\r\n        return stream;", "choices": [{"text": "    } catch (final Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/247", "ground_truth": "    } catch (final Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.util.List\nimport java.io.InputStream\nimport java.io.File\nimport com.poupa.vinylmusicplayer.util.Util\nimport com.poupa.vinylmusicplayer.util.FileUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.provider.MediaStore\n@Nullable\r\nInputStream loadCoverFromMediaStore(@NonNull final File file) {\r\n    final List<Song> matchingSongs = FileUtil.matchFilesWithMediaStore(List.of(file));\r\n    // non unique, abandon\r\n    if (matchingSongs.size() != 1) {\r\n        return null;\r\n    }\r\n    final Song song = matchingSongs.get(0);\r\n    // not found, abandon\r\n    if (song.id == Song.EMPTY_SONG.id) {", "choices": [{"text": "\n        return null;\r\n    }\r\n    return Util.loadCoverFromMediaStore(file, song.id);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/248", "ground_truth": "        return null;\r\n    }\r\n    stream = loadCoverFromMediaStore(song);\r\n    return stream;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.FileInputStream\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nInputStream loadCoverFromFolderImage(@NonNull final File file) {\r\n    // Look for album art in external files\r\n    try {\r\n        final File parent = file.getParentFile();\r\n        for (final String fallback : FOLDER_IMAGE_FALLBACKS) {\r\n            final File cover = new File(parent, fallback);\r\n            if (cover.exists()) {\r\n                stream = new FileInputStream(cover);\r\n                return stream;\r\n            }", "choices": [{"text": "\n            }\r\n        }\r\n        return null;\r\n    } catch (final IOException e) {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/250", "ground_truth": "        }\r\n    } catch (final FileNotFoundException ignored) {\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.ByteArrayInputStream\n@Override\r\npublic void cleanup() {\r\n    // already cleaned up in loadData and ByteArrayInputStream will be GC'd\r\n    if (stream != null) {\r\n        try {\r\n            stream.close();", "choices": [{"text": "\n            stream = null;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/251", "ground_truth": "        } catch (final IOException ignore) {\r\n            // can't do much about it\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\AbsCoverFetcher.java"}}
{"prompt": "import java.io.File\nimport androidx.annotation.Nullable\n@Override\r\npublic boolean equals(@Nullable Object object) {\r\n    if (object instanceof FileCover) {", "choices": [{"text": "\n        FileCover fileCover = (FileCover) object;\r\n        return fileCover.getPath().equals(path);\r\n    } else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/252", "ground_truth": "        FileCover other = (FileCover) object;\r\n        return file.equals(other.file);\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\FileCover.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\n@Override\r\npublic boolean equals(@Nullable Object object) {\r\n    if (object instanceof SongCover) {", "choices": [{"text": "\n        SongCover songCover = (SongCover) object;\r\n        return songCover.getSongId().equals(getSongId()) && songCover.getCoverId().equals(getCoverId());\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/253", "ground_truth": "        SongCover other = (SongCover) object;\r\n        return song.equals(other.song);\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\SongCover.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\nimport com.bumptech.glide.Priority\nimport androidx.annotation.NonNull\n@Override\r\npublic void loadData(@NonNull final Priority priority, @NonNull final DataCallback<? super InputStream> callback) {\r\n    try {\r\n        final InputStream input = loadData();\r\n        if (input == null) {\r\n            callback.onLoadFailed(new IOException(\"Cannot load cover for song\"));\r\n        } else {\r\n            callback.onDataReady(input);\r\n        }", "choices": [{"text": "\n    } catch (IOException e) {\r\n        callback.onLoadFailed(e);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/254", "ground_truth": "    } catch (final Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n        callback.onLoadFailed(e);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\SongCoverFetcher.java"}}
{"prompt": "import java.io.InputStream\nimport androidx.annotation.Nullable\n@Nullable\r\npublic InputStream loadData() {\r\n    InputStream input = loadCoverFromAudioTags(model.song);\r\n    if (input == null) {\r\n        input = loadCoverFromMediaStore(model.song);\r\n    }", "choices": [{"text": "(input == null) {\r\n        input = loadCoverFromMediaStore(model.song);\r\n    }\r\n    return input;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/255", "ground_truth": "    if (input == null) {\r\n        input = loadCoverFromFolderImage(new File(model.song.data));\r\n    }\r\n    return input;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\audiocover\\SongCoverFetcher.java"}}
{"prompt": "/**\r\n * @param sampling The inSampleSize to use. Must be a power of 2, or 1 for no down sampling or 0 for auto detect sampling. Default is 0.\r\n * @return the same Builder\r\n */", "choices": [{"text": "\nfunction inSampleSize(sampling) {\r\n    this.sampling = sampling;\r\n    return this;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/258", "ground_truth": "public Builder sampling(int sampling) {\r\n    this.sampling = sampling;\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\BlurTransformation.java"}}
{"prompt": "import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool\nimport android.graphics.Bitmap\n/**\r\n * @param bitmapPool The BitmapPool to use.\r\n * @return the same Builder\r\n */", "choices": [{"text": "\n    return new Builder().setBitmapPool(bitmapPool).build();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/259", "ground_truth": "public Builder bitmapPool(BitmapPool bitmapPool) {\r\n    this.bitmapPool = bitmapPool;\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\glide\\BlurTransformation.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\npublic static int getItemViewtype(int position, int itemCount) {\r\n    if (position == 0) {\r\n        return TYPE_FIRST;", "choices": [{"text": "\n    } else if (position == 1) {\r\n        return TYPE_SECOND;\r\n    } else if (position == 2) {\r\n        return TYPE_THIRD;\r\n    } else if (position == 3) {\r\n        return TYPE_FOUR;\r\n    } else if (position == 4) {\r\n        return TYPE_FIVE;\r\n    } else if (position == 5) {\r\n        return TYPE_SIX;\r\n    } else if (position == 6) {\r\n        return TYPE_SEVEN;\r\n   "}], "metadata": {"task_id": "VinylMusicPlayer/270", "ground_truth": "    } else if (position == itemCount - 1) {\r\n        return TYPE_LAST;\r\n    } else\r\n        return TYPE_MIDDLE;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\HorizontalAdapterHelper.java"}}
{"prompt": "@Override\r\nprotected void onPostExecute(String string) {\r\n    super.onPostExecute(string);", "choices": [{"text": "_postExecute(string);\r\n    Toast toast = Toast.makeText(this, getString(R.string.success), Toast.LENGTH_SHORT).show();\r\n    Toast.makeText(this, getString(R.string.error), Toast.LENGTH_SHORT).show();\r\n    Toast.makeText(this, getString(R.string.cancel), Toast.LENGTH_SHORT).show();\r\n    Toast.makeText(this, getString(R.string.cancel_cancel), Toast.LENGTH_SHORT).show();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/272", "ground_truth": "    Context context = getContext();\r\n    if (context != null) {\r\n        SafeToast.show(context, string);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\menu\\PlaylistMenuHelper.java"}}
{"prompt": "import androidx.annotation.Nullable\nimport android.content.ContextWrapper\nimport android.content.Context\npublic static void unbindFromService(@Nullable final ServiceToken token) {\r\n    if (token == null) {\r\n        return;\r\n    }\r\n    final ContextWrapper mContextWrapper = token.mWrappedContext;\r\n    final ServiceBinder mBinder = mConnectionMap.remove(mContextWrapper);\r\n    if (mBinder == null) {\r\n        return;\r\n    }\r\n    mContextWrapper.unbindService(mBinder);\r\n    if (mConnectionMap.isEmpty() && musicService != null) {\r\n        if (!musicService.isPlaying()) {", "choices": [{"text": "\n            mContextWrapper.unbindService(mMusicService);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/274", "ground_truth": "            musicService.quit();\r\n        }\r\n        musicService = null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import android.content.ComponentName\nprivate final ServiceConnection mCallback;\npublic static MusicService musicService;\nprivate static final WeakHashMap<Context, ServiceBinder> mConnectionMap = new WeakHashMap<>();\n@Override\r\npublic void onServiceDisconnected(final ComponentName className) {", "choices": [{"text": "\n    super.onServiceDisconnected(className);\r\n    musicService = null;\r\n    mCallback = null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/276", "ground_truth": "    if (mCallback != null) {\r\n        mCallback.onServiceDisconnected(className);\r\n    }\r\n    musicService = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\nprivate static boolean tryToHandleOpenPlayingQueue(final Collection<? extends Song> queue, final int startPosition, final boolean startPlaying) {\r\n    if (getPlayingQueue() == queue) {\r\n        if (startPlaying) {\r\n            playSongAt(startPosition, isPlaying());\r\n        } else {\r\n            setPosition(startPosition);", "choices": [{"text": "\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/286", "ground_truth": "        }\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static Song getCurrentSong() {", "choices": [{"text": "\n    Song song = new Song();\r\n    song.setSongId(mContext.getString(R.string.current_song_id));\r\n    return song;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/287", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getCurrentSong();\r\n    }\r\n    return Song.EMPTY_SONG;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "public final ContextWrapper mWrappedContext;\npublic static final String TAG = MusicPlayerRemote.class.getSimpleName();\nprivate final ServiceConnection mCallback;\n public static int getPosition() {", "choices": [{"text": "\n    return mWrappedContext.getString(R.string.music_player_position);\n}\npublic static int getDuration() {\n    return mWrappedContext.getString(R.string.music_player_duration);\n}\npublic static boolean isPlaying() {\n    return mWrappedContext.getBoolean(R.string.music_player_playing);\n}\npublic static boolean isPaused() {\n    return mWrappedContext.getBoolean(R.string.music_player_paused);\n}\n"}], "metadata": {"task_id": "VinylMusicPlayer/288", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getPosition();\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\npublic static List<? extends Song> getPlayingQueue() {", "choices": [{"text": "\n    List<Song> songList = new ArrayList<>();\n    songList.add(new Song(\"1\"));\n    songList.add(new Song(\"2\"));\n    songList.add(new Song(\"3\"));\n    songList.add(new Song(\"4\"));\n    songList.add(new Song(\"5\"));\n    songList.add(new Song(\"6\"));\n    songList.add(new Song(\"7\"));\n    songList.add(new Song(\"8\"));\n   "}], "metadata": {"task_id": "VinylMusicPlayer/289", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getPlayingQueue();\r\n    }\r\n    return new ArrayList<>();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic static int getSongProgressMillis() {", "choices": [{"text": "(Song song) {\n    if (song == null) {\n        return 0;\n    } else {\n        return song.getProgressMillis();\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/290", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getSongProgressMillis();\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic static int getSongDurationMillis() {", "choices": [{"text": "(Song song) {\n    return song.getDurationMillis();\n}"}], "metadata": {"task_id": "VinylMusicPlayer/291", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getSongDurationMillis();\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "public static int getAudioSessionId() {", "choices": [{"text": "\n    return (int) (getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().getApplicationContext().get"}], "metadata": {"task_id": "VinylMusicPlayer/306", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getAudioSessionId();\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic static String getQueueInfoString() {", "choices": [{"text": "\n    return getString(R.string.queue_info);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/307", "ground_truth": "    if (musicService != null) {\r\n        return musicService.getQueueInfoString();\r\n    }\r\n    return \"\";\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\MusicPlayerRemote.java"}}
{"prompt": "import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (MusicPlayerRemote.isPlaying()) {", "choices": [{"text": "\n        return;\r\n    }\r\n    if (MusicPlayerRemote.isPlaying()) {\r\n        MusicPlayerRemote.pause();\r\n    }\r\n    if (MusicPlayerRemote.isPlaying()) {\r\n        MusicPlayerRemote.play();\r\n    }\r\n    if (MusicPlayerRemote.isPlaying()) {\r\n        MusicPlayerRemote.pause();\r\n    }\r\n    if (MusicPlayerRemote.isPlaying()) {\r\n        MusicPlayerRemote.play();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/314", "ground_truth": "        MusicPlayerRemote.pauseSong();\r\n    } else {\r\n        MusicPlayerRemote.resumePlaying();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\PlayPauseButtonOnClickHandler.java"}}
{"prompt": "import java.util.List\nimport java.util.Collections\nimport androidx.annotation.NonNull\npublic static <T> void makeShuffleList(@NonNull List<T> listToShuffle, final int current) {\r\n    if (listToShuffle.isEmpty())\r\n        return;\r\n    if (current >= 0) {\r\n        T song = listToShuffle.remove(current);\r\n        Collections.shuffle(listToShuffle);", "choices": [{"text": "\n        Collections.shuffle(song);\r\n    } else {\r\n        listToShuffle.add(song);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/315", "ground_truth": "        listToShuffle.add(0, song);\r\n    } else {\r\n        Collections.shuffle(listToShuffle);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\ShuffleHelper.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/316", "ground_truth": "public Void call() {\r\n    blurIteration(_src, _w, _h, _radius, _totalCores, _coreIndex, _round);\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\StackBlur.java"}}
{"prompt": "/**\r\n * Starts or continues the stop watch.\r\n *\r\n * @see #pause()\r\n * @see #reset()\r\n */\r\npublic void start() {", "choices": [{"text": "(boolean pause) {\r\n    if (pause) {\r\n        stop();\r\n    } else {\r\n        pause();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/317", "ground_truth": "    synchronized (this) {\r\n        startTime = System.currentTimeMillis();\r\n        isRunning = true;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\StopWatch.java"}}
{"prompt": "/**\r\n * Stops and resets the stop watch to zero milliseconds.\r\n *\r\n * @see #start()\r\n * @see #pause()\r\n */\r\npublic void reset() {\r\n    synchronized (this) {", "choices": [{"text": "\n        stop();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/319", "ground_truth": "        startTime = 0;\r\n        previousElapsedTime = 0;\r\n        isRunning = false;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\StopWatch.java"}}
{"prompt": "private final WeakReference<T> weakReference;\nprivate final Consumer<T> consumer;\n public void run() {", "choices": [{"text": "(T t) {\n    weakReference.set(t);\n    consumer.accept(t);\n}"}], "metadata": {"task_id": "VinylMusicPlayer/321", "ground_truth": "    T obj = weakReference.get();\r\n    if (obj != null) {\r\n        consumer.accept(obj);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\helper\\WeakMethodReference.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.sort.SortOrder\nimport com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Album> getAlbums(String query) {\r\n    final String strippedQuery = StringUtil.stripAccent(query.toLowerCase());\r\n    ArrayList<Album> albums = new ArrayList<>();\r\n    for (Album album : Discography.getInstance().getAllAlbums(getSortOrder())) {\r\n        final String strippedAlbum = StringUtil.stripAccent(album.getTitle().toLowerCase());\r\n        if (strippedAlbum.contains(strippedQuery)) {", "choices": [{"text": "\n            albums.add(album);\r\n        }\r\n    }\r\n    return albums;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/325", "ground_truth": "            albums.add(album);\r\n        }\r\n    }\r\n    return albums;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\AlbumLoader.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static Album getAlbum(long albumId) {\r\n    Album album = Discography.getInstance().getAlbum(albumId);\r\n    if (album != null) {", "choices": [{"text": "\n        return album;\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/326", "ground_truth": "        return album;\r\n    } else {\r\n        return new Album();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\AlbumLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.sort.SortOrder\nimport com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Artist> getArtists(String query) {\r\n    final String strippedQuery = StringUtil.stripAccent(query.toLowerCase());\r\n    ArrayList<Artist> artists = new ArrayList<>();\r\n    for (Artist artist : Discography.getInstance().getAllArtists(getSortOrder())) {\r\n        final String strippedArtist = StringUtil.stripAccent(artist.getName().toLowerCase());\r\n        if (strippedArtist.contains(strippedQuery)) {", "choices": [{"text": "\n            artists.add(artist);\r\n        }\r\n    }\r\n    return artists;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/328", "ground_truth": "            artists.add(artist);\r\n        }\r\n    }\r\n    return artists;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\ArtistLoader.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static Artist getArtist(long artistId) {\r\n    Artist artist = Discography.getInstance().getArtist(artistId);\r\n    if (artist != null) {", "choices": [{"text": "\n        return artist;\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/329", "ground_truth": "        return artist;\r\n    } else {\r\n        return Artist.EMPTY;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\ArtistLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.sort.SongSortOrder\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Genre\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Song> getSongs(final long genreId) {\r\n    ArrayList<Song> songs = Discography.getInstance().getSongsForGenre(genreId, SongSortOrder.BY_ALBUM);", "choices": [{"text": "\n    songs.addAll(Discography.getInstance().getSongsForGenre(genreId, SongSortOrder.BY_ALBUM));\r\n    songs.addAll(Discography.getInstance().getSongsForGenre(genreId, SongSortOrder.BY_TITLE));\r\n    songs.addAll(Discography.getInstance().getSongsForGenre(genreId, SongSortOrder.BY_TITLE));\r\n    songs.addAll(Discography.getInstance().getSongsForGenre(genreId"}], "metadata": {"task_id": "VinylMusicPlayer/331", "ground_truth": "    if (songs == null) {\r\n        return new ArrayList<>();\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\GenreLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Genre\nimport androidx.annotation.NonNull\n/**\r\n * Gets all songs contained in the *closestMatch* genre to contain the genreNameSearchTerm.\r\n *\r\n * Genre name is checked to contain the search term in a case insensitive way.\r\n *\r\n * Match closeness defined by StringUtil.closestOfMatches\r\n *\r\n * For instance \"Punk\" might return songs from the genre named \"punk rock\", but would prefer\r\n * to use a genre named \"punk\" if it exists.\r\n * @param genreNameSearchTerm A partial genre name.\r\n * @return song list from the found genre by search term\r\n */\r\n@NonNull\r\npublic static ArrayList<Song> getGenreSongsByName(final String genreNameSearchTerm) {\r\n    final Genre genre = getGenreByName(genreNameSearchTerm);", "choices": [{"text": "    if (genre == null) {\r\n        return null;\r\n    }\r\n    final ArrayList<Song> songs = new ArrayList<>();\r\n    for (final Song song : genre.getSongs()) {\r\n        songs.add(song);\r\n    }\r\n    return songs;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/332", "ground_truth": "    if (genre == null) {\r\n        return new ArrayList<>();\r\n    }\r\n    return getSongs(genre.id);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\GenreLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Genre\nimport androidx.annotation.Nullable\n@Nullable\r\nprivate static Genre getGenreByName(final String genreNameSearchTerm) {\r\n    final String lowercaseSearchTerm = genreNameSearchTerm.toLowerCase();\r\n    final ArrayList<Genre> genres = getAllGenres();\r\n    Genre match = null;\r\n    for (Genre genre : genres) {\r\n        if (genre.name.toLowerCase().contains(lowercaseSearchTerm)) {\r\n            if (match == null) {\r\n                match = genre;\r\n            } else {\r\n                match = closerMatch(lowercaseSearchTerm, match, genre);", "choices": [{"text": "\n            }\r\n        }\r\n    }\r\n    return match;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/333", "ground_truth": "            }\r\n        }\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\GenreLoader.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.model.Genre\nimport androidx.annotation.NonNull\n/**\r\n * This can be sped up by passing in indexOfs and lowerCaseOfs.\r\n * Users probably wont complain though, should be fast enough as is.\r\n */\r\n@NonNull\r\nprivate static Genre closerMatch(@NonNull final String genreNameSearchTerm, @NonNull final Genre first, @NonNull final Genre second) {\r\n    final StringUtil.ClosestMatch match = StringUtil.closestOfMatches(genreNameSearchTerm, first.name.toLowerCase(), second.name.toLowerCase());\r\n    // if equal, go with first, respect pre established order.\r\n    if (match != StringUtil.ClosestMatch.SECOND) {", "choices": [{"text": "\n        match = StringUtil.closestOfMatches(genreNameSearchTerm, first.name.toLowerCase(), second.name.toLowerCase());\r\n    }\r\n    return match == StringUtil.ClosestMatch.FIRST? first : second;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/334", "ground_truth": "        return first;\r\n    } else {\r\n        return second;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\GenreLoader.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.PlaylistSong\nimport androidx.annotation.NonNull\nimport android.database.Cursor\nimport android.content.Context\n@NonNull\r\npublic static ArrayList<Song> getPlaylistSongList(@NonNull final Context context, final long playlistId) {\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    try (Cursor cursor = makePlaylistSongCursor(context, playlistId)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            do {\r\n                PlaylistSong song = getPlaylistSongFromCursorImpl(cursor, playlistId);\r\n                if (!song.equals(Song.EMPTY_SONG)) {\r\n                    songs.add(song);\r\n                }", "choices": [{"text": "\n            } while (cursor.moveToNext());\r\n        } else {\r\n            songs.add(Song.EMPTY_SONG);\r\n        }\r\n    }\r\n    return songs;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/335", "ground_truth": "            } while (cursor.moveToNext());\r\n        }\r\n        return songs;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\PlaylistSongLoader.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.PlaylistSong\nimport androidx.annotation.NonNull\n/**\r\n * Gets all songs contained in the *closestMatch* playlist to contain the playlistNameSearchTerm.\r\n *\r\n * Match closeness defined by StringUtil.closestOfMatches\r\n *\r\n * For instance \"Punk\" might return songs from the playlist named \"punk rock\", but would prefer\r\n * to use a playlist named \"punk\" if it exists.\r\n * @param playlistNameSearchTerm A partial playlist name.\r\n * @return Song list from the playlist found by search term\r\n */\r\n@NonNull\r\npublic static List<? extends Song> getPlaylistSongList(@NonNull final String playlistNameSearchTerm) {\r\n    // Find closest match\r\n    final String lowercaseSearchTerm = playlistNameSearchTerm.toLowerCase();\r\n    StaticPlaylist match = null;\r\n    for (StaticPlaylist playlist : StaticPlaylist.getAllPlaylists()) {\r\n        if (match == null) {\r\n            match = playlist;\r\n        } else {\r\n            match = closerMatch(lowercaseSearchTerm, match, playlist);\r\n        }\r\n    }", "choices": [{"text": "    return StringUtil.closestOfMatches(match, playlistNameSearchTerm);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/336", "ground_truth": "    if (match == null) {\r\n        return new ArrayList<>();\r\n    }\r\n    return match.asSongs();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\PlaylistSongLoader.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport androidx.annotation.NonNull\n/**\r\n * This can be sped up by passing in indexOfs and lowerCaseOfs.\r\n * Users probably wont complain though, should be fast enough as is.\r\n */\r\n@NonNull\r\nprivate static StaticPlaylist closerMatch(@NonNull final String playlistNameSearchTerm, @NonNull final StaticPlaylist first, @NonNull final StaticPlaylist second) {\r\n    final StringUtil.ClosestMatch match = StringUtil.closestOfMatches(playlistNameSearchTerm, first.name.toLowerCase(), second.name.toLowerCase());\r\n    // if equal, go with first, respect pre established order.\r\n    if (match != StringUtil.ClosestMatch.SECOND) {", "choices": [{"text": "\n        return first;\r\n    } else if (match == StringUtil.ClosestMatch.FIRST) {\r\n        return second;\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/337", "ground_truth": "        return first;\r\n    } else {\r\n        return second;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\PlaylistSongLoader.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.util.StringUtil\nimport com.poupa.vinylmusicplayer.sort.SortOrder\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Song> getSongs(@NonNull final String query) {\r\n    final String strippedQuery = StringUtil.stripAccent(query.toLowerCase());\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    for (Song song : Discography.getInstance().getAllSongs(getSortOrder())) {\r\n        final String strippedTitle = StringUtil.stripAccent(song.title.toLowerCase());\r\n        if (strippedTitle.contains(strippedQuery)) {", "choices": [{"text": "\n            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/339", "ground_truth": "            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\loader\\SongLoader.java"}}
{"prompt": "import androidx.fragment.app.Fragment\npublic Fragment getFragment(int position) {", "choices": [{"text": "\n    if (position == 0) {\n        return null;\n    } else {\n        return getFragment(position - 1);\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/344", "ground_truth": "    if (position < mFragments.size() && position >= 0) {\r\n        return mFragments.get(position);\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\CustomFragmentStatePagerAdapter.java"}}
{"prompt": "@Override\r\nprotected void onPreExecute() {\r\n    super.onPreExecute();\r\n    if (delay > 0) {", "choices": [{"text": "\n        delay = 0;\r\n    }\r\n    super.onPreExecute();\r\n    if (timer!= null) {\r\n        timer.cancel();\r\n        timer = null;\r\n    }\r\n    timer = new Timer();\r\n    timer.schedule(new TimerTask() {\r\n        @Override\r\n        public void run() {\r\n            timer.cancel();\r\n            timer = null;\r\n        }\r\n    }, delay, delay, TimeUnit.MILLISECONDS);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/345", "ground_truth": "        new Handler().postDelayed(this::initAndShowDialog, delay);\r\n    } else {\r\n        initAndShowDialog();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "@SuppressWarnings(\"unchecked\")\r\n@Override\r\nprotected void onProgressUpdate(Progress... values) {\r\n    super.onProgressUpdate(values);", "choices": [{"text": "_onProgressUpdate(values);\r\n    if (values!= null && values.length > 0) {\r\n        notifyDataSetChanged();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/347", "ground_truth": "    Dialog dialog = getDialog();\r\n    if (dialog != null) {\r\n        onProgressUpdate(dialog, values);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/348", "ground_truth": "protected void onCancelled(Result result) {\r\n    super.onCancelled(result);\r\n    tryToDismiss();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/349", "ground_truth": "protected void onPostExecute(Result result) {\r\n    super.onPostExecute(result);\r\n    tryToDismiss();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "import android.app.Dialog\nprivate void tryToDismiss() {\r\n    supposedToBeDismissed = true;\r\n    try {\r\n        Dialog dialog = getDialog();\r\n        if (dialog != null)", "choices": [{"text": "\n            dialog.dismiss();\r\n    } catch (Exception e) {\r\n        Log.e(e);\r\n    }\r\n    supposedToBeDismissed = false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/350", "ground_truth": "            dialog.dismiss();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\DialogAsyncTask.java"}}
{"prompt": "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())", "choices": [{"text": "\n        return false;\r\n    if (getClass()!= o.getClass())\r\n        return false;\r\n    return super.equals(o);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/352", "ground_truth": "        return false;\r\n    if (!super.equals(o))\r\n        return false;\r\n    return (index == ((IndexedSong) o).index);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\IndexedSong.java"}}
{"prompt": "private void restoreUniqueId() {\r\n    nextUniqueId = 0;\r\n    for (int i = 0; i < queue.size(); i++) {\r\n        long uniqueId = getNextUniqueId();\r\n        queue.get(i).setUniqueId(uniqueId);\r\n        int index = queue.get(i).index;", "choices": [{"text": "\n        queue.get(i).setIndex(index);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/354", "ground_truth": "        if (index < originalQueue.size()) {\r\n            originalQueue.get(index).setUniqueId(uniqueId);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nprivate void updateQueueIndexesAfterSongsModification(int position, int occurrence, int previousPosition, int direction) {\r\n    for (int i = 0; i < queue.size(); i++) {\r\n        originalQueue.get(i).index = i;\r\n        if (!(i >= position && i <= position + occurrence) && queue.get(i).index >= previousPosition) {\r\n            queue.get(i).index = queue.get(i).index + direction * (occurrence + 1);\r\n            int index = queue.get(i).index;\r\n            if (index < 0) {", "choices": [{"text": "\n                queue.get(i).index = index + direction * (occurrence + 1);\r\n            } else {\r\n                queue.get(i).index = index - direction * (occurrence + 1);\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/357", "ground_truth": "                throw new IllegalArgumentException(\"Bad index=\" + index);\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "private int rePosition(int deletedPosition) {\r\n    int position = this.currentPosition;\r\n    if (deletedPosition < position) {\r\n        this.currentPosition = position - 1;\r\n    } else if (deletedPosition == position) {\r\n        //the current position was deleted\r\n        if (queue.size() > deletedPosition) {\r\n            return position;\r\n        } else {", "choices": [{"text": "\n            this.currentPosition = position + 1;\r\n        }\r\n    } else {\r\n        this.currentPosition = position;\r\n    }\r\n    return position;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/361", "ground_truth": "            return position - 1;\r\n        }\r\n    }\r\n    return INVALID_POSITION;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nprivate int removeAllOccurrences(Song song) {\r\n    int hasPositionChanged = INVALID_POSITION;\r\n    for (int i = queue.size() - 1; i >= 0; i--) {\r\n        if (queue.get(i).id == song.id) {\r\n            int temp = remove(i);\r\n            if (temp != INVALID_POSITION) {\r\n                hasPositionChanged = temp;", "choices": [{"text": "\n            }\r\n        }\r\n    }\r\n    return hasPositionChanged;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/363", "ground_truth": "            }\r\n        }\r\n    }\r\n    return hasPositionChanged;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic int removeSongs(@NonNull List<Song> songs) {\r\n    int hasPositionChanged = INVALID_POSITION;\r\n    for (Song song : songs) {\r\n        int temp = removeAllOccurrences(song);\r\n        if (temp != INVALID_POSITION) {", "choices": [{"text": "\n            hasPositionChanged = temp;\r\n        }\r\n    }\r\n    return hasPositionChanged;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/364", "ground_truth": "            hasPositionChanged = temp;\r\n        }\r\n    }\r\n    return hasPositionChanged;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.Nullable\n/* -------------------- queue getter info -------------------- */\r\npublic boolean openQueue(@Nullable final Collection<? extends Song> playingQueue, final int startPosition, int shuffleMode) {\r\n    if (playingQueue == null || playingQueue.isEmpty() || startPosition < 0 || startPosition >= playingQueue.size()) {\r\n        return false;\r\n    }\r\n    clear();\r\n    this.shuffleMode = SHUFFLE_MODE_NONE;", "choices": [{"text": "\n    this.playingQueue = playingQueue;\r\n    this.startPosition = startPosition;\r\n    this.shuffleMode = shuffleMode;\r\n    return true;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/366", "ground_truth": "    addAll(playingQueue);\r\n    this.currentPosition = startPosition;\r\n    setShuffle(shuffleMode);\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.helper.ShuffleHelper\n/* -------------------- shuffle method -------------------- */\r\npublic void setShuffle(int shuffleMode) {\r\n    if (this.shuffleMode == shuffleMode)\r\n        return;\r\n    switch(shuffleMode) {\r\n        case SHUFFLE_MODE_NONE:\r\n            currentPosition = queue.isEmpty() ? -1 : queue.get(currentPosition).index;\r\n            revert();\r\n            break;\r\n        case SHUFFLE_MODE_SHUFFLE:\r\n            ShuffleHelper.makeShuffleList(queue, currentPosition);", "choices": [{"text": "\n            revert();\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException(\"Invalid shuffle mode: \" + shuffleMode);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/370", "ground_truth": "            currentPosition = 0;\r\n            break;\r\n    }\r\n    this.shuffleMode = shuffleMode;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "public void toggleShuffle() {\r\n    switch(shuffleMode) {\r\n        case SHUFFLE_MODE_NONE:\r\n            setShuffle(SHUFFLE_MODE_SHUFFLE);\r\n            break;", "choices": [{"text": "\n        case SHUFFLE_MODE_SHUFFLE:\r\n            setShuffle(SHUFFLE_MODE_UNSHUFFLE);\r\n            break;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/371", "ground_truth": "        case SHUFFLE_MODE_SHUFFLE:\r\n            setShuffle(SHUFFLE_MODE_NONE);\r\n            break;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "/* -------------------- repeat method -------------------- */\r\npublic void setRepeatMode(final int repeatMode) {\r\n    if (this.repeatMode == repeatMode)\r\n        return;\r\n    switch(repeatMode) {\r\n        case REPEAT_MODE_NONE:\r\n        case REPEAT_MODE_ALL:", "choices": [{"text": "\n            this.repeatMode = REPEAT_MODE_NONE;\r\n            break;\r\n        case REPEAT_MODE_ONE:\r\n            this.repeatMode = REPEAT_MODE_ONE;\r\n            break;\r\n        case REPEAT_MODE_TWO:\r\n            this.repeatMode = REPEAT_MODE_TWO;\r\n            break;\r\n        case REPEAT_MODE_THREE:\r\n            this.repeatMode = REPEAT_MODE_THREE;\r\n            break;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/372", "ground_truth": "        case REPEAT_MODE_THIS:\r\n            this.repeatMode = repeatMode;\r\n            break;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "public void cycleRepeatMode() {\r\n    switch(getRepeatMode()) {\r\n        case REPEAT_MODE_NONE:\r\n            setRepeatMode(REPEAT_MODE_ALL);\r\n            break;\r\n        case REPEAT_MODE_ALL:\r\n            setRepeatMode(REPEAT_MODE_THIS);\r\n            break;", "choices": [{"text": "\n        case REPEAT_MODE_THIS:\r\n            setRepeatMode(REPEAT_MODE_ALL);\r\n            break;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/373", "ground_truth": "        default:\r\n            setRepeatMode(REPEAT_MODE_NONE);\r\n            break;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\queue\\StaticPlayingQueue.java"}}
{"prompt": "private D mData;\n /**\r\n * {@inheritDoc}\r\n */\r\n@Override\r\nprotected void onReset() {", "choices": [{"text": " {\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData = null;\r\n    mData ="}], "metadata": {"task_id": "VinylMusicPlayer/378", "ground_truth": "    super.onReset();\r\n    // Ensure the loader is stopped\r\n    onStopLoading();\r\n    this.mData = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\misc\\WrappedAsyncTaskLoader.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\npublic static String getTitle(@NonNull final String albumName) {", "choices": [{"text": "\n    return albumName == null? null : albumName.trim();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/379", "ground_truth": "    if (MusicUtil.isAlbumNameUnknown(albumName)) {\r\n        return UNKNOWN_ALBUM_DISPLAY_NAME;\r\n    }\r\n    return albumName;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Album.java"}}
{"prompt": "public String getName() {", "choices": [{"text": "\n    String name2 = \"name2\";\n    String name3 = \"name3\";\n    String name4 = \"name4\";\n    String name5 = \"name5\";\n    String name6 = \"name6\";\n    String name7 = \"name7\";\n    String name8 = \"name8\";\n    String name9 = \"name9\";\n    String name10 = \"name10\";\n    String name11 = \"name11\";\n    String name12 = \"name12\";\n    String name13 = \"name13\";\n    String name14 = \"name"}], "metadata": {"task_id": "VinylMusicPlayer/384", "ground_truth": "    if (MusicUtil.isArtistNameUnknown(name)) {\r\n        return Artist.UNKNOWN_ARTIST_DISPLAY_NAME;\r\n    }\r\n    return name;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Artist.java"}}
{"prompt": "public final ArrayList<Album> albums;\npublic final String name;\npublic final long id;\n public int getSongCount() {\r\n    int songCount = 0;", "choices": [{"text": "\n    if (albums!= null) {\r\n        for (Album album : albums) {\r\n            songCount += album.getSongCount();\r\n        }\r\n    }\r\n    return songCount;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/385", "ground_truth": "    for (Album album : albums) {\r\n        songCount += album.getSongCount();\r\n    }\r\n    return songCount;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Artist.java"}}
{"prompt": "import java.util.ArrayList\npublic ArrayList<Song> getSongs() {\r\n    ArrayList<Song> songs = new ArrayList<>();", "choices": [{"text": "\n    songs.add(new Song(\"Song 1\"));\r\n    songs.add(new Song(\"Song 2\"));\r\n    songs.add(new Song(\"Song 3\"));\r\n    songs.add(new Song(\"Song 4\"));\r\n    songs.add(new Song(\"Song 5\"));\r\n    songs.add(new Song(\"Song 6\"));\r\n    songs.add(new Song(\"Song 7\"));\r\n    songs.add(new S"}], "metadata": {"task_id": "VinylMusicPlayer/386", "ground_truth": "    for (Album album : albums) {\r\n        songs.addAll(album.songs);\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Artist.java"}}
{"prompt": "public String getName() {", "choices": [{"text": "\n    String name2 = \"name2\";\n    String name3 = \"name3\";\n    String name4 = \"name4\";\n    String name5 = \"name5\";\n    String name6 = \"name6\";\n    String name7 = \"name7\";\n    String name8 = \"name8\";\n    String name9 = \"name9\";\n    String name10 = \"name10\";\n    String name11 = \"name11\";\n    String name12 = \"name12\";\n    String name13 = \"name13\";\n    String name14 = \"name"}], "metadata": {"task_id": "VinylMusicPlayer/392", "ground_truth": "    if (MusicUtil.isGenreNameUnknown(name)) {\r\n        return UNKNOWN_GENRE_DISPLAY_NAME;\r\n    }\r\n    return name;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Genre.java"}}
{"prompt": "@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    Genre genre = (Genre) o;\r\n    if (id != genre.id)", "choices": [{"text": "\n        return false;\r\n    if (name!= genre.name)\r\n        return false;\r\n    return true;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/393", "ground_truth": "        return false;\r\n    if (!name.equals(genre.name))\r\n        return false;\r\n    return songCount == genre.songCount;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Genre.java"}}
{"prompt": "public String getLine(int time) {\r\n    time += offset + AbsSynchronizedLyrics.TIME_OFFSET_MS;\r\n    int lastLineTime = lines.keyAt(0);\r\n    for (int i = 0; i < lines.size(); i++) {\r\n        int lineTime = lines.keyAt(i);\r\n        if (time >= lineTime) {\r\n            lastLineTime = lineTime;\r\n        } else {", "choices": [{"text": "\n            lastLineTime = lineTime;\r\n        }\r\n    }\r\n    return lastLineTime;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/396", "ground_truth": "            break;\r\n        }\r\n    }\r\n    return lines.get(lastLineTime);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\lyrics\\AbsSynchronizedLyrics.java"}}
{"prompt": "@Override\r\npublic String getText() {\r\n    parse(false);\r\n    if (valid) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < lines.size(); i++) {\r\n            String line = lines.valueAt(i);\r\n            sb.append(line).append(\"\\r\\n\");", "choices": [{"text": "\n        return sb.toString();\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/398", "ground_truth": "        }\r\n        return sb.toString().trim().replaceAll(\"(\\r?\\n){3,}\", \"\\r\\n\\r\\n\");\r\n    }\r\n    return super.getText();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\lyrics\\AbsSynchronizedLyrics.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic static Lyrics parse(Song song, String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(song, data);\r\n            if (lyrics.isValid())\r\n                return lyrics.parse(false);\r\n        } catch (Exception e) {", "choices": [{"text": "\n            return null;\r\n        }\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/400", "ground_truth": "            e.printStackTrace();\r\n        }\r\n    }\r\n    return new Lyrics().setData(song, data).parse(false);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\lyrics\\Lyrics.java"}}
{"prompt": "public static boolean isSynchronized(String data) {\r\n    for (Class<? extends Lyrics> format : Lyrics.FORMATS) {\r\n        try {\r\n            Lyrics lyrics = format.newInstance().setData(null, data);\r\n            if (lyrics.isValid())\r\n                return true;\r\n        } catch (Exception e) {", "choices": [{"text": "\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/401", "ground_truth": "            e.printStackTrace();\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\lyrics\\Lyrics.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/408", "ground_truth": "public void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeLong(this.id);\r\n    dest.writeString(this.name);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Playlist.java"}}
{"prompt": "@DrawableRes\r\npublic final int iconRes;\n @Override\r\npublic int hashCode() {", "choices": [{"text": " {\r\n    int result = iconRes;\r\n    result = 31 * result + super.hashCode();\r\n    result = 31 * result + (iconRes!= null? iconRes.hashCode() : 0);\r\n    return result;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/414", "ground_truth": "    final int prime = 31;\r\n    int result = super.hashCode();\r\n    result = prime * result + iconRes;\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\smartplaylist\\AbsSmartPlaylist.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/416", "ground_truth": "public void writeToParcel(Parcel dest, int flags) {\r\n    super.writeToParcel(dest, flags);\r\n    dest.writeInt(this.iconRes);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\smartplaylist\\AbsSmartPlaylist.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/418", "ground_truth": "public void clear(@NonNull Context context) {\r\n    HistoryStore.getInstance(context).clear();\r\n    super.clear(context);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\smartplaylist\\HistoryPlaylist.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.NonNull\n@NonNull\r\npublic List<String> getArtistNames() {\r\n    final List<String> result = new ArrayList<>(artistNames);\r\n    for (final String name : albumArtistNames) {\r\n        if (!result.contains(name)) {", "choices": [{"text": "\n            result.add(name);\r\n        }\r\n    }\r\n    return result;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/423", "ground_truth": "            result.add(name);\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\model\\Song.java"}}
{"prompt": "import java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.CategoryInfo\nprivate int getSelected(ArrayList<CategoryInfo> categories) {\r\n    int selected = 0;\r\n    for (CategoryInfo categoryInfo : categories) {", "choices": [{"text": "\n        if (categoryInfo.isSelected()) {\r\n            selected = categoryInfo.getIndex();\r\n            break;\r\n        }\r\n    }\r\n    return selected;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/429", "ground_truth": "        if (categoryInfo.visible)\r\n            selected++;\r\n    }\r\n    return selected;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\preferences\\LibraryPreferenceDialog.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.widget.SeekBar\n@Override\r\npublic void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\r\n    if (fromUser) {\r\n        if (seekBar.getId() == R.id.seekbar_with_rg) {\r\n            withRgValue = progress * 0.2f - 15.0f;\r\n            updateLabelWithRg();\r\n        } else if (seekBar.getId() == R.id.seekbar_without_rg) {", "choices": [{"text": "\n            withoutRgValue = progress * 0.2f - 15.0f;\r\n            updateLabelWithoutRg();\r\n        }\r\n    } else {\r\n        if (seekBar.getId() == R.id.seekbar_with_rg) {\r\n            withRgValue = 0.0f;\r\n            updateLabelWithRg();\r\n        } else if (seekBar.getId() == R.id.seekbar_without_rg) {\r\n            withoutRgValue = 0.0f;\r\n            updateLabelWithoutR"}], "metadata": {"task_id": "VinylMusicPlayer/432", "ground_truth": "            withoutRgValue = progress * 0.2f - 15.0f;\r\n            updateLabelWitouthRg();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\preferences\\PreAmpPreferenceDialog.java"}}
{"prompt": "import java.util.ArrayList\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\npublic ArrayList<String> getPaths() {\r\n    Cursor cursor = getReadableDatabase().query(BlacklistStoreColumns.NAME, new String[] { BlacklistStoreColumns.PATH }, null, null, null, null, null);\r\n    ArrayList<String> paths = new ArrayList<>();\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        do {\r\n            paths.add(cursor.getString(0));\r\n        } while (cursor.moveToNext());", "choices": [{"text": "\n        cursor.close();\r\n    }\r\n    return paths;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/438", "ground_truth": "    }\r\n    if (cursor != null)\r\n        cursor.close();\r\n    return paths;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\BlacklistStore.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic void addSongId(final long songId) {", "choices": [{"text": "\n    this.songId = songId;\n}"}], "metadata": {"task_id": "VinylMusicPlayer/442", "ground_truth": "    if (songId == Song.EMPTY_SONG.id) {\r\n        return;\r\n    }\r\n    addSongIds(List.of(songId));\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\HistoryStore.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\nimport android.database.sqlite.SQLiteDatabase\npublic void removeSongIds(@NonNull List<Long> missingIds) {\r\n    if (missingIds.isEmpty())\r\n        return;\r\n    final SQLiteDatabase database = getWritableDatabase();\r\n    database.beginTransaction();\r\n    try {\r\n        for (long id : missingIds) {\r\n            removeSongId(database, id);\r\n        }", "choices": [{"text": "\n    } finally {\r\n        database.endTransaction();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/443", "ground_truth": "        database.setTransactionSuccessful();\r\n    } finally {\r\n        database.endTransaction();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\HistoryStore.java"}}
{"prompt": "import android.database.sqlite.SQLiteDatabase\nimport android.database.Cursor\npublic boolean contains(long id) {\r\n    final SQLiteDatabase database = getReadableDatabase();\r\n    Cursor cursor = database.query(RecentStoreColumns.NAME, new String[] { RecentStoreColumns.ID }, RecentStoreColumns.ID + \"=?\", new String[] { String.valueOf(id) }, null, null, null, null);\r\n    boolean containsId = cursor != null && cursor.moveToFirst();", "choices": [{"text": "\n    return containsId;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/445", "ground_truth": "    if (cursor != null) {\r\n        cursor.close();\r\n    }\r\n    return containsId;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\HistoryStore.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic void addSongs(@NonNull List<Song> songs) {", "choices": [{"text": "\n    for (Song song : songs) {\n        songs.add(song);\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/450", "ground_truth": "    for (Song song : songs) {\r\n        songIds.add(song.id);\r\n    }\r\n    save(null);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\SongList.java"}}
{"prompt": "import java.util.List\nimport java.util.Comparator\nimport java.util.ArrayList\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic void removeSongsAtPosition(@NonNull final List<Integer> positions) {\r\n    final List<Integer> reversedPositions = new ArrayList<>(positions);\r\n    reversedPositions.sort(Comparator.reverseOrder());\r\n    for (final int position : reversedPositions) {\r\n        if (position >= 0 && position < songIds.size()) {", "choices": [{"text": "\n            songIds.remove(position);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/452", "ground_truth": "            songIds.remove(position);\r\n        }\r\n    }\r\n    save(null);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\SongList.java"}}
{"prompt": "import android.content.SharedPreferences\n@Override\r\nvoid load() {\r\n    final SharedPreferences preferences = getPreferences();\r\n    String values = preferences.getString(PREF_NAME_PREFIX + name, \"\");\r\n    songIds.clear();\r\n    try {\r\n        for (String id : values.split(SEPARATOR)) {", "choices": [{"text": "\n            songIds.add(id);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/455", "ground_truth": "            songIds.add(Long.valueOf(id));\r\n        }\r\n    } catch (NumberFormatException ignored) {\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\SongList.java"}}
{"prompt": "/**\r\n * For some performance gain, return a static value for the column index for a week\r\n * WARNING: This function assumes you have selected all columns for it to work\r\n *\r\n * @param week number\r\n * @return column index of that week\r\n */", "choices": [{"text": "\nvar weekIndex = 0;\r\n\r\nfor (var i = 0; i < 7; i++) {\r\n    weekIndex += i;\r\n}\r\n\r\nconsole.log(weekIndex);"}], "metadata": {"task_id": "VinylMusicPlayer/464", "ground_truth": "private static int getColumnIndexForWeek(final int week) {\r\n    // ID, followed by the weeks columns\r\n    return 1 + week;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\SongPlayCountStore.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.Nullable\n@Nullable\r\npublic static StaticPlaylist getPlaylist(final long id) {\r\n    List<StaticPlaylist> all = getAllPlaylists();\r\n    for (StaticPlaylist item : all) {\r\n        Playlist playlist = item.asPlaylist();\r\n        if (playlist.id == id) {", "choices": [{"text": "\n            return playlist;\r\n        }\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/465", "ground_truth": "            return item;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\StaticPlaylist.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.text.TextUtils\n@Nullable\r\npublic static StaticPlaylist getPlaylist(@NonNull final String playlistName) {\r\n    List<StaticPlaylist> all = getAllPlaylists();\r\n    for (StaticPlaylist item : all) {\r\n        Playlist playlist = item.asPlaylist();\r\n        if (TextUtils.equals(playlist.name, playlistName)) {", "choices": [{"text": "\n            return playlist;\r\n        }\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/466", "ground_truth": "            return item;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\StaticPlaylist.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static StaticPlaylist getOrCreatePlaylist(@NonNull final String name) {\r\n    StaticPlaylist result = getPlaylist(name);\r\n    if (result == null) {", "choices": [{"text": "\n        result = new StaticPlaylist(name);\r\n    }\r\n    return result;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/467", "ground_truth": "        result = new StaticPlaylist(name);\r\n        result.save(null);\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\StaticPlaylist.java"}}
{"prompt": "import java.util.ArrayList\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\npublic static ArrayList<Long> getIdsFromCursor(@Nullable Cursor cursor, @NonNull final String columnName) {\r\n    ArrayList<Long> ids = new ArrayList<>();\r\n    if (cursor != null && cursor.moveToFirst()) {\r\n        int idColumn = cursor.getColumnIndex(columnName);\r\n        do {", "choices": [{"text": "\n            ids.add(cursor.getLong(idColumn));\r\n        } while (cursor.moveToNext());\r\n    }\r\n    return ids;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/469", "ground_truth": "            ids.add(cursor.getLong(idColumn));\r\n        } while (cursor.moveToNext());\r\n    }\r\n    return ids;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\provider\\StoreLoader.java"}}
{"prompt": "import androidx.annotation.NonNull\nstatic String extractCategory(@NonNull String mediaID) {\r\n    int pos = mediaID.indexOf(LEAF_SEPARATOR);", "choices": [{"text": "\n    if (pos!= -1) {\r\n        return mediaID.substring(0, pos);\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/470", "ground_truth": "    if (pos >= 0) {\r\n        return mediaID.substring(0, pos);\r\n    }\r\n    return mediaID;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaIDHelper.java"}}
{"prompt": "import androidx.annotation.NonNull\nstatic String extractSubCategoryFromCategory(@NonNull String category) {\r\n    int pos = category.indexOf(CATEGORY_SEPARATOR);", "choices": [{"text": "\n    if (pos!= -1) {\r\n        return category.substring(0, pos);\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/471", "ground_truth": "    if (pos >= 0) {\r\n        return category.substring(pos + CATEGORY_SEPARATOR.length());\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaIDHelper.java"}}
{"prompt": "import androidx.annotation.NonNull\nstatic String extractMusicID(@NonNull String mediaID) {\r\n    int pos = mediaID.indexOf(LEAF_SEPARATOR);", "choices": [{"text": "\n    if (pos!= -1) {\r\n        return mediaID.substring(0, pos);\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/472", "ground_truth": "    if (pos >= 0) {\r\n        return mediaID.substring(pos + LEAF_SEPARATOR.length());\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaIDHelper.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "\n    return (\n        <div>\n            <div>\n                <div>\n                    <div>\n                        <div>\n                            <div>\n                                <div>\n                                    <div>\n                                        <div>\n                                            <div>\n                                                <div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"}], "metadata": {"task_id": "VinylMusicPlayer/473", "ground_truth": "Builder path(@NonNull String fullPath) {\r\n    mBuilder.setMediaId(fullPath);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "\n    return (\n        <div>\n            <div>\n                <div>\n                    <div>\n                        <div>\n                            <div>\n                                <div>\n                                    <div>\n                                        <div>\n                                            <div>\n                                                <div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"}], "metadata": {"task_id": "VinylMusicPlayer/474", "ground_truth": "Builder title(@NonNull String title) {\r\n    mBuilder.setTitle(title);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "\n    return (\n        <div>\n            <div>\n                <div>\n                    <div>\n                        <div>\n                            <div>\n                                <div>\n                                    <div>\n                                        <div>\n                                            <div>\n                                                <div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"}], "metadata": {"task_id": "VinylMusicPlayer/475", "ground_truth": "Builder subTitle(@NonNull String subTitle) {\r\n    mBuilder.setSubtitle(subTitle);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "\n    return (\n        <div>\n            <div>\n                <div>\n                    <div>\n                        <div>\n                            <div>\n                                <div>\n                                    <div>\n                                        <div>\n                                            <div>\n                                                <div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"}], "metadata": {"task_id": "VinylMusicPlayer/476", "ground_truth": "Builder icon(@NonNull Bitmap bitmap) {\r\n    mBuilder.setIconBitmap(bitmap);\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "\n    return (\n        <div>\n            <div>\n                <div>\n                    <div>\n                        <div>\n                            <div>\n                                <div>\n                                    <div>\n                                        <div>\n                                            <div>\n                                                <div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"}], "metadata": {"task_id": "VinylMusicPlayer/477", "ground_truth": "Builder asBrowsable() {\r\n    mFlags |= MediaBrowserCompat.MediaItem.FLAG_BROWSABLE;\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull", "choices": [{"text": "\n    return (\n        <div>\n            <div>\n                <div>\n                    <div>\n                        <div>\n                            <div>\n                                <div>\n                                    <div>\n                                        <div>\n                                            <div>\n                                                <div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"}], "metadata": {"task_id": "VinylMusicPlayer/478", "ground_truth": "Builder asPlayable() {\r\n    mFlags |= MediaBrowserCompat.MediaItem.FLAG_PLAYABLE;\r\n    return this;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\BrowsableMediaItem.java"}}
{"prompt": "import android.util.Log\nimport android.os.PowerManager.WakeLock\nimport android.os.Message\nimport android.os.Handler\nstatic void releaseWakeLockIfHandlerIdle() {\r\n    if (mHandler.hasMessages(MSG_HEADSET_DOUBLE_CLICK_TIMEOUT)) {\r\n        if (DEBUG)\r\n            Log.v(TAG, \"Handler still has messages pending, not releasing wake lock\");\r\n        return;\r\n    }\r\n    if (mWakeLock != null) {\r\n        if (DEBUG)", "choices": [{"text": "            mWakeLock.release();\r\n        mWakeLock = null;\r\n    }\r\n    if (mHandler!= null) {\r\n        mHandler.removeMessages(MSG_HEADSET_DOUBLE_CLICK_TIMEOUT);\r\n        mHandler = null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/485", "ground_truth": "            Log.v(TAG, \"Releasing wake lock\");\r\n        mWakeLock.release();\r\n        mWakeLock = null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MediaButtonIntentReceiver.java"}}
{"prompt": "import android.os.Handler\n@Override\r\npublic void onChange(boolean selfChange) {\r\n    // if a change is detected, remove any scheduled callback\r\n    // then post a new one. This is intended to prevent closely\r\n    // spaced events from generating multiple refresh calls\r\n    synchronized (mMusicService) {\r\n        if (mHandler.getLooper().getThread().isAlive()) {", "choices": [{"text": "\n            mHandler.postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mMusicService.onChange(selfChange);\r\n                }\r\n            }, 1000);\r\n        } else {\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mMusicService.onChange(false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/486", "ground_truth": "            mHandler.removeCallbacks(this);\r\n            mHandler.postDelayed(this, REFRESH_DELAY);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MediaStoreObserver.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.media.MediaPlayer\n/**\r\n * @param path The path of the file, or the http/rtsp URL of the stream\r\n *             you want to play\r\n * @return True if the <code>player</code> has been prepared and is\r\n * ready to play, false otherwise\r\n */\r\n@Override\r\npublic boolean setDataSource(@NonNull final String path) {\r\n    mIsInitialized = false;\r\n    mIsInitialized = setDataSourceImpl(mCurrentMediaPlayer, path);", "choices": [{"text": "    return mIsInitialized;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/488", "ground_truth": "    if (mIsInitialized) {\r\n        setNextDataSource(null);\r\n    }\r\n    return mIsInitialized;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "private boolean mIsInitialized = false;\nprivate final Context context;\npublic static final String TAG = MultiPlayer.class.getSimpleName();\n /**\r\n * Starts or resumes playback.\r\n */\r\n@Override\r\npublic void start() {\r\n    try {", "choices": [{"text": "\n        mIsInitialized = true;\r\n        context = context.getApplicationContext();\r\n    } catch (Exception e) {\r\n        Log.e(TAG, e.getMessage());\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/489", "ground_truth": "        mCurrentMediaPlayer.start();\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.media.MediaPlayer\n/**\r\n * Resets the MediaPlayer to its uninitialized state.\r\n */\r\n@Override", "choices": [{"text": "\npublic class ResetsMediaPlayer extends MediaPlayer {\r\n\r\n    public ResetsMediaPlayer(Context context) {\r\n        super(context);\r\n    }\r\n\r\n    public ResetsMediaPlayer(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n    }\r\n\r\n    public ResetsMediaPlayer(Context context, AttributeSet attrs, int defStyle) {\r\n        super(context, attrs, defStyle);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/490", "ground_truth": "public void stop() {\r\n    mCurrentMediaPlayer.reset();\r\n    mIsInitialized = false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.media.MediaPlayer\n/**\r\n * Releases resources associated with this MediaPlayer object.\r\n */\r\n@Override\r\npublic void release() {\r\n    stop();\r\n    mCurrentMediaPlayer.release();\r\n    if (mNextMediaPlayer != null) {\r\n        mNextMediaPlayer.release();\r\n    }", "choices": [{"text": "\n    mCurrentMediaPlayer.release();\r\n    mNextMediaPlayer.release();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/491", "ground_truth": "    if (mDynamicsProcessing != null) {\r\n        mDynamicsProcessing.release();\r\n        mDynamicsProcessing = null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "/**\r\n * Pauses playback. Call start() to resume.\r\n */\r\n@Override\r\npublic void pause() {\r\n    try {", "choices": [{"text": "\n        start();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/492", "ground_truth": "        mCurrentMediaPlayer.pause();\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import android.media.MediaPlayer\n/**\r\n * Gets the duration of the file.\r\n *\r\n * @return The duration in milliseconds\r\n */\r\n@Override\r\npublic int duration() {\r\n    if (!mIsInitialized) {\r\n        return -1;\r\n    }\r\n    try {\r\n        return mCurrentMediaPlayer.getDuration();", "choices": [{"text": "\n    } catch (Exception e) {\r\n        Log.e(TAG, e.getMessage());\r\n        return -1;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/493", "ground_truth": "    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import android.media.MediaPlayer\n/**\r\n * Gets the current playback position.\r\n *\r\n * @return The current position in milliseconds\r\n */\r\n@Override\r\npublic int position() {\r\n    if (!mIsInitialized) {\r\n        return -1;\r\n    }\r\n    try {\r\n        return mCurrentMediaPlayer.getCurrentPosition();", "choices": [{"text": "\n    } catch (Exception e) {\r\n        Log.e(TAG, e.getMessage());\r\n        return -1;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/494", "ground_truth": "    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n        return -1;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "/**\r\n * Gets the current playback position.\r\n *\r\n * @param whereto The offset in milliseconds from the start to seek to\r\n */\r\n@Override\r\npublic void seek(final int whereto) {\r\n    try {", "choices": [{"text": "\n        if (whereto < 0) {\r\n            whereto = 0;\r\n        }\r\n        if (whereto > 1000) {\r\n            whereto = 1000;\r\n        }\r\n    } catch (final Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/495", "ground_truth": "        mCurrentMediaPlayer.seekTo(whereto);\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "/**\r\n * Set the replay gain to be applied immediately. It should match the tags of the current song.\r\n *\r\n * @param replaygain gain in dB, or NaN for no replay gain (equivalent to 0dB)\r\n */\r\n@Override", "choices": [{"text": "\npublic void setReplaygain(int replaygain) {\r\n    this.replaygain = replaygain;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/498", "ground_truth": "public void setReplayGain(float replaygain) {\r\n    this.replaygain = replaygain;\r\n    updateVolume();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "/**\r\n * Set the ducking factor to be applied immediately.\r\n *\r\n * @param duckingFactor gain as a linear factor, between 0.0 and 1.0.\r\n */\r\n@Override", "choices": [{"text": "\npublic void setDuckingFactor(double duckingFactor) {\r\n    this.duckingFactor = duckingFactor;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/499", "ground_truth": "public void setDuckingFactor(float duckingFactor) {\r\n    this.duckingFactor = duckingFactor;\r\n    updateVolume();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import android.media.MediaPlayer\n@Override\r\npublic void onCompletion(final MediaPlayer mp) {\r\n    if (mp == mCurrentMediaPlayer && mNextMediaPlayer != null) {\r\n        mIsInitialized = false;\r\n        mCurrentMediaPlayer.release();\r\n        mCurrentMediaPlayer = mNextMediaPlayer;\r\n        mIsInitialized = true;\r\n        mNextMediaPlayer = null;\r\n        if (callbacks != null)\r\n            callbacks.onTrackWentToNext();", "choices": [{"text": "\n    } else {\r\n        mIsInitialized = false;\r\n        mNextMediaPlayer.release();\r\n        mCurrentMediaPlayer = null;\r\n        mNextMediaPlayer = null;\r\n        if (callbacks!= null)\r\n            callbacks.onTrackFailed();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/500", "ground_truth": "    } else {\r\n        if (callbacks != null)\r\n            callbacks.onTrackEnded();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MultiPlayer.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.os.HandlerThread\nimport android.os.Handler\nprivate void releaseResources() {\r\n    queueSaveHandler.removeCallbacksAndMessages(null);\r\n    queueSaveHandlerThread.quitSafely();\r\n    synchronized (this) {\r\n        playbackHandler.removeCallbacksAndMessages(null);\r\n        playbackHandlerThread.quitSafely();", "choices": [{"text": "\n        synchronized (this) {\r\n            playbackHandler.removeCallbacksAndMessages(null);\r\n            playbackHandlerThread.quitSafely();\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/509", "ground_truth": "        playback.release();\r\n        playback = null;\r\n    }\r\n    mediaSession.release();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic boolean isPlaying(@NonNull Song song) {\r\n    synchronized (this) {\r\n        if (!isPlaying()) {", "choices": [{"text": "\n            return false;\r\n        }\r\n        if (song.isPlaying()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/511", "ground_truth": "            return false;\r\n        }\r\n        return getCurrentSong().isQuickEqual(song);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "boolean openTrackAndPrepareNextAt(int position) {\r\n    synchronized (this) {\r\n        playingQueue.setCurrentPosition(position);\r\n        boolean prepared = openCurrent();\r\n        if (prepared)\r\n            prepareNextImpl();", "choices": [{"text": "\n        return prepared;\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/514", "ground_truth": "        notifyChange(META_CHANGED);\r\n        notHandledMetaChangedForCurrentTrack = false;\r\n        return prepared;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nprivate boolean openCurrent() {\r\n    synchronized (this) {\r\n        try {\r\n            return (playback != null) && playback.setDataSource(getTrackUri(getCurrentSong()));\r\n        } catch (Exception e) {", "choices": [{"text": "\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/515", "ground_truth": "            OopsHandler.collectStackTrace(e);\r\n            return false;\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "private void updateNotification() {\r\n    if (!getPlayingQueue().isEmpty()) {\r\n        idleNotification.stop();\r\n        playingNotification.update();", "choices": [{"text": "\n    } else {\r\n        idleNotification.start();\r\n        playingNotification.update();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/518", "ground_truth": "    } else {\r\n        playingNotification.stop();\r\n        idleNotification.update();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport com.poupa.vinylmusicplayer.util.OopsHandler\nimport com.poupa.vinylmusicplayer.service.notification.CrashNotification\nimport com.poupa.vinylmusicplayer.R\nimport android.os.Handler\nprivate void updateCrashNotification() {\r\n    final List<String> crashReports = PreferenceUtil.getInstance().getOopsHandlerReports();\r\n    if (crashReports != null && !crashReports.isEmpty()) {", "choices": [{"text": "\n        CrashNotification notification = new CrashNotification(this, crashReports);\r\n        notification.show();\r\n    } else {\r\n        Toast.makeText(this, R.string.no_crash_reports, Toast.LENGTH_SHORT).show();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/519", "ground_truth": "        crashNotification.update();\r\n    } else {\r\n        crashNotification.stop();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.misc.queue.IndexedSong\npublic IndexedSong getIndexedSongAt(int position) {\r\n    synchronized (this) {\r\n        if (position >= 0 && position < playingQueue.size()) {\r\n            return playingQueue.getPlayingQueue().get(position);", "choices": [{"text": "\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/521", "ground_truth": "        } else {\r\n            return IndexedSong.EMPTY_INDEXED_SONG;\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\npublic void cycleRepeatMode() {", "choices": [{"text": "\n    if (mRepeatMode == 0) {\n        mRepeatMode = 1;\n    } else {\n        mRepeatMode = 2;\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/525", "ground_truth": "    synchronized (this) {\r\n        playingQueue.cycleRepeatMode();\r\n    }\r\n    propagateRepeatChange();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void toggleShuffle() {", "choices": [{"text": "\n    if (mShuffleList.size() == 0) {\n        return;\n    }\n    mShuffleList.remove(mShuffleList.size() - 1);\n    mShuffleList.add(mShuffleList.size() - 1);\n}"}], "metadata": {"task_id": "VinylMusicPlayer/529", "ground_truth": "    synchronized (this) {\r\n        playingQueue.toggleShuffle();\r\n    }\r\n    propagateShuffleChange();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void setShuffleMode(final int shuffleMode) {", "choices": [{"text": "(int shuffleMode) {\n    this.shuffleMode = shuffleMode;\n}"}], "metadata": {"task_id": "VinylMusicPlayer/530", "ground_truth": "    synchronized (this) {\r\n        playingQueue.setShuffle(shuffleMode);\r\n    }\r\n    propagateShuffleChange();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic void addSongAfter(int position, Song song) {", "choices": [{"text": "\n    mSongList.add(song);\n    mSongList.add(position, song);\n    mSongList.add(position + 1, song);\n    mSongList.add(position + 2, song);\n    mSongList.add(position + 3, song);\n    mSongList.add(position + 4, song);\n    mSongList.add(position + 5, song);\n    mSongList.add(position + 6, song);\n    mSongList.add(position + 7,"}], "metadata": {"task_id": "VinylMusicPlayer/532", "ground_truth": "    synchronized (this) {\r\n        playingQueue.addAfter(position, song);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.misc.queue.IndexedSong\npublic void addSongBackTo(int position, IndexedSong song) {", "choices": [{"text": "\n    song.addBackTo(position);\n}"}], "metadata": {"task_id": "VinylMusicPlayer/533", "ground_truth": "    synchronized (this) {\r\n        playingQueue.addSongBackTo(position, song);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\npublic void addSongsAfter(int position, Collection<? extends Song> songs) {", "choices": [{"text": "\n    for (Song song : songs) {\n        song.addAfter(position, songs);\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/534", "ground_truth": "    synchronized (this) {\r\n        playingQueue.addAllAfter(position, songs);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic void addSong(Song song) {", "choices": [{"text": "\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add(song);\n    mSongList.add"}], "metadata": {"task_id": "VinylMusicPlayer/535", "ground_truth": "    synchronized (this) {\r\n        playingQueue.add(song);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import java.util.Collection\nimport com.poupa.vinylmusicplayer.model.Song\npublic void addSongs(Collection<? extends Song> songs) {", "choices": [{"text": "\n    for (Song song : songs) {\n        song.addSong(this);\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/536", "ground_truth": "    synchronized (this) {\r\n        playingQueue.addAll(songs);\r\n        notifyChange(QUEUE_CHANGED);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic void removeSongs(@NonNull List<Song> songs) {\r\n    synchronized (this) {\r\n        int newPosition = playingQueue.removeSongs(songs);\r\n        if (newPosition != -1) {", "choices": [{"text": "\n            playingQueue.removeSong(newPosition);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/537", "ground_truth": "            setPosition(newPosition);\r\n        }\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\npublic void moveSong(int from, int to) {", "choices": [{"text": "\n    Song song = new Song();\n    song.setFrom(from);\n    song.setTo(to);\n    mSongManager.moveSong(song);\n}"}], "metadata": {"task_id": "VinylMusicPlayer/538", "ground_truth": "    synchronized (this) {\r\n        playingQueue.move(from, to);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void clearQueue() {\r\n    synchronized (this) {", "choices": [{"text": "(this) {\r\n        queue.clear();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/539", "ground_truth": "        playingQueue.clear();\r\n        setPosition(-1);\r\n    }\r\n    notifyChange(QUEUE_CHANGED);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nstatic final String VINYL_MUSIC_PLAYER_PACKAGE_NAME = \"com.poupa.vinylmusicplayer\";\npublic static final String ACTION_PLAY_PLAYLIST = VINYL_MUSIC_PLAYER_PACKAGE_NAME + \".play.playlist\";\nHandlerThread playbackHandlerThread;\nvoid playSongAtImpl(int position) {\r\n    if (openTrackAndPrepareNextAt(position)) {", "choices": [{"text": "\n        playbackHandlerThread.post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                playSong(position);\r\n            }\r\n        });\r\n    } else {\r\n        playbackHandlerThread.post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                playSong(position);\r\n            }\r\n        });\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/542", "ground_truth": "        play();\r\n    } else {\r\n        SafeToast.show(this, getResources().getString(R.string.unplayable_file));\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void pause() {\r\n    synchronized (this) {\r\n        pausedByTransientLossOfFocus = false;\r\n        if (playback.isPlaying()) {", "choices": [{"text": "\n            playback.pause();\r\n        } else {\r\n            playback.play();\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/543", "ground_truth": "            playback.pause();\r\n            notifyChange(PLAY_STATE_CHANGED);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\npublic void back(boolean skippedLast) {\r\n    if (getSongProgressMillis() > SKIP_THRESHOLD_MS) {", "choices": [{"text": "\n        return;\r\n    }\r\n    if (skippedLast) {\r\n        return;\r\n    }\r\n    Song song = getSong();\r\n    if (song == null) {\r\n        return;\r\n    }\r\n    song.back(true);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/545", "ground_truth": "        seek(0);\r\n    } else {\r\n        playPreviousSong(skippedLast);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "public void seek(int millis) {\r\n    synchronized (this) {\r\n        if (playback != null) {", "choices": [{"text": "\n            playback.seek(millis);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/549", "ground_truth": "            playback.seek(millis);\r\n        }\r\n    }\r\n    throttledSeekHandler.notifySeek();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "@Override\r\npublic void onTrackEnded() {\r\n    acquireWakeLock(30000);\r\n    synchronized (this) {", "choices": [{"text": "\n        super.onTrackEnded();\r\n        releaseWakeLock(30000);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/556", "ground_truth": "        if (playbackHandlerThread.isAlive()) {\r\n            playbackHandler.sendEmptyMessage(TRACK_ENDED);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport android.provider.MediaStore\nprivate void onDiscographyChanged() {\r\n    final boolean resync = PreferenceUtil.getInstance().isQueueSyncWithMediaStoreEnabled();\r\n    if (resync) {\r\n        // If a song is removed from the MediaStore, or updated (tags edited)", "choices": [{"text": "    } else {\r\n        // If a song is added to the MediaStore, or removed from the MediaStore, or updated (tags edited)\r\n        final Discography discography = PreferenceUtil.getInstance().getDiscography();\r\n        if (discography!= null) {\r\n            discography.onDiscographyChanged();\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/561", "ground_truth": "        // reload the queues so that they reflects the latest change\r\n        saveState();\r\n        restoreState();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\MusicService.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nvoid notifySongChanged(Song song) {", "choices": [{"text": "(Song song2) {\n    this.song = song;\n    this.song2 = song2;\n    notifySongChanged(song2);\n}"}], "metadata": {"task_id": "VinylMusicPlayer/572", "ground_truth": "    synchronized (this) {\r\n        stopWatch.reset();\r\n        this.song = song;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\SongPlayCountHelper.java"}}
{"prompt": "void notifyPlayStateChanged(boolean isPlaying) {\r\n    synchronized (this) {\r\n        if (isPlaying) {\r\n            stopWatch.start();", "choices": [{"text": "\n        } else {\r\n            playWatch.stop();\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/573", "ground_truth": "        } else {\r\n            stopWatch.pause();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\SongPlayCountHelper.java"}}
{"prompt": "import android.os.Handler\nprivate final MusicService mMusicService;\nprivate final Handler mHandler;\npublic void notifySeek() {\r\n    synchronized (mMusicService) {\r\n        if (mHandler.getLooper().getThread().isAlive()) {", "choices": [{"text": "\n            mHandler.postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mMusicService.seek(0);\r\n                }\r\n            }, 1000);\r\n        } else {\r\n            mHandler.postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mMusicService.seek(1);\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/574", "ground_truth": "            mHandler.removeCallbacks(this);\r\n            mHandler.postDelayed(this, THROTTLE);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\service\\ThrottledSeekHandler.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static SortOrder<Album> fromPreference(@NonNull String preferenceValue) {\r\n    SortOrder<Album> match = Utils.collectionSearch(SUPPORTED_ORDERS, preferenceValue, x -> x.preferenceValue);", "choices": [{"text": "\n    if (match!= null) {\r\n        return match;\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/576", "ground_truth": "    if (match == null) {\r\n        match = SUPPORTED_ORDERS.get(0);\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\AlbumSortOrder.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static SortOrder<Artist> fromPreference(@NonNull String preferenceValue) {\r\n    SortOrder<Artist> match = Utils.collectionSearch(SUPPORTED_ORDERS, preferenceValue, x -> x.preferenceValue);", "choices": [{"text": "\n    if (match!= null) {\r\n        return match;\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/578", "ground_truth": "    if (match == null) {\r\n        match = SUPPORTED_ORDERS.get(0);\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\ArtistSortOrder.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static SortOrder<File> fromPreference(@NonNull final String preferenceValue) {\r\n    SortOrder<File> match = Utils.collectionSearch(SUPPORTED_ORDERS, preferenceValue, x -> x.preferenceValue);", "choices": [{"text": "\n    if (match!= null) {\r\n        return match;\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/580", "ground_truth": "    if (match == null) {\r\n        match = SUPPORTED_ORDERS.get(0);\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\FileSortOrder.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static SortOrder<Song> fromPreference(@NonNull String preferenceValue) {\r\n    SortOrder<Song> match = Utils.collectionSearch(SUPPORTED_ORDERS, preferenceValue, x -> x.preferenceValue);", "choices": [{"text": "\n    if (match!= null) {\r\n        return match;\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/582", "ground_truth": "    if (match == null) {\r\n        match = SUPPORTED_ORDERS.get(0);\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\SongSortOrder.java"}}
{"prompt": "import java.util.Date\nimport androidx.annotation.NonNull\n@NonNull\r\nstatic String getSectionName(long seconds) {\r\n    final Date date = new Date(1000L * seconds);\r\n    final long millisOneDay = 1000L * 60L * 60L * 24L;\r\n    final long daysSinceToday = ((new Date()).getTime() - date.getTime()) / millisOneDay;\r\n    String format = \"yyyy\";\r\n    if (daysSinceToday >= 0) {\r\n        if (daysSinceToday < 7) {\r\n            format = \"EEE\";\r\n        } else if (daysSinceToday < 365) {", "choices": [{"text": "\n            format = \"EEEE\";\r\n        } else {\r\n            format = \"MMMM\";\r\n        }\r\n    } else {\r\n        format = \"MMMM\";\r\n    }\r\n    return format;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/585", "ground_truth": "            format = \"MMM\";\r\n        }\r\n    }\r\n    return android.text.format.DateFormat.format(format, date).toString();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\SortOrder.java"}}
{"prompt": "import androidx.annotation.NonNull\n@NonNull\r\nstatic String getSectionName(@NonNull final String name) {", "choices": [{"text": "\n    if (name == null) {\r\n        return null;\r\n    }\r\n    return name.substring(0, name.length() - 1);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/586", "ground_truth": "    if (TextUtils.isEmpty(name)) {\r\n        return \"\";\r\n    }\r\n    return String.valueOf(name.charAt(0)).toUpperCase();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\SortOrder.java"}}
{"prompt": "import java.util.function.Function\nimport androidx.annotation.NonNull\nstatic <T, U> T collectionSearch(@NonNull final Iterable<? extends T> collection, final U searchValue, @NonNull final Function<T, U> valueExtractor) {\r\n    T match = null;\r\n    for (final T item : collection) {\r\n        if (valueExtractor.apply(item).equals(searchValue)) {\r\n            match = item;", "choices": [{"text": "\n            break;\r\n        }\r\n    }\r\n    return match;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/587", "ground_truth": "            break;\r\n        }\r\n    }\r\n    return match;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\sort\\SortOrder.java"}}
{"prompt": "import android.view.View\nprivate void setUpViews() {", "choices": [{"text": "\n    mView = (ViewGroup) findViewById(R.id.view_group);\n    mView.setOnClickListener(this);\n    mView.setOnLongClickListener(this);\n    mView.setOnLongClickListener(this);\n    mView.setOnLongClickListener(this);\n    mView.setOnLongClickListener(this);\n    mView.setOnLongClickListener(this);\n    mView.setOnLongClickListener(this);\n    mView.setOnLongClickListener(this);\n    mView.setOnLongClickListener(this);\n"}], "metadata": {"task_id": "VinylMusicPlayer/589", "ground_truth": "    setUpToolbar();\r\n    setUpAppVersion();\r\n    setUpContributorsView();\r\n    setUpOnClickListeners();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AboutActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {", "choices": [{"text": "\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/594", "ground_truth": "        onBackPressed();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AboutActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.adapter.song.AlbumSongAdapter\nimport com.poupa.vinylmusicplayer.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.GridLayoutManager\nimport android.view.View\nprivate void setUpSongsAdapter() {\r\n    adapter = new AlbumSongAdapter(this, getAlbum().songs, false, this);\r\n    layoutBinding.list.setLayoutManager(new GridLayoutManager(this, 1));\r\n    layoutBinding.list.setAdapter(adapter);\r\n    adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\r\n\r\n        @Override\r\n        public void onChanged() {\r\n            super.onChanged();\r\n            if (adapter.getItemCount() == 0) {", "choices": [{"text": "\n                adapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onNothingChanged() {\r\n            super.onNothingChanged();\r\n            adapter.notifyDataSetChanged();\r\n        }\r\n    });\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/602", "ground_truth": "                finish();\r\n            }\r\n        }\r\n    });\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "public static final String EXTRA_ALBUM_ID = \"extra_album_id\";\nAlbumSongAdapter adapter;\nprivate static final int TAG_EDITOR_REQUEST = 2001;\n @Override\r\npublic void onChanged() {", "choices": [{"text": "\n    adapter = new AlbumSongAdapter(this);\r\n    super.onChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged();\r\n    adapter.notifyDataSetChanged"}], "metadata": {"task_id": "VinylMusicPlayer/603", "ground_truth": "    super.onChanged();\r\n    if (adapter.getItemCount() == 0) {\r\n        finish();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, final Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);", "choices": [{"text": "\n    if (resultCode == RESULT_OK) {\r\n        Intent intent = data.getParcelableExtra(EXTRA_INTENT);\r\n        if (intent!= null) {\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/605", "ground_truth": "    if (requestCode == TAG_EDITOR_REQUEST) {\r\n        reload();\r\n        setResult(RESULT_OK);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic void onBackPressed() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);", "choices": [{"text": "\n        cab = null;\r\n    }\r\n    super.onBackPressed();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/607", "ground_truth": "    } else {\r\n        layoutBinding.list.stopScroll();\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/610", "ground_truth": "public void setStatusbarColor(int color) {\r\n    super.setStatusbarColor(color);\r\n    setLightStatusbar(false);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Album\nprivate Album getAlbum() {", "choices": [{"text": "\n    if (album == null) {\n        album = new Album();\n    }\n    return album;\n}"}], "metadata": {"task_id": "VinylMusicPlayer/611", "ground_truth": "    if (album == null) {\r\n        album = new Album();\r\n    }\r\n    return album;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\AlbumDetailActivity.java"}}
{"prompt": "public static final String EXTRA_ARTIST_ID = \"extra_artist_id\";\nprivate static final int REQUEST_CODE_SELECT_IMAGE = 1000;\nprivate static final int LOADER_ID = LoaderIds.ARTIST_DETAIL_ACTIVITY;\n @Override\r\npublic void onChanged() {", "choices": [{"text": "\n    super.onChanged();\r\n    Intent intent = getIntent();\r\n    String artistId = intent.getStringExtra(EXTRA_ARTIST_ID);\r\n    if (artistId!= null) {\r\n        setArtistId(artistId);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/618", "ground_truth": "    super.onChanged();\r\n    if (albumAdapter.getItemCount() == 0) {\r\n        finish();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.CustomArtistImageUtil\nimport com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.R\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, final Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    if (requestCode == REQUEST_CODE_SELECT_IMAGE) {\r\n        if (resultCode == RESULT_OK) {\r\n            CustomArtistImageUtil.getInstance(this).setCustomArtistImage(artist, data.getData(), this::loadArtistImage);\r\n        }\r\n    } else {", "choices": [{"text": "\n        super.onActivityResult(requestCode, resultCode, data);\r\n        CustomArtistImageUtil.getInstance(this).setCustomArtistImage(artist, data.getData(), this::loadArtistImage);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/621", "ground_truth": "        if (resultCode == RESULT_OK) {\r\n            reload();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic void onBackPressed() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);", "choices": [{"text": "\n        cab = null;\r\n    }\r\n    super.onBackPressed();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/625", "ground_truth": "    } else {\r\n        albumRecyclerView.stopScroll();\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/626", "ground_truth": "public void setStatusbarColor(int color) {\r\n    super.setStatusbarColor(color);\r\n    setLightStatusbar(false);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Artist\nprivate Artist getArtist() {", "choices": [{"text": "\n    return mArtist;\n}"}], "metadata": {"task_id": "VinylMusicPlayer/627", "ground_truth": "    if (artist == null) {\r\n        artist = Artist.EMPTY;\r\n    }\r\n    return artist;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\ArtistDetailActivity.java"}}
{"prompt": "import androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\nprotected void onPostCreate(@Nullable Bundle savedInstanceState) {", "choices": [{"text": "\n    super.onPostCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    ButterKnife.bind(this);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/632", "ground_truth": "    super.onPostCreate(savedInstanceState);\r\n    if (!hasPermissions()) {\r\n        requestPermissions();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsBaseActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.os.Build\nimport android.content.pm.PackageManager\nprotected boolean hasPermissions() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && permissions != null) {\r\n        for (String permission : permissions) {\r\n            if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r\n                return false;", "choices": [{"text": "\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/635", "ground_truth": "            }\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsBaseActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport com.poupa.vinylmusicplayer.R\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    final Discography discog = Discography.getInstance();\r\n    discog.removeActivity(this);\r\n    MusicPlayerRemote.unbindFromService(serviceToken);", "choices": [{"text": "\n    MusicPlayerRemote.unbindFromService(serviceToken);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/636", "ground_truth": "    if (receiverRegistered) {\r\n        unregisterReceiver(musicStateReceiver);\r\n        receiverRegistered = false;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nimport com.poupa.vinylmusicplayer.R\n@Override\r\npublic void onServiceDisconnected() {\r\n    if (receiverRegistered) {\r\n        unregisterReceiver(musicStateReceiver);\r\n        receiverRegistered = false;\r\n    }\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\n        listener.onServiceDisconnected();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/639", "ground_truth": "        if (listener != null) {\r\n            listener.onServiceDisconnected();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nprivate MusicStateReceiver musicStateReceiver;\nprivate final ArrayList<MusicServiceEventListener> mMusicServiceEventListeners = new ArrayList<>();\nprivate MusicPlayerRemote.ServiceToken serviceToken;\n@Override\r\npublic void onPlayingMetaChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\n        listener.onPlayingMetaChanged();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/640", "ground_truth": "        if (listener != null) {\r\n            listener.onPlayingMetaChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\n@Override\r\npublic void onQueueChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\n        listener.onQueueChanged();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/641", "ground_truth": "        if (listener != null) {\r\n            listener.onQueueChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nprivate MusicStateReceiver musicStateReceiver;\nprivate boolean receiverRegistered;\nprivate final ArrayList<MusicServiceEventListener> mMusicServiceEventListeners = new ArrayList<>();\n@Override\r\npublic void onPlayStateChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\n        listener.onPlayStateChanged();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/642", "ground_truth": "        if (listener != null) {\r\n            listener.onPlayStateChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\n@Override\r\npublic void onMediaStoreChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\n        listener.onMediaStoreChanged();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/643", "ground_truth": "        if (listener != null) {\r\n            listener.onMediaStoreChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nimport com.poupa.vinylmusicplayer.R\n@Override\r\npublic void onRepeatModeChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\n        listener.onRepeatModeChanged(mRepeatMode);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/644", "ground_truth": "        if (listener != null) {\r\n            listener.onRepeatModeChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.service.MusicService\nimport com.poupa.vinylmusicplayer.interfaces.MusicServiceEventListener\nprivate MusicStateReceiver musicStateReceiver;\nprivate final ArrayList<MusicServiceEventListener> mMusicServiceEventListeners = new ArrayList<>();\nprivate boolean receiverRegistered;\n@Override\r\npublic void onShuffleModeChanged() {\r\n    for (MusicServiceEventListener listener : mMusicServiceEventListeners) {", "choices": [{"text": "\n        listener.onShuffleModeChanged();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/645", "ground_truth": "        if (listener != null) {\r\n            listener.onShuffleModeChanged();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsMusicServiceActivity.java"}}
{"prompt": "import android.view.ViewTreeObserver\nimport android.view.View\n@Override\r\npublic void onGlobalLayout() {\r\n    slidingUpPanelLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);\r\n    switch(getPanelState()) {\r\n        case EXPANDED:\r\n            onPanelSlide(slidingUpPanelLayout, 1);\r\n            onPanelExpanded(slidingUpPanelLayout);\r\n            break;\r\n        case COLLAPSED:\r\n            onPanelCollapsed(slidingUpPanelLayout);\r\n            break;", "choices": [{"text": "\n        default:\r\n            break;\r\n    }\r\n    slidingUpPanelLayout.getViewTreeObserver().addOnGlobalLayoutListener(this);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/647", "ground_truth": "        default:\r\n            playerFragment.onHide();\r\n            break;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "private ValueAnimator navigationBarColorAnimator;\nprivate int taskColor;\nAbsPlayerFragment playerFragment;\n @Override", "choices": [{"text": "\n    public void setTaskColor(int taskColor) {\n        this.taskColor = taskColor;\n        navigationBarColorAnimator.setDuration(1000);\n        navigationBarColorAnimator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationStart(Animator animation) {\n                navigationBarColorAnimator.start();\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                navigationBarColorAnimator.cancel();\n            }\n        });\n    }"}], "metadata": {"task_id": "VinylMusicPlayer/648", "ground_truth": "protected void onStart() {\r\n    super.onStart();\r\n    Discography.getInstance().addChangedListener(onDiscographyChanged);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "AbsPlayerFragment playerFragment;\nprivate int taskColor;\nprivate boolean lightStatusbar;\n @Override", "choices": [{"text": "\n public void setTaskColor(int taskColor) {\n        this.taskColor = taskColor;\n    }\n\n    public void setLightStatusbar(boolean lightStatusbar) {\n        this.lightStatusbar = lightStatusbar;\n    }\n\n    public int getTaskColor() {\n        return taskColor;\n    }\n\n    public void setLightStatusbar(boolean lightStatusbar) {\n        this.lightStatusbar = lightStatusbar;\n    }\n\n    public boolean isLightStatusbar() {\n        return lightStatusbar;\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/649", "ground_truth": "protected void onStop() {\r\n    Discography.getInstance().removeChangedListener(onDiscographyChanged);\r\n    super.onStop();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "private int taskColor;\nAbsPlayerFragment playerFragment;\nprivate int navigationbarColor;\n @Override", "choices": [{"text": "\npublic void setTaskColor(int taskColor) {\n    this.taskColor = taskColor;\n}\n\npublic void setPlayerFragment(AbsPlayerFragment playerFragment) {\n    this.playerFragment = playerFragment;\n}\n\npublic int getNavigationbarColor() {\n    return navigationbarColor;\n}\n\npublic void setNavigationbarColor(int navigationbarColor) {\n    this.navigationbarColor = navigationbarColor;\n}"}], "metadata": {"task_id": "VinylMusicPlayer/660", "ground_truth": "public void onBackPressed() {\r\n    if (!handleBackPress())\r\n        super.onBackPressed();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "import com.sothree.slidinguppanel.SlidingUpPanelLayout\nimport androidx.fragment.app.Fragment\npublic boolean handleBackPress() {\r\n    if (slidingUpPanelLayout.getPanelHeight() != 0 && playerFragment.onBackPressed())\r\n        return true;\r\n    if (getPanelState() == SlidingUpPanelLayout.PanelState.EXPANDED) {", "choices": [{"text": "\n        playerFragment.onBackPressed();\r\n        return true;\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/661", "ground_truth": "        collapsePanel();\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsSlidingMusicPanelActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/668", "ground_truth": "protected void onDestroy() {\r\n    Thread.setDefaultUncaughtExceptionHandler(null);\r\n    super.onDestroy();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsThemeActivity.java"}}
{"prompt": "import com.kabouzeid.appthemehelper.ThemeStore\nimport android.graphics.Color\npublic void setNavigationbarColor(int color) {\r\n    if (ThemeStore.coloredNavigationBar(this)) {", "choices": [{"text": "\n        this.setNavigationbarColor(Color.parseColor(color));\r\n    } else {\r\n        this.setNavigationbarColor(Color.parseColor(color));\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/671", "ground_truth": "        ATH.setNavigationbarColor(this, color);\r\n    } else {\r\n        ATH.setNavigationbarColor(this, Color.BLACK);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\base\\AbsThemeActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {", "choices": [{"text": "\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/672", "ground_truth": "        onBackPressed();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\bugreport\\BugReportActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/679", "ground_truth": "public void onChanged() {\r\n    super.onChanged();\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\GenreDetailActivity.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic void onBackPressed() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);", "choices": [{"text": "\n        cab = null;\r\n    }\r\n    super.onBackPressed();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/683", "ground_truth": "    } else {\r\n        layoutBinding.recyclerView.stopScroll();\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\GenreDetailActivity.java"}}
{"prompt": "import com.h6ah4i.android.widget.advrecyclerview.utils.WrapperAdapterUtils\nimport android.view.View\n@Override\r\nprotected void onDestroy() {\r\n    layoutBinding.recyclerView.setAdapter(null);\r\n    if (wrappedAdapter != null) {\r\n        WrapperAdapterUtils.releaseAll(wrappedAdapter);", "choices": [{"text": "\n        wrappedAdapter = null;\r\n    }\r\n    super.onDestroy();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/686", "ground_truth": "        wrappedAdapter = null;\r\n    }\r\n    adapter = null;\r\n    super.onDestroy();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\GenreDetailActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.content.Intent\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    if (requestCode == APP_INTRO_REQUEST) {\r\n        blockRequestPermissions = false;", "choices": [{"text": "\n    } else {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/690", "ground_truth": "        if (!hasPermissions()) {\r\n            requestPermissions();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/691", "ground_truth": "protected void requestPermissions() {\r\n    if (!blockRequestPermissions)\r\n        super.requestPermissions();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "NavigationView navigationView;\nMainActivityFragmentCallbacks currentFragment;\nprivate View navigationDrawerHeader;\n @Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.navigation_view);\n        navigationDrawerHeader = (View) findViewById(R.id.navigation_drawer_header);\n        navigationDrawerHeader.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                navigationDrawerHeader.closeDrawer(GravityCompat.START);\n            }\n        });\n    }"}], "metadata": {"task_id": "VinylMusicPlayer/692", "ground_truth": "public void onPlayingMetaChanged() {\r\n    super.onPlayingMetaChanged();\r\n    updateNavigationDrawerHeader();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        if (drawerLayout.isDrawerOpen(navigationView)) {\r\n            drawerLayout.closeDrawer(navigationView);\r\n        } else {\r\n            drawerLayout.openDrawer(navigationView);", "choices": [{"text": "\n            return true;\r\n        }\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/694", "ground_truth": "        }\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "import androidx.annotation.NonNull\nimport android.util.Log\nimport android.content.Intent\nprivate long parseIdFromIntent(@NonNull Intent intent, String longKey, String stringKey) {\r\n    long id = intent.getLongExtra(longKey, -1);\r\n    if (id < 0) {\r\n        String idString = intent.getStringExtra(stringKey);\r\n        if (idString != null) {\r\n            try {\r\n                id = Long.parseLong(idString);\r\n            } catch (NumberFormatException e) {\r\n                Log.e(TAG, e.getMessage());", "choices": [{"text": "\n            id = Long.parseLong(idString);\r\n        }\r\n    }\r\n    return id;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/696", "ground_truth": "            }\r\n        }\r\n    }\r\n    return id;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport com.poupa.vinylmusicplayer.dialogs.ChangelogDialog\nimport android.os.Build\nimport android.content.pm.PackageManager\nimport android.content.pm.PackageInfo\nprivate void showChangelog() {\r\n    try {\r\n        PackageInfo pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);\r\n        int currentVersion = pInfo.versionCode;\r\n        if (currentVersion != PreferenceUtil.getInstance().getLastChangelogVersion()) {\r\n            new ChangelogDialog.Builder(this).show();", "choices": [{"text": "\n        } else {\r\n            new ChangelogDialog.Builder(this).show();\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/700", "ground_truth": "        }\r\n    } catch (PackageManager.NameNotFoundException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\MainActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/703", "ground_truth": "public void onChanged() {\r\n    super.onChanged();\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\PlaylistDetailActivity.java"}}
{"prompt": "private AttachedCab cab;\nprivate SongAdapter adapter;\nprivate ActivityPlaylistDetailBinding layoutBinding;\n @Override\r\npublic void onBackPressed() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);", "choices": [{"text": "\n        cab = null;\r\n        adapter = null;\r\n        layoutBinding = null;\r\n    }\r\n    super.onBackPressed();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/707", "ground_truth": "    } else {\r\n        layoutBinding.recyclerView.stopScroll();\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\PlaylistDetailActivity.java"}}
{"prompt": "@Override\r\nprotected void onDestroy() {\r\n    if (recyclerViewDragDropManager != null) {\r\n        recyclerViewDragDropManager.release();\r\n        recyclerViewDragDropManager = null;\r\n    }\r\n    layoutBinding.recyclerView.setItemAnimator(null);\r\n    layoutBinding.recyclerView.setAdapter(null);\r\n    if (wrappedAdapter != null) {\r\n        WrapperAdapterUtils.releaseAll(wrappedAdapter);", "choices": [{"text": "(wrappedAdapter);\r\n        wrappedAdapter = null;\r\n    }\r\n    super.onDestroy();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/711", "ground_truth": "        wrappedAdapter = null;\r\n    }\r\n    adapter = null;\r\n    super.onDestroy();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\PlaylistDetailActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/717", "ground_truth": "public boolean onMenuItemActionCollapse(MenuItem item) {\r\n    onBackPressed();\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SearchActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/723", "ground_truth": "public boolean onQueryTextSubmit(String query) {\r\n    hideSoftKeyboard();\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SearchActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/724", "ground_truth": "public boolean onQueryTextChange(String newText) {\r\n    search(newText);\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SearchActivity.java"}}
{"prompt": "private void hideSoftKeyboard() {", "choices": [{"text": "\n    if (mSoftKeyboard!= null) {\n        mSoftKeyboard.hide();\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/725", "ground_truth": "    Util.hideSoftKeyboard(SearchActivity.this);\r\n    if (searchView != null) {\r\n        searchView.clearFocus();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SearchActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {", "choices": [{"text": "\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/727", "ground_truth": "        onBackPressed();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SettingsActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.media.audiofx.AudioEffect\nimport android.content.pm.PackageManager\nimport android.content.Intent\nimport android.app.Activity\nprivate boolean hasEqualizer() {\r\n    final Intent effects = new Intent(AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL);\r\n    if (getActivity() != null) {\r\n        PackageManager pm = getActivity().getPackageManager();", "choices": [{"text": "\n        if (pm!= null) {\r\n            effects.putExtra(AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL, true);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/731", "ground_truth": "        ResolveInfo ri = pm.resolveActivity(effects, 0);\r\n        return ri != null;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\SettingsActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    int id = item.getItemId();\r\n    if (id == android.R.id.home) {", "choices": [{"text": "\n        finish();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/738", "ground_truth": "        super.onBackPressed();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport android.graphics.Bitmap\nvoid setImageBitmap(@Nullable final Bitmap bitmap, int bgColor) {\r\n    if (bitmap == null) {\r\n        image.setImageResource(R.drawable.default_album_art);", "choices": [{"text": "\n    } else {\r\n        image.setImageBitmap(bitmap, bgColor);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/742", "ground_truth": "    } else {\r\n        image.setImageBitmap(bitmap);\r\n    }\r\n    setColors(bgColor);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/745", "ground_truth": "protected void onPostExecute(String[] toBeScanned) {\r\n    super.onPostExecute(toBeScanned);\r\n    scan(toBeScanned);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/746", "ground_truth": "protected void onCancelled(String[] toBeScanned) {\r\n    super.onCancelled(toBeScanned);\r\n    scan(toBeScanned);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import java.util.List\nimport org.jaudiotagger.tag.Tag\nimport org.jaudiotagger.tag.FieldKey\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nstatic String getArtistName(@NonNull final AudioFile audio) {\r\n    try {\r\n        List<String> tags = audio.getTagOrCreateAndSetDefault().getAll(FieldKey.ARTIST);", "choices": [{"text": "\n        return tags.get(0);\r\n    } catch (NullPointerException e) {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/751", "ground_truth": "        return MultiValuesTagUtil.tagEditorMerge(tags);\r\n    } catch (Exception ignored) {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import java.util.List\nimport org.jaudiotagger.tag.Tag\nimport org.jaudiotagger.tag.FieldKey\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nstatic String getAlbumArtistName(@NonNull final AudioFile audio) {\r\n    try {\r\n        List<String> tags = audio.getTagOrCreateAndSetDefault().getAll(FieldKey.ALBUM_ARTIST);", "choices": [{"text": "\n        return tags!= null? tags.get(0) : null;\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/752", "ground_truth": "        return MultiValuesTagUtil.tagEditorMerge(tags);\r\n    } catch (Exception ignored) {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import java.util.List\nimport org.jaudiotagger.tag.Tag\nimport org.jaudiotagger.tag.FieldKey\nimport org.jaudiotagger.audio.AudioFile\nimport com.poupa.vinylmusicplayer.util.Util\nimport com.poupa.vinylmusicplayer.discog.tagging.MultiValuesTagUtil\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nstatic String getGenreName(@NonNull final AudioFile audio) {\r\n    try {\r\n        String tag = audio.getTagOrCreateAndSetDefault().getFirst(FieldKey.GENRE);\r\n        List<String> genres = MultiValuesTagUtil.split(tag);", "choices": [{"text": "\n        if (genres.size() == 1) {\r\n            return genres.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/753", "ground_truth": "        return MultiValuesTagUtil.tagEditorMerge(genres);\r\n    } catch (Exception ignored) {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AbsTagEditorActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.AutoCloseAudioFile\nimport com.poupa.vinylmusicplayer.model.Song\nprivate void fillViewsWithFileTags() {\r\n    try (AutoCloseAudioFile audio = getAudioFile()) {\r\n        if (audio != null) {\r\n            albumTitle.setText(getAlbumTitle(audio.get()));\r\n            albumArtist.setText(getAlbumArtistName(audio.get()));\r\n            genre.setText(getGenreName(audio.get()));\r\n            year.setText(getSongYear(audio.get()));", "choices": [{"text": "\n            albumArtist.setText(getAlbumArtistName(audio.get()));\r\n            genre.setText(getGenreName(audio.get()));\r\n            year.setText(getSongYear(audio.get()));\r\n        } else {\r\n            albumTitle.setText(null);\r\n            albumArtist.setText(null);\r\n            genre.setText(null);\r\n            year.setText(null);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/760", "ground_truth": "        }\r\n    } catch (Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AlbumTagEditorActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.VinylMusicPlayerColorUtil\nimport com.poupa.vinylmusicplayer.util.MusicUtil\nimport com.poupa.vinylmusicplayer.util.AutoCloseAudioFile\nimport com.poupa.vinylmusicplayer.R\nimport com.kabouzeid.appthemehelper.util.ATHUtil\nimport android.graphics.Color\nimport android.graphics.Bitmap\n@Override\r\nprotected void loadCurrentImage() {\r\n    try (AutoCloseAudioFile audio = getAudioFile()) {\r\n        Bitmap bitmap = MusicUtil.getMediaStoreAlbumCover(audio);\r\n        setImageBitmap(bitmap, VinylMusicPlayerColorUtil.getColor(VinylMusicPlayerColorUtil.generatePalette(bitmap), ATHUtil.resolveColor(this, R.attr.defaultFooterColor)));", "choices": [{"text": "\n        setImageBitmap(bitmap, VinylMusicPlayerColorUtil.getColor(VinylMusicPlayerColorUtil.generatePalette(bitmap), ATHUtil.resolveColor(this, R.attr.defaultFooterColor)));\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/761", "ground_truth": "        deleteAlbumArt = false;\r\n    } catch (Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AlbumTagEditorActivity.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.databinding.ActivityAlbumTagEditorBinding\nimport androidx.viewbinding.ViewBinding\nimport androidx.annotation.NonNull\nimport android.view.LayoutInflater\n@Override\r\n@NonNull\r\nprotected ViewBinding getViewBinding() {\r\n    ActivityAlbumTagEditorBinding binding = ActivityAlbumTagEditorBinding.inflate(LayoutInflater.from(this));\r\n    albumTitle = binding.title;\r\n    albumArtist = binding.albumArtist;\r\n    genre = binding.genre;\r\n    year = binding.year;\r\n    fab = binding.playPauseFab;\r\n    observableScrollView = binding.observableScrollView;", "choices": [{"text": "    return binding;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/764", "ground_truth": "    toolbar = binding.toolbar;\r\n    image = binding.image;\r\n    header = binding.header;\r\n    return binding;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\activities\\tageditor\\AlbumTagEditorActivity.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/771", "ground_truth": "public void onDetach() {\r\n    super.onDetach();\r\n    activity = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\AbsMusicServiceFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/773", "ground_truth": "public void onDestroyView() {\r\n    super.onDestroyView();\r\n    activity.removeMusicServiceEventListener(this);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\AbsMusicServiceFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/774", "ground_truth": "public void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setHasOptionsMenu(true);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\AbsMainActivityFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.ui.activities.MainActivity\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.os.Bundle\nimport android.app.Activity\n@Override\r\npublic void onViewCreated(@NonNull final View view, @Nullable final Bundle savedInstanceState) {\r\n    getMainActivity().setStatusbarColorAuto();\r\n    getMainActivity().setNavigationbarColorAuto();\r\n    getMainActivity().setTaskDescriptionColorAuto();\r\n    setUpAppbarColor();", "choices": [{"text": "\n    super.onViewCreated(view, savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/781", "ground_truth": "    setUpToolbar();\r\n    setUpBreadCrumbs();\r\n    setUpRecyclerView();\r\n    setUpAdapter();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import java.util.List\nimport java.util.LinkedList\nimport java.io.File\nimport com.poupa.vinylmusicplayer.ui.activities.MainActivity\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.adapter.SongFileAdapter\nimport com.poupa.vinylmusicplayer.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.app.Activity\nprivate void setUpAdapter() {\r\n    adapter = new SongFileAdapter(getMainActivity(), new LinkedList<>(), this, this);\r\n    adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\r\n\r\n        @Override\r\n        public void onChanged() {\r\n            super.onChanged();\r\n            checkIsEmpty();", "choices": [{"text": "\n        }\r\n\r\n        @Override\r\n        public void onEmpty() {\r\n            super.onEmpty();\r\n            checkIsEmpty();\r\n        }\r\n    });\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/784", "ground_truth": "        }\r\n    });\r\n    layoutBinding.recyclerView.setAdapter(adapter);\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/785", "ground_truth": "public void onChanged() {\r\n    super.onChanged();\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/786", "ground_truth": "public void onPause() {\r\n    super.onPause();\r\n    saveScrollPosition();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/787", "ground_truth": "public void onDestroyView() {\r\n    layoutBinding.appbar.removeOnOffsetChangedListener(this);\r\n    super.onDestroyView();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic boolean handleBackPress() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {\r\n        AttachedCabKt.destroy(cab);\r\n        return true;\r\n    }\r\n    if (layoutBinding.breadCrumbs.popHistory()) {", "choices": [{"text": "\n        AttachedCabKt.destroy(cab);\r\n        return true;\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/788", "ground_truth": "        setCrumb(layoutBinding.breadCrumbs.lastHistory(), false);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.sort.SortOrder\npublic final String getSortOrder() {", "choices": [{"text": "\n    if (sortOrder == null) {\n        return null;\n    } else {\n        return sortOrder.toString();\n    }\n}"}], "metadata": {"task_id": "VinylMusicPlayer/795", "ground_truth": "    if (sortOrder == null) {\r\n        sortOrder = loadSortOrder();\r\n    }\r\n    return sortOrder;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.sort.SortOrder\nimport com.poupa.vinylmusicplayer.sort.FileSortOrder\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\nprivate boolean handleSortOrderMenuItem(@NonNull final MenuItem item) {\r\n    String sortOrderStr = null;\r\n    final int itemId = item.getItemId();\r\n    final SortOrder<File> sorter = FileSortOrder.fromMenuResourceId(itemId);\r\n    if (sorter != null) {\r\n        sortOrderStr = sorter.preferenceValue;\r\n    }\r\n    if (sortOrderStr != null) {\r\n        item.setChecked(true);", "choices": [{"text": "\n        return true;\r\n    } else {\r\n        item.setChecked(false);\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/798", "ground_truth": "        setAndSaveSortOrder(sortOrderStr);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/799", "ground_truth": "protected void onPreExecute() {\r\n    super.onPreExecute();\r\n    checkCallbackReference();\r\n    checkContextReference();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import java.lang.ref.WeakReference\nimport com.poupa.vinylmusicplayer.R\nimport android.content.Context\nprivate Context checkContextReference() {\r\n    final Context context = contextWeakReference.get();", "choices": [{"text": "\n    if (context!= null) {\r\n        return context;\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/801", "ground_truth": "    if (context == null) {\r\n        cancel(false);\r\n    }\r\n    return context;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import java.util.List\nimport java.lang.ref.WeakReference\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\nprivate final OnPathsListedCallback onPathsListedCallback;\nprivate FragmentFolderBinding layoutBinding;\nprivate static final String PATH = \"path\";\nprivate OnSongsListedCallback checkCallbackReference() {\r\n    final OnSongsListedCallback callback = callbackWeakReference.get();", "choices": [{"text": "\n    if (callback == null) {\r\n        callback = new OnSongsListedCallback() {\r\n            @Override\r\n            public void onSongsListed(List<Song> songList) {\r\n                onPathsListedCallback.onSongsListed(songList);\r\n            }\r\n        };\r\n    }\r\n    return callback;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/802", "ground_truth": "    if (callback == null) {\r\n        cancel(false);\r\n    }\r\n    return callback;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import android.content.Context\n@Override\r\nprotected void onPreExecute() {\r\n    super.onPreExecute();\r\n    if (!isContextStillInMemory()) {\r\n        return;", "choices": [{"text": "\n    }\r\n    if (isContextStillInMemory()) {\r\n        return;\r\n    }\r\n    mContext = this;\r\n    if (mContext.getApplicationContext()!= null) {\r\n        mContext.setApplicationContext(this);\r\n    }\r\n    if (mContext.getContentResolver()!= null) {\r\n        mContext.setContentResolver(this);\r\n    }\r\n    if (mContext.getContentResolver()!= null) {\r\n        mContext.setContentResolver(this);\r\n    }\r"}], "metadata": {"task_id": "VinylMusicPlayer/803", "ground_truth": "    }\r\n    if (!checkAndSetScanningGuard(true)) {\r\n        cancel(false);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/804", "ground_truth": "protected void onCancelled(final String[] result) {\r\n    checkAndSetScanningGuard(false);\r\n    super.onCancelled(result);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "private synchronized boolean checkAndSetScanningGuard(boolean value) {\r\n    if (value && !scanningGuard) {\r\n        scanningGuard = true;\r\n        // success\r\n        return true;\r\n    } else if (!value) {\r\n        scanningGuard = false;\r\n        // success", "choices": [{"text": "\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/806", "ground_truth": "        return true;\r\n    }\r\n    // failure\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import android.content.Context\nprivate boolean isContextStillInMemory() {\r\n    if (getContext() == null) {\r\n        cancel(false);", "choices": [{"text": "(true);\r\n        return true;\r\n    } else {\r\n        cancel(false);\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/807", "ground_truth": "        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\folders\\FoldersFragment.java"}}
{"prompt": "import com.afollestad.materialcab.attached.AttachedCabKt\nimport com.afollestad.materialcab.attached.AttachedCab\n@Override\r\npublic boolean handleBackPress() {\r\n    if (cab != null && AttachedCabKt.isActive(cab)) {", "choices": [{"text": "\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/815", "ground_truth": "        AttachedCabKt.destroy(cab);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\LibraryFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/816", "ground_truth": "public void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setHasOptionsMenu(true);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerFragment.java"}}
{"prompt": "private int gridSize;\nprivate int currentLayoutRes;\nprivate String sortOrder;\n public final int getGridSize() {\r\n    if (gridSize == 0) {\r\n        if (isLandscape()) {\r\n            gridSize = loadGridSizeLand();\r\n        } else {", "choices": [{"text": "\n            gridSize = loadGridSizeLand();\r\n        }\r\n    }\r\n    return gridSize;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/817", "ground_truth": "            gridSize = loadGridSize();\r\n        }\r\n    }\r\n    return gridSize;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "/**\r\n * @return whether the palette should be used at all or not\r\n */\r\npublic final boolean usePalette() {\r\n    if (!usePaletteInitialized) {", "choices": [{"text": "\n        usePaletteInitialized = true;\r\n    }\r\n    return usePalette;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/819", "ground_truth": "        usePalette = loadUsePalette();\r\n        usePaletteInitialized = true;\r\n    }\r\n    return usePalette;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "private String sortOrder;\nprivate int currentLayoutRes;\nprivate boolean usePaletteInitialized;\n public final String getSortOrder() {", "choices": [{"text": "\n        return sortOrder;\n    }\n    public final void setSortOrder(String sortOrder) {\n        this.sortOrder = sortOrder;\n    }\n    public final int getCurrentLayoutRes() {\n        return currentLayoutRes;\n    }\n    public final void setCurrentLayoutRes(int currentLayoutRes) {\n        this.currentLayoutRes = currentLayoutRes;\n    }\n    public final boolean isUsePaletteInitialized() {\n        return usePaletteInitialized;\n    }\n    public final void setUsePaletteInitialized(boolean usePaletteInitialized) {\n        this.usePaletteInitialized = usePalette"}], "metadata": {"task_id": "VinylMusicPlayer/820", "ground_truth": "    if (sortOrder == null) {\r\n        sortOrder = loadSortOrder();\r\n    }\r\n    return sortOrder;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.LayoutRes\npublic void setAndSaveGridSize(final int gridSize) {\r\n    int oldLayoutRes = getItemLayoutRes();\r\n    this.gridSize = gridSize;\r\n    if (isLandscape()) {\r\n        saveGridSizeLand(gridSize);\r\n    } else {\r\n        saveGridSize(gridSize);\r\n    }\r\n    // only recreate the adapter and layout manager if the layout currentLayoutRes has changed\r\n    if (oldLayoutRes != getItemLayoutRes()) {\r\n        invalidateLayoutManager();", "choices": [{"text": "\n        invalidateLayoutManager();\r\n    }\r\n    this.gridSize = gridSize;\r\n    if (isLandscape()) {\r\n        saveGridSizeLand(gridSize);\r\n    } else {\r\n        saveGridSize(gridSize);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/821", "ground_truth": "        invalidateAdapter();\r\n    } else {\r\n        setGridSize(gridSize);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport androidx.annotation.LayoutRes\nimport android.view.View\nprotected void applyRecyclerViewPaddingForLayoutRes(@NonNull RecyclerView recyclerView, @LayoutRes int res) {\r\n    int padding;\r\n    if (res == R.layout.item_grid) {\r\n        padding = (int) (getResources().getDisplayMetrics().density * 2);", "choices": [{"text": "\n        recyclerView.setPadding(padding, padding, padding, padding);\r\n    } else {\r\n        recyclerView.setPadding(0, 0, 0, 0);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/827", "ground_truth": "    } else {\r\n        padding = 0;\r\n    }\r\n    recyclerView.setPadding(padding, padding, padding, padding);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewCustomGridSizeFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/832", "ground_truth": "public void onDetach() {\r\n    super.onDetach();\r\n    Discography.getInstance().removeChangedListener(onDiscographyChanged);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nprivate void initAdapter() {\r\n    adapter = createAdapter();\r\n    adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\r\n\r\n        @Override\r\n        public void onChanged() {", "choices": [{"text": "\n            adapter.notifyDataSetChanged();\r\n        }\r\n\r\n        @Override\r\n        public void onEmpty() {\r\n            adapter.notifyDataSetInvalidated();\r\n        }\r\n    });\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/836", "ground_truth": "            super.onChanged();\r\n            checkIsEmpty();\r\n        }\r\n    });\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/837", "ground_truth": "public void onChanged() {\r\n    super.onChanged();\r\n    checkIsEmpty();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\AbsLibraryPagerRecyclerViewFragment.java"}}
{"prompt": "private static final int LOADER_ID = LoaderIds.PLAYLISTS_FRAGMENT;\n @Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.fragment_playlists);\n    }\n"}], "metadata": {"task_id": "VinylMusicPlayer/854", "ground_truth": "public void onPlayingMetaChanged() {\r\n    // Update the smart playlists (played, not played, etc)\r\n    reload();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\mainactivity\\library\\pager\\PlaylistsFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/862", "ground_truth": "public void onDetach() {\r\n    super.onDetach();\r\n    callbacks = null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import androidx.appcompat.widget.Toolbar\nimport androidx.annotation.Nullable\nimport android.view.View\nprivate static void toggleToolbar(@Nullable final View toolbar) {\r\n    if (isToolbarShown) {", "choices": [{"text": "\n        return;\r\n    }\r\n    isToolbarShown = true;\r\n    if (toolbar!= null) {\r\n        toolbar.setVisibility(View.VISIBLE);\r\n    } else {\r\n        toolbar.setVisibility(View.GONE);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/865", "ground_truth": "        hideToolbar(toolbar);\r\n    } else {\r\n        showToolbar(toolbar);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/870", "ground_truth": "public void onColorChanged(int color) {\r\n    if (callbacks != null) {\r\n        callbacks.onPaletteColorChanged();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.MusicUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.R\nimport android.app.Activity\nprivate void toggleFavorite(Song song) {\r\n    MusicUtil.toggleFavorite(requireActivity(), song);\r\n    if (song.id == MusicPlayerRemote.getCurrentSong().id) {\r\n        if (MusicUtil.isFavorite(requireActivity(), song)) {", "choices": [{"text": "\n            MusicUtil.toggleFavorite(requireActivity(), null);\r\n        } else {\r\n            MusicUtil.toggleFavorite(requireActivity(), song);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/872", "ground_truth": "            playerAlbumCoverFragment.showHeartAnimation();\r\n        }\r\n        updateIsFavorite();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.MusicUtil\nimport com.poupa.vinylmusicplayer.model.Song\nimport android.app.Activity\n@Override\r\nprotected Boolean doInBackground(Song... params) {\r\n    Activity activity = getActivity();\r\n    if (activity != null) {\r\n        return MusicUtil.isFavorite(getActivity(), params[0]);", "choices": [{"text": "\n    } else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/873", "ground_truth": "    } else {\r\n        cancel(false);\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.MusicUtil\nimport com.poupa.vinylmusicplayer.model.lyrics.Lyrics\nimport android.content.Context\n@Override\r\nprotected Lyrics doInBackground(Void... params) {\r\n    final Context context = getContext();\r\n    if (context == null) {\r\n        return null;\r\n    }\r\n    String data = MusicUtil.getLyrics(context, song);", "choices": [{"text": "\n    if (data == null) {\r\n        return null;\r\n    }\r\n    return new Lyrics(data);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/875", "ground_truth": "    if (TextUtils.isEmpty(data)) {\r\n        return null;\r\n    }\r\n    return Lyrics.parse(song, data);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\AbsPlayerFragment.java"}}
{"prompt": "import android.view.View\nimport android.animation.Animator\n@Override\r\npublic void onDestroyView() {\r\n    if (slidingUpPanelLayout != null) {\r\n        slidingUpPanelLayout.removePanelSlideListener(this);\r\n    }\r\n    if (recyclerView != null) {\r\n        recyclerView.setItemAnimator(null);", "choices": [{"text": "\n        recyclerView.setItemAnimator(null);\r\n    }\r\n    super.onDestroyView();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/877", "ground_truth": "        recyclerView.setAdapter(null);\r\n        recyclerView = null;\r\n    }\r\n    super.onDestroyView();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/879", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    checkToggleToolbar(toolbarContainer);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "@Override\r\npublic void onServiceConnected() {", "choices": [{"text": "\n    super.onServiceConnected();\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"on"}], "metadata": {"task_id": "VinylMusicPlayer/880", "ground_truth": "    updateQueue();\r\n    updateCurrentSong();\r\n    updateIsFavorite();\r\n    updateLyrics();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "private CardPlayerPlaybackControlsFragment playbackControlsFragment;\nprivate SlidingUpPanelLayout slidingUpPanelLayout;\nprivate TextView playerQueueSubHeader;\n @Override\r\npublic void onPlayingMetaChanged() {", "choices": [{"text": "\n    playbackControlsFragment.onPlayingMetaChanged();\r\n    if (slidingUpPanelLayout!= null) {\r\n        slidingUpPanelLayout.onPlayingMetaChanged();\r\n    }\r\n    if (playerQueueSubHeader!= null) {\r\n        playerQueueSubHeader.setVisibility(View.VISIBLE);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/881", "ground_truth": "    updateCurrentSong();\r\n    updateIsFavorite();\r\n    updateQueuePosition();\r\n    updateLyrics();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/888", "ground_truth": "public void onHide() {\r\n    playbackControlsFragment.hide();\r\n    onBackPressed();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/900", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    progressViewUpdateHelper.start();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerPlaybackControlsFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/901", "ground_truth": "public void onPause() {\r\n    super.onPause();\r\n    progressViewUpdateHelper.stop();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerPlaybackControlsFragment.java"}}
{"prompt": "private PlayPauseDrawable playerFabPlayPauseDrawable;\nImageButton shuffleButton;\nFloatingActionButton playPauseFab;\n private void setUpMusicControllers() {\r\n    setUpPlayPauseFab();", "choices": [{"text": "\n    playerFabPlayPauseDrawable = new PlayPauseDrawable(this);\r\n    shuffleButton = new ImageButton(this);\r\n    playPauseFab = new FloatingActionButton(this);\r\n    shuffleButton.setOnClickListener(new View.OnClickListener() {\r\n        @Override\r\n        public void onClick(View v) {\r\n            shuffle();\r\n        }\r\n    });\r\n    playPauseFab.setOnClickListener(new View.OnClickListener() {\r\n        @Override\r\n        public void onClick(View v) {\r\n           "}], "metadata": {"task_id": "VinylMusicPlayer/904", "ground_truth": "    setUpPrevNext();\r\n    setUpRepeatButton();\r\n    setUpShuffleButton();\r\n    setUpProgressSlider();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerPlaybackControlsFragment.java"}}
{"prompt": "public void hide() {\r\n    if (playPauseFab != null) {", "choices": [{"text": "\n        playPauseFab.setVisibility(View.VISIBLE);\r\n    } else {\r\n        playPauseFab.setVisibility(View.GONE);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/909", "ground_truth": "        playPauseFab.setScaleX(0f);\r\n        playPauseFab.setScaleY(0f);\r\n        playPauseFab.setRotation(0f);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\card\\CardPlayerPlaybackControlsFragment.java"}}
{"prompt": "import android.view.View\nimport android.animation.Animator\n@Override\r\npublic void onDestroyView() {\r\n    if (slidingUpPanelLayout != null) {\r\n        slidingUpPanelLayout.removePanelSlideListener(this);\r\n    }\r\n    if (recyclerView != null) {\r\n        recyclerView.setItemAnimator(null);", "choices": [{"text": "\n        recyclerView.setItemAnimator(null);\r\n    }\r\n    super.onDestroyView();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/913", "ground_truth": "        recyclerView.setAdapter(null);\r\n        recyclerView = null;\r\n    }\r\n    super.onDestroyView();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/915", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    checkToggleToolbar(toolbarContainer);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "@Override\r\npublic void onServiceConnected() {", "choices": [{"text": "\n    super.onServiceConnected();\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"onServiceConnected\", \"onServiceConnected\");\r\n    Log.d(\"on"}], "metadata": {"task_id": "VinylMusicPlayer/916", "ground_truth": "    updateQueue();\r\n    updateCurrentSong();\r\n    updateIsFavorite();\r\n    updateLyrics();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "private FlatPlayerPlaybackControlsFragment playbackControlsFragment;\nprivate SlidingUpPanelLayout slidingUpPanelLayout;\nMediaEntryViewHolder currentSongViewHolder;\n @Override\r\npublic void onPlayingMetaChanged() {", "choices": [{"text": "\n    playbackControlsFragment.onPlayingMetaChanged();\r\n    currentSongViewHolder = playbackControlsFragment.getCurrentSongViewHolder();\r\n    slidingUpPanelLayout.setCurrentSongViewHolder(currentSongViewHolder);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/917", "ground_truth": "    updateCurrentSong();\r\n    updateIsFavorite();\r\n    updateQueuePosition();\r\n    updateLyrics();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/924", "ground_truth": "public void onHide() {\r\n    playbackControlsFragment.hide();\r\n    onBackPressed();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/934", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    progressViewUpdateHelper.start();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/935", "ground_truth": "public void onPause() {\r\n    super.onPause();\r\n    progressViewUpdateHelper.stop();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.views.PlayPauseDrawable\nimport com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.R\nprotected void updatePlayPauseDrawableState(boolean animate) {\r\n    if (MusicPlayerRemote.isPlaying()) {", "choices": [{"text": "\n        PlayPauseDrawable playPauseDrawable = (PlayPauseDrawable) findViewById(R.id.playPauseDrawable);\r\n        playPauseDrawable.setPlaying(animate);\r\n    } else {\r\n        PlayPauseDrawable playPauseDrawable = (PlayPauseDrawable) findViewById(R.id.pauseDrawable);\r\n        playPauseDrawable.setPlaying(animate);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/938", "ground_truth": "        playPauseDrawable.setPause(animate);\r\n    } else {\r\n        playPauseDrawable.setPlay(animate);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "private AnimatorSet musicControllerAnimationSet;\nImageButton shuffleButton;\nImageButton playPauseButton;\n private void setUpMusicControllers() {\r\n    setUpPlayPauseButton();", "choices": [{"text": "\n    shuffleButton = new ImageButton(\"shuffle\");\r\n    playPauseButton = new ImageButton(\"play\");\r\n    musicControllerAnimationSet = new AnimatorSet();\r\n    musicControllerAnimationSet.add(shuffleButton);\r\n    musicControllerAnimationSet.add(playPauseButton);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/939", "ground_truth": "    setUpPrevNext();\r\n    setUpRepeatButton();\r\n    setUpShuffleButton();\r\n    setUpProgressSlider();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "import android.view.View\nprivate static void prepareForAnimation(View view) {", "choices": [{"text": "\n    view.postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            view.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    view.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            view.postDelayed(new Runnable() {\n                                @Override\n                                public void run() {\n                                    view.postDelayed(new Runnable() {\n                                        @Override\n                                        public void run() {\n                                            view.postDelayed(new Runnable() {\n                                               "}], "metadata": {"task_id": "VinylMusicPlayer/946", "ground_truth": "    if (view != null) {\r\n        view.setScaleX(0f);\r\n        view.setScaleY(0f);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\flat\\FlatPlayerPlaybackControlsFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/954", "ground_truth": "public void onServiceConnected() {\r\n    updateSongTitle();\r\n    updatePlayPauseDrawableState(false);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\MiniPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/956", "ground_truth": "public void onResume() {\r\n    super.onResume();\r\n    progressViewUpdateHelper.start();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\MiniPlayerFragment.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/957", "ground_truth": "public void onPause() {\r\n    super.onPause();\r\n    progressViewUpdateHelper.stop();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\MiniPlayerFragment.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.helper.MusicPlayerRemote\nimport com.poupa.vinylmusicplayer.R\nimport android.view.MotionEvent\n@Override\r\npublic boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r\n    if (Math.abs(velocityX) > Math.abs(velocityY)) {\r\n        if (velocityX < 0) {\r\n            MusicPlayerRemote.playNextSong(true);\r\n            return true;\r\n        } else if (velocityX > 0) {\r\n            MusicPlayerRemote.playPreviousSong(true);", "choices": [{"text": "\n            return true;\r\n        } else {\r\n            MusicPlayerRemote.playNextSong(false);\r\n            return false;\r\n        }\r\n    } else {\r\n        MusicPlayerRemote.playPreviousSong(false);\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/958", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\MiniPlayerFragment.java"}}
{"prompt": "import android.view.MotionEvent\n@Override\r\npublic boolean onSingleTapConfirmed(MotionEvent e) {\r\n    if (callbacks != null) {", "choices": [{"text": "\n        callbacks.onSingleTapConfirmed(e);\r\n    }\r\n    return super.onSingleTapConfirmed(e);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/961", "ground_truth": "        callbacks.onToolbarToggled();\r\n        return true;\r\n    }\r\n    return super.onSingleTapConfirmed(e);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\ui\\fragments\\player\\PlayerAlbumCoverFragment.java"}}
{"prompt": "public static ArtistSignatureUtil getInstance() {", "choices": [{"text": "\n    if (instance == null) {\n        instance = new ArtistSignatureUtil();\n    }\n    return instance;\n}"}], "metadata": {"task_id": "VinylMusicPlayer/969", "ground_truth": "    if (sInstance == null) {\r\n        sInstance = new ArtistSignatureUtil();\r\n    }\r\n    return sInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\ArtistSignatureUtil.java"}}
{"prompt": "import java.util.Calendar\n/**\r\n * Returns the time elapsed so far this week in milliseconds.\r\n *\r\n * @return Time elapsed this week in milliseconds.\r\n */\r\npublic long getElapsedWeek() {\r\n    // Today + days passed this week\r\n    long elapsed = getElapsedToday();\r\n    final int passedWeekdays = calendar.get(Calendar.DAY_OF_WEEK) - 1 - calendar.getFirstDayOfWeek();", "choices": [{"text": "\n    if (passedWeekdays > 0) {\r\n        elapsed += passedWeekdays * 24 * 60 * 60 * 1000;\r\n    }\r\n    return elapsed;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/974", "ground_truth": "    if (passedWeekdays > 0) {\r\n        elapsed += passedWeekdays * MS_PER_DAY;\r\n    }\r\n    return elapsed;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CalendarUtil.java"}}
{"prompt": "import java.util.Calendar\nimport androidx.annotation.IntRange\n/**\r\n * Returns the time elapsed so far this month and the last numMonths months in milliseconds.\r\n *\r\n * @param numMonths Additional number of months prior to the current month to calculate.\r\n * @return Time elapsed this month and the last numMonths months in milliseconds.\r\n */\r\npublic long getElapsedMonths(@IntRange(from = 1) int numMonths) {\r\n    // Today + rest of this month\r\n    long elapsed = getElapsedMonth();\r\n    // Previous numMonths months\r\n    int month = calendar.get(Calendar.MONTH);\r\n    int year = calendar.get(Calendar.YEAR);\r\n    for (int i = 0; i < numMonths; i++) {\r\n        month--;\r\n        if (month < Calendar.JANUARY) {\r\n            month = Calendar.DECEMBER;\r\n            year--;", "choices": [{"text": "\n        }\r\n        if (year < Calendar.JANUARY) {\r\n            year = Calendar.DECEMBER;\r\n        }\r\n        elapsed += getElapsedMonth();\r\n    }\r\n    return elapsed;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/977", "ground_truth": "        }\r\n        elapsed += getDaysInMonth(year, month) * MS_PER_DAY;\r\n    }\r\n    return elapsed;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CalendarUtil.java"}}
{"prompt": "import java.util.Calendar\n/**\r\n * Returns the time elapsed so far this year in milliseconds.\r\n *\r\n * @return Time elapsed this year in milliseconds.\r\n */\r\npublic long getElapsedYear() {\r\n    // Today + rest of this month + previous months until January\r\n    long elapsed = getElapsedMonth();\r\n    int month = calendar.get(Calendar.MONTH) - 1;\r\n    int year = calendar.get(Calendar.YEAR);\r\n    while (month > Calendar.JANUARY) {", "choices": [{"text": "\n        month = calendar.get(Calendar.MONTH) + 1;\r\n        year = calendar.get(Calendar.YEAR) + 1;\r\n    }\r\n    return elapsed + year;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/978", "ground_truth": "        elapsed += getDaysInMonth(year, month) * MS_PER_DAY;\r\n        month--;\r\n    }\r\n    return elapsed;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CalendarUtil.java"}}
{"prompt": "import androidx.annotation.MainThread\n@MainThread", "choices": [{"text": "\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @"}], "metadata": {"task_id": "VinylMusicPlayer/983", "ground_truth": "protected void onPostExecute(Void result) {\r\n    if (postExec != null) {\r\n        postExec.run();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CustomArtistImageUtil.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.model.Artist\nimport com.poupa.vinylmusicplayer.App\nimport android.net.Uri\n@Override\r\nprotected Void doInBackground(Void... params) {\r\n    mPreferences.edit().putBoolean(getFileName(artist), false).apply();\r\n    ArtistSignatureUtil.getInstance().updateArtistSignature(artist.getName());\r\n    // trigger media store changed to force artist image reload\r\n    App.getInstance().getContentResolver().notifyChange(Uri.parse(\"content://media\"), null);\r\n    File file = getFile(artist);", "choices": [{"text": "    if (file!= null) {\r\n        mPreferences.edit().putBoolean(getFileName(artist), true).apply();\r\n        ArtistSignatureUtil.getInstance().updateArtistSignature(artist.getName());\r\n        App.getInstance().getContentResolver().notifyChange(Uri.parse(\"content://media\"), null);\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/984", "ground_truth": "    if (file.exists()) {\r\n        file.delete();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CustomArtistImageUtil.java"}}
{"prompt": "import androidx.annotation.MainThread\n@MainThread", "choices": [{"text": "\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @MainThread\n    @"}], "metadata": {"task_id": "VinylMusicPlayer/985", "ground_truth": "protected void onPostExecute(Void result) {\r\n    if (postExec != null) {\r\n        postExec.run();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\CustomArtistImageUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport java.io.File\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.discog.Discography\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static ArrayList<Song> matchFilesWithMediaStore(@NonNull List<File> files) {\r\n    ArrayList<Song> songs = new ArrayList<>();\r\n    for (File file : files) {\r\n        String path = safeGetCanonicalPath(file);\r\n        Song song = Discography.getInstance().getSongByPath(path);\r\n        if (!song.equals(Song.EMPTY_SONG)) {", "choices": [{"text": "\n            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/988", "ground_truth": "            songs.add(song);\r\n        }\r\n    }\r\n    return songs;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.LinkedList\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<File> listFiles(@NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    List<File> fileList = new LinkedList<>();\r\n    File[] found = directory.listFiles(fileFilter);", "choices": [{"text": "\n    if (found!= null) {\r\n        for (File file : found) {\r\n            fileList.add(file);\r\n        }\r\n    }\r\n    return fileList;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/989", "ground_truth": "    if (found != null) {\r\n        Collections.addAll(fileList, found);\r\n    }\r\n    return fileList;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.LinkedList\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static List<File> listFilesDeep(@NonNull Collection<File> files, @Nullable FileFilter fileFilter) {\r\n    List<File> resFiles = new LinkedList<>();\r\n    for (File file : files) {\r\n        if (file.isDirectory()) {\r\n            internalListFilesDeep(resFiles, file, fileFilter);\r\n        } else if (fileFilter == null || fileFilter.accept(file)) {", "choices": [{"text": "\n            resFiles.add(file);\r\n        }\r\n    }\r\n    return resFiles;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/991", "ground_truth": "            resFiles.add(file);\r\n        }\r\n    }\r\n    return resFiles;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.Collection\nimport java.io.FileFilter\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nprivate static void internalListFilesDeep(@NonNull Collection<File> files, @NonNull File directory, @Nullable FileFilter fileFilter) {\r\n    File[] found = directory.listFiles(fileFilter);\r\n    if (found != null) {\r\n        for (File file : found) {\r\n            if (file.isDirectory()) {\r\n                internalListFilesDeep(files, file, fileFilter);\r\n            } else {", "choices": [{"text": "\n                internalListFilesDeep(files, file, fileFilter);\r\n            }\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/992", "ground_truth": "                files.add(file);\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "public static String stripExtension(String str) {\r\n    if (str == null)\r\n        return null;", "choices": [{"text": "(str == null)\r\n        return null;\r\n    return str.substring(0, str.length() - 1);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/993", "ground_truth": "    int pos = str.lastIndexOf('.');\r\n    if (pos == -1)\r\n        return str;\r\n    return str.substring(0, pos);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.io.InputStreamReader\nimport java.io.InputStream\nimport java.io.BufferedReader\npublic static String readFromStream(InputStream is) throws Exception {\r\n    BufferedReader reader = new BufferedReader(new InputStreamReader(is));\r\n    StringBuilder sb = new StringBuilder();\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        if (sb.length() > 0)\r\n            sb.append(\"\\n\");", "choices": [{"text": "\n        sb.append(line);\r\n    }\r\n    return sb.toString();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/994", "ground_truth": "        sb.append(line);\r\n    }\r\n    reader.close();\r\n    return sb.toString();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.io.File\npublic static String safeGetCanonicalPath(File file) {\r\n    try {\r\n        return file.getCanonicalPath();", "choices": [{"text": "\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/996", "ground_truth": "    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return file.getAbsolutePath();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.io.File\npublic static File safeGetCanonicalFile(File file) {\r\n    try {\r\n        return file.getCanonicalFile();", "choices": [{"text": "\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/997", "ground_truth": "    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return file.getAbsoluteFile();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import java.io.InputStream\nimport java.io.IOException\nimport java.io.ByteArrayOutputStream\npublic static byte[] readBytes(InputStream stream) throws IOException {\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    byte[] buffer = new byte[4096];\r\n    int count;\r\n    while ((count = stream.read(buffer)) != -1) {", "choices": [{"text": "\n        baos.write(buffer, 0, count);\r\n    }\r\n    return baos.toByteArray();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/998", "ground_truth": "        baos.write(buffer, 0, count);\r\n    }\r\n    stream.close();\r\n    return baos.toByteArray();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\FileUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.util.PreferenceUtil\nimport androidx.annotation.NonNull\npublic static ThemeStyle updateInstance(@NonNull final String themeName) {\r\n    synchronized (ThemeStyleUtil.class) {\r\n        if (themeName.equals(PreferenceUtil.ROUNDED_THEME)) {\r\n            sInstance = new MaterialTheme();\r\n        } else {", "choices": [{"text": "\n            sInstance = new MaterialTheme(themeName);\r\n        }\r\n    }\r\n    return sInstance;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1004", "ground_truth": "            sInstance = new FlatTheme();\r\n        }\r\n        return sInstance;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\ImageTheme\\ThemeStyleUtil.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Album\nimport com.poupa.vinylmusicplayer.R\nimport com.poupa.vinylmusicplayer.App\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.provider.MediaStore\nimport android.graphics.Bitmap\nimport android.content.Context\n@Nullable\r\npublic static Bitmap getMediaStoreAlbumCover(@NonNull final Song song) {\r\n    final Context context = App.getStaticContext();\r\n    try (AutoCloseAudioFile audio = SAFUtil.loadReadOnlyAudioFile(context, song)) {\r\n        return getMediaStoreAlbumCover(audio);", "choices": [{"text": "    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1008", "ground_truth": "    } catch (Exception e) {\r\n        OopsHandler.collectStackTrace(e);\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import java.io.File\nimport org.jaudiotagger.tag.images.Artwork\nimport com.poupa.vinylmusicplayer.model.Album\nimport androidx.annotation.Nullable\nimport android.provider.MediaStore\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\n@Nullable\r\npublic static Bitmap getMediaStoreAlbumCover(@Nullable final AutoCloseAudioFile audio) {\r\n    try {\r\n        if (audio == null) {\r\n            return null;\r\n        }\r\n        final Artwork artworkTag = audio.get().getTagOrCreateAndSetDefault().getFirstArtwork();\r\n        if (artworkTag != null) {\r\n            final byte[] artworkBinaryData = artworkTag.getBinaryData();\r\n            return BitmapFactory.decodeByteArray(artworkBinaryData, 0, artworkBinaryData.length);\r\n        }", "choices": [{"text": "        }\r\n        return null;\r\n    } catch (final Exception e) {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1009", "ground_truth": "        return null;\r\n    } catch (Exception ignored) {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\npublic static long getTotalDuration(@NonNull List<? extends Song> songs) {\r\n    long duration = 0;", "choices": [{"text": "\n    for (Song song : songs) {\r\n        duration += song.getDuration();\r\n    }\r\n    return duration;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1016", "ground_truth": "    for (int i = 0; i < songs.size(); i++) {\r\n        duration += songs.get(i).duration;\r\n    }\r\n    return duration;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.text.TextUtils\nimport android.os.Build\n@NonNull\r\npublic static String buildInfoString(@NonNull final String separator, @NonNull final String[] values, @Nullable final String unknownReplacement) {\r\n    final StringBuilder result = new StringBuilder();\r\n    for (final String value : values) {\r\n        if (!TextUtils.isEmpty(value)) {\r\n            if (result.length() > 0)\r\n                result.append(separator);\r\n            final String valueOrReplacement = (unknownReplacement != null) && isNameUnknown(value, unknownReplacement) ? unknownReplacement : value;", "choices": [{"text": "\n            if (result.length() > 0)\r\n                result.append(separator);\r\n            result.append(valueOrReplacement);\r\n        }\r\n    }\r\n    return result.toString();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1018", "ground_truth": "            result.append(valueOrReplacement);\r\n        }\r\n    }\r\n    return result.toString();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.model.Song\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static String getTrackNumberInfoString(@NonNull final Song song) {\r\n    String result = \"\";\r\n    if (song.discNumber > 0) {\r\n        result = song.discNumber + \"-\";\r\n    }\r\n    if (song.trackNumber > 0) {\r\n        result += String.valueOf(song.trackNumber);", "choices": [{"text": "\n    }\r\n    return result;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1019", "ground_truth": "    } else if (result.isEmpty()) {\r\n        result = \"-\";\r\n    }\r\n    return result;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport com.poupa.vinylmusicplayer.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.content.Context\n@Nullable\r\npublic static Playlist getFavoritesPlaylist(@NonNull final Context context) {\r\n    StaticPlaylist playlist = StaticPlaylist.getPlaylist(context.getString(R.string.favorites));", "choices": [{"text": "\n    if (playlist!= null) {\r\n        return playlist.getFavoritesPlaylist();\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1020", "ground_truth": "    if (playlist != null) {\r\n        return playlist.asPlaylist();\r\n    }\r\n    return null;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\npublic static int indexOfSongInList(List<Song> songs, long songId) {\r\n    for (int i = 0; i < songs.size(); i++) {\r\n        if (songs.get(i).id == songId) {", "choices": [{"text": "\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1024", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\MusicUtil.java"}}
{"prompt": "import androidx.annotation.NonNull\npublic void uncaughtException(@NonNull final Thread t, @NonNull final Throwable e) {", "choices": [{"text": "\n    e.printStackTrace();\n    t.interrupt();\n    t.join();\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1031", "ground_truth": "    try {\r\n        sendBugReport(getStackTraceWithTime(e, null));\r\n    } catch (final Throwable ignore) {\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\OopsHandler.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static void removeFromPlaylist(@NonNull final Context context, @NonNull final Song song, long playlistId) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);\r\n    if (list == null) {", "choices": [{"text": "\n        return;\r\n    }\r\n    list.removeSong(song);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1041", "ground_truth": "        return;\r\n    }\r\n    list.removeSong(song.id);\r\n    notifyChange(context);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static void removeFromPlaylist(@NonNull final Context context, @NonNull final List<Integer> songPositions, long playlistId) {\r\n    if (songPositions.isEmpty()) {\r\n        return;\r\n    }\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);\r\n    if (list == null) {", "choices": [{"text": "\n        return;\r\n    }\r\n    for (int i = 0; i < songPositions.size(); i++) {\r\n        if (list.getSongPositions().contains(songPositions.get(i))) {\r\n            list.removeSongPositions(songPositions.get(i));\r\n            break;\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1042", "ground_truth": "        return;\r\n    }\r\n    list.removeSongsAtPosition(songPositions);\r\n    notifyChange(context);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\npublic static boolean doesPlaylistContain(final long playlistId, final long songId) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);", "choices": [{"text": "\n    if (list!= null) {\r\n        for (Playlist playlist : list) {\r\n            if (playlist.getSongId().equals(songId)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1043", "ground_truth": "    if (list == null) {\r\n        return false;\r\n    }\r\n    return list.contains(songId);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\npublic static boolean moveItem(long playlistId, int from, int to) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(playlistId);", "choices": [{"text": "\n    if (list == null) {\r\n        return false;\r\n    }\r\n    if (from < 0) {\r\n        from = 0;\r\n    }\r\n    if (to > list.getCount()) {\r\n        to = list.getCount();\r\n    }\r\n    for (int i = from; i < to; i++) {\r\n        if (list.getItem(i) == null) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1044", "ground_truth": "    if (list == null) {\r\n        return false;\r\n    }\r\n    return list.moveSong(from, to);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static void renamePlaylist(@NonNull final Context context, final long id, final String newName) {\r\n    StaticPlaylist list = StaticPlaylist.getPlaylist(id);\r\n    if (list == null) {", "choices": [{"text": "\n        return;\r\n    }\r\n    if (newName == null) {\r\n        list.setName(newName);\r\n    } else {\r\n        list.setName(newName);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1045", "ground_truth": "        return;\r\n    }\r\n    list.rename(newName);\r\n    notifyChange(context);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.provider.StaticPlaylist\nimport com.poupa.vinylmusicplayer.model.Playlist\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static String getNameForPlaylist(final long id) {\r\n    StaticPlaylist playlist = StaticPlaylist.getPlaylist(id);", "choices": [{"text": "\n    if (playlist!= null) {\r\n        return playlist.getName();\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1046", "ground_truth": "    if (playlist == null) {\r\n        return \"\";\r\n    }\r\n    return playlist.getName();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PlaylistsUtil.java"}}
{"prompt": "public static PreferenceUtil getInstance() {", "choices": [{"text": "\n\t\treturn new PreferenceUtil(this);\n\t}\n\t\n\tpublic static PreferenceUtil getInstance(Context context) {\n\t\treturn new PreferenceUtil(context);\n\t}\n\t\n\tpublic static PreferenceUtil getInstance(Context context, String key) {\n\t\treturn new PreferenceUtil(context, key);\n\t}\n\t\n\tpublic static PreferenceUtil getInstance(Context context, String key, String value) {\n\t\treturn new PreferenceUtil(context, key, value);\n\t}\n\t\n\tpublic static PreferenceUtil getInstance(Context context, String key, String value,"}], "metadata": {"task_id": "VinylMusicPlayer/1049", "ground_truth": "    if (sInstance == null) {\r\n        sInstance = new PreferenceUtil();\r\n    }\r\n    return sInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PreferenceUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.ui.fragments.player.NowPlayingScreen\nimport com.poupa.vinylmusicplayer.R\npublic NowPlayingScreen getNowPlayingScreen() {\r\n    final int id = mPreferences.getInt(NOW_PLAYING_SCREEN_ID, 0);\r\n    for (final NowPlayingScreen nowPlayingScreen : NowPlayingScreen.values()) {\r\n        if (nowPlayingScreen.id == id) {", "choices": [{"text": "\n            return nowPlayingScreen;\r\n        }\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1053", "ground_truth": "            return nowPlayingScreen;\r\n        }\r\n    }\r\n    return NowPlayingScreen.CARD;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PreferenceUtil.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\nimport java.lang.reflect.Type\nimport com.poupa.vinylmusicplayer.model.CategoryInfo\nimport com.poupa.vinylmusicplayer.R\nimport com.google.gson.reflect.TypeToken\nimport com.google.gson.JsonSyntaxException\nimport com.google.gson.Gson\npublic ArrayList<CategoryInfo> getLibraryCategoryInfos() {\r\n    String data = mPreferences.getString(LIBRARY_CATEGORIES, null);\r\n    if (data != null) {\r\n        final Gson gson = new Gson();\r\n        final Type collectionType = new TypeToken<ArrayList<CategoryInfo>>() {\r\n        }.getType();\r\n        try {\r\n            return gson.fromJson(data, collectionType);\r\n        } catch (final JsonSyntaxException e) {", "choices": [{"text": "\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1055", "ground_truth": "            e.printStackTrace();\r\n        }\r\n    }\r\n    return getDefaultLibraryCategoryInfos();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PreferenceUtil.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\npublic byte getReplayGainSourceMode() {\r\n    byte sourceMode = RG_SOURCE_MODE_NONE;\r\n    switch(mPreferences.getString(RG_SOURCE_MODE_V2, \"none\")) {\r\n        case \"track\":\r\n            sourceMode = RG_SOURCE_MODE_TRACK;\r\n            break;\r\n        case \"album\":", "choices": [{"text": "\r\n            sourceMode = RG_SOURCE_MODE_ALBUM;\r\n            break;\r\n        default:\r\n            sourceMode = RG_SOURCE_MODE_NONE;\r\n            break;\r\n    }\r\n    return sourceMode;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1056", "ground_truth": "            sourceMode = RG_SOURCE_MODE_ALBUM;\r\n            break;\r\n    }\r\n    return sourceMode;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\PreferenceUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.model.Song\nimport com.poupa.vinylmusicplayer.R\npublic static boolean isSAFRequired(List<Song> songs) {\r\n    for (Song song : songs) {", "choices": [{"text": "\n        if (song.isSAFRequired()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1061", "ground_truth": "        if (isSAFRequired(song.data))\r\n            return true;\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\SAFUtil.java"}}
{"prompt": "import java.util.List\nimport com.poupa.vinylmusicplayer.R\nimport android.os.Build\nimport android.net.Uri\nimport android.content.UriPermission\nimport android.content.Context\nimport android.annotation.TargetApi\n@TargetApi(Build.VERSION_CODES.LOLLIPOP)\r\npublic static boolean isSDCardAccessGranted(Context context) {\r\n    if (!isTreeUriSaved())\r\n        return false;\r\n    String sdcardUri = PreferenceUtil.getInstance().getSAFSDCardUri();\r\n    List<UriPermission> perms = context.getContentResolver().getPersistedUriPermissions();\r\n    for (UriPermission perm : perms) {\r\n        if (perm.getUri().toString().equals(sdcardUri) && perm.isWritePermission()) {", "choices": [{"text": "\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1063", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\SAFUtil.java"}}
{"prompt": "import java.io.File\nimport com.poupa.vinylmusicplayer.R\nimport android.util.Log\nimport android.net.Uri\nimport android.content.Context\npublic static void delete(Context context, String path, Uri safUri) {\r\n    if (isSAFRequired(path)) {\r\n        deleteSAF(context, path, safUri);\r\n    } else {\r\n        try {\r\n            deleteFile(path);\r\n        } catch (NullPointerException e) {\r\n            Log.e(\"MusicUtils\", \"Failed to find file \" + path);", "choices": [{"text": "\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1064", "ground_truth": "        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\SAFUtil.java"}}
{"prompt": "import androidx.annotation.Nullable\npublic static int compareIgnoreAccent(@Nullable final String s1, @Nullable final String s2) {\r\n    // Null-proof comparison\r\n    if (s1 == null) {\r\n        return s2 == null ? 0 : -1;", "choices": [{"text": "\n    } else if (s2 == null) {\r\n        return s1 == null? 0 : -1;\r\n    } else {\r\n        return s1.compareTo(s2);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1066", "ground_truth": "    } else if (s2 == null) {\r\n        return 1;\r\n    }\r\n    return collator.compare(s1, s2);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\StringUtil.java"}}
{"prompt": "import java.util.Comparator\nstatic SwatchComparator getInstance() {", "choices": [{"text": "\n    return new SwatchComparator();\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1079", "ground_truth": "    if (sInstance == null) {\r\n        sInstance = new SwatchComparator();\r\n    }\r\n    return sInstance;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\VinylMusicPlayerColorUtil.java"}}
{"prompt": "import android.os.Build\npublic static boolean isSystemThemeSupported() {\r\n    // Inspired from https://stackoverflow.com/questions/55787035/is-there-an-api-to-detect-which-theme-the-os-is-using-dark-or-light-or-other\r\n    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.O) {\r\n        // OS theme not supported\r\n        return false;\r\n    } else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.P) {\r\n        // Not clear, might depend on wallpaper hinting\r\n        return true;", "choices": [{"text": "    } else {\r\n        return false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1081", "ground_truth": "    } else {\r\n        // Supported, use Configuration.uiMode\r\n        return true;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\util\\VinylMusicPlayerColorUtil.java"}}
{"prompt": "import org.jetbrains.annotations.NotNull\nimport com.poupa.vinylmusicplayer.R\nimport android.view.ViewParent\nimport android.view.View\npublic ViewParent findParentRecursively(@NotNull View view, int targetId) {\r\n    if (view.getId() == targetId) {\r\n        return (ViewParent) view;\r\n    }\r\n    ViewParent viewParent = view.getParent();\r\n    if (viewParent instanceof View) {\r\n        View parent = (View) view.getParent();\r\n        if (parent == null) {\r\n            return null;\r\n        }", "choices": [{"text": "\n        return viewParent;\r\n    }\r\n    return null;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1085", "ground_truth": "        return findParentRecursively(parent, targetId);\r\n    } else {\r\n        return null;\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\AutoTruncateTextView.java"}}
{"prompt": "/**\r\n * Untruncates and sets the text.\r\n */", "choices": [{"text": "\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n       .module('app')\r\n       .directive('truncatedText', truncatedText);\r\n\r\n    function truncatedText() {\r\n        return {\r\n            restrict: 'E',\r\n            link: link\r\n        };\r\n\r\n        function link(scope, element, attrs) {\r\n            scope.text = attrs.truncatedText;\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "VinylMusicPlayer/1086", "ground_truth": "public void untruncateText() {\r\n    String untruncatedText = text + MARKER_UNTRUNCATED;\r\n    setText(untruncatedText);\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\AutoTruncateTextView.java"}}
{"prompt": "public static final String TAG = AutoTruncateTextView.class.getSimpleName();\nprivate static final int RETRUNCATE_DELAY = 600;\nprivate String text;\n @Override", "choices": [{"text": "\npublic AutoTruncateTextView(Context context) {\n    super(context);\n}\n\npublic AutoTruncateTextView(Context context, AttributeSet attrs) {\n    super(context, attrs);\n}\n\npublic AutoTruncateTextView(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n}\n\npublic AutoTruncateTextView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n    super(context, attrs, defStyleAttr, defStyleRes);\n}\n\npublic Auto"}], "metadata": {"task_id": "VinylMusicPlayer/1087", "ground_truth": "public void onAnimationEnd(Animator animator) {\r\n    if (isUntruncated()) {\r\n        setText(truncatedText);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\AutoTruncateTextView.java"}}
{"prompt": "import java.util.List\nimport java.util.ArrayList\npublic void clearCrumbs() {\r\n    try {\r\n        mOldCrumbs = new ArrayList<>(mCrumbs);\r\n        mCrumbs.clear();", "choices": [{"text": "\n        mCrumbs.clear();\r\n        mOldCrumbs.clear();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1092", "ground_truth": "        mChildFrame.removeAllViews();\r\n    } catch (IllegalStateException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\BreadCrumbLayout.java"}}
{"prompt": "private boolean setActive(Crumb newActive) {\r\n    mActive = mCrumbs.indexOf(newActive);\r\n    invalidateActivatedAll();", "choices": [{"text": " = mCrumbs.indexOf(newActive);\r\n    invalidateActivatedAll();\r\n    return true;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1093", "ground_truth": "    boolean success = mActive > -1;\r\n    if (success)\r\n        requestLayout();\r\n    return success;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\BreadCrumbLayout.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport android.widget.TextView\nimport android.widget.LinearLayout\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.PorterDuff\nprivate TextView invalidateActivated(View view, final boolean isActive, final boolean allowArrowVisible) {\r\n    int contentColor = isActive ? contentColorActivated : contentColorDeactivated;\r\n    LinearLayout child = (LinearLayout) view;\r\n    TextView tv = (TextView) child.getChildAt(0);\r\n    tv.setTextColor(contentColor);\r\n    ImageView iv = (ImageView) child.getChildAt(1);\r\n    iv.setColorFilter(contentColor, PorterDuff.Mode.SRC_IN);\r\n    if (allowArrowVisible)", "choices": [{"text": "        iv.setVisibility(View.GONE);\r\n    else\r\n        tv.setVisibility(View.VISIBLE);\r\n    return tv;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1096", "ground_truth": "        iv.setVisibility(View.VISIBLE);\r\n    else\r\n        iv.setVisibility(View.GONE);\r\n    return tv;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\BreadCrumbLayout.java"}}
{"prompt": "public void restoreFromStateWrapper(SavedStateWrapper mSavedState) {\r\n    if (mSavedState != null) {\r\n        mActive = mSavedState.mActive;\r\n        for (Crumb c : mSavedState.mCrumbs) {\r\n            addCrumb(c, false);", "choices": [{"text": "            addCrumb(c, true);\r\n        }\r\n    } else {\r\n        mActive = false;\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1099", "ground_truth": "        }\r\n        requestLayout();\r\n        setVisibility(mSavedState.mVisibility);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\BreadCrumbLayout.java"}}
{"prompt": "import com.poupa.vinylmusicplayer.R\nimport androidx.annotation.NonNull\nimport android.animation.ObjectAnimator\nimport android.animation.AnimatorListenerAdapter\nimport android.animation.Animator\n@NonNull\r\nprivate Animator getPausePlayAnimator() {\r\n    isPlaySet = !isPlaySet;\r\n    final Animator anim = ObjectAnimator.ofFloat(this, PROGRESS, isPlay ? 1f : 0f, isPlay ? 0f : 1f);\r\n    anim.addListener(new AnimatorListenerAdapter() {\r\n\r\n        @Override\r\n        public void onAnimationEnd(Animator animation) {", "choices": [{"text": "\n            isPlaySet = false;\r\n            super.onAnimationEnd(animation);\r\n        }\r\n\r\n        @Override\r\n        public void onAnimationStart(Animator animation) {\r\n            isPlaySet = true;\r\n            super.onAnimationStart(animation);\r\n        }\r\n    });\r\n    return anim;\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1102", "ground_truth": "            isPlay = !isPlay;\r\n        }\r\n    });\r\n    return anim;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/1104", "ground_truth": "public void setAlpha(int alpha) {\r\n    paint.setAlpha(alpha);\r\n    invalidateSelf();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "@Override", "choices": [{"text": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n   "}], "metadata": {"task_id": "VinylMusicPlayer/1105", "ground_truth": "public void setColorFilter(ColorFilter cf) {\r\n    paint.setColorFilter(cf);\r\n    invalidateSelf();\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "private static final long PLAY_PAUSE_ANIMATION_DURATION = 250;\n public void setPlay(boolean animate) {\r\n    if (animate) {\r\n        if (!isPlaySet) {\r\n            togglePlayPause();\r\n        }\r\n    } else {", "choices": [{"text": "\n        isPlaySet = true;\r\n        togglePlayPause();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1106", "ground_truth": "        isPlaySet = true;\r\n        isPlay = true;\r\n        setProgress(1f);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "public void setPause(boolean animate) {\r\n    if (animate) {\r\n        if (isPlaySet) {\r\n            togglePlayPause();\r\n        }\r\n    } else {", "choices": [{"text": " {\r\n        isPlaySet = false;\r\n        togglePlayPause();\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1107", "ground_truth": "        isPlaySet = false;\r\n        isPlay = false;\r\n        setProgress(0f);\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\PlayPauseDrawable.java"}}
{"prompt": "import android.widget.HorizontalScrollView\nimport android.view.View\n/**\r\n * Intercept the touch event here, we arrive here since this is a HorizontalScrollView\r\n * Force onTouchEvent to be fired\r\n */\r\n@Override", "choices": [{"text": "\npublic void onTouchEvent(View v, MotionEvent event) {\r\n    super.onTouchEvent(v, event);\r\n    if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n        if (mHorizontalScrollView!= null) {\r\n            mHorizontalScrollView.onTouchEvent(v, event);\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1113", "ground_truth": "public boolean onInterceptTouchEvent(MotionEvent e) {\r\n    onTouchEvent(e);\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\TouchInterceptHorizontalScrollView.java"}}
{"prompt": "@Override\r\npublic void run() {\r\n    if (!cancel) {\r\n        // Hasn't been touched for some time\r\n        long currentTime = System.currentTimeMillis();\r\n        if ((currentTime - lastScrollUpdate) > ON_END_SCROLL_DELAY) {\r\n            lastScrollUpdate = -1;\r\n            if (onEndScrollListener != null) {\r\n                onEndScrollListener.onEndScroll();\r\n            }", "choices": [{"text": "\n            cancel = true;\r\n        }\r\n    }\r\n    super.run();\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1116", "ground_truth": "        } else {\r\n            postDelayed(this, ON_END_SCROLL_DELAY);\r\n        }\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\TouchInterceptHorizontalScrollView.java"}}
{"prompt": "import android.view.ViewGroup\nimport android.view.View\nimport android.view.MotionEvent\n/**\r\n * Tapping the scrollview\r\n * Here we go back all the way up to the framelayout that contains the song,\r\n * and we click manually to play it\r\n */\r\n@Override\r\npublic boolean onSingleTapUp(MotionEvent e) {\r\n    ViewGroup viewGroup = getViewGroup();", "choices": [{"text": "\n    if (viewGroup == null) {\r\n        return false;\r\n    }\r\n    if (e.getAction() == MotionEvent.ACTION_DOWN) {\r\n        viewGroup.post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                playSong();\r\n            }\r\n        });\r\n    }\r\n    return super.onSingleTapUp(e);\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1118", "ground_truth": "    if (viewGroup != null) {\r\n        viewGroup.performClick();\r\n    }\r\n    return false;\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\TouchInterceptHorizontalScrollView.java"}}
{"prompt": "import android.view.MotionEvent\n/**\r\n * Pass back long presses (adding to playlist, etc)\r\n */\r\n@Override\r\npublic void onLongPress(MotionEvent e) {", "choices": [{"text": "(MotionEvent e) {\r\n    if (e.getAction() == MotionEvent.ACTION_DOWN) {\r\n        addPlaylist();\r\n    } else if (e.getAction() == MotionEvent.ACTION_UP) {\r\n        removePlaylist();\r\n    } else {\r\n        super.onLongPress(e);\r\n    }\r\n}"}], "metadata": {"task_id": "VinylMusicPlayer/1119", "ground_truth": "    ViewGroup viewGroup = getViewGroup();\r\n    if (viewGroup != null) {\r\n        viewGroup.performLongClick();\r\n    }\r\n}", "fpath": "VinylMusicPlayer\\app\\src\\main\\java\\com\\poupa\\vinylmusicplayer\\views\\TouchInterceptHorizontalScrollView.java"}}
